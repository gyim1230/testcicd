/*! For license information please see main.c90fca759ec9372f00ab.js.LICENSE.txt */
(()=>{var e={8071:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});const r={fragment:{argumentDefinitions:[],kind:"Fragment",metadata:null,name:"ExamplePageQuery",selections:[{alias:null,args:null,concreteType:"Question",kind:"LinkedField",name:"allQuestions",plural:!0,selections:[i={alias:null,args:null,kind:"ScalarField",name:"id",storageKey:null},{args:null,kind:"FragmentSpread",name:"Question_question"}],storageKey:null}],type:"Query",abstractKey:null},kind:"Request",operation:{argumentDefinitions:[],kind:"Operation",name:"ExamplePageQuery",selections:[{alias:null,args:null,concreteType:"Question",kind:"LinkedField",name:"allQuestions",plural:!0,selections:[i,{alias:null,args:null,kind:"ScalarField",name:"title",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"content",storageKey:null}],storageKey:null}]},params:{cacheID:"231ec4c6ac4274a006852806db2eb6bb",id:null,metadata:{},name:"ExamplePageQuery",operationKind:"query",text:"query ExamplePageQuery {\n  allQuestions {\n    id\n    ...Question_question\n  }\n}\n\nfragment Question_question on Question {\n  id\n  title\n  content\n}\n"}};var i;r.hash="40221d1bac5950061c4a438b459c73ec";const a=r},6692:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const r={fragment:{argumentDefinitions:i=[{defaultValue:null,kind:"LocalArgument",name:"code"}],kind:"Fragment",metadata:null,name:"LoginCallbackPageQuery",selections:a=[{alias:null,args:[{kind:"Variable",name:"code",variableName:"code"}],concreteType:"Auth",kind:"LinkedField",name:"login",plural:!1,selections:[{alias:null,args:null,kind:"ScalarField",name:"accessToken",storageKey:null}],storageKey:null}],type:"Mutation",abstractKey:null},kind:"Request",operation:{argumentDefinitions:i,kind:"Operation",name:"LoginCallbackPageQuery",selections:a},params:{cacheID:"f8791495f018ef63405ec5504ae97e4c",id:null,metadata:{},name:"LoginCallbackPageQuery",operationKind:"mutation",text:"mutation LoginCallbackPageQuery(\n  $code: String!\n) {\n  login(code: $code) {\n    accessToken\n  }\n}\n"}};var i,a;r.hash="19394340f21984253560b6eb69a8e1a4";const o=r},4653:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r={argumentDefinitions:[],kind:"Fragment",metadata:null,name:"Question_question",selections:[{alias:null,args:null,kind:"ScalarField",name:"id",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"title",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"content",storageKey:null}],type:"Question",abstractKey:null,hash:"373c5847c637e5ae0dc6da744ba8dd13"}},1305:e=>{"use strict";var t=[],n=[];function r(e,t,n,i){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var a=Object.prototype.toString,o=a.call(e);if(o!=a.call(t))return!1;switch(o){case"[object String]":return e==String(t);case"[object Number]":return!isNaN(e)&&!isNaN(t)&&e==Number(t);case"[object Date]":case"[object Boolean]":return+e==+t;case"[object RegExp]":return e.source==t.source&&e.global==t.global&&e.multiline==t.multiline&&e.ignoreCase==t.ignoreCase}for(var s=n.length;s--;)if(n[s]==e)return i[s]==t;n.push(e),i.push(t);var l=0;if("[object Array]"===o){if((l=e.length)!==t.length)return!1;for(;l--;)if(!r(e[l],t[l],n,i))return!1}else{if(e.constructor!==t.constructor)return!1;if(e.hasOwnProperty("valueOf")&&t.hasOwnProperty("valueOf"))return e.valueOf()==t.valueOf();var u=Object.keys(e);if(u.length!=Object.keys(t).length)return!1;for(var c=0;c<u.length;c++)if(!r(e[u[c]],t[u[c]],n,i))return!1}return n.pop(),i.pop(),!0}e.exports=function(e,i){var a=t.length?t.pop():[],o=n.length?n.pop():[],s=r(e,i,a,o);return a.length=0,o.length=0,t.push(a),n.push(o),s}},139:e=>{"use strict";function t(e){return function(){return e}}var n=function(){};n.thatReturns=t,n.thatReturnsFalse=t(!1),n.thatReturnsTrue=t(!0),n.thatReturnsNull=t(null),n.thatReturnsThis=function(){return this},n.thatReturnsArgument=function(e){return e},e.exports=n},3620:(e,t,n)=>{"use strict";var r=n(139);e.exports=r},8679:(e,t,n)=>{"use strict";var r=n(9864),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},o={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?o:s[e.$$typeof]||i}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=o;var u=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var i=p(n);i&&i!==h&&e(t,i,r)}var o=c(n);f&&(o=o.concat(f(n)));for(var s=l(t),v=l(n),_=0;_<o.length;++_){var g=o[_];if(!(a[g]||r&&r[g]||v&&v[g]||s&&s[g])){var m=d(n,g);try{u(t,g,m)}catch(e){}}}}return t}},1143:e=>{"use strict";e.exports=function(e,t,n,r,i,a,o,s){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,i,a,o,s],c=0;(l=new Error(t.replace(/%s/g,(function(){return u[c++]})))).name="Invariant Violation"}throw l.framesToPop=1,l}}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var o,s,l=i(e),u=1;u<arguments.length;u++){for(var c in o=Object(arguments[u]))n.call(o,c)&&(l[c]=o[c]);if(t){s=t(o);for(var f=0;f<s.length;f++)r.call(o,s[f])&&(l[s[f]]=o[s[f]])}}return l}},2703:(e,t,n)=>{"use strict";var r=n(414);function i(){}function a(){}a.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,a,o){if(o!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:i};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),i=n(7418),a=n(3840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(o(227));var s=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},v={};function _(e,t,n,r,i,a,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=o}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new _(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new _(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new _(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new _(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new _(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new _(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new _(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new _(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new _(e,5,!1,e.toLowerCase(),null,!1,!1)}));var m=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var i=g.hasOwnProperty(t)?g[t]:null;(null!==i?0===i.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!p.call(v,e)||!p.call(h,e)&&(d.test(e)?v[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(m,y);g[t]=new _(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(m,y);g[t]=new _(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(m,y);g[t]=new _(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new _(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new _("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new _(e,1,!1,e.toLowerCase(),null,!0,!0)}));var E=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=60103,k=60106,R=60107,w=60108,I=60114,C=60109,P=60110,D=60112,x=60113,O=60120,T=60115,N=60116,F=60121,A=60128,L=60129,M=60130,U=60131;if("function"==typeof Symbol&&Symbol.for){var q=Symbol.for;S=q("react.element"),k=q("react.portal"),R=q("react.fragment"),w=q("react.strict_mode"),I=q("react.profiler"),C=q("react.provider"),P=q("react.context"),D=q("react.forward_ref"),x=q("react.suspense"),O=q("react.suspense_list"),T=q("react.memo"),N=q("react.lazy"),F=q("react.block"),q("react.scope"),A=q("react.opaque.id"),L=q("react.debug_trace_mode"),M=q("react.offscreen"),U=q("react.legacy_hidden")}var z,j="function"==typeof Symbol&&Symbol.iterator;function V(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=j&&e[j]||e["@@iterator"])?e:null}function Q(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var K=!1;function B(e,t){if(!e||K)return"";K=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var i=e.stack.split("\n"),a=r.stack.split("\n"),o=i.length-1,s=a.length-1;1<=o&&0<=s&&i[o]!==a[s];)s--;for(;1<=o&&0<=s;o--,s--)if(i[o]!==a[s]){if(1!==o||1!==s)do{if(o--,0>--s||i[o]!==a[s])return"\n"+i[o].replace(" at new "," at ")}while(1<=o&&0<=s);break}}}finally{K=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?Q(e):""}function H(e){switch(e.tag){case 5:return Q(e.type);case 16:return Q("Lazy");case 13:return Q("Suspense");case 19:return Q("SuspenseList");case 0:case 2:case 15:return B(e.type,!1);case 11:return B(e.type.render,!1);case 22:return B(e.type._render,!1);case 1:return B(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case R:return"Fragment";case k:return"Portal";case I:return"Profiler";case w:return"StrictMode";case x:return"Suspense";case O:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case D:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case T:return W(e.type);case F:return W(e._render);case N:t=e._payload,e=e._init;try{return W(e(t))}catch(e){}}return null}function Y(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function G(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function $(e){e._valueTracker||(e._valueTracker=function(e){var t=G(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=G(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Y(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Y(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ie(e,t.type,n):t.hasOwnProperty("defaultValue")&&ie(e,t.type,Y(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ie(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function oe(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Y(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Y(n)}}function ue(e,t){var n=Y(t.value),r=Y(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,ve,_e=(ve=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var me={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ye=["Webkit","ms","Moz","O"];function be(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||me.hasOwnProperty(e)&&me[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=be(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(me).forEach((function(e){ye.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),me[t]=me[e]}))}));var Se=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(Se[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function Re(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ie=null,Ce=null,Pe=null;function De(e){if(e=Zr(e)){if("function"!=typeof Ie)throw Error(o(280));var t=e.stateNode;t&&(t=ti(t),Ie(e.stateNode,e.type,t))}}function xe(e){Ce?Pe?Pe.push(e):Pe=[e]:Ce=e}function Oe(){if(Ce){var e=Ce,t=Pe;if(Pe=Ce=null,De(e),t)for(e=0;e<t.length;e++)De(t[e])}}function Te(e,t){return e(t)}function Ne(e,t,n,r,i){return e(t,n,r,i)}function Fe(){}var Ae=Te,Le=!1,Me=!1;function Ue(){null===Ce&&null===Pe||(Fe(),Oe())}function qe(e,t){var n=e.stateNode;if(null===n)return null;var r=ti(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var ze=!1;if(f)try{var je={};Object.defineProperty(je,"passive",{get:function(){ze=!0}}),window.addEventListener("test",je,je),window.removeEventListener("test",je,je)}catch(ve){ze=!1}function Ve(e,t,n,r,i,a,o,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Qe=!1,Ke=null,Be=!1,He=null,We={onError:function(e){Qe=!0,Ke=e}};function Ye(e,t,n,r,i,a,o,s,l){Qe=!1,Ke=null,Ve.apply(We,arguments)}function Ge(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function $e(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ge(e)!==e)throw Error(o(188))}function Je(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return Xe(i),e;if(a===r)return Xe(i),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=i,r=a;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=a;break}if(l===r){s=!0,r=i,n=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===n){s=!0,n=a,r=i;break}if(l===r){s=!0,r=a,n=i;break}l=l.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,it=!1,at=[],ot=null,st=null,lt=null,ut=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,i){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:i,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":ot=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function vt(e,t,n,r,i,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,i,a),null!==t&&null!==(t=Zr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function _t(e){var t=Jr(e.target);if(null!==t){var n=Ge(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=$e(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function mt(e,t,n){gt(e)&&n.delete(t)}function yt(){for(it=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==ot&&gt(ot)&&(ot=null),null!==st&&gt(st)&&(st=null),null!==lt&&gt(lt)&&(lt=null),ut.forEach(mt),ct.forEach(mt)}function bt(e,t){e.blockedOn===t&&(e.blockedOn=null,it||(it=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,yt)))}function Et(e){function t(t){return bt(t,e)}if(0<at.length){bt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ot&&bt(ot,e),null!==st&&bt(st,e),null!==lt&&bt(lt,e),ut.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)_t(n),null===n.blockedOn&&ft.shift()}function St(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:St("Animation","AnimationEnd"),animationiteration:St("Animation","AnimationIteration"),animationstart:St("Animation","AnimationStart"),transitionend:St("Transition","TransitionEnd")},Rt={},wt={};function It(e){if(Rt[e])return Rt[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in wt)return Rt[e]=n[t];return e}f&&(wt=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Ct=It("animationend"),Pt=It("animationiteration"),Dt=It("animationstart"),xt=It("transitionend"),Ot=new Map,Tt=new Map,Nt=["abort","abort",Ct,"animationEnd",Pt,"animationIteration",Dt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",xt,"transitionEnd","waiting","waiting"];function Ft(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1];i="on"+(i[0].toUpperCase()+i.slice(1)),Tt.set(r,t),Ot.set(r,i),u(i,[r])}}(0,a.unstable_now)();var At=8;function Lt(e){if(0!=(1&e))return At=15,1;if(0!=(2&e))return At=14,2;if(0!=(4&e))return At=13,4;var t=24&e;return 0!==t?(At=12,t):0!=(32&e)?(At=11,32):0!=(t=192&e)?(At=10,t):0!=(256&e)?(At=9,256):0!=(t=3584&e)?(At=8,t):0!=(4096&e)?(At=7,4096):0!=(t=4186112&e)?(At=6,t):0!=(t=62914560&e)?(At=5,t):67108864&e?(At=4,67108864):0!=(134217728&e)?(At=3,134217728):0!=(t=805306368&e)?(At=2,t):0!=(1073741824&e)?(At=1,1073741824):(At=8,e)}function Mt(e,t){var n=e.pendingLanes;if(0===n)return At=0;var r=0,i=0,a=e.expiredLanes,o=e.suspendedLanes,s=e.pingedLanes;if(0!==a)r=a,i=At=15;else if(0!=(a=134217727&n)){var l=a&~o;0!==l?(r=Lt(l),i=At):0!=(s&=a)&&(r=Lt(s),i=At)}else 0!=(a=n&~o)?(r=Lt(a),i=At):0!==s&&(r=Lt(s),i=At);if(0===r)return 0;if(r=n&((0>(r=31-Qt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&o)){if(Lt(t),i<=At)return t;At=i}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-Qt(t)),r|=e[n],t&=~i;return r}function Ut(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function qt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=zt(24&~t))?qt(10,t):e;case 10:return 0===(e=zt(192&~t))?qt(8,t):e;case 8:return 0===(e=zt(3584&~t))&&0===(e=zt(4186112&~t))&&(e=512),e;case 2:return 0===(t=zt(805306368&~t))&&(t=268435456),t}throw Error(o(358,e))}function zt(e){return e&-e}function jt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Vt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Qt(t)]=n}var Qt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Kt(e)/Bt|0)|0},Kt=Math.log,Bt=Math.LN2,Ht=a.unstable_UserBlockingPriority,Wt=a.unstable_runWithPriority,Yt=!0;function Gt(e,t,n,r){Le||Fe();var i=Xt,a=Le;Le=!0;try{Ne(i,e,t,n,r)}finally{(Le=a)||Ue()}}function $t(e,t,n,r){Wt(Ht,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){var i;if(Yt)if((i=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Jt(e,t,n,r);if(null===a)i&&ht(e,r);else{if(i){if(-1<dt.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,i){switch(t){case"focusin":return ot=vt(ot,e,t,n,r,i),!0;case"dragenter":return st=vt(st,e,t,n,r,i),!0;case"mouseover":return lt=vt(lt,e,t,n,r,i),!0;case"pointerover":var a=i.pointerId;return ut.set(a,vt(ut.get(a)||null,e,t,n,r,i)),!0;case"gotpointercapture":return a=i.pointerId,ct.set(a,vt(ct.get(a)||null,e,t,n,r,i)),!0}return!1}(a,e,t,n,r))return;ht(e,r)}Or(e,t,r,null,n)}}}function Jt(e,t,n,r){var i=we(r);if(null!==(i=Jr(i))){var a=Ge(i);if(null===a)i=null;else{var o=a.tag;if(13===o){if(null!==(i=$e(a)))return i;i=null}else if(3===o){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;i=null}else a!==i&&(i=null)}}return Or(e,t,r,i,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,i="value"in Zt?Zt.value:Zt.textContent,a=i.length;for(e=0;e<r&&n[e]===i[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===i[a-t];t++);return tn=i.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function an(){return!0}function on(){return!1}function sn(e){function t(t,n,r,i,a){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(i):i[o]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?an:on,this.isPropagationStopped=on,this}return i(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=an)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=an)},persist:function(){},isPersistent:an}),t}var ln,un,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=sn(fn),pn=i({},fn,{view:0,detail:0}),hn=sn(pn),vn=i({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:In,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(ln=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=ln=0,cn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:un}}),_n=sn(vn),gn=sn(i({},vn,{dataTransfer:0})),mn=sn(i({},pn,{relatedTarget:0})),yn=sn(i({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=sn(i({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),En=sn(i({},fn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Rn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function wn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Rn[e])&&!!t[e]}function In(){return wn}var Cn=sn(i({},pn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:In,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Pn=sn(i({},vn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Dn=sn(i({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:In})),xn=sn(i({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),On=sn(i({},vn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Tn=[9,13,27,32],Nn=f&&"CompositionEvent"in window,Fn=null;f&&"documentMode"in document&&(Fn=document.documentMode);var An=f&&"TextEvent"in window&&!Fn,Ln=f&&(!Nn||Fn&&8<Fn&&11>=Fn),Mn=String.fromCharCode(32),Un=!1;function qn(e,t){switch(e){case"keyup":return-1!==Tn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var jn=!1,Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function Kn(e,t,n,r){xe(r),0<(t=Nr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Bn=null,Hn=null;function Wn(e){wr(e,0)}function Yn(e){if(X(ei(e)))return e}function Gn(e,t){if("change"===e)return t}var $n=!1;if(f){var Xn;if(f){var Jn="oninput"in document;if(!Jn){var Zn=document.createElement("div");Zn.setAttribute("oninput","return;"),Jn="function"==typeof Zn.oninput}Xn=Jn}else Xn=!1;$n=Xn&&(!document.documentMode||9<document.documentMode)}function er(){Bn&&(Bn.detachEvent("onpropertychange",tr),Hn=Bn=null)}function tr(e){if("value"===e.propertyName&&Yn(Hn)){var t=[];if(Kn(t,Hn,e,we(e)),e=Wn,Le)e(t);else{Le=!0;try{Te(e,t)}finally{Le=!1,Ue()}}}}function nr(e,t,n){"focusin"===e?(er(),Hn=n,(Bn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Hn)}function ir(e,t){if("click"===e)return Yn(t)}function ar(e,t){if("input"===e||"change"===e)return Yn(t)}var or="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},sr=Object.prototype.hasOwnProperty;function lr(e,t){if(or(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!sr.call(t,n[r])||!or(e[n[r]],t[n[r]]))return!1;return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,vr=null,_r=null,gr=null,mr=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;mr||null==vr||vr!==J(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&lr(gr,r)||(gr=r,0<(r=Nr(_r,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}Ft("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ft("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ft(Nt,2);for(var br="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Er=0;Er<br.length;Er++)Tt.set(br[Er],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Sr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Sr));function Rr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,a,s,l,u){if(Ye.apply(this,arguments),Qe){if(!Qe)throw Error(o(198));var c=Ke;Qe=!1,Ke=null,Be||(Be=!0,He=c)}}(r,t,void 0,e),e.currentTarget=null}function wr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var o=r.length-1;0<=o;o--){var s=r[o],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==a&&i.isPropagationStopped())break e;Rr(i,s,u),a=l}else for(o=0;o<r.length;o++){if(l=(s=r[o]).instance,u=s.currentTarget,s=s.listener,l!==a&&i.isPropagationStopped())break e;Rr(i,s,u),a=l}}}if(Be)throw e=He,Be=!1,He=null,e}function Ir(e,t){var n=ni(t),r=e+"__bubble";n.has(r)||(xr(t,e,2,!1),n.add(r))}var Cr="_reactListening"+Math.random().toString(36).slice(2);function Pr(e){e[Cr]||(e[Cr]=!0,s.forEach((function(t){kr.has(t)||Dr(t,!1,e,null),Dr(t,!0,e,null)})))}function Dr(e,t,n,r){var i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&kr.has(e)){if("scroll"!==e)return;i|=2,a=r}var o=ni(a),s=e+"__"+(t?"capture":"bubble");o.has(s)||(t&&(i|=4),xr(a,e,i,t),o.add(s))}function xr(e,t,n,r){var i=Tt.get(t);switch(void 0===i?2:i){case 0:i=Gt;break;case 1:i=$t;break;default:i=Xt}n=i.bind(null,t,n,e),i=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Or(e,t,n,r,i){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===o)for(o=r.return;null!==o;){var l=o.tag;if((3===l||4===l)&&((l=o.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;o=o.return}for(;null!==s;){if(null===(o=Jr(s)))return;if(5===(l=o.tag)||6===l){r=a=o;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(Me)return e();Me=!0;try{Ae(e,t,n)}finally{Me=!1,Ue()}}((function(){var r=a,i=we(n),o=[];e:{var s=Ot.get(e);if(void 0!==s){var l=dn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Cn;break;case"focusin":u="focus",l=mn;break;case"focusout":u="blur",l=mn;break;case"beforeblur":case"afterblur":l=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=_n;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Dn;break;case Ct:case Pt:case Dt:l=yn;break;case xt:l=xn;break;case"scroll":l=hn;break;case"wheel":l=On;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Pn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==s?s+"Capture":null:s;c=[];for(var p,h=r;null!==h;){var v=(p=h).stateNode;if(5===p.tag&&null!==v&&(p=v,null!==d&&null!=(v=qe(h,d))&&c.push(Tr(h,v,p))),f)break;h=h.return}0<c.length&&(s=new l(s,u,null,n,i),o.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!Jr(u)&&!u[$r])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?Jr(u):null)&&(u!==(f=Ge(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=_n,v="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,v="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?s:ei(l),p=null==u?s:ei(u),(s=new c(v,h+"leave",l,n,i)).target=f,s.relatedTarget=p,v=null,Jr(i)===r&&((c=new c(d,h+"enter",u,n,i)).target=p,c.relatedTarget=f,v=c),f=v,l&&u)e:{for(d=u,h=0,p=c=l;p;p=Fr(p))h++;for(p=0,v=d;v;v=Fr(v))p++;for(;0<h-p;)c=Fr(c),h--;for(;0<p-h;)d=Fr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Fr(c),d=Fr(d)}c=null}else c=null;null!==l&&Ar(o,s,l,c,!1),null!==u&&null!==f&&Ar(o,f,u,c,!0)}if("select"===(l=(s=r?ei(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var _=Gn;else if(Qn(s))if($n)_=ar;else{_=rr;var g=nr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(_=ir);switch(_&&(_=_(e,r))?Kn(o,_,n,i):(g&&g(e,s,r),"focusout"===e&&(g=s._wrapperState)&&g.controlled&&"number"===s.type&&ie(s,"number",s.value)),g=r?ei(r):window,e){case"focusin":(Qn(g)||"true"===g.contentEditable)&&(vr=g,_r=r,gr=null);break;case"focusout":gr=_r=vr=null;break;case"mousedown":mr=!0;break;case"contextmenu":case"mouseup":case"dragend":mr=!1,yr(o,n,i);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":yr(o,n,i)}var m;if(Nn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else jn?qn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Ln&&"ko"!==n.locale&&(jn||"onCompositionStart"!==y?"onCompositionEnd"===y&&jn&&(m=nn()):(en="value"in(Zt=i)?Zt.value:Zt.textContent,jn=!0)),0<(g=Nr(r,y)).length&&(y=new En(y,e,null,n,i),o.push({event:y,listeners:g}),(m||null!==(m=zn(n)))&&(y.data=m))),(m=An?function(e,t){switch(e){case"compositionend":return zn(t);case"keypress":return 32!==t.which?null:(Un=!0,Mn);case"textInput":return(e=t.data)===Mn&&Un?null:e;default:return null}}(e,n):function(e,t){if(jn)return"compositionend"===e||!Nn&&qn(e,t)?(e=nn(),tn=en=Zt=null,jn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Nr(r,"onBeforeInput")).length&&(i=new En("onBeforeInput","beforeinput",null,n,i),o.push({event:i,listeners:r}),i.data=m)}wr(o,t)}))}function Tr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Nr(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,a=i.stateNode;5===i.tag&&null!==a&&(i=a,null!=(a=qe(e,n))&&r.unshift(Tr(e,a,i)),null!=(a=qe(e,t))&&r.push(Tr(e,a,i))),e=e.return}return r}function Fr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Ar(e,t,n,r,i){for(var a=t._reactName,o=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,i?null!=(l=qe(n,a))&&o.unshift(Tr(n,l,s)):i||null!=(l=qe(n,a))&&o.push(Tr(n,l,s))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}function Lr(){}var Mr=null,Ur=null;function qr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function zr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var jr="function"==typeof setTimeout?setTimeout:void 0,Vr="function"==typeof clearTimeout?clearTimeout:void 0;function Qr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Kr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Br(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Hr=0,Wr=Math.random().toString(36).slice(2),Yr="__reactFiber$"+Wr,Gr="__reactProps$"+Wr,$r="__reactContainer$"+Wr,Xr="__reactEvents$"+Wr;function Jr(e){var t=e[Yr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[$r]||n[Yr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Br(e);null!==e;){if(n=e[Yr])return n;e=Br(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Yr]||e[$r])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ei(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function ti(e){return e[Gr]||null}function ni(e){var t=e[Xr];return void 0===t&&(t=e[Xr]=new Set),t}var ri=[],ii=-1;function ai(e){return{current:e}}function oi(e){0>ii||(e.current=ri[ii],ri[ii]=null,ii--)}function si(e,t){ii++,ri[ii]=e.current,e.current=t}var li={},ui=ai(li),ci=ai(!1),fi=li;function di(e,t){var n=e.type.contextTypes;if(!n)return li;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in n)a[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function pi(e){return null!=e.childContextTypes}function hi(){oi(ci),oi(ui)}function vi(e,t,n){if(ui.current!==li)throw Error(o(168));si(ui,t),si(ci,n)}function _i(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(o(108,W(t)||"Unknown",a));return i({},n,r)}function gi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||li,fi=ui.current,si(ui,e),si(ci,ci.current),!0}function mi(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=_i(e,t,fi),r.__reactInternalMemoizedMergedChildContext=e,oi(ci),oi(ui),si(ui,e)):oi(ci),si(ci,n)}var yi=null,bi=null,Ei=a.unstable_runWithPriority,Si=a.unstable_scheduleCallback,ki=a.unstable_cancelCallback,Ri=a.unstable_shouldYield,wi=a.unstable_requestPaint,Ii=a.unstable_now,Ci=a.unstable_getCurrentPriorityLevel,Pi=a.unstable_ImmediatePriority,Di=a.unstable_UserBlockingPriority,xi=a.unstable_NormalPriority,Oi=a.unstable_LowPriority,Ti=a.unstable_IdlePriority,Ni={},Fi=void 0!==wi?wi:function(){},Ai=null,Li=null,Mi=!1,Ui=Ii(),qi=1e4>Ui?Ii:function(){return Ii()-Ui};function zi(){switch(Ci()){case Pi:return 99;case Di:return 98;case xi:return 97;case Oi:return 96;case Ti:return 95;default:throw Error(o(332))}}function ji(e){switch(e){case 99:return Pi;case 98:return Di;case 97:return xi;case 96:return Oi;case 95:return Ti;default:throw Error(o(332))}}function Vi(e,t){return e=ji(e),Ei(e,t)}function Qi(e,t,n){return e=ji(e),Si(e,t,n)}function Ki(){if(null!==Li){var e=Li;Li=null,ki(e)}Bi()}function Bi(){if(!Mi&&null!==Ai){Mi=!0;var e=0;try{var t=Ai;Vi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ai=null}catch(t){throw null!==Ai&&(Ai=Ai.slice(e+1)),Si(Pi,Ki),t}finally{Mi=!1}}}var Hi=E.ReactCurrentBatchConfig;function Wi(e,t){if(e&&e.defaultProps){for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Yi=ai(null),Gi=null,$i=null,Xi=null;function Ji(){Xi=$i=Gi=null}function Zi(e){var t=Yi.current;oi(Yi),e.type._context._currentValue=t}function ea(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ta(e,t){Gi=e,Xi=$i=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(No=!0),e.firstContext=null)}function na(e,t){if(Xi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Xi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===$i){if(null===Gi)throw Error(o(308));$i=t,Gi.dependencies={lanes:0,firstContext:t,responders:null}}else $i=$i.next=t;return e._currentValue}var ra=!1;function ia(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function aa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function oa(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function sa(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function la(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?i=a=o:a=a.next=o,n=n.next}while(null!==n);null===a?i=a=t:a=a.next=t}else i=a=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ua(e,t,n,r){var a=e.updateQueue;ra=!1;var o=a.firstBaseUpdate,s=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var u=l,c=u.next;u.next=null,null===s?o=c:s.next=c,s=u;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==s&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=u)}}if(null!==o){for(d=a.baseState,s=0,f=c=u=null;;){l=o.lane;var p=o.eventTime;if((r&l)===l){null!==f&&(f=f.next={eventTime:p,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var h=e,v=o;switch(l=t,p=n,v.tag){case 1:if("function"==typeof(h=v.payload)){d=h.call(p,d,l);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=v.payload)?h.call(p,d,l):h))break e;d=i({},d,l);break e;case 2:ra=!0}}null!==o.callback&&(e.flags|=32,null===(l=a.effects)?a.effects=[o]:l.push(o))}else p={eventTime:p,lane:l,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===f?(c=f=p,u=d):f=f.next=p,s|=l;if(null===(o=o.next)){if(null===(l=a.shared.pending))break;o=l.next,l.next=null,a.lastBaseUpdate=l,a.shared.pending=null}}null===f&&(u=d),a.baseState=u,a.firstBaseUpdate=c,a.lastBaseUpdate=f,As|=s,e.lanes=s,e.memoizedState=d}}function ca(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(o(191,i));i.call(r)}}}var fa=(new r.Component).refs;function da(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pa={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ol(),i=sl(e),a=oa(r,i);a.payload=t,null!=n&&(a.callback=n),sa(e,a),ll(e,i,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ol(),i=sl(e),a=oa(r,i);a.tag=1,a.payload=t,null!=n&&(a.callback=n),sa(e,a),ll(e,i,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ol(),r=sl(e),i=oa(n,r);i.tag=2,null!=t&&(i.callback=t),sa(e,i),ll(e,r,n)}};function ha(e,t,n,r,i,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(i,a))}function va(e,t,n){var r=!1,i=li,a=t.contextType;return"object"==typeof a&&null!==a?a=na(a):(i=pi(t)?fi:ui.current,a=(r=null!=(r=t.contextTypes))?di(e,i):li),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pa,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=a),t}function _a(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pa.enqueueReplaceState(t,t.state,null)}function ga(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=fa,ia(e);var a=t.contextType;"object"==typeof a&&null!==a?i.context=na(a):(a=pi(t)?fi:ui.current,i.context=di(e,a)),ua(e,n,i,r),i.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(da(e,t,a,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&pa.enqueueReplaceState(i,i.state,null),ua(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4)}var ma=Array.isArray;function ya(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===fa&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function ba(e,t){if("textarea"!==e.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ea(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=zl(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Kl(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=ya(e,t,n),r.return=e,r):((r=jl(n.type,n.key,n.props,null,e.mode,r)).ref=ya(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Bl(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Vl(n,e.mode,r,a)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Kl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=jl(t.type,t.key,t.props,null,e.mode,n)).ref=ya(e,null,t),n.return=e,n;case k:return(t=Bl(t,e.mode,n)).return=e,t}if(ma(t)||V(t))return(t=Vl(t,e.mode,n,null)).return=e,t;ba(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===i?n.type===R?f(e,t,n.props.children,r,i):u(e,t,n,r):null;case k:return n.key===i?c(e,t,n,r):null}if(ma(n)||V(n))return null!==i?null:f(e,t,n,r,null);ba(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return e=e.get(null===r.key?n:r.key)||null,r.type===R?f(t,e,r.props.children,i,r.key):u(t,e,r,i);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(ma(r)||V(r))return f(t,e=e.get(n)||null,r,i,null);ba(t,r)}return null}function v(i,o,s,l){for(var u=null,c=null,f=o,v=o=0,_=null;null!==f&&v<s.length;v++){f.index>v?(_=f,f=null):_=f.sibling;var g=p(i,f,s[v],l);if(null===g){null===f&&(f=_);break}e&&f&&null===g.alternate&&t(i,f),o=a(g,o,v),null===c?u=g:c.sibling=g,c=g,f=_}if(v===s.length)return n(i,f),u;if(null===f){for(;v<s.length;v++)null!==(f=d(i,s[v],l))&&(o=a(f,o,v),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(i,f);v<s.length;v++)null!==(_=h(f,i,v,s[v],l))&&(e&&null!==_.alternate&&f.delete(null===_.key?v:_.key),o=a(_,o,v),null===c?u=_:c.sibling=_,c=_);return e&&f.forEach((function(e){return t(i,e)})),u}function _(i,s,l,u){var c=V(l);if("function"!=typeof c)throw Error(o(150));if(null==(l=c.call(l)))throw Error(o(151));for(var f=c=null,v=s,_=s=0,g=null,m=l.next();null!==v&&!m.done;_++,m=l.next()){v.index>_?(g=v,v=null):g=v.sibling;var y=p(i,v,m.value,u);if(null===y){null===v&&(v=g);break}e&&v&&null===y.alternate&&t(i,v),s=a(y,s,_),null===f?c=y:f.sibling=y,f=y,v=g}if(m.done)return n(i,v),c;if(null===v){for(;!m.done;_++,m=l.next())null!==(m=d(i,m.value,u))&&(s=a(m,s,_),null===f?c=m:f.sibling=m,f=m);return c}for(v=r(i,v);!m.done;_++,m=l.next())null!==(m=h(v,i,_,m.value,u))&&(e&&null!==m.alternate&&v.delete(null===m.key?_:m.key),s=a(m,s,_),null===f?c=m:f.sibling=m,f=m);return e&&v.forEach((function(e){return t(i,e)})),c}return function(e,r,a,l){var u="object"==typeof a&&null!==a&&a.type===R&&null===a.key;u&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case S:e:{for(c=a.key,u=r;null!==u;){if(u.key===c){switch(u.tag){case 7:if(a.type===R){n(e,u.sibling),(r=i(u,a.props.children)).return=e,e=r;break e}break;default:if(u.elementType===a.type){n(e,u.sibling),(r=i(u,a.props)).ref=ya(e,u,a),r.return=e,e=r;break e}}n(e,u);break}t(e,u),u=u.sibling}a.type===R?((r=Vl(a.props.children,e.mode,l,a.key)).return=e,e=r):((l=jl(a.type,a.key,a.props,null,e.mode,l)).ref=ya(e,r,a),l.return=e,e=l)}return s(e);case k:e:{for(u=a.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=i(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Bl(a,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,a)).return=e,e=r):(n(e,r),(r=Kl(a,e.mode,l)).return=e,e=r),s(e);if(ma(a))return v(e,r,a,l);if(V(a))return _(e,r,a,l);if(c&&ba(e,a),void 0===a&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(o(152,W(e.type)||"Component"))}return n(e,r)}}var Sa=Ea(!0),ka=Ea(!1),Ra={},wa=ai(Ra),Ia=ai(Ra),Ca=ai(Ra);function Pa(e){if(e===Ra)throw Error(o(174));return e}function Da(e,t){switch(si(Ca,t),si(Ia,e),si(wa,Ra),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}oi(wa),si(wa,t)}function xa(){oi(wa),oi(Ia),oi(Ca)}function Oa(e){Pa(Ca.current);var t=Pa(wa.current),n=pe(t,e.type);t!==n&&(si(Ia,e),si(wa,n))}function Ta(e){Ia.current===e&&(oi(wa),oi(Ia))}var Na=ai(0);function Fa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Aa=null,La=null,Ma=!1;function Ua(e,t){var n=Ul(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function qa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function za(e){if(Ma){var t=La;if(t){var n=t;if(!qa(e,t)){if(!(t=Kr(n.nextSibling))||!qa(e,t))return e.flags=-1025&e.flags|2,Ma=!1,void(Aa=e);Ua(Aa,n)}Aa=e,La=Kr(t.firstChild)}else e.flags=-1025&e.flags|2,Ma=!1,Aa=e}}function ja(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Aa=e}function Va(e){if(e!==Aa)return!1;if(!Ma)return ja(e),Ma=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!zr(t,e.memoizedProps))for(t=La;t;)Ua(e,t),t=Kr(t.nextSibling);if(ja(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){La=Kr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}La=null}}else La=Aa?Kr(e.stateNode.nextSibling):null;return!0}function Qa(){La=Aa=null,Ma=!1}var Ka=[];function Ba(){for(var e=0;e<Ka.length;e++)Ka[e]._workInProgressVersionPrimary=null;Ka.length=0}var Ha=E.ReactCurrentDispatcher,Wa=E.ReactCurrentBatchConfig,Ya=0,Ga=null,$a=null,Xa=null,Ja=!1,Za=!1;function eo(){throw Error(o(321))}function to(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!or(e[n],t[n]))return!1;return!0}function no(e,t,n,r,i,a){if(Ya=a,Ga=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ha.current=null===e||null===e.memoizedState?Do:xo,e=n(r,i),Za){a=0;do{if(Za=!1,!(25>a))throw Error(o(301));a+=1,Xa=$a=null,t.updateQueue=null,Ha.current=Oo,e=n(r,i)}while(Za)}if(Ha.current=Po,t=null!==$a&&null!==$a.next,Ya=0,Xa=$a=Ga=null,Ja=!1,t)throw Error(o(300));return e}function ro(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Xa?Ga.memoizedState=Xa=e:Xa=Xa.next=e,Xa}function io(){if(null===$a){var e=Ga.alternate;e=null!==e?e.memoizedState:null}else e=$a.next;var t=null===Xa?Ga.memoizedState:Xa.next;if(null!==t)Xa=t,$a=e;else{if(null===e)throw Error(o(310));e={memoizedState:($a=e).memoizedState,baseState:$a.baseState,baseQueue:$a.baseQueue,queue:$a.queue,next:null},null===Xa?Ga.memoizedState=Xa=e:Xa=Xa.next=e}return Xa}function ao(e,t){return"function"==typeof t?t(e):t}function oo(e){var t=io(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=$a,i=r.baseQueue,a=n.pending;if(null!==a){if(null!==i){var s=i.next;i.next=a.next,a.next=s}r.baseQueue=i=a,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=s=a=null,u=i;do{var c=u.lane;if((Ya&c)===c)null!==l&&(l=l.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var f={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===l?(s=l=f,a=r):l=l.next=f,Ga.lanes|=c,As|=c}u=u.next}while(null!==u&&u!==i);null===l?a=r:l.next=s,or(r,t.memoizedState)||(No=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function so(e){var t=io(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,a=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{a=e(a,s.action),s=s.next}while(s!==i);or(a,t.memoizedState)||(No=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function lo(e,t,n){var r=t._getVersion;r=r(t._source);var i=t._workInProgressVersionPrimary;if(null!==i?e=i===r:(e=e.mutableReadLanes,(e=(Ya&e)===e)&&(t._workInProgressVersionPrimary=r,Ka.push(t))),e)return n(t._source);throw Ka.push(t),Error(o(350))}function uo(e,t,n,r){var i=Cs;if(null===i)throw Error(o(349));var a=t._getVersion,s=a(t._source),l=Ha.current,u=l.useState((function(){return lo(i,t,n)})),c=u[1],f=u[0];u=Xa;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,v=d.source;d=d.subscribe;var _=Ga;return e.memoizedState={refs:p,source:t,subscribe:r},l.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!or(s,e)){e=n(t._source),or(f,e)||(c(e),e=sl(_),i.mutableReadLanes|=e&i.pendingLanes),e=i.mutableReadLanes,i.entangledLanes|=e;for(var r=i.entanglements,o=e;0<o;){var l=31-Qt(o),u=1<<l;r[l]|=e,o&=~u}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=sl(_);i.mutableReadLanes|=r&i.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),or(h,n)&&or(v,t)&&or(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ao,lastRenderedState:f}).dispatch=c=Co.bind(null,Ga,e),u.queue=e,u.baseQueue=null,f=lo(i,t,n),u.memoizedState=u.baseState=f),f}function co(e,t,n){return uo(io(),e,t,n)}function fo(e){var t=ro();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ao,lastRenderedState:e}).dispatch=Co.bind(null,Ga,e),[t.memoizedState,e]}function po(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ga.updateQueue)?(t={lastEffect:null},Ga.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ho(e){return e={current:e},ro().memoizedState=e}function vo(){return io().memoizedState}function _o(e,t,n,r){var i=ro();Ga.flags|=e,i.memoizedState=po(1|t,n,void 0,void 0===r?null:r)}function go(e,t,n,r){var i=io();r=void 0===r?null:r;var a=void 0;if(null!==$a){var o=$a.memoizedState;if(a=o.destroy,null!==r&&to(r,o.deps))return void po(t,n,a,r)}Ga.flags|=e,i.memoizedState=po(1|t,n,a,r)}function mo(e,t){return _o(516,4,e,t)}function yo(e,t){return go(516,4,e,t)}function bo(e,t){return go(4,2,e,t)}function Eo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function So(e,t,n){return n=null!=n?n.concat([e]):null,go(4,2,Eo.bind(null,t,e),n)}function ko(){}function Ro(e,t){var n=io();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&to(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function wo(e,t){var n=io();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&to(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Io(e,t){var n=zi();Vi(98>n?98:n,(function(){e(!0)})),Vi(97<n?97:n,(function(){var n=Wa.transition;Wa.transition=1;try{e(!1),t()}finally{Wa.transition=n}}))}function Co(e,t,n){var r=ol(),i=sl(e),a={lane:i,action:n,eagerReducer:null,eagerState:null,next:null},o=t.pending;if(null===o?a.next=a:(a.next=o.next,o.next=a),t.pending=a,o=e.alternate,e===Ga||null!==o&&o===Ga)Za=Ja=!0;else{if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=o(s,n);if(a.eagerReducer=o,a.eagerState=l,or(l,s))return}catch(e){}ll(e,i,r)}}var Po={readContext:na,useCallback:eo,useContext:eo,useEffect:eo,useImperativeHandle:eo,useLayoutEffect:eo,useMemo:eo,useReducer:eo,useRef:eo,useState:eo,useDebugValue:eo,useDeferredValue:eo,useTransition:eo,useMutableSource:eo,useOpaqueIdentifier:eo,unstable_isNewReconciler:!1},Do={readContext:na,useCallback:function(e,t){return ro().memoizedState=[e,void 0===t?null:t],e},useContext:na,useEffect:mo,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,_o(4,2,Eo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return _o(4,2,e,t)},useMemo:function(e,t){var n=ro();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ro();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Co.bind(null,Ga,e),[r.memoizedState,e]},useRef:ho,useState:fo,useDebugValue:ko,useDeferredValue:function(e){var t=fo(e),n=t[0],r=t[1];return mo((function(){var t=Wa.transition;Wa.transition=1;try{r(e)}finally{Wa.transition=t}}),[e]),n},useTransition:function(){var e=fo(!1),t=e[0];return ho(e=Io.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ro();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},uo(r,e,t,n)},useOpaqueIdentifier:function(){if(Ma){var e=!1,t=function(e){return{$$typeof:A,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Hr++).toString(36))),Error(o(355))})),n=fo(t)[1];return 0==(2&Ga.mode)&&(Ga.flags|=516,po(5,(function(){n("r:"+(Hr++).toString(36))}),void 0,null)),t}return fo(t="r:"+(Hr++).toString(36)),t},unstable_isNewReconciler:!1},xo={readContext:na,useCallback:Ro,useContext:na,useEffect:yo,useImperativeHandle:So,useLayoutEffect:bo,useMemo:wo,useReducer:oo,useRef:vo,useState:function(){return oo(ao)},useDebugValue:ko,useDeferredValue:function(e){var t=oo(ao),n=t[0],r=t[1];return yo((function(){var t=Wa.transition;Wa.transition=1;try{r(e)}finally{Wa.transition=t}}),[e]),n},useTransition:function(){var e=oo(ao)[0];return[vo().current,e]},useMutableSource:co,useOpaqueIdentifier:function(){return oo(ao)[0]},unstable_isNewReconciler:!1},Oo={readContext:na,useCallback:Ro,useContext:na,useEffect:yo,useImperativeHandle:So,useLayoutEffect:bo,useMemo:wo,useReducer:so,useRef:vo,useState:function(){return so(ao)},useDebugValue:ko,useDeferredValue:function(e){var t=so(ao),n=t[0],r=t[1];return yo((function(){var t=Wa.transition;Wa.transition=1;try{r(e)}finally{Wa.transition=t}}),[e]),n},useTransition:function(){var e=so(ao)[0];return[vo().current,e]},useMutableSource:co,useOpaqueIdentifier:function(){return so(ao)[0]},unstable_isNewReconciler:!1},To=E.ReactCurrentOwner,No=!1;function Fo(e,t,n,r){t.child=null===e?ka(t,null,n,r):Sa(t,e.child,n,r)}function Ao(e,t,n,r,i){n=n.render;var a=t.ref;return ta(t,i),r=no(e,t,n,r,a,i),null===e||No?(t.flags|=1,Fo(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,Zo(e,t,i))}function Lo(e,t,n,r,i,a){if(null===e){var o=n.type;return"function"!=typeof o||ql(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=jl(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Mo(e,t,o,r,i,a))}return o=e.child,0==(i&a)&&(i=o.memoizedProps,(n=null!==(n=n.compare)?n:lr)(i,r)&&e.ref===t.ref)?Zo(e,t,a):(t.flags|=1,(e=zl(o,r)).ref=t.ref,e.return=t,t.child=e)}function Mo(e,t,n,r,i,a){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(No=!1,0==(a&i))return t.lanes=e.lanes,Zo(e,t,a);0!=(16384&e.flags)&&(No=!0)}return zo(e,t,n,r,a)}function Uo(e,t,n){var r=t.pendingProps,i=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},_l(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},_l(0,e),null;t.memoizedState={baseLanes:0},_l(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,_l(0,r);return Fo(e,t,i,n),t.child}function qo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function zo(e,t,n,r,i){var a=pi(n)?fi:ui.current;return a=di(t,a),ta(t,i),n=no(e,t,n,r,a,i),null===e||No?(t.flags|=1,Fo(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,Zo(e,t,i))}function jo(e,t,n,r,i){if(pi(n)){var a=!0;gi(t)}else a=!1;if(ta(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),va(t,n,r),ga(t,n,r,i),r=!0;else if(null===e){var o=t.stateNode,s=t.memoizedProps;o.props=s;var l=o.context,u=n.contextType;u="object"==typeof u&&null!==u?na(u):di(t,u=pi(n)?fi:ui.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;f||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==r||l!==u)&&_a(t,o,r,u),ra=!1;var d=t.memoizedState;o.state=d,ua(t,r,o,i),l=t.memoizedState,s!==r||d!==l||ci.current||ra?("function"==typeof c&&(da(t,n,c,r),l=t.memoizedState),(s=ra||ha(t,n,s,r,d,l,u))?(f||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4)):("function"==typeof o.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),o.props=r,o.state=l,o.context=u,r=s):("function"==typeof o.componentDidMount&&(t.flags|=4),r=!1)}else{o=t.stateNode,aa(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:Wi(t.type,s),o.props=u,f=t.pendingProps,d=o.context,l="object"==typeof(l=n.contextType)&&null!==l?na(l):di(t,l=pi(n)?fi:ui.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==f||d!==l)&&_a(t,o,r,l),ra=!1,d=t.memoizedState,o.state=d,ua(t,r,o,i);var h=t.memoizedState;s!==f||d!==h||ci.current||ra?("function"==typeof p&&(da(t,n,p,r),h=t.memoizedState),(u=ra||ha(t,n,u,r,d,h,l))?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,h,l),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),o.props=r,o.state=h,o.context=l,r=u):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Vo(e,t,n,r,a,i)}function Vo(e,t,n,r,i,a){qo(e,t);var o=0!=(64&t.flags);if(!r&&!o)return i&&mi(t,n,!1),Zo(e,t,a);r=t.stateNode,To.current=t;var s=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&o?(t.child=Sa(t,e.child,null,a),t.child=Sa(t,null,s,a)):Fo(e,t,s,a),t.memoizedState=r.state,i&&mi(t,n,!0),t.child}function Qo(e){var t=e.stateNode;t.pendingContext?vi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vi(0,t.context,!1),Da(e,t.containerInfo)}var Ko,Bo,Ho,Wo={dehydrated:null,retryLane:0};function Yo(e,t,n){var r,i=t.pendingProps,a=Na.current,o=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(o=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),si(Na,1&a),null===e?(void 0!==i.fallback&&za(t),e=i.children,a=i.fallback,o?(e=Go(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Wo,e):"number"==typeof i.unstable_expectedLoadTime?(e=Go(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Wo,t.lanes=33554432,e):((n=Ql({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,o?(i=function(e,t,n,r,i){var a=t.mode,o=e.child;e=o.sibling;var s={mode:"hidden",children:n};return 0==(2&a)&&t.child!==o?((n=t.child).childLanes=0,n.pendingProps=s,null!==(o=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=o,o.nextEffect=null):t.firstEffect=t.lastEffect=null):n=zl(o,s),null!==e?r=zl(e,r):(r=Vl(r,a,i,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,i.children,i.fallback,n),o=t.child,a=e.child.memoizedState,o.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},o.childLanes=e.childLanes&~n,t.memoizedState=Wo,i):(n=function(e,t,n,r){var i=e.child;return e=i.sibling,n=zl(i,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,i.children,n),t.memoizedState=null,n))}function Go(e,t,n,r){var i=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&i)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Ql(t,i,0,null),n=Vl(n,i,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function $o(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ea(e.return,t)}function Xo(e,t,n,r,i,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i,lastEffect:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=i,o.lastEffect=a)}function Jo(e,t,n){var r=t.pendingProps,i=r.revealOrder,a=r.tail;if(Fo(e,t,r.children,n),0!=(2&(r=Na.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&$o(e,n);else if(19===e.tag)$o(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(si(Na,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Fa(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Xo(t,!1,i,n,a,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Fa(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Xo(t,!0,n,null,a,t.lastEffect);break;case"together":Xo(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Zo(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),As|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=zl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function es(e,t){if(!Ma)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ts(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return pi(t.type)&&hi(),null;case 3:return xa(),oi(ci),oi(ui),Ba(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Va(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ta(t);var a=Pa(Ca.current);if(n=t.type,null!==e&&null!=t.stateNode)Bo(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(o(166));return null}if(e=Pa(wa.current),Va(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Yr]=t,r[Gr]=s,n){case"dialog":Ir("cancel",r),Ir("close",r);break;case"iframe":case"object":case"embed":Ir("load",r);break;case"video":case"audio":for(e=0;e<Sr.length;e++)Ir(Sr[e],r);break;case"source":Ir("error",r);break;case"img":case"image":case"link":Ir("error",r),Ir("load",r);break;case"details":Ir("toggle",r);break;case"input":ee(r,s),Ir("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Ir("invalid",r);break;case"textarea":le(r,s),Ir("invalid",r)}for(var u in ke(n,s),e=null,s)s.hasOwnProperty(u)&&(a=s[u],"children"===u?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):l.hasOwnProperty(u)&&null!=a&&"onScroll"===u&&Ir("scroll",r));switch(n){case"input":$(r),re(r,s,!0);break;case"textarea":$(r),ce(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Lr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Yr]=t,e[Gr]=r,Ko(e,t),t.stateNode=e,u=Re(n,r),n){case"dialog":Ir("cancel",e),Ir("close",e),a=r;break;case"iframe":case"object":case"embed":Ir("load",e),a=r;break;case"video":case"audio":for(a=0;a<Sr.length;a++)Ir(Sr[a],e);a=r;break;case"source":Ir("error",e),a=r;break;case"img":case"image":case"link":Ir("error",e),Ir("load",e),a=r;break;case"details":Ir("toggle",e),a=r;break;case"input":ee(e,r),a=Z(e,r),Ir("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=i({},r,{value:void 0}),Ir("invalid",e);break;case"textarea":le(e,r),a=se(e,r),Ir("invalid",e);break;default:a=r}ke(n,a);var c=a;for(s in c)if(c.hasOwnProperty(s)){var f=c[s];"style"===s?Ee(e,f):"dangerouslySetInnerHTML"===s?null!=(f=f?f.__html:void 0)&&_e(e,f):"children"===s?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=f&&"onScroll"===s&&Ir("scroll",e):null!=f&&b(e,s,f,u))}switch(n){case"input":$(e),re(e,r,!1);break;case"textarea":$(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Y(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?oe(e,!!r.multiple,s,!1):null!=r.defaultValue&&oe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Lr)}qr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ho(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));n=Pa(Ca.current),Pa(wa.current),Va(t)?(r=t.stateNode,n=t.memoizedProps,r[Yr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Yr]=t,t.stateNode=r)}return null;case 13:return oi(Na),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Va(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Na.current)?0===Ts&&(Ts=3):(0!==Ts&&3!==Ts||(Ts=4),null===Cs||0==(134217727&As)&&0==(134217727&Ls)||dl(Cs,Ds))),(r||n)&&(t.flags|=4),null);case 4:return xa(),null===e&&Pr(t.stateNode.containerInfo),null;case 10:return Zi(t),null;case 17:return pi(t.type)&&hi(),null;case 19:if(oi(Na),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(u=r.rendering))if(s)es(r,!1);else{if(0!==Ts||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=Fa(e))){for(t.flags|=64,es(r,!1),null!==(s=u.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(u=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=u.childLanes,s.lanes=u.lanes,s.child=u.child,s.memoizedProps=u.memoizedProps,s.memoizedState=u.memoizedState,s.updateQueue=u.updateQueue,s.type=u.type,e=u.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return si(Na,1&Na.current|2),t.child}e=e.sibling}null!==r.tail&&qi()>zs&&(t.flags|=64,s=!0,es(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=Fa(u))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),es(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Ma)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*qi()-r.renderingStartTime>zs&&1073741824!==n&&(t.flags|=64,s=!0,es(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=qi(),n.sibling=null,t=Na.current,si(Na,s?1&t|2:1&t),n):null;case 23:case 24:return gl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(o(156,t.tag))}function ns(e){switch(e.tag){case 1:pi(e.type)&&hi();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(xa(),oi(ci),oi(ui),Ba(),0!=(64&(t=e.flags)))throw Error(o(285));return e.flags=-4097&t|64,e;case 5:return Ta(e),null;case 13:return oi(Na),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return oi(Na),null;case 4:return xa(),null;case 10:return Zi(e),null;case 23:case 24:return gl(),null;default:return null}}function rs(e,t){try{var n="",r=t;do{n+=H(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i}}function is(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ko=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Bo=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Pa(wa.current);var o,s=null;switch(n){case"input":a=Z(e,a),r=Z(e,r),s=[];break;case"option":a=ae(e,a),r=ae(e,r),s=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),s=[];break;case"textarea":a=se(e,a),r=se(e,r),s=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Lr)}for(f in ke(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var u=a[f];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(l.hasOwnProperty(f)?s||(s=[]):(s=s||[]).push(f,null));for(f in r){var c=r[f];if(u=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&c!==u&&(null!=c||null!=u))if("style"===f)if(u){for(o in u)!u.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in c)c.hasOwnProperty(o)&&u[o]!==c[o]&&(n||(n={}),n[o]=c[o])}else n||(s||(s=[]),s.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(s=s||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(l.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Ir("scroll",e),s||u===c||(s=[])):"object"==typeof c&&null!==c&&c.$$typeof===A?c.toString():(s=s||[]).push(f,c))}n&&(s=s||[]).push("style",n);var f=s;(t.updateQueue=f)&&(t.flags|=4)}},Ho=function(e,t,n,r){n!==r&&(t.flags|=4)};var as="function"==typeof WeakMap?WeakMap:Map;function os(e,t,n){(n=oa(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ks||(Ks=!0,Bs=r),is(0,t)},n}function ss(e,t,n){(n=oa(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return is(0,t),r(i)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Hs?Hs=new Set([this]):Hs.add(this),is(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ls="function"==typeof WeakSet?WeakSet:Set;function us(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Fl(e,t)}else t.current=null}function cs(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Wi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Qr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(o(163))}function fs(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var i=e;r=i.next,0!=(4&(i=i.tag))&&0!=(1&i)&&(Ol(n,e),xl(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Wi(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ca(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ca(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&qr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Et(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(o(163))}function ds(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var i=n.memoizedProps.style;i=null!=i&&i.hasOwnProperty("display")?i.display:null,r.style.display=be("display",i)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function ps(e,t){if(bi&&"function"==typeof bi.onCommitFiberUnmount)try{bi.onCommitFiberUnmount(yi,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,i=r.destroy;if(r=r.tag,void 0!==i)if(0!=(4&r))Ol(t,n);else{r=t;try{i()}catch(e){Fl(r,e)}}n=n.next}while(n!==e)}break;case 1:if(us(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Fl(t,e)}break;case 5:us(t);break;case 4:ys(e,t)}}function hs(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function vs(e){return 5===e.tag||3===e.tag||4===e.tag}function _s(e){e:{for(var t=e.return;null!==t;){if(vs(t))break e;t=t.return}throw Error(o(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(o(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vs(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?gs(e,n,t):ms(e,n,t)}function gs(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Lr));else if(4!==r&&null!==(e=e.child))for(gs(e,t,n),e=e.sibling;null!==e;)gs(e,t,n),e=e.sibling}function ms(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ms(e,t,n),e=e.sibling;null!==e;)ms(e,t,n),e=e.sibling}function ys(e,t){for(var n,r,i=t,a=!1;;){if(!a){a=i.return;e:for(;;){if(null===a)throw Error(o(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===i.tag||6===i.tag){e:for(var s=e,l=i,u=l;;)if(ps(s,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===l)break e;for(;null===u.sibling;){if(null===u.return||u.return===l)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(s=n,l=i.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){n=i.stateNode.containerInfo,r=!0,i.child.return=i,i=i.child;continue}}else if(ps(e,i),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(a=!1)}i.sibling.return=i.return,i=i.sibling}}function bs(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var i=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Gr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Re(e,i),t=Re(e,r),i=0;i<a.length;i+=2){var s=a[i],l=a[i+1];"style"===s?Ee(n,l):"dangerouslySetInnerHTML"===s?_e(n,l):"children"===s?ge(n,l):b(n,s,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?oe(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?oe(n,!!r.multiple,r.defaultValue,!0):oe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(o(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,Et(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(qs=qi(),ds(t.child,!0)),void Es(t);case 19:return void Es(t);case 17:return;case 23:case 24:return void ds(t,null!==t.memoizedState)}throw Error(o(163))}function Es(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ls),t.forEach((function(t){var r=Ll.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Ss(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var ks=Math.ceil,Rs=E.ReactCurrentDispatcher,ws=E.ReactCurrentOwner,Is=0,Cs=null,Ps=null,Ds=0,xs=0,Os=ai(0),Ts=0,Ns=null,Fs=0,As=0,Ls=0,Ms=0,Us=null,qs=0,zs=1/0;function js(){zs=qi()+500}var Vs,Qs=null,Ks=!1,Bs=null,Hs=null,Ws=!1,Ys=null,Gs=90,$s=[],Xs=[],Js=null,Zs=0,el=null,tl=-1,nl=0,rl=0,il=null,al=!1;function ol(){return 0!=(48&Is)?qi():-1!==tl?tl:tl=qi()}function sl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===zi()?1:2;if(0===nl&&(nl=Fs),0!==Hi.transition){0!==rl&&(rl=null!==Us?Us.pendingLanes:0),e=nl;var t=4186112&~rl;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=zi(),e=qt(0!=(4&Is)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nl)}function ll(e,t,n){if(50<Zs)throw Zs=0,el=null,Error(o(185));if(null===(e=ul(e,t)))return null;Vt(e,t,n),e===Cs&&(Ls|=t,4===Ts&&dl(e,Ds));var r=zi();1===t?0!=(8&Is)&&0==(48&Is)?pl(e):(cl(e,n),0===Is&&(js(),Ki())):(0==(4&Is)||98!==r&&99!==r||(null===Js?Js=new Set([e]):Js.add(e)),cl(e,n)),Us=e}function ul(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,i=e.pingedLanes,a=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-Qt(s),u=1<<l,c=a[l];if(-1===c){if(0==(u&r)||0!=(u&i)){c=t,Lt(u);var f=At;a[l]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);s&=~u}if(r=Mt(e,e===Cs?Ds:0),t=At,0===r)null!==n&&(n!==Ni&&ki(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ni&&ki(n)}15===t?(n=pl.bind(null,e),null===Ai?(Ai=[n],Li=Si(Pi,Bi)):Ai.push(n),n=Ni):n=14===t?Qi(99,pl.bind(null,e)):Qi(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(o(358,e))}}(t),fl.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function fl(e){if(tl=-1,rl=nl=0,0!=(48&Is))throw Error(o(327));var t=e.callbackNode;if(Dl()&&e.callbackNode!==t)return null;var n=Mt(e,e===Cs?Ds:0);if(0===n)return null;var r=n,i=Is;Is|=16;var a=bl();for(Cs===e&&Ds===r||(js(),ml(e,r));;)try{kl();break}catch(t){yl(e,t)}if(Ji(),Rs.current=a,Is=i,null!==Ps?r=0:(Cs=null,Ds=0,r=Ts),0!=(Fs&Ls))ml(e,0);else if(0!==r){if(2===r&&(Is|=64,e.hydrate&&(e.hydrate=!1,Qr(e.containerInfo)),0!==(n=Ut(e))&&(r=El(e,n))),1===r)throw t=Ns,ml(e,0),dl(e,n),cl(e,qi()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(o(345));case 2:Il(e);break;case 3:if(dl(e,n),(62914560&n)===n&&10<(r=qs+500-qi())){if(0!==Mt(e,0))break;if(((i=e.suspendedLanes)&n)!==n){ol(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=jr(Il.bind(null,e),r);break}Il(e);break;case 4:if(dl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,i=-1;0<n;){var s=31-Qt(n);a=1<<s,(s=r[s])>i&&(i=s),n&=~a}if(n=i,10<(n=(120>(n=qi()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*ks(n/1960))-n)){e.timeoutHandle=jr(Il.bind(null,e),n);break}Il(e);break;case 5:Il(e);break;default:throw Error(o(329))}}return cl(e,qi()),e.callbackNode===t?fl.bind(null,e):null}function dl(e,t){for(t&=~Ms,t&=~Ls,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Qt(t),r=1<<n;e[n]=-1,t&=~r}}function pl(e){if(0!=(48&Is))throw Error(o(327));if(Dl(),e===Cs&&0!=(e.expiredLanes&Ds)){var t=Ds,n=El(e,t);0!=(Fs&Ls)&&(n=El(e,t=Mt(e,t)))}else n=El(e,t=Mt(e,0));if(0!==e.tag&&2===n&&(Is|=64,e.hydrate&&(e.hydrate=!1,Qr(e.containerInfo)),0!==(t=Ut(e))&&(n=El(e,t))),1===n)throw n=Ns,ml(e,0),dl(e,t),cl(e,qi()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Il(e),cl(e,qi()),null}function hl(e,t){var n=Is;Is|=1;try{return e(t)}finally{0===(Is=n)&&(js(),Ki())}}function vl(e,t){var n=Is;Is&=-2,Is|=8;try{return e(t)}finally{0===(Is=n)&&(js(),Ki())}}function _l(e,t){si(Os,xs),xs|=t,Fs|=t}function gl(){xs=Os.current,oi(Os)}function ml(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Vr(n)),null!==Ps)for(n=Ps.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&hi();break;case 3:xa(),oi(ci),oi(ui),Ba();break;case 5:Ta(r);break;case 4:xa();break;case 13:case 19:oi(Na);break;case 10:Zi(r);break;case 23:case 24:gl()}n=n.return}Cs=e,Ps=zl(e.current,null),Ds=xs=Fs=t,Ts=0,Ns=null,Ms=Ls=As=0}function yl(e,t){for(;;){var n=Ps;try{if(Ji(),Ha.current=Po,Ja){for(var r=Ga.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}Ja=!1}if(Ya=0,Xa=$a=Ga=null,Za=!1,ws.current=null,null===n||null===n.return){Ts=1,Ns=t,Ps=null;break}e:{var a=e,o=n.return,s=n,l=t;if(t=Ds,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var f=0!=(1&Na.current),d=o;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var v=d.memoizedProps;p=void 0!==v.fallback&&(!0!==v.unstable_avoidThisFallback||!f)}}if(p){var _=d.updateQueue;if(null===_){var g=new Set;g.add(u),d.updateQueue=g}else _.add(u);if(0==(2&d.mode)){if(d.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var m=oa(-1,1);m.tag=2,sa(s,m)}s.lanes|=1;break e}l=void 0,s=t;var y=a.pingCache;if(null===y?(y=a.pingCache=new as,l=new Set,y.set(u,l)):void 0===(l=y.get(u))&&(l=new Set,y.set(u,l)),!l.has(s)){l.add(s);var b=Al.bind(null,a,u,s);u.then(b,b)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);l=Error((W(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ts&&(Ts=2),l=rs(l,s),d=o;do{switch(d.tag){case 3:a=l,d.flags|=4096,t&=-t,d.lanes|=t,la(d,os(0,a,t));break e;case 1:a=l;var E=d.type,S=d.stateNode;if(0==(64&d.flags)&&("function"==typeof E.getDerivedStateFromError||null!==S&&"function"==typeof S.componentDidCatch&&(null===Hs||!Hs.has(S)))){d.flags|=4096,t&=-t,d.lanes|=t,la(d,ss(d,a,t));break e}}d=d.return}while(null!==d)}wl(n)}catch(e){t=e,Ps===n&&null!==n&&(Ps=n=n.return);continue}break}}function bl(){var e=Rs.current;return Rs.current=Po,null===e?Po:e}function El(e,t){var n=Is;Is|=16;var r=bl();for(Cs===e&&Ds===t||ml(e,t);;)try{Sl();break}catch(t){yl(e,t)}if(Ji(),Is=n,Rs.current=r,null!==Ps)throw Error(o(261));return Cs=null,Ds=0,Ts}function Sl(){for(;null!==Ps;)Rl(Ps)}function kl(){for(;null!==Ps&&!Ri();)Rl(Ps)}function Rl(e){var t=Vs(e.alternate,e,xs);e.memoizedProps=e.pendingProps,null===t?wl(e):Ps=t,ws.current=null}function wl(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ts(n,t,xs)))return void(Ps=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&xs)||0==(4&n.mode)){for(var r=0,i=n.child;null!==i;)r|=i.lanes|i.childLanes,i=i.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ns(t)))return n.flags&=2047,void(Ps=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ps=t);Ps=t=e}while(null!==t);0===Ts&&(Ts=5)}function Il(e){var t=zi();return Vi(99,Cl.bind(null,e,t)),null}function Cl(e,t){do{Dl()}while(null!==Ys);if(0!=(48&Is))throw Error(o(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null;var r=n.lanes|n.childLanes,i=r,a=e.pendingLanes&~i;e.pendingLanes=i,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=i,e.mutableReadLanes&=i,e.entangledLanes&=i,i=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<a;){var u=31-Qt(a),c=1<<u;i[u]=0,s[u]=-1,l[u]=-1,a&=~c}if(null!==Js&&0==(24&r)&&Js.has(e)&&Js.delete(e),e===Cs&&(Ps=Cs=null,Ds=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(i=Is,Is|=32,ws.current=null,Mr=Yt,pr(s=dr())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,a=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{l.nodeType,u.nodeType}catch(e){l=null;break e}var f=0,d=-1,p=-1,h=0,v=0,_=s,g=null;t:for(;;){for(var m;_!==l||0!==a&&3!==_.nodeType||(d=f+a),_!==u||0!==c&&3!==_.nodeType||(p=f+c),3===_.nodeType&&(f+=_.nodeValue.length),null!==(m=_.firstChild);)g=_,_=m;for(;;){if(_===s)break t;if(g===l&&++h===a&&(d=f),g===u&&++v===c&&(p=f),null!==(m=_.nextSibling))break;g=(_=g).parentNode}_=m}l=-1===d||-1===p?null:{start:d,end:p}}else l=null;l=l||{start:0,end:0}}else l=null;Ur={focusedElem:s,selectionRange:l},Yt=!1,il=null,al=!1,Qs=r;do{try{Pl()}catch(e){if(null===Qs)throw Error(o(330));Fl(Qs,e),Qs=Qs.nextEffect}}while(null!==Qs);il=null,Qs=r;do{try{for(s=e;null!==Qs;){var y=Qs.flags;if(16&y&&ge(Qs.stateNode,""),128&y){var b=Qs.alternate;if(null!==b){var E=b.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&y){case 2:_s(Qs),Qs.flags&=-3;break;case 6:_s(Qs),Qs.flags&=-3,bs(Qs.alternate,Qs);break;case 1024:Qs.flags&=-1025;break;case 1028:Qs.flags&=-1025,bs(Qs.alternate,Qs);break;case 4:bs(Qs.alternate,Qs);break;case 8:ys(s,l=Qs);var S=l.alternate;hs(l),null!==S&&hs(S)}Qs=Qs.nextEffect}}catch(e){if(null===Qs)throw Error(o(330));Fl(Qs,e),Qs=Qs.nextEffect}}while(null!==Qs);if(E=Ur,b=dr(),y=E.focusedElem,s=E.selectionRange,b!==y&&y&&y.ownerDocument&&fr(y.ownerDocument.documentElement,y)){null!==s&&pr(y)&&(b=s.start,void 0===(E=s.end)&&(E=b),"selectionStart"in y?(y.selectionStart=b,y.selectionEnd=Math.min(E,y.value.length)):(E=(b=y.ownerDocument||document)&&b.defaultView||window).getSelection&&(E=E.getSelection(),l=y.textContent.length,S=Math.min(s.start,l),s=void 0===s.end?S:Math.min(s.end,l),!E.extend&&S>s&&(l=s,s=S,S=l),l=cr(y,S),a=cr(y,s),l&&a&&(1!==E.rangeCount||E.anchorNode!==l.node||E.anchorOffset!==l.offset||E.focusNode!==a.node||E.focusOffset!==a.offset)&&((b=b.createRange()).setStart(l.node,l.offset),E.removeAllRanges(),S>s?(E.addRange(b),E.extend(a.node,a.offset)):(b.setEnd(a.node,a.offset),E.addRange(b))))),b=[];for(E=y;E=E.parentNode;)1===E.nodeType&&b.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof y.focus&&y.focus(),y=0;y<b.length;y++)(E=b[y]).element.scrollLeft=E.left,E.element.scrollTop=E.top}Yt=!!Mr,Ur=Mr=null,e.current=n,Qs=r;do{try{for(y=e;null!==Qs;){var k=Qs.flags;if(36&k&&fs(y,Qs.alternate,Qs),128&k){b=void 0;var R=Qs.ref;if(null!==R){var w=Qs.stateNode;switch(Qs.tag){case 5:b=w;break;default:b=w}"function"==typeof R?R(b):R.current=b}}Qs=Qs.nextEffect}}catch(e){if(null===Qs)throw Error(o(330));Fl(Qs,e),Qs=Qs.nextEffect}}while(null!==Qs);Qs=null,Fi(),Is=i}else e.current=n;if(Ws)Ws=!1,Ys=e,Gs=t;else for(Qs=r;null!==Qs;)t=Qs.nextEffect,Qs.nextEffect=null,8&Qs.flags&&((k=Qs).sibling=null,k.stateNode=null),Qs=t;if(0===(r=e.pendingLanes)&&(Hs=null),1===r?e===el?Zs++:(Zs=0,el=e):Zs=0,n=n.stateNode,bi&&"function"==typeof bi.onCommitFiberRoot)try{bi.onCommitFiberRoot(yi,n,void 0,64==(64&n.current.flags))}catch(e){}if(cl(e,qi()),Ks)throw Ks=!1,e=Bs,Bs=null,e;return 0!=(8&Is)||Ki(),null}function Pl(){for(;null!==Qs;){var e=Qs.alternate;al||null===il||(0!=(8&Qs.flags)?Ze(Qs,il)&&(al=!0):13===Qs.tag&&Ss(e,Qs)&&Ze(Qs,il)&&(al=!0));var t=Qs.flags;0!=(256&t)&&cs(e,Qs),0==(512&t)||Ws||(Ws=!0,Qi(97,(function(){return Dl(),null}))),Qs=Qs.nextEffect}}function Dl(){if(90!==Gs){var e=97<Gs?97:Gs;return Gs=90,Vi(e,Tl)}return!1}function xl(e,t){$s.push(t,e),Ws||(Ws=!0,Qi(97,(function(){return Dl(),null})))}function Ol(e,t){Xs.push(t,e),Ws||(Ws=!0,Qi(97,(function(){return Dl(),null})))}function Tl(){if(null===Ys)return!1;var e=Ys;if(Ys=null,0!=(48&Is))throw Error(o(331));var t=Is;Is|=32;var n=Xs;Xs=[];for(var r=0;r<n.length;r+=2){var i=n[r],a=n[r+1],s=i.destroy;if(i.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===a)throw Error(o(330));Fl(a,e)}}for(n=$s,$s=[],r=0;r<n.length;r+=2){i=n[r],a=n[r+1];try{var l=i.create;i.destroy=l()}catch(e){if(null===a)throw Error(o(330));Fl(a,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Is=t,Ki(),!0}function Nl(e,t,n){sa(e,t=os(0,t=rs(n,t),1)),t=ol(),null!==(e=ul(e,1))&&(Vt(e,1,t),cl(e,t))}function Fl(e,t){if(3===e.tag)Nl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Nl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hs||!Hs.has(r))){var i=ss(n,e=rs(t,e),1);if(sa(n,i),i=ol(),null!==(n=ul(n,1)))Vt(n,1,i),cl(n,i);else if("function"==typeof r.componentDidCatch&&(null===Hs||!Hs.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Al(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ol(),e.pingedLanes|=e.suspendedLanes&n,Cs===e&&(Ds&n)===n&&(4===Ts||3===Ts&&(62914560&Ds)===Ds&&500>qi()-qs?ml(e,0):Ms|=n),cl(e,t)}function Ll(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===zi()?1:2:(0===nl&&(nl=Fs),0===(t=zt(62914560&~nl))&&(t=4194304))),n=ol(),null!==(e=ul(e,t))&&(Vt(e,t,n),cl(e,n))}function Ml(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Ul(e,t,n,r){return new Ml(e,t,n,r)}function ql(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zl(e,t){var n=e.alternate;return null===n?((n=Ul(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function jl(e,t,n,r,i,a){var s=2;if(r=e,"function"==typeof e)ql(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case R:return Vl(n.children,i,a,t);case L:s=8,i|=16;break;case w:s=8,i|=1;break;case I:return(e=Ul(12,n,t,8|i)).elementType=I,e.type=I,e.lanes=a,e;case x:return(e=Ul(13,n,t,i)).type=x,e.elementType=x,e.lanes=a,e;case O:return(e=Ul(19,n,t,i)).elementType=O,e.lanes=a,e;case M:return Ql(n,i,a,t);case U:return(e=Ul(24,n,t,i)).elementType=U,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:s=10;break e;case P:s=9;break e;case D:s=11;break e;case T:s=14;break e;case N:s=16,r=null;break e;case F:s=22;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Ul(s,n,t,i)).elementType=e,t.type=r,t.lanes=a,t}function Vl(e,t,n,r){return(e=Ul(7,e,r,t)).lanes=n,e}function Ql(e,t,n,r){return(e=Ul(23,e,r,t)).elementType=M,e.lanes=n,e}function Kl(e,t,n){return(e=Ul(6,e,null,t)).lanes=n,e}function Bl(e,t,n){return(t=Ul(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Hl(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=jt(0),this.expirationTimes=jt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=jt(0),this.mutableSourceEagerHydrationData=null}function Wl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Yl(e,t,n,r){var i=t.current,a=ol(),s=sl(i);e:if(n){t:{if(Ge(n=n._reactInternals)!==n||1!==n.tag)throw Error(o(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(pi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(o(171))}if(1===n.tag){var u=n.type;if(pi(u)){n=_i(n,u,l);break e}}n=l}else n=li;return null===t.context?t.context=n:t.pendingContext=n,(t=oa(a,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),sa(i,t),ll(i,s,a),s}function Gl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function $l(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Xl(e,t){$l(e,t),(e=e.alternate)&&$l(e,t)}function Jl(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Hl(e,t,null!=n&&!0===n.hydrate),t=Ul(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ia(t),e[$r]=n.current,Pr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var i=(t=r[e])._getVersion;i=i(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,i]:n.mutableSourceEagerHydrationData.push(t,i)}this._internalRoot=n}function Zl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function eu(e,t,n,r,i){var a=n._reactRootContainer;if(a){var o=a._internalRoot;if("function"==typeof i){var s=i;i=function(){var e=Gl(o);s.call(e)}}Yl(t,o,e,i)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Jl(e,0,t?{hydrate:!0}:void 0)}(n,r),o=a._internalRoot,"function"==typeof i){var l=i;i=function(){var e=Gl(o);l.call(e)}}vl((function(){Yl(t,o,e,i)}))}return Gl(o)}function tu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zl(t))throw Error(o(200));return Wl(e,t,null,n)}Vs=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ci.current)No=!0;else{if(0==(n&r)){switch(No=!1,t.tag){case 3:Qo(t),Qa();break;case 5:Oa(t);break;case 1:pi(t.type)&&gi(t);break;case 4:Da(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var i=t.type._context;si(Yi,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Yo(e,t,n):(si(Na,1&Na.current),null!==(t=Zo(e,t,n))?t.sibling:null);si(Na,1&Na.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Jo(e,t,n);t.flags|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),si(Na,Na.current),r)break;return null;case 23:case 24:return t.lanes=0,Uo(e,t,n)}return Zo(e,t,n)}No=0!=(16384&e.flags)}else No=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=di(t,ui.current),ta(t,n),i=no(null,t,r,e,i,n),t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,pi(r)){var a=!0;gi(t)}else a=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,ia(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&da(t,r,s,e),i.updater=pa,t.stateNode=i,i._reactInternals=t,ga(t,r,e,n),t=Vo(null,t,r,!0,a,n)}else t.tag=0,Fo(null,t,i,n),t=t.child;return t;case 16:i=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=(a=i._init)(i._payload),t.type=i,a=t.tag=function(e){if("function"==typeof e)return ql(e)?1:0;if(null!=e){if((e=e.$$typeof)===D)return 11;if(e===T)return 14}return 2}(i),e=Wi(i,e),a){case 0:t=zo(null,t,i,e,n);break e;case 1:t=jo(null,t,i,e,n);break e;case 11:t=Ao(null,t,i,e,n);break e;case 14:t=Lo(null,t,i,Wi(i.type,e),r,n);break e}throw Error(o(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,zo(e,t,r,i=t.elementType===r?i:Wi(r,i),n);case 1:return r=t.type,i=t.pendingProps,jo(e,t,r,i=t.elementType===r?i:Wi(r,i),n);case 3:if(Qo(t),r=t.updateQueue,null===e||null===r)throw Error(o(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,aa(e,t),ua(t,r,null,n),(r=t.memoizedState.element)===i)Qa(),t=Zo(e,t,n);else{if((a=(i=t.stateNode).hydrate)&&(La=Kr(t.stateNode.containerInfo.firstChild),Aa=t,a=Ma=!0),a){if(null!=(e=i.mutableSourceEagerHydrationData))for(i=0;i<e.length;i+=2)(a=e[i])._workInProgressVersionPrimary=e[i+1],Ka.push(a);for(n=ka(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Fo(e,t,r,n),Qa();t=t.child}return t;case 5:return Oa(t),null===e&&za(t),r=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,s=i.children,zr(r,i)?s=null:null!==a&&zr(r,a)&&(t.flags|=16),qo(e,t),Fo(e,t,s,n),t.child;case 6:return null===e&&za(t),null;case 13:return Yo(e,t,n);case 4:return Da(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Sa(t,null,r,n):Fo(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Ao(e,t,r,i=t.elementType===r?i:Wi(r,i),n);case 7:return Fo(e,t,t.pendingProps,n),t.child;case 8:case 12:return Fo(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,s=t.memoizedProps,a=i.value;var l=t.type._context;if(si(Yi,l._currentValue),l._currentValue=a,null!==s)if(l=s.value,0==(a=or(l,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,a):1073741823))){if(s.children===i.children&&!ci.current){t=Zo(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){s=l.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===l.tag&&((c=oa(-1,n&-n)).tag=2,sa(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),ea(l.return,n),u.lanes|=n;break}c=c.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Fo(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(a=t.pendingProps).children,ta(t,n),r=r(i=na(i,a.unstable_observedBits)),t.flags|=1,Fo(e,t,r,n),t.child;case 14:return a=Wi(i=t.type,t.pendingProps),Lo(e,t,i,a=Wi(i.type,a),r,n);case 15:return Mo(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Wi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,pi(r)?(e=!0,gi(t)):e=!1,ta(t,n),va(t,r,i),ga(t,r,i,n),Vo(null,t,r,!0,e,n);case 19:return Jo(e,t,n);case 23:case 24:return Uo(e,t,n)}throw Error(o(156,t.tag))},Jl.prototype.render=function(e){Yl(e,this._internalRoot,null,null)},Jl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Yl(null,e,null,(function(){t[$r]=null}))},et=function(e){13===e.tag&&(ll(e,4,ol()),Xl(e,4))},tt=function(e){13===e.tag&&(ll(e,67108864,ol()),Xl(e,67108864))},nt=function(e){if(13===e.tag){var t=ol(),n=sl(e);ll(e,n,t),Xl(e,n)}},rt=function(e,t){return t()},Ie=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=ti(r);if(!i)throw Error(o(90));X(r),ne(r,i)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&oe(e,!!n.multiple,t,!1)}},Te=hl,Ne=function(e,t,n,r,i){var a=Is;Is|=4;try{return Vi(98,e.bind(null,t,n,r,i))}finally{0===(Is=a)&&(js(),Ki())}},Fe=function(){0==(49&Is)&&(function(){if(null!==Js){var e=Js;Js=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cl(e,qi())}))}Ki()}(),Dl())},Ae=function(e,t){var n=Is;Is|=2;try{return e(t)}finally{0===(Is=n)&&(js(),Ki())}};var nu={Events:[Zr,ei,ti,xe,Oe,Dl,{current:!1}]},ru={findFiberByHostInstance:Jr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},iu={bundleType:ru.bundleType,version:ru.version,rendererPackageName:ru.rendererPackageName,rendererConfig:ru.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:ru.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var au=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!au.isDisabled&&au.supportsFiber)try{yi=au.inject(iu),bi=au}catch(ve){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nu,t.createPortal=tu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw Error(o(268,Object.keys(e)))}return null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Is;if(0!=(48&n))return e(t);Is|=1;try{if(e)return Vi(99,e.bind(null,t))}finally{Is=n,Ki()}},t.hydrate=function(e,t,n){if(!Zl(t))throw Error(o(200));return eu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Zl(t))throw Error(o(200));return eu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zl(e))throw Error(o(40));return!!e._reactRootContainer&&(vl((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[$r]=null}))})),!0)},t.unstable_batchedUpdates=hl,t.unstable_createPortal=function(e,t){return tu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zl(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return eu(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,o=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,v=n?Symbol.for("react.memo"):60115,_=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,m=n?Symbol.for("react.fundamental"):60117,y=n?Symbol.for("react.responder"):60118,b=n?Symbol.for("react.scope"):60119;function E(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case a:case s:case o:case p:return e;default:switch(e=e&&e.$$typeof){case u:case d:case _:case v:case l:return e;default:return t}}case i:return t}}}function S(e){return E(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=u,t.ContextProvider=l,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=_,t.Memo=v,t.Portal=i,t.Profiler=s,t.StrictMode=o,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||E(e)===c},t.isConcurrentMode=S,t.isContextConsumer=function(e){return E(e)===u},t.isContextProvider=function(e){return E(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return E(e)===d},t.isFragment=function(e){return E(e)===a},t.isLazy=function(e){return E(e)===_},t.isMemo=function(e){return E(e)===v},t.isPortal=function(e){return E(e)===i},t.isProfiler=function(e){return E(e)===s},t.isStrictMode=function(e){return E(e)===o},t.isSuspense=function(e){return E(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===s||e===o||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===_||e.$$typeof===v||e.$$typeof===l||e.$$typeof===u||e.$$typeof===d||e.$$typeof===m||e.$$typeof===y||e.$$typeof===b||e.$$typeof===g)},t.typeOf=E},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},6849:(e,t,n)=>{e.exports=n(1291)},2578:(e,t,n)=>{e.exports=n(534)},7994:e=>{"use strict";function t(e){return e.displayName||e.name||"Component"}e.exports={getComponentName:t,getContainerName:function(e){return"Relay("+t(e)+")"}}},1291:(e,t,n)=>{"use strict";var r=n(7294),i=n(4311).__internal.createRelayContext;e.exports=i(r)},5536:(e,t,n)=>{"use strict";var r=n(4914),i=r(n(4942)),a=r(n(5998)),o=r(n(2904)),s=r(n(1991)),l=r(n(4172)),u=n(7294),c=n(1305),f=n(3549),d=(n(3885),n(7994).getContainerName),p=n(6196).assertRelayContext,h=n(4311),v=h.createFragmentSpecResolver,_=h.getDataIDsFromObject,g=h.isScalarAndEqual;function m(e,t){var n,r,f=d(e);return r=n=function(n){function r(e){var r,i;i=n.call(this,e)||this,(0,l.default)((0,o.default)(i),"_handleFragmentDataUpdate",(function(){var e=i.state.resolver;i.setState((function(t){return e===t.resolver?{data:t.resolver.resolve(),relayProp:y(t.relayProp.environment)}:null}))}));var a=p(e.__relayContext),s=null!==(r=e.__rootIsQueryRenderer)&&void 0!==r&&r,u=v(a,f,t,e,s);return i.state={data:u.resolve(),prevProps:e,prevPropsContext:a,relayProp:y(a.environment),resolver:u},i}(0,s.default)(r,n),r.getDerivedStateFromProps=function(e,n){var r,i=n.prevProps,a=p(e.__relayContext),o=null!==(r=e.__rootIsQueryRenderer)&&void 0!==r&&r,s=_(t,i),l=_(t,e),u=n.resolver;if(n.prevPropsContext.environment!==a.environment||!c(s,l))return{data:(u=v(a,f,t,e,o)).resolve(),prevPropsContext:a,prevProps:e,relayProp:y(a.environment),resolver:u};u.setProps(e);var d=u.resolve();return d!==n.data?{data:d,prevProps:e,prevPropsContext:a,relayProp:y(a.environment)}:null};var d=r.prototype;return d.componentDidMount=function(){this._subscribeToNewResolver(),this._rerenderIfStoreHasChanged()},d.componentDidUpdate=function(e,t){this.state.resolver!==t.resolver&&(t.resolver.dispose(),this._subscribeToNewResolver()),this._rerenderIfStoreHasChanged()},d.componentWillUnmount=function(){this.state.resolver.dispose()},d.shouldComponentUpdate=function(e,n){if(n.data!==this.state.data)return!0;for(var r=Object.keys(e),i=0;i<r.length;i++){var a=r[i];if("__relayContext"===a){if(n.prevPropsContext.environment!==this.state.prevPropsContext.environment)return!0}else if(!t.hasOwnProperty(a)&&!g(e[a],this.props[a]))return!0}return!1},d._rerenderIfStoreHasChanged=function(){var e=this.state,t=e.data,n=e.resolver.resolve();t!==n&&this.setState({data:n})},d._subscribeToNewResolver=function(){this.state.resolver.setCallback(this._handleFragmentDataUpdate)},d.render=function(){var t=this.props,n=t.componentRef,r=(t.__relayContext,t.__rootIsQueryRenderer,(0,a.default)(t,["componentRef","__relayContext","__rootIsQueryRenderer"]));return u.createElement(e,(0,i.default)((0,i.default)((0,i.default)({},r),this.state.data),{},{ref:n,relay:this.state.relayProp}))},r}(u.Component),(0,l.default)(n,"displayName",f),r}function y(e){return{environment:e}}e.exports={createContainer:function(e,t){return f(e,t,m)}}},7102:(e,t,n)=>{"use strict";var r=n(7294),i=n(1291),a=n(2037),o=r.useLayoutEffect,s=r.useState,l=r.useRef,u=r.useMemo,c=n(4311),f=c.createOperationDescriptor,d=(c.deepFreeze,c.getRequest),p=n(1305),h={rootIsQueryRenderer:!0};e.exports=function(e){var t,n,c=e.environment,v=e.query,_=e.variables,g=e.render,m=(t=_,n=r.useRef(t),p(n.current,t)||(n.current=t),n.current),y=u((function(){var e=d(v);return f(e,m)}),[v,m]),b=u((function(){return{environment:c}}),[c]),E=l(null),S=s(null)[1],k=l(null),R=u((function(){c.check(y);var e=c.lookup(y.fragment);E.current=e.data;var t=c.retain(y),n=c.subscribe(e,(function(e){E.current=e.data,S(E.current)})),r=!1;return k.current&&k.current(),k.current=function(){r||(r=!0,k.current=null,t.dispose(),n.dispose())},e}),[c,y]);return o((function(){var e=k.current;return function(){e&&e()}}),[R]),r.createElement(i.Provider,{value:b},r.createElement(a.Provider,{value:h},g({props:E.current})))}},3843:(e,t,n)=>{"use strict";var r=n(4914),i=r(n(1611)),a=r(n(5998)),o=r(n(2904)),s=r(n(1991)),l=r(n(4172)),u=r(n(4942)),c=n(7294),f=n(1291),d=n(7082),p=n(1305),h=n(3549),v=n(3885),_=n(1143),g=(n(3620),n(7994)),m=g.getComponentName,y=g.getContainerName,b=n(6196).assertRelayContext,E=n(4311),S=E.ConnectionInterface,k=E.Observable,R=E.createFragmentSpecResolver,w=E.createOperationDescriptor,I=E.getDataIDsFromObject,C=E.getRequest,P=(E.getSelector,E.getVariablesFromObject),D=E.isScalarAndEqual,x="forward";function O(e){return"function"==typeof e?{error:e,complete:e,unsubscribe:function(t){"function"==typeof e&&e()}}:e||{}}e.exports={createContainer:function(e,t,n){return h(e,t,(function(e,t){return function(e,t,n){m(e);var r,h,g=y(e),E=function(e){var t=null,n=!1;for(var r in e){var i=e[r],a=i.metadata&&i.metadata.connection;void 0!==i.metadata&&(n=!0),a&&(1!==a.length&&_(!1),t&&_(!1),t=(0,u.default)((0,u.default)({},a[0]),{},{fragmentName:r}))}return n&&null===t&&_(!1),t||{}}(t),T=n.getConnectionFromProps||function(e){var t=e.path;return t||_(!1),function(n){for(var r=n[e.fragmentName],i=0;i<t.length;i++){if(!r||"object"!=typeof r)return null;r=r[t[i]]}return r}}(E),N=n.direction||E.direction;N||_(!1);var F=n.getFragmentVariables||function(e){var t=e.count;return t||_(!1),function(e,n){return(0,u.default)((0,u.default)({},e),{},(0,l.default)({},t,n))}}(E);return h=r=function(r){function h(e){var n,i;i=r.call(this,e)||this,(0,l.default)((0,o.default)(i),"_handleFragmentDataUpdate",(function(){i.setState({data:i._resolver.resolve()})})),(0,l.default)((0,o.default)(i),"_hasMore",(function(){var e=i._getConnectionData();return!!(e&&e.hasMore&&e.cursor)})),(0,l.default)((0,o.default)(i),"_isLoading",(function(){return!!i._refetchSubscription})),(0,l.default)((0,o.default)(i),"_refetchConnection",(function(e,t,n){if(!i._canFetchPage("refetchConnection"))return{dispose:function(){}};i._refetchVariables=n;var r={count:e,cursor:null,totalCount:e};return{dispose:i._fetchPage(r,O(t),{force:!0}).unsubscribe}})),(0,l.default)((0,o.default)(i),"_loadMore",(function(e,t,n){if(!i._canFetchPage("loadMore"))return{dispose:function(){}};var r=O(t),a=i._getConnectionData();if(!a)return k.create((function(e){return e.complete()})).subscribe(r),null;var o=a.edgeCount+e;if(n&&n.force)return i._refetchConnection(o,t);var s=S.get(),l=(s.END_CURSOR,s.START_CURSOR,{count:e,cursor:a.cursor,totalCount:o});return{dispose:i._fetchPage(l,r,n).unsubscribe}}));var a=b(e.__relayContext),s=null!==(n=e.__rootIsQueryRenderer)&&void 0!==n&&n;return i._isARequestInFlight=!1,i._refetchSubscription=null,i._refetchVariables=null,i._resolver=R(a,g,t,e,s,i._handleFragmentDataUpdate),i.state={data:i._resolver.resolve(),prevContext:a,contextForChildren:a,relayProp:i._buildRelayProp(a)},i._isUnmounted=!1,i._hasFetched=!1,i}(0,s.default)(h,r);var m=h.prototype;return m.componentDidMount=function(){this._isUnmounted=!1},m.UNSAFE_componentWillReceiveProps=function(e){var n,r=b(e.__relayContext),i=null!==(n=e.__rootIsQueryRenderer)&&void 0!==n&&n,a=I(t,this.props),o=I(t,e),s=v(t,this.props),l=v(t,e);r.environment===this.state.prevContext.environment&&p(s,l)&&p(a,o)?this._hasFetched||this._resolver.setProps(e):(this._cleanup(),this._resolver=R(r,g,t,e,i,this._handleFragmentDataUpdate),this.setState({prevContext:r,contextForChildren:r,relayProp:this._buildRelayProp(r)}));var u=this._resolver.resolve();u!==this.state.data&&this.setState({data:u})},m.componentWillUnmount=function(){this._isUnmounted=!0,this._cleanup()},m.shouldComponentUpdate=function(e,n){if(n.data!==this.state.data||n.relayProp!==this.state.relayProp)return!0;for(var r=Object.keys(e),i=0;i<r.length;i++){var a=r[i];if("__relayContext"===a){if(n.prevContext.environment!==this.state.prevContext.environment)return!0}else if(!t.hasOwnProperty(a)&&!D(e[a],this.props[a]))return!0}return!1},m._buildRelayProp=function(e){return{hasMore:this._hasMore,isLoading:this._isLoading,loadMore:this._loadMore,refetchConnection:this._refetchConnection,environment:e.environment}},m._getConnectionData=function(){var e=this.props,t=(e.componentRef,(0,a.default)(e,["componentRef"])),n=(0,u.default)((0,u.default)({},t),this.state.data),r=T(n);if(null==r)return null;var i=S.get(),o=i.EDGES,s=i.PAGE_INFO,l=i.HAS_NEXT_PAGE,c=i.HAS_PREV_PAGE,f=i.END_CURSOR,d=i.START_CURSOR;"object"!=typeof r&&_(!1);var p=r[o],h=r[s];if(null==p||null==h)return null;Array.isArray(p)||_(!1),"object"!=typeof h&&_(!1);var v=N===x?h[l]:h[c],g=N===x?h[f]:h[d];return"boolean"!=typeof v||0!==p.length&&void 0===g?null:{cursor:g,edgeCount:p.length,hasMore:v}},m._getQueryFetcher=function(){return this._queryFetcher||(this._queryFetcher=new d),this._queryFetcher},m._canFetchPage=function(e){return!this._isUnmounted},m._fetchPage=function(e,r,i){var o,s=this,l=b(this.props.__relayContext).environment,c=this.props,f=(c.componentRef,c.__relayContext,c.__rootIsQueryRenderer,(0,a.default)(c,["componentRef","__relayContext","__rootIsQueryRenderer"])),d=(0,u.default)((0,u.default)({},f),this.state.data),h=v(t,f);o=P(t,f),o=(0,u.default)((0,u.default)((0,u.default)({},h),o),this._refetchVariables);var g=n.getVariables(d,{count:e.count,cursor:e.cursor},o);("object"!=typeof g||null===g)&&_(!1),g=(0,u.default)((0,u.default)({},g),this._refetchVariables),o=(0,u.default)((0,u.default)({},g),o);var m=i?{force:!!i.force}:void 0;null!=m&&null!=(null==i?void 0:i.metadata)&&(m.metadata=null==i?void 0:i.metadata);var y=C(n.query),E=w(y,g,m),S=null;this._refetchSubscription&&this._refetchSubscription.unsubscribe(),this._hasFetched=!0;var R=function(){s._refetchSubscription===S&&(s._refetchSubscription=null,s._isARequestInFlight=!1)};return this._isARequestInFlight=!0,S=this._getQueryFetcher().execute({environment:l,operation:E,preservePreviousReferences:!0}).mergeMap((function(t){return k.create((function(t){!function(t,n){var r=s._resolver.resolve();s._resolver.setVariables(F(o,e.totalCount),E.request.node);var i=s._resolver.resolve();p(r,i)?n():s.setState({data:i,contextForChildren:{environment:s.props.__relayContext.environment}},n)}(0,(function(){t.next(),t.complete()}))}))})).do({error:R,complete:R,unsubscribe:R}).subscribe(r||{}),this._refetchSubscription=this._isARequestInFlight?S:null,S},m._cleanup=function(){this._resolver.dispose(),this._refetchVariables=null,this._hasFetched=!1,this._refetchSubscription&&(this._refetchSubscription.unsubscribe(),this._refetchSubscription=null,this._isARequestInFlight=!1),this._queryFetcher&&this._queryFetcher.dispose()},m.render=function(){var t=this.props,n=t.componentRef,r=(t.__relayContext,t.__rootIsQueryRenderer,(0,a.default)(t,["componentRef","__relayContext","__rootIsQueryRenderer"]));return c.createElement(f.Provider,{value:this.state.contextForChildren},c.createElement(e,(0,i.default)({},r,this.state.data,{ref:n,relay:this.state.relayProp})))},h}(c.Component),(0,l.default)(r,"displayName",g),h}(e,t,n)}))}}},7082:(e,t,n)=>{"use strict";var r=n(4914)(n(4172)),i=n(1143),a=n(4311),o=a.createOperationDescriptor,s=a.isRelayModernEnvironment,l=a.__internal.fetchQuery,u=function(){function e(e){(0,r.default)(this,"_selectionReferences",[]),(0,r.default)(this,"_callOnDataChangeWhenSet",!1),null!=e&&(this._cacheSelectionReference=e.cacheSelectionReference,this._selectionReferences=e.selectionReferences)}var t=e.prototype;return t.getSelectionReferences=function(){return{cacheSelectionReference:this._cacheSelectionReference,selectionReferences:this._selectionReferences}},t.lookupInStore=function(e,t,n){return"store-and-network"!==n&&"store-or-network"!==n||"available"!==e.check(t).status?null:(this._retainCachedOperation(e,t),e.lookup(t.fragment))},t.execute=function(e){var t=this,n=e.environment,r=e.operation,i=e.preservePreviousReferences,a=void 0!==i&&i,o=n.retain(r),u=function(){t._selectionReferences=t._selectionReferences.concat(o)},c=function(){a||t.disposeSelectionReferences(),t._selectionReferences=t._selectionReferences.concat(o)},f=function(){t._selectionReferences=t._selectionReferences.concat(o)};return s(n)?l(n,r).do({error:u,complete:c,unsubscribe:f}):n.execute({operation:r}).do({error:u,complete:c,unsubscribe:f})},t.setOnDataChange=function(e){this._fetchOptions||i(!1),"function"==typeof e&&(this._fetchOptions.onDataChangeCallbacks=this._fetchOptions.onDataChangeCallbacks||[],this._fetchOptions.onDataChangeCallbacks.push(e),this._callOnDataChangeWhenSet&&(null!=this._error?e({error:this._error}):null!=this._snapshot&&e({snapshot:this._snapshot})))},t.fetch=function(e,t){var n,r=this,i=e.environment,a=e.operation,s=e.onDataChange,l=!1;this.disposeRequest();var u=this._fetchOptions&&this._fetchOptions.onDataChangeCallbacks;this._fetchOptions={environment:i,onDataChangeCallbacks:u||[],operation:a},s&&-1===this._fetchOptions.onDataChangeCallbacks.indexOf(s)&&this._fetchOptions.onDataChangeCallbacks.push(s);var c=t?o(a.request.node,a.request.variables,t):a,f=this.execute({environment:i,operation:c}).finally((function(){r._pendingRequest=null})).subscribe({next:function(){r._callOnDataChangeWhenSet=!0,r._error=null,r._onQueryDataAvailable({notifyFirstResult:l})},error:function(e){r._callOnDataChangeWhenSet=!0,r._error=e,r._snapshot=null;var t=r._fetchOptions&&r._fetchOptions.onDataChangeCallbacks;l?t&&t.forEach((function(t){t({error:e})})):n=e}});if(this._pendingRequest={dispose:function(){f.unsubscribe()}},l=!0,n)throw n;return this._snapshot},t.retry=function(e){return this._fetchOptions||i(!1),this.fetch({environment:this._fetchOptions.environment,operation:this._fetchOptions.operation,onDataChange:null},e)},t.dispose=function(){this.disposeRequest(),this.disposeSelectionReferences()},t.disposeRequest=function(){this._error=null,this._snapshot=null,this._pendingRequest&&this._pendingRequest.dispose(),this._rootSubscription&&(this._rootSubscription.dispose(),this._rootSubscription=null)},t._retainCachedOperation=function(e,t){this._disposeCacheSelectionReference(),this._cacheSelectionReference=e.retain(t)},t._disposeCacheSelectionReference=function(){this._cacheSelectionReference&&this._cacheSelectionReference.dispose(),this._cacheSelectionReference=null},t.disposeSelectionReferences=function(){this._disposeCacheSelectionReference(),this._selectionReferences.forEach((function(e){return e.dispose()})),this._selectionReferences=[]},t._onQueryDataAvailable=function(e){var t=this,n=e.notifyFirstResult;this._fetchOptions||i(!1);var r=this._fetchOptions,a=r.environment,o=r.onDataChangeCallbacks,s=r.operation;if(!this._snapshot&&(this._snapshot=a.lookup(s.fragment),this._rootSubscription=a.subscribe(this._snapshot,(function(e){if(null!=t._fetchOptions){var n=t._fetchOptions.onDataChangeCallbacks;Array.isArray(n)&&n.forEach((function(t){return t({snapshot:e})}))}})),this._snapshot&&n&&Array.isArray(o))){var l=this._snapshot;o.forEach((function(e){return e({snapshot:l})}))}},e}();e.exports=u},7943:(e,t,n)=>{"use strict";var r=n(4914),i=r(n(4942)),a=r(n(1991)),o=n(7294),s=n(1291),l=n(7082),u=n(2037),c=n(1305),f=n(4311),d=f.createOperationDescriptor,p=(f.deepFreeze,f.getRequest),h={},v={rootIsQueryRenderer:!0},_=function(e){function t(t){var n;n=e.call(this,t)||this;var r,a,o={handleDataChange:null,handleRetryAfterError:null};if(t.query){var s=t.query;a=m(p(s).params,t.variables),r=h[a]?h[a].queryFetcher:new l}else r=new l;return n.state=(0,i.default)({prevPropsEnvironment:t.environment,prevPropsVariables:t.variables,prevQuery:t.query,queryFetcher:r,retryCallbacks:o},y(t,r,o,a)),n}(0,a.default)(t,e),t.getDerivedStateFromProps=function(e,t){if(t.prevQuery!==e.query||t.prevPropsEnvironment!==e.environment||!c(t.prevPropsVariables,e.variables)){var n,r=e.query,a=t.queryFetcher.getSelectionReferences();if(t.queryFetcher.disposeRequest(),r){var o=m(p(r).params,e.variables);n=h[o]?h[o].queryFetcher:new l(a)}else n=new l(a);return(0,i.default)({prevQuery:e.query,prevPropsEnvironment:e.environment,prevPropsVariables:e.variables,queryFetcher:n},y(e,n,t.retryCallbacks))}return null};var n=t.prototype;return n.componentDidMount=function(){var e=this,t=this.state,n=t.retryCallbacks,r=t.queryFetcher,i=t.requestCacheKey;i&&delete h[i],n.handleDataChange=function(t){var n=null==t.error?null:t.error,r=null==t.snapshot?null:t.snapshot;e.setState((function(e){var t=e.requestCacheKey;return t&&delete h[t],r===e.snapshot&&n===e.error?null:{renderProps:g(n,r,e.queryFetcher,e.retryCallbacks),snapshot:r,requestCacheKey:null}}))},n.handleRetryAfterError=function(t){return e.setState((function(e){var t=e.requestCacheKey;return t&&delete h[t],{renderProps:{error:null,props:null,retry:null},requestCacheKey:null}}))},this.props.query&&r.setOnDataChange(n.handleDataChange)},n.componentDidUpdate=function(){var e=this.state.requestCacheKey;e&&(delete h[e],delete this.state.requestCacheKey)},n.componentWillUnmount=function(){this.state.queryFetcher.dispose()},n.shouldComponentUpdate=function(e,t){return e.render!==this.props.render||t.renderProps!==this.state.renderProps},n.render=function(){var e=this.state,t=e.renderProps,n=e.relayContext;return o.createElement(s.Provider,{value:n},o.createElement(u.Provider,{value:v},this.props.render(t)))},t}(o.Component);function g(e,t,n,r){return{error:e||null,props:t?t.data:null,retry:function(t){var i=n.retry(t);i&&"function"==typeof r.handleDataChange?r.handleDataChange({snapshot:i}):e&&"function"==typeof r.handleRetryAfterError&&r.handleRetryAfterError(e)}}}function m(e,t){return JSON.stringify({id:e.cacheID?e.cacheID:e.id,variables:t})}function y(e,t,n,r){var i=e.environment,a=e.query,o=e.variables,s=e.cacheConfig,l=i;if(!a)return t.dispose(),{error:null,relayContext:{environment:l},renderProps:{error:null,props:{},retry:null},requestCacheKey:null};var u=p(a),c=d(u,o,s),f={environment:l};if("string"==typeof r&&h[r]){var v=h[r].snapshot;return v?{error:null,relayContext:f,renderProps:g(null,v,t,n),snapshot:v,requestCacheKey:r}:{error:null,relayContext:f,renderProps:{error:null,props:null,retry:null},snapshot:null,requestCacheKey:r}}try{var _=t.lookupInStore(l,c,e.fetchPolicy),y=t.fetch({environment:l,onDataChange:n.handleDataChange,operation:c})||_;return r=r||m(u.params,e.variables),h[r]={queryFetcher:t,snapshot:y},y?{error:null,relayContext:f,renderProps:g(null,y,t,n),snapshot:y,requestCacheKey:r}:{error:null,relayContext:f,renderProps:{error:null,props:null,retry:null},snapshot:null,requestCacheKey:r}}catch(e){return{error:e,relayContext:f,renderProps:g(e,null,t,n),snapshot:null,requestCacheKey:r}}}e.exports=_},2037:(e,t,n)=>{"use strict";var r=n(7294);e.exports=r.createContext({rootIsQueryRenderer:!1})},7474:(e,t,n)=>{"use strict";var r=n(4914),i=r(n(1611)),a=r(n(5998)),o=r(n(4942)),s=r(n(2904)),l=r(n(1991)),u=r(n(4172)),c=n(7294),f=n(1291),d=n(7082),p=n(1305),h=n(3549),v=n(3885),_=(n(3620),n(7994).getContainerName),g=n(6196).assertRelayContext,m=n(4311),y=m.Observable,b=m.createFragmentSpecResolver,E=m.createOperationDescriptor,S=m.getDataIDsFromObject,k=m.getRequest,R=(m.getSelector,m.getVariablesFromObject),w=m.isScalarAndEqual;function I(e,t){return{environment:e,refetch:t}}e.exports={createContainer:function(e,t,n){return h(e,t,(function(e,t){return function(e,t,n){var r,h,m=_(e);return h=r=function(r){function h(e){var i,a;a=r.call(this,e)||this,(0,u.default)((0,s.default)(a),"_handleFragmentDataUpdate",(function(){var e=a.state.resolver;a.setState((function(t){return e===t.resolver?{data:t.resolver.resolve()}:null}))})),(0,u.default)((0,s.default)(a),"_refetch",(function(e,r,i,s){if(a._isUnmounted)return{dispose:function(){}};var l=g(a.props.__relayContext).environment,u=v(t,a.props),c="function"==typeof e?e(a._getFragmentVariables()):e;c=(0,o.default)((0,o.default)({},u),c);var f=r?(0,o.default)((0,o.default)({},c),r):c,d=s?{force:!!s.force}:void 0;null!=d&&null!=(null==s?void 0:s.metadata)&&(d.metadata=null==s?void 0:s.metadata);var p,h="function"==typeof i?{next:i,error:i}:i||{},_=k(n),m=E(_,c,d);return a.state.localVariables=c,a._refetchSubscription&&a._refetchSubscription.unsubscribe(),null!=a._getQueryFetcher().lookupInStore(l,m,null==s?void 0:s.fetchPolicy)?(a.state.resolver.setVariables(f,m.request.node),a.setState((function(e){return{data:e.resolver.resolve(),contextForChildren:{environment:a.props.__relayContext.environment}}}),(function(){h.next&&h.next(),h.complete&&h.complete()})),{dispose:function(){}}):(a._getQueryFetcher().execute({environment:l,operation:m,preservePreviousReferences:!0}).mergeMap((function(e){return a.state.resolver.setVariables(f,m.request.node),y.create((function(e){return a.setState((function(e){return{data:e.resolver.resolve(),contextForChildren:{environment:a.props.__relayContext.environment}}}),(function(){e.next(),e.complete()}))}))})).finally((function(){a._refetchSubscription===p&&(a._refetchSubscription=null)})).subscribe((0,o.default)((0,o.default)({},h),{},{start:function(e){a._refetchSubscription=p=e,h.start&&h.start(e)}})),{dispose:function(){p&&p.unsubscribe()}})}));var l=g(e.__relayContext),c=null!==(i=e.__rootIsQueryRenderer)&&void 0!==i&&i;a._refetchSubscription=null;var f=b(l,m,t,e,c);return a.state={data:f.resolve(),localVariables:null,prevProps:e,prevPropsContext:l,contextForChildren:l,relayProp:I(l.environment,a._refetch),resolver:f},a._isUnmounted=!1,a}(0,l.default)(h,r);var _=h.prototype;return _.componentDidMount=function(){this._isUnmounted=!1,this._subscribeToNewResolver()},_.componentDidUpdate=function(e,t){this.state.resolver!==t.resolver&&(t.resolver.dispose(),this._queryFetcher&&this._queryFetcher.dispose(),this._refetchSubscription&&this._refetchSubscription.unsubscribe(),this._subscribeToNewResolver())},h.getDerivedStateFromProps=function(e,n){var r,i=n.prevProps,a=g(e.__relayContext),o=null!==(r=e.__rootIsQueryRenderer)&&void 0!==r&&r,s=S(t,i),l=S(t,e),u=v(t,i),c=v(t,e),f=n.resolver;if(n.prevPropsContext.environment!==a.environment||!p(u,c)||!p(s,l))return{data:(f=b(a,m,t,e,o)).resolve(),localVariables:null,prevProps:e,prevPropsContext:a,contextForChildren:a,relayProp:I(a.environment,n.relayProp.refetch),resolver:f};n.localVariables||f.setProps(e);var d=f.resolve();return d!==n.data?{data:d,prevProps:e}:null},_.componentWillUnmount=function(){this._isUnmounted=!0,this.state.resolver.dispose(),this._queryFetcher&&this._queryFetcher.dispose(),this._refetchSubscription&&this._refetchSubscription.unsubscribe()},_.shouldComponentUpdate=function(e,n){if(n.data!==this.state.data||n.relayProp!==this.state.relayProp)return!0;for(var r=Object.keys(e),i=0;i<r.length;i++){var a=r[i];if("__relayContext"===a){if(this.state.prevPropsContext.environment!==n.prevPropsContext.environment)return!0}else if(!t.hasOwnProperty(a)&&!w(e[a],this.props[a]))return!0}return!1},_._subscribeToNewResolver=function(){var e=this.state,t=e.data,n=e.resolver;n.setCallback(this._handleFragmentDataUpdate);var r=n.resolve();t!==r&&this.setState({data:r})},_._getFragmentVariables=function(){return R(t,this.props)},_._getQueryFetcher=function(){return this._queryFetcher||(this._queryFetcher=new d),this._queryFetcher},_.render=function(){var t=this.props,n=t.componentRef,r=(t.__relayContext,t.__rootIsQueryRenderer,(0,a.default)(t,["componentRef","__relayContext","__rootIsQueryRenderer"])),o=this.state,s=o.relayProp,l=o.contextForChildren;return c.createElement(f.Provider,{value:l},c.createElement(e,(0,i.default)({},r,this.state.data,{ref:n,relay:s})))},h}(c.Component),(0,u.default)(r,"displayName",m),h}(e,t,n)}))}}},6196:(e,t,n)=>{"use strict";var r=n(1143),i=n(4107);function a(e){return"object"==typeof e&&null!==e&&!Array.isArray(e)&&i(e.environment)}e.exports={assertRelayContext:function(e){return a(e)||r(!1),e},isRelayContext:a}},5310:(e,t,n)=>{"use strict";var r=n(1143);e.exports=function(e,t){for(var n in t&&"object"==typeof t||r(!1),t)if(t.hasOwnProperty(n)){var i=t[n];(!i||"object"!=typeof i&&"function"!=typeof i)&&r(!1)}}},3549:(e,t,n)=>{"use strict";var r=n(4914)(n(1611)),i=n(7294),a=n(1291),o=n(2037),s=n(5310),l=n(1143),u=n(4625),c=n(7994),f=c.getComponentName,d=c.getContainerName,p=n(4311).getFragment;e.exports=function(e,t,n){var c=d(e);s(f(e),t);var h={};for(var v in t)h[v]=p(t[v]);var _=n(e,h);function g(e,t){var n,s=u(a);null==s&&l(!1);var c=u(o);return i.createElement(_,(0,r.default)({},e,{__relayContext:s,__rootIsQueryRenderer:null!==(n=null==c?void 0:c.rootIsQueryRenderer)&&void 0!==n&&n,componentRef:e.componentRef||t}))}return _.displayName=c,g.displayName=c,i.forwardRef(g)}},3885:(e,t,n)=>{"use strict";var r=n(4914)(n(4942)),i=n(4311).getSelector;e.exports=function(e,t){var n={};return Object.keys(e).forEach((function(a){var o,s,l,u=e[a],c=t[a],f=i(u,c),d=null!=f&&"PluralReaderSelector"===f.kind?null!==(o=null===(s=f.selectors[0])||void 0===s?void 0:s.owner.variables)&&void 0!==o?o:{}:null!==(l=null==f?void 0:f.owner.variables)&&void 0!==l?l:{};n=(0,r.default)((0,r.default)({},n),d)})),n}},534:(e,t,n)=>{"use strict";var r=n(3916),i=n(1291),a=n(5536),o=n(7102),s=n(3843),l=n(7943),u=n(7474),c=n(8613),f=n(4311),d=n(4473),p=n(8264),h=n(9444),v=n(9703),_=n(3498),g=n(2064),m=n(9776),y=n(2530),b=n(179),E=n(8924),S=n(1102),k=n(8747),R=n(9204).loadQuery;e.exports={ConnectionHandler:f.ConnectionHandler,QueryRenderer:l,LocalQueryRenderer:o,MutationTypes:f.MutationTypes,RangeOperations:f.RangeOperations,ReactRelayContext:i,applyOptimisticMutation:f.applyOptimisticMutation,commitLocalUpdate:f.commitLocalUpdate,commitMutation:f.commitMutation,createFragmentContainer:a.createContainer,createPaginationContainer:s.createContainer,createRefetchContainer:u.createContainer,fetchQuery_DEPRECATED:f.fetchQuery_DEPRECATED,graphql:f.graphql,readInlineData:f.readInlineData,requestSubscription:f.requestSubscription,EntryPointContainer:r,RelayEnvironmentProvider:c,fetchQuery:f.fetchQuery,loadQuery:R,loadEntryPoint:d,useFragment:h,useLazyLoadQuery:v,useEntryPointLoader:p,useQueryLoader:y,useMutation:_,usePaginationFragment:g,usePreloadedQuery:m,useRefetchableFragment:b,useRelayEnvironment:E,useSubscribeToInvalidationState:S,useSubscription:k}},4107:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&null!==e&&"function"==typeof e.check&&"function"==typeof e.lookup&&"function"==typeof e.retain&&"function"==typeof e.execute&&"function"==typeof e.subscribe}},4625:(e,t,n)=>{"use strict";var r=n(7294).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,i=r.ReactCurrentDispatcher,a=r.ReactCurrentOwner;e.exports=function(e){return(null!=i?i.current:a.currentDispatcher).readContext(e)}},3916:(e,t,n)=>{"use strict";var r=n(7580),i=n(7294),a=n(8924),o=(n(3620),n(7294)),s=o.useContext,l=o.useEffect;e.exports=function(e){var t=e.entryPointReference,n=e.props,o=t.getComponent,u=t.queries,c=t.entryPoints,f=t.extraProps,d=t.rootModuleID,p=o(),h=s(r),v=a();return l((function(){v.__log({name:"entrypoint.root.consume",profilerContext:h,rootModuleID:d})}),[v,h,d]),i.createElement(p,{entryPoints:c,extraProps:f,props:n,queries:u})}},7339:(e,t,n)=>{"use strict";var r=n(4914),i=r(n(4942)),a=r(n(6489)),o=n(4339),s=n(1143),l=n(4311),u=l.__internal.getPromiseForActiveRequest,c=l.getFragmentIdentifier,f=l.getSelector,d=l.isPromise,p=l.recycleNodesInto,h=l.reportMissingRequiredFields,v="function"==typeof WeakMap,_=Object.freeze([]);function g(e,t){return Array.isArray(t)?{cacheKey:e,snapshot:t,data:t.map((function(e){return e.data}))}:{cacheKey:e,snapshot:t,data:t.data}}var m=function(){function e(e){this._environment=e,this._cache=o.create(1e6)}var t=e.prototype;return t.read=function(e,t,n,r){return this.readWithIdentifier(e,t,c(e,t),n,r)},t.readWithIdentifier=function(e,t,n,r,i){var a,o=this._environment;if(null==t)return{cacheKey:n,data:null,snapshot:null};if(!0===(null==e||null===(a=e.metadata)||void 0===a?void 0:a.plural)&&(Array.isArray(t)||s(!1),0===t.length))return{cacheKey:n,data:_,snapshot:_};var l=this._cache.get(n);if(null!=l){if(d(l))throw l;if(l.snapshot)return this._reportMissingRequiredFieldsInSnapshot(l.snapshot),l}var u=f(e,t);null==u&&s(!1);var c="PluralReaderSelector"===u.kind?u.selectors.map((function(e){return o.lookup(e)})):o.lookup(u),p="PluralReaderSelector"===u.kind?u.selectors[0].owner:u.owner;if(!function(e){return Array.isArray(e)?e.some((function(e){return e.isMissingData})):e.isMissingData}(c)){this._reportMissingRequiredFieldsInSnapshot(c);var h=g(n,c);return this._cache.set(n,h),h}var v=this._getAndSavePromiseForFragmentRequestInFlight(n,e,p);if(null!=v)throw v;return this._reportMissingRequiredFieldsInSnapshot(c),g(n,c)},t._reportMissingRequiredFieldsInSnapshot=function(e){var t=this;Array.isArray(e)?e.forEach((function(e){null!=e.missingRequiredFields&&h(t._environment,e.missingRequiredFields)})):null!=e.missingRequiredFields&&h(this._environment,e.missingRequiredFields)},t.readSpec=function(e,t,n){var r={};for(var i in e)r[i]=this.read(e[i],t[i],n,i);return r},t.subscribe=function(e,t){var n=this,r=this._environment,i=e.cacheKey,a=e.snapshot;if(!a)return{dispose:function(){}};var o=this.checkMissedUpdates(e),l=o[0],u=o[1];l&&t();var c=[];return Array.isArray(a)?(Array.isArray(u)||s(!1),u.forEach((function(e,a){c.push(r.subscribe(e,(function(e){n._updatePluralSnapshot(i,u,e,a),t()})))}))):((null==u||Array.isArray(u))&&s(!1),c.push(r.subscribe(u,(function(e){n._cache.set(i,g(i,e)),t()})))),{dispose:function(){c.map((function(e){return e.dispose()})),n._cache.delete(i)}}},t.subscribeSpec=function(e,t){var n=this,r=Object.keys(e).map((function(r){return n.subscribe(e[r],t)}));return{dispose:function(){r.forEach((function(e){e.dispose()}))}}},t.checkMissedUpdates=function(e){var t=this._environment,n=e.cacheKey,r=e.snapshot;if(!r)return[!1,null];var a=!1;if(Array.isArray(r)){var o=[];return r.forEach((function(e,n){var r=t.lookup(e.selector),s=e.data,l=r.data,u=p(s,l);u!==s&&(r=(0,i.default)((0,i.default)({},r),{},{data:u}),a=!0),o[n]=r})),a&&this._cache.set(n,g(n,o)),[a,o]}var s=t.lookup(r.selector),l=r.data,u=s.data,c=p(l,u);return s={data:c,isMissingData:s.isMissingData,seenRecords:s.seenRecords,selector:s.selector,missingRequiredFields:s.missingRequiredFields},c!==l&&(this._cache.set(n,g(n,s)),a=!0),[a,s]},t.checkMissedUpdatesSpec=function(e){var t=this;return Object.keys(e).some((function(n){return t.checkMissedUpdates(e[n])[0]}))},t._getAndSavePromiseForFragmentRequestInFlight=function(e,t,n){var r,i=this,a=this._environment,o=null!==(r=u(a,n))&&void 0!==r?r:function(e,t){return e.getOperationTracker().getPromiseForPendingOperationsAffectingOwner(t)}(a,n);if(!o)return null;var s=o.then((function(){i._cache.delete(e)})).catch((function(t){i._cache.delete(e)}));this._cache.set(e,s);var l=n.node.params.name,c=t.name,f=l===c?"Relay(".concat(l,")"):"Relay(".concat(l,":").concat(c,")");return s.displayName=f,s},t._updatePluralSnapshot=function(e,t,n,r){var i=this._cache.get(e);if(d(i))y(n.selector.node.name);else{var o=null==i?void 0:i.snapshot;if(!o||Array.isArray(o)){var s=o?(0,a.default)(o):(0,a.default)(t);s[r]=n,this._cache.set(e,g(e,s))}else y(n.selector.node.name)}},e}();function y(e){s(!1)}function b(e){return new m(e)}var E=v?new WeakMap:new Map;e.exports={createFragmentResource:b,getFragmentResourceForEnvironment:function(e){var t=E.get(e);if(t)return t;var n=b(e);return E.set(e,n),n}}},4339:(e,t,n)=>{"use strict";var r=n(1143),i=function(){function e(e){this._capacity=e,this._capacity>0||r(!1),this._map=new Map}var t=e.prototype;return t.set=function(e,t){if(this._map.delete(e),this._map.set(e,t),this._map.size>this._capacity){var n=this._map.keys().next();n.done||this._map.delete(n.value)}},t.get=function(e){var t=this._map.get(e);return null!=t&&(this._map.delete(e),this._map.set(e,t)),t},t.has=function(e){return this._map.has(e)},t.delete=function(e){this._map.delete(e)},t.size=function(){return this._map.size},t.capacity=function(){return this._capacity-this._map.size},t.clear=function(){this._map.clear()},e}();e.exports={create:function(e){return new i(e)}}},7580:(e,t,n)=>{"use strict";var r=n(7294).createContext({wrapPrepareQueryResource:function(e){return e()}});e.exports=r},9598:(e,t,n)=>{"use strict";var r=n(4914),i=r(n(4942)),a=r(n(4172)),o=n(4339),s=n(1143),l=n(4311).isPromise,u="store-or-network",c="function"==typeof WeakMap;function f(e,t,n,r,i){var a=null!=n?n:u,o=null!=r?r:e.UNSTABLE_getDefaultRenderPolicy(),s="".concat(a,"-").concat(o,"-").concat(t.request.identifier);return null!=i?"".concat(s,"-").concat(i):s}function d(e,t){var n={__id:e.fragment.dataID,__fragments:(0,a.default)({},e.fragment.node.name,e.request.variables),__fragmentOwner:e.request};return{cacheIdentifier:t,fragmentNode:e.request.node.fragment,fragmentRef:n,operation:e}}var p=2e5;function h(e,t,n,r,i){var a=n,o=0,l=null,u=null,c=r,f=function(e){return 1==++o&&(l=e.retain(t)),{dispose:function(){0===(o=Math.max(0,o-1))&&(null==l&&s(!1),l.dispose(),l=null),i(d)}}},d={cacheIdentifier:e,id:p++,getValue:function(){return a},setValue:function(e){a=e},getRetainCount:function(){return o},getNetworkSubscription:function(){return c},setNetworkSubscription:function(e){null!=c&&c.unsubscribe(),c=e},temporaryRetain:function(e){if(e.isServer())return{dispose:function(){}};var t=f(e),n=null,r=function(){clearTimeout(n),n=null,u=null,t.dispose(),o<=0&&null!=c&&c.unsubscribe()};return n=setTimeout(r,3e5),null!=u&&u(),u=r,{dispose:function(){u&&u()}}},permanentRetain:function(e){var t=f(e);return null!=u&&(u(),u=null),{dispose:function(){t.dispose(),o<=0&&null!=c&&c.unsubscribe()}}}};return d}var v=function(){function e(e){var t=this;(0,a.default)(this,"_clearCacheEntry",(function(e){e.getRetainCount()<=0&&t._cache.delete(e.cacheIdentifier)})),this._environment=e,this._cache=o.create(1e3)}var t=e.prototype;return t.prepare=function(e,t,n,r,i,a,o){var s=f(this._environment,e,n,r,a);return this.prepareWithIdentifier(s,e,t,n,r,i,o)},t.prepareWithIdentifier=function(e,t,n,r,a,o,s){var c=this._environment,f=null!=r?r:u,d=null!=a?a:c.UNSTABLE_getDefaultRenderPolicy(),p=this._cache.get(e),h=null;null==p&&(p=this._fetchAndSaveQuery(e,t,n,f,d,s,(0,i.default)((0,i.default)({},o),{},{unsubscribe:function(e){null!=h&&h.dispose();var t=null==o?void 0:o.unsubscribe;t&&t(e)}}))),h=p.temporaryRetain(c);var v=p.getValue();if(l(v)||v instanceof Error)throw v;return v},t.retain=function(e,t){var n=this._environment,r=e.cacheIdentifier,i=e.operation,a=this._getOrCreateCacheEntry(r,i,e,null),o=a.permanentRetain(n);return n.__log({name:"queryresource.retain",profilerContext:t,resourceID:a.id}),{dispose:function(){o.dispose()}}},t.TESTS_ONLY__getCacheEntry=function(e,t,n,r){var i=f(this._environment,e,t,n,r);return this._cache.get(i)},t._getOrCreateCacheEntry=function(e,t,n,r){var i=this._cache.get(e);return null==i&&(i=h(e,t,n,r,this._clearCacheEntry),this._cache.set(e,i)),i},t._fetchAndSaveQuery=function(e,t,n,r,i,a,o){var l,u,c=this,f=this._environment,p=f.check(t),v=p.status,_="available"===v,g=_||"partial"===i&&"stale"!==v,m=function(){};switch(r){case"store-only":l=!1,u=!0;break;case"store-or-network":l=!_,u=g;break;case"store-and-network":l=!0,u=g;break;case"network-only":default:l=!0,u=!1}if(u){var y=d(t,e),b=h(e,t,y,null,this._clearCacheEntry);this._cache.set(e,b)}if(l){var E,S=d(t,e);n.subscribe({start:function(t){E=t;var n=c._cache.get(e);n&&n.setNetworkSubscription(E);var r=null==o?void 0:o.start;r&&r(t)},next:function(){var n=f.lookup(t.fragment);c._getOrCreateCacheEntry(e,t,S,E).setValue(S),m();var r=null==o?void 0:o.next;r&&r(n)},error:function(n){var r=c._getOrCreateCacheEntry(e,t,n,E);r.setValue(n),m(),E=null,r.setNetworkSubscription(null);var i=null==o?void 0:o.error;i&&i(n)},complete:function(){m(),E=null;var t=c._cache.get(e);t&&t.setNetworkSubscription(null);var n=null==o?void 0:o.complete;n&&n()},unsubscribe:null==o?void 0:o.unsubscribe});var k=this._cache.get(e);if(!k){var R=new Promise((function(e){m=e}));R.displayName="Relay("+t.fragment.node.name+")",k=h(e,t,R,E,this._clearCacheEntry),this._cache.set(e,k)}}else{var w=null==o?void 0:o.complete;w&&w()}var I=this._cache.get(e);return null==I&&s(!1),f.__log({name:"queryresource.fetch",resourceID:I.id,operation:t,profilerContext:a,fetchPolicy:r,renderPolicy:i,queryAvailability:p,shouldFetch:l}),I},e}();function _(e){return new v(e)}var g=c?new WeakMap:new Map;e.exports={createQueryResource:_,getQueryResourceForEnvironment:function(e){var t=g.get(e);if(t)return t;var n=_(e);return g.set(e,n),n},getQueryCacheIdentifier:f}},8613:(e,t,n)=>{"use strict";var r=n(7294),i=n(6849),a=r.useMemo;e.exports=function(e){var t=e.children,n=e.environment,o=a((function(){return{environment:n}}),[n]);return r.createElement(i.Provider,{value:o},t)}},9530:(e,t,n)=>{"use strict";var r=n(7430),i=n(1143);e.exports=function(e,t){var n,a,o=r(e,t),s=o.refetchableRequest,l=o.refetchMetadata,u=l.connection;null==u&&i(!1);var c=u.path,f=(null!==(n=null===(a=e.metadata)||void 0===a?void 0:a.connection)&&void 0!==n?n:[])[0];null==f&&i(!1);var d=l.identifierField;return null!=d&&"string"!=typeof d&&i(!1),{connectionPathInFragmentData:c,identifierField:d,paginationRequest:s,paginationMetadata:u,stream:!0===f.stream}}},5179:(e,t,n)=>{"use strict";var r=n(4914),i=r(n(4172)),a=r(n(4942)),o=n(1143);n(3620),e.exports=function(e,t,n,r,s,l){var u,c=l.backward,f=l.forward;if("backward"===e){var d;(null==c||null==c.count||null==c.cursor)&&o(!1);var p=(0,a.default)((0,a.default)((0,a.default)({},r),s),{},(d={},(0,i.default)(d,c.cursor,n),(0,i.default)(d,c.count,t),d));return f&&f.cursor&&(p[f.cursor]=null),f&&f.count&&(p[f.count]=null),p}(null==f||null==f.count||null==f.cursor)&&o(!1);var h=(0,a.default)((0,a.default)((0,a.default)({},r),s),{},(u={},(0,i.default)(u,f.cursor,n),(0,i.default)(u,f.count,t),u));return c&&c.cursor&&(h[c.cursor]=null),c&&c.count&&(h[c.count]=null),h}},7430:(e,t,n)=>{"use strict";var r=n(1143);e.exports=function(e,t){var n,i;!0===(null===(n=e.metadata)||void 0===n?void 0:n.plural)&&r(!1);var a=null===(i=e.metadata)||void 0===i?void 0:i.refetch;null==a&&r(!1);var o=a.operation.default?a.operation.default:a.operation,s=a.fragmentPathInResult;"string"==typeof o&&r(!1);var l=a.identifierField;return null!=l&&"string"!=typeof l&&r(!1),{fragmentRefPathInResponse:s,identifierField:l,refetchableRequest:o,refetchMetadata:a}}},3975:(e,t,n)=>{"use strict";var r=n(4914)(n(2646)),i=n(1143);e.exports=function(e,t){var n,a=e,o=(0,r.default)(t);try{for(o.s();!(n=o.n()).done;){var s=n.value;if(null==a)return null;"number"==typeof s?(Array.isArray(a)||i(!1),a=a[s]):(("object"!=typeof a||Array.isArray(a))&&i(!1),a=a[s])}}catch(e){o.e(e)}finally{o.f()}return a}},4473:(e,t,n)=>{"use strict";var r=n(9204).loadQuery;e.exports=function e(t,n,i){var a=null;null==n.root.getModuleIfRequired()&&(a=n.root.load());var o=n.getPreloadProps(i),s=o.queries,l=o.entryPoints,u=o.extraProps,c={},f={};null!=s&&Object.keys(s).forEach((function(e){var n=s[e],i=n.environmentProviderOptions,a=n.options,o=n.parameters,l=n.variables,u=t.getEnvironment(i);c[e]=r(u,o,l,{fetchPolicy:null==a?void 0:a.fetchPolicy,networkCacheConfig:null==a?void 0:a.networkCacheConfig,__nameForWarning:"loadEntryPoint"},i)})),null!=l&&Object.keys(l).forEach((function(n){var r=l[n];if(null!=r){var i=r.entryPoint,a=r.entryPointParams;f[n]=e(t,i,a)}}));var d=!1;return{dispose:function(){d||(null!=c&&Object.values(c).forEach((function(e){(0,e.dispose)()})),null!=f&&Object.values(f).forEach((function(e){(0,e.dispose)()})),d=!0)},entryPoints:f,extraProps:null!=u?u:null,getComponent:function(){var e,t=n.root.getModuleIfRequired();if(null==t)throw a=null!==(e=a)&&void 0!==e?e:n.root.load();return t},get isDisposed(){return d},queries:c,rootModuleID:n.root.getModuleId()}}},9204:(e,t,n)=>{"use strict";var r=n(4914)(n(4942)),i=n(7294),a=n(1143),o=(n(3620),n(4311)),s=o.PreloadableQueryRegistry,l=o.ReplaySubject,u=o.createOperationDescriptor,c=o.getRequest,f=o.getRequestIdentifier,d=o.Observable,p=o.RelayFeatureFlags,h=o.__internal.fetchQueryDeduped,v=null,_=100001;e.exports={loadQuery:function(e,t,n,o,v){var g,m,y;null===(g=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED)||void 0===g||null===(m=g.ReactCurrentDispatcher)||void 0===m||m.current,_++;var b,E,S,k,R,w,I=null!==(y=null==o?void 0:o.fetchPolicy)&&void 0!==y?y:"store-or-network",C=(0,r.default)((0,r.default)({},null==o?void 0:o.networkCacheConfig),{},{force:!0}),P=!1,D=function(t,n){return P=!0,e.executeWithSource({operation:t,source:n})},x=new l,O=d.create((function(e){return x.subscribe(e)})),T=null,N=!1,F=function(t){var r;N=!0;var i=new l;if(!0===p.ENABLE_LOAD_QUERY_REQUEST_DEDUPING){var a="raw-network-request-"+f(t,n);r=h(e,a,(function(){return e.getNetwork().execute(t,n,C)}))}else r=e.getNetwork().execute(t,n,C);var o=r.subscribe({error:function(e){T=e,i.error(e)},next:function(e){i.next(e)},complete:function(){i.complete()}}).unsubscribe;return E=o,d.create((function(e){var t=i.subscribe(e);return function(){t.unsubscribe(),E()}}))},A=function(t,n){!0===p.ENABLE_LOAD_QUERY_REQUEST_DEDUPING&&(N=!0);var r=h(e,t.request.identifier,n).subscribe({error:function(e){x.error(e)},next:function(e){x.next(e)},complete:function(){x.complete()}});S=r.unsubscribe},L=function(t){var r=u(t,n,C);b=e.retain(r),"store-only"!==I&&("store-or-network"!==I||"available"!==e.check(r).status)&&A(r,(function(){var e=F(t.params);return D(r,e)}))};if("PreloadableConcreteRequest"===t.kind){null===(w=(k=t.params).id)&&a(!1);var M=s.get(w);if(null!=M)L(M);else{var U="store-only"===I?null:F(k),q=s.onLoad(w,(function(t){R();var r=u(t,n,C);b=e.retain(r),null!=U&&A(r,(function(){return D(r,U)}))}));R=q.dispose}}else{var z=c(t);w=null!=(k=z.params).cacheID?k.cacheID:k.id,L(z)}var j=!1;return{kind:"PreloadedQuery",environment:e,environmentProviderOptions:v,dispose:function(){j||(P?S&&S():E&&E(),b&&b.dispose(),R&&R(),j=!0)},fetchKey:_,id:w,get isDisposed(){return j},get networkError(){return T},name:k.name,networkCacheConfig:C,fetchPolicy:I,source:N?O:void 0,variables:n}},useTrackLoadQueryInRender:function(){var e,t;null===v&&(v=null===(e=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED)||void 0===e||null===(t=e.ReactCurrentDispatcher)||void 0===t?void 0:t.current)}}},8264:(e,t,n)=>{"use strict";var r=n(4914)(n(2646)),i=n(4473),a=n(1829),o=n(9204).useTrackLoadQueryInRender,s=n(7294),l=s.useCallback,u=s.useEffect,c=s.useRef,f=s.useState,d={kind:"NullEntryPointReference"};e.exports=function(e,t,n){var s,p,h,v;o();var _=null!==(s=null==n||null===(p=n.TEST_ONLY__initialEntryPointData)||void 0===p?void 0:p.entryPointReference)&&void 0!==s?s:d,g=null!==(h=null==n||null===(v=n.TEST_ONLY__initialEntryPointData)||void 0===v?void 0:v.entryPointParams)&&void 0!==h?h:null,m=a(),y=c(new Set([_])),b=f(_),E=b[0],S=b[1],k=f(g),R=k[0],w=k[1],I=l((function(){if(m.current){var e={kind:"NullEntryPointReference"};y.current.add(e),S(e)}}),[S,m]),C=l((function(n){if(m.current){var r=i(e,t,n);y.current.add(r),S(r),w(n)}}),[e,t,S,m]),P=c(!1);return u((function(){return function(){P.current=!0}}),[]),u((function(){if(!0===P.current)return P.current=!1,void("NullEntryPointReference"!==E.kind&&null!=R&&C(R));var e=y.current;if(m.current){var t,n=(0,r.default)(e);try{for(n.s();!(t=n.n()).done;){var i=t.value;if(i===E)break;e.delete(i),"NullEntryPointReference"!==i.kind&&i.dispose()}}catch(e){n.e(e)}finally{n.f()}}}),[E,R,C,m]),u((function(){return function(){var e,t=(0,r.default)(y.current);try{for(t.s();!(e=t.n()).done;){var n=e.value;"NullEntryPointReference"!==n.kind&&n.dispose()}}catch(e){t.e(e)}finally{t.f()}}}),[]),["NullEntryPointReference"===E.kind?null:E,C,I]}},5043:(e,t,n)=>{"use strict";var r=n(7294),i=r.useCallback,a=r.useEffect,o=r.useRef;e.exports=function(){var e=o(null),t=o(!1),n=i((function(){null!=e.current&&(e.current.unsubscribe(),e.current=null),t.current=!1}),[]),r=i((function(n){e.current=n,t.current=!0}),[]),s=i((function(){e.current=null,t.current=!1}),[]);return a((function(){return n}),[n]),{isFetchingRef:t,startFetch:r,disposeFetch:n,completeFetch:s}}},9444:(e,t,n)=>{"use strict";var r=n(4081),i=n(8977),a=n(9204).useTrackLoadQueryInRender,o=(n(7294).useDebugValue,n(4311).getFragment);e.exports=function(e,t){a();var n=o(e);return i(n,"first argument of useFragment()"),r(n,t,"useFragment()").data}},4081:(e,t,n)=>{"use strict";var r=n(8924),i=(n(3620),n(7339).getFragmentResourceForEnvironment),a=n(7294),o=a.useEffect,s=a.useRef,l=a.useState,u=n(4311).getFragmentIdentifier;e.exports=function(e,t,n){var a=r(),c=i(a),f=s(!1),d=l(0)[1],p=u(e,t),h=c.readWithIdentifier(e,t,p,n),v=s(!0);function _(){!1!==f.current&&!1!==v.current&&d((function(e){return e+1}))}return o((function(){f.current=!0;var e=c.subscribe(h,_);return function(){f.current=!1,e.dispose()}}),[a,p]),{data:h.data,disableStoreUpdates:function(){v.current=!1},enableStoreUpdates:function(){v.current=!0,c.checkMissedUpdates(h)[0]&&_()}}}},1829:(e,t,n)=>{"use strict";var r=n(7294),i=r.useEffect,a=r.useRef;e.exports=function(){var e=a(!0);return i((function(){return e.current=!0,function(){e.current=!1}}),[]),e}},1204:(e,t,n)=>{"use strict";var r=n(7294),i=n(1143),a=n(8924),o=n(4311),s=o.__internal.getObservableForActiveRequest,l=o.getSelector,u=r.useEffect,c=r.useState,f=r.useMemo;e.exports=function(e,t){var n=a(),r=f((function(){var r=l(e,t);return null==r?null:("SingularReaderSelector"!==r.kind&&i(!1),s(n,r.owner))}),[n,e,t]),o=c(null!=r),d=o[0],p=o[1];return u((function(){var e;if(p(null!=r),null!=r){var t=function(){p(!1)};e=r.subscribe({complete:t,error:t})}return function(){e&&e.unsubscribe()}}),[r]),d}},9703:(e,t,n)=>{"use strict";var r=n(9702),i=n(5315),a=n(8924),o=n(9204).useTrackLoadQueryInRender,s=n(4311).__internal.fetchQuery;e.exports=function(e,t,n){o();var l=a(),u=i(e,t,n&&n.networkCacheConfig?n.networkCacheConfig:{force:!0});return r({componentDisplayName:"useLazyLoadQuery()",fetchKey:null==n?void 0:n.fetchKey,fetchObservable:s(l,u),fetchPolicy:null==n?void 0:n.fetchPolicy,query:u,renderPolicy:null==n?void 0:n.UNSTABLE_renderPolicy})}},9702:(e,t,n)=>{"use strict";var r=n(7580),i=n(7294),a=n(5043),o=n(4081),s=n(8924),l=n(9598),u=l.getQueryResourceForEnvironment,c=l.getQueryCacheIdentifier,f=i.useContext,d=i.useEffect,p=i.useState,h=i.useRef;e.exports=function(e){var t=e.query,n=e.componentDisplayName,i=e.fetchObservable,l=e.fetchPolicy,v=e.fetchKey,_=e.renderPolicy,g=s(),m=f(r),y=u(g),b=p(0),E=b[0],S=b[1],k=a(),R=k.startFetch,w=k.completeFetch,I="".concat(E,"-").concat(null!=v?v:""),C=c(g,t,l,_,I),P=m.wrapPrepareQueryResource((function(){return y.prepareWithIdentifier(C,t,i,l,_,{start:R,complete:w,error:w},m)})),D=h(!1);d((function(){return function(){D.current=!0}}),[]),d((function(){if(!0===D.current)return D.current=!1,void S((function(e){return e+1}));var e=y.retain(P,m);return function(){e.dispose()}}),[g,C]);var x=P.fragmentNode,O=P.fragmentRef;return o(x,O,n).data}},2367:(e,t,n)=>{"use strict";var r=n(4914)(n(4942)),i=n(5179),a=n(3975),o=n(1143),s=n(5043),l=n(1829),u=n(1204),c=n(8924),f=(n(3620),n(7294)),d=f.useCallback,p=f.useEffect,h=f.useState,v=n(4311),_=v.ConnectionInterface,g=v.__internal.fetchQuery,m=v.createOperationDescriptor,y=v.getSelector;e.exports=function(e){var t=e.direction,n=e.fragmentNode,f=e.fragmentRef,v=e.fragmentIdentifier,b=e.fragmentData,E=e.connectionPathInFragmentData,S=e.paginationRequest,k=e.paginationMetadata,R=e.componentDisplayName,w=e.observer,I=e.onReset,C=e.identifierField,P=c(),D=s(),x=D.isFetchingRef,O=D.startFetch,T=D.disposeFetch,N=D.completeFetch,F=null!=C&&null!=b&&"object"==typeof b?b[C]:null,A=l(),L=h(P),M=L[0],U=L[1],q=h(v),z=q[0],j=q[1],V=u(n,f);(P!==M||v!==z)&&(T(),I(),U(P),j(v));var Q=function(e,t,n,r){var i,s,l=_.get(),u=l.EDGES,c=l.PAGE_INFO,f=l.HAS_NEXT_PAGE,d=l.HAS_PREV_PAGE,p=l.END_CURSOR,h=l.START_CURSOR,v=a(n,r);if(null==v)return{cursor:null,hasMore:!1};"object"!=typeof v&&o(!1);var g=v[u],m=v[c];if(null==g||null==m)return{cursor:null,hasMore:!1};Array.isArray(g)||o(!1),"object"!=typeof m&&o(!1);var y="forward"===e?null!==(i=m[p])&&void 0!==i?i:null:null!==(s=m[h])&&void 0!==s?s:null;return null!==y&&"string"!=typeof y&&o(!1),{cursor:y,hasMore:"forward"===e?null!=y&&!0===m[f]:null!=y&&!0===m[d]}}(t,0,b,E),K=Q.cursor,B=Q.hasMore;return p((function(){return function(){T()}}),[T]),[d((function(e,a){var s=null==a?void 0:a.onComplete;if(!0!==A.current)return{dispose:function(){}};var l=y(n,f);if(!0===x.current||null==b||V)return s&&s(null),{dispose:function(){}};(null==l||"PluralReaderSelector"===l.kind)&&o(!1);var u=l.owner.variables,c=l.variables,d=null==a?void 0:a.UNSTABLE_extraVariables,p=(0,r.default)((0,r.default)({},u),c),h=i(t,e,K,p,(0,r.default)({},d),k);null!=C&&(h.id=F);var v=m(S,h,{force:!0});return g(P,v).subscribe((0,r.default)((0,r.default)({},w),{},{start:function(e){O(e),w.start&&w.start(e)},complete:function(){N(),w.complete&&w.complete(),s&&s(null)},error:function(e){N(),w.error&&w.error(e),s&&s(e)}})),{dispose:T}}),[P,F,t,K,O,T,N,x,V,b,n.name,f,R]),B,T]}},5315:(e,t,n)=>{"use strict";var r=n(7294),i=n(2243),a=n(4311),o=a.createOperationDescriptor,s=a.getRequest,l=r.useMemo;e.exports=function(e,t,n){var r=i(t)[0],a=i(n||{})[0];return l((function(){return o(s(e),r,a)}),[e,r,a])}},2243:(e,t,n)=>{"use strict";var r=n(7294),i=n(1305),a=r.useMemo,o=r.useRef,s=r.useState;e.exports=function(e){var t,n,r=o(0),l=s(e),u=l[0],c=l[1];return i(e,u)||(r.current=(null!==(n=r.current)&&void 0!==n?n:0)+1,c(e)),[a((function(){return e}),[r.current]),null!==(t=r.current)&&void 0!==t?t:0]}},3498:(e,t,n)=>{"use strict";var r=n(4914)(n(4942)),i=n(7294),a=n(8924),o=n(4311).commitMutation,s=i.useState,l=i.useEffect,u=i.useRef,c=i.useCallback,f=n(1829);e.exports=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o,n=a(),i=f(),d=u(n),p=u(e),h=u(new Set),v=s(!1),_=v[0],g=v[1],m=c((function(t){d.current===n&&p.current===e&&(h.current.delete(t),i.current&&g(h.current.size>0))}),[n,i,e]);l((function(){d.current===n&&p.current===e||(h.current=new Set,i.current&&g(!1),d.current=n,p.current=e)}),[n,i,e]);var y=c((function(a){var o=t(n,(0,r.default)((0,r.default)({},a),{},{mutation:e,onCompleted:function(e,t){m(o),a.onCompleted&&a.onCompleted(e,t)},onError:function(e){m(o),a.onError&&a.onError(e)},onUnsubscribe:function(){m(o),a.onUnsubscribe&&a.onUnsubscribe()}}));return h.current.add(o),i.current&&g(!0),o}),[m,t,n,i,e]);return[y,_]}},2064:(e,t,n)=>{"use strict";var r=n(4914)(n(4942)),i=n(9530),a=n(2367),o=n(7659),s=n(8977),l=n(7294),u=l.useCallback,c=(l.useDebugValue,l.useState),f=n(4311),d=f.getFragment,p=f.getFragmentIdentifier;function h(e){var t=c(!1),n=t[0],i=t[1],o={start:function(){return i(!0)},complete:function(){return i(!1)},error:function(){return i(!1)}},s=a((0,r.default)((0,r.default)({},e),{},{observer:o,onReset:function(){return i(!1)}}));return[s[0],s[1],n,s[2]]}e.exports=function(e,t){var n=d(e);s(n,"first argument of usePaginationFragment()");var a="usePaginationFragment()",l=i(n,a),c=l.connectionPathInFragmentData,f=l.paginationRequest,v=l.paginationMetadata,_=l.identifierField,g=o(n,t,a),m=g.fragmentData,y=g.fragmentRef,b=g.refetch,E=p(n,y),S=h({componentDisplayName:a,connectionPathInFragmentData:c,direction:"backward",fragmentData:m,fragmentIdentifier:E,fragmentNode:n,fragmentRef:y,identifierField:_,paginationMetadata:v,paginationRequest:f}),k=S[0],R=S[1],w=S[2],I=S[3],C=h({componentDisplayName:a,connectionPathInFragmentData:c,direction:"forward",fragmentData:m,fragmentIdentifier:E,fragmentNode:n,fragmentRef:y,identifierField:_,paginationMetadata:v,paginationRequest:f}),P=C[0],D=C[1],x=C[2],O=C[3];return{data:m,loadNext:P,loadPrevious:k,hasNext:D,hasPrevious:R,isLoadingNext:x,isLoadingPrevious:w,refetch:u((function(e,t){return O(),I(),b(e,(0,r.default)((0,r.default)({},t),{},{__environment:void 0}))}),[O,I,b])}}},9776:(e,t,n)=>{"use strict";var r=n(1143),i=n(9702),a=n(5315),o=n(8924),s=(n(3620),n(9204).useTrackLoadQueryInRender),l=(n(7294).useDebugValue,n(4311).__internal),u=l.fetchQueryDeduped,c=l.fetchQuery;e.exports=function(e,t,n){s();var l,f=o(),d=t.fetchKey,p=t.fetchPolicy,h=t.source,v=t.variables,_=t.networkCacheConfig,g=a(e,v,_);if("PreloadedQuery_DEPRECATED"===t.kind)g.request.node.params.name!==t.name&&r(!1),l={componentDisplayName:"usePreloadedQuery()",fetchKey:d,fetchObservable:u(f,g.request.identifier,(function(){return f===t.environment&&null!=h?f.executeWithSource({operation:g,source:h}):f.execute({operation:g})})),fetchPolicy:p,query:g,renderPolicy:null==n?void 0:n.UNSTABLE_renderPolicy};else{var m=c(f,g);l={componentDisplayName:"usePreloadedQuery()",fetchObservable:null!=h&&f===t.environment?h.ifEmpty(m):(t.environment,m),fetchKey:d,fetchPolicy:p,query:g,renderPolicy:null==n?void 0:n.UNSTABLE_renderPolicy}}return i(l)}},2530:(e,t,n)=>{"use strict";var r=n(4914)(n(2646)),i=n(1829),a=n(8924),o=n(9204),s=o.loadQuery,l=o.useTrackLoadQueryInRender,u=n(7294),c=u.useCallback,f=u.useEffect,d=u.useRef,p=u.useState,h={kind:"NullQueryReference"};e.exports=function(e,t){var n=null!=t?t:h,o=a();l();var u=i(),v=d(new Set([n])),_=p((function(){return n})),g=_[0],m=_[1],y=p((function(){return n})),b=y[0],E=y[1];n!==b&&(v.current.add(n),E(n),m(n));var S=c((function(){u.current&&(v.current.add(h),m(h))}),[u]),k=c((function(t,n){var r=null!=n&&n.hasOwnProperty("__environment")?{fetchPolicy:n.fetchPolicy,networkCacheConfig:n.networkCacheConfig,__nameForWarning:n.__nameForWarning}:n;if(u.current){var i,a=s(null!==(i=null==n?void 0:n.__environment)&&void 0!==i?i:o,e,t,r);v.current.add(a),m(a)}}),[o,e,m,u]),R=d(!1);return f((function(){return function(){R.current=!0}}),[]),f((function(){if(!0===R.current)return R.current=!1,void("NullQueryReference"!==g.kind&&k(g.variables,{fetchPolicy:g.fetchPolicy,networkCacheConfig:g.networkCacheConfig}));var e=v.current;if(u.current){var t,n=(0,r.default)(e);try{for(n.s();!(t=n.n()).done;){var i=t.value;if(i===g)break;e.delete(i),"NullQueryReference"!==i.kind&&i.dispose&&i.dispose()}}catch(e){n.e(e)}finally{n.f()}}}),[g,u,k]),f((function(){return function(){var e,t=(0,r.default)(v.current);try{for(t.s();!(e=t.n()).done;){var n=e.value;"NullQueryReference"!==n.kind&&n.dispose&&n.dispose()}}catch(e){t.e(e)}finally{t.f()}}}),[]),["NullQueryReference"===g.kind?null:g,k,S]}},179:(e,t,n)=>{"use strict";var r=n(7659),i=n(8977),a=(n(7294).useDebugValue,n(4311).getFragment);e.exports=function(e,t){var n=a(e);i(n,"first argument of useRefetchableFragment()");var o=r(n,t,"useRefetchableFragment()");return[o.fragmentData,o.refetch]}},7659:(e,t,n)=>{"use strict";var r=n(4914)(n(4942)),i=n(7580),a=n(7430),o=n(3975),s=n(1143),l=n(4081),u=n(1829),c=n(2530),f=n(8924),d=(n(3620),n(7339).getFragmentResourceForEnvironment),p=n(9598).getQueryResourceForEnvironment,h=n(7294),v=h.useCallback,_=h.useContext,g=h.useReducer,m=n(4311),y=m.__internal.fetchQuery,b=m.createOperationDescriptor,E=m.getFragmentIdentifier,S=m.getSelector;function k(e,t){switch(t.type){case"refetch":var n;return(0,r.default)((0,r.default)({},e),{},{fetchPolicy:t.fetchPolicy,mirroredEnvironment:null!==(n=t.refetchEnvironment)&&void 0!==n?n:e.mirroredEnvironment,onComplete:t.onComplete,refetchEnvironment:t.refetchEnvironment,refetchQuery:t.refetchQuery,renderPolicy:t.renderPolicy});case"reset":return{fetchPolicy:void 0,mirroredEnvironment:t.environment,mirroredFragmentIdentifier:t.fragmentIdentifier,onComplete:void 0,refetchQuery:null,renderPolicy:void 0};default:throw t.type,new Error("useRefetchableFragmentNode: Unexpected action type")}}e.exports=function(e,t,n){var h=f(),m=a(e,n),R=m.refetchableRequest,w=m.fragmentRefPathInResponse,I=m.identifierField,C=E(e,t),P=g(k,{fetchPolicy:void 0,mirroredEnvironment:h,mirroredFragmentIdentifier:C,onComplete:void 0,refetchEnvironment:null,refetchQuery:null,renderPolicy:void 0}),D=P[0],x=P[1],O=D.fetchPolicy,T=D.mirroredEnvironment,N=D.mirroredFragmentIdentifier,F=D.onComplete,A=D.refetchEnvironment,L=D.refetchQuery,M=D.renderPolicy,U=null!=A?A:h,q=p(U),z=d(U),j=_(i),V=U!==T||C!==N,Q=c(R),K=Q[0],B=Q[1],H=Q[2],W=t;if(V)x({type:"reset",environment:U,fragmentIdentifier:C}),H();else if(null!=L&&null!=K){var Y=function(e){F&&F(null!=e?e:null)},G=null!=K.source?K.source:y(U,L),$=j.wrapPrepareQueryResource((function(){return q.prepare(L,G,O,M,{error:Y,complete:function(){Y()}},K.fetchKey,j)})),X=z.read($.fragmentNode,$.fragmentRef,n).data;null==X&&s(!1),W=o(X,w)}var J=l(e,W,n),Z=J.data,ee=J.disableStoreUpdates,te=J.enableStoreUpdates;return{fragmentData:Z,fragmentRef:W,refetch:function(e,t,n,i,a,o,s,l,c,f,d){var p=u(),h=null!=l&&null!=i&&"object"==typeof i?i[l]:null;return v((function(e,i){if(!0!==p.current)return{dispose:function(){}};var a,s,u=null==i?void 0:i.__environment,v=null==i?void 0:i.fetchPolicy,_=null==i?void 0:i.UNSTABLE_renderPolicy,g=null==i?void 0:i.onComplete,m=S(o,f);if(null==m)a={},s={};else if("PluralReaderSelector"===m.kind){var y,E,k,R;a=null!==(y=null===(E=m.selectors[0])||void 0===E?void 0:E.owner.variables)&&void 0!==y?y:{},s=null!==(k=null===(R=m.selectors[0])||void 0===R?void 0:R.variables)&&void 0!==k?k:{}}else a=m.owner.variables,s=m.variables;var w=(0,r.default)((0,r.default)((0,r.default)({},a),s),e);null==l||e.hasOwnProperty("id")||(w.id=h);var I=b(d,w,{force:!0});return c(I.request.variables,{fetchPolicy:v,__environment:u,__nameForWarning:"refetch"}),t({type:"refetch",fetchPolicy:v,onComplete:g,refetchEnvironment:u,refetchQuery:I,renderPolicy:_}),{dispose:n}}),[a,t,n,h])}(0,x,H,Z,C,e,0,I,B,t,R),disableStoreUpdates:ee,enableStoreUpdates:te}}},8924:(e,t,n)=>{"use strict";var r=n(6849),i=n(1143),a=n(7294).useContext;e.exports=function(){var e=a(r);return null==e&&i(!1),e.environment}},8977:(e,t,n)=>{"use strict";n(3620),n(7294).useRef,e.exports=function(e,t){}},1102:(e,t,n)=>{"use strict";var r=n(8924),i=n(7294),a=i.useEffect,o=i.useRef;e.exports=function(e,t){var n=r(),i=o(null),s=Array.from(e).sort().join("");return a((function(){var r=n.getStore(),a=r.lookupInvalidationState(e),o=r.subscribeToInvalidationState(a,t);return i.current=o,function(){return o.dispose()}}),[s,t,n]),{dispose:function(){null!=i.current&&i.current.dispose()}}}},8747:(e,t,n)=>{"use strict";var r=n(7294),i=n(8924),a=n(4311).requestSubscription;e.exports=function(e,t){var n=null!=t?t:a,o=i();r.useEffect((function(){return a(o,e).dispose}),[o,e,n])}},2746:e=>{e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r},e.exports.default=e.exports,e.exports.__esModule=!0},8586:(e,t,n)=>{var r=n(2746);e.exports=function(e){if(Array.isArray(e))return r(e)},e.exports.default=e.exports,e.exports.__esModule=!0},2904:e=>{e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},e.exports.default=e.exports,e.exports.__esModule=!0},2646:(e,t,n)=>{var r=n(3759);e.exports=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=r(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0,a=function(){};return{s:a,n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){l=!0,o=e},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw o}}}},e.exports.default=e.exports,e.exports.__esModule=!0},4172:e=>{e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},e.exports.default=e.exports,e.exports.__esModule=!0},1611:e=>{function t(){return e.exports=t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},e.exports.default=e.exports,e.exports.__esModule=!0,t.apply(this,arguments)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0},1991:(e,t,n)=>{var r=n(13);e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)},e.exports.default=e.exports,e.exports.__esModule=!0},4914:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.default=e.exports,e.exports.__esModule=!0},6325:e=>{e.exports=function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)},e.exports.default=e.exports,e.exports.__esModule=!0},5236:e=>{e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.default=e.exports,e.exports.__esModule=!0},4942:(e,t,n)=>{var r=n(4172);function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}e.exports=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e},e.exports.default=e.exports,e.exports.__esModule=!0},5998:e=>{e.exports=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i},e.exports.default=e.exports,e.exports.__esModule=!0},13:e=>{function t(n,r){return e.exports=t=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},e.exports.default=e.exports,e.exports.__esModule=!0,t(n,r)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0},6489:(e,t,n)=>{var r=n(8586),i=n(6325),a=n(3759),o=n(5236);e.exports=function(e){return r(e)||i(e)||a(e)||o()},e.exports.default=e.exports,e.exports.__esModule=!0},3759:(e,t,n)=>{var r=n(2746);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}},e.exports.default=e.exports,e.exports.__esModule=!0},6585:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},9658:(e,t,n)=>{var r=n(6585);e.exports=function e(t,n,i){return r(n)||(i=n||i,n=[]),i=i||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var i=[],a=0;a<t.length;a++)i.push(e(t[a],n,r).source);return c(new RegExp("(?:"+i.join("|")+")",f(r)),n)}(t,n,i):function(e,t,n){return d(a(e,n),t,n)}(t,n,i)},e.exports.parse=a,e.exports.compile=function(e,t){return s(a(e,t),t)},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=d;var i=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,o=0,s="",c=t&&t.delimiter||"/";null!=(n=i.exec(e));){var f=n[0],d=n[1],p=n.index;if(s+=e.slice(o,p),o=p+f.length,d)s+=d[1];else{var h=e[o],v=n[2],_=n[3],g=n[4],m=n[5],y=n[6],b=n[7];s&&(r.push(s),s="");var E=null!=v&&null!=h&&h!==v,S="+"===y||"*"===y,k="?"===y||"*"===y,R=n[2]||c,w=g||m;r.push({name:_||a++,prefix:v||"",delimiter:R,optional:k,repeat:S,partial:E,asterisk:!!b,pattern:w?u(w):b?".*":"[^"+l(R)+"]+?"})}}return o<e.length&&(s+=e.substr(o)),s&&r.push(s),r}function o(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function s(e,t){for(var n=new Array(e.length),i=0;i<e.length;i++)"object"==typeof e[i]&&(n[i]=new RegExp("^(?:"+e[i].pattern+")$",f(t)));return function(t,i){for(var a="",s=t||{},l=(i||{}).pretty?o:encodeURIComponent,u=0;u<e.length;u++){var c=e[u];if("string"!=typeof c){var f,d=s[c.name];if(null==d){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=l(d[p]),!n[u].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(d),!n[u].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');a+=c.prefix+f}}else a+=c}return a}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var i=(n=n||{}).strict,a=!1!==n.end,o="",s=0;s<e.length;s++){var u=e[s];if("string"==typeof u)o+=l(u);else{var d=l(u.prefix),p="(?:"+u.pattern+")";t.push(u),u.repeat&&(p+="(?:"+d+p+")*"),o+=p=u.optional?u.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=l(n.delimiter||"/"),v=o.slice(-h.length)===h;return i||(o=(v?o.slice(0,-h.length):o)+"(?:"+h+"(?=$))?"),o+=a?"$":i&&v?"":"(?="+h+"|$)",c(new RegExp("^"+o,f(n)),t)}},2408:(e,t,n)=>{"use strict";var r=n(7418),i=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var o=60109,s=60110,l=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;i=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),o=f("react.provider"),s=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),u=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function _(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function m(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=_.prototype;var y=m.prototype=new g;y.constructor=m,r(y,_.prototype),y.isPureReactComponent=!0;var b={current:null},E=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,a={},o=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(o=""+t.key),t)E.call(t,r)&&!S.hasOwnProperty(r)&&(a[r]=t[r]);var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===a[r]&&(a[r]=l[r]);return{$$typeof:i,type:e,key:o,ref:s,props:a,_owner:b.current}}function R(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var w=/\/+/g;function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,n,r,o){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case i:case a:l=!0}}if(l)return o=o(l=e),e=""===r?"."+I(l,0):r,Array.isArray(o)?(n="",null!=e&&(n=e.replace(w,"$&/")+"/"),C(o,t,n,"",(function(e){return e}))):null!=o&&(R(o)&&(o=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,n+(!o.key||l&&l.key===o.key?"":(""+o.key).replace(w,"$&/")+"/")+e)),t.push(o)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+I(s=e[u],u);l+=C(s,t,n,c,o)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),u=0;!(s=e.next()).done;)l+=C(s=s.value,t,n,c=r+I(s,u++),o);else if("object"===s)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function P(e,t,n){if(null==e)return e;var r=[],i=0;return C(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function D(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var x={current:null};function O(){var e=x.current;if(null===e)throw Error(p(321));return e}var T={ReactCurrentDispatcher:x,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:b,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!R(e))throw Error(p(143));return e}},t.Component=_,t.PureComponent=m,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),o=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=b.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)E.call(t,c)&&!S.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){u=Array(c);for(var f=0;f<c;f++)u[f]=arguments[f+2];a.children=u}return{$$typeof:i,type:e.type,key:o,ref:s,props:a,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=R,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:D}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return O().useCallback(e,t)},t.useContext=function(e,t){return O().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return O().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return O().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return O().useLayoutEffect(e,t)},t.useMemo=function(e,t){return O().useMemo(e,t)},t.useReducer=function(e,t,n){return O().useReducer(e,t,n)},t.useRef=function(e){return O().useRef(e)},t.useState=function(e){return O().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},4311:(e,t,n)=>{e.exports=n(3151)},2158:(e,t,n)=>{"use strict";var r=n(1743),i=n(1093),a=n(1143);e.exports=function(e){switch(e){case"connection":return r;case"deleteRecord":return i.DeleteRecordHandler;case"deleteEdge":return i.DeleteEdgeHandler;case"appendEdge":return i.AppendEdgeHandler;case"prependEdge":return i.PrependEdgeHandler;case"appendNode":return i.AppendNodeHandler;case"prependNode":return i.PrependNodeHandler}a(!1)}},1743:(e,t,n)=>{"use strict";var r=n(3300),i=n(1126),a=n(1143),o=(n(3620),n(6063).generateClientID),s=n(1380).getStableStorageKey,l="connection",u="__connection_next_edge_index";function c(e,t,n){if(null==n)return n;var i=r.get().EDGES,s=t.getValue(u);"number"!=typeof s&&a(!1);var l=o(t.getDataID(),i,s),c=e.create(l,n.getType());return c.copyFieldsFrom(n),null==c.getValue("cursor")&&c.setValue(null,"cursor"),t.setValue(s+1,u),c}function f(e,t,n){for(var i=r.get().NODE,a=0;a<e.length;a++){var o=e[a];if(o){var s=o.getLinkedRecord(i),l=s&&s.getDataID();if(l){if(n.has(l))continue;n.add(l)}t.push(o)}}}e.exports={buildConnectionEdge:c,createEdge:function(e,t,n,i){var a=r.get().NODE,s=o(t.getDataID(),n.getDataID()),l=e.get(s);return l||(l=e.create(s,i)),l.setLinkedRecord(n,a),null==l.getValue("cursor")&&l.setValue(null,"cursor"),l},deleteNode:function(e,t){var n=r.get(),i=n.EDGES,a=n.NODE,o=e.getLinkedRecords(i);if(o){for(var s,l=0;l<o.length;l++){var u=o[l],c=u&&u.getLinkedRecord(a);null!=c&&c.getDataID()===t?void 0===s&&(s=o.slice(0,l)):void 0!==s&&s.push(u)}void 0!==s&&e.setLinkedRecords(s,i)}},getConnection:function(e,t,n){var r=i(l,t,null);return e.getLinkedRecord(r,n)},getConnectionID:function(e,t,n){var r=i(l,t,null),a=s(r,n);return o(e,a)},insertEdgeAfter:function(e,t,n){var i=r.get(),a=i.CURSOR,o=i.EDGES,s=e.getLinkedRecords(o);if(s){var l;if(null==n)l=s.concat(t);else{l=[];for(var u=!1,c=0;c<s.length;c++){var f=s[c];l.push(f),null!=f&&n===f.getValue(a)&&(l.push(t),u=!0)}u||l.push(t)}e.setLinkedRecords(l,o)}else e.setLinkedRecords([t],o)},insertEdgeBefore:function(e,t,n){var i=r.get(),a=i.CURSOR,o=i.EDGES,s=e.getLinkedRecords(o);if(s){var l;if(null==n)l=[t].concat(s);else{l=[];for(var u=!1,c=0;c<s.length;c++){var f=s[c];null!=f&&n===f.getValue(a)&&(l.push(t),u=!0),l.push(f)}u||l.unshift(t)}e.setLinkedRecords(l,o)}else e.setLinkedRecords([t],o)},update:function(e,t){var n=e.get(t.dataID);if(n){var i=r.get(),a=i.EDGES,s=i.END_CURSOR,l=i.HAS_NEXT_PAGE,d=i.HAS_PREV_PAGE,p=i.PAGE_INFO,h=i.PAGE_INFO_TYPE,v=i.START_CURSOR,_=n.getLinkedRecord(t.fieldKey),g=_&&_.getLinkedRecord(p);if(_){var m=o(n.getDataID(),t.handleKey),y=n.getLinkedRecord(t.handleKey),b=null!=y?y:e.get(m),E=b&&b.getLinkedRecord(p);if(b){null==y&&n.setLinkedRecord(b,t.handleKey);var S=b,k=_.getLinkedRecords(a);k&&(k=k.map((function(t){return c(e,S,t)})));var R=S.getLinkedRecords(a),w=S.getLinkedRecord(p);S.copyFieldsFrom(_),R&&S.setLinkedRecords(R,a),w&&S.setLinkedRecord(w,p);var I=[],C=t.args;if(R&&k)if(null!=C.after){if(!E||C.after!==E.getValue(s))return;var P=new Set;f(R,I,P),f(k,I,P)}else if(null!=C.before){if(!E||C.before!==E.getValue(v))return;var D=new Set;f(k,I,D),f(R,I,D)}else I=k;else I=k||R;if(null!=I&&I!==R&&S.setLinkedRecords(I,a),E&&g)if(null==C.after&&null==C.before)E.copyFieldsFrom(g);else if(null!=C.before||null==C.after&&C.last){E.setValue(!!g.getValue(d),d);var x=g.getValue(v);"string"==typeof x&&E.setValue(x,v)}else if(null!=C.after||null==C.before&&C.first){E.setValue(!!g.getValue(l),l);var O=g.getValue(s);"string"==typeof O&&E.setValue(O,s)}}else{var T=e.create(m,_.getType());T.setValue(0,u),T.copyFieldsFrom(_);var N=_.getLinkedRecords(a);N&&(N=N.map((function(t){return c(e,T,t)})),T.setLinkedRecords(N,a)),n.setLinkedRecord(T,t.handleKey),(E=e.create(o(T.getDataID(),p),h)).setValue(!1,l),E.setValue(!1,d),E.setValue(null,s),E.setValue(null,v),g&&E.copyFieldsFrom(g),T.setLinkedRecord(E,p)}}else n.setValue(null,t.handleKey)}}}},3300:e=>{"use strict";var t={after:!0,before:!0,find:!0,first:!0,last:!0,surrounds:!0},n={CLIENT_MUTATION_ID:"clientMutationId",CURSOR:"cursor",EDGES:"edges",END_CURSOR:"endCursor",HAS_NEXT_PAGE:"hasNextPage",HAS_PREV_PAGE:"hasPreviousPage",NODE:"node",PAGE_INFO_TYPE:"PageInfo",PAGE_INFO:"pageInfo",START_CURSOR:"startCursor"},r={inject:function(e){n=e},get:function(){return n},isConnectionCall:function(e){return t.hasOwnProperty(e.name)}};e.exports=r},1093:(e,t,n)=>{"use strict";var r=n(5847)(n(1735)),i=n(1743),a=n(3300),o=n(1143),s=(n(3620),{update:function(e,t){var n=e.get(t.dataID);if(null!=n){var r=n.getValue(t.fieldKey);"string"==typeof r?e.delete(r):Array.isArray(r)&&r.forEach((function(t){"string"==typeof t&&e.delete(t)}))}}}),l={update:function(e,t){var n=e.get(t.dataID);if(null!=n){var a=t.handleArgs.connections;null==a&&o(!1);var s=n.getValue(t.fieldKey);(Array.isArray(s)?s:[s]).forEach((function(t){if("string"==typeof t){var n,o=(0,r.default)(a);try{for(o.s();!(n=o.n()).done;){var s=n.value,l=e.get(s);null!=l&&i.deleteNode(l,t)}}catch(e){o.e(e)}finally{o.f()}}}))}}},u={update:p(i.insertEdgeAfter)},c={update:p(i.insertEdgeBefore)},f={update:h(i.insertEdgeAfter)},d={update:h(i.insertEdgeBefore)};function p(e){return function(t,n){var s,l=t.get(n.dataID);if(null!=l){var u,c,f=n.handleArgs.connections;null==f&&o(!1);try{u=l.getLinkedRecord(n.fieldKey,n.args)}catch(e){}if(!u)try{c=l.getLinkedRecords(n.fieldKey,n.args)}catch(e){}if(null!=u||null!=c){var d,p=a.get(),h=p.NODE,v=p.EDGES,_=null!==(s=c)&&void 0!==s?s:[u],g=(0,r.default)(_);try{var m=function(){var n=d.value;if(null==n)return"continue";var a=n.getLinkedRecord("node");if(!a)return"continue";var s,l=a.getDataID(),u=(0,r.default)(f);try{for(u.s();!(s=u.n()).done;){var c=s.value,p=t.get(c);if(null!=p&&!(null===(y=p.getLinkedRecords(v))||void 0===y?void 0:y.some((function(e){var t;return(null==e||null===(t=e.getLinkedRecord(h))||void 0===t?void 0:t.getDataID())===l})))){var _=i.buildConnectionEdge(t,p,n);null==_&&o(!1),e(p,_)}}}catch(e){u.e(e)}finally{u.f()}};for(g.s();!(d=g.n()).done;){var y;m()}}catch(e){g.e(e)}finally{g.f()}}}}}function h(e){return function(t,n){var s,l=t.get(n.dataID);if(null!=l){var u,c,f=n.handleArgs,d=f.connections,p=f.edgeTypeName;null==d&&o(!1),null==p&&o(!1);try{u=l.getLinkedRecord(n.fieldKey,n.args)}catch(e){}if(!u)try{c=l.getLinkedRecords(n.fieldKey,n.args)}catch(e){}if(null!=u||null!=c){var h,v=a.get(),_=v.NODE,g=v.EDGES,m=null!==(s=c)&&void 0!==s?s:[u],y=(0,r.default)(m);try{var b=function(){var n=h.value;if(null==n)return"continue";var a,s=n.getDataID(),l=(0,r.default)(d);try{for(l.s();!(a=l.n()).done;){var u=a.value,c=t.get(u);if(null!=c&&!(null===(E=c.getLinkedRecords(g))||void 0===E?void 0:E.some((function(e){var t;return(null==e||null===(t=e.getLinkedRecord(_))||void 0===t?void 0:t.getDataID())===s})))){var f=i.createEdge(t,c,n,p);null==f&&o(!1),e(c,f)}}}catch(e){l.e(e)}finally{l.f()}};for(y.s();!(h=y.n()).done;){var E;b()}}catch(e){y.e(e)}finally{y.f()}}}}}e.exports={AppendEdgeHandler:u,DeleteRecordHandler:s,PrependEdgeHandler:c,AppendNodeHandler:f,PrependNodeHandler:d,DeleteEdgeHandler:l}},3151:(e,t,n)=>{"use strict";var r=n(1743),i=n(3300),a=n(5557),o=n(1093),s=n(8080),l=n(132),u=n(8298),c=n(3385),f=n(9558),d=n(2158),p=n(2299),h=n(1230),v=n(4176),_=n(1071),g=n(8250),m=n(1447),y=n(1984),b=n(2893),E=n(5060),S=n(1152),k=n(1241),R=n(4973),w=n(8724),I=n(9480),C=n(1380),P=n(2691),D=n(869),x=n(5621),O=n(1069),T=n(221),N=n(8958),F=n(594),A=n(2232),L=n(8216),M=n(7106),U=n(1530),q=n(6956),z=n(1126),j=n(676),V=n(7188),Q=n(641),K=n(7669),B=n(1507),H=n(5578),W=n(8154),Y=n(5476),G=n(1411),$=n(6063),X=$.generateClientID,J=$.generateUniqueClientID,Z=$.isClientID;e.exports={Environment:v,Network:b,Observable:E,QueryResponseCache:R,RecordSource:w,Record:g,ReplaySubject:I,Store:y,areEqualSelectors:m.areEqualSelectors,createFragmentSpecResolver:T,createNormalizationSelector:m.createNormalizationSelector,createOperationDescriptor:_.createOperationDescriptor,createReaderSelector:m.createReaderSelector,createRequestDescriptor:_.createRequestDescriptor,getDataIDsFromFragment:m.getDataIDsFromFragment,getDataIDsFromObject:m.getDataIDsFromObject,getNode:a.getNode,getFragment:a.getFragment,getInlineDataFragment:a.getInlineDataFragment,getModuleComponentKey:C.getModuleComponentKey,getModuleOperationKey:C.getModuleOperationKey,getPaginationFragment:a.getPaginationFragment,getPluralSelector:m.getPluralSelector,getRefetchableFragment:a.getRefetchableFragment,getRequest:a.getRequest,getRequestIdentifier:j,getSelector:m.getSelector,getSelectorsFromObject:m.getSelectorsFromObject,getSingularSelector:m.getSingularSelector,getStorageKey:C.getStorageKey,getVariablesFromFragment:m.getVariablesFromFragment,getVariablesFromObject:m.getVariablesFromObject,getVariablesFromPluralFragment:m.getVariablesFromPluralFragment,getVariablesFromSingularFragment:m.getVariablesFromSingularFragment,reportMissingRequiredFields:W,graphql:a.graphql,isFragment:a.isFragment,isInlineDataFragment:a.isInlineDataFragment,isRequest:a.isRequest,readInlineData:B,MutationTypes:c.MutationTypes,RangeOperations:c.RangeOperations,DefaultHandlerProvider:d,ConnectionHandler:r,MutationHandlers:o,VIEWER_ID:P.VIEWER_ID,VIEWER_TYPE:P.VIEWER_TYPE,applyOptimisticMutation:D,commitLocalUpdate:x,commitMutation:O,fetchQuery:L,fetchQuery_DEPRECATED:U,isRelayModernEnvironment:Q,requestSubscription:Y,ConnectionInterface:i,PreloadableQueryRegistry:s,RelayProfiler:k,createPayloadFor3DField:N,RelayConcreteNode:l,RelayError:p,RelayFeatureFlags:h,DEFAULT_HANDLE_KEY:f.DEFAULT_HANDLE_KEY,FRAGMENTS_KEY:C.FRAGMENTS_KEY,FRAGMENT_OWNER_KEY:C.FRAGMENT_OWNER_KEY,ID_KEY:C.ID_KEY,REF_KEY:C.REF_KEY,REFS_KEY:C.REFS_KEY,ROOT_ID:C.ROOT_ID,ROOT_TYPE:C.ROOT_TYPE,TYPENAME_KEY:C.TYPENAME_KEY,deepFreeze:A,generateClientID:X,generateUniqueClientID:J,getRelayHandleKey:z,isClientID:Z,isPromise:V,isScalarAndEqual:K,recycleNodesInto:H,stableCopy:G,getFragmentIdentifier:q,__internal:{OperationTracker:S,createRelayContext:F,getOperationVariables:u.getOperationVariables,fetchQuery:M.fetchQuery,fetchQueryDeduped:M.fetchQueryDeduped,getPromiseForActiveRequest:M.getPromiseForActiveRequest,getObservableForActiveRequest:M.getObservableForActiveRequest}}},3385:(e,t,n)=>{"use strict";var r=n(5847)(n(1735)),i=n(1743),a=(n(3620),Object.freeze({RANGE_ADD:"RANGE_ADD",RANGE_DELETE:"RANGE_DELETE",NODE_DELETE:"NODE_DELETE"})),o=Object.freeze({APPEND:"append",PREPEND:"prepend"});function s(e){return e.fragment.selections&&e.fragment.selections.length>0&&"LinkedField"===e.fragment.selections[0].kind?e.fragment.selections[0].name:null}e.exports={MutationTypes:a,RangeOperations:o,convert:function(e,t,n,a){var o=n?[n]:[],l=a?[a]:[];return e.forEach((function(e){switch(e.type){case"NODE_DELETE":var n=function(e,t){var n=e.deletedIDFieldName,r=s(t);return r?function(e,t){var i=e.getRootField(r);if(i){var a=i.getValue(n);(Array.isArray(a)?a:[a]).forEach((function(t){t&&"string"==typeof t&&e.delete(t)}))}}:null}(e,t);n&&(o.push(n),l.push(n));break;case"RANGE_ADD":var a=function(e,t){var n=e.parentID,a=e.connectionInfo,o=e.edgeName;if(!n)return null;var l=s(t);return a&&l?function(e,t){var s=e.get(n);if(s){var u=e.getRootField(l);if(u){var c,f=u.getLinkedRecord(o),d=(0,r.default)(a);try{for(d.s();!(c=d.n()).done;){var p=c.value;if(f){var h=i.getConnection(s,p.key,p.filters);if(h){var v=i.buildConnectionEdge(e,h,f);if(v)switch(p.rangeBehavior){case"append":i.insertEdgeAfter(h,v);break;case"prepend":i.insertEdgeBefore(h,v)}}}}}catch(e){d.e(e)}finally{d.f()}}}}:null}(e,t);a&&(o.push(a),l.push(a));break;case"RANGE_DELETE":var u=function(e,t){var n=e.parentID,a=e.connectionKeys,o=e.pathToConnection,l=e.deletedIDFieldName;if(!n)return null;var u=s(t);return u?function(e,t){if(t){var s=[],c=t[u];if(c&&Array.isArray(l)){var f,d=(0,r.default)(l);try{for(d.s();!(f=d.n()).done;){var p=f.value;c&&"object"==typeof c&&(c=c[p])}}catch(e){d.e(e)}finally{d.f()}Array.isArray(c)?c.forEach((function(e){e&&e.id&&"object"==typeof e&&"string"==typeof e.id&&s.push(e.id)})):c&&c.id&&"string"==typeof c.id&&s.push(c.id)}else c&&"string"==typeof l&&"object"==typeof c&&("string"==typeof(c=c[l])?s.push(c):Array.isArray(c)&&c.forEach((function(e){"string"==typeof e&&s.push(e)})));!function(e,t,n,a,o){var s=a.get(e);if(s&&!(n.length<2)){for(var l=s,u=1;u<n.length-1;u++)l&&(l=l.getLinkedRecord(n[u]));if(t&&l){var c,f=(0,r.default)(t);try{var d=function(){var e=c.value,t=i.getConnection(l,e.key,e.filters);t&&o.forEach((function(e){i.deleteNode(t,e)}))};for(f.s();!(c=f.n()).done;)d()}catch(e){f.e(e)}finally{f.f()}}}}(n,a,o,e,s)}}:null}(e,t);u&&(o.push(u),l.push(u))}})),{optimisticUpdater:function(e,t){o.forEach((function(n){n(e,t)}))},updater:function(e,t){l.forEach((function(n){n(e,t)}))}}}}},1228:(e,t,n)=>{"use strict";var r=n(1143),i=n(6063).generateClientID,a=n(1380).getStableStorageKey,o=function(){function e(e,t,n){this._dataID=n,this._mutator=t,this._source=e}var t=e.prototype;return t.copyFieldsFrom=function(e){this._mutator.copyFields(e.getDataID(),this._dataID)},t.getDataID=function(){return this._dataID},t.getType=function(){var e=this._mutator.getType(this._dataID);return null==e&&r(!1),e},t.getValue=function(e,t){var n=a(e,t);return this._mutator.getValue(this._dataID,n)},t.setValue=function(e,t,n){s(e)||r(!1);var i=a(t,n);return this._mutator.setValue(this._dataID,i,e),this},t.getLinkedRecord=function(e,t){var n=a(e,t),r=this._mutator.getLinkedRecordID(this._dataID,n);return null!=r?this._source.get(r):r},t.setLinkedRecord=function(t,n,i){t instanceof e||r(!1);var o=a(n,i),s=t.getDataID();return this._mutator.setLinkedRecordID(this._dataID,o,s),this},t.getOrCreateLinkedRecord=function(e,t,n){var r=this.getLinkedRecord(e,n);if(!r){var o,s=a(e,n),l=i(this.getDataID(),s);r=null!==(o=this._source.get(l))&&void 0!==o?o:this._source.create(l,t),this.setLinkedRecord(r,e,n)}return r},t.getLinkedRecords=function(e,t){var n=this,r=a(e,t),i=this._mutator.getLinkedRecordIDs(this._dataID,r);return null==i?i:i.map((function(e){return null!=e?n._source.get(e):e}))},t.setLinkedRecords=function(e,t,n){Array.isArray(e)||r(!1);var i=a(t,n),o=e.map((function(e){return e&&e.getDataID()}));return this._mutator.setLinkedRecordIDs(this._dataID,i,o),this},t.invalidateRecord=function(){this._source.markIDForInvalidation(this._dataID)},e}();function s(e){return null==e||"object"!=typeof e||Array.isArray(e)&&e.every(s)}e.exports=o},1697:(e,t,n)=>{"use strict";var r=n(8250),i=n(1143),a=n(6528).EXISTENT,o=function(){function e(e,t){this.__sources=[t,e],this._base=e,this._sink=t}var t=e.prototype;return t.unstable_getRawRecordWithChanges=function(e){var t=this._base.get(e),n=this._sink.get(e);return void 0===n?null==t?t:r.clone(t):null===n?null:null!=t?r.update(t,n):r.clone(n)},t._getSinkRecord=function(e){var t=this._sink.get(e);if(!t){var n=this._base.get(e);n||i(!1),t=r.create(e,r.getType(n)),this._sink.set(e,t)}return t},t.copyFields=function(e,t){var n=this._sink.get(e),a=this._base.get(e);n||a||i(!1);var o=this._getSinkRecord(t);a&&r.copyFields(a,o),n&&r.copyFields(n,o)},t.copyFieldsFromRecord=function(e,t){var n=this._getSinkRecord(t);r.copyFields(e,n)},t.create=function(e,t){(this._base.getStatus(e)===a||this._sink.getStatus(e)===a)&&i(!1);var n=r.create(e,t);this._sink.set(e,n)},t.delete=function(e){this._sink.delete(e)},t.getStatus=function(e){return this._sink.has(e)?this._sink.getStatus(e):this._base.getStatus(e)},t.getType=function(e){for(var t=0;t<this.__sources.length;t++){var n=this.__sources[t].get(e);if(n)return r.getType(n);if(null===n)return null}},t.getValue=function(e,t){for(var n=0;n<this.__sources.length;n++){var i=this.__sources[n].get(e);if(i){var a=r.getValue(i,t);if(void 0!==a)return a}else if(null===i)return null}},t.setValue=function(e,t,n){var i=this._getSinkRecord(e);r.setValue(i,t,n)},t.getLinkedRecordID=function(e,t){for(var n=0;n<this.__sources.length;n++){var i=this.__sources[n].get(e);if(i){var a=r.getLinkedRecordID(i,t);if(void 0!==a)return a}else if(null===i)return null}},t.setLinkedRecordID=function(e,t,n){var i=this._getSinkRecord(e);r.setLinkedRecordID(i,t,n)},t.getLinkedRecordIDs=function(e,t){for(var n=0;n<this.__sources.length;n++){var i=this.__sources[n].get(e);if(i){var a=r.getLinkedRecordIDs(i,t);if(void 0!==a)return a}else if(null===i)return null}},t.setLinkedRecordIDs=function(e,t,n){var i=this._getSinkRecord(e);r.setLinkedRecordIDs(i,t,n)},e}();e.exports=o},7703:(e,t,n)=>{"use strict";var r=n(8250),i=n(1228),a=n(1143),o=n(6528),s=o.EXISTENT,l=o.NONEXISTENT,u=n(1380),c=u.ROOT_ID,f=u.ROOT_TYPE,d=function(){function e(e,t,n){this.__mutator=e,this._handlerProvider=n||null,this._proxies={},this._getDataID=t,this._invalidatedStore=!1,this._idsMarkedForInvalidation=new Set}var t=e.prototype;return t.publishSource=function(e,t){var n=this;e.getRecordIDs().forEach((function(t){var i=e.getStatus(t);if(i===s){var a=e.get(t);a&&(n.__mutator.getStatus(t)!==s&&n.create(t,r.getType(a)),n.__mutator.copyFieldsFromRecord(a,t))}else i===l&&n.delete(t)})),t&&t.length&&t.forEach((function(e){var t=n._handlerProvider&&n._handlerProvider(e.handle);t||a(!1),t.update(n,e)}))},t.create=function(e,t){this.__mutator.create(e,t),delete this._proxies[e];var n=this.get(e);return n||a(!1),n},t.delete=function(e){e===c&&a(!1),delete this._proxies[e],this.__mutator.delete(e)},t.get=function(e){if(!this._proxies.hasOwnProperty(e)){var t=this.__mutator.getStatus(e);this._proxies[e]=t===s?new i(this,this.__mutator,e):t===l?null:void 0}return this._proxies[e]},t.getRoot=function(){var e=this.get(c);return e||(e=this.create(c,f)),e&&e.getType()===f||a(!1),e},t.invalidateStore=function(){this._invalidatedStore=!0},t.isStoreMarkedForInvalidation=function(){return this._invalidatedStore},t.markIDForInvalidation=function(e){this._idsMarkedForInvalidation.add(e)},t.getIDsMarkedForInvalidation=function(){return this._idsMarkedForInvalidation},e}();e.exports=d},4596:(e,t,n)=>{"use strict";var r=n(1143),i=n(1380),a=i.getStorageKey,o=i.ROOT_TYPE,s=function(){function e(e,t,n){this.__mutator=e,this.__recordSource=t,this._readSelector=n}var t=e.prototype;return t.create=function(e,t){return this.__recordSource.create(e,t)},t.delete=function(e){this.__recordSource.delete(e)},t.get=function(e){return this.__recordSource.get(e)},t.getRoot=function(){return this.__recordSource.getRoot()},t.getOperationRoot=function(){var e=this.__recordSource.get(this._readSelector.dataID);return e||(e=this.__recordSource.create(this._readSelector.dataID,o)),e},t._getRootField=function(e,t,n){var i=e.node.selections.find((function(e){return"LinkedField"===e.kind&&e.name===t}));return i&&"LinkedField"===i.kind||r(!1),i.plural!==n&&r(!1),i},t.getRootField=function(e){var t=this._getRootField(this._readSelector,e,!1),n=a(t,this._readSelector.variables);return this.getOperationRoot().getLinkedRecord(n)},t.getPluralRootField=function(e){var t=this._getRootField(this._readSelector,e,!0),n=a(t,this._readSelector.variables);return this.getOperationRoot().getLinkedRecords(n)},t.invalidateStore=function(){this.__recordSource.invalidateStore()},e}();e.exports=s},869:(e,t,n)=>{"use strict";var r=n(3385),i=n(1143),a=n(641),o=n(5557).getRequest,s=n(1071).createOperationDescriptor;e.exports=function(e,t){a(e)||i(!1);var n=o(t.mutation);if("mutation"!==n.params.operationKind)throw new Error("commitMutation: Expected mutation operation");var l=t.optimisticUpdater,u=t.configs,c=t.optimisticResponse,f=t.variables,d=s(n,f);return u&&(l=r.convert(u,n,l).optimisticUpdater),e.applyMutation({operation:d,response:c,updater:l})}},5621:e=>{"use strict";e.exports=function(e,t){e.commitUpdate(t)}},1069:(e,t,n)=>{"use strict";var r=n(5847)(n(9381)),i=n(3385),a=n(1143),o=n(641),s=(n(9284),n(3620),n(5557).getRequest),l=n(6063).generateUniqueClientID,u=n(1071).createOperationDescriptor;e.exports=function(e,t){o(e)||a(!1);var n=s(t.mutation);if("mutation"!==n.params.operationKind)throw new Error("commitMutation: Expected mutation operation");if("Request"!==n.kind)throw new Error("commitMutation: Expected mutation to be of type request");var c=t.optimisticResponse,f=t.optimisticUpdater,d=t.updater,p=t.configs,h=t.cacheConfig,v=t.onError,_=t.onUnsubscribe,g=t.variables,m=t.uploadables,y=u(n,g,h,l());if("function"==typeof c&&(c=c()),p){var b=i.convert(p,n,f,d);f=b.optimisticUpdater,d=b.updater}var E=[];return{dispose:e.executeMutation({operation:y,optimisticResponse:c,optimisticUpdater:f,updater:d,uploadables:m}).subscribe({next:function(e){Array.isArray(e)?e.forEach((function(e){e.errors&&E.push.apply(E,(0,r.default)(e.errors))})):e.errors&&E.push.apply(E,(0,r.default)(e.errors))},complete:function(){var n=t.onCompleted;n&&n(e.lookup(y.fragment).data,0!==E.length?E:null)},error:v,unsubscribe:_}).unsubscribe}}},9284:(e,t,n)=>{"use strict";n(5847)(n(9471)),n(3620),Object.prototype.hasOwnProperty;var r=n(132);r.CONDITION,r.CLIENT_COMPONENT,r.CLIENT_EXTENSION,r.DEFER,r.FLIGHT_FIELD,r.FRAGMENT_SPREAD,r.INLINE_FRAGMENT,r.LINKED_FIELD,r.LINKED_HANDLE,r.MODULE_IMPORT,r.SCALAR_FIELD,r.SCALAR_HANDLE,r.STREAM,r.TYPE_DISCRIMINATOR,e.exports=function(){}},7192:(e,t,n)=>{"use strict";var r=n(5060);e.exports={convertFetch:function(e){return function(t,n,i,a,o){var s=e(t,n,i,a,o);return s instanceof Error?r.create((function(e){return e.error(s)})):r.from(s)}}}},2893:(e,t,n)=>{"use strict";var r=n(1143),i=n(7192).convertFetch;e.exports={create:function(e,t){var n=i(e);return{execute:function(e,i,a,o,s){if("subscription"===e.operationKind)return t||r(!1),o&&r(!1),t(e,i,a);var l=a.poll;return null!=l?(o&&r(!1),n(e,i,{force:!0}).poll(l)):n(e,i,a,o,s)}}}}},5060:(e,t,n)=>{"use strict";var r=n(7188),i=function(e,t){},a=function(){function e(e){this._source=e}e.create=function(t){return new e(t)},e.onUnhandledError=function(e){i=e},e.from=function(e){return function(e){return"object"==typeof e&&null!==e&&"function"==typeof e.subscribe}(e)?o(e):r(e)?s(e):l(e)};var t=e.prototype;return t.catch=function(t){var n=this;return e.create((function(e){var r;return n.subscribe({start:function(e){r=e},next:e.next,complete:e.complete,error:function(n){try{t(n).subscribe({start:function(e){r=e},next:e.next,complete:e.complete,error:e.error})}catch(t){e.error(t,!0)}}}),function(){return r.unsubscribe()}}))},t.concat=function(t){var n=this;return e.create((function(e){var r;return n.subscribe({start:function(e){r=e},next:e.next,error:e.error,complete:function(){r=t.subscribe(e)}}),function(){r&&r.unsubscribe()}}))},t.do=function(t){var n=this;return e.create((function(e){var r=function(n){return function(){try{t[n]&&t[n].apply(t,arguments)}catch(e){i(e,!0)}e[n]&&e[n].apply(e,arguments)}};return n.subscribe({start:r("start"),next:r("next"),error:r("error"),complete:r("complete"),unsubscribe:r("unsubscribe")})}))},t.finally=function(t){var n=this;return e.create((function(e){var r=n.subscribe(e);return function(){r.unsubscribe(),t()}}))},t.ifEmpty=function(t){var n=this;return e.create((function(e){var r=!1,i=n.subscribe({next:function(t){r=!0,e.next(t)},error:e.error,complete:function(){r?e.complete():i=t.subscribe(e)}});return function(){i.unsubscribe()}}))},t.subscribe=function(e){return function(e,t){var n,r=!1,a=function(e){return Object.defineProperty(e,"closed",{get:function(){return r}})};function o(){if(n){if(n.unsubscribe)n.unsubscribe();else try{n()}catch(e){i(e,!0)}n=void 0}}var s=a({unsubscribe:function(){if(!r){r=!0;try{t.unsubscribe&&t.unsubscribe(s)}catch(e){i(e,!0)}finally{o()}}}});try{t.start&&t.start(s)}catch(e){i(e,!0)}if(r)return s;var l=a({next:function(e){if(!r&&t.next)try{t.next(e)}catch(e){i(e,!0)}},error:function(e,n){if(r||!t.error)r=!0,i(e,n||!1),o();else{r=!0;try{t.error(e)}catch(e){i(e,!0)}finally{o()}}},complete:function(){if(!r){r=!0;try{t.complete&&t.complete()}catch(e){i(e,!0)}finally{o()}}}});try{n=e(l)}catch(e){l.error(e,!0)}return r&&o(),s}(this._source,e)},t.map=function(t){var n=this;return e.create((function(e){var r=n.subscribe({complete:e.complete,error:e.error,next:function(n){try{var r=t(n);e.next(r)}catch(t){e.error(t,!0)}}});return function(){r.unsubscribe()}}))},t.mergeMap=function(t){var n=this;return e.create((function(r){var i=[];function a(e){this._sub=e,i.push(e)}function o(){i.splice(i.indexOf(this._sub),1),0===i.length&&r.complete()}return n.subscribe({start:a,next:function(n){try{r.closed||e.from(t(n)).subscribe({start:a,next:r.next,error:r.error,complete:o})}catch(e){r.error(e,!0)}},error:r.error,complete:o}),function(){i.forEach((function(e){return e.unsubscribe()})),i.length=0}}))},t.poll=function(t){var n=this;return e.create((function(e){var r,i;return function a(){r=n.subscribe({next:e.next,error:e.error,complete:function(){i=setTimeout(a,t)}})}(),function(){clearTimeout(i),r.unsubscribe()}}))},t.toPromise=function(){var e=this;return new Promise((function(t,n){var r=!1;e.subscribe({next:function(e){r||(r=!0,t(e))},error:n,complete:t})}))},e}();function o(e){return e instanceof a?e:a.create((function(t){return e.subscribe(t)}))}function s(e){return a.create((function(t){e.then((function(e){t.next(e),t.complete()}),t.error)}))}function l(e){return a.create((function(t){t.next(e),t.complete()}))}e.exports=a},4973:(e,t,n)=>{"use strict";var r=n(5847)(n(9471)),i=n(1143),a=n(1411),o=function(){function e(e){var t=e.size,n=e.ttl;t>0||i(!1),n>0||i(!1),this._responses=new Map,this._size=t,this._ttl=n}var t=e.prototype;return t.clear=function(){this._responses.clear()},t.get=function(e,t){var n=this,i=s(e,t);this._responses.forEach((function(e,t){e.fetchTime+n._ttl>=Date.now()||n._responses.delete(t)}));var a=this._responses.get(i);return null!=a?(0,r.default)((0,r.default)({},a.payload),{},{extensions:(0,r.default)((0,r.default)({},a.payload.extensions),{},{cacheTimestamp:a.fetchTime})}):null},t.set=function(e,t,n){var r=Date.now(),i=s(e,t);if(this._responses.delete(i),this._responses.set(i,{fetchTime:r,payload:n}),this._responses.size>this._size){var a=this._responses.keys().next();a.done||this._responses.delete(a.value)}},e}();function s(e,t){return JSON.stringify(a({queryID:e,variables:t}))}e.exports=o},5557:(e,t,n)=>{"use strict";var r=n(132),i=n(1143);function a(e){var t=e;return"function"==typeof t?t=t():t.default&&(t=t.default),t}function o(e){var t=a(e);return"object"==typeof t&&null!==t&&t.kind===r.FRAGMENT}function s(e){var t=a(e);return"object"==typeof t&&null!==t&&t.kind===r.REQUEST}function l(e){var t=a(e);return"object"==typeof t&&null!==t&&t.kind===r.INLINE_DATA_FRAGMENT}function u(e){var t=a(e);return o(t)||i(!1),t}n(3620),e.exports={getFragment:u,getNode:a,getPaginationFragment:function(e){var t,n=u(e),r=null===(t=n.metadata)||void 0===t?void 0:t.refetch,i=null==r?void 0:r.connection;return null===r||"object"!=typeof r||null===i||"object"!=typeof i?null:n},getRefetchableFragment:function(e){var t,n=u(e),r=null===(t=n.metadata)||void 0===t?void 0:t.refetch;return null===r||"object"!=typeof r?null:n},getRequest:function(e){var t=a(e);return s(t)||i(!1),t},getInlineDataFragment:function(e){var t=a(e);return l(t)||i(!1),t},graphql:function(e){i(!1)},isFragment:o,isRequest:s,isInlineDataFragment:l}},8080:e=>{"use strict";var t=new(function(){function e(){this._preloadableQueries=new Map,this._callbacks=new Map}var t=e.prototype;return t.set=function(e,t){this._preloadableQueries.set(e,t);var n=this._callbacks.get(e);null!=n&&n.forEach((function(e){try{e(t)}catch(e){setTimeout((function(){throw e}),0)}}))},t.get=function(e){return this._preloadableQueries.get(e)},t.onLoad=function(e,t){var n,r=null!==(n=this._callbacks.get(e))&&void 0!==n?n:new Set;return r.add(t),this._callbacks.set(e,r),{dispose:function(){r.delete(t)}}},t.clear=function(){this._preloadableQueries.clear()},e}());e.exports=t},8216:(e,t,n)=>{"use strict";var r=n(5847)(n(9471)),i=n(5060),a=n(7106),o=n(1143),s=n(8154),l=n(1071).createOperationDescriptor,u=n(5557).getRequest;function c(e,t){return a.fetchQuery(e,t).map((function(){return e.lookup(t.fragment)}))}e.exports=function(e,t,n,a){var f,d=u(t);"query"!==d.params.operationKind&&o(!1);var p=(0,r.default)({force:!0},null==a?void 0:a.networkCacheConfig),h=l(d,n,p),v=null!==(f=null==a?void 0:a.fetchPolicy)&&void 0!==f?f:"network-only";function _(t){return null!=t.missingRequiredFields&&s(e,t.missingRequiredFields),t.data}switch(v){case"network-only":return c(e,h).map(_);case"store-or-network":return"available"===e.check(h).status?i.from(e.lookup(h.fragment)).map(_):c(e,h).map(_);default:throw new Error("fetchQuery: Invalid fetchPolicy "+v)}}},7106:(e,t,n)=>{"use strict";var r=n(5060),i=n(9480),a=n(1143),o="function"==typeof WeakMap?new WeakMap:new Map;function s(e,t,n){return r.create((function(o){var s=u(e),l=s.get(t);return l||n().finally((function(){return s.delete(t)})).subscribe({start:function(e){l={identifier:t,subject:new i,subjectForInFlightStatus:new i,subscription:e},s.set(t,l)},next:function(e){var n=c(s,t);n.subject.next(e),n.subjectForInFlightStatus.next(e)},error:function(e){var n=c(s,t);n.subject.error(e),n.subjectForInFlightStatus.error(e)},complete:function(){var e=c(s,t);e.subject.complete(),e.subjectForInFlightStatus.complete()},unsubscribe:function(e){var n=c(s,t);n.subject.unsubscribe(),n.subjectForInFlightStatus.unsubscribe()}}),null==l&&a(!1),function(e,t){return r.create((function(n){var r=t.subject.subscribe(n);return function(){r.unsubscribe();var n=e.get(t.identifier);if(n){var i=n.subscription;null!=i&&0===n.subject.getObserverCount()&&(i.unsubscribe(),e.delete(t.identifier))}}}))}(s,l).subscribe(o)}))}function l(e,t,n){return r.create((function(t){var r=n.subjectForInFlightStatus.subscribe({error:t.error,next:function(r){e.isRequestActive(n.identifier)?t.next():t.complete()},complete:t.complete,unsubscribe:t.complete});return function(){r.unsubscribe()}}))}function u(e){var t=o.get(e);if(null!=t)return t;var n=new Map;return o.set(e,n),n}function c(e,t){var n=e.get(t);return null==n&&a(!1),n}e.exports={fetchQuery:function(e,t){return s(e,t.request.identifier,(function(){return e.execute({operation:t})}))},fetchQueryDeduped:s,getPromiseForActiveRequest:function(e,t){var n=u(e).get(t.identifier);return n&&e.isRequestActive(n.identifier)?new Promise((function(t,r){var i=!1;l(e,0,n).subscribe({complete:t,error:r,next:function(e){i&&t(e)}}),i=!0})):null},getObservableForActiveRequest:function(e,t){var n=u(e).get(t.identifier);return n&&e.isRequestActive(n.identifier)?l(e,0,n):null}}},1530:(e,t,n)=>{"use strict";var r=n(1071).createOperationDescriptor,i=n(5557).getRequest;e.exports=function(e,t,n,a){var o=i(t);if("query"!==o.params.operationKind)throw new Error("fetchQuery: Expected query operation");var s=r(o,n,a);return e.execute({operation:s}).map((function(){return e.lookup(s.fragment).data})).toPromise()}},6063:e=>{"use strict";var t="client:",n=0;e.exports={generateClientID:function(e,n,r){var i=e+":"+n;return null!=r&&(i+=":"+r),0!==i.indexOf(t)&&(i=t+i),i},generateUniqueClientID:function(){return"".concat(t,"local:").concat(n++)},isClientID:function(e){return 0===e.indexOf(t)}}},1639:(e,t,n)=>{"use strict";var r=n(5847)(n(1735)),i=n(132),a=n(1230),o=n(8250),s=n(1697),l=n(7703),u=n(4447),c=n(1380),f=n(5486),d=n(3871),p=n(2576),h=n(1143),v=n(6063).isClientID,_=n(6528),g=_.EXISTENT,m=_.UNKNOWN,y=n(5309).generateTypeID,b=i.CONDITION,E=i.CLIENT_COMPONENT,S=i.CLIENT_EXTENSION,k=i.DEFER,R=i.FLIGHT_FIELD,w=i.FRAGMENT_SPREAD,I=i.INLINE_FRAGMENT,C=i.LINKED_FIELD,P=i.LINKED_HANDLE,D=i.MODULE_IMPORT,x=i.SCALAR_FIELD,O=i.SCALAR_HANDLE,T=i.STREAM,N=i.TYPE_DISCRIMINATOR,F=c.ROOT_ID,A=c.getModuleOperationKey,L=c.getStorageKey,M=c.getArgumentValues,U=function(){function e(e,t,n,r,i,a,o){var u=new s(e,t);this._mostRecentlyInvalidatedAt=null,this._handlers=r,this._mutator=u,this._operationLoader=null!=i?i:null,this._recordSourceProxy=new l(u,a),this._recordWasMissing=!1,this._source=e,this._variables=n,this._shouldProcessClientComponents=o}var t=e.prototype;return t.check=function(e,t){return this._traverse(e,t),!0===this._recordWasMissing?{status:"missing",mostRecentlyInvalidatedAt:this._mostRecentlyInvalidatedAt}:{status:"available",mostRecentlyInvalidatedAt:this._mostRecentlyInvalidatedAt}},t._getVariableValue=function(e){return this._variables.hasOwnProperty(e)||h(!1),this._variables[e]},t._handleMissing=function(){this._recordWasMissing=!0},t._getDataForHandlers=function(e,t){return{args:e.args?M(e.args,this._variables):{},record:this._source.get(t)}},t._handleMissingScalarField=function(e,t){if("id"!==e.name||null!=e.alias||!v(t)){var n,i=this._getDataForHandlers(e,t),a=i.args,o=i.record,s=(0,r.default)(this._handlers);try{for(s.s();!(n=s.n()).done;){var l=n.value;if("scalar"===l.kind){var u=l.handle(e,o,a,this._recordSourceProxy);if(void 0!==u)return u}}}catch(e){s.e(e)}finally{s.f()}this._handleMissing()}},t._handleMissingLinkField=function(e,t){var n,i=this._getDataForHandlers(e,t),a=i.args,o=i.record,s=(0,r.default)(this._handlers);try{for(s.s();!(n=s.n()).done;){var l=n.value;if("linked"===l.kind){var u=l.handle(e,o,a,this._recordSourceProxy);if(void 0!==u&&(null===u||this._mutator.getStatus(u)===g))return u}}}catch(e){s.e(e)}finally{s.f()}this._handleMissing()},t._handleMissingPluralLinkField=function(e,t){var n,i=this,a=this._getDataForHandlers(e,t),o=a.args,s=a.record,l=(0,r.default)(this._handlers);try{for(l.s();!(n=l.n()).done;){var u=n.value;if("pluralLinked"===u.kind){var c=u.handle(e,s,o,this._recordSourceProxy);if(null!=c){if(c.every((function(e){return null!=e&&i._mutator.getStatus(e)===g})))return c}else if(null===c)return null}}}catch(e){l.e(e)}finally{l.f()}this._handleMissing()},t._traverse=function(e,t){var n=this._mutator.getStatus(t);if(n===m&&this._handleMissing(),n===g){var r=this._source.get(t),i=o.getInvalidationEpoch(r);null!=i&&(this._mostRecentlyInvalidatedAt=null!=this._mostRecentlyInvalidatedAt?Math.max(this._mostRecentlyInvalidatedAt,i):i),this._traverseSelections(e.selections,t)}},t._traverseSelections=function(e,t){var n=this;e.forEach((function(r){switch(r.kind){case x:n._checkScalar(r,t);break;case C:r.plural?n._checkPluralLink(r,t):n._checkLink(r,t);break;case b:n._getVariableValue(r.condition)===r.passingValue&&n._traverseSelections(r.selections,t);break;case I:var i=r.abstractKey;if(null==i)n._mutator.getType(t)===r.type&&n._traverseSelections(r.selections,t);else if(a.ENABLE_PRECISE_TYPE_REFINEMENT){var o=n._mutator.getType(t);null==o&&h(!1);var s=y(o),l=n._mutator.getValue(s,i);!0===l?n._traverseSelections(r.selections,t):null==l&&n._handleMissing()}else n._traverseSelections(r.selections,t);break;case P:var u=f(r,e,n._variables);u.plural?n._checkPluralLink(u,t):n._checkLink(u,t);break;case O:var c=d(r,e,n._variables);n._checkScalar(c,t);break;case D:n._checkModuleImport(r,t);break;case k:case T:n._traverseSelections(r.selections,t);break;case w:n._traverseSelections(r.fragment.selections,t);break;case S:var p=n._recordWasMissing;n._traverseSelections(r.selections,t),n._recordWasMissing=p;break;case N:if(a.ENABLE_PRECISE_TYPE_REFINEMENT){var v=r.abstractKey,_=n._mutator.getType(t);null==_&&h(!1);var g=y(_);null==n._mutator.getValue(g,v)&&n._handleMissing()}break;case R:if(!a.ENABLE_REACT_FLIGHT_COMPONENT_FIELD)throw new Error("Flight fields are not yet supported.");n._checkFlightField(r,t);break;case E:if(!1===n._shouldProcessClientComponents)break;n._traverseSelections(r.fragment.selections,t);break;default:h(!1)}}))},t._checkModuleImport=function(e,t){var n=this._operationLoader;null===n&&h(!1);var r=A(e.documentName),i=this._mutator.getValue(t,r);if(null!=i){var a=n.get(i);if(null!=a){var o=p(a);this._traverse(o,t)}else this._handleMissing()}else void 0===i&&this._handleMissing()},t._checkScalar=function(e,t){var n=L(e,this._variables),r=this._mutator.getValue(t,n);void 0===r&&void 0!==(r=this._handleMissingScalarField(e,t))&&this._mutator.setValue(t,n,r)},t._checkLink=function(e,t){var n=L(e,this._variables),r=this._mutator.getLinkedRecordID(t,n);void 0===r&&(null!=(r=this._handleMissingLinkField(e,t))?this._mutator.setLinkedRecordID(t,n,r):null===r&&this._mutator.setValue(t,n,null)),null!=r&&this._traverse(e,r)},t._checkPluralLink=function(e,t){var n=this,r=L(e,this._variables),i=this._mutator.getLinkedRecordIDs(t,r);void 0===i&&(null!=(i=this._handleMissingPluralLinkField(e,t))?this._mutator.setLinkedRecordIDs(t,r,i):null===i&&this._mutator.setValue(t,r,null)),i&&i.forEach((function(t){null!=t&&n._traverse(e,t)}))},t._checkFlightField=function(e,t){var n=L(e,this._variables),i=this._mutator.getLinkedRecordID(t,n);if(null==i)return void 0===i?void this._handleMissing():void 0;var a=this._mutator.getValue(i,u.REACT_FLIGHT_TREE_STORAGE_KEY),o=this._mutator.getValue(i,u.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY);if(null!=a&&Array.isArray(o)){var s=this._operationLoader;null===s&&h(!1);var l,c=this._variables,f=(0,r.default)(o);try{for(f.s();!(l=f.n()).done;){var d=l.value;this._variables=d.variables;var v=s.get(d.module);if(null!=v){var _=p(v);this._traverseSelections(_.selections,F)}else this._handleMissing()}}catch(e){f.e(e)}finally{f.f()}this._variables=c}else this._handleMissing()},e}();e.exports={check:function(e,t,n,r,i,a,o){var s=n.dataID,l=n.node,u=n.variables;return new U(e,t,u,r,i,a,o).check(l,s)}}},3898:(e,t,n)=>{"use strict";var r=n(5847),i=r(n(9471)),a=r(n(1735)),o=r(n(9381)),s=n(2299),l=n(1230),u=n(8250),c=n(5060),f=n(8724),d=n(1147),p=n(2576),h=n(1143),v=n(1411),_=(n(3620),n(6063)),g=_.generateClientID,m=_.generateUniqueClientID,y=n(1447),b=y.createNormalizationSelector,E=y.createReaderSelector,S=n(1380),k=S.ROOT_TYPE,R=S.TYPENAME_KEY,w=S.getStorageKey,I=function(){function e(e){var t=this,n=e.operation,r=e.operationExecutions,i=e.operationLoader,a=e.optimisticConfig,o=e.publishQueue,s=e.scheduler,l=e.sink,u=e.source,c=e.store,f=e.updater,d=e.operationTracker,p=e.treatMissingFieldsAsNull,h=e.getDataID,v=e.isClientPayload,_=e.reactFlightPayloadDeserializer,g=e.reactFlightServerErrorHandler,m=e.shouldProcessClientComponents;this._getDataID=h,this._treatMissingFieldsAsNull=p,this._incrementalPayloadsPending=!1,this._incrementalResults=new Map,this._nextSubscriptionId=0,this._operation=n,this._operationExecutions=r,this._operationLoader=i,this._operationTracker=d,this._operationUpdateEpochs=new Map,this._optimisticUpdates=null,this._pendingModulePayloadsCount=0,this._publishQueue=o,this._scheduler=s,this._sink=l,this._source=new Map,this._state="started",this._store=c,this._subscriptions=new Map,this._updater=f,this._isClientPayload=!0===v,this._reactFlightPayloadDeserializer=_,this._reactFlightServerErrorHandler=g,this._isSubscriptionOperation="subscription"===this._operation.request.node.params.operationKind,this._shouldProcessClientComponents=m;var y=this._nextSubscriptionId++;u.subscribe({complete:function(){return t._complete(y)},error:function(e){return t._error(e)},next:function(e){try{t._next(y,e)}catch(e){l.error(e)}},start:function(e){return t._start(y,e)}}),null!=a&&this._processOptimisticResponse(null!=a.response?{data:a.response}:null,a.updater,!1)}var t=e.prototype;return t.cancel=function(){var e=this;if("completed"!==this._state){this._state="completed",this._operationExecutions.delete(this._operation.request.identifier),0!==this._subscriptions.size&&(this._subscriptions.forEach((function(e){return e.unsubscribe()})),this._subscriptions.clear());var t=this._optimisticUpdates;null!==t&&(this._optimisticUpdates=null,t.forEach((function(t){return e._publishQueue.revertUpdate(t)})),this._publishQueue.run()),this._incrementalResults.clear(),this._completeOperationTracker(),this._retainDisposable&&(this._retainDisposable.dispose(),this._retainDisposable=null)}},t._updateActiveState=function(){var e;switch(this._state){case"started":case"loading_incremental":e="active";break;case"completed":e="inactive";break;case"loading_final":e=this._pendingModulePayloadsCount>0?"active":"inactive";break;default:this._state,h(!1)}this._operationExecutions.set(this._operation.request.identifier,e)},t._schedule=function(e){var t=this,n=this._scheduler;if(null!=n){var r=this._nextSubscriptionId++;c.create((function(t){var r=n.schedule((function(){try{e(),t.complete()}catch(e){t.error(e)}}));return function(){return n.cancel(r)}})).subscribe({complete:function(){return t._complete(r)},error:function(e){return t._error(e)},start:function(e){return t._start(r,e)}})}else e()},t._complete=function(e){this._subscriptions.delete(e),0===this._subscriptions.size&&(this.cancel(),this._sink.complete())},t._error=function(e){this.cancel(),this._sink.error(e)},t._start=function(e,t){this._subscriptions.set(e,t),this._updateActiveState()},t._next=function(e,t){var n=this;this._schedule((function(){n._handleNext(t),n._maybeCompleteSubscriptionOperationTracking()}))},t._handleErrorResponse=function(e){var t=this,n=[];return e.forEach((function(e){if(null!==e.data||null==e.extensions||e.hasOwnProperty("errors")){if(null==e.data){var r=e.hasOwnProperty("errors")&&null!=e.errors?e.errors:null,i=r?r.map((function(e){return e.message})).join("\n"):"(No errors)",a=s.create("RelayNetwork","No data returned for operation `"+t._operation.request.node.params.name+"`, got error(s):\n"+i+"\n\nSee the error `source` property for more information.");throw a.source={errors:r,operation:t._operation.request.node,variables:t._operation.request.variables},a.stack,a}var o=e;n.push(o)}})),n},t._handleOptimisticResponses=function(e){var t;if(e.length>1)return e.some((function(e){var t;return!0===(null===(t=e.extensions)||void 0===t?void 0:t.isOptimistic)}))&&h(!1),!1;var n=e[0],r=!0===(null===(t=n.extensions)||void 0===t?void 0:t.isOptimistic);return r&&"started"!==this._state&&h(!1),!!r&&(this._processOptimisticResponse(n,null,this._treatMissingFieldsAsNull),this._sink.next(n),!0)},t._handleNext=function(e){if("completed"!==this._state){var t=Array.isArray(e)?e:[e],n=this._handleErrorResponse(t);if(0===n.length)return t.some((function(e){var t;return!0===(null===(t=e.extensions)||void 0===t?void 0:t.is_final)}))&&(this._state="loading_final",this._updateActiveState(),this._incrementalPayloadsPending=!1),void this._sink.next(e);if(!this._handleOptimisticResponses(n)){var r=function(e){var t=[],n=[];return e.forEach((function(e){if(null!=e.path||null!=e.label){var r=e.label,i=e.path;null!=r&&null!=i||h(!1),n.push({label:r,path:i,response:e})}else t.push(e)})),[t,n]}(n),i=r[0],a=r[1],o=i.length>0;if(o){var s=this._processResponses(i);if(!l.ENABLE_BATCHED_STORE_UPDATES){var u=this._publishQueue.run(this._operation);this._updateOperationTracker(u)}this._processPayloadFollowups(s),l.ENABLE_BATCHED_STORE_UPDATES||this._incrementalPayloadsPending&&!this._retainDisposable&&(this._retainDisposable=this._store.retain(this._operation))}if(a.length>0){var c=this._processIncrementalResponses(a);if(!l.ENABLE_BATCHED_STORE_UPDATES){var f=this._publishQueue.run();this._updateOperationTracker(f)}this._processPayloadFollowups(c)}if(this._isSubscriptionOperation&&l.ENABLE_UNIQUE_SUBSCRIPTION_ROOT&&(null==n[0].extensions?n[0].extensions={__relay_subscription_root_id:this._operation.fragment.dataID}:n[0].extensions.__relay_subscription_root_id=this._operation.fragment.dataID),l.ENABLE_BATCHED_STORE_UPDATES){var d=this._publishQueue.run(o?this._operation:void 0);o&&this._incrementalPayloadsPending&&!this._retainDisposable&&(this._retainDisposable=this._store.retain(this._operation)),this._updateOperationTracker(d)}this._sink.next(e)}}},t._processOptimisticResponse=function(e,t,n){var r=this;if(null!==this._optimisticUpdates&&h(!1),null!=e||null!=t){var i=[];if(e){var a=C(e,this._operation.root,k,{getDataID:this._getDataID,path:[],reactFlightPayloadDeserializer:this._reactFlightPayloadDeserializer,reactFlightServerErrorHandler:this._reactFlightServerErrorHandler,shouldProcessClientComponents:this._shouldProcessClientComponents,treatMissingFieldsAsNull:n});P(a),i.push({operation:this._operation,payload:a,updater:t}),this._processOptimisticFollowups(a,i)}else t&&i.push({operation:this._operation,payload:{errors:null,fieldPayloads:null,incrementalPlaceholders:null,moduleImportPayloads:null,source:f.create(),isFinal:!1},updater:t});this._optimisticUpdates=i,i.forEach((function(e){return r._publishQueue.applyUpdate(e)})),this._publishQueue.run()}},t._processOptimisticFollowups=function(e,t){if(e.moduleImportPayloads&&e.moduleImportPayloads.length){var n=e.moduleImportPayloads,r=this._operationLoader;r||h(!1);var i,s=(0,a.default)(n);try{for(s.s();!(i=s.n()).done;){var l=i.value,u=r.get(l.operationReference);if(null==u)this._processAsyncOptimisticModuleImport(r,l);else{var c=this._processOptimisticModuleImport(u,l);t.push.apply(t,(0,o.default)(c))}}}catch(e){s.e(e)}finally{s.f()}}},t._normalizeModuleImport=function(e,t){var n=b(t,e.dataID,e.variables);return C({data:e.data},n,e.typeName,{getDataID:this._getDataID,path:e.path,reactFlightPayloadDeserializer:this._reactFlightPayloadDeserializer,reactFlightServerErrorHandler:this._reactFlightServerErrorHandler,treatMissingFieldsAsNull:this._treatMissingFieldsAsNull,shouldProcessClientComponents:this._shouldProcessClientComponents})},t._processOptimisticModuleImport=function(e,t){var n=p(e),r=[],i=this._normalizeModuleImport(t,n);return P(i),r.push({operation:this._operation,payload:i,updater:null}),this._processOptimisticFollowups(i,r),r},t._processAsyncOptimisticModuleImport=function(e,t){var n=this;e.load(t.operationReference).then((function(e){if(null!=e&&"started"===n._state){var r,i=n._processOptimisticModuleImport(e,t);i.forEach((function(e){return n._publishQueue.applyUpdate(e)})),null==n._optimisticUpdates||((r=n._optimisticUpdates).push.apply(r,(0,o.default)(i)),n._publishQueue.run())}}))},t._processResponses=function(e){var t=this;return null!==this._optimisticUpdates&&(this._optimisticUpdates.forEach((function(e){return t._publishQueue.revertUpdate(e)})),this._optimisticUpdates=null),this._incrementalPayloadsPending=!1,this._incrementalResults.clear(),this._source.clear(),e.map((function(e){var n=C(e,t._operation.root,k,{getDataID:t._getDataID,path:[],reactFlightPayloadDeserializer:t._reactFlightPayloadDeserializer,reactFlightServerErrorHandler:t._reactFlightServerErrorHandler,treatMissingFieldsAsNull:t._treatMissingFieldsAsNull,shouldProcessClientComponents:t._shouldProcessClientComponents});return t._publishQueue.commitPayload(t._operation,n,t._updater),n}))},t._processPayloadFollowups=function(e){var t=this;"completed"!==this._state&&e.forEach((function(e){var n=e.incrementalPlaceholders,r=e.moduleImportPayloads,i=e.isFinal;if(t._state=i?"loading_final":"loading_incremental",t._updateActiveState(),i&&(t._incrementalPayloadsPending=!1),r&&0!==r.length){var a=t._operationLoader;a||h(!1),r.forEach((function(e){t._processModuleImportPayload(e,a)}))}if(n&&0!==n.length&&(t._incrementalPayloadsPending="loading_final"!==t._state,n.forEach((function(n){t._processIncrementalPlaceholder(e,n)})),t._isClientPayload||"loading_final"===t._state)){var o=[];if(n.forEach((function(e){"defer"===e.kind&&o.push(t._processDeferResponse(e.label,e.path,e,{data:e.data}))})),o.length>0){if(!l.ENABLE_BATCHED_STORE_UPDATES){var s=t._publishQueue.run();t._updateOperationTracker(s)}t._processPayloadFollowups(o)}}}))},t._maybeCompleteSubscriptionOperationTracking=function(){if(this._isSubscriptionOperation&&(0===this._pendingModulePayloadsCount&&!1===this._incrementalPayloadsPending&&this._completeOperationTracker(),l.ENABLE_UNIQUE_SUBSCRIPTION_ROOT)){var e=m();this._operation={request:this._operation.request,fragment:E(this._operation.fragment.node,e,this._operation.fragment.variables,this._operation.fragment.owner),root:b(this._operation.root.node,e,this._operation.root.variables)}}},t._processModuleImportPayload=function(e,t){var n=this,r=t.get(e.operationReference);if(null!=r){var i=p(r);this._handleModuleImportPayload(e,i),this._maybeCompleteSubscriptionOperationTracking()}else{var a=this._nextSubscriptionId++;this._pendingModulePayloadsCount++;var o=function(){n._pendingModulePayloadsCount--,n._maybeCompleteSubscriptionOperationTracking()};c.from(new Promise((function(n,r){t.load(e.operationReference).then(n,r)}))).map((function(t){null!=t&&n._schedule((function(){n._handleModuleImportPayload(e,p(t));var r=n._publishQueue.run();n._updateOperationTracker(r)}))})).subscribe({complete:function(){n._complete(a),o()},error:function(e){n._error(e),o()},start:function(e){return n._start(a,e)}})}},t._handleModuleImportPayload=function(e,t){var n=this._normalizeModuleImport(e,t);if(this._publishQueue.commitPayload(this._operation,n),!l.ENABLE_BATCHED_STORE_UPDATES){var r=this._publishQueue.run();this._updateOperationTracker(r)}this._processPayloadFollowups([n])},t._processIncrementalPlaceholder=function(e,t){var n,r=t.label,i=t.path.map(String).join("."),a=this._incrementalResults.get(r);null==a&&(a=new Map,this._incrementalResults.set(r,a));var o,s=a.get(i),c=null!=s&&"response"===s.kind?s.responses:null;a.set(i,{kind:"placeholder",placeholder:t}),"stream"===t.kind?o=t.parentID:"defer"===t.kind?o=t.selector.dataID:h(!1);var f,d,p=e.source.get(o),_=(null!==(n=e.fieldPayloads)&&void 0!==n?n:[]).filter((function(e){var t=g(e.dataID,e.fieldKey);return e.dataID===o||t===o}));null==p&&h(!1);var m=this._source.get(o);if(null!=m){f=u.update(m.record,p);var y=new Map,b=function(e){var t,n,r=(t=e,null!==(n=JSON.stringify(v(t)))&&void 0!==n?n:"");y.set(r,e)};m.fieldPayloads.forEach(b),_.forEach(b),d=Array.from(y.values())}else f=p,d=_;if(this._source.set(o,{record:f,fieldPayloads:d}),null!=c){var E=this._processIncrementalResponses(c);if(!l.ENABLE_BATCHED_STORE_UPDATES){var S=this._publishQueue.run();this._updateOperationTracker(S)}this._processPayloadFollowups(E)}},t._processIncrementalResponses=function(e){var t=this,n=[];return e.forEach((function(e){var r=e.label,i=e.path,a=e.response,o=t._incrementalResults.get(r);if(null==o&&(o=new Map,t._incrementalResults.set(r,o)),-1!==r.indexOf("$defer$")){var s=i.map(String).join("."),l=o.get(s);if(null==l)return l={kind:"response",responses:[e]},void o.set(s,l);if("response"===l.kind)return void l.responses.push(e);var u=l.placeholder;"defer"!==u.kind&&h(!1),n.push(t._processDeferResponse(r,i,u,a))}else{var c=i.slice(0,-2).map(String).join("."),f=o.get(c);if(null==f)return f={kind:"response",responses:[e]},void o.set(c,f);if("response"===f.kind)return void f.responses.push(e);var d=f.placeholder;"stream"!==d.kind&&h(!1),n.push(t._processStreamResponse(r,i,d,a))}})),n},t._processDeferResponse=function(e,t,n,r){var i=n.selector.dataID,a=C(r,n.selector,n.typeName,{getDataID:this._getDataID,path:n.path,reactFlightPayloadDeserializer:this._reactFlightPayloadDeserializer,reactFlightServerErrorHandler:this._reactFlightServerErrorHandler,treatMissingFieldsAsNull:this._treatMissingFieldsAsNull,shouldProcessClientComponents:this._shouldProcessClientComponents});this._publishQueue.commitPayload(this._operation,a);var o=this._source.get(i);null==o&&h(!1);var s=o.fieldPayloads;if(0!==s.length){var l,u={errors:null,fieldPayloads:s,incrementalPlaceholders:null,moduleImportPayloads:null,source:f.create(),isFinal:!0===(null===(l=r.extensions)||void 0===l?void 0:l.is_final)};this._publishQueue.commitPayload(this._operation,u)}return a},t._processStreamResponse=function(e,t,n,r){var i=n.parentID,a=n.node,s=n.variables,l=a.selections[0];(null==l||"LinkedField"!==l.kind||!0!==l.plural)&&h(!1);var u=this._normalizeStreamItem(r,i,l,s,t,n.path),c=u.fieldPayloads,d=u.itemID,p=u.itemIndex,v=u.prevIDs,_=u.relayPayload,g=u.storageKey;if(this._publishQueue.commitPayload(this._operation,_,(function(e){var t=e.get(i);if(null!=t){var n=t.getLinkedRecords(g);if(null!=n&&n.length===v.length&&!n.some((function(e,t){return v[t]!==(e&&e.getDataID())}))){var r=(0,o.default)(n);r[p]=e.get(d),t.setLinkedRecords(r,g)}}})),0!==c.length){var m={errors:null,fieldPayloads:c,incrementalPlaceholders:null,moduleImportPayloads:null,source:f.create(),isFinal:!1};this._publishQueue.commitPayload(this._operation,m)}return _},t._normalizeStreamItem=function(e,t,n,r,i,a){var s,l,c,f=e.data;"object"!=typeof f&&h(!1);var d=null!==(s=n.alias)&&void 0!==s?s:n.name,p=w(n,r),v=this._source.get(t);null==v&&h(!1);var _=v.record,m=v.fieldPayloads,y=u.getLinkedRecordIDs(_,p);null==y&&h(!1);var E=i[i.length-1],S=parseInt(E,10);S===E&&S>=0||h(!1);var k=null!==(l=n.concreteType)&&void 0!==l?l:f[R];"string"!=typeof k&&h(!1);var I=(null!==(c=this._getDataID(f,k))&&void 0!==c?c:y&&y[S])||g(t,p,S);"string"!=typeof I&&h(!1);var P=b(n,I,r),D=u.clone(_),x=(0,o.default)(y);return x[S]=I,u.setLinkedRecordIDs(D,p,x),this._source.set(t,{record:D,fieldPayloads:m}),{fieldPayloads:m,itemID:I,itemIndex:S,prevIDs:y,relayPayload:C(e,P,k,{getDataID:this._getDataID,path:[].concat((0,o.default)(a),[d,String(S)]),reactFlightPayloadDeserializer:this._reactFlightPayloadDeserializer,reactFlightServerErrorHandler:this._reactFlightServerErrorHandler,treatMissingFieldsAsNull:this._treatMissingFieldsAsNull,shouldProcessClientComponents:this._shouldProcessClientComponents}),storageKey:p}},t._updateOperationTracker=function(e){null!=e&&e.length>0&&this._operationTracker.update(this._operation.request,new Set(e))},t._completeOperationTracker=function(){this._operationTracker.complete(this._operation.request)},e}();function C(e,t,n,r){var a,o=e.data,s=e.errors,l=f.create(),c=u.create(t.dataID,n);l.set(t.dataID,c);var p=d.normalize(l,t,o,r);return(0,i.default)((0,i.default)({},p),{},{errors:s,isFinal:!0===(null===(a=e.extensions)||void 0===a?void 0:a.is_final)})}function P(e){var t=e.incrementalPlaceholders;null!=t&&0!==t.length&&h(!1)}e.exports={execute:function(e){return new I(e)}}},8298:(e,t,n)=>{"use strict";var r=n(5847)(n(9471)),i=n(1143);e.exports={getFragmentVariables:function(e,t,n){var a;return e.argumentDefinitions.forEach((function(e){if(!n.hasOwnProperty(e.name))switch(a=a||(0,r.default)({},n),e.kind){case"LocalArgument":a[e.name]=e.defaultValue;break;case"RootArgument":if(!t.hasOwnProperty(e.name)){a[e.name]=void 0;break}a[e.name]=t[e.name];break;default:i(!1)}})),a||n},getOperationVariables:function(e,t){var n={};return e.argumentDefinitions.forEach((function(e){var r=e.defaultValue;null!=t[e.name]&&(r=t[e.name]),n[e.name]=r})),n}}},4176:(e,t,n)=>{"use strict";var r=n(5847)(n(9471)),i=n(3898),a=n(2158),o=n(1230),s=n(5060),l=n(1152),u=n(3981),c=n(8724),f=n(1517),d=n(4062),p=n(7579),h=(n(1143),function(){function e(e){var t,r,i,s,c,p,h,_,g=this;this.configName=e.configName,this._treatMissingFieldsAsNull=!0===e.treatMissingFieldsAsNull;var m=e.operationLoader,y=e.reactFlightPayloadDeserializer,b=e.reactFlightServerErrorHandler;this.__log=null!==(t=e.log)&&void 0!==t?t:v,this.requiredFieldLogger=null!==(r=e.requiredFieldLogger)&&void 0!==r?r:d,this._defaultRenderPolicy=(null!==(i=e.UNSTABLE_defaultRenderPolicy)&&void 0!==i?i:!0===o.ENABLE_PARTIAL_RENDERING_DEFAULT)?"partial":"full",this._operationLoader=m,this._operationExecutions=new Map,this._network=this.__wrapNetworkWithLogObserver(e.network),this._getDataID=null!==(s=e.getDataID)&&void 0!==s?s:f,this._publishQueue=new u(e.store,null!==(c=e.handlerProvider)&&void 0!==c?c:a,this._getDataID),this._scheduler=null!==(p=e.scheduler)&&void 0!==p?p:null,this._store=e.store,this.options=e.options,this._isServer=null!==(h=e.isServer)&&void 0!==h&&h,this.__setNet=function(e){return g._network=g.__wrapNetworkWithLogObserver(e)};var E=void 0!==n.g?n.g:"undefined"!=typeof window?window:void 0,S=E&&E.__RELAY_DEVTOOLS_HOOK__;S&&S.registerEnvironment(this),this._missingFieldHandlers=e.missingFieldHandlers,this._operationTracker=null!==(_=e.operationTracker)&&void 0!==_?_:new l,this._reactFlightPayloadDeserializer=y,this._reactFlightServerErrorHandler=b,this._shouldProcessClientComponents=e.shouldProcessClientComponents}var t=e.prototype;return t.getStore=function(){return this._store},t.getNetwork=function(){return this._network},t.getOperationTracker=function(){return this._operationTracker},t.isRequestActive=function(e){return"active"===this._operationExecutions.get(e)},t.UNSTABLE_getDefaultRenderPolicy=function(){return this._defaultRenderPolicy},t.applyUpdate=function(e){var t=this;return this._scheduleUpdates((function(){t._publishQueue.applyUpdate(e),t._publishQueue.run()})),{dispose:function(){t._scheduleUpdates((function(){t._publishQueue.revertUpdate(e),t._publishQueue.run()}))}}},t.revertUpdate=function(e){var t=this;this._scheduleUpdates((function(){t._publishQueue.revertUpdate(e),t._publishQueue.run()}))},t.replaceUpdate=function(e,t){var n=this;this._scheduleUpdates((function(){n._publishQueue.revertUpdate(e),n._publishQueue.applyUpdate(t),n._publishQueue.run()}))},t.applyMutation=function(e){var t=this._execute({createSource:function(){return s.create((function(e){}))},isClientPayload:!1,operation:e.operation,optimisticConfig:e,updater:null}).subscribe({});return{dispose:function(){return t.unsubscribe()}}},t.check=function(e){return null==this._missingFieldHandlers||0===this._missingFieldHandlers.length?this._store.check(e):this._checkSelectorAndHandleMissingFields(e,this._missingFieldHandlers)},t.commitPayload=function(e,t){this._execute({createSource:function(){return s.from({data:t})},isClientPayload:!0,operation:e,optimisticConfig:null,updater:null}).subscribe({})},t.commitUpdate=function(e){var t=this;this._scheduleUpdates((function(){t._publishQueue.commitUpdate(e),t._publishQueue.run()}))},t.lookup=function(e){return this._store.lookup(e)},t.subscribe=function(e,t){return this._store.subscribe(e,t)},t.retain=function(e){return this._store.retain(e)},t.isServer=function(){return this._isServer},t._checkSelectorAndHandleMissingFields=function(e,t){var n=this,r=c.create(),i=this._store.check(e,{target:r,handlers:t});return r.size()>0&&this._scheduleUpdates((function(){n._publishQueue.commitSource(r),n._publishQueue.run()})),i},t._scheduleUpdates=function(e){var t=this._scheduler;null!=t?t.schedule(e):e()},t.execute=function(e){var t=this,n=e.operation,r=e.updater;return this._execute({createSource:function(){return t._network.execute(n.request.node.params,n.request.variables,n.request.cacheConfig||{},null)},isClientPayload:!1,operation:n,optimisticConfig:null,updater:r})},t.executeMutation=function(e){var t,n=this,i=e.operation,a=e.optimisticResponse,o=e.optimisticUpdater,s=e.updater,l=e.uploadables;return(a||o)&&(t={operation:i,response:a,updater:o}),this._execute({createSource:function(){return n._network.execute(i.request.node.params,i.request.variables,(0,r.default)((0,r.default)({},i.request.cacheConfig),{},{force:!0}),l)},isClientPayload:!1,operation:i,optimisticConfig:t,updater:s})},t.executeWithSource=function(e){var t=e.operation,n=e.source;return this._execute({createSource:function(){return n},isClientPayload:!1,operation:t,optimisticConfig:null,updater:null})},t.toJSON=function(){var e;return"RelayModernEnvironment(".concat(null!==(e=this.configName)&&void 0!==e?e:"",")")},t._execute=function(e){var t=this,n=e.createSource,r=e.isClientPayload,a=e.operation,o=e.optimisticConfig,l=e.updater;return s.create((function(e){var s=i.execute({getDataID:t._getDataID,isClientPayload:r,operation:a,operationExecutions:t._operationExecutions,operationLoader:t._operationLoader,operationTracker:t._operationTracker,optimisticConfig:o,publishQueue:t._publishQueue,reactFlightPayloadDeserializer:t._reactFlightPayloadDeserializer,reactFlightServerErrorHandler:t._reactFlightServerErrorHandler,scheduler:t._scheduler,shouldProcessClientComponents:t._shouldProcessClientComponents,sink:e,source:n(),store:t._store,treatMissingFieldsAsNull:t._treatMissingFieldsAsNull,updater:l});return function(){return s.cancel()}}))},t.__wrapNetworkWithLogObserver=function(e){var t=this;return{execute:function(n,r,i,a){var o=p(),s=t.__log,l={start:function(e){s({name:"network.start",transactionID:o,params:n,variables:r,cacheConfig:i})},next:function(e){s({name:"network.next",transactionID:o,response:e})},error:function(e){s({name:"network.error",transactionID:o,error:e})},complete:function(){s({name:"network.complete",transactionID:o})},unsubscribe:function(){s({name:"network.unsubscribe",transactionID:o})}};return e.execute(n,r,i,a,(function(e){s({name:"network.info",transactionID:o,info:e})})).do(l)}}},e}());function v(){}h.prototype["@@RelayModernEnvironment"]=!0,e.exports=h},8474:(e,t,n)=>{"use strict";var r=n(5847),i=r(n(9471)),a=r(n(8557)),o=n(1230),s=n(1305),l=n(1143),u=n(7669),c=n(8154),f=(n(3620),n(7106).getPromiseForActiveRequest),d=n(1071).createRequestDescriptor,p=n(1447),h=p.areEqualSelectors,v=p.createReaderSelector,_=p.getSelectorsFromObject,g=function(){function e(e,t,n,r,i){var o=this;(0,a.default)(this,"_onChange",(function(){o._stale=!0,"function"==typeof o._callback&&o._callback()})),this._callback=r,this._context=e,this._data={},this._fragments=t,this._props={},this._resolvers={},this._stale=!1,this._rootIsQueryRenderer=i,this.setProps(n)}var t=e.prototype;return t.dispose=function(){for(var e in this._resolvers)this._resolvers.hasOwnProperty(e)&&b(this._resolvers[e])},t.resolve=function(){if(this._stale){var e,t=this._data;for(var n in this._resolvers)if(this._resolvers.hasOwnProperty(n)){var r=this._resolvers[n],a=t[n];if(r){var o=r.resolve();(e||o!==a)&&((e=e||(0,i.default)({},t))[n]=o)}else{var s=this._props[n],l=void 0!==s?s:null;!e&&u(l,a)||((e=e||(0,i.default)({},t))[n]=l)}}this._data=e||t,this._stale=!1}return this._data},t.setCallback=function(e){this._callback=e},t.setProps=function(e){var t=_(this._fragments,e);for(var n in this._props={},t)if(t.hasOwnProperty(n)){var r=t[n],i=this._resolvers[n];null==r?(null!=i&&i.dispose(),i=null):"PluralReaderSelector"===r.kind?null==i?i=new y(this._context.environment,this._rootIsQueryRenderer,r,this._onChange):(i instanceof y||l(!1),i.setSelector(r)):null==i?i=new m(this._context.environment,this._rootIsQueryRenderer,r,this._onChange):(i instanceof m||l(!1),i.setSelector(r)),this._props[n]=e[n],this._resolvers[n]=i}this._stale=!0},t.setVariables=function(e,t){for(var n in this._resolvers)if(this._resolvers.hasOwnProperty(n)){var r=this._resolvers[n];r&&r.setVariables(e,t)}this._stale=!0},e}(),m=function(){function e(e,t,n,r){var i=this;(0,a.default)(this,"_onChange",(function(e){i._data=e.data,i._isMissingData=e.isMissingData,i._missingRequiredFields=e.missingRequiredFields,i._callback()}));var o=e.lookup(n);this._callback=r,this._data=o.data,this._isMissingData=o.isMissingData,this._missingRequiredFields=o.missingRequiredFields,this._environment=e,this._rootIsQueryRenderer=t,this._selector=n,this._subscription=e.subscribe(o,this._onChange)}var t=e.prototype;return t.dispose=function(){this._subscription&&(this._subscription.dispose(),this._subscription=null)},t.resolve=function(){if(!0===o.ENABLE_RELAY_CONTAINERS_SUSPENSE&&!0===this._isMissingData){var e,t=null!==(e=f(this._environment,this._selector.owner))&&void 0!==e?e:this._environment.getOperationTracker().getPromiseForPendingOperationsAffectingOwner(this._selector.owner);if(null!=t&&!this._rootIsQueryRenderer)throw t}return null!=this._missingRequiredFields&&c(this._environment,this._missingRequiredFields),this._data},t.setSelector=function(e){if(null==this._subscription||!h(e,this._selector)){this.dispose();var t=this._environment.lookup(e);this._data=t.data,this._isMissingData=t.isMissingData,this._missingRequiredFields=t.missingRequiredFields,this._selector=e,this._subscription=this._environment.subscribe(t,this._onChange)}},t.setVariables=function(e,t){if(!s(e,this._selector.variables)){var n=d(t,e),r=v(this._selector.node,this._selector.dataID,e,n);this.setSelector(r)}},e}(),y=function(){function e(e,t,n,r){var i=this;(0,a.default)(this,"_onChange",(function(e){i._stale=!0,i._callback()})),this._callback=r,this._data=[],this._environment=e,this._resolvers=[],this._stale=!0,this._rootIsQueryRenderer=t,this.setSelector(n)}var t=e.prototype;return t.dispose=function(){this._resolvers.forEach(b)},t.resolve=function(){if(this._stale){for(var e,t=this._data,n=0;n<this._resolvers.length;n++){var r=t[n],i=this._resolvers[n].resolve();(e||i!==r)&&(e=e||t.slice(0,n)).push(i)}e||this._resolvers.length===t.length||(e=t.slice(0,this._resolvers.length)),this._data=e||t,this._stale=!1}return this._data},t.setSelector=function(e){for(var t=e.selectors;this._resolvers.length>t.length;)this._resolvers.pop().dispose();for(var n=0;n<t.length;n++)n<this._resolvers.length?this._resolvers[n].setSelector(t[n]):this._resolvers[n]=new m(this._environment,this._rootIsQueryRenderer,t[n],this._onChange);this._stale=!0},t.setVariables=function(e,t){this._resolvers.forEach((function(n){return n.setVariables(e,t)})),this._stale=!0},e}();function b(e){e&&e.dispose()}e.exports=g},1071:(e,t,n)=>{"use strict";n(2232);var r=n(676),i=n(8298).getOperationVariables,a=n(1447),o=a.createNormalizationSelector,s=a.createReaderSelector,l=n(1380).ROOT_ID;function u(e,t,n){return{identifier:r(e.params,t),node:e,variables:t,cacheConfig:n}}e.exports={createOperationDescriptor:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:l,a=e.operation,c=i(a,t),f=u(e,c,n),d={fragment:s(e.fragment,r,c,f),request:f,root:o(a,r,c)};return d},createRequestDescriptor:u}},8250:(e,t,n)=>{"use strict";var r=n(5847)(n(9471)),i=n(1305),a=n(2232),o=n(1143),s=(n(3620),n(6063).isClientID,n(1380)),l=s.ID_KEY,u=s.REF_KEY,c=s.REFS_KEY,f=s.TYPENAME_KEY,d=s.INVALIDATED_AT_KEY;s.ROOT_ID,e.exports={clone:function(e){return(0,r.default)({},e)},copyFields:function(e,t){for(var n in e)e.hasOwnProperty(n)&&n!==l&&n!==f&&(t[n]=e[n])},create:function(e,t){var n={};return n[l]=e,n[f]=t,n},freeze:function(e){a(e)},getDataID:function(e){return e[l]},getInvalidationEpoch:function(e){if(null==e)return null;var t=e[d];return"number"!=typeof t?null:t},getLinkedRecordID:function(e,t){var n=e[t];return null==n?n:("object"==typeof n&&n&&"string"==typeof n[u]||o(!1),n[u])},getLinkedRecordIDs:function(e,t){var n=e[t];return null==n?n:("object"==typeof n&&Array.isArray(n[c])||o(!1),n[c])},getType:function(e){return e[f]},getValue:function(e,t){var n=e[t];return n&&"object"==typeof n&&(n.hasOwnProperty(u)||n.hasOwnProperty(c))&&o(!1),n},merge:function(e,t){return Object.assign({},e,t)},setValue:function(e,t,n){e[t]=n},setLinkedRecordID:function(e,t,n){var r={};r[u]=n,e[t]=r},setLinkedRecordIDs:function(e,t,n){var r={};r[c]=n,e[t]=r},update:function(e,t){for(var n=null,a=Object.keys(t),o=0;o<a.length;o++){var s=a[o];!n&&i(e[s],t[s])||((n=null!==n?n:(0,r.default)({},e))[s]=t[s])}return null!==n?n:e}}},1447:(e,t,n)=>{"use strict";var r=n(1305),i=n(1143),a=(n(3620),n(8298).getFragmentVariables),o=n(1380),s=o.FRAGMENT_OWNER_KEY,l=o.FRAGMENTS_KEY,u=o.ID_KEY,c=o.IS_WITHIN_UNMATCHED_TYPE_REFINEMENT;function f(e,t){("object"!=typeof t||null===t||Array.isArray(t))&&i(!1);var n=t[u],r=t[l],o=t[s],f=!0===t[c];if("string"==typeof n&&"object"==typeof r&&null!==r&&"object"==typeof r[e.name]&&null!==r[e.name]&&"object"==typeof o&&null!==o){var d=o,p=r[e.name];return y(e,n,a(e,d.variables,p),d,f)}return null}function d(e,t){var n=null;return t.forEach((function(t,r){var i=null!=t?f(e,t):null;null!=i&&(n=n||[]).push(i)})),null==n?null:{kind:"PluralReaderSelector",selectors:n}}function p(e,t){return null==t?t:e.metadata&&!0===e.metadata.plural?(Array.isArray(t)||i(!1),d(e,t)):(Array.isArray(t)&&i(!1),f(e,t))}function h(e,t){return null==t?t:e.metadata&&!0===e.metadata.plural?(Array.isArray(t)||i(!1),n=null,t.forEach((function(e){var t=null!=e?v(0,e):null;null!=t&&(n=n||[]).push(t)})),n):(Array.isArray(t)&&i(!1),v(0,t));var n}function v(e,t){("object"!=typeof t||null===t||Array.isArray(t))&&i(!1);var n=t[u];return"string"==typeof n?n:null}function _(e,t){var n;return null==t?{}:!0===(null===(n=e.metadata)||void 0===n?void 0:n.plural)?(Array.isArray(t)||i(!1),m(e,t)):(Array.isArray(t)&&i(!1),g(e,t)||{})}function g(e,t){var n=f(e,t);return n?n.variables:null}function m(e,t){var n={};return t.forEach((function(t,r){if(null!=t){var i=g(e,t);null!=i&&Object.assign(n,i)}})),n}function y(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4];return{kind:"SingularReaderSelector",dataID:t,isWithinUnmatchedTypeRefinement:i,node:e,variables:n,owner:r}}e.exports={areEqualSelectors:function(e,t){return e.owner===t.owner&&e.dataID===t.dataID&&e.node===t.node&&r(e.variables,t.variables)},createReaderSelector:y,createNormalizationSelector:function(e,t,n){return{dataID:t,node:e,variables:n}},getDataIDsFromFragment:h,getDataIDsFromObject:function(e,t){var n={};for(var r in e)if(e.hasOwnProperty(r)){var i=e[r],a=t[r];n[r]=h(i,a)}return n},getSingularSelector:f,getPluralSelector:d,getSelector:p,getSelectorsFromObject:function(e,t){var n={};for(var r in e)if(e.hasOwnProperty(r)){var i=e[r],a=t[r];n[r]=p(i,a)}return n},getVariablesFromSingularFragment:g,getVariablesFromPluralFragment:m,getVariablesFromFragment:_,getVariablesFromObject:function(e,t){var n={};for(var r in e)if(e.hasOwnProperty(r)){var i=_(e[r],t[r]);Object.assign(n,i)}return n}}},1984:(e,t,n)=>{"use strict";var r=n(5847),i=r(n(1735)),a=r(n(8557)),o=n(1639),s=n(1230),l=n(8250),u=n(3754),c=n(4159),f=n(4023),d=n(4447),p=n(7706),h=n(4430),v=n(1380),_=(n(2232),n(1517)),g=n(1143),m=n(9468),y=n(1380),b=y.ROOT_ID,E=y.ROOT_TYPE,S=function(){function e(e,t){var n,r,i,o,u,c=this;(0,a.default)(this,"_gcStep",(function(){c._gcRun&&(c._gcRun.next().done?c._gcRun=null:c._gcScheduler(c._gcStep))})),this._currentWriteEpoch=0,this._gcHoldCounter=0,this._gcReleaseBufferSize=null!==(n=null==t?void 0:t.gcReleaseBufferSize)&&void 0!==n?n:10,this._gcRun=null,this._gcScheduler=null!==(r=null==t?void 0:t.gcScheduler)&&void 0!==r?r:m,this._getDataID=null!==(i=null==t?void 0:t.getDataID)&&void 0!==i?i:_,this._globalInvalidationEpoch=null,this._invalidationSubscriptions=new Set,this._invalidatedRecordIDs=new Set,this.__log=null!==(o=null==t?void 0:t.log)&&void 0!==o?o:null,this._queryCacheExpirationTime=null==t?void 0:t.queryCacheExpirationTime,this._operationLoader=null!==(u=null==t?void 0:t.operationLoader)&&void 0!==u?u:null,this._optimisticSource=null,this._recordSource=e,this._releaseBuffer=[],this._roots=new Map,this._shouldScheduleGC=!1,this._storeSubscriptions=!0===s.ENABLE_STORE_SUBSCRIPTIONS_REFACTOR?new h(null==t?void 0:t.log):new p(null==t?void 0:t.log),this._updatedRecordIDs=new Set,this._shouldProcessClientComponents=null==t?void 0:t.shouldProcessClientComponents,function(e){if(!e.has(b)){var t=l.create(b,E);e.set(b,t)}}(this._recordSource)}var t=e.prototype;return t.getSource=function(){var e;return null!==(e=this._optimisticSource)&&void 0!==e?e:this._recordSource},t.check=function(e,t){var n,r,i,a=e.root,s=null!==(n=this._optimisticSource)&&void 0!==n?n:this._recordSource,l=this._globalInvalidationEpoch,u=this._roots.get(e.request.identifier),c=null!=u?u.epoch:null;if(null!=l&&(null==c||c<=l))return{status:"stale"};var f=null!==(r=null==t?void 0:t.target)&&void 0!==r?r:s,d=null!==(i=null==t?void 0:t.handlers)&&void 0!==i?i:[];return function(e,t,n,r){var i=e.mostRecentlyInvalidatedAt,a=e.status;return"number"==typeof i&&(null==t||i>t)?{status:"stale"}:"missing"===a?{status:"missing"}:null!=n&&null!=r&&n<=Date.now()-r?{status:"stale"}:{status:"available",fetchTime:null!=n?n:null}}(o.check(s,f,a,d,this._operationLoader,this._getDataID,this._shouldProcessClientComponents),c,null==u?void 0:u.fetchTime,this._queryCacheExpirationTime)},t.retain=function(e){var t=this,n=e.request.identifier,r=!1,i=this._roots.get(n);return null!=i?(0===i.refCount&&(this._releaseBuffer=this._releaseBuffer.filter((function(e){return e!==n}))),i.refCount+=1):this._roots.set(n,{operation:e,refCount:1,epoch:null,fetchTime:null}),{dispose:function(){if(!r){r=!0;var e=t._roots.get(n);if(null!=e&&(e.refCount--,0===e.refCount)){var i=t._queryCacheExpirationTime;if(null!=e.fetchTime&&null!=i&&e.fetchTime<=Date.now()-i)t._roots.delete(n),t.scheduleGC();else if(t._releaseBuffer.push(n),t._releaseBuffer.length>t._gcReleaseBufferSize){var a=t._releaseBuffer.shift();t._roots.delete(a),t.scheduleGC()}}}}}},t.lookup=function(e){var t=this.getSource();return c.read(t,e)},t.notify=function(e,t){var n=this,r=this.__log;null!=r&&r({name:"store.notify.start",sourceOperation:e}),this._currentWriteEpoch++,!0===t&&(this._globalInvalidationEpoch=this._currentWriteEpoch);var i=this.getSource(),a=[];if(this._storeSubscriptions.updateSubscriptions(i,this._updatedRecordIDs,a,e),this._invalidationSubscriptions.forEach((function(e){n._updateInvalidationSubscription(e,!0===t)})),null!=r&&r({name:"store.notify.complete",sourceOperation:e,updatedRecordIDs:this._updatedRecordIDs,invalidatedRecordIDs:this._invalidatedRecordIDs}),this._updatedRecordIDs.clear(),this._invalidatedRecordIDs.clear(),null!=e){var o=e.request.identifier,s=this._roots.get(o);if(null!=s)s.epoch=this._currentWriteEpoch,s.fetchTime=Date.now();else if("query"===e.request.node.params.operationKind&&this._gcReleaseBufferSize>0&&this._releaseBuffer.length<this._gcReleaseBufferSize){var l={operation:e,refCount:0,epoch:this._currentWriteEpoch,fetchTime:Date.now()};this._releaseBuffer.push(o),this._roots.set(o,l)}}return a},t.publish=function(e,t){var n,r=null!==(n=this._optimisticSource)&&void 0!==n?n:this._recordSource;!function(e,t,n,r,i,a){r&&r.forEach((function(r){var i,o=e.get(r),s=t.get(r);null!==s&&(i=null!=o?l.clone(o):null!=s?l.clone(s):null)&&(l.setValue(i,v.INVALIDATED_AT_KEY,n),a.add(r),e.set(r,i))}));for(var o=t.getRecordIDs(),s=0;s<o.length;s++){var u=o[s],c=t.get(u),f=e.get(u);if(c&&f){var p=l.getType(f)===d.REACT_FLIGHT_TYPE_NAME?c:l.update(f,c);p!==f&&(i.add(u),e.set(u,p))}else null===c?(e.delete(u),null!==f&&i.add(u)):c&&(e.set(u,c),i.add(u))}}(r,e,this._currentWriteEpoch+1,t,this._updatedRecordIDs,this._invalidatedRecordIDs);var i=this.__log;null!=i&&i({name:"store.publish",source:e,optimistic:r===this._optimisticSource})},t.subscribe=function(e,t){return this._storeSubscriptions.subscribe(e,t)},t.holdGC=function(){var e=this;return this._gcRun&&(this._gcRun=null,this._shouldScheduleGC=!0),this._gcHoldCounter++,{dispose:function(){e._gcHoldCounter>0&&(e._gcHoldCounter--,0===e._gcHoldCounter&&e._shouldScheduleGC&&(e.scheduleGC(),e._shouldScheduleGC=!1))}}},t.toJSON=function(){return"RelayModernStore()"},t.__getUpdatedRecordIDs=function(){return this._updatedRecordIDs},t.lookupInvalidationState=function(e){var t=this,n=new Map;return e.forEach((function(e){var r,i=t.getSource().get(e);n.set(e,null!==(r=l.getInvalidationEpoch(i))&&void 0!==r?r:null)})),n.set("global",this._globalInvalidationEpoch),{dataIDs:e,invalidations:n}},t.checkInvalidationState=function(e){var t=this.lookupInvalidationState(e.dataIDs).invalidations,n=e.invalidations;if(t.get("global")!==n.get("global"))return!0;var r,a=(0,i.default)(e.dataIDs);try{for(a.s();!(r=a.n()).done;){var o=r.value;if(t.get(o)!==n.get(o))return!0}}catch(e){a.e(e)}finally{a.f()}return!1},t.subscribeToInvalidationState=function(e,t){var n=this,r={callback:t,invalidationState:e};return this._invalidationSubscriptions.add(r),{dispose:function(){n._invalidationSubscriptions.delete(r)}}},t._updateInvalidationSubscription=function(e,t){var n=this,r=e.callback,i=e.invalidationState.dataIDs;(t||i.some((function(e){return n._invalidatedRecordIDs.has(e)})))&&r()},t.snapshot=function(){null!=this._optimisticSource&&g(!1);var e=this.__log;null!=e&&e({name:"store.snapshot"}),this._storeSubscriptions.snapshotSubscriptions(this.getSource()),this._gcRun&&(this._gcRun=null,this._shouldScheduleGC=!0),this._optimisticSource=u.create(this.getSource())},t.restore=function(){null==this._optimisticSource&&g(!1);var e=this.__log;null!=e&&e({name:"store.restore"}),this._optimisticSource=null,this._shouldScheduleGC&&this.scheduleGC(),this._storeSubscriptions.restoreSubscriptions()},t.scheduleGC=function(){this._gcHoldCounter>0?this._shouldScheduleGC=!0:this._gcRun||(this._gcRun=this._collect(),this._gcScheduler(this._gcStep))},t.__gc=function(){if(null==this._optimisticSource)for(var e=this._collect();!e.next().done;);},t._collect=function*(){e:for(;;){var e,t=this._currentWriteEpoch,n=new Set,r=(0,i.default)(this._roots.values());try{for(r.s();!(e=r.n()).done;){var a=e.value.operation.root;if(f.mark(this._recordSource,a,n,this._operationLoader,this._shouldProcessClientComponents),yield,t!==this._currentWriteEpoch)continue e}}catch(e){r.e(e)}finally{r.f()}var o=this.__log;if(null!=o&&o({name:"store.gc",references:n}),0===n.size)this._recordSource.clear();else for(var s=this._recordSource.getRecordIDs(),l=0;l<s.length;l++){var u=s[l];n.has(u)||this._recordSource.remove(u)}return}},e}();e.exports=S},1152:(e,t,n)=>{"use strict";var r=n(5847)(n(1735)),i=n(1143),a=function(){function e(){this._ownersToPendingOperationsIdentifier=new Map,this._pendingOperationsToOwnersIdentifier=new Map,this._ownersIdentifierToPromise=new Map}var t=e.prototype;return t.update=function(e,t){if(0!==t.size){var n,i=e.identifier,a=new Set,o=(0,r.default)(t);try{for(o.s();!(n=o.n()).done;){var s=n.value.identifier,l=this._ownersToPendingOperationsIdentifier.get(s);null!=l?l.has(i)||(l.add(i),a.add(s)):(this._ownersToPendingOperationsIdentifier.set(s,new Set([i])),a.add(s))}}catch(e){o.e(e)}finally{o.f()}if(0!==a.size){var u,c=this._pendingOperationsToOwnersIdentifier.get(i)||new Set,f=(0,r.default)(a);try{for(f.s();!(u=f.n()).done;){var d=u.value;this._resolveOwnerResolvers(d),c.add(d)}}catch(e){f.e(e)}finally{f.f()}this._pendingOperationsToOwnersIdentifier.set(i,c)}}},t.complete=function(e){var t=e.identifier,n=this._pendingOperationsToOwnersIdentifier.get(t);if(null!=n){var i,a=new Set,o=new Set,s=(0,r.default)(n);try{for(s.s();!(i=s.n()).done;){var l=i.value,u=this._ownersToPendingOperationsIdentifier.get(l);u&&(u.delete(t),u.size>0?o.add(l):a.add(l))}}catch(e){s.e(e)}finally{s.f()}var c,f=(0,r.default)(a);try{for(f.s();!(c=f.n()).done;){var d=c.value;this._resolveOwnerResolvers(d),this._ownersToPendingOperationsIdentifier.delete(d)}}catch(e){f.e(e)}finally{f.f()}var p,h=(0,r.default)(o);try{for(h.s();!(p=h.n()).done;){var v=p.value;this._resolveOwnerResolvers(v)}}catch(e){h.e(e)}finally{h.f()}this._pendingOperationsToOwnersIdentifier.delete(t)}},t._resolveOwnerResolvers=function(e){var t=this._ownersIdentifierToPromise.get(e);null!=t&&t.resolve(),this._ownersIdentifierToPromise.delete(e)},t.getPromiseForPendingOperationsAffectingOwner=function(e){var t=e.identifier;if(!this._ownersToPendingOperationsIdentifier.has(t))return null;var n,r=this._ownersIdentifierToPromise.get(t);if(null!=r)return r.promise;var a=new Promise((function(e){n=e}));return null==n&&i(!1),this._ownersIdentifierToPromise.set(t,{promise:a,resolve:n}),a},e}();e.exports=a},3754:(e,t,n)=>{"use strict";var r=n(5847)(n(9471)),i=n(8724),a=Object.freeze({__UNPUBLISH_RECORD_SENTINEL:!0}),o=function(){function e(e){this._base=e,this._sink=i.create()}var t=e.prototype;return t.has=function(e){return this._sink.has(e)?this._sink.get(e)!==a:this._base.has(e)},t.get=function(e){if(this._sink.has(e)){var t=this._sink.get(e);return t===a?void 0:t}return this._base.get(e)},t.getStatus=function(e){var t=this.get(e);return void 0===t?"UNKNOWN":null===t?"NONEXISTENT":"EXISTENT"},t.clear=function(){this._base=i.create(),this._sink.clear()},t.delete=function(e){this._sink.delete(e)},t.remove=function(e){this._sink.set(e,a)},t.set=function(e,t){this._sink.set(e,t)},t.getRecordIDs=function(){return Object.keys(this.toJSON())},t.size=function(){return Object.keys(this.toJSON()).length},t.toJSON=function(){var e=this,t=(0,r.default)({},this._base.toJSON());return this._sink.getRecordIDs().forEach((function(n){var r=e.get(n);void 0===r?delete t[n]:t[n]=r})),t},e}();e.exports={create:function(e){return new o(e)}}},3981:(e,t,n)=>{"use strict";var r,i,a=n(4159),o=n(8724),s=n(1697),l=n(7703),u=n(4596),c=n(1143),f=(n(3620),null!==(r=null===(i=n.g.ErrorUtils)||void 0===i?void 0:i.applyWithGuard)&&void 0!==r?r:function(e,t,n,r,i){return e.apply(t,n)}),d=function(){function e(e,t,n){this._hasStoreSnapshot=!1,this._handlerProvider=t||null,this._pendingBackupRebase=!1,this._pendingData=new Set,this._pendingOptimisticUpdates=new Set,this._store=e,this._appliedOptimisticUpdates=new Set,this._gcHold=null,this._getDataID=n}var t=e.prototype;return t.applyUpdate=function(e){(this._appliedOptimisticUpdates.has(e)||this._pendingOptimisticUpdates.has(e))&&c(!1),this._pendingOptimisticUpdates.add(e)},t.revertUpdate=function(e){this._pendingOptimisticUpdates.has(e)?this._pendingOptimisticUpdates.delete(e):this._appliedOptimisticUpdates.has(e)&&(this._pendingBackupRebase=!0,this._appliedOptimisticUpdates.delete(e))},t.revertAll=function(){this._pendingBackupRebase=!0,this._pendingOptimisticUpdates.clear(),this._appliedOptimisticUpdates.clear()},t.commitPayload=function(e,t,n){this._pendingBackupRebase=!0,this._pendingData.add({kind:"payload",operation:e,payload:t,updater:n})},t.commitUpdate=function(e){this._pendingBackupRebase=!0,this._pendingData.add({kind:"updater",updater:e})},t.commitSource=function(e){this._pendingBackupRebase=!0,this._pendingData.add({kind:"source",source:e})},t.run=function(e){this._pendingBackupRebase&&this._hasStoreSnapshot&&(this._store.restore(),this._hasStoreSnapshot=!1);var t=this._commitData();return(this._pendingOptimisticUpdates.size||this._pendingBackupRebase&&this._appliedOptimisticUpdates.size)&&(this._hasStoreSnapshot||(this._store.snapshot(),this._hasStoreSnapshot=!0),this._applyUpdates()),this._pendingBackupRebase=!1,this._appliedOptimisticUpdates.size>0?this._gcHold||(this._gcHold=this._store.holdGC()):this._gcHold&&(this._gcHold.dispose(),this._gcHold=null),this._store.notify(e,t)},t._publishSourceFromPayload=function(e){var t=this,n=e.payload,r=e.operation,i=e.updater,a=n.source,o=n.fieldPayloads,f=new s(this._store.getSource(),a),d=new l(f,this._getDataID);if(o&&o.length&&o.forEach((function(e){var n=t._handlerProvider&&t._handlerProvider(e.handle);n||c(!1),n.update(d,e)})),i){var h=r.fragment;null==h&&c(!1),i(new u(f,d,h),p(a,h))}var v=d.getIDsMarkedForInvalidation();return this._store.publish(a,v),d.isStoreMarkedForInvalidation()},t._commitData=function(){var e=this;if(!this._pendingData.size)return!1;var t=!1;return this._pendingData.forEach((function(n){if("payload"===n.kind){var r=e._publishSourceFromPayload(n);t=t||r}else if("source"===n.kind){var i=n.source;e._store.publish(i)}else{var a=n.updater,u=o.create(),c=new s(e._store.getSource(),u),d=new l(c,e._getDataID);f(a,null,[d],null,"RelayPublishQueue:commitData"),t=t||d.isStoreMarkedForInvalidation();var p=d.getIDsMarkedForInvalidation();e._store.publish(u,p)}})),this._pendingData.clear(),t},t._applyUpdates=function(){var e=this,t=o.create(),n=new s(this._store.getSource(),t),r=new l(n,this._getDataID,this._handlerProvider),i=function(e){if(e.storeUpdater){var t=e.storeUpdater;f(t,null,[r],null,"RelayPublishQueue:applyUpdates")}else{var i,a=e.operation,o=e.payload,s=e.updater,l=o.source,c=o.fieldPayloads,d=new u(n,r,a.fragment);l&&(r.publishSource(l,c),i=p(l,a.fragment)),s&&f(s,null,[d,i],null,"RelayPublishQueue:applyUpdates")}};this._pendingBackupRebase&&this._appliedOptimisticUpdates.size&&this._appliedOptimisticUpdates.forEach(i),this._pendingOptimisticUpdates.size&&(this._pendingOptimisticUpdates.forEach((function(t){i(t),e._appliedOptimisticUpdates.add(t)})),this._pendingOptimisticUpdates.clear()),this._store.publish(t)},e}();function p(e,t){return a.read(e,t).data}e.exports=d},4159:(e,t,n)=>{"use strict";var r=n(5847)(n(8557)),i=n(1230),a=n(8250),o=n(1143),s=n(132),l=s.CLIENT_EXTENSION,u=s.CONDITION,c=s.DEFER,f=s.FLIGHT_FIELD,d=s.FRAGMENT_SPREAD,p=s.INLINE_DATA_FRAGMENT_SPREAD,h=s.INLINE_FRAGMENT,v=s.LINKED_FIELD,_=s.MODULE_IMPORT,g=s.REQUIRED_FIELD,m=s.RELAY_RESOLVER,y=s.SCALAR_FIELD,b=s.STREAM,E=n(4447).getReactFlightClientResponse,S=n(1380),k=S.FRAGMENTS_KEY,R=S.FRAGMENT_OWNER_KEY,w=S.FRAGMENT_PROP_NAME_KEY,I=S.ID_KEY,C=S.IS_WITHIN_UNMATCHED_TYPE_REFINEMENT,P=S.MODULE_COMPONENT_KEY,D=S.ROOT_ID,x=S.getArgumentValues,O=S.getStorageKey,T=S.getModuleComponentKey,N=n(6253).withResolverContext,F=n(5309).generateTypeID,A=function(){function e(e,t){this._isMissingData=!1,this._isWithinUnmatchedTypeRefinement=!1,this._missingRequiredFields=null,this._owner=t.owner,this._recordSource=e,this._seenRecords=new Set,this._selector=t,this._variables=t.variables}var t=e.prototype;return t.read=function(){var e=this._selector,t=e.node,n=e.dataID,r=e.isWithinUnmatchedTypeRefinement,o=t.abstractKey,s=this._recordSource.get(n),l=!r;if(l&&null==o&&null!=s&&a.getType(s)!==t.type&&n!==D&&(l=!1),l&&null!=o&&null!=s&&i.ENABLE_PRECISE_TYPE_REFINEMENT){var u=a.getType(s),c=F(u),f=this._recordSource.get(c),d=null!=f?a.getValue(f,o):null;!1===d?l=!1:null==d&&(this._isMissingData=!0)}return this._isWithinUnmatchedTypeRefinement=!l,{data:this._traverse(t,n,null),isMissingData:this._isMissingData&&l,seenRecords:this._seenRecords,selector:this._selector,missingRequiredFields:this._missingRequiredFields}},t._traverse=function(e,t,n){var r=this._recordSource.get(t);if(this._seenRecords.add(t),null==r)return void 0===r&&(this._isMissingData=!0),r;var i=n||{};return this._traverseSelections(e.selections,r,i)?i:null},t._getVariableValue=function(e){return this._variables.hasOwnProperty(e)||o(!1),this._variables[e]},t._maybeReportUnexpectedNull=function(e,t,n){var r;if("THROW"!==(null===(r=this._missingRequiredFields)||void 0===r?void 0:r.action)){var i=this._selector.node.name;switch(t){case"THROW":return void(this._missingRequiredFields={action:t,field:{path:e,owner:i}});case"LOG":return null==this._missingRequiredFields&&(this._missingRequiredFields={action:t,fields:[]}),void this._missingRequiredFields.fields.push({path:e,owner:i})}}},t._traverseSelections=function(e,t,n){for(var r=0;r<e.length;r++){var s=e[r];switch(s.kind){case g:if(i.ENABLE_REQUIRED_DIRECTIVES||o(!1),null==this._readRequiredField(s,t,n)){var E=s.action;return"NONE"!==E&&this._maybeReportUnexpectedNull(s.path,E,t),!1}break;case y:this._readScalar(s,t,n);break;case v:s.plural?this._readPluralLink(s,t,n):this._readLink(s,t,n);break;case u:if(this._getVariableValue(s.condition)===s.passingValue&&!this._traverseSelections(s.selections,t,n))return!1;break;case h:var S=s.abstractKey;if(null==S){var k=a.getType(t);if(null!=k&&k===s.type&&!this._traverseSelections(s.selections,t,n))return!1}else if(i.ENABLE_PRECISE_TYPE_REFINEMENT){var R=this._isMissingData,w=this._isWithinUnmatchedTypeRefinement,I=a.getType(t),C=F(I),P=this._recordSource.get(C),D=null!=P?a.getValue(P,S):null;this._isWithinUnmatchedTypeRefinement=w||!1===D,this._traverseSelections(s.selections,t,n),this._isWithinUnmatchedTypeRefinement=w,!1===D?this._isMissingData=R:null==D&&(this._isMissingData=!0)}else this._traverseSelections(s.selections,t,n);break;case m:if(!i.ENABLE_RELAY_RESOLVERS)throw new Error("Relay Resolver fields are not yet supported.");this._readResolverField(s,t,n);break;case d:this._createFragmentPointer(s,t,n);break;case _:this._readModuleImport(s,t,n);break;case p:this._createInlineDataOrResolverFragmentPointer(s,t,n);break;case c:case l:var x=this._isMissingData,O=this._traverseSelections(s.selections,t,n);if(this._isMissingData=x,!O)return!1;break;case b:if(!this._traverseSelections(s.selections,t,n))return!1;break;case f:if(!i.ENABLE_REACT_FLIGHT_COMPONENT_FIELD)throw new Error("Flight fields are not yet supported.");this._readFlightField(s,t,n);break;default:o(!1)}}return!0},t._readRequiredField=function(e,t,n){switch(e.field.kind){case y:return this._readScalar(e.field,t,n);case v:return e.field.plural?this._readPluralLink(e.field,t,n):this._readLink(e.field,t,n);default:e.field.kind,o(!1)}},t._readResolverField=function(e,t,n){var i=this,s=e.name,l=e.alias,u=e.resolverModule,c=e.fragment,f={__id:a.getDataID(t),__fragmentOwner:this._owner,__fragments:(0,r.default)({},c.name,{})},d=N({getDataForResolverFragment:function(e){var n,r={};i._createInlineDataOrResolverFragmentPointer(e.node,t,r);var a=null===(n=r[k])||void 0===n?void 0:n[c.name];return("object"!=typeof a||null===a)&&o(!1),a}},(function(){return u(f)}));return n[null!=l?l:s]=d,d},t._readFlightField=function(e,t,n){var r,i=null!==(r=e.alias)&&void 0!==r?r:e.name,o=O(e,this._variables),s=a.getLinkedRecordID(t,o);if(null==s)return n[i]=s,void 0===s&&(this._isMissingData=!0),s;var l=this._recordSource.get(s);if(this._seenRecords.add(s),null==l)return n[i]=l,void 0===l&&(this._isMissingData=!0),l;var u=E(l);return n[i]=u,u},t._readScalar=function(e,t,n){var r,i=null!==(r=e.alias)&&void 0!==r?r:e.name,o=O(e,this._variables),s=a.getValue(t,o);return void 0===s&&(this._isMissingData=!0),n[i]=s,s},t._readLink=function(e,t,n){var r,i=null!==(r=e.alias)&&void 0!==r?r:e.name,s=O(e,this._variables),l=a.getLinkedRecordID(t,s);if(null==l)return n[i]=l,void 0===l&&(this._isMissingData=!0),l;var u=n[i];null!=u&&"object"!=typeof u&&o(!1);var c=this._traverse(e,l,u);return n[i]=c,c},t._readPluralLink=function(e,t,n){var r,i=this,s=null!==(r=e.alias)&&void 0!==r?r:e.name,l=O(e,this._variables),u=a.getLinkedRecordIDs(t,l);if(null==u)return n[s]=u,void 0===u&&(this._isMissingData=!0),u;var c=n[s];null==c||Array.isArray(c)||o(!1);var f=c||[];return u.forEach((function(t,n){if(null==t)return void 0===t&&(i._isMissingData=!0),void(f[n]=t);var r=f[n];null!=r&&"object"!=typeof r&&o(!1),f[n]=i._traverse(e,t,r)})),n[s]=f,f},t._readModuleImport=function(e,t,n){var r=T(e.documentName),i=a.getValue(t,r);null!=i?(this._createFragmentPointer({kind:"FragmentSpread",name:e.fragmentName,args:null},t,n),n[w]=e.fragmentPropName,n[P]=i):void 0===i&&(this._isMissingData=!0)},t._createFragmentPointer=function(e,t,n){var r=n[k];null==r&&(r=n[k]={}),("object"!=typeof r||null==r)&&o(!1),null==n[I]&&(n[I]=a.getDataID(t)),r[e.name]=e.args?x(e.args,this._variables):{},n[R]=this._owner,i.ENABLE_PRECISE_TYPE_REFINEMENT&&(n[C]=this._isWithinUnmatchedTypeRefinement)},t._createInlineDataOrResolverFragmentPointer=function(e,t,n){var r=n[k];null==r&&(r=n[k]={}),("object"!=typeof r||null==r)&&o(!1),null==n[I]&&(n[I]=a.getDataID(t));var i={};this._traverseSelections(e.selections,t,i),r[e.name]=i},e}();e.exports={read:function(e,t){return new A(e,t).read()}}},8724:(e,t,n)=>{"use strict";var r=n(7578),i=function(){function e(t){return e.create(t)}return e.create=function(e){return new r(e)},e}();e.exports=i},7578:(e,t,n)=>{"use strict";var r=n(5847)(n(1735)),i=n(6528),a=i.EXISTENT,o=i.NONEXISTENT,s=i.UNKNOWN,l=function(){function e(e){var t=this;this._records=new Map,null!=e&&Object.keys(e).forEach((function(n){t._records.set(n,e[n])}))}var t=e.prototype;return t.clear=function(){this._records=new Map},t.delete=function(e){this._records.set(e,null)},t.get=function(e){return this._records.get(e)},t.getRecordIDs=function(){return Array.from(this._records.keys())},t.getStatus=function(e){return this._records.has(e)?null==this._records.get(e)?o:a:s},t.has=function(e){return this._records.has(e)},t.remove=function(e){this._records.delete(e)},t.set=function(e,t){this._records.set(e,t)},t.size=function(){return this._records.size},t.toJSON=function(){var e,t={},n=(0,r.default)(this._records);try{for(n.s();!(e=n.n()).done;){var i=e.value,a=i[0],o=i[1];t[a]=o}}catch(e){n.e(e)}finally{n.f()}return t},e}();e.exports=l},6528:e=>{"use strict";e.exports={EXISTENT:"EXISTENT",NONEXISTENT:"NONEXISTENT",UNKNOWN:"UNKNOWN"}},4023:(e,t,n)=>{"use strict";var r=n(5847)(n(1735)),i=n(132),a=n(1230),o=n(8250),s=n(4447),l=n(1380),u=n(5486),c=n(2576),f=n(1143),d=n(5309).generateTypeID,p=i.CONDITION,h=i.CLIENT_COMPONENT,v=i.CLIENT_EXTENSION,_=i.DEFER,g=i.FLIGHT_FIELD,m=i.FRAGMENT_SPREAD,y=i.INLINE_FRAGMENT,b=i.LINKED_FIELD,E=i.MODULE_IMPORT,S=i.LINKED_HANDLE,k=i.SCALAR_FIELD,R=i.SCALAR_HANDLE,w=i.STREAM,I=i.TYPE_DISCRIMINATOR,C=l.ROOT_ID,P=l.getStorageKey,D=l.getModuleOperationKey,x=function(){function e(e,t,n,r,i){this._operationLoader=null!=r?r:null,this._operationName=null,this._recordSource=e,this._references=n,this._variables=t,this._shouldProcessClientComponents=i}var t=e.prototype;return t.mark=function(e,t){"Operation"!==e.kind&&"SplitOperation"!==e.kind||(this._operationName=e.name),this._traverse(e,t)},t._traverse=function(e,t){this._references.add(t);var n=this._recordSource.get(t);null!=n&&this._traverseSelections(e.selections,n)},t._getVariableValue=function(e){return this._variables.hasOwnProperty(e)||f(!1),this._variables[e]},t._traverseSelections=function(e,t){var n=this;e.forEach((function(r){switch(r.kind){case b:r.plural?n._traversePluralLink(r,t):n._traverseLink(r,t);break;case p:n._getVariableValue(r.condition)===r.passingValue&&n._traverseSelections(r.selections,t);break;case y:if(null==r.abstractKey){var i=o.getType(t);null!=i&&i===r.type&&n._traverseSelections(r.selections,t)}else if(a.ENABLE_PRECISE_TYPE_REFINEMENT){var s=o.getType(t),l=d(s);n._references.add(l),n._traverseSelections(r.selections,t)}else n._traverseSelections(r.selections,t);break;case m:n._traverseSelections(r.fragment.selections,t);break;case S:var c=u(r,e,n._variables);c.plural?n._traversePluralLink(c,t):n._traverseLink(c,t);break;case _:case w:n._traverseSelections(r.selections,t);break;case k:case R:break;case I:if(a.ENABLE_PRECISE_TYPE_REFINEMENT){var C=o.getType(t),P=d(C);n._references.add(P)}break;case E:n._traverseModuleImport(r,t);break;case v:n._traverseSelections(r.selections,t);break;case g:if(!a.ENABLE_REACT_FLIGHT_COMPONENT_FIELD)throw new Error("Flight fields are not yet supported.");n._traverseFlightField(r,t);break;case h:if(!1===n._shouldProcessClientComponents)break;n._traverseSelections(r.fragment.selections,t);break;default:f(!1)}}))},t._traverseModuleImport=function(e,t){var n=this._operationLoader;null===n&&f(!1);var r=D(e.documentName),i=o.getValue(t,r);if(null!=i){var a=n.get(i);if(null!=a){var s=c(a).selections;this._traverseSelections(s,t)}}},t._traverseLink=function(e,t){var n=P(e,this._variables),r=o.getLinkedRecordID(t,n);null!=r&&this._traverse(e,r)},t._traversePluralLink=function(e,t){var n=this,r=P(e,this._variables),i=o.getLinkedRecordIDs(t,r);null!=i&&i.forEach((function(t){null!=t&&n._traverse(e,t)}))},t._traverseFlightField=function(e,t){var n=P(e,this._variables),i=o.getLinkedRecordID(t,n);if(null!=i){this._references.add(i);var a=this._recordSource.get(i);if(null!=a){var l=o.getValue(a,s.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY);if(Array.isArray(l)){var u=this._operationLoader;null===u&&f(!1);var d,p=this._variables,h=(0,r.default)(l);try{for(h.s();!(d=h.n()).done;){var v=d.value;this._variables=v.variables;var _=v.module,g=u.get(_);if(null!=g){var m=c(g);this._traverse(m,C)}}}catch(e){h.e(e)}finally{h.f()}this._variables=p}}}},e}();e.exports={mark:function(e,t,n,r,i){var a=t.dataID,o=t.node,s=t.variables;new x(e,s,n,r,i).mark(o,a)}}},1147:(e,t,n)=>{"use strict";var r=n(5847),i=r(n(1735)),a=r(n(9381)),o=n(1230),s=n(8250),l=(n(1305),n(1143)),u=(n(3620),n(132)),c=u.CONDITION,f=u.CLIENT_COMPONENT,d=u.CLIENT_EXTENSION,p=u.DEFER,h=u.FLIGHT_FIELD,v=u.FRAGMENT_SPREAD,_=u.INLINE_FRAGMENT,g=u.LINKED_FIELD,m=u.LINKED_HANDLE,y=u.MODULE_IMPORT,b=u.SCALAR_FIELD,E=u.SCALAR_HANDLE,S=u.STREAM,k=u.TYPE_DISCRIMINATOR,R=n(6063),w=R.generateClientID,I=(R.isClientID,n(1447).createNormalizationSelector),C=n(4447),P=C.refineToReactFlightPayloadData,D=C.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY,x=C.REACT_FLIGHT_TREE_STORAGE_KEY,O=C.REACT_FLIGHT_TYPE_NAME,T=n(1380),N=T.getArgumentValues,F=T.getHandleStorageKey,A=T.getModuleComponentKey,L=T.getModuleOperationKey,M=T.getStorageKey,U=T.TYPENAME_KEY,q=T.ROOT_ID,z=T.ROOT_TYPE,j=n(5309),V=j.generateTypeID,Q=j.TYPE_SCHEMA_TYPE,K=function(){function e(e,t,n){this._getDataId=n.getDataID,this._handleFieldPayloads=[],this._treatMissingFieldsAsNull=n.treatMissingFieldsAsNull,this._incrementalPlaceholders=[],this._isClientExtension=!1,this._isUnmatchedAbstractType=!1,this._moduleImportPayloads=[],this._path=n.path?(0,a.default)(n.path):[],this._recordSource=e,this._variables=t,this._reactFlightPayloadDeserializer=n.reactFlightPayloadDeserializer,this._reactFlightServerErrorHandler=n.reactFlightServerErrorHandler,this._shouldProcessClientComponents=n.shouldProcessClientComponents}var t=e.prototype;return t.normalizeResponse=function(e,t,n){var r=this._recordSource.get(t);return r||l(!1),this._traverseSelections(e,r,n),{errors:null,fieldPayloads:this._handleFieldPayloads,incrementalPlaceholders:this._incrementalPlaceholders,moduleImportPayloads:this._moduleImportPayloads,source:this._recordSource,isFinal:!1}},t._getVariableValue=function(e){return this._variables.hasOwnProperty(e)||l(!1),this._variables[e]},t._getRecordType=function(e){var t=e[U];return null==t&&l(!1),t},t._traverseSelections=function(e,t,n){for(var r=0;r<e.selections.length;r++){var i=e.selections[r];switch(i.kind){case b:case g:this._normalizeField(e,i,t,n);break;case c:this._getVariableValue(i.condition)===i.passingValue&&this._traverseSelections(i,t,n);break;case v:this._traverseSelections(i.fragment,t,n);break;case _:var a=i.abstractKey;if(null==a)s.getType(t)===i.type&&this._traverseSelections(i,t,n);else if(o.ENABLE_PRECISE_TYPE_REFINEMENT){var u=n.hasOwnProperty(a),R=s.getType(t),w=V(R),I=this._recordSource.get(w);null==I&&(I=s.create(w,Q),this._recordSource.set(w,I)),s.setValue(I,a,u),u&&this._traverseSelections(i,t,n)}else{var C=n.hasOwnProperty(a),P=this._isUnmatchedAbstractType;this._isUnmatchedAbstractType=this._isUnmatchedAbstractType||!C,this._traverseSelections(i,t,n),this._isUnmatchedAbstractType=P}break;case k:if(o.ENABLE_PRECISE_TYPE_REFINEMENT){var D=i.abstractKey,x=n.hasOwnProperty(D),O=s.getType(t),T=V(O),A=this._recordSource.get(T);null==A&&(A=s.create(T,Q),this._recordSource.set(T,A)),s.setValue(A,D,x)}break;case m:case E:var L=i.args?N(i.args,this._variables):{},U=M(i,this._variables),q=F(i,this._variables);this._handleFieldPayloads.push({args:L,dataID:s.getDataID(t),fieldKey:U,handle:i.handle,handleKey:q,handleArgs:i.handleArgs?N(i.handleArgs,this._variables):{}});break;case y:this._normalizeModuleImport(e,i,t,n);break;case p:this._normalizeDefer(i,t,n);break;case S:this._normalizeStream(i,t,n);break;case d:var z=this._isClientExtension;this._isClientExtension=!0,this._traverseSelections(i,t,n),this._isClientExtension=z;break;case f:if(!1===this._shouldProcessClientComponents)break;this._traverseSelections(i.fragment,t,n);break;case h:if(!o.ENABLE_REACT_FLIGHT_COMPONENT_FIELD)throw new Error("Flight fields are not yet supported.");this._normalizeFlightField(e,i,t,n);break;default:l(!1)}}},t._normalizeDefer=function(e,t,n){!1===(null===e.if||this._getVariableValue(e.if))?this._traverseSelections(e,t,n):this._incrementalPlaceholders.push({kind:"defer",data:n,label:e.label,path:(0,a.default)(this._path),selector:I(e,s.getDataID(t),this._variables),typeName:s.getType(t)})},t._normalizeStream=function(e,t,n){this._traverseSelections(e,t,n),!0===(null===e.if||this._getVariableValue(e.if))&&this._incrementalPlaceholders.push({kind:"stream",label:e.label,path:(0,a.default)(this._path),parentID:s.getDataID(t),node:e,variables:this._variables})},t._normalizeModuleImport=function(e,t,n,r){"object"==typeof r&&r||l(!1);var i=s.getType(n),o=A(t.documentName),u=r[o];s.setValue(n,o,null!=u?u:null);var c=L(t.documentName),f=r[c];s.setValue(n,c,null!=f?f:null),null!=f&&this._moduleImportPayloads.push({data:r,dataID:s.getDataID(n),operationReference:f,path:(0,a.default)(this._path),typeName:i,variables:this._variables})},t._normalizeField=function(e,t,n,r){"object"==typeof r&&r||l(!1);var i=t.alias||t.name,a=M(t,this._variables),o=r[i];if(null!=o)t.kind===b?s.setValue(n,a,o):t.kind===g?(this._path.push(i),t.plural?this._normalizePluralLink(t,n,a,o):this._normalizeLink(t,n,a,o),this._path.pop()):l(!1);else{if(void 0===o){if(this._isClientExtension||this._isUnmatchedAbstractType)return;if(!this._treatMissingFieldsAsNull)return}s.setValue(n,a,null)}},t._normalizeFlightField=function(e,t,n,r){var a=t.alias||t.name,o=M(t,this._variables),u=r[a];if(null!=u){var c=P(u),f=this._reactFlightPayloadDeserializer;null==c&&l(!1),"function"!=typeof f&&l(!1),c.errors.length>0&&"function"==typeof this._reactFlightServerErrorHandler&&this._reactFlightServerErrorHandler(c.status,c.errors);var d=w(s.getDataID(n),M(t,this._variables)),p=this._recordSource.get(d);if(null==p&&(p=s.create(d,O),this._recordSource.set(d,p)),null==c.tree)return s.setValue(p,x,null),s.setValue(p,D,[]),void s.setLinkedRecordID(n,o,d);var h=f(c.tree);s.setValue(p,x,h);var v,_=[],g=(0,i.default)(c.queries);try{for(g.s();!(v=g.n()).done;){var m=v.value;null!=m.response.data&&this._moduleImportPayloads.push({data:m.response.data,dataID:q,operationReference:m.module,path:[],typeName:z,variables:m.variables}),_.push({module:m.module,variables:m.variables})}}catch(e){g.e(e)}finally{g.f()}var y,b=(0,i.default)(c.fragments);try{for(b.s();!(y=b.n()).done;){var E=y.value;null!=E.response.data&&this._moduleImportPayloads.push({data:E.response.data,dataID:E.__id,operationReference:E.module,path:[],typeName:E.__typename,variables:E.variables}),_.push({module:E.module,variables:E.variables})}}catch(e){b.e(e)}finally{b.f()}s.setValue(p,D,_),s.setLinkedRecordID(n,o,d)}else{if(void 0===u){if(this._isUnmatchedAbstractType)return;if(!this._treatMissingFieldsAsNull)return}s.setValue(n,o,null)}},t._normalizeLink=function(e,t,n,r){var i;"object"==typeof r&&r||l(!1);var a=this._getDataId(r,null!==(i=e.concreteType)&&void 0!==i?i:this._getRecordType(r))||s.getLinkedRecordID(t,n)||w(s.getDataID(t),n);"string"!=typeof a&&l(!1),s.setLinkedRecordID(t,n,a);var o=this._recordSource.get(a);if(o);else{var u=e.concreteType||this._getRecordType(r);o=s.create(a,u),this._recordSource.set(a,o)}this._traverseSelections(e,o,r)},t._normalizePluralLink=function(e,t,n,r){var i=this;Array.isArray(r)||l(!1);var a=s.getLinkedRecordIDs(t,n),o=[];r.forEach((function(r,u){var c;if(null!=r){i._path.push(String(u)),"object"!=typeof r&&l(!1);var f=i._getDataId(r,null!==(c=e.concreteType)&&void 0!==c?c:i._getRecordType(r))||a&&a[u]||w(s.getDataID(t),n,u);"string"!=typeof f&&l(!1),o.push(f);var d=i._recordSource.get(f);if(d);else{var p=e.concreteType||i._getRecordType(r);d=s.create(f,p),i._recordSource.set(f,d)}i._traverseSelections(e,d,r),i._path.pop()}else o.push(r)})),s.setLinkedRecordIDs(t,n,o)},t._validateRecordType=function(e,t,n){var r;null!==(r=t.concreteType)&&void 0!==r||this._getRecordType(n),s.getDataID(e)},t._validateConflictingFieldsWithIdenticalId=function(e,t,n){},t._validateConflictingLinkedFieldsWithIdenticalId=function(e,t,n,r){},e}();e.exports={normalize:function(e,t,n,r){var i=t.dataID,a=t.node,o=t.variables;return new K(e,o,r).normalizeResponse(a,i,n)}}},4447:(e,t,n)=>{"use strict";var r=n(1143),i=n(8250).getType,a="ReactFlightComponent";e.exports={REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY:"executableDefinitions",REACT_FLIGHT_TREE_STORAGE_KEY:"tree",REACT_FLIGHT_TYPE_NAME:a,getReactFlightClientResponse:function(e){i(e)!==a&&r(!1);var t=e.tree;return null!=t?t:null},refineToReactFlightPayloadData:function(e){return null!=e&&"object"==typeof e&&"string"==typeof e.status&&(Array.isArray(e.tree)||null===e.tree)&&Array.isArray(e.queries)&&Array.isArray(e.fragments)&&Array.isArray(e.errors)?e:null}}},7706:(e,t,n)=>{"use strict";var r=n(1230),i=n(4159),a=(n(2232),n(9552)),o=n(5578),s=function(){function e(e){this._subscriptions=new Set,this.__log=e}var t=e.prototype;return t.subscribe=function(e,t){var n=this,r={backup:null,callback:t,snapshot:e,stale:!1};return this._subscriptions.add(r),{dispose:function(){n._subscriptions.delete(r)}}},t.snapshotSubscriptions=function(e){this._subscriptions.forEach((function(t){if(t.stale){var n=t.snapshot,r=i.read(e,n.selector),a=o(n.data,r.data);r.data=a,t.backup=r}else t.backup=t.snapshot}))},t.restoreSubscriptions=function(){this._subscriptions.forEach((function(e){var t=e.backup;e.backup=null,t?(t.data!==e.snapshot.data&&(e.stale=!0),e.snapshot={data:e.snapshot.data,isMissingData:t.isMissingData,seenRecords:t.seenRecords,selector:t.selector,missingRequiredFields:t.missingRequiredFields}):e.stale=!0}))},t.updateSubscriptions=function(e,t,n,r){var i=this,a=0!==t.size;this._subscriptions.forEach((function(o){var s=i._updateSubscription(e,o,t,a,r);null!=s&&n.push(s)}))},t._updateSubscription=function(e,t,n,s,l){var u=t.backup,c=t.callback,f=t.snapshot,d=t.stale,p=s&&a(f.seenRecords,n);if(d||p){var h=p||!u?i.read(e,f.selector):u;return h={data:o(f.data,h.data),isMissingData:h.isMissingData,seenRecords:h.seenRecords,selector:h.selector,missingRequiredFields:h.missingRequiredFields},t.snapshot=h,t.stale=!1,h.data!==f.data?(this.__log&&r.ENABLE_NOTIFY_SUBSCRIPTION&&this.__log({name:"store.notify.subscription",sourceOperation:l,snapshot:f,nextSnapshot:h}),c(h),f.selector.owner):void 0}},e}();e.exports=s},4430:(e,t,n)=>{"use strict";var r=n(5847)(n(1735)),i=n(1230),a=n(4159),o=(n(2232),n(5578)),s=function(){function e(e){this._notifiedRevision=0,this._snapshotRevision=0,this._subscriptionsByDataId=new Map,this._staleSubscriptions=new Set,this.__log=e}var t=e.prototype;return t.subscribe=function(e,t){var n,i=this,a={backup:null,callback:t,notifiedRevision:this._notifiedRevision,snapshotRevision:this._snapshotRevision,snapshot:e},o=(0,r.default)(e.seenRecords);try{for(o.s();!(n=o.n()).done;){var s=n.value,l=this._subscriptionsByDataId.get(s);null!=l?l.add(a):this._subscriptionsByDataId.set(s,new Set([a]))}}catch(e){o.e(e)}finally{o.f()}return{dispose:function(){var t,n=(0,r.default)(e.seenRecords);try{for(n.s();!(t=n.n()).done;){var o=t.value,s=i._subscriptionsByDataId.get(o);null!=s&&(s.delete(a),0===s.size&&i._subscriptionsByDataId.delete(o))}}catch(e){n.e(e)}finally{n.f()}}}},t.snapshotSubscriptions=function(e){var t=this;this._snapshotRevision++,this._subscriptionsByDataId.forEach((function(n){n.forEach((function(n){if(n.snapshotRevision!==t._snapshotRevision)if(n.snapshotRevision=t._snapshotRevision,t._staleSubscriptions.has(n)){var r=n.snapshot,i=a.read(e,r.selector),s=o(r.data,i.data);i.data=s,n.backup=i}else n.backup=n.snapshot}))}))},t.restoreSubscriptions=function(){var e=this;this._snapshotRevision++,this._subscriptionsByDataId.forEach((function(t){t.forEach((function(t){if(t.snapshotRevision!==e._snapshotRevision){t.snapshotRevision=e._snapshotRevision;var n=t.backup;if(t.backup=null,n){n.data!==t.snapshot.data&&e._staleSubscriptions.add(t);var r=t.snapshot.seenRecords;t.snapshot={data:t.snapshot.data,isMissingData:n.isMissingData,seenRecords:n.seenRecords,selector:n.selector,missingRequiredFields:n.missingRequiredFields},e._updateSubscriptionsMap(t,r)}else e._staleSubscriptions.add(t)}}))}))},t.updateSubscriptions=function(e,t,n,r){var i=this;this._notifiedRevision++,t.forEach((function(t){var a=i._subscriptionsByDataId.get(t);null!=a&&a.forEach((function(t){if(t.notifiedRevision!==i._notifiedRevision){var a=i._updateSubscription(e,t,!1,r);null!=a&&n.push(a)}}))})),this._staleSubscriptions.forEach((function(t){if(t.notifiedRevision!==i._notifiedRevision){var a=i._updateSubscription(e,t,!0,r);null!=a&&n.push(a)}})),this._staleSubscriptions.clear()},t._updateSubscription=function(e,t,n,r){var s=t.backup,l=t.callback,u=t.snapshot,c=n&&null!=s?s:a.read(e,u.selector);c={data:o(u.data,c.data),isMissingData:c.isMissingData,seenRecords:c.seenRecords,selector:c.selector,missingRequiredFields:c.missingRequiredFields};var f=t.snapshot.seenRecords;if(t.snapshot=c,t.notifiedRevision=this._notifiedRevision,this._updateSubscriptionsMap(t,f),c.data!==u.data)return this.__log&&i.ENABLE_NOTIFY_SUBSCRIPTION&&this.__log({name:"store.notify.subscription",sourceOperation:r,snapshot:u,nextSnapshot:c}),l(c),u.selector.owner},t._updateSubscriptionsMap=function(e,t){var n,i=(0,r.default)(t);try{for(i.s();!(n=i.n()).done;){var a=n.value,o=this._subscriptionsByDataId.get(a);null!=o&&(o.delete(e),0===o.size&&this._subscriptionsByDataId.delete(a))}}catch(e){i.e(e)}finally{i.f()}var s,l=(0,r.default)(e.snapshot.seenRecords);try{for(l.s();!(s=l.n()).done;){var u=s.value,c=this._subscriptionsByDataId.get(u);null!=c?c.add(e):this._subscriptionsByDataId.set(u,new Set([e]))}}catch(e){l.e(e)}finally{l.f()}},e}();e.exports=s},1380:(e,t,n)=>{"use strict";var r=n(5847)(n(9381)),i=n(132),a=n(1126),o=n(1143),s=n(1411),l=i.VARIABLE,u=i.LITERAL,c=i.OBJECT_VALUE,f=i.LIST_VALUE;function d(e,t){if(e.kind===l)return function(e,t){return t.hasOwnProperty(e)||o(!1),s(t[e])}(e.variableName,t);if(e.kind===u)return e.value;if(e.kind===c){var n={};return e.fields.forEach((function(e){n[e.name]=d(e,t)})),n}if(e.kind===f){var r=[];return e.items.forEach((function(e){null!=e&&r.push(d(e,t))})),r}}function p(e,t){var n={};return e.forEach((function(e){n[e.name]=d(e,t)})),n}function h(e,t){if(!t)return e;var n=[];for(var r in t)if(t.hasOwnProperty(r)){var i,a=t[r];null!=a&&n.push(r+":"+(null!==(i=JSON.stringify(a))&&void 0!==i?i:"undefined"))}return 0===n.length?e:e+"(".concat(n.join(","),")")}var v={FRAGMENTS_KEY:"__fragments",FRAGMENT_OWNER_KEY:"__fragmentOwner",FRAGMENT_PROP_NAME_KEY:"__fragmentPropName",MODULE_COMPONENT_KEY:"__module_component",ID_KEY:"__id",REF_KEY:"__ref",REFS_KEY:"__refs",ROOT_ID:"client:root",ROOT_TYPE:"__Root",TYPENAME_KEY:"__typename",INVALIDATED_AT_KEY:"__invalidated_at",IS_WITHIN_UNMATCHED_TYPE_REFINEMENT:"__isWithinUnmatchedTypeRefinement",formatStorageKey:h,getArgumentValue:d,getArgumentValues:p,getHandleStorageKey:function(e,t){var n=e.dynamicKey,i=e.handle,o=e.key,s=e.name,l=e.args,u=e.filters,c=a(i,o,s),f=null;return l&&u&&0!==l.length&&0!==u.length&&(f=l.filter((function(e){return u.indexOf(e.name)>-1}))),n&&(f=null!=f?[n].concat((0,r.default)(f)):[n]),null===f?c:h(c,p(f,t))},getStorageKey:function(e,t){if(e.storageKey)return e.storageKey;var n=e.args,r=e.name;return n&&0!==n.length?h(r,p(n,t)):r},getStableStorageKey:function(e,t){return h(e,s(t))},getModuleComponentKey:function(e){return"".concat("__module_component_").concat(e)},getModuleOperationKey:function(e){return"".concat("__module_operation_").concat(e)}};e.exports=v},6253:(e,t,n)=>{"use strict";var r=n(1143),i=n(5557).getFragment,a=n(1447).getSelector,o=[];e.exports={readFragment:function(e,t){if(!o.length)throw new Error("readFragment should be called only from within a Relay Resolver function.");var n=o[o.length-1],s=i(e),l=a(s,t);return null==l&&r(!1),"SingularReaderSelector"!==l.kind&&r(!1),n.getDataForResolverFragment(l)},withResolverContext:function(e,t){o.push(e);try{return t()}finally{o.pop()}}}},5309:e=>{"use strict";var t="client:__type:";e.exports={generateTypeID:function(e){return t+e},isTypeID:function(e){return 0===e.indexOf(t)},TYPE_SCHEMA_TYPE:"__TypeSchema"}},2691:(e,t,n)=>{"use strict";var r=(0,n(6063).generateClientID)(n(1380).ROOT_ID,"viewer");e.exports={VIEWER_ID:r,VIEWER_TYPE:"Viewer"}},5486:(e,t,n)=>{"use strict";var r=n(1305),i=n(1143),a=n(132).LINKED_FIELD,o=n(1380).getHandleStorageKey;e.exports=function(e,t,n){var s=t.find((function(t){return t.kind===a&&t.name===e.name&&t.alias===e.alias&&r(t.args,e.args)}));s&&s.kind===a||i(!1);var l=o(e,n);return{kind:"LinkedField",alias:s.alias,name:l,storageKey:l,args:null,concreteType:s.concreteType,plural:s.plural,selections:s.selections}}},3871:(e,t,n)=>{"use strict";var r=n(1305),i=n(1143),a=n(132).SCALAR_FIELD,o=n(1380).getHandleStorageKey;e.exports=function(e,t,n){var s=t.find((function(t){return t.kind===a&&t.name===e.name&&t.alias===e.alias&&r(t.args,e.args)}));s&&s.kind===a||i(!1);var l=o(e,n);return{kind:"ScalarField",alias:s.alias,name:l,storageKey:l,args:null}}},221:(e,t,n)=>{"use strict";var r=n(8474);n(3620),e.exports=function(e,t,n,i,a,o){return new r(e,n,i,o,a)}},594:(e,t,n)=>{"use strict";var r,i,a=n(1143);e.exports=function(e){return r||(r=e.createContext(null),i=e),e!==i&&a(!1),r}},1517:(e,t,n)=>{"use strict";var r=n(2691),i=r.VIEWER_ID,a=r.VIEWER_TYPE;e.exports=function(e,t){return t===a&&null==e.id?i:e.id}},4062:e=>{"use strict";e.exports=function(e){}},9552:e=>{"use strict";var t=Symbol.iterator;e.exports=function(e,n){for(var r=e[t](),i=r.next();!i.done;){var a=i.value;if(n.has(a))return!0;i=r.next()}return!1}},641:e=>{"use strict";e.exports=function(e){return Boolean(e&&e["@@RelayModernEnvironment"])}},1507:(e,t,n)=>{"use strict";var r=n(1143),i=n(5557).getInlineDataFragment,a=n(1380).FRAGMENTS_KEY;e.exports=function(e,t){var n,o=i(e);if(null==t)return t;"object"!=typeof t&&r(!1);var s=null===(n=t[a])||void 0===n?void 0:n[o.name];return null==s&&r(!1),s}},5476:(e,t,n)=>{"use strict";var r=n(3385),i=n(1230),a=(n(3620),n(5557).getRequest),o=n(6063).generateUniqueClientID,s=n(1071).createOperationDescriptor,l=n(1447).createReaderSelector;e.exports=function(e,t){var n=a(t.subscription);if("subscription"!==n.params.operationKind)throw new Error("requestSubscription: Must use Subscription operation");var u=t.configs,c=t.onCompleted,f=t.onError,d=t.onNext,p=t.variables,h=t.cacheConfig,v=s(n,p,h,i.ENABLE_UNIQUE_SUBSCRIPTION_ROOT?o():void 0),_=(u?r.convert(u,n,null,t.updater):t).updater;return{dispose:e.execute({operation:v,updater:_}).map((function(t){var n,r,a,o,s=v.fragment;i.ENABLE_UNIQUE_SUBSCRIPTION_ROOT&&("string"==typeof(n=Array.isArray(t)?null===(r=t[0])||void 0===r||null===(a=r.extensions)||void 0===a?void 0:a.__relay_subscription_root_id:null===(o=t.extensions)||void 0===o?void 0:o.__relay_subscription_root_id)&&(s=l(s.node,n,s.variables,s.owner)));return e.lookup(s).data})).subscribe({next:d,error:f,complete:c}).unsubscribe}}},132:e=>{"use strict";e.exports={CONDITION:"Condition",CLIENT_COMPONENT:"ClientComponent",CLIENT_EXTENSION:"ClientExtension",DEFER:"Defer",CONNECTION:"Connection",FLIGHT_FIELD:"FlightField",FRAGMENT:"Fragment",FRAGMENT_SPREAD:"FragmentSpread",INLINE_DATA_FRAGMENT_SPREAD:"InlineDataFragmentSpread",INLINE_DATA_FRAGMENT:"InlineDataFragment",INLINE_FRAGMENT:"InlineFragment",LINKED_FIELD:"LinkedField",LINKED_HANDLE:"LinkedHandle",LITERAL:"Literal",LIST_VALUE:"ListValue",LOCAL_ARGUMENT:"LocalArgument",MODULE_IMPORT:"ModuleImport",RELAY_RESOLVER:"RelayResolver",REQUIRED_FIELD:"RequiredField",OBJECT_VALUE:"ObjectValue",OPERATION:"Operation",REQUEST:"Request",ROOT_ARGUMENT:"RootArgument",SCALAR_FIELD:"ScalarField",SCALAR_HANDLE:"ScalarHandle",SPLIT_OPERATION:"SplitOperation",STREAM:"Stream",TYPE_DISCRIMINATOR:"TypeDiscriminator",VARIABLE:"Variable"}},9558:e=>{"use strict";e.exports={DEFAULT_HANDLE_KEY:""}},2299:e=>{"use strict";function t(e,t,n){for(var r=arguments.length,i=new Array(r>3?r-3:0),a=3;a<r;a++)i[a-3]=arguments[a];var o=0,s=n.replace(/%s/g,(function(){return String(i[o++])})),l=new Error(s),u=Object.assign(l,{name:t,messageFormat:n,messageParams:i,type:e,taalOpcodes:[2,2]});if(void 0===u.stack)try{throw u}catch(e){}return u}e.exports={create:function(e,n){for(var r=arguments.length,i=new Array(r>2?r-2:0),a=2;a<r;a++)i[a-2]=arguments[a];return t.apply(void 0,["error",e,n].concat(i))},createWarning:function(e,n){for(var r=arguments.length,i=new Array(r>2?r-2:0),a=2;a<r;a++)i[a-2]=arguments[a];return t.apply(void 0,["warn",e,n].concat(i))}}},1230:e=>{"use strict";e.exports={ENABLE_VARIABLE_CONNECTION_KEY:!1,ENABLE_PARTIAL_RENDERING_DEFAULT:!0,ENABLE_RELAY_CONTAINERS_SUSPENSE:!0,ENABLE_PRECISE_TYPE_REFINEMENT:!1,ENABLE_REACT_FLIGHT_COMPONENT_FIELD:!1,ENABLE_REQUIRED_DIRECTIVES:!1,ENABLE_RELAY_RESOLVERS:!1,ENABLE_GETFRAGMENTIDENTIFIER_OPTIMIZATION:!1,ENABLE_FRIENDLY_QUERY_NAME_GQL_URL:!1,ENABLE_STORE_SUBSCRIPTIONS_REFACTOR:!1,ENABLE_LOAD_QUERY_REQUEST_DEDUPING:!0,ENABLE_DO_NOT_WRAP_LIVE_QUERY:!1,ENABLE_NOTIFY_SUBSCRIPTION:!1,ENABLE_UNIQUE_SUBSCRIPTION_ROOT:!1,ENABLE_BATCHED_STORE_UPDATES:!1}},1241:e=>{"use strict";var t={},n={stop:function(){}},r={profile:function(e,r){var i=t[e];if(i&&i.length>0){for(var a=[],o=i.length-1;o>=0;o--){var s=i[o](e,r);a.unshift(s)}return{stop:function(e){a.forEach((function(t){return t(e)}))}}}return n},attachProfileHandler:function(e,n){t.hasOwnProperty(e)||(t[e]=[]),t[e].push(n)},detachProfileHandler:function(e,n){var r,i,a;t.hasOwnProperty(e)&&(i=n,-1!==(a=(r=t[e]).indexOf(i))&&r.splice(a,1))}};e.exports=r},9480:(e,t,n)=>{"use strict";var r=n(5847)(n(8557)),i=n(5060),a=n(1143),o=function(){function e(){var e=this;(0,r.default)(this,"_complete",!1),(0,r.default)(this,"_events",[]),(0,r.default)(this,"_sinks",new Set),(0,r.default)(this,"_subscription",null),this._observable=i.create((function(t){e._sinks.add(t);for(var n=e._events,r=0;r<n.length&&!t.closed;r++){var i=n[r];switch(i.kind){case"complete":t.complete();break;case"error":t.error(i.error);break;case"next":t.next(i.data);break;default:i.kind,a(!1)}}return function(){e._sinks.delete(t)}}))}var t=e.prototype;return t.complete=function(){!0!==this._complete&&(this._complete=!0,this._events.push({kind:"complete"}),this._sinks.forEach((function(e){return e.complete()})))},t.error=function(e){!0!==this._complete&&(this._complete=!0,this._events.push({kind:"error",error:e}),this._sinks.forEach((function(t){return t.error(e)})))},t.next=function(e){!0!==this._complete&&(this._events.push({kind:"next",data:e}),this._sinks.forEach((function(t){return t.next(e)})))},t.subscribe=function(e){return this._subscription=this._observable.subscribe(e),this._subscription},t.unsubscribe=function(){this._subscription&&(this._subscription.unsubscribe(),this._subscription=null)},t.getObserverCount=function(){return this._sinks.size},e}();e.exports=o},8958:(e,t,n)=>{"use strict";var r=n(5847)(n(9471)),i=n(1380),a=i.getModuleComponentKey,o=i.getModuleOperationKey;e.exports=function(e,t,n,i){var s=(0,r.default)({},i);return s[a(e)]=n,s[o(e)]=t,s}},2232:e=>{"use strict";e.exports=function e(t){return Object.freeze(t),Object.getOwnPropertyNames(t).forEach((function(n){var r=t[n];r&&"object"==typeof r&&!Object.isFrozen(r)&&e(r)})),t}},7579:e=>{"use strict";var t=1e5;e.exports=function(){return t++}},6956:(e,t,n)=>{"use strict";var r=n(1230),i=n(9589),a=n(1411),o=n(1447),s=o.getDataIDsFromFragment,l=o.getVariablesFromFragment,u=o.getSelector;e.exports=function(e,t){var n,o=u(e,t),c=null==o?"null":"SingularReaderSelector"===o.kind?o.owner.identifier:"["+o.selectors.map((function(e){return e.owner.identifier})).join(",")+"]",f=l(e,t),d=s(e,t);return r.ENABLE_GETFRAGMENTIDENTIFIER_OPTIMIZATION?c+"/"+e.name+"/"+(null==f||i(f)?"{}":JSON.stringify(a(f)))+"/"+(void 0===d?"missing":null==d?"null":Array.isArray(d)?"["+d.join(",")+"]":d):c+"/"+e.name+"/"+JSON.stringify(a(f))+"/"+(null!==(n=JSON.stringify(d))&&void 0!==n?n:"missing")}},2576:(e,t,n)=>{"use strict";var r=n(132),i=r.REQUEST,a=r.SPLIT_OPERATION;e.exports=function(e){switch(e.kind){case i:return e.operation;case a:default:return e}}},1126:(e,t,n)=>{"use strict";var r=n(1143),i=n(9558).DEFAULT_HANDLE_KEY;e.exports=function(e,t,n){return t&&t!==i?"__".concat(t,"_").concat(e):(null==n&&r(!1),"__".concat(n,"_").concat(e))}},676:(e,t,n)=>{"use strict";var r=n(1143),i=n(1411);e.exports=function(e,t){var n=null!=e.cacheID?e.cacheID:e.id;return null==n&&r(!1),n+JSON.stringify(i(t))}},9589:e=>{"use strict";var t=Object.prototype.hasOwnProperty;e.exports=function(e){for(var n in e)if(t.call(e,n))return!1;return!0}},7188:e=>{"use strict";e.exports=function(e){return!!e&&"function"==typeof e.then}},7669:e=>{"use strict";e.exports=function(e,t){return e===t&&(null===e||"object"!=typeof e)}},5578:e=>{"use strict";var t="undefined"!=typeof WeakSet,n="undefined"!=typeof WeakMap;e.exports=function e(r,i){if(r===i||"object"!=typeof r||r instanceof Set||r instanceof Map||t&&r instanceof WeakSet||n&&r instanceof WeakMap||!r||"object"!=typeof i||i instanceof Set||i instanceof Map||t&&i instanceof WeakSet||n&&i instanceof WeakMap||!i)return i;var a=!1,o=Array.isArray(r)?r:null,s=Array.isArray(i)?i:null;if(o&&s)a=s.reduce((function(t,n,r){var i=e(o[r],n);return i!==s[r]&&(s[r]=i),t&&i===o[r]}),!0)&&o.length===s.length;else if(!o&&!s){var l=r,u=i,c=Object.keys(l),f=Object.keys(u);a=f.reduce((function(t,n){var r=e(l[n],u[n]);return r!==u[n]&&(u[n]=r),t&&r===l[n]}),!0)&&c.length===f.length}return a?r:i}},8154:e=>{"use strict";e.exports=function(e,t){switch(t.action){case"THROW":var n=t.field,r=n.path,i=n.owner;throw e.requiredFieldLogger({kind:"missing_field.throw",owner:i,fieldPath:r}),new Error("Relay: Missing @required value at path '".concat(r,"' in '").concat(i,"'."));case"LOG":t.fields.forEach((function(t){var n=t.path,r=t.owner;e.requiredFieldLogger({kind:"missing_field.log",owner:r,fieldPath:n})}));break;default:t.action}}},9468:e=>{"use strict";var t=Promise.resolve();function n(e){setTimeout((function(){throw e}),0)}e.exports=function(e){t.then(e).catch(n)}},1411:e=>{"use strict";e.exports=function e(t){if(!t||"object"!=typeof t)return t;if(Array.isArray(t))return t.map(e);for(var n=Object.keys(t).sort(),r={},i=0;i<n.length;i++)r[n[i]]=e(t[n[i]]);return r}},2591:e=>{e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r},e.exports.default=e.exports,e.exports.__esModule=!0},2982:(e,t,n)=>{var r=n(2591);e.exports=function(e){if(Array.isArray(e))return r(e)},e.exports.default=e.exports,e.exports.__esModule=!0},1735:(e,t,n)=>{var r=n(5625);e.exports=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=r(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0,a=function(){};return{s:a,n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){l=!0,o=e},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw o}}}},e.exports.default=e.exports,e.exports.__esModule=!0},8557:e=>{e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},e.exports.default=e.exports,e.exports.__esModule=!0},5847:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.default=e.exports,e.exports.__esModule=!0},8225:e=>{e.exports=function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)},e.exports.default=e.exports,e.exports.__esModule=!0},8135:e=>{e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.default=e.exports,e.exports.__esModule=!0},9471:(e,t,n)=>{var r=n(8557);function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}e.exports=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e},e.exports.default=e.exports,e.exports.__esModule=!0},9381:(e,t,n)=>{var r=n(2982),i=n(8225),a=n(5625),o=n(8135);e.exports=function(e){return r(e)||i(e)||a(e)||o()},e.exports.default=e.exports,e.exports.__esModule=!0},5625:(e,t,n)=>{var r=n(2591);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}},e.exports.default=e.exports,e.exports.__esModule=!0},53:(e,t)=>{"use strict";var n,r,i,a;if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,f=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},i=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,_=null,g=-1,m=5,y=0;t.unstable_shouldYield=function(){return t.unstable_now()>=y},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):m=0<e?Math.floor(1e3/e):5};var b=new MessageChannel,E=b.port2;b.port1.onmessage=function(){if(null!==_){var e=t.unstable_now();y=e+m;try{_(!0,e)?E.postMessage(null):(v=!1,_=null)}catch(e){throw E.postMessage(null),e}}else v=!1},n=function(e){_=e,v||(v=!0,E.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},i=function(){p(g),g=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<w(i,t)))break e;e[r]=t,e[n]=i,n=r}}function k(e){return void 0===(e=e[0])?null:e}function R(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var a=2*(r+1)-1,o=e[a],s=a+1,l=e[s];if(void 0!==o&&0>w(o,n))void 0!==l&&0>w(l,o)?(e[r]=l,e[s]=n,r=s):(e[r]=o,e[a]=n,r=a);else{if(!(void 0!==l&&0>w(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function w(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var I=[],C=[],P=1,D=null,x=3,O=!1,T=!1,N=!1;function F(e){for(var t=k(C);null!==t;){if(null===t.callback)R(C);else{if(!(t.startTime<=e))break;R(C),t.sortIndex=t.expirationTime,S(I,t)}t=k(C)}}function A(e){if(N=!1,F(e),!T)if(null!==k(I))T=!0,n(L);else{var t=k(C);null!==t&&r(A,t.startTime-e)}}function L(e,n){T=!1,N&&(N=!1,i()),O=!0;var a=x;try{for(F(n),D=k(I);null!==D&&(!(D.expirationTime>n)||e&&!t.unstable_shouldYield());){var o=D.callback;if("function"==typeof o){D.callback=null,x=D.priorityLevel;var s=o(D.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?D.callback=s:D===k(I)&&R(I),F(n)}else R(I);D=k(I)}if(null!==D)var l=!0;else{var u=k(C);null!==u&&r(A,u.startTime-n),l=!1}return l}finally{D=null,x=a,O=!1}}var M=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){T||O||(T=!0,n(L))},t.unstable_getCurrentPriorityLevel=function(){return x},t.unstable_getFirstCallbackNode=function(){return k(I)},t.unstable_next=function(e){switch(x){case 1:case 2:case 3:var t=3;break;default:t=x}var n=x;x=t;try{return e()}finally{x=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=M,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=x;x=e;try{return t()}finally{x=n}},t.unstable_scheduleCallback=function(e,a,o){var s=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?s+o:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:P++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>s?(e.sortIndex=o,S(C,e),null===k(I)&&e===k(C)&&(N?i():N=!0,r(A,o-s))):(e.sortIndex=l,S(I,e),T||O||(T=!0,n(L))),e},t.unstable_wrapCallback=function(e){var t=x;return function(){var n=x;x=t;try{return e.apply(this,arguments)}finally{x=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=n(7294),t=n(3935),r=n(2578),i=n(4311);const a=new i.Environment({network:i.Network.create(((e,t)=>(async(e,t)=>{try{const n=await fetch("http://localhost:3000/graphql",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:e,variables:t})});return await n.json()}catch(e){return console.warn(e),null}})(e.text,t))),store:new i.Store(new i.RecordSource)});function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,o(e,t)}var l=n(5697),u=n.n(l);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function f(e){return"/"===e.charAt(0)}function d(e,t){for(var n=t,r=n+1,i=e.length;r<i;n+=1,r+=1)e[n]=e[r];e.pop()}const p=function(e,t){if(!e)throw new Error("Invariant failed")};function h(e){return"/"===e.charAt(0)?e:"/"+e}function v(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function _(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function g(e){var t=e.pathname,n=e.search,r=e.hash,i=t||"/";return n&&"?"!==n&&(i+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(i+="#"===r.charAt(0)?r:"#"+r),i}function m(e,t,n,r){var i;"string"==typeof e?(i=function(e){var t=e||"/",n="",r="",i=t.indexOf("#");-1!==i&&(r=t.substr(i),t=t.substr(0,i));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(i=c({},e)).pathname&&(i.pathname=""),i.search?"?"!==i.search.charAt(0)&&(i.search="?"+i.search):i.search="",i.hash?"#"!==i.hash.charAt(0)&&(i.hash="#"+i.hash):i.hash="",void 0!==t&&void 0===i.state&&(i.state=t));try{i.pathname=decodeURI(i.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+i.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(i.key=n),r?i.pathname?"/"!==i.pathname.charAt(0)&&(i.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],i=t&&t.split("/")||[],a=e&&f(e),o=t&&f(t),s=a||o;if(e&&f(e)?i=r:r.length&&(i.pop(),i=i.concat(r)),!i.length)return"/";if(i.length){var l=i[i.length-1];n="."===l||".."===l||""===l}else n=!1;for(var u=0,c=i.length;c>=0;c--){var p=i[c];"."===p?d(i,c):".."===p?(d(i,c),u++):u&&(d(i,c),u--)}if(!s)for(;u--;u)i.unshift("..");!s||""===i[0]||i[0]&&f(i[0])||i.unshift("");var h=i.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h}(i.pathname,r.pathname)):i.pathname=r.pathname:i.pathname||(i.pathname="/"),i}function y(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,i){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,i):i(!0):i(!1!==a)}else i(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var b=!("undefined"==typeof window||!window.document||!window.document.createElement);function E(e,t){t(window.confirm(e))}var S="popstate",k="hashchange";function R(){try{return window.history.state||{}}catch(e){return{}}}function w(e){void 0===e&&(e={}),b||p(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,o=a.forceRefresh,s=void 0!==o&&o,l=a.getUserConfirmation,u=void 0===l?E:l,f=a.keyLength,d=void 0===f?6:f,w=e.basename?_(h(e.basename)):"";function I(e){var t=e||{},n=t.key,r=t.state,i=window.location,a=i.pathname+i.search+i.hash;return w&&(a=v(a,w)),m(a,r,n)}function C(){return Math.random().toString(36).substr(2,d)}var P=y();function D(e){c(j,e),j.length=n.length,P.notifyListeners(j.location,j.action)}function x(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||N(I(e.state))}function O(){N(I(R()))}var T=!1;function N(e){T?(T=!1,D()):P.confirmTransitionTo(e,"POP",u,(function(t){t?D({action:"POP",location:e}):function(e){var t=j.location,n=A.indexOf(t.key);-1===n&&(n=0);var r=A.indexOf(e.key);-1===r&&(r=0);var i=n-r;i&&(T=!0,M(i))}(e)}))}var F=I(R()),A=[F.key];function L(e){return w+g(e)}function M(e){n.go(e)}var U=0;function q(e){1===(U+=e)&&1===e?(window.addEventListener(S,x),i&&window.addEventListener(k,O)):0===U&&(window.removeEventListener(S,x),i&&window.removeEventListener(k,O))}var z=!1,j={length:n.length,action:"POP",location:F,createHref:L,push:function(e,t){var i="PUSH",a=m(e,t,C(),j.location);P.confirmTransitionTo(a,i,u,(function(e){if(e){var t=L(a),o=a.key,l=a.state;if(r)if(n.pushState({key:o,state:l},null,t),s)window.location.href=t;else{var u=A.indexOf(j.location.key),c=A.slice(0,u+1);c.push(a.key),A=c,D({action:i,location:a})}else window.location.href=t}}))},replace:function(e,t){var i="REPLACE",a=m(e,t,C(),j.location);P.confirmTransitionTo(a,i,u,(function(e){if(e){var t=L(a),o=a.key,l=a.state;if(r)if(n.replaceState({key:o,state:l},null,t),s)window.location.replace(t);else{var u=A.indexOf(j.location.key);-1!==u&&(A[u]=a.key),D({action:i,location:a})}else window.location.replace(t)}}))},go:M,goBack:function(){M(-1)},goForward:function(){M(1)},block:function(e){void 0===e&&(e=!1);var t=P.setPrompt(e);return z||(q(1),z=!0),function(){return z&&(z=!1,q(-1)),t()}},listen:function(e){var t=P.appendListener(e);return q(1),function(){q(-1),t()}}};return j}var I=1073741823,C="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function P(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const D=e.createContext||function(t,n){var r,i,a,o="__create-react-context-"+((C[a="__global_unique_id__"]=(C[a]||0)+1)+"__"),l=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=P(t.props.value),t}s(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[o]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,i=e.value;((a=r)===(o=i)?0!==a||1/a==1/o:a!=a&&o!=o)?t=0:(t="function"==typeof n?n(r,i):I,0!=(t|=0)&&this.emitter.set(e.value,t))}var a,o},r.render=function(){return this.props.children},t}(e.Component);l.childContextTypes=((r={})[o]=u().object.isRequired,r);var c=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,n){0!=((0|t.observedBits)&n)&&t.setState({value:t.getValue()})},t}s(n,e);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?I:t},r.componentDidMount=function(){this.context[o]&&this.context[o].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?I:e},r.componentWillUnmount=function(){this.context[o]&&this.context[o].off(this.onUpdate)},r.getValue=function(){return this.context[o]?this.context[o].get():t},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(e.Component);return c.contextTypes=((i={})[o]=u().object,i),{Provider:l,Consumer:c}};var x=n(9658),O=n.n(x);function T(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}n(9864),n(8679);var N=function(e){var t=D();return t.displayName="Router-History",t}(),F=function(e){var t=D();return t.displayName="Router",t}(),A=function(t){function n(e){var n;return(n=t.call(this,e)||this).state={location:e.history.location},n._isMounted=!1,n._pendingLocation=null,e.staticContext||(n.unlisten=e.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}s(n,t),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=n.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&this.unlisten()},r.render=function(){return e.createElement(F.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(N.Provider,{children:this.props.children||null,value:this.props.history}))},n}(e.Component);e.Component,e.Component;var L={},M=0;function U(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,i=n.exact,a=void 0!==i&&i,o=n.strict,s=void 0!==o&&o,l=n.sensitive,u=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=L[n]||(L[n]={});if(r[e])return r[e];var i=[],a={regexp:O()(e,i,t),keys:i};return M<1e4&&(r[e]=a,M++),a}(n,{end:a,strict:s,sensitive:u}),i=r.regexp,o=r.keys,l=i.exec(e);if(!l)return null;var c=l[0],f=l.slice(1),d=e===c;return a&&!d?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:d,params:o.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var q=function(t){function n(){return t.apply(this,arguments)||this}return s(n,t),n.prototype.render=function(){var t=this;return e.createElement(F.Consumer,null,(function(n){n||p(!1);var r=t.props.location||n.location,i=c({},n,{location:r,match:t.props.computedMatch?t.props.computedMatch:t.props.path?U(r.pathname,t.props):n.match}),a=t.props,o=a.children,s=a.component,l=a.render;return Array.isArray(o)&&0===o.length&&(o=null),e.createElement(F.Provider,{value:i},i.match?o?"function"==typeof o?o(i):o:s?e.createElement(s,i):l?l(i):null:"function"==typeof o?o(i):null)}))},n}(e.Component);e.Component;var z=function(t){function n(){return t.apply(this,arguments)||this}return s(n,t),n.prototype.render=function(){var t=this;return e.createElement(F.Consumer,null,(function(n){n||p(!1);var r,i,a=t.props.location||n.location;return e.Children.forEach(t.props.children,(function(t){if(null==i&&e.isValidElement(t)){r=t;var o=t.props.path||t.props.from;i=o?U(a.pathname,c({},t.props,{path:o})):n.match}})),i?e.cloneElement(r,{location:a,computedMatch:i}):null}))},n}(e.Component),j=e.useContext;var V=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(e=t.call.apply(t,[this].concat(r))||this).history=w(e.props),e}return s(n,t),n.prototype.render=function(){return e.createElement(A,{history:this.history,children:this.props.children})},n}(e.Component);e.Component;var Q=function(e,t){return"function"==typeof e?e(t):e},K=function(e,t){return"string"==typeof e?m(e,null,null,t):e},B=function(e){return e},H=e.forwardRef;void 0===H&&(H=B);var W=H((function(t,n){var r=t.innerRef,i=t.navigate,a=t.onClick,o=T(t,["innerRef","navigate","onClick"]),s=o.target,l=c({},o,{onClick:function(e){try{a&&a(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||s&&"_self"!==s||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),i())}});return l.ref=B!==H&&n||r,e.createElement("a",l)})),Y=H((function(t,n){var r=t.component,i=void 0===r?W:r,a=t.replace,o=t.to,s=t.innerRef,l=T(t,["component","replace","to","innerRef"]);return e.createElement(F.Consumer,null,(function(t){t||p(!1);var r=t.history,u=K(Q(o,t.location),t.location),f=u?r.createHref(u):"",d=c({},l,{href:f,navigate:function(){var e=Q(o,t.location);(a?r.replace:r.push)(e)}});return B!==H?d.ref=n||s:d.innerRef=s,e.createElement(i,d)}))})),G=function(e){return e},$=e.forwardRef;void 0===$&&($=G),$((function(t,n){var r=t["aria-current"],i=void 0===r?"page":r,a=t.activeClassName,o=void 0===a?"active":a,s=t.activeStyle,l=t.className,u=t.exact,f=t.isActive,d=t.location,h=t.sensitive,v=t.strict,_=t.style,g=t.to,m=t.innerRef,y=T(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(F.Consumer,null,(function(t){t||p(!1);var r=d||t.location,a=K(Q(g,r),r),b=a.pathname,E=b&&b.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),S=E?U(r.pathname,{path:E,exact:u,sensitive:h,strict:v}):null,k=!!(f?f(S,r):S),R=k?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(l,o):l,w=k?c({},_,{},s):_,I=c({"aria-current":k&&i||null,className:R,style:w,to:a},y);return G!==$?I.ref=n||m:I.innerRef=m,e.createElement(Y,I)}))}));const X="MISSING_ENV_VAR".APP_DOMAIN||"https://gyim1230.github.io/testcicd/",J=X,Z=()=>{const t=`https://github.com/login/oauth/authorize?client_id=${"MISSING_ENV_VAR".GITHUB_OAUTH_CLIENT_ID}&redirect_uri=${X}/oauth`;return e.createElement("a",{href:t,onClick:e=>{e.preventDefault(),window.open(t)}},"Login")},ee=()=>((0,e.useEffect)((()=>{const e=e=>{if(e.origin!==J)return;const{accessToken:t}=e.data;t&&localStorage.setItem("accessToken",t)};return window.addEventListener("message",e,!1),()=>window.removeEventListener("message",e,!1)}),[]),e.createElement(Z,null));var te;const ne=({accessToken:t})=>((0,e.useEffect)((()=>{var e;null===(e=window.opener)||void 0===e||e.postMessage({accessToken:t},J),window.close()}),[]),null),re=()=>{const{search:t}=j(F).location,i=new URLSearchParams(t).get("code")||"";return e.createElement(r.QueryRenderer,{environment:a,query:void 0!==te?te:te=n(6692),variables:{code:i},render:({error:t,props:n})=>{if(t)return"로그인에 실패했습니다.";if(!n)return"로그인을 하는 중입니다...";const{accessToken:r}=n.login;return e.createElement(ne,{accessToken:r})}})};var ie;const ae=(0,r.createFragmentContainer)((({question:t})=>e.createElement("section",null,e.createElement("h2",null,"문제 #",t.id),e.createElement("p",null,"제목:",t.title),e.createElement("p",null,"내용:",t.content))),{question:void 0!==ie?ie:ie=n(4653)});var oe;const se=(ce=()=>e.createElement(r.QueryRenderer,{environment:a,query:void 0!==oe?oe:oe=n(8071),variables:{},render:({error:t,props:n})=>n?t?e.createElement("div",null,"...에러발생"):e.createElement("div",null,n.allQuestions.map((t=>e.createElement(ae,{question:t})))):e.createElement("div",null,"...로딩중")}),()=>(console.log("example HOC called"),e.createElement(ce,null))),le=()=>e.createElement(V,null,e.createElement(z,null,e.createElement(q,{exact:!0,path:"/",component:se}),e.createElement(q,{path:"/login",component:ee}),e.createElement(q,{path:"/oauth",component:re}))),ue=document.querySelector("#root");var ce;t.render(e.createElement(r.RelayEnvironmentProvider,{environment:a},e.createElement(le,null)),ue)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vc3JjL19fZ2VuZXJhdGVkX18vRXhhbXBsZVBhZ2VRdWVyeS5ncmFwaHFsLnRzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9zcmMvX19nZW5lcmF0ZWRfXy9Mb2dpbkNhbGxiYWNrUGFnZVF1ZXJ5LmdyYXBocWwudHMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL3NyYy9fX2dlbmVyYXRlZF9fL1F1ZXN0aW9uX3F1ZXN0aW9uLmdyYXBocWwudHMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9hcmVFcXVhbC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi93YXJuaW5nLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9SZWFjdFJlbGF5Q29udGV4dC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2luZGV4LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL1JlYWN0UmVsYXlDb250YWluZXJVdGlscy5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9SZWFjdFJlbGF5Q29udGV4dC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9SZWFjdFJlbGF5RnJhZ21lbnRDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvUmVhY3RSZWxheUxvY2FsUXVlcnlSZW5kZXJlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9SZWFjdFJlbGF5UGFnaW5hdGlvbkNvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9SZWFjdFJlbGF5UXVlcnlGZXRjaGVyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL1JlYWN0UmVsYXlRdWVyeVJlbmRlcmVyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL1JlYWN0UmVsYXlRdWVyeVJlbmRlcmVyQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9SZWFjdFJlbGF5UmVmZXRjaENvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9SZWxheUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvYXNzZXJ0RnJhZ21lbnRNYXAuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvYnVpbGRSZWFjdFJlbGF5Q29udGFpbmVyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL2dldFJvb3RWYXJpYWJsZXNGb3JGcmFnbWVudHMuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvaXNSZWxheUVudmlyb25tZW50LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlYWRDb250ZXh0LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL0VudHJ5UG9pbnRDb250YWluZXIucmVhY3QuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvRnJhZ21lbnRSZXNvdXJjZS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy9MUlVDYWNoZS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy9Qcm9maWxlckNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvUXVlcnlSZXNvdXJjZS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy9SZWxheUVudmlyb25tZW50UHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvZ2V0UGFnaW5hdGlvbk1ldGFkYXRhLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL2dldFBhZ2luYXRpb25WYXJpYWJsZXMuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvZ2V0UmVmZXRjaE1ldGFkYXRhLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL2dldFZhbHVlQXRQYXRoLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL2xvYWRFbnRyeVBvaW50LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL2xvYWRRdWVyeS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy91c2VFbnRyeVBvaW50TG9hZGVyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZUZldGNoVHJhY2tpbmdSZWYuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvdXNlRnJhZ21lbnQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvdXNlRnJhZ21lbnROb2RlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZUlzTW91bnRlZFJlZi5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy91c2VJc09wZXJhdGlvbk5vZGVBY3RpdmUuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvdXNlTGF6eUxvYWRRdWVyeS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy91c2VMYXp5TG9hZFF1ZXJ5Tm9kZS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy91c2VMb2FkTW9yZUZ1bmN0aW9uLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZU1lbW9PcGVyYXRpb25EZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZU1lbW9WYXJpYWJsZXMuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvdXNlTXV0YXRpb24uanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvdXNlUGFnaW5hdGlvbkZyYWdtZW50LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZVByZWxvYWRlZFF1ZXJ5LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZVF1ZXJ5TG9hZGVyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZVJlZmV0Y2hhYmxlRnJhZ21lbnQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvdXNlUmVmZXRjaGFibGVGcmFnbWVudE5vZGUuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvdXNlUmVsYXlFbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy91c2VTdGF0aWNGcmFnbWVudE5vZGVXYXJuaW5nLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZVN1YnNjcmliZVRvSW52YWxpZGF0aW9uU3RhdGUuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvdXNlU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL2hhbmRsZXJzL1JlbGF5RGVmYXVsdEhhbmRsZXJQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL2hhbmRsZXJzL2Nvbm5lY3Rpb24vQ29ubmVjdGlvbkhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9oYW5kbGVycy9jb25uZWN0aW9uL0Nvbm5lY3Rpb25JbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9oYW5kbGVycy9jb25uZWN0aW9uL011dGF0aW9uSGFuZGxlcnMuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL211dGF0aW9ucy9SZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWcuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9tdXRhdGlvbnMvUmVsYXlSZWNvcmRQcm94eS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL211dGF0aW9ucy9SZWxheVJlY29yZFNvdXJjZU11dGF0b3IuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9tdXRhdGlvbnMvUmVsYXlSZWNvcmRTb3VyY2VQcm94eS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL211dGF0aW9ucy9SZWxheVJlY29yZFNvdXJjZVNlbGVjdG9yUHJveHkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9tdXRhdGlvbnMvYXBwbHlPcHRpbWlzdGljTXV0YXRpb24uanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9tdXRhdGlvbnMvY29tbWl0TG9jYWxVcGRhdGUuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9tdXRhdGlvbnMvY29tbWl0TXV0YXRpb24uanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9tdXRhdGlvbnMvdmFsaWRhdGVNdXRhdGlvbi5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL25ldHdvcmsvQ29udmVydFRvRXhlY3V0ZUZ1bmN0aW9uLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvbmV0d29yay9SZWxheU5ldHdvcmsuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9uZXR3b3JrL1JlbGF5T2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL25ldHdvcmsvUmVsYXlRdWVyeVJlc3BvbnNlQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9xdWVyeS9HcmFwaFFMVGFnLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvcXVlcnkvUHJlbG9hZGFibGVRdWVyeVJlZ2lzdHJ5LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvcXVlcnkvZmV0Y2hRdWVyeS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3F1ZXJ5L2ZldGNoUXVlcnlJbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3F1ZXJ5L2ZldGNoUXVlcnlfREVQUkVDQVRFRC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL0NsaWVudElELmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvRGF0YUNoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9PcGVyYXRpb25FeGVjdXRvci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1JlbGF5Q29uY3JldGVWYXJpYWJsZXMuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheU1vZGVybkVudmlyb25tZW50LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvUmVsYXlNb2Rlcm5GcmFnbWVudFNwZWNSZXNvbHZlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1JlbGF5TW9kZXJuT3BlcmF0aW9uRGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1JlbGF5TW9kZXJuUmVjb3JkLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvUmVsYXlNb2Rlcm5TZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1JlbGF5TW9kZXJuU3RvcmUuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheU9wZXJhdGlvblRyYWNrZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheU9wdGltaXN0aWNSZWNvcmRTb3VyY2UuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheVB1Ymxpc2hRdWV1ZS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1JlbGF5UmVhZGVyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvUmVsYXlSZWNvcmRTb3VyY2UuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheVJlY29yZFNvdXJjZU1hcEltcGwuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheVJlY29yZFN0YXRlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvUmVsYXlSZWZlcmVuY2VNYXJrZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheVJlc3BvbnNlTm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1JlbGF5U3RvcmVSZWFjdEZsaWdodFV0aWxzLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnMuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheVN0b3JlU3Vic2NyaXB0aW9uc1VzaW5nTWFwQnlJRC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1JlbGF5U3RvcmVVdGlscy5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1Jlc29sdmVyRnJhZ21lbnRzLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvVHlwZUlELmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvVmlld2VyUGF0dGVybi5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL2Nsb25lUmVsYXlIYW5kbGVTb3VyY2VGaWVsZC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL2Nsb25lUmVsYXlTY2FsYXJIYW5kbGVTb3VyY2VGaWVsZC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL2NyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvY3JlYXRlUmVsYXlDb250ZXh0LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvZGVmYXVsdEdldERhdGFJRC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL2RlZmF1bHRSZXF1aXJlZEZpZWxkTG9nZ2VyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvaGFzT3ZlcmxhcHBpbmdJRHMuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9pc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9yZWFkSW5saW5lRGF0YS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N1YnNjcmlwdGlvbi9yZXF1ZXN0U3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvdXRpbC9SZWxheUNvbmNyZXRlTm9kZS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvUmVsYXlEZWZhdWx0SGFuZGxlS2V5LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvdXRpbC9SZWxheUVycm9yLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvdXRpbC9SZWxheUZlYXR1cmVGbGFncy5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvUmVsYXlQcm9maWxlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvUmVsYXlSZXBsYXlTdWJqZWN0LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvdXRpbC9jcmVhdGVQYXlsb2FkRm9yM0RGaWVsZC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvZGVlcEZyZWV6ZS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvZ2VuZXJhdGVJRC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvZ2V0RnJhZ21lbnRJZGVudGlmaWVyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvdXRpbC9nZXRPcGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi91dGlsL2dldFJlbGF5SGFuZGxlS2V5LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvdXRpbC9nZXRSZXF1ZXN0SWRlbnRpZmllci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvaXNFbXB0eU9iamVjdC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvaXNQcm9taXNlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvdXRpbC9pc1NjYWxhckFuZEVxdWFsLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvdXRpbC9yZWN5Y2xlTm9kZXNJbnRvLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvdXRpbC9yZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHMuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi91dGlsL3Jlc29sdmVJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi91dGlsL3N0YWJsZUNvcHkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Rldi1hbnN3ZXIvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2Rldi1hbnN3ZXIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL3NyYy9ncmFwaHFsL2luZGV4LnRzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXNtL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lc20vcmVhY3Qtcm91dGVyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vc3JjL2NvbnN0YW50cy9kb21haW4udHMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL3NyYy9jb21wb25lbnRzL0xvZ2luL0dpdEh1Yk9BdXRoQW5jaG9yLnRzeCIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vc3JjL3BhZ2UvTG9naW5QYWdlLnRzeCIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vc3JjL3BhZ2UvTG9naW5DYWxsYmFja1BhZ2UudHN4Iiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9zcmMvY29tcG9uZW50cy9FeGFtcGxlL1F1ZXN0aW9uLnRzeCIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vc3JjL3BhZ2UvRXhhbXBsZVBhZ2UudHN4Iiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9zcmMvaG9jcy93aXRoRXhhbXBsZS50c3giLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL3NyYy9BcHAudHN4Iiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9zcmMvaW5kZXgudHN4Il0sIm5hbWVzIjpbIm5vZGUiLCJ2MCIsImhhc2giLCJ2MSIsImFTdGFja1Bvb2wiLCJiU3RhY2tQb29sIiwiZXEiLCJhIiwiYiIsImFTdGFjayIsImJTdGFjayIsIm9ialRvU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjbGFzc05hbWUiLCJjYWxsIiwiU3RyaW5nIiwiaXNOYU4iLCJOdW1iZXIiLCJzb3VyY2UiLCJnbG9iYWwiLCJtdWx0aWxpbmUiLCJpZ25vcmVDYXNlIiwibGVuZ3RoIiwicHVzaCIsInNpemUiLCJjb25zdHJ1Y3RvciIsImhhc093blByb3BlcnR5IiwidmFsdWVPZiIsImtleXMiLCJpIiwicG9wIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlc3VsdCIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwiYXJnIiwiZW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50Iiwid2FybmluZyIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwidHlwZSIsIktOT1dOX1NUQVRJQ1MiLCJuYW1lIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJndW1lbnRzIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImNvbmNhdCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwia2V5IiwiZGVzY3JpcHRvciIsImUiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJjIiwiZCIsImYiLCJlcnJvciIsInVuZGVmaW5lZCIsIkVycm9yIiwiYXJncyIsImFyZ0luZGV4IiwicmVwbGFjZSIsImZyYW1lc1RvUG9wIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJUeXBlRXJyb3IiLCJhc3NpZ24iLCJ0ZXN0MSIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwibWFwIiwibiIsImpvaW4iLCJ0ZXN0MyIsInNwbGl0IiwiZm9yRWFjaCIsImxldHRlciIsImVyciIsInNob3VsZFVzZU5hdGl2ZSIsInRhcmdldCIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJzIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJmdW5jIiwibnVtYmVyIiwib2JqZWN0Iiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnQiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJtIiwiciIsInkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJiYSIsIlNldCIsImNhIiwiZGEiLCJlYSIsImFkZCIsImZhIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaGEiLCJpYSIsImphIiwia2EiLCJCIiwiZyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwiRCIsInRvTG93ZXJDYXNlIiwib2EiLCJwYSIsInRvVXBwZXJDYXNlIiwicWEiLCJzbGljZSIsIm1hIiwibmEiLCJ0ZXN0IiwibGEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInJhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJzYSIsInRhIiwidWEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiU3ltYm9sIiwiZm9yIiwiRSIsIk1hIiwiS2EiLCJpdGVyYXRvciIsIkxhIiwiTmEiLCJzdGFjayIsInRyaW0iLCJtYXRjaCIsIk9hIiwiUGEiLCJwcmVwYXJlU3RhY2tUcmFjZSIsInNldCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJrIiwiaCIsIlFhIiwidGFnIiwiX3JlbmRlciIsIlJhIiwiJCR0eXBlb2YiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJTYSIsIlRhIiwibm9kZU5hbWUiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwidmFsdWUiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIiRhIiwiYWIiLCJiYiIsImNiIiwib3duZXJEb2N1bWVudCIsImViIiwiY2hpbGRyZW4iLCJDaGlsZHJlbiIsImRiIiwiZmIiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoYiIsIkFycmF5IiwiaXNBcnJheSIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJwYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicWIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInJiIiwic2IiLCJ0YiIsInN0eWxlIiwiaW5kZXhPZiIsInNldFByb3BlcnR5IiwiY2hhckF0Iiwic3Vic3RyaW5nIiwidWIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ2YiIsIndiIiwiaXMiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJPYiIsIlBiIiwiUWIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlJiIiwibCIsImFwcGx5Iiwib25FcnJvciIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsIlpiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCIkYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiYWMiLCJjYyIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJiYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJNYXAiLCJvYyIsInBjIiwicWMiLCJyYyIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJuYXRpdmVFdmVudCIsInRhcmdldENvbnRhaW5lcnMiLCJzYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsInRjIiwidmMiLCJ3YyIsImxhbmVQcmlvcml0eSIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiaHlkcmF0ZSIsImNvbnRhaW5lckluZm8iLCJ4YyIsInljIiwic2hpZnQiLCJ6YyIsIkFjIiwiQmMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJDYyIsIkRjIiwiRWMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJGYyIsIkdjIiwiSGMiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwidW5zdGFibGVfbm93IiwiRiIsIlJjIiwiVWMiLCJwZW5kaW5nTGFuZXMiLCJleHBpcmVkTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiVmMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiZXZlbnRUaW1lcyIsIk1hdGgiLCJjbHozMiIsImJkIiwiY2QiLCJsb2ciLCJMTjIiLCJkZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJpZCIsImJpbmQiLCJ1YyIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2aWV3IiwiZGV0YWlsIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJKZCIsImNsaXBib2FyZERhdGEiLCJMZCIsImRhdGEiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlJkIiwiY29kZSIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiVGQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJWZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJYZCIsIlpkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwidXJsIiwid2VlayIsIm1lIiwibmUiLCJvZSIsImV2ZW50IiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTmUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiT2UiLCJjb250ZW50RWRpdGFibGUiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImRlZmF1bHRWaWV3IiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJWZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiWWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRyIsIiRlIiwiaGFzIiwiYWYiLCJiZiIsInJhbmRvbSIsImNmIiwiZGYiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIk5iIiwieCIsInciLCJ6IiwidSIsInEiLCJ0IiwidiIsImVmIiwiZmYiLCJwYXJlbnRXaW5kb3ciLCJnZiIsImhmIiwiSiIsIksiLCJRIiwiTCIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsImpmIiwia2YiLCJsZiIsIm1mIiwiYXV0b0ZvY3VzIiwibmYiLCJfX2h0bWwiLCJvZiIsInNldFRpbWVvdXQiLCJwZiIsImNsZWFyVGltZW91dCIsInFmIiwicmYiLCJzZiIsInByZXZpb3VzU2libGluZyIsInRmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJIIiwiSSIsIkNmIiwiTSIsIk4iLCJEZiIsIkVmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJnZXRDaGlsZENvbnRleHQiLCJKZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJRZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiUmYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJTZiIsIlRmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJVZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVmYiLCJXZiIsIlhmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJZZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsIk8iLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJfY3VycmVudFZhbHVlIiwic2ciLCJjaGlsZExhbmVzIiwidGciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsInVnIiwidmciLCJjb250ZXh0Iiwib2JzZXJ2ZWRCaXRzIiwibmV4dCIsInJlc3BvbmRlcnMiLCJ3ZyIsInhnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwieWciLCJ6ZyIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJBZyIsIkJnIiwiQ2ciLCJBIiwicCIsIkMiLCJEZyIsIkVnIiwiRmciLCJDb21wb25lbnQiLCJyZWZzIiwiR2ciLCJLZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkhnIiwiSWciLCJKZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJMZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiTWciLCJzdGF0ZSIsInVwZGF0ZXIiLCJOZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk9nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJQZyIsIlFnIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIlJnIiwiU2ciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiaW5kZXgiLCJUZyIsIlVnIiwibW9kZSIsIlZnIiwiaW1wbGVtZW50YXRpb24iLCJXZyIsIlhnIiwiZG9uZSIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiZmgiLCJnaCIsImhoIiwiUCIsImloIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGVuZGluZ1Byb3BzIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJ2aCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJ3aCIsInhoIiwiUiIsIlMiLCJUIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJiYXNlUXVldWUiLCJxdWV1ZSIsIkloIiwiSmgiLCJLaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsIkxoIiwiTWgiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJtdXRhYmxlUmVhZExhbmVzIiwiTmgiLCJVIiwidXNlU3RhdGUiLCJnZXRTbmFwc2hvdCIsInN1YnNjcmliZSIsInVzZUVmZmVjdCIsInNldFNuYXBzaG90IiwiT2giLCJQaCIsIlFoIiwiUmgiLCJjcmVhdGUiLCJkZXN0cm95IiwiZGVwcyIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlT3BhcXVlSWRlbnRpZmllciIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsInVmIiwiZWkiLCJSZWFjdEN1cnJlbnRPd25lciIsImZpIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJiYXNlTGFuZXMiLCJuaSIsIm9pIiwicGkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJxaSIsInJpIiwicGVuZGluZ0NvbnRleHQiLCJCaSIsIkRpIiwiRWkiLCJzaSIsInJldHJ5TGFuZSIsInRpIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsInVpIiwidW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJBaSIsIkZpIiwiR2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsIlYiLCJIaSIsIklpIiwiVyIsIkppIiwiS2kiLCJMaSIsIk1pIiwibWVzc2FnZSIsIk5pIiwiY29uc29sZSIsIk9pIiwiV2Vha01hcCIsIlBpIiwiUWkiLCJSaSIsIlNpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJUaSIsImNvbXBvbmVudFN0YWNrIiwiVWkiLCJXZWFrU2V0IiwiVmkiLCJXaSIsIlhpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJZaSIsIlppIiwiJGkiLCJmb2N1cyIsImFqIiwiZGlzcGxheSIsImJqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJpaiIsImpqIiwia2oiLCJsaiIsInRoZW4iLCJtaiIsIm5qIiwiY2VpbCIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIkluZmluaXR5Iiwid2oiLCJjayIsIloiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlNjIiwiS2oiLCJMaiIsIk1qIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiY2FsbGJhY2tQcmlvcml0eSIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwiV2oiLCJYaiIsInBpbmdDYWNoZSIsIllqIiwiWmoiLCJ2YSIsImFrIiwiYmsiLCJkayIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZWsiLCJtaW4iLCJleHRlbmQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsIm9uQ29tbWl0RmliZXJSb290IiwiZmsiLCJnayIsImlrIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImprIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImtrIiwibGsiLCJtayIsIm5rIiwib2siLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsInRrIiwiaGFzQXR0cmlidXRlIiwic2siLCJ1ayIsImhrIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJKU09OIiwic3RyaW5naWZ5IiwiZm9ybSIsIlZqIiwidmsiLCJFdmVudHMiLCJ3ayIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInZlcnNpb24iLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwieGsiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInlrIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsImdldENvbXBvbmVudE5hbWUiLCJnZXRDb250YWluZXJOYW1lIiwiUmVhY3QiLCJjcmVhdGVSZWxheUNvbnRleHQiLCJfX2ludGVybmFsIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9vYmplY3RTcHJlYWQyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZDIiLCJfaW5oZXJpdHNMb29zZTIiLCJfZGVmaW5lUHJvcGVydHkyIiwiYXJlRXF1YWwiLCJidWlsZFJlYWN0UmVsYXlDb250YWluZXIiLCJhc3NlcnRSZWxheUNvbnRleHQiLCJfcmVxdWlyZTMiLCJjcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlciIsImdldERhdGFJRHNGcm9tT2JqZWN0IiwiaXNTY2FsYXJBbmRFcXVhbCIsImNyZWF0ZUNvbnRhaW5lcldpdGhGcmFnbWVudHMiLCJmcmFnbWVudHMiLCJfY2xhc3MiLCJfdGVtcCIsImNvbnRhaW5lck5hbWUiLCJfUmVhY3QkQ29tcG9uZW50IiwiX3Byb3BzJF9fcm9vdElzUXVlcnlSIiwiX3RoaXMiLCJyZXNvbHZlckZyb21UaGlzVXBkYXRlIiwicmVzb2x2ZXIiLCJzZXRTdGF0ZSIsInVwZGF0ZWRTdGF0ZSIsInJlc29sdmUiLCJyZWxheVByb3AiLCJnZXRSZWxheVByb3AiLCJlbnZpcm9ubWVudCIsInJlbGF5Q29udGV4dCIsIl9fcmVsYXlDb250ZXh0Iiwicm9vdElzUXVlcnlSZW5kZXJlciIsIl9fcm9vdElzUXVlcnlSZW5kZXJlciIsInByZXZQcm9wcyIsInByZXZQcm9wc0NvbnRleHQiLCJuZXh0UHJvcHMiLCJwcmV2U3RhdGUiLCJfbmV4dFByb3BzJF9fcm9vdElzUXUiLCJwcmV2SURzIiwibmV4dElEcyIsInNldFByb3BzIiwiX3Byb3RvIiwiX3N1YnNjcmliZVRvTmV3UmVzb2x2ZXIiLCJfcmVyZW5kZXJJZlN0b3JlSGFzQ2hhbmdlZCIsImRpc3Bvc2UiLCJuZXh0U3RhdGUiLCJfa2V5IiwiX3RoaXMkc3RhdGUiLCJtYXliZU5ld0RhdGEiLCJzZXRDYWxsYmFjayIsIl9oYW5kbGVGcmFnbWVudERhdGFVcGRhdGUiLCJfdGhpcyRwcm9wcyIsImNvbXBvbmVudFJlZiIsInJlbGF5IiwiY3JlYXRlQ29udGFpbmVyIiwiZnJhZ21lbnRTcGVjIiwiUmVhY3RSZWxheUNvbnRleHQiLCJSZWFjdFJlbGF5UXVlcnlSZW5kZXJlckNvbnRleHQiLCJfcmVxdWlyZSIsImNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IiLCJnZXRSZXF1ZXN0IiwiZGVlcEZyZWV6ZSIsInF1ZXJ5UmVuZGVyZXJDb250ZXh0IiwibGF0ZXN0VmFsdWUiLCJxdWVyeSIsInZhcmlhYmxlcyIsImxhdGVzdFZhcmlhYmxlcyIsIm9wZXJhdGlvbiIsInJlcXVlc3QiLCJkYXRhUmVmIiwiZm9yY2VVcGRhdGUiLCJjbGVhbnVwRm5SZWYiLCJzbmFwc2hvdCIsImNoZWNrIiwicmVzIiwibG9va3VwIiwiZnJhZ21lbnQiLCJyZXRhaW5EaXNwb3NhYmxlIiwicmV0YWluIiwic3Vic2NyaWJlRGlzcG9zYWJsZSIsIm5ld1NuYXBzaG90IiwiZGlzcG9zZWQiLCJjbGVhbnVwRm4iLCJQcm92aWRlciIsIl9leHRlbmRzMiIsIl9vYmplY3RTcHJlYWQzIiwiUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlciIsImdldFJvb3RWYXJpYWJsZXNGb3JGcmFnbWVudHMiLCJpbnZhcmlhbnQiLCJDb25uZWN0aW9uSW50ZXJmYWNlIiwiT2JzZXJ2YWJsZSIsImdldFZhcmlhYmxlc0Zyb21PYmplY3QiLCJnZXRTZWxlY3RvciIsIkZPUldBUkQiLCJ0b09ic2VydmVyIiwib2JzZXJ2ZXJPckNhbGxiYWNrIiwiY29tcGxldGUiLCJ1bnN1YnNjcmliZSIsInN1YnNjcmlwdGlvbiIsImNvbm5lY3Rpb25Db25maWciLCJDb21wb25lbnRDbGFzcyIsIm1ldGFkYXRhIiwiZm91bmRDb25uZWN0aW9uTWV0YWRhdGEiLCJpc1JlbGF5TW9kZXJuIiwiZnJhZ21lbnROYW1lIiwiY29ubmVjdGlvbk1ldGFkYXRhIiwiY29ubmVjdGlvbiIsImZpbmRDb25uZWN0aW9uTWV0YWRhdGEiLCJnZXRDb25uZWN0aW9uRnJvbVByb3BzIiwicGF0aCIsImNyZWF0ZUdldENvbm5lY3Rpb25Gcm9tUHJvcHMiLCJkaXJlY3Rpb24iLCJnZXRGcmFnbWVudFZhcmlhYmxlcyIsImNvdW50VmFyaWFibGUiLCJjb3VudCIsInByZXZWYXJzIiwidG90YWxDb3VudCIsImNyZWF0ZUdldEZyYWdtZW50VmFyaWFibGVzIiwiX3Jlc29sdmVyIiwiY29ubmVjdGlvbkRhdGEiLCJfZ2V0Q29ubmVjdGlvbkRhdGEiLCJoYXNNb3JlIiwiY3Vyc29yIiwiX3JlZmV0Y2hTdWJzY3JpcHRpb24iLCJyZWZldGNoVmFyaWFibGVzIiwiX2NhbkZldGNoUGFnZSIsIl9yZWZldGNoVmFyaWFibGVzIiwicGFnaW5hdGluZ1ZhcmlhYmxlcyIsIl9mZXRjaFBhZ2UiLCJmb3JjZSIsInBhZ2VTaXplIiwib2JzZXJ2ZXIiLCJzaW5rIiwiZWRnZUNvdW50IiwiX3JlZmV0Y2hDb25uZWN0aW9uIiwiX0Nvbm5lY3Rpb25JbnRlcmZhY2UkIiwiRU5EX0NVUlNPUiIsIlNUQVJUX0NVUlNPUiIsIl9pc0FSZXF1ZXN0SW5GbGlnaHQiLCJwcmV2Q29udGV4dCIsImNvbnRleHRGb3JDaGlsZHJlbiIsIl9idWlsZFJlbGF5UHJvcCIsIl9pc1VubW91bnRlZCIsIl9oYXNGZXRjaGVkIiwicHJldlJvb3RWYXJpYWJsZXMiLCJuZXh0Um9vdFZhcmlhYmxlcyIsIl9jbGVhbnVwIiwiX2hhc01vcmUiLCJpc0xvYWRpbmciLCJfaXNMb2FkaW5nIiwibG9hZE1vcmUiLCJfbG9hZE1vcmUiLCJyZWZldGNoQ29ubmVjdGlvbiIsInJlc3RQcm9wcyIsIl9Db25uZWN0aW9uSW50ZXJmYWNlJDIiLCJFREdFUyIsIlBBR0VfSU5GTyIsIkhBU19ORVhUX1BBR0UiLCJIQVNfUFJFVl9QQUdFIiwiZWRnZXMiLCJwYWdlSW5mbyIsIl9nZXRRdWVyeUZldGNoZXIiLCJfcXVlcnlGZXRjaGVyIiwibWV0aG9kIiwiZnJhZ21lbnRWYXJpYWJsZXMiLCJfdGhpczIiLCJfdGhpcyRwcm9wczIiLCJyb290VmFyaWFibGVzIiwiZmV0Y2hWYXJpYWJsZXMiLCJnZXRWYXJpYWJsZXMiLCJjYWNoZUNvbmZpZyIsInJlZmV0Y2hTdWJzY3JpcHRpb24iLCJjbGVhbnVwIiwiZXhlY3V0ZSIsInByZXNlcnZlUHJldmlvdXNSZWZlcmVuY2VzIiwibWVyZ2VNYXAiLCJwcmV2RGF0YSIsInNldFZhcmlhYmxlcyIsIm5leHREYXRhIiwib25OZXh0IiwiX3RoaXMkcHJvcHMzIiwiaXNSZWxheU1vZGVybkVudmlyb25tZW50IiwiZmV0Y2hRdWVyeSIsIl9jYWNoZVNlbGVjdGlvblJlZmVyZW5jZSIsImNhY2hlU2VsZWN0aW9uUmVmZXJlbmNlIiwiX3NlbGVjdGlvblJlZmVyZW5jZXMiLCJzZWxlY3Rpb25SZWZlcmVuY2VzIiwiZ2V0U2VsZWN0aW9uUmVmZXJlbmNlcyIsImxvb2t1cEluU3RvcmUiLCJmZXRjaFBvbGljeSIsInN0YXR1cyIsIl9yZXRhaW5DYWNoZWRPcGVyYXRpb24iLCJfcmVmIiwiX3JlZiRwcmVzZXJ2ZVByZXZpb3VzIiwicmVmZXJlbmNlIiwiZGlzcG9zZVNlbGVjdGlvblJlZmVyZW5jZXMiLCJzZXRPbkRhdGFDaGFuZ2UiLCJvbkRhdGFDaGFuZ2UiLCJfZmV0Y2hPcHRpb25zIiwib25EYXRhQ2hhbmdlQ2FsbGJhY2tzIiwiX2NhbGxPbkRhdGFDaGFuZ2VXaGVuU2V0IiwiX2Vycm9yIiwiX3NuYXBzaG90IiwiZmV0Y2giLCJmZXRjaE9wdGlvbnMiLCJjYWNoZUNvbmZpZ092ZXJyaWRlIiwiZmV0Y2hIYXNSZXR1cm5lZCIsImRpc3Bvc2VSZXF1ZXN0Iiwib2xkT25EYXRhQ2hhbmdlQ2FsbGJhY2tzIiwib3BlcmF0aW9uT3ZlcnJpZGUiLCJfcGVuZGluZ1JlcXVlc3QiLCJfb25RdWVyeURhdGFBdmFpbGFibGUiLCJub3RpZnlGaXJzdFJlc3VsdCIsInJldHJ5IiwiX3Jvb3RTdWJzY3JpcHRpb24iLCJfZGlzcG9zZUNhY2hlU2VsZWN0aW9uUmVmZXJlbmNlIiwiX3JlZjIiLCJfdGhpczMiLCJfdGhpcyRfZmV0Y2hPcHRpb25zIiwibWF5YmVOZXdPbkRhdGFDaGFuZ2VDYWxsYmFja3MiLCJyZXF1ZXN0Q2FjaGUiLCJSZWFjdFJlbGF5UXVlcnlSZW5kZXJlciIsInF1ZXJ5RmV0Y2hlciIsInJlcXVlc3RDYWNoZUtleSIsInJldHJ5Q2FsbGJhY2tzIiwiaGFuZGxlRGF0YUNoYW5nZSIsImhhbmRsZVJldHJ5QWZ0ZXJFcnJvciIsImdldFJlcXVlc3RDYWNoZUtleSIsInBhcmFtcyIsInByZXZQcm9wc0Vudmlyb25tZW50IiwicHJldlByb3BzVmFyaWFibGVzIiwicHJldlF1ZXJ5IiwiZmV0Y2hRdWVyeUFuZENvbXB1dGVTdGF0ZUZyb21Qcm9wcyIsInByZXZTZWxlY3Rpb25SZWZlcmVuY2VzIiwicHJldlJlcXVlc3RDYWNoZUtleSIsInJlbmRlclByb3BzIiwiZ2V0UmVuZGVyUHJvcHMiLCJfdGhpcyRzdGF0ZTIiLCJzeW5jU25hcHNob3QiLCJjYWNoZUlEIiwiZ2VuZXJpY0Vudmlyb25tZW50Iiwic3RvcmVTbmFwc2hvdCIsImNyZWF0ZUNvbnRleHQiLCJyZWZldGNoIiwidGFnZ2VkTm9kZSIsInJlbmRlclZhcmlhYmxlcyIsIl9nZXRGcmFnbWVudFZhcmlhYmxlcyIsImxvY2FsVmFyaWFibGVzIiwibGF0ZXN0U3RhdGUiLCJyZXNwb25zZSIsIl9yZWZldGNoIiwiaXNSZWxheUVudmlyb25tZW50IiwiaXNSZWxheUNvbnRleHQiLCJhc3NlcnRGcmFnbWVudE1hcCIsImdldEZyYWdtZW50IiwiQ29udGFpbmVyIiwiZm9yd2FyZFJlZiIsIl9xdWVyeVJlbmRlcmVyQ29udGV4dCIsIl9zZWxlY3RvciRzZWxlY3RvcnMkIiwiX3NlbGVjdG9yJHNlbGVjdG9ycyQyIiwiX3NlbGVjdG9yJG93bmVyJHZhcmlhIiwiZnJhZ21lbnROb2RlIiwiZnJhZ21lbnRSZWYiLCJzZWxlY3RvciIsImZyYWdtZW50T3duZXJWYXJpYWJsZXMiLCJraW5kIiwic2VsZWN0b3JzIiwib3duZXIiLCJFbnRyeVBvaW50Q29udGFpbmVyIiwiUmVhY3RSZWxheUZyYWdtZW50Q29udGFpbmVyIiwiUmVhY3RSZWxheUxvY2FsUXVlcnlSZW5kZXJlciIsIlJlYWN0UmVsYXlQYWdpbmF0aW9uQ29udGFpbmVyIiwiUmVhY3RSZWxheVJlZmV0Y2hDb250YWluZXIiLCJSZWxheUVudmlyb25tZW50UHJvdmlkZXIiLCJSZWxheVJ1bnRpbWUiLCJsb2FkRW50cnlQb2ludCIsInVzZUVudHJ5UG9pbnRMb2FkZXIiLCJ1c2VGcmFnbWVudCIsInVzZUxhenlMb2FkUXVlcnkiLCJ1c2VNdXRhdGlvbiIsInVzZVBhZ2luYXRpb25GcmFnbWVudCIsInVzZVByZWxvYWRlZFF1ZXJ5IiwidXNlUXVlcnlMb2FkZXIiLCJ1c2VSZWZldGNoYWJsZUZyYWdtZW50IiwidXNlUmVsYXlFbnZpcm9ubWVudCIsInVzZVN1YnNjcmliZVRvSW52YWxpZGF0aW9uU3RhdGUiLCJ1c2VTdWJzY3JpcHRpb24iLCJsb2FkUXVlcnkiLCJDb25uZWN0aW9uSGFuZGxlciIsIlF1ZXJ5UmVuZGVyZXIiLCJMb2NhbFF1ZXJ5UmVuZGVyZXIiLCJNdXRhdGlvblR5cGVzIiwiUmFuZ2VPcGVyYXRpb25zIiwiYXBwbHlPcHRpbWlzdGljTXV0YXRpb24iLCJjb21taXRMb2NhbFVwZGF0ZSIsImNvbW1pdE11dGF0aW9uIiwiY3JlYXRlRnJhZ21lbnRDb250YWluZXIiLCJjcmVhdGVQYWdpbmF0aW9uQ29udGFpbmVyIiwiY3JlYXRlUmVmZXRjaENvbnRhaW5lciIsImZldGNoUXVlcnlfREVQUkVDQVRFRCIsImdyYXBocWwiLCJyZWFkSW5saW5lRGF0YSIsInJlcXVlc3RTdWJzY3JpcHRpb24iLCJfUmVhY3QkX19TRUNSRVRfSU5URVIiLCJDb250ZXh0IiwiY3VycmVudERpc3BhdGNoZXIiLCJQcm9maWxlckNvbnRleHQiLCJlbnRyeVBvaW50UmVmZXJlbmNlIiwiZ2V0Q29tcG9uZW50IiwicXVlcmllcyIsImVudHJ5UG9pbnRzIiwiZXh0cmFQcm9wcyIsInJvb3RNb2R1bGVJRCIsInByb2ZpbGVyQ29udGV4dCIsIl9fbG9nIiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsIkxSVUNhY2hlIiwiZ2V0UHJvbWlzZUZvckFjdGl2ZVJlcXVlc3QiLCJnZXRGcmFnbWVudElkZW50aWZpZXIiLCJpc1Byb21pc2UiLCJyZWN5Y2xlTm9kZXNJbnRvIiwicmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzIiwiV0VBS01BUF9TVVBQT1JURUQiLCJDT05TVEFOVF9SRUFET05MWV9FTVBUWV9BUlJBWSIsImZyZWV6ZSIsImdldEZyYWdtZW50UmVzdWx0IiwiY2FjaGVLZXkiLCJGcmFnbWVudFJlc291cmNlSW1wbCIsIl9lbnZpcm9ubWVudCIsIl9jYWNoZSIsInJlYWQiLCJjb21wb25lbnREaXNwbGF5TmFtZSIsImZyYWdtZW50S2V5IiwicmVhZFdpdGhJZGVudGlmaWVyIiwiZnJhZ21lbnRJZGVudGlmaWVyIiwiX2ZyYWdtZW50Tm9kZSRtZXRhZGF0IiwicGx1cmFsIiwiY2FjaGVkVmFsdWUiLCJfcmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzSW5TbmFwc2hvdCIsImZyYWdtZW50U2VsZWN0b3IiLCJmcmFnbWVudE93bmVyIiwic29tZSIsImlzTWlzc2luZ0RhdGEiLCJmcmFnbWVudFJlc3VsdCIsIm5ldHdvcmtQcm9taXNlIiwiX2dldEFuZFNhdmVQcm9taXNlRm9yRnJhZ21lbnRSZXF1ZXN0SW5GbGlnaHQiLCJtaXNzaW5nUmVxdWlyZWRGaWVsZHMiLCJyZWFkU3BlYyIsImZyYWdtZW50Tm9kZXMiLCJmcmFnbWVudFJlZnMiLCJyZW5kZXJlZFNuYXBzaG90IiwiX3RoaXMkY2hlY2tNaXNzZWRVcGRhIiwiY2hlY2tNaXNzZWRVcGRhdGVzIiwiZGlkTWlzc1VwZGF0ZXMiLCJjdXJyZW50U25hcHNob3QiLCJkYXRhU3Vic2NyaXB0aW9ucyIsImlkeCIsImxhdGVzdFNuYXBzaG90IiwiX3VwZGF0ZVBsdXJhbFNuYXBzaG90Iiwic3Vic2NyaWJlU3BlYyIsImZyYWdtZW50UmVzdWx0cyIsImRpc3Bvc2FibGVzIiwiZGlzcG9zYWJsZSIsImN1cnJlbnRTbmFwc2hvdHMiLCJyZW5kZXJEYXRhIiwiY3VycmVudERhdGEiLCJ1cGRhdGVkRGF0YSIsInNlZW5SZWNvcmRzIiwiY2hlY2tNaXNzZWRVcGRhdGVzU3BlYyIsIl90aGlzNCIsIl9nZXRQcm9taXNlRm9yQWN0aXZlUiIsIl90aGlzNSIsImdldE9wZXJhdGlvblRyYWNrZXIiLCJnZXRQcm9taXNlRm9yUGVuZGluZ09wZXJhdGlvbnNBZmZlY3RpbmdPd25lciIsImdldFByb21pc2VGb3JQZW5kaW5nT3BlcmF0aW9uQWZmZWN0aW5nT3duZXIiLCJwcm9taXNlIiwicXVlcnlOYW1lIiwicHJvbWlzZURpc3BsYXlOYW1lIiwiYmFzZVNuYXBzaG90cyIsImN1cnJlbnRGcmFnbWVudFJlc3VsdCIsInJlcG9ydEludmFsaWRDYWNoZWREYXRhIiwibmV4dFNuYXBzaG90cyIsImNyZWF0ZUZyYWdtZW50UmVzb3VyY2UiLCJkYXRhUmVzb3VyY2VzIiwiZ2V0RnJhZ21lbnRSZXNvdXJjZUZvckVudmlyb25tZW50IiwiY2FjaGVkIiwibmV3RGF0YVJlc291cmNlIiwiY2FwYWNpdHkiLCJfY2FwYWNpdHkiLCJfbWFwIiwiZmlyc3RLZXkiLCJjbGVhciIsIndyYXBQcmVwYXJlUXVlcnlSZXNvdXJjZSIsIkRFRkFVTFRfRkVUQ0hfUE9MSUNZIiwiZ2V0UXVlcnlDYWNoZUlkZW50aWZpZXIiLCJtYXliZUZldGNoUG9saWN5IiwibWF5YmVSZW5kZXJQb2xpY3kiLCJjYWNoZUJyZWFrZXIiLCJyZW5kZXJQb2xpY3kiLCJVTlNUQUJMRV9nZXREZWZhdWx0UmVuZGVyUG9saWN5IiwiY2FjaGVJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsImdldFF1ZXJ5UmVzdWx0Iiwicm9vdEZyYWdtZW50UmVmIiwiX19pZCIsImRhdGFJRCIsIl9fZnJhZ21lbnRzIiwiX19mcmFnbWVudE93bmVyIiwibmV4dElEIiwiY3JlYXRlQ2FjaGVFbnRyeSIsIm5ldHdvcmtTdWJzY3JpcHRpb24iLCJvbkRpc3Bvc2UiLCJjdXJyZW50VmFsdWUiLCJyZXRhaW5Db3VudCIsInJlbGVhc2VUZW1wb3JhcnlSZXRhaW4iLCJjdXJyZW50TmV0d29ya1N1YnNjcmlwdGlvbiIsIm1heCIsImNhY2hlRW50cnkiLCJnZXRSZXRhaW5Db3VudCIsImdldE5ldHdvcmtTdWJzY3JpcHRpb24iLCJzZXROZXR3b3JrU3Vic2NyaXB0aW9uIiwidGVtcG9yYXJ5UmV0YWluIiwiaXNTZXJ2ZXIiLCJyZWxlYXNlUXVlcnlUaW1lb3V0IiwibG9jYWxSZWxlYXNlVGVtcG9yYXJ5UmV0YWluIiwicGVybWFuZW50UmV0YWluIiwiUXVlcnlSZXNvdXJjZUltcGwiLCJwcmVwYXJlIiwiZmV0Y2hPYnNlcnZhYmxlIiwicHJlcGFyZVdpdGhJZGVudGlmaWVyIiwidGVtcG9yYXJ5UmV0YWluRGlzcG9zYWJsZSIsIl9mZXRjaEFuZFNhdmVRdWVyeSIsIm9ic2VydmVyVW5zdWJzY3JpYmUiLCJxdWVyeVJlc3VsdCIsIl9nZXRPckNyZWF0ZUNhY2hlRW50cnkiLCJyZXNvdXJjZUlEIiwiVEVTVFNfT05MWV9fZ2V0Q2FjaGVFbnRyeSIsIl9jbGVhckNhY2hlRW50cnkiLCJzaG91bGRGZXRjaCIsInNob3VsZEFsbG93UmVuZGVyIiwicXVlcnlBdmFpbGFiaWxpdHkiLCJxdWVyeVN0YXR1cyIsImhhc0Z1bGxRdWVyeSIsImNhblBhcnRpYWxSZW5kZXIiLCJyZXNvbHZlTmV0d29ya1Byb21pc2UiLCJfY2FjaGVFbnRyeSIsIl9xdWVyeVJlc3VsdCIsIm9ic2VydmVyU3RhcnQiLCJvYnNlcnZlck5leHQiLCJvYnNlcnZlckVycm9yIiwib2JzZXJ2ZXJDb21wbGV0ZSIsIl9jYWNoZUVudHJ5MiIsIlByb21pc2UiLCJjcmVhdGVRdWVyeVJlc291cmNlIiwiZ2V0UXVlcnlSZXNvdXJjZUZvckVudmlyb25tZW50IiwiZ2V0UmVmZXRjaE1ldGFkYXRhIiwiX2ZyYWdtZW50Tm9kZSRtZXRhZGF0MiIsIl9nZXRSZWZldGNoTWV0YWRhdGEiLCJwYWdpbmF0aW9uUmVxdWVzdCIsInJlZmV0Y2hhYmxlUmVxdWVzdCIsInJlZmV0Y2hNZXRhZGF0YSIsInBhZ2luYXRpb25NZXRhZGF0YSIsImNvbm5lY3Rpb25QYXRoSW5GcmFnbWVudERhdGEiLCJpZGVudGlmaWVyRmllbGQiLCJzdHJlYW0iLCJfb2JqZWN0U3ByZWFkNCIsImJhc2VWYXJpYWJsZXMiLCJleHRyYVZhcmlhYmxlcyIsImJhY2t3YXJkTWV0YWRhdGEiLCJiYWNrd2FyZCIsImZvcndhcmRNZXRhZGF0YSIsImZvcndhcmQiLCJfcGFnaW5hdGlvblZhcmlhYmxlcyIsInBhZ2luYXRpb25WYXJpYWJsZXMiLCJmcmFnbWVudFJlZlBhdGhJblJlc3BvbnNlIiwiZnJhZ21lbnRQYXRoSW5SZXN1bHQiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjIiLCJfc3RlcCIsIl9pdGVyYXRvciIsImVudmlyb25tZW50UHJvdmlkZXIiLCJlbnRyeVBvaW50IiwiZW50cnlQb2ludFBhcmFtcyIsImxvYWRpbmdQcm9taXNlIiwicm9vdCIsImdldE1vZHVsZUlmUmVxdWlyZWQiLCJsb2FkIiwicHJlbG9hZFByb3BzIiwiZ2V0UHJlbG9hZFByb3BzIiwicHJlbG9hZGVkUXVlcmllcyIsInByZWxvYWRlZEVudHJ5UG9pbnRzIiwicXVlcnlQcm9wTmFtZSIsIl9xdWVyaWVzJHF1ZXJ5UHJvcE5hbSIsImVudmlyb25tZW50UHJvdmlkZXJPcHRpb25zIiwicGFyYW1ldGVycyIsImdldEVudmlyb25tZW50IiwibmV0d29ya0NhY2hlQ29uZmlnIiwiX19uYW1lRm9yV2FybmluZyIsImVudHJ5UG9pbnRQcm9wTmFtZSIsImVudHJ5UG9pbnREZXNjcmlwdGlvbiIsIm5lc3RlZEVudHJ5UG9pbnQiLCJuZXN0ZWRQYXJhbXMiLCJpc0Rpc3Bvc2VkIiwidmFsdWVzIiwiaW5uZXJEaXNwb3NlIiwiX2xvYWRpbmdQcm9taXNlIiwiZ2V0TW9kdWxlSWQiLCJQcmVsb2FkYWJsZVF1ZXJ5UmVnaXN0cnkiLCJSZXBsYXlTdWJqZWN0IiwiZ2V0UmVxdWVzdElkZW50aWZpZXIiLCJSZWxheUZlYXR1cmVGbGFncyIsImZldGNoUXVlcnlEZWR1cGVkIiwiUmVuZGVyRGlzcGF0Y2hlciIsImZldGNoS2V5IiwicHJlbG9hZGFibGVSZXF1ZXN0IiwiX1JlYWN0JF9fU0VDUkVUX0lOVEVSMyIsIl9SZWFjdCRfX1NFQ1JFVF9JTlRFUjQiLCJfb3B0aW9ucyRmZXRjaFBvbGljeSIsInJldGFpblJlZmVyZW5jZSIsInVuc3Vic2NyaWJlRnJvbU5ldHdvcmtSZXF1ZXN0IiwidW5zdWJzY3JpYmVGcm9tRXhlY3V0aW9uIiwiY2FuY2VsT25Mb2FkQ2FsbGJhY2siLCJxdWVyeUlkIiwiZGlkRXhlY3V0ZU5ldHdvcmtTb3VyY2UiLCJleGVjdXRlV2l0aE5ldHdvcmtTb3VyY2UiLCJuZXR3b3JrT2JzZXJ2YWJsZSIsImV4ZWN1dGVXaXRoU291cmNlIiwiZXhlY3V0aW9uU3ViamVjdCIsInJldHVybmVkT2JzZXJ2YWJsZSIsIm5ldHdvcmtFcnJvciIsImRpZE1ha2VOZXR3b3JrUmVxdWVzdCIsIm1ha2VOZXR3b3JrUmVxdWVzdCIsIm9ic2VydmFibGUiLCJzdWJqZWN0IiwiRU5BQkxFX0xPQURfUVVFUllfUkVRVUVTVF9ERURVUElORyIsImdldE5ldHdvcmsiLCJzdWJqZWN0U3Vic2NyaXB0aW9uIiwiZXhlY3V0ZURlZHVwZWQiLCJmZXRjaEZuIiwiX2ZldGNoUXVlcnlEZWR1cGVkJHN1IiwiY2hlY2tBdmFpbGFiaWxpdHlBbmRFeGVjdXRlIiwiY29uY3JldGVSZXF1ZXN0IiwiX21vZHVsZSIsIl9QcmVsb2FkYWJsZVF1ZXJ5UmVnaSIsIm9uTG9hZCIsInByZWxvYWRlZE1vZHVsZSIsInVzZVRyYWNrTG9hZFF1ZXJ5SW5SZW5kZXIiLCJfUmVhY3QkX19TRUNSRVRfSU5URVIyIiwidXNlSXNNb3VudGVkUmVmIiwiX3JlcXVpcmUyIiwiaW5pdGlhbE51bGxFbnRyeVBvaW50UmVmZXJlbmNlU3RhdGUiLCJfb3B0aW9ucyRURVNUX09OTFlfX2kiLCJfb3B0aW9ucyRURVNUX09OTFlfX2kyIiwiX29wdGlvbnMkVEVTVF9PTkxZX19pMyIsIl9vcHRpb25zJFRFU1RfT05MWV9faTQiLCJpbml0aWFsRW50cnlQb2ludFJlZmVyZW5jZUludGVybmFsIiwiVEVTVF9PTkxZX19pbml0aWFsRW50cnlQb2ludERhdGEiLCJpbml0aWFsRW50cnlQb2ludFBhcmFtc0ludGVybmFsIiwiaXNNb3VudGVkUmVmIiwidW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2VzUmVmIiwiX3VzZVN0YXRlIiwic2V0RW50cnlQb2ludFJlZmVyZW5jZSIsIl91c2VTdGF0ZTIiLCJzZXRFbnRyeVBvaW50UGFyYW1zIiwiZGlzcG9zZUVudHJ5UG9pbnQiLCJudWxsRW50cnlQb2ludFJlZmVyZW5jZSIsImVudHJ5UG9pbnRMb2FkZXJDYWxsYmFjayIsInVwZGF0ZWRFbnRyeVBvaW50UmVmZXJlbmNlIiwibWF5YmVIaWRkZW5PckZhc3RSZWZyZXNoIiwidW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2VzIiwidW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2UiLCJfc3RlcDIiLCJfaXRlcmF0b3IyIiwidW5oYW5kbGVkU3RhdGVDaGFuZ2UiLCJzdWJzY3JpcHRpb25SZWYiLCJpc0ZldGNoaW5nUmVmIiwiZGlzcG9zZUZldGNoIiwic3RhcnRGZXRjaCIsImNvbXBsZXRlRmV0Y2giLCJ1c2VGcmFnbWVudE5vZGUiLCJ1c2VTdGF0aWNGcmFnbWVudE5vZGVXYXJuaW5nIiwiZnJhZ21lbnRJbnB1dCIsIkZyYWdtZW50UmVzb3VyY2UiLCJpc0xpc3RlbmluZ0ZvclVwZGF0ZXNSZWYiLCJoYW5kbGVEYXRhVXBkYXRlIiwiZGlzYWJsZVN0b3JlVXBkYXRlcyIsImVuYWJsZVN0b3JlVXBkYXRlcyIsImdldE9ic2VydmFibGVGb3JBY3RpdmVSZXF1ZXN0IiwiaXNBY3RpdmUiLCJzZXRJc0FjdGl2ZSIsIm9uQ29tcGxldGVPckVycm9yIiwidXNlTGF6eUxvYWRRdWVyeU5vZGUiLCJ1c2VNZW1vT3BlcmF0aW9uRGVzY3JpcHRvciIsImdxbFF1ZXJ5IiwiVU5TVEFCTEVfcmVuZGVyUG9saWN5IiwidXNlRmV0Y2hUcmFja2luZ1JlZiIsIlF1ZXJ5UmVzb3VyY2UiLCJmb3JjZVVwZGF0ZUtleSIsIl91c2VGZXRjaFRyYWNraW5nUmVmIiwicHJlcGFyZWRRdWVyeVJlc3VsdCIsImdldFBhZ2luYXRpb25WYXJpYWJsZXMiLCJnZXRWYWx1ZUF0UGF0aCIsInVzZUlzT3BlcmF0aW9uTm9kZUFjdGl2ZSIsImZyYWdtZW50RGF0YSIsIm9uUmVzZXQiLCJpZGVudGlmaWVyVmFsdWUiLCJtaXJyb3JlZEVudmlyb25tZW50Iiwic2V0TWlycm9yZWRFbnZpcm9ubWVudCIsIm1pcnJvcmVkRnJhZ21lbnRJZGVudGlmaWVyIiwic2V0TWlycm9yZWRGcmFnbWVudElkZW50aWZpZXIiLCJpc1BhcmVudFF1ZXJ5QWN0aXZlIiwiX2dldENvbm5lY3Rpb25TdGF0ZSIsIl9wYWdlSW5mbyRFTkRfQ1VSU09SIiwiX3BhZ2VJbmZvJFNUQVJUX0NVUlNPIiwiZ2V0Q29ubmVjdGlvblN0YXRlIiwib25Db21wbGV0ZSIsInBhcmVudFZhcmlhYmxlcyIsIlVOU1RBQkxFX2V4dHJhVmFyaWFibGVzIiwicGFnaW5hdGlvblF1ZXJ5IiwidXNlTWVtb1ZhcmlhYmxlcyIsIm1lbW9WYXJpYWJsZXMiLCJtZW1vQ2FjaGVDb25maWciLCJfdmFyaWFibGVzQ2hhbmdlZEdlbmUyIiwiX3ZhcmlhYmxlc0NoYW5nZWRHZW5lIiwidmFyaWFibGVzQ2hhbmdlZEdlbmVyYXRpb25SZWYiLCJtaXJyb3JlZFZhcmlhYmxlcyIsInNldE1pcnJvcmVkVmFyaWFibGVzIiwiZGVmYXVsdENvbW1pdE11dGF0aW9uIiwibXV0YXRpb24iLCJjb21taXRNdXRhdGlvbkZuIiwiZW52aXJvbm1lbnRSZWYiLCJtdXRhdGlvblJlZiIsImluRmxpZ2h0TXV0YXRpb25zUmVmIiwiaXNNdXRhdGlvbkluRmxpZ2h0Iiwic2V0TXV0YXRpb25JbkZsaWdodCIsImNvbW1pdCIsImNvbmZpZyIsIm9uQ29tcGxldGVkIiwiZXJyb3JzIiwib25VbnN1YnNjcmliZSIsImdldFBhZ2luYXRpb25NZXRhZGF0YSIsInVzZUxvYWRNb3JlRnVuY3Rpb24iLCJ1c2VSZWZldGNoYWJsZUZyYWdtZW50Tm9kZSIsInVzZUxvYWRNb3JlIiwiaXNMb2FkaW5nTW9yZSIsInNldElzTG9hZGluZ01vcmUiLCJfdXNlTG9hZE1vcmVGdW5jdGlvbiIsInBhcmVudEZyYWdtZW50UmVmIiwiX2dldFBhZ2luYXRpb25NZXRhZGF0IiwiX3VzZVJlZmV0Y2hhYmxlRnJhZ21lIiwiX3VzZUxvYWRNb3JlIiwibG9hZFByZXZpb3VzIiwiaGFzUHJldmlvdXMiLCJpc0xvYWRpbmdQcmV2aW91cyIsImRpc3Bvc2VGZXRjaFByZXZpb3VzIiwiX3VzZUxvYWRNb3JlMiIsImxvYWROZXh0IiwiaGFzTmV4dCIsImlzTG9hZGluZ05leHQiLCJkaXNwb3NlRmV0Y2hOZXh0IiwiX19lbnZpcm9ubWVudCIsIl9yZXF1aXJlMyRfX2ludGVybmFsIiwicHJlbG9hZGVkUXVlcnkiLCJ1c2VMYXp5TG9hZFF1ZXJ5Tm9kZVBhcmFtcyIsImZhbGxiYWNrRmV0Y2hPYnNlcnZhYmxlIiwiaWZFbXB0eSIsImluaXRpYWxOdWxsUXVlcnlSZWZlcmVuY2VTdGF0ZSIsImluaXRpYWxRdWVyeVJlZmVyZW5jZSIsImluaXRpYWxRdWVyeVJlZmVyZW5jZUludGVybmFsIiwidW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlc1JlZiIsInF1ZXJ5UmVmZXJlbmNlIiwic2V0UXVlcnlSZWZlcmVuY2UiLCJwcmV2aW91c0luaXRpYWxRdWVyeVJlZmVyZW5jZSIsInNldFByZXZpb3VzSW5pdGlhbFF1ZXJ5UmVmZXJlbmNlIiwiZGlzcG9zZVF1ZXJ5IiwicXVlcnlMb2FkZXJDYWxsYmFjayIsIm1lcmdlZE9wdGlvbnMiLCJfb3B0aW9ucyRfX2Vudmlyb25tZW4iLCJ1cGRhdGVkUXVlcnlSZWZlcmVuY2UiLCJ1bmRpc3Bvc2VkUXVlcnlSZWZlcmVuY2VzIiwidW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlIiwiX3JlcXVpcmU0IiwicmVkdWNlciIsIl9hY3Rpb24kcmVmZXRjaEVudmlybyIsInJlZmV0Y2hFbnZpcm9ubWVudCIsInJlZmV0Y2hRdWVyeSIsInBhcmVudEVudmlyb25tZW50IiwiX3VzZVJlZHVjZXIiLCJyZWZldGNoU3RhdGUiLCJzaG91bGRSZXNldCIsIl91c2VRdWVyeUxvYWRlciIsInF1ZXJ5UmVmIiwiaGFuZGxlUXVlcnlDb21wbGV0ZWQiLCJtYXliZUVycm9yIiwicXVlcnlEYXRhIiwiX3VzZUZyYWdtZW50Tm9kZSIsInByb3ZpZGVkUmVmZXRjaFZhcmlhYmxlcyIsIl9mcmFnbWVudFNlbGVjdG9yJHNlbCIsIl9mcmFnbWVudFNlbGVjdG9yJHNlbDIiLCJfZnJhZ21lbnRTZWxlY3RvciRzZWwzIiwiX2ZyYWdtZW50U2VsZWN0b3Ikc2VsNCIsInVzZVJlZmV0Y2hGdW5jdGlvbiIsIndhcm5pbmdDb250ZXh0IiwiZGF0YUlEcyIsImRpc3Bvc2FibGVSZWYiLCJzdGFibGVEYXRhSURzIiwic29ydCIsInN0b3JlIiwiZ2V0U3RvcmUiLCJpbnZhbGlkYXRpb25TdGF0ZSIsImxvb2t1cEludmFsaWRhdGlvblN0YXRlIiwic3Vic2NyaWJlVG9JbnZhbGlkYXRpb25TdGF0ZSIsInJlcXVlc3RTdWJzY3JpcHRpb25GbiIsImFjdHVhbFJlcXVlc3RTdWJzY3JpcHRpb24iLCJhcnIiLCJsZW4iLCJhcnIyIiwiX19lc01vZHVsZSIsImFycmF5TGlrZVRvQXJyYXkiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJ1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm8iLCJhbGxvd0FycmF5TGlrZSIsIml0IiwiX2UiLCJub3JtYWxDb21wbGV0aW9uIiwiZGlkRXJyIiwic3RlcCIsIl9lMiIsIm9iaiIsIndyaXRhYmxlIiwiX2V4dGVuZHMiLCJzZXRQcm90b3R5cGVPZiIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIml0ZXIiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIl9zZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImFycmF5V2l0aG91dEhvbGVzIiwiaXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVTcHJlYWQiLCJtaW5MZW4iLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwiUmVnRXhwIiwiZ3JvdXBzIiwicHJlZml4IiwiZGVsaW1pdGVyIiwib3B0aW9uYWwiLCJwYXJ0aWFsIiwiYXN0ZXJpc2siLCJwYXR0ZXJuIiwiYXR0YWNoS2V5cyIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwidG9rZW5zVG9SZWdFeHAiLCJwYXJzZSIsInN0cmluZ1RvUmVnZXhwIiwiY29tcGlsZSIsInN0ciIsInRva2Vuc1RvRnVuY3Rpb24iLCJQQVRIX1JFR0VYUCIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJleGVjIiwiZXNjYXBlZCIsImdyb3VwIiwibW9kaWZpZXIiLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsInN1YnN0ciIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsImNoYXJDb2RlQXQiLCJtYXRjaGVzIiwib3B0cyIsImVuY29kZSIsInByZXR0eSIsInRva2VuIiwic2VnbWVudCIsImoiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwiX19zZWxmIiwiX19zb3VyY2UiLCJlc2NhcGUiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImRlZmF1bHQiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsInRvQXJyYXkiLCJvbmx5IiwiUHVyZUNvbXBvbmVudCIsImNsb25lRWxlbWVudCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiQ29uc3VtZXIiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsIk11dGF0aW9uSGFuZGxlcnMiLCJoYW5kbGUiLCJEZWxldGVSZWNvcmRIYW5kbGVyIiwiRGVsZXRlRWRnZUhhbmRsZXIiLCJBcHBlbmRFZGdlSGFuZGxlciIsIlByZXBlbmRFZGdlSGFuZGxlciIsIkFwcGVuZE5vZGVIYW5kbGVyIiwiUHJlcGVuZE5vZGVIYW5kbGVyIiwiZ2V0UmVsYXlIYW5kbGVLZXkiLCJnZW5lcmF0ZUNsaWVudElEIiwiZ2V0U3RhYmxlU3RvcmFnZUtleSIsIkNPTk5FQ1RJT04iLCJORVhUX0VER0VfSU5ERVgiLCJidWlsZENvbm5lY3Rpb25FZGdlIiwiZWRnZSIsImVkZ2VJbmRleCIsImVkZ2VJRCIsImdldERhdGFJRCIsImNvbm5lY3Rpb25FZGdlIiwiZ2V0VHlwZSIsImNvcHlGaWVsZHNGcm9tIiwibWVyZ2VFZGdlcyIsInNvdXJjZUVkZ2VzIiwidGFyZ2V0RWRnZXMiLCJub2RlSURzIiwiTk9ERSIsImdldExpbmtlZFJlY29yZCIsIm5vZGVJRCIsImNyZWF0ZUVkZ2UiLCJyZWNvcmQiLCJlZGdlVHlwZSIsInNldExpbmtlZFJlY29yZCIsImRlbGV0ZU5vZGUiLCJfQ29ubmVjdGlvbkludGVyZmFjZSQ1IiwiZ2V0TGlua2VkUmVjb3JkcyIsIm5leHRFZGdlcyIsInNldExpbmtlZFJlY29yZHMiLCJnZXRDb25uZWN0aW9uIiwiZmlsdGVycyIsImhhbmRsZUtleSIsImdldENvbm5lY3Rpb25JRCIsInJlY29yZElEIiwic3RvcmFnZUtleSIsImluc2VydEVkZ2VBZnRlciIsIm5ld0VkZ2UiLCJDVVJTT1IiLCJmb3VuZEN1cnNvciIsImluc2VydEVkZ2VCZWZvcmUiLCJfQ29ubmVjdGlvbkludGVyZmFjZSQ0IiwidXBkYXRlIiwiUEFHRV9JTkZPX1RZUEUiLCJzZXJ2ZXJDb25uZWN0aW9uIiwiZmllbGRLZXkiLCJzZXJ2ZXJQYWdlSW5mbyIsImNsaWVudENvbm5lY3Rpb25JRCIsImNsaWVudENvbm5lY3Rpb25GaWVsZCIsImNsaWVudENvbm5lY3Rpb24iLCJjbGllbnRQYWdlSW5mbyIsIl9jb25uZWN0aW9uIiwiX3NlcnZlckVkZ2VzIiwicHJldkVkZ2VzIiwicHJldlBhZ2VJbmZvIiwiYWZ0ZXIiLCJiZWZvcmUiLCJfbm9kZUlEcyIsInN0YXJ0Q3Vyc29yIiwiZmlyc3QiLCJlbmRDdXJzb3IiLCJzZXJ2ZXJFZGdlcyIsIkNPTk5FQ1RJT05fQ0FMTFMiLCJmaW5kIiwic3Vycm91bmRzIiwiQ0xJRU5UX01VVEFUSU9OX0lEIiwibmV3Q29uZmlnIiwiaXNDb25uZWN0aW9uQ2FsbCIsImlkT3JJZHMiLCJjb25uZWN0aW9ucyIsImhhbmRsZUFyZ3MiLCJjb25uZWN0aW9uSUQiLCJlZGdlVXBkYXRlciIsIm5vZGVVcGRhdGVyIiwiaW5zZXJ0Rm4iLCJzaW5nbGVTZXJ2ZXJFZGdlIiwiX3VudXNlZCIsIl91bnVzZWQyIiwic2VydmVyRWRnZUxpc3QiLCJfbG9vcCIsInNlcnZlckVkZ2UiLCJzZXJ2ZXJOb2RlIiwiX3N0ZXAzIiwic2VydmVyTm9kZUlkIiwiX2l0ZXJhdG9yMyIsIl9jb25uZWN0aW9uJGdldExpbmtlZCIsIl9lZGdlJGdldExpbmtlZFJlY29yZCIsImNsaWVudEVkZ2UiLCJfc2VydmVyTm9kZXMiLCJzaW5nbGVTZXJ2ZXJOb2RlIiwic2VydmVyTm9kZXMiLCJfcGF5bG9hZCRoYW5kbGVBcmdzIiwiZWRnZVR5cGVOYW1lIiwiX3VudXNlZDMiLCJfdW51c2VkNCIsIl9zdGVwNCIsInNlcnZlck5vZGVMaXN0IiwiX2l0ZXJhdG9yNCIsIl9sb29wMiIsIl9zdGVwNSIsIl9pdGVyYXRvcjUiLCJfY29ubmVjdGlvbiRnZXRMaW5rZWQyIiwiX2VkZ2UkZ2V0TGlua2VkUmVjb3JkMiIsIkdyYXBoUUxUYWciLCJSZWxheUNvbmNyZXRlTm9kZSIsIlJlbGF5Q29uY3JldGVWYXJpYWJsZXMiLCJSZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWciLCJSZWxheURlZmF1bHRIYW5kbGVLZXkiLCJSZWxheURlZmF1bHRIYW5kbGVyUHJvdmlkZXIiLCJSZWxheUVycm9yIiwiUmVsYXlNb2Rlcm5FbnZpcm9ubWVudCIsIlJlbGF5TW9kZXJuT3BlcmF0aW9uRGVzY3JpcHRvciIsIlJlbGF5TW9kZXJuUmVjb3JkIiwiUmVsYXlNb2Rlcm5TZWxlY3RvciIsIlJlbGF5TW9kZXJuU3RvcmUiLCJSZWxheU5ldHdvcmsiLCJSZWxheU9ic2VydmFibGUiLCJSZWxheU9wZXJhdGlvblRyYWNrZXIiLCJSZWxheVByb2ZpbGVyIiwiUmVsYXlRdWVyeVJlc3BvbnNlQ2FjaGUiLCJSZWxheVJlY29yZFNvdXJjZSIsIlJlbGF5UmVwbGF5U3ViamVjdCIsIlJlbGF5U3RvcmVVdGlscyIsIlZpZXdlclBhdHRlcm4iLCJjcmVhdGVQYXlsb2FkRm9yM0RGaWVsZCIsImZldGNoUXVlcnlJbnRlcm5hbCIsInN0YWJsZUNvcHkiLCJnZW5lcmF0ZVVuaXF1ZUNsaWVudElEIiwiaXNDbGllbnRJRCIsIkVudmlyb25tZW50IiwiTmV0d29yayIsIlF1ZXJ5UmVzcG9uc2VDYWNoZSIsIlJlY29yZFNvdXJjZSIsIlJlY29yZCIsIlN0b3JlIiwiYXJlRXF1YWxTZWxlY3RvcnMiLCJjcmVhdGVOb3JtYWxpemF0aW9uU2VsZWN0b3IiLCJjcmVhdGVSZWFkZXJTZWxlY3RvciIsImNyZWF0ZVJlcXVlc3REZXNjcmlwdG9yIiwiZ2V0RGF0YUlEc0Zyb21GcmFnbWVudCIsImdldE5vZGUiLCJnZXRJbmxpbmVEYXRhRnJhZ21lbnQiLCJnZXRNb2R1bGVDb21wb25lbnRLZXkiLCJnZXRNb2R1bGVPcGVyYXRpb25LZXkiLCJnZXRQYWdpbmF0aW9uRnJhZ21lbnQiLCJnZXRQbHVyYWxTZWxlY3RvciIsImdldFJlZmV0Y2hhYmxlRnJhZ21lbnQiLCJnZXRTZWxlY3RvcnNGcm9tT2JqZWN0IiwiZ2V0U2luZ3VsYXJTZWxlY3RvciIsImdldFN0b3JhZ2VLZXkiLCJnZXRWYXJpYWJsZXNGcm9tRnJhZ21lbnQiLCJnZXRWYXJpYWJsZXNGcm9tUGx1cmFsRnJhZ21lbnQiLCJnZXRWYXJpYWJsZXNGcm9tU2luZ3VsYXJGcmFnbWVudCIsImlzSW5saW5lRGF0YUZyYWdtZW50IiwiaXNSZXF1ZXN0IiwiRGVmYXVsdEhhbmRsZXJQcm92aWRlciIsIlZJRVdFUl9JRCIsIlZJRVdFUl9UWVBFIiwiREVGQVVMVF9IQU5ETEVfS0VZIiwiRlJBR01FTlRTX0tFWSIsIkZSQUdNRU5UX09XTkVSX0tFWSIsIklEX0tFWSIsIlJFRl9LRVkiLCJSRUZTX0tFWSIsIlJPT1RfSUQiLCJST09UX1RZUEUiLCJUWVBFTkFNRV9LRVkiLCJPcGVyYXRpb25UcmFja2VyIiwiZ2V0T3BlcmF0aW9uVmFyaWFibGVzIiwiUkFOR0VfQUREIiwiUkFOR0VfREVMRVRFIiwiTk9ERV9ERUxFVEUiLCJBUFBFTkQiLCJQUkVQRU5EIiwiZ2V0Um9vdEZpZWxkIiwic2VsZWN0aW9ucyIsImNvbnZlcnQiLCJjb25maWdzIiwib3B0aW1pc3RpY1VwZGF0ZXIiLCJjb25maWdPcHRpbWlzdGljVXBkYXRlcyIsImNvbmZpZ1VwZGF0ZXMiLCJub2RlRGVsZXRlUmVzdWx0IiwiZGVsZXRlZElERmllbGROYW1lIiwicm9vdEZpZWxkIiwiZGVsZXRlSUQiLCJub2RlRGVsZXRlIiwicmFuZ2VBZGRSZXN1bHQiLCJwYXJlbnRJRCIsImNvbm5lY3Rpb25JbmZvIiwiZWRnZU5hbWUiLCJwYXJlbnQiLCJpbmZvIiwicmFuZ2VCZWhhdmlvciIsInJhbmdlQWRkIiwicmFuZ2VEZWxldGVSZXN1bHQiLCJjb25uZWN0aW9uS2V5cyIsInBhdGhUb0Nvbm5lY3Rpb24iLCJkZWxldGVJRHMiLCJkZWxldGVkSURGaWVsZCIsImVhY2hGaWVsZCIsImlkT2JqZWN0IiwicmVjb3JkUHJveHkiLCJyYW5nZURlbGV0ZSIsImVhY2hPcHRpbWlzdGljVXBkYXRlciIsImVhY2hVcGRhdGVyIiwiUmVsYXlSZWNvcmRQcm94eSIsIm11dGF0b3IiLCJfZGF0YUlEIiwiX211dGF0b3IiLCJjb3B5RmllbGRzIiwiaXNWYWxpZExlYWZWYWx1ZSIsImxpbmtlZElEIiwiZ2V0TGlua2VkUmVjb3JkSUQiLCJzZXRMaW5rZWRSZWNvcmRJRCIsImdldE9yQ3JlYXRlTGlua2VkUmVjb3JkIiwidHlwZU5hbWUiLCJsaW5rZWRSZWNvcmQiLCJfdGhpcyRfc291cmNlJGdldCIsImNsaWVudElEIiwibGlua2VkSURzIiwiZ2V0TGlua2VkUmVjb3JkSURzIiwicmVjb3JkcyIsInNldExpbmtlZFJlY29yZElEcyIsImludmFsaWRhdGVSZWNvcmQiLCJtYXJrSURGb3JJbnZhbGlkYXRpb24iLCJldmVyeSIsIkVYSVNURU5UIiwiUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yIiwiX19zb3VyY2VzIiwiX2Jhc2UiLCJfc2luayIsInVuc3RhYmxlX2dldFJhd1JlY29yZFdpdGhDaGFuZ2VzIiwiYmFzZVJlY29yZCIsInNpbmtSZWNvcmQiLCJjbG9uZSIsIl9nZXRTaW5rUmVjb3JkIiwic291cmNlSUQiLCJzaW5rSUQiLCJzaW5rU291cmNlIiwiYmFzZVNvdXJjZSIsImNvcHlGaWVsZHNGcm9tUmVjb3JkIiwiZ2V0U3RhdHVzIiwiTk9ORVhJU1RFTlQiLCJSZWxheVJlY29yZFNvdXJjZVByb3h5IiwiaGFuZGxlclByb3ZpZGVyIiwiX19tdXRhdG9yIiwiX2hhbmRsZXJQcm92aWRlciIsIl9wcm94aWVzIiwiX2dldERhdGFJRCIsIl9pbnZhbGlkYXRlZFN0b3JlIiwiX2lkc01hcmtlZEZvckludmFsaWRhdGlvbiIsInB1Ymxpc2hTb3VyY2UiLCJmaWVsZFBheWxvYWRzIiwiZ2V0UmVjb3JkSURzIiwic291cmNlUmVjb3JkIiwiZmllbGRQYXlsb2FkIiwiaGFuZGxlciIsImdldFJvb3QiLCJpbnZhbGlkYXRlU3RvcmUiLCJpc1N0b3JlTWFya2VkRm9ySW52YWxpZGF0aW9uIiwiZ2V0SURzTWFya2VkRm9ySW52YWxpZGF0aW9uIiwiUmVsYXlSZWNvcmRTb3VyY2VTZWxlY3RvclByb3h5IiwicmVjb3JkU291cmNlIiwicmVhZFNlbGVjdG9yIiwiX19yZWNvcmRTb3VyY2UiLCJfcmVhZFNlbGVjdG9yIiwiZ2V0T3BlcmF0aW9uUm9vdCIsIl9nZXRSb290RmllbGQiLCJmaWVsZE5hbWUiLCJmaWVsZCIsInNlbGVjdGlvbiIsImdldFBsdXJhbFJvb3RGaWVsZCIsIm9wZXJhdGlvbktpbmQiLCJvcHRpbWlzdGljUmVzcG9uc2UiLCJhcHBseU11dGF0aW9uIiwiY29tbWl0VXBkYXRlIiwidXBsb2FkYWJsZXMiLCJfUmVsYXlEZWNsYXJhdGl2ZU11dGEiLCJleGVjdXRlTXV0YXRpb24iLCJpdGVtIiwiQ09ORElUSU9OIiwiQ0xJRU5UX0NPTVBPTkVOVCIsIkNMSUVOVF9FWFRFTlNJT04iLCJERUZFUiIsIkZMSUdIVF9GSUVMRCIsIkZSQUdNRU5UX1NQUkVBRCIsIklOTElORV9GUkFHTUVOVCIsIkxJTktFRF9GSUVMRCIsIkxJTktFRF9IQU5ETEUiLCJNT0RVTEVfSU1QT1JUIiwiU0NBTEFSX0ZJRUxEIiwiU0NBTEFSX0hBTkRMRSIsIlNUUkVBTSIsIlRZUEVfRElTQ1JJTUlOQVRPUiIsImNvbnZlcnRGZXRjaCIsImZuIiwibG9nUmVxdWVzdEluZm8iLCJvYnNlcnZlRmV0Y2giLCJwb2xsSW50ZXJ2YWwiLCJwb2xsIiwiaG9zdFJlcG9ydEVycm9yIiwiX2lzVW5jYXVnaHRUaHJvd25FcnJvciIsIm9uVW5oYW5kbGVkRXJyb3IiLCJpc09ic2VydmFibGUiLCJmcm9tT2JzZXJ2YWJsZSIsImZyb21Qcm9taXNlIiwiZnJvbVZhbHVlIiwic3ViIiwiX2Vycm9yMiIsImVycm9yMiIsImJvdGgiLCJoYXNWYWx1ZSIsImNsb3NlZCIsIndpdGhDbG9zZWQiLCJkb0NsZWFudXAiLCJfZXJyb3IzIiwiaXNVbmNhdWdodFRocm93bkVycm9yIiwiX3N1YnNjcmliZSIsIl90aGlzNiIsIm1hcFZhbHVlIiwiX3RoaXM3Iiwic3Vic2NyaXB0aW9ucyIsIl9zdWIiLCJzcGxpY2UiLCJfdGhpczgiLCJ0aW1lb3V0IiwidG9Qcm9taXNlIiwiX3RoaXM5IiwicmVqZWN0IiwicmVzb2x2ZWQiLCJ0dGwiLCJfcmVzcG9uc2VzIiwiX3NpemUiLCJfdHRsIiwicXVlcnlJRCIsImdldENhY2hlS2V5IiwiZmV0Y2hUaW1lIiwiZXh0ZW5zaW9ucyIsImNhY2hlVGltZXN0YW1wIiwiRlJBR01FTlQiLCJSRVFVRVNUIiwiSU5MSU5FX0RBVEFfRlJBR01FTlQiLCJfZnJhZ21lbnQkbWV0YWRhdGEiLCJfZnJhZ21lbnQkbWV0YWRhdGEyIiwic3RyaW5ncyIsInByZWxvYWRhYmxlUXVlcnlSZWdpc3RyeSIsIl9wcmVsb2FkYWJsZVF1ZXJpZXMiLCJfY2FsbGJhY2tzIiwiY2FsbGJhY2tzIiwiX3RoaXMkX2NhbGxiYWNrcyRnZXQiLCJnZXROZXR3b3JrT2JzZXJ2YWJsZSIsInF1ZXJ5Tm9kZSIsInJlYWREYXRhIiwicmVxdWVzdENhY2hlc0J5RW52aXJvbm1lbnQiLCJnZXRSZXF1ZXN0Q2FjaGUiLCJjYWNoZWRSZXF1ZXN0Iiwic3ViamVjdEZvckluRmxpZ2h0U3RhdHVzIiwiY2FjaGVkUmVxIiwiZ2V0Q2FjaGVkUmVxdWVzdCIsImNhY2hlZFJlcXVlc3RJbnN0YW5jZSIsImdldE9ic2VydmVyQ291bnQiLCJnZXRPYnNlcnZhYmxlRm9yQ2FjaGVkUmVxdWVzdCIsImdldEFjdGl2ZVN0YXR1c09ic2VydmFibGVGb3JDYWNoZWRSZXF1ZXN0IiwiaXNSZXF1ZXN0QWN0aXZlIiwicmVzb2x2ZU9uTmV4dCIsIlBSRUZJWCIsImxvY2FsSUQiLCJSZWxheVN0b3JlUmVhY3RGbGlnaHRVdGlscyIsImNsb25lUmVsYXlIYW5kbGVTb3VyY2VGaWVsZCIsImNsb25lUmVsYXlTY2FsYXJIYW5kbGVTb3VyY2VGaWVsZCIsImdldE9wZXJhdGlvbiIsIlVOS05PV04iLCJnZW5lcmF0ZVR5cGVJRCIsImdldEFyZ3VtZW50VmFsdWVzIiwiRGF0YUNoZWNrZXIiLCJoYW5kbGVycyIsIm9wZXJhdGlvbkxvYWRlciIsInNob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzIiwiX21vc3RSZWNlbnRseUludmFsaWRhdGVkQXQiLCJfaGFuZGxlcnMiLCJfb3BlcmF0aW9uTG9hZGVyIiwiX3JlY29yZFNvdXJjZVByb3h5IiwiX3JlY29yZFdhc01pc3NpbmciLCJfdmFyaWFibGVzIiwiX3Nob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzIiwiX3RyYXZlcnNlIiwibW9zdFJlY2VudGx5SW52YWxpZGF0ZWRBdCIsIl9nZXRWYXJpYWJsZVZhbHVlIiwiX2hhbmRsZU1pc3NpbmciLCJfZ2V0RGF0YUZvckhhbmRsZXJzIiwiX2hhbmRsZU1pc3NpbmdTY2FsYXJGaWVsZCIsImFsaWFzIiwiX3RoaXMkX2dldERhdGFGb3JIYW5kIiwibmV3VmFsdWUiLCJfaGFuZGxlTWlzc2luZ0xpbmtGaWVsZCIsIl90aGlzJF9nZXREYXRhRm9ySGFuZDIiLCJfaGFuZGxlTWlzc2luZ1BsdXJhbExpbmtGaWVsZCIsIl90aGlzJF9nZXREYXRhRm9ySGFuZDMiLCJpbnZhbGlkYXRlZEF0IiwiZ2V0SW52YWxpZGF0aW9uRXBvY2giLCJfdHJhdmVyc2VTZWxlY3Rpb25zIiwiX2NoZWNrU2NhbGFyIiwiX2NoZWNrUGx1cmFsTGluayIsIl9jaGVja0xpbmsiLCJwYXNzaW5nVmFsdWUiLCJhYnN0cmFjdEtleSIsIkVOQUJMRV9QUkVDSVNFX1RZUEVfUkVGSU5FTUVOVCIsInJlY29yZFR5cGUiLCJ0eXBlSUQiLCJpbXBsZW1lbnRzSW50ZXJmYWNlIiwiaGFuZGxlRmllbGQiLCJfaGFuZGxlRmllbGQiLCJfY2hlY2tNb2R1bGVJbXBvcnQiLCJyZWNvcmRXYXNNaXNzaW5nIiwiX2Fic3RyYWN0S2V5IiwiX3JlY29yZFR5cGUiLCJfdHlwZUlEIiwiRU5BQkxFX1JFQUNUX0ZMSUdIVF9DT01QT05FTlRfRklFTEQiLCJfY2hlY2tGbGlnaHRGaWVsZCIsIm1vZHVsZUltcG9ydCIsIm9wZXJhdGlvbktleSIsImRvY3VtZW50TmFtZSIsIm9wZXJhdGlvblJlZmVyZW5jZSIsIm5vcm1hbGl6YXRpb25Sb290Tm9kZSIsImZpZWxkVmFsdWUiLCJ0cmVlIiwiUkVBQ1RfRkxJR0hUX1RSRUVfU1RPUkFHRV9LRVkiLCJyZWFjaGFibGVFeGVjdXRhYmxlRGVmaW5pdGlvbnMiLCJSRUFDVF9GTElHSFRfRVhFQ1VUQUJMRV9ERUZJTklUSU9OU19TVE9SQUdFX0tFWSIsInByZXZWYXJpYWJsZXMiLCJkZWZpbml0aW9uIiwiUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXIiLCJFeGVjdXRvciIsIm9wZXJhdGlvbkV4ZWN1dGlvbnMiLCJvcHRpbWlzdGljQ29uZmlnIiwicHVibGlzaFF1ZXVlIiwic2NoZWR1bGVyIiwib3BlcmF0aW9uVHJhY2tlciIsInRyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCIsImlzQ2xpZW50UGF5bG9hZCIsInJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplciIsInJlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyIiwiX3RyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCIsIl9pbmNyZW1lbnRhbFBheWxvYWRzUGVuZGluZyIsIl9pbmNyZW1lbnRhbFJlc3VsdHMiLCJfbmV4dFN1YnNjcmlwdGlvbklkIiwiX29wZXJhdGlvbiIsIl9vcGVyYXRpb25FeGVjdXRpb25zIiwiX29wZXJhdGlvblRyYWNrZXIiLCJfb3BlcmF0aW9uVXBkYXRlRXBvY2hzIiwiX29wdGltaXN0aWNVcGRhdGVzIiwiX3BlbmRpbmdNb2R1bGVQYXlsb2Fkc0NvdW50IiwiX3B1Ymxpc2hRdWV1ZSIsIl9zY2hlZHVsZXIiLCJfc3RhdGUiLCJfc3RvcmUiLCJfc3Vic2NyaXB0aW9ucyIsIl91cGRhdGVyIiwiX2lzQ2xpZW50UGF5bG9hZCIsIl9yZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIiLCJfcmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXIiLCJfaXNTdWJzY3JpcHRpb25PcGVyYXRpb24iLCJfY29tcGxldGUiLCJfbmV4dCIsIl9zdGFydCIsIl9wcm9jZXNzT3B0aW1pc3RpY1Jlc3BvbnNlIiwiY2FuY2VsIiwib3B0aW1pc3RpY1VwZGF0ZXMiLCJyZXZlcnRVcGRhdGUiLCJydW4iLCJfY29tcGxldGVPcGVyYXRpb25UcmFja2VyIiwiX3JldGFpbkRpc3Bvc2FibGUiLCJfdXBkYXRlQWN0aXZlU3RhdGUiLCJhY3RpdmVTdGF0ZSIsIl9zY2hlZHVsZSIsInRhc2siLCJfaWQyIiwiY2FuY2VsbGF0aW9uVG9rZW4iLCJzY2hlZHVsZSIsIl9pZCIsIl9oYW5kbGVOZXh0IiwiX21heWJlQ29tcGxldGVTdWJzY3JpcHRpb25PcGVyYXRpb25UcmFja2luZyIsIl9oYW5kbGVFcnJvclJlc3BvbnNlIiwicmVzcG9uc2VzIiwicmVzdWx0cyIsIm1lc3NhZ2VzIiwicmVzcG9uc2VXaXRoRGF0YSIsIl9oYW5kbGVPcHRpbWlzdGljUmVzcG9uc2VzIiwiX3Jlc3BvbnNlJGV4dGVuc2lvbnMiLCJyZXNwb25zZVBhcnQiLCJfcmVzcG9uc2VQYXJ0JGV4dGVuc2kiLCJpc09wdGltaXN0aWMiLCJyZXNwb25zZXNXaXRoRGF0YSIsIl94JGV4dGVuc2lvbnMiLCJpc19maW5hbCIsIl9wYXJ0aXRpb25HcmFwaFFMUmVzcCIsIm5vbkluY3JlbWVudGFsUmVzcG9uc2VzIiwiaW5jcmVtZW50YWxSZXNwb25zZXMiLCJsYWJlbCIsInBhcnRpdGlvbkdyYXBoUUxSZXNwb25zZXMiLCJoYXNOb25JbmNyZW1lbnRhbFJlc3BvbnNlcyIsInBheWxvYWRGb2xsb3d1cHMiLCJfcHJvY2Vzc1Jlc3BvbnNlcyIsIkVOQUJMRV9CQVRDSEVEX1NUT1JFX1VQREFURVMiLCJ1cGRhdGVkT3duZXJzIiwiX3VwZGF0ZU9wZXJhdGlvblRyYWNrZXIiLCJfcHJvY2Vzc1BheWxvYWRGb2xsb3d1cHMiLCJfcGF5bG9hZEZvbGxvd3VwcyIsIl9wcm9jZXNzSW5jcmVtZW50YWxSZXNwb25zZXMiLCJfdXBkYXRlZE93bmVycyIsIkVOQUJMRV9VTklRVUVfU1VCU0NSSVBUSU9OX1JPT1QiLCJfX3JlbGF5X3N1YnNjcmlwdGlvbl9yb290X2lkIiwiX3VwZGF0ZWRPd25lcnMyIiwibm9ybWFsaXplUmVzcG9uc2UiLCJ2YWxpZGF0ZU9wdGltaXN0aWNSZXNwb25zZVBheWxvYWQiLCJfcHJvY2Vzc09wdGltaXN0aWNGb2xsb3d1cHMiLCJpbmNyZW1lbnRhbFBsYWNlaG9sZGVycyIsIm1vZHVsZUltcG9ydFBheWxvYWRzIiwiaXNGaW5hbCIsImFwcGx5VXBkYXRlIiwibW9kdWxlSW1wb3J0UGF5bG9hZCIsIl9wcm9jZXNzQXN5bmNPcHRpbWlzdGljTW9kdWxlSW1wb3J0IiwibW9kdWxlSW1wb3J0T3B0aW1pc3RpY1VwZGF0ZXMiLCJfcHJvY2Vzc09wdGltaXN0aWNNb2R1bGVJbXBvcnQiLCJfbm9ybWFsaXplTW9kdWxlSW1wb3J0IiwibW9kdWxlUGF5bG9hZCIsIl90aGlzJF9vcHRpbWlzdGljVXBkYSIsInBheWxvYWRQYXJ0IiwicmVsYXlQYXlsb2FkIiwiY29tbWl0UGF5bG9hZCIsInBheWxvYWRzIiwiX3Byb2Nlc3NNb2R1bGVJbXBvcnRQYXlsb2FkIiwiaW5jcmVtZW50YWxQbGFjZWhvbGRlciIsIl9wcm9jZXNzSW5jcmVtZW50YWxQbGFjZWhvbGRlciIsInJlbGF5UGF5bG9hZHMiLCJwbGFjZWhvbGRlciIsIl9wcm9jZXNzRGVmZXJSZXNwb25zZSIsIl90aGlzMTAiLCJfaGFuZGxlTW9kdWxlSW1wb3J0UGF5bG9hZCIsIl9pZDMiLCJkZWNyZW1lbnRQZW5kaW5nQ291bnQiLCJfZXJyb3I0IiwiX3JlbGF5UGF5bG9hZCRmaWVsZFBhIiwicGF0aEtleSIsInJlc3VsdEZvckxhYmVsIiwicmVzdWx0Rm9yUGF0aCIsInBlbmRpbmdSZXNwb25zZXMiLCJuZXh0UGFyZW50UmVjb3JkIiwibmV4dFBhcmVudFBheWxvYWRzIiwicGFyZW50UmVjb3JkIiwicGFyZW50UGF5bG9hZHMiLCJmaWVsZElEIiwicHJldmlvdXNQYXJlbnRFbnRyeSIsImhhbmRsZVBheWxvYWRzIiwiZGVkdXBlUGF5bG9hZCIsIl9KU09OJHN0cmluZ2lmeSIsIl90aGlzMTEiLCJpbmNyZW1lbnRhbFJlc3BvbnNlIiwiX3BhdGhLZXkiLCJfcmVzdWx0Rm9yUGF0aCIsIl9wbGFjZWhvbGRlciIsIl9wcm9jZXNzU3RyZWFtUmVzcG9uc2UiLCJwYXJlbnRFbnRyeSIsIl9yZXNwb25zZSRleHRlbnNpb25zMiIsImhhbmRsZUZpZWxkc1JlbGF5UGF5bG9hZCIsIl90aGlzJF9ub3JtYWxpemVTdHJlYSIsIl9ub3JtYWxpemVTdHJlYW1JdGVtIiwiaXRlbUlEIiwiaXRlbUluZGV4IiwiY3VycmVudFBhcmVudFJlY29yZCIsImN1cnJlbnRJdGVtcyIsImN1cnJlbnRJdGVtIiwibmV4dEl0ZW1zIiwibm9ybWFsaXphdGlvblBhdGgiLCJfZmllbGQkYWxpYXMiLCJfZmllbGQkY29uY3JldGVUeXBlIiwiX3RoaXMkX2dldERhdGFJRCIsInJlc3BvbnNlS2V5IiwiZmluYWxQYXRoRW50cnkiLCJwYXJzZUludCIsImNvbmNyZXRlVHlwZSIsIl9yZXNwb25zZSRleHRlbnNpb25zMyIsIm5vcm1hbGl6ZSIsImFyZ3VtZW50VmFyaWFibGVzIiwiYXJndW1lbnREZWZpbml0aW9ucyIsIm9wZXJhdGlvblZhcmlhYmxlcyIsImRlZiIsIk9wZXJhdGlvbkV4ZWN1dG9yIiwiUmVsYXlQdWJsaXNoUXVldWUiLCJkZWZhdWx0R2V0RGF0YUlEIiwiZGVmYXVsdFJlcXVpcmVkRmllbGRMb2dnZXIiLCJnZW5lcmF0ZUlEIiwiX2NvbmZpZyRsb2ciLCJfY29uZmlnJHJlcXVpcmVkRmllbGQiLCJfY29uZmlnJFVOU1RBQkxFX2RlZmEiLCJfY29uZmlnJGdldERhdGFJRCIsIl9jb25maWckaGFuZGxlclByb3ZpZCIsIl9jb25maWckc2NoZWR1bGVyIiwiX2NvbmZpZyRpc1NlcnZlciIsIl9jb25maWckb3BlcmF0aW9uVHJhYyIsImNvbmZpZ05hbWUiLCJyZXF1aXJlZEZpZWxkTG9nZ2VyIiwiX2RlZmF1bHRSZW5kZXJQb2xpY3kiLCJVTlNUQUJMRV9kZWZhdWx0UmVuZGVyUG9saWN5IiwiRU5BQkxFX1BBUlRJQUxfUkVOREVSSU5HX0RFRkFVTFQiLCJfbmV0d29yayIsIl9fd3JhcE5ldHdvcmtXaXRoTG9nT2JzZXJ2ZXIiLCJuZXR3b3JrIiwiX2lzU2VydmVyIiwiX19zZXROZXQiLCJuZXdOZXQiLCJfZ2xvYmFsIiwiZGV2VG9vbHNIb29rIiwiX19SRUxBWV9ERVZUT09MU19IT09LX18iLCJyZWdpc3RlckVudmlyb25tZW50IiwiX21pc3NpbmdGaWVsZEhhbmRsZXJzIiwibWlzc2luZ0ZpZWxkSGFuZGxlcnMiLCJyZXF1ZXN0SWRlbnRpZmllciIsIm9wdGltaXN0aWNVcGRhdGUiLCJfc2NoZWR1bGVVcGRhdGVzIiwicmVwbGFjZVVwZGF0ZSIsIm5ld1VwZGF0ZSIsIl9leGVjdXRlIiwiY3JlYXRlU291cmNlIiwiX2NoZWNrU2VsZWN0b3JBbmRIYW5kbGVNaXNzaW5nRmllbGRzIiwiY29tbWl0U291cmNlIiwiX3JlZjMiLCJ0b0pTT04iLCJfdGhpcyRjb25maWdOYW1lIiwiX3JlZjQiLCJleGVjdXRvciIsInRoYXQiLCJ0cmFuc2FjdGlvbklEIiwibG9nT2JzZXJ2ZXIiLCJSZWxheU1vZGVybkZyYWdtZW50U3BlY1Jlc29sdmVyIiwiX3N0YWxlIiwiX2NhbGxiYWNrIiwiX2RhdGEiLCJfZnJhZ21lbnRzIiwiX3Byb3BzIiwiX3Jlc29sdmVycyIsIl9yb290SXNRdWVyeVJlbmRlcmVyIiwiZGlzcG9zZUNhbGxiYWNrIiwiX2tleTIiLCJwcmV2SXRlbSIsIm5leHRJdGVtIiwicHJvcCIsIl9uZXh0SXRlbSIsIm93bmVkU2VsZWN0b3JzIiwiX2tleTMiLCJvd25lZFNlbGVjdG9yIiwiU2VsZWN0b3JMaXN0UmVzb2x2ZXIiLCJfb25DaGFuZ2UiLCJzZXRTZWxlY3RvciIsIlNlbGVjdG9yUmVzb2x2ZXIiLCJfa2V5NCIsIl9pc01pc3NpbmdEYXRhIiwiX21pc3NpbmdSZXF1aXJlZEZpZWxkcyIsIl9zZWxlY3RvciIsIl9zdWJzY3JpcHRpb24iLCJfcHJvdG8yIiwiRU5BQkxFX1JFTEFZX0NPTlRBSU5FUlNfU1VTUEVOU0UiLCJyZXF1ZXN0RGVzY3JpcHRvciIsIl9wcm90bzMiLCJvcGVyYXRpb25EZXNjcmlwdG9yIiwiSU5WQUxJREFURURfQVRfS0VZIiwibGlua3MiLCJtZXJnZSIsInJlY29yZDEiLCJyZWNvcmQyIiwicHJldlJlY29yZCIsIm5leHRSZWNvcmQiLCJ1cGRhdGVkIiwiSVNfV0lUSElOX1VOTUFUQ0hFRF9UWVBFX1JFRklORU1FTlQiLCJtaXhlZE93bmVyIiwiaXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudCIsIml0ZW1zIiwiaWRzIiwiaXRlbVZhcmlhYmxlcyIsInRoaXNTZWxlY3RvciIsInRoYXRTZWxlY3RvciIsIlJlbGF5T3B0aW1pc3RpY1JlY29yZFNvdXJjZSIsIlJlbGF5UmVhZGVyIiwiUmVsYXlSZWZlcmVuY2VNYXJrZXIiLCJSZWxheVN0b3JlU3Vic2NyaXB0aW9ucyIsIlJlbGF5U3RvcmVTdWJzY3JpcHRpb25zVXNpbmdNYXBCeUlEIiwicmVzb2x2ZUltbWVkaWF0ZSIsIl9vcHRpb25zJGdjUmVsZWFzZUJ1ZiIsIl9vcHRpb25zJGdjU2NoZWR1bGVyIiwiX29wdGlvbnMkZ2V0RGF0YUlEIiwiX29wdGlvbnMkbG9nIiwiX29wdGlvbnMkb3BlcmF0aW9uTG9hIiwiX2djUnVuIiwiX2djU2NoZWR1bGVyIiwiX2djU3RlcCIsIl9jdXJyZW50V3JpdGVFcG9jaCIsIl9nY0hvbGRDb3VudGVyIiwiX2djUmVsZWFzZUJ1ZmZlclNpemUiLCJnY1JlbGVhc2VCdWZmZXJTaXplIiwiZ2NTY2hlZHVsZXIiLCJfZ2xvYmFsSW52YWxpZGF0aW9uRXBvY2giLCJfaW52YWxpZGF0aW9uU3Vic2NyaXB0aW9ucyIsIl9pbnZhbGlkYXRlZFJlY29yZElEcyIsIl9xdWVyeUNhY2hlRXhwaXJhdGlvblRpbWUiLCJxdWVyeUNhY2hlRXhwaXJhdGlvblRpbWUiLCJfb3B0aW1pc3RpY1NvdXJjZSIsIl9yZWNvcmRTb3VyY2UiLCJfcmVsZWFzZUJ1ZmZlciIsIl9yb290cyIsIl9zaG91bGRTY2hlZHVsZUdDIiwiX3N0b3JlU3Vic2NyaXB0aW9ucyIsIkVOQUJMRV9TVE9SRV9TVUJTQ1JJUFRJT05TX1JFRkFDVE9SIiwiX3VwZGF0ZWRSZWNvcmRJRHMiLCJyb290UmVjb3JkIiwiaW5pdGlhbGl6ZVJlY29yZFNvdXJjZSIsImdldFNvdXJjZSIsIl90aGlzJF9vcHRpbWlzdGljU291ciIsIl90aGlzJF9vcHRpbWlzdGljU291cjIiLCJfb3B0aW9ucyR0YXJnZXQiLCJfb3B0aW9ucyRoYW5kbGVycyIsImdsb2JhbEludmFsaWRhdGlvbkVwb2NoIiwicm9vdEVudHJ5Iiwib3BlcmF0aW9uTGFzdFdyaXR0ZW5BdCIsImVwb2NoIiwib3BlcmF0aW9uQXZhaWxhYmlsaXR5Iiwib3BlcmF0aW9uRmV0Y2hUaW1lIiwiZ2V0QXZhaWxhYmlsaXR5U3RhdHVzIiwicmVmQ291bnQiLCJzY2hlZHVsZUdDIiwibm90aWZ5Iiwic291cmNlT3BlcmF0aW9uIiwidXBkYXRlU3Vic2NyaXB0aW9ucyIsIl91cGRhdGVJbnZhbGlkYXRpb25TdWJzY3JpcHRpb24iLCJ1cGRhdGVkUmVjb3JkSURzIiwiaW52YWxpZGF0ZWRSZWNvcmRJRHMiLCJ0ZW1wb3JhcnlSb290RW50cnkiLCJwdWJsaXNoIiwiaWRzTWFya2VkRm9ySW52YWxpZGF0aW9uIiwiX3RoaXMkX29wdGltaXN0aWNTb3VyMyIsImN1cnJlbnRXcml0ZUVwb2NoIiwidGFyZ2V0UmVjb3JkIiwiUkVBQ1RfRkxJR0hUX1RZUEVfTkFNRSIsInVwZGF0ZVRhcmdldEZyb21Tb3VyY2UiLCJvcHRpbWlzdGljIiwiaG9sZEdDIiwiX19nZXRVcGRhdGVkUmVjb3JkSURzIiwiaW52YWxpZGF0aW9ucyIsIl9SZWxheU1vZGVyblJlY29yZCRnZSIsImNoZWNrSW52YWxpZGF0aW9uU3RhdGUiLCJwcmV2SW52YWxpZGF0aW9uU3RhdGUiLCJjdXJyZW50SW52YWxpZGF0aW9ucyIsInByZXZJbnZhbGlkYXRpb25zIiwiaW52YWxpZGF0ZWRTdG9yZSIsInNuYXBzaG90U3Vic2NyaXB0aW9ucyIsInJlc3RvcmUiLCJyZXN0b3JlU3Vic2NyaXB0aW9ucyIsIl9jb2xsZWN0IiwiX19nYyIsImdjUnVuIiwic3RhcnRFcG9jaCIsInJlZmVyZW5jZXMiLCJtYXJrIiwic3RvcmVJRHMiLCJyZW1vdmUiLCJfb3duZXJzVG9QZW5kaW5nT3BlcmF0aW9uc0lkZW50aWZpZXIiLCJfcGVuZGluZ09wZXJhdGlvbnNUb093bmVyc0lkZW50aWZpZXIiLCJfb3duZXJzSWRlbnRpZmllclRvUHJvbWlzZSIsInBlbmRpbmdPcGVyYXRpb24iLCJhZmZlY3RlZE93bmVycyIsInBlbmRpbmdPcGVyYXRpb25JZGVudGlmaWVyIiwibmV3bHlBZmZlY3RlZE93bmVyc0lkZW50aWZpZXIiLCJvd25lcklkZW50aWZpZXIiLCJwZW5kaW5nT3BlcmF0aW9uc0FmZmVjdGluZ093bmVyIiwib3duZXJzQWZmZWN0ZWRCeU9wZXJhdGlvbklkZW50aWZpZXIiLCJfb3duZXJJZGVudGlmaWVyIiwiX3Jlc29sdmVPd25lclJlc29sdmVycyIsImFmZmVjdGVkT3duZXJzSWRlbnRpZmllciIsImNvbXBsZXRlZE93bmVyc0lkZW50aWZpZXIiLCJ1cGRhdGVkT3duZXJzSWRlbnRpZmllciIsIl9vd25lcklkZW50aWZpZXIyIiwiX293bmVySWRlbnRpZmllcjMiLCJwcm9taXNlRW50cnkiLCJjYWNoZWRQcm9taXNlRW50cnkiLCJVTlBVQkxJU0hfUkVDT1JEX1NFTlRJTkVMIiwiX19VTlBVQkxJU0hfUkVDT1JEX1NFTlRJTkVMIiwibWVyZ2VkIiwiX2dsb2JhbCRFcnJvclV0aWxzJGFwIiwiX2dsb2JhbCRFcnJvclV0aWxzIiwiYXBwbHlXaXRoR3VhcmQiLCJFcnJvclV0aWxzIiwiX2hhc1N0b3JlU25hcHNob3QiLCJfcGVuZGluZ0JhY2t1cFJlYmFzZSIsIl9wZW5kaW5nRGF0YSIsIl9wZW5kaW5nT3B0aW1pc3RpY1VwZGF0ZXMiLCJfYXBwbGllZE9wdGltaXN0aWNVcGRhdGVzIiwiX2djSG9sZCIsInJldmVydEFsbCIsIl9jb21taXREYXRhIiwiX2FwcGx5VXBkYXRlcyIsIl9wdWJsaXNoU291cmNlRnJvbVBheWxvYWQiLCJwZW5kaW5nUGF5bG9hZCIsInJlY29yZFNvdXJjZVByb3h5IiwibG9va3VwU2VsZWN0b3IiLCJwYXlsb2FkSW52YWxpZGF0ZWRTdG9yZSIsInByb2Nlc3NVcGRhdGUiLCJzdG9yZVVwZGF0ZXIiLCJzZWxlY3RvckRhdGEiLCJyZWNvcmRTb3VyY2VTZWxlY3RvclByb3h5IiwiSU5MSU5FX0RBVEFfRlJBR01FTlRfU1BSRUFEIiwiUkVRVUlSRURfRklFTEQiLCJSRUxBWV9SRVNPTFZFUiIsImdldFJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2UiLCJGUkFHTUVOVF9QUk9QX05BTUVfS0VZIiwiTU9EVUxFX0NPTVBPTkVOVF9LRVkiLCJ3aXRoUmVzb2x2ZXJDb250ZXh0IiwiX2lzV2l0aGluVW5tYXRjaGVkVHlwZVJlZmluZW1lbnQiLCJfc2VlblJlY29yZHMiLCJfdGhpcyRfc2VsZWN0b3IiLCJpc0RhdGFFeHBlY3RlZFRvQmVQcmVzZW50IiwidHlwZVJlY29yZCIsIl9tYXliZVJlcG9ydFVuZXhwZWN0ZWROdWxsIiwiZmllbGRQYXRoIiwiX3RoaXMkX21pc3NpbmdSZXF1aXJlIiwiZmllbGRzIiwiRU5BQkxFX1JFUVVJUkVEX0RJUkVDVElWRVMiLCJfcmVhZFJlcXVpcmVkRmllbGQiLCJfcmVhZFNjYWxhciIsIl9yZWFkUGx1cmFsTGluayIsIl9yZWFkTGluayIsInBhcmVudElzTWlzc2luZ0RhdGEiLCJwYXJlbnRJc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50IiwiX3R5cGVOYW1lIiwiRU5BQkxFX1JFTEFZX1JFU09MVkVSUyIsIl9yZWFkUmVzb2x2ZXJGaWVsZCIsIl9jcmVhdGVGcmFnbWVudFBvaW50ZXIiLCJfcmVhZE1vZHVsZUltcG9ydCIsIl9jcmVhdGVJbmxpbmVEYXRhT3JSZXNvbHZlckZyYWdtZW50UG9pbnRlciIsIl9oYXNFeHBlY3RlZERhdGEyIiwiX3JlYWRGbGlnaHRGaWVsZCIsInJlc29sdmVyTW9kdWxlIiwicmVzb2x2ZXJSZXN1bHQiLCJnZXREYXRhRm9yUmVzb2x2ZXJGcmFnbWVudCIsInNpbmd1bGFyUmVhZGVyU2VsZWN0b3IiLCJfcmVzb2x2ZXJGcmFnbWVudERhdGEiLCJyZXNvbHZlckZyYWdtZW50RGF0YSIsImFuc3dlciIsImFwcGxpY2F0aW9uTmFtZSIsInJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmRJRCIsInJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmQiLCJjbGllbnRSZXNwb25zZSIsIl9maWVsZCRhbGlhczIiLCJfZmllbGQkYWxpYXMzIiwiX2ZpZWxkJGFsaWFzNCIsImxpbmtlZEFycmF5IiwibmV4dEluZGV4IiwiY29tcG9uZW50S2V5IiwiZnJhZ21lbnRQcm9wTmFtZSIsImZyYWdtZW50U3ByZWFkIiwiZnJhZ21lbnRQb2ludGVycyIsImZyYWdtZW50U3ByZWFkT3JGcmFnbWVudCIsImlubGluZURhdGEiLCJSZWxheVJlY29yZFNvdXJjZU1hcEltcGwiLCJSZWxheVJlY29yZFN0YXRlIiwiUmVsYXlNYXBSZWNvcmRTb3VyY2VNYXBJbXBsIiwiX3JlY29yZHMiLCJfc3RlcCR2YWx1ZSIsIl9vcGVyYXRpb25OYW1lIiwiX3JlZmVyZW5jZXMiLCJfdHJhdmVyc2VQbHVyYWxMaW5rIiwiX3RyYXZlcnNlTGluayIsIl90eXBlTmFtZTIiLCJfdHJhdmVyc2VNb2R1bGVJbXBvcnQiLCJfdHJhdmVyc2VGbGlnaHRGaWVsZCIsInJlZmluZVRvUmVhY3RGbGlnaHRQYXlsb2FkRGF0YSIsIl9yZXF1aXJlNSIsImdldEhhbmRsZVN0b3JhZ2VLZXkiLCJfcmVxdWlyZTYiLCJUWVBFX1NDSEVNQV9UWVBFIiwiX2dldERhdGFJZCIsIl9oYW5kbGVGaWVsZFBheWxvYWRzIiwiX2luY3JlbWVudGFsUGxhY2Vob2xkZXJzIiwiX2lzQ2xpZW50RXh0ZW5zaW9uIiwiX2lzVW5tYXRjaGVkQWJzdHJhY3RUeXBlIiwiX21vZHVsZUltcG9ydFBheWxvYWRzIiwiX3BhdGgiLCJfZ2V0UmVjb3JkVHlwZSIsIl9ub3JtYWxpemVGaWVsZCIsIl9pbXBsZW1lbnRzSW50ZXJmYWNlIiwicGFyZW50SXNVbm1hdGNoZWRBYnN0cmFjdFR5cGUiLCJfaW1wbGVtZW50c0ludGVyZmFjZTIiLCJfdHlwZU5hbWUzIiwiX3R5cGVSZWNvcmQiLCJfbm9ybWFsaXplRGVmZXIiLCJfbm9ybWFsaXplU3RyZWFtIiwiaXNDbGllbnRFeHRlbnNpb24iLCJfbm9ybWFsaXplRmxpZ2h0RmllbGQiLCJkZWZlciIsImNvbXBvbmVudFJlZmVyZW5jZSIsIl9ub3JtYWxpemVQbHVyYWxMaW5rIiwiX25vcm1hbGl6ZUxpbmsiLCJyZWFjdEZsaWdodFBheWxvYWQiLCJyZWFjdEZsaWdodElEIiwicmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZSIsIl9fdHlwZW5hbWUiLCJfdHlwZU5hbWU0IiwiX2ZpZWxkJGNvbmNyZXRlVHlwZTIiLCJfdHlwZU5hbWU1IiwiX3ZhbGlkYXRlUmVjb3JkVHlwZSIsIl9maWVsZCRjb25jcmV0ZVR5cGUzIiwiX3ZhbGlkYXRlQ29uZmxpY3RpbmdGaWVsZHNXaXRoSWRlbnRpY2FsSWQiLCJfdmFsaWRhdGVDb25mbGljdGluZ0xpbmtlZEZpZWxkc1dpdGhJZGVudGljYWxJZCIsInByZXZJRCIsImhhc092ZXJsYXBwaW5nSURzIiwiYmFja3VwIiwic3RhbGUiLCJoYXNVcGRhdGVkUmVjb3JkcyIsIl91cGRhdGVTdWJzY3JpcHRpb24iLCJoYXNPdmVybGFwcGluZ1VwZGF0ZXMiLCJuZXh0U25hcHNob3QiLCJFTkFCTEVfTk9USUZZX1NVQlNDUklQVElPTiIsIl9ub3RpZmllZFJldmlzaW9uIiwiX3NuYXBzaG90UmV2aXNpb24iLCJfc3Vic2NyaXB0aW9uc0J5RGF0YUlkIiwiX3N0YWxlU3Vic2NyaXB0aW9ucyIsIm5vdGlmaWVkUmV2aXNpb24iLCJzbmFwc2hvdFJldmlzaW9uIiwiZGF0YUlkIiwic3Vic2NyaXB0aW9uc0ZvckRhdGFJZCIsInByZXZTZWVuUmVjb3JkcyIsIl91cGRhdGVTdWJzY3JpcHRpb25zTWFwIiwidXBkYXRlZFJlY29yZElkIiwic3ViY3JpcHRpb25zRm9yRGF0YUlkIiwiX2RhdGFJZCIsIl9zdWJzY3JpcHRpb25zRm9yRGF0YUlkIiwiVkFSSUFCTEUiLCJMSVRFUkFMIiwiT0JKRUNUX1ZBTFVFIiwiTElTVF9WQUxVRSIsImdldEFyZ3VtZW50VmFsdWUiLCJnZXRTdGFibGVWYXJpYWJsZVZhbHVlIiwidmFyaWFibGVOYW1lIiwiX3ZhbHVlIiwiZm9ybWF0U3RvcmFnZUtleSIsImFyZ1ZhbHVlcyIsImFyZ05hbWUiLCJkeW5hbWljS2V5IiwiaGFuZGxlTmFtZSIsImZpbHRlckFyZ3MiLCJjb250ZXh0U3RhY2siLCJyZWFkRnJhZ21lbnQiLCJpc1R5cGVJRCIsInNvdXJjZUZpZWxkIiwiZmlyc3RSZWFjdCIsInJlYWN0IiwiSVRFUkFUT1JfS0VZIiwiQm9vbGVhbiIsIl9mcmFnbWVudFJlZiRGUkFHTUVOVCIsImlubGluZURhdGFGcmFnbWVudCIsIl9yZXNwb25zZXMkIiwiX3Jlc3BvbnNlcyQkZXh0ZW5zaW9uIiwiX3Jlc3BvbnNlcyRleHRlbnNpb25zIiwiTE9DQUxfQVJHVU1FTlQiLCJPUEVSQVRJT04iLCJST09UX0FSR1VNRU5UIiwiU1BMSVRfT1BFUkFUSU9OIiwiY3JlYXRlRXJyb3IiLCJtZXNzYWdlRm9ybWF0IiwiX2xlbiIsIm1lc3NhZ2VQYXJhbXMiLCJ0YWFsT3Bjb2RlcyIsIl9sZW4yIiwiY3JlYXRlV2FybmluZyIsIl9sZW4zIiwiRU5BQkxFX1ZBUklBQkxFX0NPTk5FQ1RJT05fS0VZIiwiRU5BQkxFX0dFVEZSQUdNRU5USURFTlRJRklFUl9PUFRJTUlaQVRJT04iLCJFTkFCTEVfRlJJRU5ETFlfUVVFUllfTkFNRV9HUUxfVVJMIiwiRU5BQkxFX0RPX05PVF9XUkFQX0xJVkVfUVVFUlkiLCJwcm9maWxlSGFuZGxlcnNCeU5hbWUiLCJkZWZhdWx0UHJvZmlsZXIiLCJzdG9wIiwicHJvZmlsZSIsInN0b3BIYW5kbGVycyIsInN0b3BIYW5kbGVyIiwiYXR0YWNoUHJvZmlsZUhhbmRsZXIiLCJkZXRhY2hQcm9maWxlSGFuZGxlciIsIl9vYnNlcnZhYmxlIiwiX3NpbmtzIiwiZXZlbnRzIiwiX2V2ZW50cyIsInByb3BlcnR5IiwiaXNGcm96ZW4iLCJpc0VtcHR5T2JqZWN0IiwiZnJhZ21lbnRPd25lcklkZW50aWZpZXIiLCJzZWwiLCJyZXF1ZXN0SUQiLCJ2YWx1ZUEiLCJ2YWx1ZUIiLCJoYXNXZWFrU2V0RGVmaW5lZCIsImhhc1dlYWtNYXBEZWZpbmVkIiwiY2FuUmVjeWNsZSIsInByZXZBcnJheSIsIm5leHRBcnJheSIsInJlZHVjZSIsIndhc0VxdWFsIiwibmV4dFZhbHVlIiwicHJldk9iamVjdCIsIm5leHRPYmplY3QiLCJwcmV2S2V5cyIsIm5leHRLZXlzIiwiX21pc3NpbmdSZXF1aXJlZEZpZWxkIiwicmVzb2x2ZWRQcm9taXNlIiwidGhyb3dOZXh0Iiwic3RhYmxlIiwicGVyZm9ybWFuY2UiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmbG9vciIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJ0b1N0cmluZ1RhZyIsImFzeW5jIiwiaGVhZGVycyIsImpzb24iLCJ3YXJuIiwiZmV0Y2hHcmFwaFFMIiwiX2luaGVyaXRzTG9vc2UiLCJpc0Fic29sdXRlIiwicGF0aG5hbWUiLCJzcGxpY2VPbmUiLCJsaXN0IiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJoYXNUcmFpbGluZ1NsYXNoIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwidXAiLCJwYXJ0IiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsIm5vdGlmeUxpc3RlbmVycyIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJ0cmFuc2l0aW9uTWFuYWdlciIsImhhbmRsZVBvcFN0YXRlIiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwicmV2ZXJ0UG9wIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImlzQmxvY2tlZCIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiTUFYX1NJR05FRF8zMV9CSVRfSU5UIiwiY29tbW9uanNHbG9iYWwiLCJjcmVhdGVFdmVudEVtaXR0ZXIiLCJvbiIsIm9mZiIsImNoYW5nZWRCaXRzIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIl9Db21wb25lbnQiLCJlbWl0dGVyIiwib2xkVmFsdWUiLCJfQ29tcG9uZW50MiIsIm9uVXBkYXRlIiwiaGlzdG9yeUNvbnRleHQiLCJjcmVhdGVOYW1lZENvbnRleHQiLCJjcmVhdGVOYW1lZENvbnRleHQkMSIsIlJvdXRlciIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsImNvbXB1dGVSb290TWF0Y2giLCJpc0V4YWN0IiwiY2FjaGUkMSIsImNhY2hlQ291bnQkMSIsIm1hdGNoUGF0aCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJtYXRjaGVkIiwiX2NvbXBpbGVQYXRoIiwicGF0aENhY2hlIiwicmVnZXhwIiwiY29tcGlsZVBhdGgkMSIsIlJvdXRlIiwiY29udGV4dCQxIiwiY29tcHV0ZWRNYXRjaCIsIlN3aXRjaCIsIkJyb3dzZXJSb3V0ZXIiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsIm5vcm1hbGl6ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJpbm5lclJlZiIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIkY29tcG9uZW50IiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIl9yZWYkYXJpYUN1cnJlbnQiLCJhcmlhQ3VycmVudCIsIl9yZWYkYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJjbGFzc05hbWVQcm9wIiwiaXNBY3RpdmVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3R5bGVQcm9wIiwiZXNjYXBlZFBhdGgiLCJjbGFzc25hbWVzIiwiam9pbkNsYXNzbmFtZXMiLCJBUFBfRE9NQUlOIiwicHJvY2VzcyIsIk9BVVRIX0xPR0lOX1VSTCIsIkdJVEhVQl9PQVVUSF9DTElFTlRfSUQiLCJvcGVuIiwiaGFuZGxlUG9zdE1lc3NhZ2UiLCJvcmlnaW4iLCJhY2Nlc3NUb2tlbiIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJMb2dpblJlc3VsdCIsIm9wZW5lciIsImNsb3NlIiwiVVJMU2VhcmNoUGFyYW1zIiwibG9naW4iLCJxdWVzdGlvbiIsInRpdGxlIiwiY29udGVudCIsIkNvbXAiLCJhbGxRdWVzdGlvbnMiLCJFeGFtcGxlUGFnZSIsIkxvZ2luUGFnZSIsIkxvZ2luQ2FsbGJhY2tQYWdlIiwicm9vdEVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiUmVhY3RET00iXSwibWFwcGluZ3MiOiI7dUVBbUNBLE1BQU1BLEVBUUssQ0FDSCxTQUFZLENBQ1Isb0JBQXVCLEdBQ3ZCLEtBQVEsV0FDUixTQUFZLEtBQ1osS0FBUSxtQkFDUixXQUFjLENBQ1YsQ0FDSSxNQUFTLEtBQ1QsS0FBUSxLQUNSLGFBQWdCLFdBQ2hCLEtBQVEs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RU9yQk8sU0FDRSxnQkFBQyxFQUFBM3VELHlCQUFELENBQTBCclAsWUFBYXk1QixHQUNyQyxnQkFBQyxHQUFELE9BRUZxa0MsSyIsImZpbGUiOiJtYWluLmM5MGZjYTc1OWVjOTM3MmYwMGFiLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuXG5pbXBvcnQgeyBDb25jcmV0ZVJlcXVlc3QgfSBmcm9tIFwicmVsYXktcnVudGltZVwiO1xuaW1wb3J0IHsgRnJhZ21lbnRSZWZzIH0gZnJvbSBcInJlbGF5LXJ1bnRpbWVcIjtcbmV4cG9ydCB0eXBlIEV4YW1wbGVQYWdlUXVlcnlWYXJpYWJsZXMgPSB7fTtcbmV4cG9ydCB0eXBlIEV4YW1wbGVQYWdlUXVlcnlSZXNwb25zZSA9IHtcbiAgICByZWFkb25seSBhbGxRdWVzdGlvbnM6IFJlYWRvbmx5QXJyYXk8e1xuICAgICAgICByZWFkb25seSBpZDogc3RyaW5nO1xuICAgICAgICByZWFkb25seSBcIiAkZnJhZ21lbnRSZWZzXCI6IEZyYWdtZW50UmVmczxcIlF1ZXN0aW9uX3F1ZXN0aW9uXCI+O1xuICAgIH0+O1xufTtcbmV4cG9ydCB0eXBlIEV4YW1wbGVQYWdlUXVlcnkgPSB7XG4gICAgcmVhZG9ubHkgcmVzcG9uc2U6IEV4YW1wbGVQYWdlUXVlcnlSZXNwb25zZTtcbiAgICByZWFkb25seSB2YXJpYWJsZXM6IEV4YW1wbGVQYWdlUXVlcnlWYXJpYWJsZXM7XG59O1xuXG5cblxuLypcbnF1ZXJ5IEV4YW1wbGVQYWdlUXVlcnkge1xuICBhbGxRdWVzdGlvbnMge1xuICAgIGlkXG4gICAgLi4uUXVlc3Rpb25fcXVlc3Rpb25cbiAgfVxufVxuXG5mcmFnbWVudCBRdWVzdGlvbl9xdWVzdGlvbiBvbiBRdWVzdGlvbiB7XG4gIGlkXG4gIHRpdGxlXG4gIGNvbnRlbnRcbn1cbiovXG5cbmNvbnN0IG5vZGU6IENvbmNyZXRlUmVxdWVzdCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHYwID0ge1xuICAgICAgICBcImFsaWFzXCI6IG51bGwsXG4gICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICBcImtpbmRcIjogXCJTY2FsYXJGaWVsZFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJpZFwiLFxuICAgICAgICBcInN0b3JhZ2VLZXlcIjogbnVsbFxuICAgIH0gYXMgYW55O1xuICAgIHJldHVybiB7XG4gICAgICAgIFwiZnJhZ21lbnRcIjoge1xuICAgICAgICAgICAgXCJhcmd1bWVudERlZmluaXRpb25zXCI6IFtdLFxuICAgICAgICAgICAgXCJraW5kXCI6IFwiRnJhZ21lbnRcIixcbiAgICAgICAgICAgIFwibWV0YWRhdGFcIjogbnVsbCxcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkV4YW1wbGVQYWdlUXVlcnlcIixcbiAgICAgICAgICAgIFwic2VsZWN0aW9uc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImFsaWFzXCI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBcImNvbmNyZXRlVHlwZVwiOiBcIlF1ZXN0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIFwia2luZFwiOiBcIkxpbmtlZEZpZWxkXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFsbFF1ZXN0aW9uc1wiLFxuICAgICAgICAgICAgICAgICAgICBcInBsdXJhbFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcInNlbGVjdGlvbnNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgKHYwIC8qOiBhbnkqLyksXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmdzXCI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJraW5kXCI6IFwiRnJhZ21lbnRTcHJlYWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJRdWVzdGlvbl9xdWVzdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIFwic3RvcmFnZUtleVwiOiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIlF1ZXJ5XCIsXG4gICAgICAgICAgICBcImFic3RyYWN0S2V5XCI6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IFwiUmVxdWVzdFwiLFxuICAgICAgICBcIm9wZXJhdGlvblwiOiB7XG4gICAgICAgICAgICBcImFyZ3VtZW50RGVmaW5pdGlvbnNcIjogW10sXG4gICAgICAgICAgICBcImtpbmRcIjogXCJPcGVyYXRpb25cIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkV4YW1wbGVQYWdlUXVlcnlcIixcbiAgICAgICAgICAgIFwic2VsZWN0aW9uc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImFsaWFzXCI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBcImNvbmNyZXRlVHlwZVwiOiBcIlF1ZXN0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIFwia2luZFwiOiBcIkxpbmtlZEZpZWxkXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFsbFF1ZXN0aW9uc1wiLFxuICAgICAgICAgICAgICAgICAgICBcInBsdXJhbFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcInNlbGVjdGlvbnNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgKHYwIC8qOiBhbnkqLyksXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwia2luZFwiOiBcIlNjYWxhckZpZWxkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGl0bGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0b3JhZ2VLZXlcIjogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFsaWFzXCI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmdzXCI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJraW5kXCI6IFwiU2NhbGFyRmllbGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjb250ZW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdG9yYWdlS2V5XCI6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgXCJzdG9yYWdlS2V5XCI6IG51bGxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwicGFyYW1zXCI6IHtcbiAgICAgICAgICAgIFwiY2FjaGVJRFwiOiBcIjIzMWVjNGM2YWM0Mjc0YTAwNjg1MjgwNmRiMmViNmJiXCIsXG4gICAgICAgICAgICBcImlkXCI6IG51bGwsXG4gICAgICAgICAgICBcIm1ldGFkYXRhXCI6IHt9LFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiRXhhbXBsZVBhZ2VRdWVyeVwiLFxuICAgICAgICAgICAgXCJvcGVyYXRpb25LaW5kXCI6IFwicXVlcnlcIixcbiAgICAgICAgICAgIFwidGV4dFwiOiBcInF1ZXJ5IEV4YW1wbGVQYWdlUXVlcnkge1xcbiAgYWxsUXVlc3Rpb25zIHtcXG4gICAgaWRcXG4gICAgLi4uUXVlc3Rpb25fcXVlc3Rpb25cXG4gIH1cXG59XFxuXFxuZnJhZ21lbnQgUXVlc3Rpb25fcXVlc3Rpb24gb24gUXVlc3Rpb24ge1xcbiAgaWRcXG4gIHRpdGxlXFxuICBjb250ZW50XFxufVxcblwiXG4gICAgICAgIH1cbiAgICB9IGFzIGFueTtcbn0pKCk7XG4obm9kZSBhcyBhbnkpLmhhc2ggPSAnNDAyMjFkMWJhYzU5NTAwNjFjNGE0MzhiNDU5YzczZWMnO1xuZXhwb3J0IGRlZmF1bHQgbm9kZTtcbiIsIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxuaW1wb3J0IHsgQ29uY3JldGVSZXF1ZXN0IH0gZnJvbSBcInJlbGF5LXJ1bnRpbWVcIjtcbmV4cG9ydCB0eXBlIExvZ2luQ2FsbGJhY2tQYWdlUXVlcnlWYXJpYWJsZXMgPSB7XG4gICAgY29kZTogc3RyaW5nO1xufTtcbmV4cG9ydCB0eXBlIExvZ2luQ2FsbGJhY2tQYWdlUXVlcnlSZXNwb25zZSA9IHtcbiAgICByZWFkb25seSBsb2dpbjoge1xuICAgICAgICByZWFkb25seSBhY2Nlc3NUb2tlbjogc3RyaW5nIHwgbnVsbDtcbiAgICB9O1xufTtcbmV4cG9ydCB0eXBlIExvZ2luQ2FsbGJhY2tQYWdlUXVlcnkgPSB7XG4gICAgcmVhZG9ubHkgcmVzcG9uc2U6IExvZ2luQ2FsbGJhY2tQYWdlUXVlcnlSZXNwb25zZTtcbiAgICByZWFkb25seSB2YXJpYWJsZXM6IExvZ2luQ2FsbGJhY2tQYWdlUXVlcnlWYXJpYWJsZXM7XG59O1xuXG5cblxuLypcbm11dGF0aW9uIExvZ2luQ2FsbGJhY2tQYWdlUXVlcnkoXG4gICRjb2RlOiBTdHJpbmchXG4pIHtcbiAgbG9naW4oY29kZTogJGNvZGUpIHtcbiAgICBhY2Nlc3NUb2tlblxuICB9XG59XG4qL1xuXG5jb25zdCBub2RlOiBDb25jcmV0ZVJlcXVlc3QgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciB2MCA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogbnVsbCxcbiAgICAgICAgICAgIFwia2luZFwiOiBcIkxvY2FsQXJndW1lbnRcIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNvZGVcIlxuICAgICAgICB9IGFzIGFueVxuICAgIF0sIHYxID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBcImFsaWFzXCI6IG51bGwsXG4gICAgICAgICAgICBcImFyZ3NcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJraW5kXCI6IFwiVmFyaWFibGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY29kZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInZhcmlhYmxlTmFtZVwiOiBcImNvZGVcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNvbmNyZXRlVHlwZVwiOiBcIkF1dGhcIixcbiAgICAgICAgICAgIFwia2luZFwiOiBcIkxpbmtlZEZpZWxkXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJsb2dpblwiLFxuICAgICAgICAgICAgXCJwbHVyYWxcIjogZmFsc2UsXG4gICAgICAgICAgICBcInNlbGVjdGlvbnNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBcImFyZ3NcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgXCJraW5kXCI6IFwiU2NhbGFyRmllbGRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYWNjZXNzVG9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgXCJzdG9yYWdlS2V5XCI6IG51bGxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJzdG9yYWdlS2V5XCI6IG51bGxcbiAgICAgICAgfSBhcyBhbnlcbiAgICBdO1xuICAgIHJldHVybiB7XG4gICAgICAgIFwiZnJhZ21lbnRcIjoge1xuICAgICAgICAgICAgXCJhcmd1bWVudERlZmluaXRpb25zXCI6ICh2MCAvKjogYW55Ki8pLFxuICAgICAgICAgICAgXCJraW5kXCI6IFwiRnJhZ21lbnRcIixcbiAgICAgICAgICAgIFwibWV0YWRhdGFcIjogbnVsbCxcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkxvZ2luQ2FsbGJhY2tQYWdlUXVlcnlcIixcbiAgICAgICAgICAgIFwic2VsZWN0aW9uc1wiOiAodjEgLyo6IGFueSovKSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIk11dGF0aW9uXCIsXG4gICAgICAgICAgICBcImFic3RyYWN0S2V5XCI6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IFwiUmVxdWVzdFwiLFxuICAgICAgICBcIm9wZXJhdGlvblwiOiB7XG4gICAgICAgICAgICBcImFyZ3VtZW50RGVmaW5pdGlvbnNcIjogKHYwIC8qOiBhbnkqLyksXG4gICAgICAgICAgICBcImtpbmRcIjogXCJPcGVyYXRpb25cIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkxvZ2luQ2FsbGJhY2tQYWdlUXVlcnlcIixcbiAgICAgICAgICAgIFwic2VsZWN0aW9uc1wiOiAodjEgLyo6IGFueSovKVxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiB7XG4gICAgICAgICAgICBcImNhY2hlSURcIjogXCJmODc5MTQ5NWYwMThlZjYzNDA1ZWM1NTA0YWU5N2U0Y1wiLFxuICAgICAgICAgICAgXCJpZFwiOiBudWxsLFxuICAgICAgICAgICAgXCJtZXRhZGF0YVwiOiB7fSxcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkxvZ2luQ2FsbGJhY2tQYWdlUXVlcnlcIixcbiAgICAgICAgICAgIFwib3BlcmF0aW9uS2luZFwiOiBcIm11dGF0aW9uXCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCJtdXRhdGlvbiBMb2dpbkNhbGxiYWNrUGFnZVF1ZXJ5KFxcbiAgJGNvZGU6IFN0cmluZyFcXG4pIHtcXG4gIGxvZ2luKGNvZGU6ICRjb2RlKSB7XFxuICAgIGFjY2Vzc1Rva2VuXFxuICB9XFxufVxcblwiXG4gICAgICAgIH1cbiAgICB9IGFzIGFueTtcbn0pKCk7XG4obm9kZSBhcyBhbnkpLmhhc2ggPSAnMTkzOTQzNDBmMjE5ODQyNTM1NjBiNmViNjlhOGUxYTQnO1xuZXhwb3J0IGRlZmF1bHQgbm9kZTtcbiIsIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxuaW1wb3J0IHsgUmVhZGVyRnJhZ21lbnQgfSBmcm9tIFwicmVsYXktcnVudGltZVwiO1xuaW1wb3J0IHsgRnJhZ21lbnRSZWZzIH0gZnJvbSBcInJlbGF5LXJ1bnRpbWVcIjtcbmV4cG9ydCB0eXBlIFF1ZXN0aW9uX3F1ZXN0aW9uID0ge1xuICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgdGl0bGU6IHN0cmluZyB8IG51bGw7XG4gICAgcmVhZG9ubHkgY29udGVudDogc3RyaW5nIHwgbnVsbDtcbiAgICByZWFkb25seSBcIiAkcmVmVHlwZVwiOiBcIlF1ZXN0aW9uX3F1ZXN0aW9uXCI7XG59O1xuZXhwb3J0IHR5cGUgUXVlc3Rpb25fcXVlc3Rpb24kZGF0YSA9IFF1ZXN0aW9uX3F1ZXN0aW9uO1xuZXhwb3J0IHR5cGUgUXVlc3Rpb25fcXVlc3Rpb24ka2V5ID0ge1xuICAgIHJlYWRvbmx5IFwiICRkYXRhXCI/OiBRdWVzdGlvbl9xdWVzdGlvbiRkYXRhO1xuICAgIHJlYWRvbmx5IFwiICRmcmFnbWVudFJlZnNcIjogRnJhZ21lbnRSZWZzPFwiUXVlc3Rpb25fcXVlc3Rpb25cIj47XG59O1xuXG5cblxuY29uc3Qgbm9kZTogUmVhZGVyRnJhZ21lbnQgPSB7XG4gICAgXCJhcmd1bWVudERlZmluaXRpb25zXCI6IFtdLFxuICAgIFwia2luZFwiOiBcIkZyYWdtZW50XCIsXG4gICAgXCJtZXRhZGF0YVwiOiBudWxsLFxuICAgIFwibmFtZVwiOiBcIlF1ZXN0aW9uX3F1ZXN0aW9uXCIsXG4gICAgXCJzZWxlY3Rpb25zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgXCJhcmdzXCI6IG51bGwsXG4gICAgICAgICAgICBcImtpbmRcIjogXCJTY2FsYXJGaWVsZFwiLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiaWRcIixcbiAgICAgICAgICAgIFwic3RvcmFnZUtleVwiOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiYWxpYXNcIjogbnVsbCxcbiAgICAgICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICAgICAgXCJraW5kXCI6IFwiU2NhbGFyRmllbGRcIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInRpdGxlXCIsXG4gICAgICAgICAgICBcInN0b3JhZ2VLZXlcIjogbnVsbFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImFsaWFzXCI6IG51bGwsXG4gICAgICAgICAgICBcImFyZ3NcIjogbnVsbCxcbiAgICAgICAgICAgIFwia2luZFwiOiBcIlNjYWxhckZpZWxkXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjb250ZW50XCIsXG4gICAgICAgICAgICBcInN0b3JhZ2VLZXlcIjogbnVsbFxuICAgICAgICB9XG4gICAgXSxcbiAgICBcInR5cGVcIjogXCJRdWVzdGlvblwiLFxuICAgIFwiYWJzdHJhY3RLZXlcIjogbnVsbFxufSBhcyBhbnk7XG4obm9kZSBhcyBhbnkpLmhhc2ggPSAnMzczYzU4NDdjNjM3ZTVhZTBkYzZkYTc0NGJhOGRkMTMnO1xuZXhwb3J0IGRlZmF1bHQgbm9kZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG52YXIgYVN0YWNrUG9vbCA9IFtdO1xudmFyIGJTdGFja1Bvb2wgPSBbXTtcbi8qKlxuICogQ2hlY2tzIGlmIHR3byB2YWx1ZXMgYXJlIGVxdWFsLiBWYWx1ZXMgbWF5IGJlIHByaW1pdGl2ZXMsIGFycmF5cywgb3Igb2JqZWN0cy5cbiAqIFJldHVybnMgdHJ1ZSBpZiBib3RoIGFyZ3VtZW50cyBoYXZlIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcy5cbiAqXG4gKiBAc2VlIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4gKiBAY29weXJpZ2h0IDIwMDktMjAxMyBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgSW5jLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuZnVuY3Rpb24gYXJlRXF1YWwoYSwgYikge1xuICB2YXIgYVN0YWNrID0gYVN0YWNrUG9vbC5sZW5ndGggPyBhU3RhY2tQb29sLnBvcCgpIDogW107XG4gIHZhciBiU3RhY2sgPSBiU3RhY2tQb29sLmxlbmd0aCA/IGJTdGFja1Bvb2wucG9wKCkgOiBbXTtcbiAgdmFyIHJlc3VsdCA9IGVxKGEsIGIsIGFTdGFjaywgYlN0YWNrKTtcbiAgYVN0YWNrLmxlbmd0aCA9IDA7XG4gIGJTdGFjay5sZW5ndGggPSAwO1xuICBhU3RhY2tQb29sLnB1c2goYVN0YWNrKTtcbiAgYlN0YWNrUG9vbC5wdXNoKGJTdGFjayk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGVxKGEsIGIsIGFTdGFjaywgYlN0YWNrKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgLy8gSWRlbnRpY2FsIG9iamVjdHMgYXJlIGVxdWFsLiBgMCA9PT0gLTBgLCBidXQgdGhleSBhcmVuJ3QgaWRlbnRpY2FsLlxuICAgIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09IDEgLyBiO1xuICB9XG5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHtcbiAgICAvLyBhIG9yIGIgY2FuIGJlIGBudWxsYCBvciBgdW5kZWZpbmVkYFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBvYmpUb1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4gIHZhciBjbGFzc05hbWUgPSBvYmpUb1N0ci5jYWxsKGEpO1xuXG4gIGlmIChjbGFzc05hbWUgIT0gb2JqVG9TdHIuY2FsbChiKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN3aXRjaCAoY2xhc3NOYW1lKSB7XG4gICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzpcbiAgICAgIHJldHVybiBhID09IFN0cmluZyhiKTtcblxuICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6XG4gICAgICByZXR1cm4gaXNOYU4oYSkgfHwgaXNOYU4oYikgPyBmYWxzZSA6IGEgPT0gTnVtYmVyKGIpO1xuXG4gICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XG4gICAgICByZXR1cm4gK2EgPT0gK2I7XG5cbiAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOlxuICAgICAgcmV0dXJuIGEuc291cmNlID09IGIuc291cmNlICYmIGEuZ2xvYmFsID09IGIuZ2xvYmFsICYmIGEubXVsdGlsaW5lID09IGIubXVsdGlsaW5lICYmIGEuaWdub3JlQ2FzZSA9PSBiLmlnbm9yZUNhc2U7XG4gIH0gLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy5cblxuXG4gIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChhU3RhY2tbbGVuZ3RoXSA9PSBhKSB7XG4gICAgICByZXR1cm4gYlN0YWNrW2xlbmd0aF0gPT0gYjtcbiAgICB9XG4gIH1cblxuICBhU3RhY2sucHVzaChhKTtcbiAgYlN0YWNrLnB1c2goYik7XG4gIHZhciBzaXplID0gMDsgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIGFuZCBhcnJheXMuXG5cbiAgaWYgKGNsYXNzTmFtZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgIHNpemUgPSBhLmxlbmd0aDtcblxuICAgIGlmIChzaXplICE9PSBiLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gRGVlcCBjb21wYXJlIHRoZSBjb250ZW50cywgaWdub3Jpbmcgbm9uLW51bWVyaWMgcHJvcGVydGllcy5cblxuXG4gICAgd2hpbGUgKHNpemUtLSkge1xuICAgICAgaWYgKCFlcShhW3NpemVdLCBiW3NpemVdLCBhU3RhY2ssIGJTdGFjaykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYS5jb25zdHJ1Y3RvciAhPT0gYi5jb25zdHJ1Y3Rvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChhLmhhc093blByb3BlcnR5KCd2YWx1ZU9mJykgJiYgYi5oYXNPd25Qcm9wZXJ0eSgndmFsdWVPZicpKSB7XG4gICAgICByZXR1cm4gYS52YWx1ZU9mKCkgPT0gYi52YWx1ZU9mKCk7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhKTtcblxuICAgIGlmIChrZXlzLmxlbmd0aCAhPSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZXEoYVtrZXlzW2ldXSwgYltrZXlzW2ldXSwgYVN0YWNrLCBiU3RhY2spKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhU3RhY2sucG9wKCk7XG4gIGJTdGFjay5wb3AoKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJlRXF1YWw7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xuXG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cblxuZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgYXJnSW5kZXggPSAwO1xuICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cblxuICB0cnkge1xuICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKHgpIHt9XG59XG5cbnZhciB3YXJuaW5nID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZnVuY3Rpb24gKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyIC0gMl0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHByaW50V2FybmluZy5hcHBseSh2b2lkIDAsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gIH1cbn0gOiBlbXB0eUZ1bmN0aW9uO1xubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjJcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogUmVsYXkgdjExLjAuMlxuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvUmVhY3RSZWxheUNvbnRleHQuanMnKTtcbiIsIi8qKlxuICogUmVsYXkgdjExLjAuMlxuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvaW5kZXguanMnKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudCkge1xuICByZXR1cm4gY29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IGNvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xufVxuXG5mdW5jdGlvbiBnZXRDb250YWluZXJOYW1lKENvbXBvbmVudCkge1xuICByZXR1cm4gJ1JlbGF5KCcgKyBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCkgKyAnKSc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb21wb25lbnROYW1lOiBnZXRDb21wb25lbnROYW1lLFxuICBnZXRDb250YWluZXJOYW1lOiBnZXRDb250YWluZXJOYW1lXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgY3JlYXRlUmVsYXlDb250ZXh0ID0gX3JlcXVpcmUuX19pbnRlcm5hbC5jcmVhdGVSZWxheUNvbnRleHQ7XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUmVsYXlDb250ZXh0KFJlYWN0KTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgYXJlRXF1YWwgPSByZXF1aXJlKFwiZmJqcy9saWIvYXJlRXF1YWxcIik7XG5cbnZhciBidWlsZFJlYWN0UmVsYXlDb250YWluZXIgPSByZXF1aXJlKCcuL2J1aWxkUmVhY3RSZWxheUNvbnRhaW5lcicpO1xuXG52YXIgZ2V0Um9vdFZhcmlhYmxlc0ZvckZyYWdtZW50cyA9IHJlcXVpcmUoJy4vZ2V0Um9vdFZhcmlhYmxlc0ZvckZyYWdtZW50cycpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlDb250YWluZXJVdGlscycpLFxuICAgIGdldENvbnRhaW5lck5hbWUgPSBfcmVxdWlyZS5nZXRDb250YWluZXJOYW1lO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9SZWxheUNvbnRleHQnKSxcbiAgICBhc3NlcnRSZWxheUNvbnRleHQgPSBfcmVxdWlyZTIuYXNzZXJ0UmVsYXlDb250ZXh0O1xuXG52YXIgX3JlcXVpcmUzID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIGNyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyID0gX3JlcXVpcmUzLmNyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyLFxuICAgIGdldERhdGFJRHNGcm9tT2JqZWN0ID0gX3JlcXVpcmUzLmdldERhdGFJRHNGcm9tT2JqZWN0LFxuICAgIGlzU2NhbGFyQW5kRXF1YWwgPSBfcmVxdWlyZTMuaXNTY2FsYXJBbmRFcXVhbDtcblxuLyoqXG4gKiBDb21wb3NlcyBhIFJlYWN0IGNvbXBvbmVudCBjbGFzcywgcmV0dXJuaW5nIGEgbmV3IGNsYXNzIHRoYXQgaW50ZXJjZXB0c1xuICogcHJvcHMsIHJlc29sdmluZyB0aGVtIHdpdGggdGhlIHByb3ZpZGVkIGZyYWdtZW50cyBhbmQgc3Vic2NyaWJpbmcgZm9yXG4gKiB1cGRhdGVzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDb250YWluZXJXaXRoRnJhZ21lbnRzKENvbXBvbmVudCwgZnJhZ21lbnRzKSB7XG4gIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gIHZhciBjb250YWluZXJOYW1lID0gZ2V0Q29udGFpbmVyTmFtZShDb21wb25lbnQpO1xuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICAoMCwgX2luaGVyaXRzTG9vc2UyW1wiZGVmYXVsdFwiXSkoX2NsYXNzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIF9jbGFzcyhwcm9wcykge1xuICAgICAgdmFyIF9wcm9wcyRfX3Jvb3RJc1F1ZXJ5UiwgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcyksIFwiX2hhbmRsZUZyYWdtZW50RGF0YVVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXNvbHZlckZyb21UaGlzVXBkYXRlID0gX3RoaXMuc3RhdGUucmVzb2x2ZXI7XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHVwZGF0ZWRTdGF0ZSkge1xuICAgICAgICAgIHJldHVybiAoLy8gSWYgdGhpcyBldmVudCBiZWxvbmdzIHRvIHRoZSBjdXJyZW50IGRhdGEgc291cmNlLCB1cGRhdGUuXG4gICAgICAgICAgICAvLyBPdGhlcndpc2Ugd2Ugc2hvdWxkIGlnbm9yZSBpdC5cbiAgICAgICAgICAgIHJlc29sdmVyRnJvbVRoaXNVcGRhdGUgPT09IHVwZGF0ZWRTdGF0ZS5yZXNvbHZlciA/IHtcbiAgICAgICAgICAgICAgZGF0YTogdXBkYXRlZFN0YXRlLnJlc29sdmVyLnJlc29sdmUoKSxcbiAgICAgICAgICAgICAgcmVsYXlQcm9wOiBnZXRSZWxheVByb3AodXBkYXRlZFN0YXRlLnJlbGF5UHJvcC5lbnZpcm9ubWVudClcbiAgICAgICAgICAgIH0gOiBudWxsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHZhciByZWxheUNvbnRleHQgPSBhc3NlcnRSZWxheUNvbnRleHQocHJvcHMuX19yZWxheUNvbnRleHQpO1xuICAgICAgdmFyIHJvb3RJc1F1ZXJ5UmVuZGVyZXIgPSAoX3Byb3BzJF9fcm9vdElzUXVlcnlSID0gcHJvcHMuX19yb290SXNRdWVyeVJlbmRlcmVyKSAhPT0gbnVsbCAmJiBfcHJvcHMkX19yb290SXNRdWVyeVIgIT09IHZvaWQgMCA/IF9wcm9wcyRfX3Jvb3RJc1F1ZXJ5UiA6IGZhbHNlOyAvLyBEbyBub3QgcHJvdmlkZSBhIHN1YnNjcmlwdGlvbi9jYWxsYmFjayBoZXJlLlxuICAgICAgLy8gSXQgaXMgcG9zc2libGUgZm9yIHRoaXMgcmVuZGVyIHRvIGJlIGludGVycnVwdGVkIG9yIGFib3J0ZWQsXG4gICAgICAvLyBJbiB3aGljaCBjYXNlIHRoZSBzdWJzY3JpcHRpb24gd291bGQgY2F1c2UgYSBsZWFrLlxuICAgICAgLy8gV2Ugd2lsbCBhZGQgdGhlIHN1YnNjcmlwdGlvbiBpbiBjb21wb25lbnREaWRNb3VudCgpLlxuXG4gICAgICB2YXIgcmVzb2x2ZXIgPSBjcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlcihyZWxheUNvbnRleHQsIGNvbnRhaW5lck5hbWUsIGZyYWdtZW50cywgcHJvcHMsIHJvb3RJc1F1ZXJ5UmVuZGVyZXIpO1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIGRhdGE6IHJlc29sdmVyLnJlc29sdmUoKSxcbiAgICAgICAgcHJldlByb3BzOiBwcm9wcyxcbiAgICAgICAgcHJldlByb3BzQ29udGV4dDogcmVsYXlDb250ZXh0LFxuICAgICAgICByZWxheVByb3A6IGdldFJlbGF5UHJvcChyZWxheUNvbnRleHQuZW52aXJvbm1lbnQpLFxuICAgICAgICByZXNvbHZlcjogcmVzb2x2ZXJcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZW4gbmV3IHByb3BzIGFyZSByZWNlaXZlZCwgcmVhZCBkYXRhIGZvciB0aGUgbmV3IHByb3BzIGFuZCBzdWJzY3JpYmVcbiAgICAgKiBmb3IgdXBkYXRlcy4gUHJvcHMgbWF5IGJlIHRoZSBzYW1lIGluIHdoaWNoIGNhc2UgcHJldmlvdXMgZGF0YSBhbmRcbiAgICAgKiBzdWJzY3JpcHRpb25zIGNhbiBiZSByZXVzZWQuXG4gICAgICovXG5cblxuICAgIF9jbGFzcy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIHZhciBfbmV4dFByb3BzJF9fcm9vdElzUXU7XG5cbiAgICAgIC8vIEFueSBwcm9wcyBjaGFuZ2UgY291bGQgaW1wYWN0IHRoZSBxdWVyeSwgc28gd2UgbWlycm9yIHByb3BzIGluIHN0YXRlLlxuICAgICAgLy8gVGhpcyBpcyBhbiB1bnVzdWFsIHBhdHRlcm4sIGJ1dCBuZWNlc3NhcnkgZm9yIHRoaXMgY29udGFpbmVyIHVzZWNhc2UuXG4gICAgICB2YXIgcHJldlByb3BzID0gcHJldlN0YXRlLnByZXZQcm9wcztcbiAgICAgIHZhciByZWxheUNvbnRleHQgPSBhc3NlcnRSZWxheUNvbnRleHQobmV4dFByb3BzLl9fcmVsYXlDb250ZXh0KTtcbiAgICAgIHZhciByb290SXNRdWVyeVJlbmRlcmVyID0gKF9uZXh0UHJvcHMkX19yb290SXNRdSA9IG5leHRQcm9wcy5fX3Jvb3RJc1F1ZXJ5UmVuZGVyZXIpICE9PSBudWxsICYmIF9uZXh0UHJvcHMkX19yb290SXNRdSAhPT0gdm9pZCAwID8gX25leHRQcm9wcyRfX3Jvb3RJc1F1IDogZmFsc2U7XG4gICAgICB2YXIgcHJldklEcyA9IGdldERhdGFJRHNGcm9tT2JqZWN0KGZyYWdtZW50cywgcHJldlByb3BzKTtcbiAgICAgIHZhciBuZXh0SURzID0gZ2V0RGF0YUlEc0Zyb21PYmplY3QoZnJhZ21lbnRzLCBuZXh0UHJvcHMpO1xuICAgICAgdmFyIHJlc29sdmVyID0gcHJldlN0YXRlLnJlc29sdmVyOyAvLyBJZiB0aGUgZW52aXJvbm1lbnQgaGFzIGNoYW5nZWQgb3IgcHJvcHMgcG9pbnQgdG8gbmV3IHJlY29yZHMgdGhlblxuICAgICAgLy8gcHJldmlvdXNseSBmZXRjaGVkIGRhdGEgYW5kIGFueSBwZW5kaW5nIGZldGNoZXMgbm8gbG9uZ2VyIGFwcGx5OlxuICAgICAgLy8gLSBFeGlzdGluZyByZWZlcmVuY2VzIGFyZSBvbiB0aGUgb2xkIGVudmlyb25tZW50LlxuICAgICAgLy8gLSBFeGlzdGluZyByZWZlcmVuY2VzIGFyZSBiYXNlZCBvbiBvbGQgdmFyaWFibGVzLlxuICAgICAgLy8gLSBQZW5kaW5nIGZldGNoZXMgYXJlIGZvciB0aGUgcHJldmlvdXMgcmVjb3Jkcy5cblxuICAgICAgaWYgKHByZXZTdGF0ZS5wcmV2UHJvcHNDb250ZXh0LmVudmlyb25tZW50ICE9PSByZWxheUNvbnRleHQuZW52aXJvbm1lbnQgfHwgIWFyZUVxdWFsKHByZXZJRHMsIG5leHRJRHMpKSB7XG4gICAgICAgIC8vIERvIG5vdCBwcm92aWRlIGEgc3Vic2NyaXB0aW9uL2NhbGxiYWNrIGhlcmUuXG4gICAgICAgIC8vIEl0IGlzIHBvc3NpYmxlIGZvciB0aGlzIHJlbmRlciB0byBiZSBpbnRlcnJ1cHRlZCBvciBhYm9ydGVkLFxuICAgICAgICAvLyBJbiB3aGljaCBjYXNlIHRoZSBzdWJzY3JpcHRpb24gd291bGQgY2F1c2UgYSBsZWFrLlxuICAgICAgICAvLyBXZSB3aWxsIGFkZCB0aGUgc3Vic2NyaXB0aW9uIGluIGNvbXBvbmVudERpZFVwZGF0ZSgpLlxuICAgICAgICByZXNvbHZlciA9IGNyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyKHJlbGF5Q29udGV4dCwgY29udGFpbmVyTmFtZSwgZnJhZ21lbnRzLCBuZXh0UHJvcHMsIHJvb3RJc1F1ZXJ5UmVuZGVyZXIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGE6IHJlc29sdmVyLnJlc29sdmUoKSxcbiAgICAgICAgICBwcmV2UHJvcHNDb250ZXh0OiByZWxheUNvbnRleHQsXG4gICAgICAgICAgcHJldlByb3BzOiBuZXh0UHJvcHMsXG4gICAgICAgICAgcmVsYXlQcm9wOiBnZXRSZWxheVByb3AocmVsYXlDb250ZXh0LmVudmlyb25tZW50KSxcbiAgICAgICAgICByZXNvbHZlcjogcmVzb2x2ZXJcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmVyLnNldFByb3BzKG5leHRQcm9wcyk7XG4gICAgICAgIHZhciBkYXRhID0gcmVzb2x2ZXIucmVzb2x2ZSgpO1xuXG4gICAgICAgIGlmIChkYXRhICE9PSBwcmV2U3RhdGUuZGF0YSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgcHJldlByb3BzOiBuZXh0UHJvcHMsXG4gICAgICAgICAgICBwcmV2UHJvcHNDb250ZXh0OiByZWxheUNvbnRleHQsXG4gICAgICAgICAgICByZWxheVByb3A6IGdldFJlbGF5UHJvcChyZWxheUNvbnRleHQuZW52aXJvbm1lbnQpXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgdmFyIF9wcm90byA9IF9jbGFzcy5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuX3N1YnNjcmliZVRvTmV3UmVzb2x2ZXIoKTtcblxuICAgICAgdGhpcy5fcmVyZW5kZXJJZlN0b3JlSGFzQ2hhbmdlZCgpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5yZXNvbHZlciAhPT0gcHJldlN0YXRlLnJlc29sdmVyKSB7XG4gICAgICAgIHByZXZTdGF0ZS5yZXNvbHZlci5kaXNwb3NlKCk7XG5cbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlVG9OZXdSZXNvbHZlcigpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXJlbmRlcklmU3RvcmVIYXNDaGFuZ2VkKCk7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5zdGF0ZS5yZXNvbHZlci5kaXNwb3NlKCk7XG4gICAgfTtcblxuICAgIF9wcm90by5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICAgIC8vIFNob3J0LWNpcmN1aXQgaWYgYW55IFJlbGF5LXJlbGF0ZWQgZGF0YSBoYXMgY2hhbmdlZFxuICAgICAgaWYgKG5leHRTdGF0ZS5kYXRhICE9PSB0aGlzLnN0YXRlLmRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IC8vIE90aGVyd2lzZSwgZm9yIGNvbnZlbmllbmNlIHNob3J0LWNpcmN1aXQgaWYgYWxsIG5vbi1SZWxheSBwcm9wc1xuICAgICAgLy8gYXJlIHNjYWxhciBhbmQgZXF1YWxcblxuXG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG5leHRQcm9wcyk7XG5cbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBrZXlzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICB2YXIgX2tleSA9IGtleXNbaWldO1xuXG4gICAgICAgIGlmIChfa2V5ID09PSAnX19yZWxheUNvbnRleHQnKSB7XG4gICAgICAgICAgaWYgKG5leHRTdGF0ZS5wcmV2UHJvcHNDb250ZXh0LmVudmlyb25tZW50ICE9PSB0aGlzLnN0YXRlLnByZXZQcm9wc0NvbnRleHQuZW52aXJvbm1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWZyYWdtZW50cy5oYXNPd25Qcm9wZXJ0eShfa2V5KSAmJiAhaXNTY2FsYXJBbmRFcXVhbChuZXh0UHJvcHNbX2tleV0sIHRoaXMucHJvcHNbX2tleV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgbmV3IGRhdGEgZm9yIHRoZSBleGlzdGluZyBwcm9wcy9jb250ZXh0LlxuICAgICAqL1xuICAgIDtcblxuICAgIF9wcm90by5fcmVyZW5kZXJJZlN0b3JlSGFzQ2hhbmdlZCA9IGZ1bmN0aW9uIF9yZXJlbmRlcklmU3RvcmVIYXNDaGFuZ2VkKCkge1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBkYXRhID0gX3RoaXMkc3RhdGUuZGF0YSxcbiAgICAgICAgICByZXNvbHZlciA9IF90aGlzJHN0YXRlLnJlc29sdmVyOyAvLyBFeHRlcm5hbCB2YWx1ZXMgY291bGQgY2hhbmdlIGJldHdlZW4gcmVuZGVyIGFuZCBjb21taXQuXG4gICAgICAvLyBDaGVjayBmb3IgdGhpcyBjYXNlLCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBhbiBleHRyYSBzdG9yZSByZWFkLlxuXG4gICAgICB2YXIgbWF5YmVOZXdEYXRhID0gcmVzb2x2ZXIucmVzb2x2ZSgpO1xuXG4gICAgICBpZiAoZGF0YSAhPT0gbWF5YmVOZXdEYXRhKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGRhdGE6IG1heWJlTmV3RGF0YVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zdWJzY3JpYmVUb05ld1Jlc29sdmVyID0gZnVuY3Rpb24gX3N1YnNjcmliZVRvTmV3UmVzb2x2ZXIoKSB7XG4gICAgICB2YXIgcmVzb2x2ZXIgPSB0aGlzLnN0YXRlLnJlc29sdmVyOyAvLyBFdmVudCBsaXN0ZW5lcnMgYXJlIG9ubHkgc2FmZSB0byBhZGQgZHVyaW5nIHRoZSBjb21taXQgcGhhc2UsXG4gICAgICAvLyBTbyB0aGV5IHdvbid0IGxlYWsgaWYgcmVuZGVyIGlzIGludGVycnVwdGVkIG9yIGVycm9ycy5cblxuICAgICAgcmVzb2x2ZXIuc2V0Q2FsbGJhY2sodGhpcy5faGFuZGxlRnJhZ21lbnREYXRhVXBkYXRlKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY29tcG9uZW50UmVmID0gX3RoaXMkcHJvcHMuY29tcG9uZW50UmVmLFxuICAgICAgICAgIF9fcmVsYXlDb250ZXh0ID0gX3RoaXMkcHJvcHMuX19yZWxheUNvbnRleHQsXG4gICAgICAgICAgX19yb290SXNRdWVyeVJlbmRlcmVyID0gX3RoaXMkcHJvcHMuX19yb290SXNRdWVyeVJlbmRlcmVyLFxuICAgICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMltcImRlZmF1bHRcIl0pKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRSZWZcIiwgXCJfX3JlbGF5Q29udGV4dFwiLCBcIl9fcm9vdElzUXVlcnlSZW5kZXJlclwiXSk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCBwcm9wcyksIHRoaXMuc3RhdGUuZGF0YSksIHt9LCB7XG4gICAgICAgIHJlZjogY29tcG9uZW50UmVmLFxuICAgICAgICByZWxheTogdGhpcy5zdGF0ZS5yZWxheVByb3BcbiAgICAgIH0pKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfShSZWFjdC5Db21wb25lbnQpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzcywgXCJkaXNwbGF5TmFtZVwiLCBjb250YWluZXJOYW1lKSwgX3RlbXA7XG59XG5cbmZ1bmN0aW9uIGdldFJlbGF5UHJvcChlbnZpcm9ubWVudCkge1xuICByZXR1cm4ge1xuICAgIGVudmlyb25tZW50OiBlbnZpcm9ubWVudFxuICB9O1xufVxuLyoqXG4gKiBXcmFwIHRoZSBiYXNpYyBgY3JlYXRlQ29udGFpbmVyKClgIGZ1bmN0aW9uIHdpdGggbG9naWMgdG8gYWRhcHQgdG8gdGhlXG4gKiBgY29udGV4dC5yZWxheS5lbnZpcm9ubWVudGAgaW4gd2hpY2ggaXQgaXMgcmVuZGVyZWQuIFNwZWNpZmljYWxseSwgdGhlXG4gKiBleHRyYWN0aW9uIG9mIHRoZSBlbnZpcm9ubWVudC1zcGVjaWZpYyB2ZXJzaW9uIG9mIGZyYWdtZW50cyBpbiB0aGVcbiAqIGBmcmFnbWVudFNwZWNgIGlzIG1lbW9pemVkIG9uY2UgcGVyIGVudmlyb25tZW50LCByYXRoZXIgdGhhbiBvbmNlIHBlclxuICogaW5zdGFuY2Ugb2YgdGhlIGNvbnRhaW5lciBjb25zdHJ1Y3RlZC9yZW5kZXJlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lcihDb21wb25lbnQsIGZyYWdtZW50U3BlYykge1xuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gIHJldHVybiBidWlsZFJlYWN0UmVsYXlDb250YWluZXIoQ29tcG9uZW50LCBmcmFnbWVudFNwZWMsIGNyZWF0ZUNvbnRhaW5lcldpdGhGcmFnbWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlQ29udGFpbmVyOiBjcmVhdGVDb250YWluZXJcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBSZWFjdFJlbGF5Q29udGV4dCA9IHJlcXVpcmUoJy4vUmVhY3RSZWxheUNvbnRleHQnKTtcblxudmFyIFJlYWN0UmVsYXlRdWVyeVJlbmRlcmVyQ29udGV4dCA9IHJlcXVpcmUoJy4vUmVhY3RSZWxheVF1ZXJ5UmVuZGVyZXJDb250ZXh0Jyk7XG5cbnZhciB1c2VMYXlvdXRFZmZlY3QgPSBSZWFjdC51c2VMYXlvdXRFZmZlY3QsXG4gICAgdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSxcbiAgICB1c2VSZWYgPSBSZWFjdC51c2VSZWYsXG4gICAgdXNlTWVtbyA9IFJlYWN0LnVzZU1lbW87XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yID0gX3JlcXVpcmUuY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcixcbiAgICBkZWVwRnJlZXplID0gX3JlcXVpcmUuZGVlcEZyZWV6ZSxcbiAgICBnZXRSZXF1ZXN0ID0gX3JlcXVpcmUuZ2V0UmVxdWVzdDtcblxudmFyIGFyZUVxdWFsID0gcmVxdWlyZShcImZianMvbGliL2FyZUVxdWFsXCIpO1xuXG52YXIgcXVlcnlSZW5kZXJlckNvbnRleHQgPSB7XG4gIHJvb3RJc1F1ZXJ5UmVuZGVyZXI6IHRydWVcbn07XG5cbmZ1bmN0aW9uIHVzZURlZXBDb21wYXJlKHZhbHVlKSB7XG4gIHZhciBsYXRlc3RWYWx1ZSA9IFJlYWN0LnVzZVJlZih2YWx1ZSk7XG5cbiAgaWYgKCFhcmVFcXVhbChsYXRlc3RWYWx1ZS5jdXJyZW50LCB2YWx1ZSkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBkZWVwRnJlZXplKHZhbHVlKTtcbiAgICB9XG5cbiAgICBsYXRlc3RWYWx1ZS5jdXJyZW50ID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gbGF0ZXN0VmFsdWUuY3VycmVudDtcbn1cblxuZnVuY3Rpb24gUmVhY3RSZWxheUxvY2FsUXVlcnlSZW5kZXJlcihwcm9wcykge1xuICB2YXIgZW52aXJvbm1lbnQgPSBwcm9wcy5lbnZpcm9ubWVudCxcbiAgICAgIHF1ZXJ5ID0gcHJvcHMucXVlcnksXG4gICAgICB2YXJpYWJsZXMgPSBwcm9wcy52YXJpYWJsZXMsXG4gICAgICByZW5kZXIgPSBwcm9wcy5yZW5kZXI7XG4gIHZhciBsYXRlc3RWYXJpYWJsZXMgPSB1c2VEZWVwQ29tcGFyZSh2YXJpYWJsZXMpO1xuICB2YXIgb3BlcmF0aW9uID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcXVlc3QgPSBnZXRSZXF1ZXN0KHF1ZXJ5KTtcbiAgICByZXR1cm4gY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcihyZXF1ZXN0LCBsYXRlc3RWYXJpYWJsZXMpO1xuICB9LCBbcXVlcnksIGxhdGVzdFZhcmlhYmxlc10pO1xuICB2YXIgcmVsYXlDb250ZXh0ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVudmlyb25tZW50OiBlbnZpcm9ubWVudFxuICAgIH07XG4gIH0sIFtlbnZpcm9ubWVudF0pOyAvLyBVc2UgYSByZWYgdG8gcHJldmVudCByZW5kZXJpbmcgdHdpY2Ugd2hlbiBkYXRhIGNoYW5nZXNcbiAgLy8gYmVjYXVzZSBvZiBwcm9wcyBjaGFuZ2VcblxuICB2YXIgZGF0YVJlZiA9IHVzZVJlZihudWxsKTtcblxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUobnVsbCksXG4gICAgICBmb3JjZVVwZGF0ZSA9IF91c2VTdGF0ZVsxXTtcblxuICB2YXIgY2xlYW51cEZuUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgc25hcHNob3QgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICBlbnZpcm9ubWVudC5jaGVjayhvcGVyYXRpb24pO1xuICAgIHZhciByZXMgPSBlbnZpcm9ubWVudC5sb29rdXAob3BlcmF0aW9uLmZyYWdtZW50KTtcbiAgICBkYXRhUmVmLmN1cnJlbnQgPSByZXMuZGF0YTsgLy8gUnVuIGVmZmVjdHMgaGVyZSBzbyB0aGF0IHRoZSBkYXRhIGNhbiBiZSByZXRhaW5lZFxuICAgIC8vIGFuZCBzdWJzY3JpYmVkIGJlZm9yZSB0aGUgY29tcG9uZW50IGNvbW1pdHNcblxuICAgIHZhciByZXRhaW5EaXNwb3NhYmxlID0gZW52aXJvbm1lbnQucmV0YWluKG9wZXJhdGlvbik7XG4gICAgdmFyIHN1YnNjcmliZURpc3Bvc2FibGUgPSBlbnZpcm9ubWVudC5zdWJzY3JpYmUocmVzLCBmdW5jdGlvbiAobmV3U25hcHNob3QpIHtcbiAgICAgIGRhdGFSZWYuY3VycmVudCA9IG5ld1NuYXBzaG90LmRhdGE7XG4gICAgICBmb3JjZVVwZGF0ZShkYXRhUmVmLmN1cnJlbnQpO1xuICAgIH0pO1xuICAgIHZhciBkaXNwb3NlZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gbmV4dENsZWFudXBGbigpIHtcbiAgICAgIGlmICghZGlzcG9zZWQpIHtcbiAgICAgICAgZGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwRm5SZWYuY3VycmVudCA9IG51bGw7XG4gICAgICAgIHJldGFpbkRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICBzdWJzY3JpYmVEaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xlYW51cEZuUmVmLmN1cnJlbnQpIHtcbiAgICAgIGNsZWFudXBGblJlZi5jdXJyZW50KCk7XG4gICAgfVxuXG4gICAgY2xlYW51cEZuUmVmLmN1cnJlbnQgPSBuZXh0Q2xlYW51cEZuO1xuICAgIHJldHVybiByZXM7XG4gIH0sIFtlbnZpcm9ubWVudCwgb3BlcmF0aW9uXSk7XG4gIHVzZUxheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNsZWFudXBGbiA9IGNsZWFudXBGblJlZi5jdXJyZW50O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhbnVwRm4gJiYgY2xlYW51cEZuKCk7XG4gICAgfTtcbiAgfSwgW3NuYXBzaG90XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdFJlbGF5Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiByZWxheUNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3RSZWxheVF1ZXJ5UmVuZGVyZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHF1ZXJ5UmVuZGVyZXJDb250ZXh0XG4gIH0sIHJlbmRlcih7XG4gICAgcHJvcHM6IGRhdGFSZWYuY3VycmVudFxuICB9KSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVsYXlMb2NhbFF1ZXJ5UmVuZGVyZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBSZWFjdFJlbGF5Q29udGV4dCA9IHJlcXVpcmUoJy4vUmVhY3RSZWxheUNvbnRleHQnKTtcblxudmFyIFJlYWN0UmVsYXlRdWVyeUZldGNoZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlRdWVyeUZldGNoZXInKTtcblxudmFyIGFyZUVxdWFsID0gcmVxdWlyZShcImZianMvbGliL2FyZUVxdWFsXCIpO1xuXG52YXIgYnVpbGRSZWFjdFJlbGF5Q29udGFpbmVyID0gcmVxdWlyZSgnLi9idWlsZFJlYWN0UmVsYXlDb250YWluZXInKTtcblxudmFyIGdldFJvb3RWYXJpYWJsZXNGb3JGcmFnbWVudHMgPSByZXF1aXJlKCcuL2dldFJvb3RWYXJpYWJsZXNGb3JGcmFnbWVudHMnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlDb250YWluZXJVdGlscycpLFxuICAgIGdldENvbXBvbmVudE5hbWUgPSBfcmVxdWlyZS5nZXRDb21wb25lbnROYW1lLFxuICAgIGdldENvbnRhaW5lck5hbWUgPSBfcmVxdWlyZS5nZXRDb250YWluZXJOYW1lO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9SZWxheUNvbnRleHQnKSxcbiAgICBhc3NlcnRSZWxheUNvbnRleHQgPSBfcmVxdWlyZTIuYXNzZXJ0UmVsYXlDb250ZXh0O1xuXG52YXIgX3JlcXVpcmUzID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIENvbm5lY3Rpb25JbnRlcmZhY2UgPSBfcmVxdWlyZTMuQ29ubmVjdGlvbkludGVyZmFjZSxcbiAgICBPYnNlcnZhYmxlID0gX3JlcXVpcmUzLk9ic2VydmFibGUsXG4gICAgY3JlYXRlRnJhZ21lbnRTcGVjUmVzb2x2ZXIgPSBfcmVxdWlyZTMuY3JlYXRlRnJhZ21lbnRTcGVjUmVzb2x2ZXIsXG4gICAgY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvciA9IF9yZXF1aXJlMy5jcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yLFxuICAgIGdldERhdGFJRHNGcm9tT2JqZWN0ID0gX3JlcXVpcmUzLmdldERhdGFJRHNGcm9tT2JqZWN0LFxuICAgIGdldFJlcXVlc3QgPSBfcmVxdWlyZTMuZ2V0UmVxdWVzdCxcbiAgICBnZXRTZWxlY3RvciA9IF9yZXF1aXJlMy5nZXRTZWxlY3RvcixcbiAgICBnZXRWYXJpYWJsZXNGcm9tT2JqZWN0ID0gX3JlcXVpcmUzLmdldFZhcmlhYmxlc0Zyb21PYmplY3QsXG4gICAgaXNTY2FsYXJBbmRFcXVhbCA9IF9yZXF1aXJlMy5pc1NjYWxhckFuZEVxdWFsO1xuXG52YXIgRk9SV0FSRCA9ICdmb3J3YXJkJztcblxuLyoqXG4gKiBFeHRlbmRzIHRoZSBmdW5jdGlvbmFsaXR5IG9mIFJlbGF5RnJhZ21lbnRDb250YWluZXIgYnkgcHJvdmlkaW5nIGEgbWVjaGFuaXNtXG4gKiB0byBsb2FkIG1vcmUgZGF0YSBmcm9tIGEgY29ubmVjdGlvbi5cbiAqXG4gKiAjIENvbmZpZ3VyaW5nIGEgUGFnaW5hdGlvbkNvbnRhaW5lclxuICpcbiAqIFBhZ2luYXRpb25Db250YWluZXIgYWNjZXB0cyB0aGUgc3RhbmRhcmQgRnJhZ21lbnRDb250YWluZXIgYXJndW1lbnRzIGFuZCBhblxuICogYWRkaXRpb25hbCBgY29ubmVjdGlvbkNvbmZpZ2AgYXJndW1lbnQ6XG4gKlxuICogLSBgQ29tcG9uZW50YDogdGhlIGNvbXBvbmVudCB0byBiZSB3cmFwcGVkL3JlbmRlcmVkLlxuICogLSBgZnJhZ21lbnRzYDogYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYGdyYXBocWxgIGZyYWdtZW50cy4gVGhlIG9iamVjdFxuICogICBrZXlzIGRldGVybWluZSB0aGUgcHJvcCBuYW1lcyBieSB3aGljaCBmcmFnbWVudCBkYXRhIGlzIGF2YWlsYWJsZS5cbiAqIC0gYGNvbm5lY3Rpb25Db25maWdgOiBhbiBvYmplY3QgdGhhdCBkZXRlcm1pbmVzIGhvdyB0byBsb2FkIG1vcmUgY29ubmVjdGlvblxuICogICBkYXRhLiBEZXRhaWxzIGJlbG93LlxuICpcbiAqICMgTG9hZGluZyBNb3JlIERhdGFcbiAqXG4gKiBVc2UgYHByb3BzLnJlbGF5Lmhhc01vcmUoKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZXJlIGFyZSBtb3JlIGl0ZW1zIHRvIGxvYWQuXG4gKlxuICogYGBgXG4gKiBoYXNNb3JlKCk6IGJvb2xlYW5cbiAqIGBgYFxuICpcbiAqIFVzZSBgcHJvcHMucmVsYXkuaXNMb2FkaW5nKClgIHRvIGRldGVybWluZSBpZiBhIHByZXZpb3VzIGNhbGwgdG8gYGxvYWRNb3JlKClgXG4gKiBpcyBzdGlsbCBwZW5kaW5nLiBUaGlzIGlzIGNvbnZlbmllbnQgZm9yIGF2b2lkaW5nIGR1cGxpY2F0ZSBsb2FkIGNhbGxzLlxuICpcbiAqIGBgYFxuICogaXNMb2FkaW5nKCk6IGJvb2xlYW5cbiAqIGBgYFxuICpcbiAqIFVzZSBgcHJvcHMucmVsYXkubG9hZE1vcmUoKWAgdG8gbG9hZCBtb3JlIGl0ZW1zLiBUaGlzIHdpbGwgcmV0dXJuIG51bGwgaWZcbiAqIHRoZXJlIGFyZSBubyBtb3JlIGl0ZW1zIHRvIGZldGNoLCBvdGhlcndpc2UgaXQgd2lsbCBmZXRjaCBtb3JlIGl0ZW1zIGFuZFxuICogcmV0dXJuIGEgRGlzcG9zYWJsZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGNhbmNlbCB0aGUgZmV0Y2guXG4gKlxuICogYHBhZ2VTaXplYCBzaG91bGQgYmUgdGhlIG51bWJlciBvZiAqYWRkaXRpb25hbCogaXRlbXMgdG8gZmV0Y2ggKG5vdCB0aGVcbiAqIHRvdGFsKS5cbiAqXG4gKiBgYGBcbiAqIGxvYWRNb3JlKHBhZ2VTaXplOiBudW1iZXIsIGNhbGxiYWNrOiA/KGVycm9yOiA/RXJyb3IpID0+IHZvaWQpOiA/RGlzcG9zYWJsZVxuICogYGBgXG4gKlxuICogQSBjb21wbGV0ZSBleGFtcGxlOlxuICpcbiAqIGBgYFxuICogY2xhc3MgRm9vIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAqICAgLi4uXG4gKiAgIF9vbkVuZFJlYWNoZWQoKSB7XG4gKiAgICAgaWYgKCF0aGlzLnByb3BzLnJlbGF5Lmhhc01vcmUoKSB8fCB0aGlzLnByb3BzLnJlbGF5LmlzTG9hZGluZygpKSB7XG4gKiAgICAgICByZXR1cm47XG4gKiAgICAgfVxuICogICAgIHRoaXMucHJvcHMucmVsYXkubG9hZE1vcmUoMTApO1xuICogICB9XG4gKiAgIC4uLlxuICogfVxuICogYGBgXG4gKlxuICogIyBDb25uZWN0aW9uIENvbmZpZ1xuICpcbiAqIEhlcmUncyBhbiBleGFtcGxlLCBmb2xsb3dlZCBieSBkZXRhaWxzIG9mIGVhY2ggY29uZmlnIHByb3BlcnR5OlxuICpcbiAqIGBgYFxuICogUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXIuY3JlYXRlQ29udGFpbmVyKFxuICogICBDb21wb25lbnQsXG4gKiAgIHtcbiAqICAgICB1c2VyOiBncmFwaHFsYGZyYWdtZW50IEZyaWVuZHNGcmFnbWVudCBvbiBVc2VyIHtcbiAqICAgICAgIGZyaWVuZHMoYWZ0ZXI6ICRhZnRlckN1cnNvciBmaXJzdDogJGNvdW50KSBAY29ubmVjdGlvbiB7XG4gKiAgICAgICAgIGVkZ2VzIHsgLi4uIH1cbiAqICAgICAgICAgcGFnZUluZm8ge1xuICogICAgICAgICAgIHN0YXJ0Q3Vyc29yXG4gKiAgICAgICAgICAgZW5kQ3Vyc29yXG4gKiAgICAgICAgICAgaGFzTmV4dFBhZ2VcbiAqICAgICAgICAgICBoYXNQcmV2aW91c1BhZ2VcbiAqICAgICAgICAgfVxuICogICAgICAgfVxuICogICAgIH1gLFxuICogICB9LFxuICogICB7XG4gKiAgICAgZGlyZWN0aW9uOiAnZm9yd2FyZCcsXG4gKiAgICAgZ2V0Q29ubmVjdGlvbkZyb21Qcm9wcyhwcm9wcykge1xuICogICAgICAgcmV0dXJuIHByb3BzLnVzZXIgJiYgcHJvcHMudXNlci5mcmllbmRzO1xuICogICAgIH0sXG4gKiAgICAgZ2V0RnJhZ21lbnRWYXJpYWJsZXModmFycywgdG90YWxDb3VudCkge1xuICogICAgICAgLy8gVGhlIGNvbXBvbmVudCBwcmVzdW1hYmx5IHdhbnRzICphbGwqIGVkZ2VzLCBub3QganVzdCB0aG9zZSBhZnRlclxuICogICAgICAgLy8gdGhlIGN1cnNvciwgc28gbm90aWNlIHRoYXQgd2UgZG9uJ3Qgc2V0ICRhZnRlckN1cnNvciBoZXJlLlxuICogICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgLi4udmFycyxcbiAqICAgICAgICAgY291bnQ6IHRvdGFsQ291bnQsXG4gKiAgICAgICB9O1xuICogICAgIH0sXG4gKiAgICAgZ2V0VmFyaWFibGVzKHByb3BzLCB7Y291bnQsIGN1cnNvcn0sIGZyYWdtZW50VmFyaWFibGVzKSB7XG4gKiAgICAgICByZXR1cm4ge1xuICogICAgICAgICBpZDogcHJvcHMudXNlci5pZCxcbiAqICAgICAgICAgYWZ0ZXJDdXJzb3I6IGN1cnNvcixcbiAqICAgICAgICAgY291bnQsXG4gKiAgICAgICB9LFxuICogICAgIH0sXG4gKiAgICAgcXVlcnk6IGdyYXBocWxgXG4gKiAgICAgICBxdWVyeSBGcmllbmRzUXVlcnkoJGlkOiBJRCEsICRhZnRlckN1cnNvcjogSUQsICRjb3VudDogSW50ISkge1xuICogICAgICAgICBub2RlKGlkOiAkaWQpIHtcbiAqICAgICAgICAgICAuLi5GcmllbmRzRnJhZ21lbnRcbiAqICAgICAgICAgfVxuICogICAgICAgfVxuICogICAgIGAsXG4gKiAgIH1cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiAjIyBDb25maWcgUHJvcGVydGllc1xuICpcbiAqIC0gYGRpcmVjdGlvbmA6IEVpdGhlciBcImZvcndhcmRcIiB0byBpbmRpY2F0ZSBmb3J3YXJkIHBhZ2luYXRpb24gdXNpbmdcbiAqICAgYWZ0ZXIvZmlyc3QsIG9yIFwiYmFja3dhcmRcIiB0byBpbmRpY2F0ZSBiYWNrd2FyZCBwYWdpbmF0aW9uIHVzaW5nXG4gKiAgIGJlZm9yZS9sYXN0LlxuICogLSBgZ2V0Q29ubmVjdGlvbkZyb21Qcm9wcyhwcm9wcylgOiBQYWdpbmF0aW9uQ29udGFpbmVyIGRvZXNuJ3QgbWFnaWNhbGx5IGtub3dcbiAqICAgd2hpY2ggY29ubmVjdGlvbiBkYXRhIHlvdSBtZWFuIHRvIGZldGNoIG1vcmUgb2YgKGEgY29udGFpbmVyIG1pZ2h0IGZldGNoXG4gKiAgIG11bHRpcGxlIGNvbm5lY3Rpb25zLCBidXQgY2FuIG9ubHkgcGFnaW5hdGUgb25lIG9mIHRoZW0pLiBUaGlzIGZ1bmN0aW9uIGlzXG4gKiAgIGdpdmVuIHRoZSBmcmFnbWVudCBwcm9wcyBvbmx5IChub3QgZnVsbCBwcm9wcyksIGFuZCBzaG91bGQgcmV0dXJuIHRoZVxuICogICBjb25uZWN0aW9uIGRhdGEuIFNlZSB0aGUgYWJvdmUgZXhhbXBsZSB0aGF0IHJldHVybnMgdGhlIGZyaWVuZHMgZGF0YSB2aWFcbiAqICAgYHByb3BzLnVzZXIuZnJpZW5kc2AuXG4gKiAtIGBnZXRGcmFnbWVudFZhcmlhYmxlcyhwcmV2aW91c1ZhcnMsIHRvdGFsQ291bnQpYDogR2l2ZW4gdGhlIHByZXZpb3VzIHZhcmlhYmxlc1xuICogICBhbmQgdGhlIG5ldyB0b3RhbCBudW1iZXIgb2YgaXRlbXMsIGdldCB0aGUgdmFyaWFibGVzIHRvIHVzZSB3aGVuIHJlYWRpbmdcbiAqICAgeW91ciBmcmFnbWVudHMuIFR5cGljYWxseSB0aGlzIG1lYW5zIHNldHRpbmcgd2hhdGV2ZXIgeW91ciBsb2NhbCBcImNvdW50XCJcbiAqICAgdmFyaWFibGUgaXMgdG8gdGhlIHZhbHVlIG9mIGB0b3RhbENvdW50YC4gU2VlIHRoZSBleGFtcGxlLlxuICogLSBgZ2V0VmFyaWFibGVzKHByb3BzLCB7Y291bnQsIGN1cnNvcn0pYDogR2V0IHRoZSB2YXJpYWJsZXMgdG8gdXNlIHdoZW5cbiAqICAgZmV0Y2hpbmcgdGhlIHBhZ2luYXRpb24gYHF1ZXJ5YC4gWW91IG1heSBkZXRlcm1pbmUgdGhlIHJvb3Qgb2JqZWN0IGlkIGZyb21cbiAqICAgcHJvcHMgKHNlZSB0aGUgZXhhbXBsZSB0aGF0IHVzZXMgYHByb3BzLnVzZXIuaWRgKSBhbmQgbWF5IGFsc28gc2V0IHdoYXRldmVyXG4gKiAgIHZhcmlhYmxlcyB5b3UgdXNlIGZvciB0aGUgYWZ0ZXIvZmlyc3QvYmVmb3JlL2xhc3QgY2FsbHMgYmFzZWQgb24gdGhlIGNvdW50XG4gKiAgIGFuZCBjdXJzb3IuXG4gKiAtIGBxdWVyeWA6IEEgcXVlcnkgdG8gdXNlIHdoZW4gZmV0Y2hpbmcgbW9yZSBjb25uZWN0aW9uIGRhdGEuIFRoaXMgc2hvdWxkXG4gKiAgIHR5cGljYWxseSByZWZlcmVuY2Ugb25lIG9mIHRoZSBjb250YWluZXIncyBmcmFnbWVudCAoYXMgaW4gdGhlIGV4YW1wbGUpXG4gKiAgIHRvIGVuc3VyZSB0aGF0IGFsbCB0aGUgbmVjZXNzYXJ5IGZpZWxkcyBmb3Igc3ViLWNvbXBvbmVudHMgYXJlIGZldGNoZWQuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUdldENvbm5lY3Rpb25Gcm9tUHJvcHMobWV0YWRhdGEpIHtcbiAgdmFyIHBhdGggPSBtZXRhZGF0YS5wYXRoO1xuICAhcGF0aCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0UmVsYXlQYWdpbmF0aW9uQ29udGFpbmVyOiBVbmFibGUgdG8gc3ludGhlc2l6ZSBhICcgKyAnZ2V0Q29ubmVjdGlvbkZyb21Qcm9wcyBmdW5jdGlvbi4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgZGF0YSA9IHByb3BzW21ldGFkYXRhLmZyYWdtZW50TmFtZV07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGRhdGEgPSBkYXRhW3BhdGhbaV1dO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXRGcmFnbWVudFZhcmlhYmxlcyhtZXRhZGF0YSkge1xuICB2YXIgY291bnRWYXJpYWJsZSA9IG1ldGFkYXRhLmNvdW50O1xuICAhY291bnRWYXJpYWJsZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0UmVsYXlQYWdpbmF0aW9uQ29udGFpbmVyOiBVbmFibGUgdG8gc3ludGhlc2l6ZSBhICcgKyAnZ2V0RnJhZ21lbnRWYXJpYWJsZXMgZnVuY3Rpb24uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC1zcHJlYWQtaW50ZXJmYWNlXVxuXG4gIHJldHVybiBmdW5jdGlvbiAocHJldlZhcnMsIHRvdGFsQ291bnQpIHtcbiAgICByZXR1cm4gKDAsIF9vYmplY3RTcHJlYWQzW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQzW1wiZGVmYXVsdFwiXSkoe30sIHByZXZWYXJzKSwge30sICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIGNvdW50VmFyaWFibGUsIHRvdGFsQ291bnQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZENvbm5lY3Rpb25NZXRhZGF0YShmcmFnbWVudHMpIHtcbiAgdmFyIGZvdW5kQ29ubmVjdGlvbk1ldGFkYXRhID0gbnVsbDtcbiAgdmFyIGlzUmVsYXlNb2Rlcm4gPSBmYWxzZTtcblxuICBmb3IgKHZhciBmcmFnbWVudE5hbWUgaW4gZnJhZ21lbnRzKSB7XG4gICAgdmFyIGZyYWdtZW50ID0gZnJhZ21lbnRzW2ZyYWdtZW50TmFtZV07XG4gICAgdmFyIGNvbm5lY3Rpb25NZXRhZGF0YSA9IGZyYWdtZW50Lm1ldGFkYXRhICYmIGZyYWdtZW50Lm1ldGFkYXRhLmNvbm5lY3Rpb247IC8vIEhBQ0s6IG1ldGFkYXRhIGlzIGFsd2F5cyBzZXQgdG8gYHVuZGVmaW5lZGAgaW4gY2xhc3NpYy4gSW4gbW9kZXJuLCBldmVuXG4gICAgLy8gaWYgZW1wdHksIGl0IGlzIHNldCB0byBudWxsIChuZXZlciB1bmRlZmluZWQpLiBXZSB1c2UgdGhhdCBrbm93bGVnZSB0b1xuICAgIC8vIGNoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBjbGFzc2ljIG9yIG1vZGVyblxuXG4gICAgaWYgKGZyYWdtZW50Lm1ldGFkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlzUmVsYXlNb2Rlcm4gPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChjb25uZWN0aW9uTWV0YWRhdGEpIHtcbiAgICAgICEoY29ubmVjdGlvbk1ldGFkYXRhLmxlbmd0aCA9PT0gMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFJlbGF5UGFnaW5hdGlvbkNvbnRhaW5lcjogT25seSBhIHNpbmdsZSBAY29ubmVjdGlvbiBpcyAnICsgJ3N1cHBvcnRlZCwgYCVzYCBoYXMgJXMuJywgZnJhZ21lbnROYW1lLCBjb25uZWN0aW9uTWV0YWRhdGEubGVuZ3RoKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAhIWZvdW5kQ29ubmVjdGlvbk1ldGFkYXRhID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXI6IE9ubHkgYSBzaW5nbGUgZnJhZ21lbnQgd2l0aCAnICsgJ0Bjb25uZWN0aW9uIGlzIHN1cHBvcnRlZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBmb3VuZENvbm5lY3Rpb25NZXRhZGF0YSA9ICgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKHt9LCBjb25uZWN0aW9uTWV0YWRhdGFbMF0pLCB7fSwge1xuICAgICAgICBmcmFnbWVudE5hbWU6IGZyYWdtZW50TmFtZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgISghaXNSZWxheU1vZGVybiB8fCBmb3VuZENvbm5lY3Rpb25NZXRhZGF0YSAhPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFJlbGF5UGFnaW5hdGlvbkNvbnRhaW5lcjogQSBAY29ubmVjdGlvbiBkaXJlY3RpdmUgbXVzdCBiZSBwcmVzZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGZvdW5kQ29ubmVjdGlvbk1ldGFkYXRhIHx8IHt9O1xufVxuXG5mdW5jdGlvbiB0b09ic2VydmVyKG9ic2VydmVyT3JDYWxsYmFjaykge1xuICByZXR1cm4gdHlwZW9mIG9ic2VydmVyT3JDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IHtcbiAgICBlcnJvcjogb2JzZXJ2ZXJPckNhbGxiYWNrLFxuICAgIGNvbXBsZXRlOiBvYnNlcnZlck9yQ2FsbGJhY2ssXG4gICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbikge1xuICAgICAgdHlwZW9mIG9ic2VydmVyT3JDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyAmJiBvYnNlcnZlck9yQ2FsbGJhY2soKTtcbiAgICB9XG4gIH0gOiBvYnNlcnZlck9yQ2FsbGJhY2sgfHwge307XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lcldpdGhGcmFnbWVudHMoQ29tcG9uZW50LCBmcmFnbWVudHMsIGNvbm5lY3Rpb25Db25maWcpIHtcbiAgdmFyIF9jbGFzcywgX3RlbXA7XG5cbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCk7XG4gIHZhciBjb250YWluZXJOYW1lID0gZ2V0Q29udGFpbmVyTmFtZShDb21wb25lbnQpO1xuICB2YXIgbWV0YWRhdGEgPSBmaW5kQ29ubmVjdGlvbk1ldGFkYXRhKGZyYWdtZW50cyk7XG4gIHZhciBnZXRDb25uZWN0aW9uRnJvbVByb3BzID0gY29ubmVjdGlvbkNvbmZpZy5nZXRDb25uZWN0aW9uRnJvbVByb3BzIHx8IGNyZWF0ZUdldENvbm5lY3Rpb25Gcm9tUHJvcHMobWV0YWRhdGEpO1xuICB2YXIgZGlyZWN0aW9uID0gY29ubmVjdGlvbkNvbmZpZy5kaXJlY3Rpb24gfHwgbWV0YWRhdGEuZGlyZWN0aW9uO1xuICAhZGlyZWN0aW9uID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXI6IFVuYWJsZSB0byBpbmZlciBkaXJlY3Rpb24gb2YgdGhlICcgKyAnY29ubmVjdGlvbiwgcG9zc2libHkgYmVjYXVzZSBib3RoIGZpcnN0IGFuZCBsYXN0IGFyZSBwcm92aWRlZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnZXRGcmFnbWVudFZhcmlhYmxlcyA9IGNvbm5lY3Rpb25Db25maWcuZ2V0RnJhZ21lbnRWYXJpYWJsZXMgfHwgY3JlYXRlR2V0RnJhZ21lbnRWYXJpYWJsZXMobWV0YWRhdGEpO1xuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICAoMCwgX2luaGVyaXRzTG9vc2UyW1wiZGVmYXVsdFwiXSkoX2NsYXNzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIF9jbGFzcyhwcm9wcykge1xuICAgICAgdmFyIF9wcm9wcyRfX3Jvb3RJc1F1ZXJ5UiwgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcyksIFwiX2hhbmRsZUZyYWdtZW50RGF0YVVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBkYXRhOiBfdGhpcy5fcmVzb2x2ZXIucmVzb2x2ZSgpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSwgXCJfaGFzTW9yZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb25uZWN0aW9uRGF0YSA9IF90aGlzLl9nZXRDb25uZWN0aW9uRGF0YSgpO1xuXG4gICAgICAgIHJldHVybiAhIShjb25uZWN0aW9uRGF0YSAmJiBjb25uZWN0aW9uRGF0YS5oYXNNb3JlICYmIGNvbm5lY3Rpb25EYXRhLmN1cnNvcik7XG4gICAgICB9KTtcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpLCBcIl9pc0xvYWRpbmdcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gISFfdGhpcy5fcmVmZXRjaFN1YnNjcmlwdGlvbjtcbiAgICAgIH0pO1xuICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcyksIFwiX3JlZmV0Y2hDb25uZWN0aW9uXCIsIGZ1bmN0aW9uICh0b3RhbENvdW50LCBvYnNlcnZlck9yQ2FsbGJhY2ssIHJlZmV0Y2hWYXJpYWJsZXMpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5fY2FuRmV0Y2hQYWdlKCdyZWZldGNoQ29ubmVjdGlvbicpKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7fVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5fcmVmZXRjaFZhcmlhYmxlcyA9IHJlZmV0Y2hWYXJpYWJsZXM7XG4gICAgICAgIHZhciBwYWdpbmF0aW5nVmFyaWFibGVzID0ge1xuICAgICAgICAgIGNvdW50OiB0b3RhbENvdW50LFxuICAgICAgICAgIGN1cnNvcjogbnVsbCxcbiAgICAgICAgICB0b3RhbENvdW50OiB0b3RhbENvdW50XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGZldGNoID0gX3RoaXMuX2ZldGNoUGFnZShwYWdpbmF0aW5nVmFyaWFibGVzLCB0b09ic2VydmVyKG9ic2VydmVyT3JDYWxsYmFjayksIHtcbiAgICAgICAgICBmb3JjZTogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpc3Bvc2U6IGZldGNoLnVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpLCBcIl9sb2FkTW9yZVwiLCBmdW5jdGlvbiAocGFnZVNpemUsIG9ic2VydmVyT3JDYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgICBpZiAoIV90aGlzLl9jYW5GZXRjaFBhZ2UoJ2xvYWRNb3JlJykpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHt9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvYnNlcnZlciA9IHRvT2JzZXJ2ZXIob2JzZXJ2ZXJPckNhbGxiYWNrKTtcblxuICAgICAgICB2YXIgY29ubmVjdGlvbkRhdGEgPSBfdGhpcy5fZ2V0Q29ubmVjdGlvbkRhdGEoKTtcblxuICAgICAgICBpZiAoIWNvbm5lY3Rpb25EYXRhKSB7XG4gICAgICAgICAgT2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgICAgIHJldHVybiBzaW5rLmNvbXBsZXRlKCk7XG4gICAgICAgICAgfSkuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b3RhbENvdW50ID0gY29ubmVjdGlvbkRhdGEuZWRnZUNvdW50ICsgcGFnZVNpemU7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5mb3JjZSkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5fcmVmZXRjaENvbm5lY3Rpb24odG90YWxDb3VudCwgb2JzZXJ2ZXJPckNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfQ29ubmVjdGlvbkludGVyZmFjZSQgPSBDb25uZWN0aW9uSW50ZXJmYWNlLmdldCgpLFxuICAgICAgICAgICAgRU5EX0NVUlNPUiA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJC5FTkRfQ1VSU09SLFxuICAgICAgICAgICAgU1RBUlRfQ1VSU09SID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkLlNUQVJUX0NVUlNPUjtcblxuICAgICAgICB2YXIgY3Vyc29yID0gY29ubmVjdGlvbkRhdGEuY3Vyc29yO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGN1cnNvciAhPSBudWxsICYmIGN1cnNvciAhPT0gJycsICdSZWFjdFJlbGF5UGFnaW5hdGlvbkNvbnRhaW5lcjogQ2Fubm90IGBsb2FkTW9yZWAgd2l0aG91dCB2YWxpZCBgJXNgIChnb3QgYCVzYCknLCBkaXJlY3Rpb24gPT09IEZPUldBUkQgPyBFTkRfQ1VSU09SIDogU1RBUlRfQ1VSU09SLCBjdXJzb3IpIDogdm9pZCAwO1xuICAgICAgICB2YXIgcGFnaW5hdGluZ1ZhcmlhYmxlcyA9IHtcbiAgICAgICAgICBjb3VudDogcGFnZVNpemUsXG4gICAgICAgICAgY3Vyc29yOiBjdXJzb3IsXG4gICAgICAgICAgdG90YWxDb3VudDogdG90YWxDb3VudFxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBmZXRjaCA9IF90aGlzLl9mZXRjaFBhZ2UocGFnaW5hdGluZ1ZhcmlhYmxlcywgb2JzZXJ2ZXIsIG9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGlzcG9zZTogZmV0Y2gudW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHJlbGF5Q29udGV4dCA9IGFzc2VydFJlbGF5Q29udGV4dChwcm9wcy5fX3JlbGF5Q29udGV4dCk7XG4gICAgICB2YXIgcm9vdElzUXVlcnlSZW5kZXJlciA9IChfcHJvcHMkX19yb290SXNRdWVyeVIgPSBwcm9wcy5fX3Jvb3RJc1F1ZXJ5UmVuZGVyZXIpICE9PSBudWxsICYmIF9wcm9wcyRfX3Jvb3RJc1F1ZXJ5UiAhPT0gdm9pZCAwID8gX3Byb3BzJF9fcm9vdElzUXVlcnlSIDogZmFsc2U7XG4gICAgICBfdGhpcy5faXNBUmVxdWVzdEluRmxpZ2h0ID0gZmFsc2U7XG4gICAgICBfdGhpcy5fcmVmZXRjaFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICBfdGhpcy5fcmVmZXRjaFZhcmlhYmxlcyA9IG51bGw7XG4gICAgICBfdGhpcy5fcmVzb2x2ZXIgPSBjcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlcihyZWxheUNvbnRleHQsIGNvbnRhaW5lck5hbWUsIGZyYWdtZW50cywgcHJvcHMsIHJvb3RJc1F1ZXJ5UmVuZGVyZXIsIF90aGlzLl9oYW5kbGVGcmFnbWVudERhdGFVcGRhdGUpO1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIGRhdGE6IF90aGlzLl9yZXNvbHZlci5yZXNvbHZlKCksXG4gICAgICAgIHByZXZDb250ZXh0OiByZWxheUNvbnRleHQsXG4gICAgICAgIGNvbnRleHRGb3JDaGlsZHJlbjogcmVsYXlDb250ZXh0LFxuICAgICAgICByZWxheVByb3A6IF90aGlzLl9idWlsZFJlbGF5UHJvcChyZWxheUNvbnRleHQpXG4gICAgICB9O1xuICAgICAgX3RoaXMuX2lzVW5tb3VudGVkID0gZmFsc2U7XG4gICAgICBfdGhpcy5faGFzRmV0Y2hlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBfY2xhc3MucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLl9pc1VubW91bnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGVuIG5ldyBwcm9wcyBhcmUgcmVjZWl2ZWQsIHJlYWQgZGF0YSBmb3IgdGhlIG5ldyBwcm9wcyBhbmQgc3Vic2NyaWJlXG4gICAgICogZm9yIHVwZGF0ZXMuIFByb3BzIG1heSBiZSB0aGUgc2FtZSBpbiB3aGljaCBjYXNlIHByZXZpb3VzIGRhdGEgYW5kXG4gICAgICogc3Vic2NyaXB0aW9ucyBjYW4gYmUgcmV1c2VkLlxuICAgICAqL1xuICAgIDtcblxuICAgIF9wcm90by5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIF9uZXh0UHJvcHMkX19yb290SXNRdTtcblxuICAgICAgdmFyIHJlbGF5Q29udGV4dCA9IGFzc2VydFJlbGF5Q29udGV4dChuZXh0UHJvcHMuX19yZWxheUNvbnRleHQpO1xuICAgICAgdmFyIHJvb3RJc1F1ZXJ5UmVuZGVyZXIgPSAoX25leHRQcm9wcyRfX3Jvb3RJc1F1ID0gbmV4dFByb3BzLl9fcm9vdElzUXVlcnlSZW5kZXJlcikgIT09IG51bGwgJiYgX25leHRQcm9wcyRfX3Jvb3RJc1F1ICE9PSB2b2lkIDAgPyBfbmV4dFByb3BzJF9fcm9vdElzUXUgOiBmYWxzZTtcbiAgICAgIHZhciBwcmV2SURzID0gZ2V0RGF0YUlEc0Zyb21PYmplY3QoZnJhZ21lbnRzLCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBuZXh0SURzID0gZ2V0RGF0YUlEc0Zyb21PYmplY3QoZnJhZ21lbnRzLCBuZXh0UHJvcHMpO1xuICAgICAgdmFyIHByZXZSb290VmFyaWFibGVzID0gZ2V0Um9vdFZhcmlhYmxlc0ZvckZyYWdtZW50cyhmcmFnbWVudHMsIHRoaXMucHJvcHMpO1xuICAgICAgdmFyIG5leHRSb290VmFyaWFibGVzID0gZ2V0Um9vdFZhcmlhYmxlc0ZvckZyYWdtZW50cyhmcmFnbWVudHMsIG5leHRQcm9wcyk7IC8vIElmIHRoZSBlbnZpcm9ubWVudCBoYXMgY2hhbmdlZCBvciBwcm9wcyBwb2ludCB0byBuZXcgcmVjb3JkcyB0aGVuXG4gICAgICAvLyBwcmV2aW91c2x5IGZldGNoZWQgZGF0YSBhbmQgYW55IHBlbmRpbmcgZmV0Y2hlcyBubyBsb25nZXIgYXBwbHk6XG4gICAgICAvLyAtIEV4aXN0aW5nIHJlZmVyZW5jZXMgYXJlIG9uIHRoZSBvbGQgZW52aXJvbm1lbnQuXG4gICAgICAvLyAtIEV4aXN0aW5nIHJlZmVyZW5jZXMgYXJlIGJhc2VkIG9uIG9sZCB2YXJpYWJsZXMuXG4gICAgICAvLyAtIFBlbmRpbmcgZmV0Y2hlcyBhcmUgZm9yIHRoZSBwcmV2aW91cyByZWNvcmRzLlxuXG4gICAgICBpZiAocmVsYXlDb250ZXh0LmVudmlyb25tZW50ICE9PSB0aGlzLnN0YXRlLnByZXZDb250ZXh0LmVudmlyb25tZW50IHx8ICFhcmVFcXVhbChwcmV2Um9vdFZhcmlhYmxlcywgbmV4dFJvb3RWYXJpYWJsZXMpIHx8ICFhcmVFcXVhbChwcmV2SURzLCBuZXh0SURzKSkge1xuICAgICAgICB0aGlzLl9jbGVhbnVwKCk7IC8vIENoaWxkIGNvbnRhaW5lcnMgcmVseSBvbiBjb250ZXh0LnJlbGF5IGJlaW5nIG11dGF0ZWQgKGZvciBnRFNGUCkuXG5cblxuICAgICAgICB0aGlzLl9yZXNvbHZlciA9IGNyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyKHJlbGF5Q29udGV4dCwgY29udGFpbmVyTmFtZSwgZnJhZ21lbnRzLCBuZXh0UHJvcHMsIHJvb3RJc1F1ZXJ5UmVuZGVyZXIsIHRoaXMuX2hhbmRsZUZyYWdtZW50RGF0YVVwZGF0ZSk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHByZXZDb250ZXh0OiByZWxheUNvbnRleHQsXG4gICAgICAgICAgY29udGV4dEZvckNoaWxkcmVuOiByZWxheUNvbnRleHQsXG4gICAgICAgICAgcmVsYXlQcm9wOiB0aGlzLl9idWlsZFJlbGF5UHJvcChyZWxheUNvbnRleHQpXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5faGFzRmV0Y2hlZCkge1xuICAgICAgICB0aGlzLl9yZXNvbHZlci5zZXRQcm9wcyhuZXh0UHJvcHMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX3Jlc29sdmVyLnJlc29sdmUoKTtcblxuICAgICAgaWYgKGRhdGEgIT09IHRoaXMuc3RhdGUuZGF0YSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuX2lzVW5tb3VudGVkID0gdHJ1ZTtcblxuICAgICAgdGhpcy5fY2xlYW51cCgpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAvLyBTaG9ydC1jaXJjdWl0IGlmIGFueSBSZWxheS1yZWxhdGVkIGRhdGEgaGFzIGNoYW5nZWRcbiAgICAgIGlmIChuZXh0U3RhdGUuZGF0YSAhPT0gdGhpcy5zdGF0ZS5kYXRhIHx8IG5leHRTdGF0ZS5yZWxheVByb3AgIT09IHRoaXMuc3RhdGUucmVsYXlQcm9wKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSAvLyBPdGhlcndpc2UsIGZvciBjb252ZW5pZW5jZSBzaG9ydC1jaXJjdWl0IGlmIGFsbCBub24tUmVsYXkgcHJvcHNcbiAgICAgIC8vIGFyZSBzY2FsYXIgYW5kIGVxdWFsXG5cblxuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhuZXh0UHJvcHMpO1xuXG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwga2V5cy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgdmFyIF9rZXkgPSBrZXlzW2lpXTtcblxuICAgICAgICBpZiAoX2tleSA9PT0gJ19fcmVsYXlDb250ZXh0Jykge1xuICAgICAgICAgIGlmIChuZXh0U3RhdGUucHJldkNvbnRleHQuZW52aXJvbm1lbnQgIT09IHRoaXMuc3RhdGUucHJldkNvbnRleHQuZW52aXJvbm1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWZyYWdtZW50cy5oYXNPd25Qcm9wZXJ0eShfa2V5KSAmJiAhaXNTY2FsYXJBbmRFcXVhbChuZXh0UHJvcHNbX2tleV0sIHRoaXMucHJvcHNbX2tleV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2J1aWxkUmVsYXlQcm9wID0gZnVuY3Rpb24gX2J1aWxkUmVsYXlQcm9wKHJlbGF5Q29udGV4dCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaGFzTW9yZTogdGhpcy5faGFzTW9yZSxcbiAgICAgICAgaXNMb2FkaW5nOiB0aGlzLl9pc0xvYWRpbmcsXG4gICAgICAgIGxvYWRNb3JlOiB0aGlzLl9sb2FkTW9yZSxcbiAgICAgICAgcmVmZXRjaENvbm5lY3Rpb246IHRoaXMuX3JlZmV0Y2hDb25uZWN0aW9uLFxuICAgICAgICBlbnZpcm9ubWVudDogcmVsYXlDb250ZXh0LmVudmlyb25tZW50XG4gICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgbmV3IGRhdGEgZm9yIHRoZSBleGlzdGluZyBwcm9wcy9jb250ZXh0LlxuICAgICAqL1xuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Q29ubmVjdGlvbkRhdGEgPSBmdW5jdGlvbiBfZ2V0Q29ubmVjdGlvbkRhdGEoKSB7XG4gICAgICAvLyBFeHRyYWN0IGNvbm5lY3Rpb24gZGF0YSBhbmQgdmVyaWZ5IHRoZXJlIGFyZSBtb3JlIGVkZ2VzIHRvIGZldGNoXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIF8gPSBfdGhpcyRwcm9wcy5jb21wb25lbnRSZWYsXG4gICAgICAgICAgcmVzdFByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMltcImRlZmF1bHRcIl0pKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRSZWZcIl0pO1xuICAgICAgdmFyIHByb3BzID0gKDAsIF9vYmplY3RTcHJlYWQzW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQzW1wiZGVmYXVsdFwiXSkoe30sIHJlc3RQcm9wcyksIHRoaXMuc3RhdGUuZGF0YSk7XG4gICAgICB2YXIgY29ubmVjdGlvbkRhdGEgPSBnZXRDb25uZWN0aW9uRnJvbVByb3BzKHByb3BzKTtcblxuICAgICAgaWYgKGNvbm5lY3Rpb25EYXRhID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfQ29ubmVjdGlvbkludGVyZmFjZSQyID0gQ29ubmVjdGlvbkludGVyZmFjZS5nZXQoKSxcbiAgICAgICAgICBFREdFUyA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJDIuRURHRVMsXG4gICAgICAgICAgUEFHRV9JTkZPID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkMi5QQUdFX0lORk8sXG4gICAgICAgICAgSEFTX05FWFRfUEFHRSA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJDIuSEFTX05FWFRfUEFHRSxcbiAgICAgICAgICBIQVNfUFJFVl9QQUdFID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkMi5IQVNfUFJFVl9QQUdFLFxuICAgICAgICAgIEVORF9DVVJTT1IgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQyLkVORF9DVVJTT1IsXG4gICAgICAgICAgU1RBUlRfQ1VSU09SID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkMi5TVEFSVF9DVVJTT1I7XG5cbiAgICAgICEodHlwZW9mIGNvbm5lY3Rpb25EYXRhID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFJlbGF5UGFnaW5hdGlvbkNvbnRhaW5lcjogRXhwZWN0ZWQgYGdldENvbm5lY3Rpb25Gcm9tUHJvcHMoKWAgaW4gYCVzYCcgKyAndG8gcmV0dXJuIGBudWxsYCBvciBhIHBsYWluIG9iamVjdCB3aXRoICVzIGFuZCAlcyBwcm9wZXJ0aWVzLCBnb3QgYCVzYC4nLCBjb21wb25lbnROYW1lLCBFREdFUywgUEFHRV9JTkZPLCBjb25uZWN0aW9uRGF0YSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGVkZ2VzID0gY29ubmVjdGlvbkRhdGFbRURHRVNdO1xuICAgICAgdmFyIHBhZ2VJbmZvID0gY29ubmVjdGlvbkRhdGFbUEFHRV9JTkZPXTtcblxuICAgICAgaWYgKGVkZ2VzID09IG51bGwgfHwgcGFnZUluZm8gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgIUFycmF5LmlzQXJyYXkoZWRnZXMpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXI6IEV4cGVjdGVkIGBnZXRDb25uZWN0aW9uRnJvbVByb3BzKClgIGluIGAlc2AnICsgJ3RvIHJldHVybiBhbiBvYmplY3Qgd2l0aCAlczogQXJyYXksIGdvdCBgJXNgLicsIGNvbXBvbmVudE5hbWUsIEVER0VTLCBlZGdlcykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgISh0eXBlb2YgcGFnZUluZm8gPT09ICdvYmplY3QnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0UmVsYXlQYWdpbmF0aW9uQ29udGFpbmVyOiBFeHBlY3RlZCBgZ2V0Q29ubmVjdGlvbkZyb21Qcm9wcygpYCBpbiBgJXNgJyArICd0byByZXR1cm4gYW4gb2JqZWN0IHdpdGggJXM6IE9iamVjdCwgZ290IGAlc2AuJywgY29tcG9uZW50TmFtZSwgUEFHRV9JTkZPLCBwYWdlSW5mbykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGhhc01vcmUgPSBkaXJlY3Rpb24gPT09IEZPUldBUkQgPyBwYWdlSW5mb1tIQVNfTkVYVF9QQUdFXSA6IHBhZ2VJbmZvW0hBU19QUkVWX1BBR0VdO1xuICAgICAgdmFyIGN1cnNvciA9IGRpcmVjdGlvbiA9PT0gRk9SV0FSRCA/IHBhZ2VJbmZvW0VORF9DVVJTT1JdIDogcGFnZUluZm9bU1RBUlRfQ1VSU09SXTtcblxuICAgICAgaWYgKHR5cGVvZiBoYXNNb3JlICE9PSAnYm9vbGVhbicgfHwgZWRnZXMubGVuZ3RoICE9PSAwICYmIHR5cGVvZiBjdXJzb3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdSZWFjdFJlbGF5UGFnaW5hdGlvbkNvbnRhaW5lcjogQ2Fubm90IHBhZ2luYXRlIHdpdGhvdXQgJXMgZmllbGRzIGluIGAlc2AuICcgKyAnQmUgc3VyZSB0byBmZXRjaCAlcyAoZ290IGAlc2ApIGFuZCAlcyAoZ290IGAlc2ApLicsIFBBR0VfSU5GTywgY29tcG9uZW50TmFtZSwgZGlyZWN0aW9uID09PSBGT1JXQVJEID8gSEFTX05FWFRfUEFHRSA6IEhBU19QUkVWX1BBR0UsIGhhc01vcmUsIGRpcmVjdGlvbiA9PT0gRk9SV0FSRCA/IEVORF9DVVJTT1IgOiBTVEFSVF9DVVJTT1IsIGN1cnNvcikgOiB2b2lkIDA7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjdXJzb3I6IGN1cnNvcixcbiAgICAgICAgZWRnZUNvdW50OiBlZGdlcy5sZW5ndGgsXG4gICAgICAgIGhhc01vcmU6IGhhc01vcmVcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0UXVlcnlGZXRjaGVyID0gZnVuY3Rpb24gX2dldFF1ZXJ5RmV0Y2hlcigpIHtcbiAgICAgIGlmICghdGhpcy5fcXVlcnlGZXRjaGVyKSB7XG4gICAgICAgIHRoaXMuX3F1ZXJ5RmV0Y2hlciA9IG5ldyBSZWFjdFJlbGF5UXVlcnlGZXRjaGVyKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9xdWVyeUZldGNoZXI7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2FuRmV0Y2hQYWdlID0gZnVuY3Rpb24gX2NhbkZldGNoUGFnZShtZXRob2QpIHtcbiAgICAgIGlmICh0aGlzLl9pc1VubW91bnRlZCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXI6IFVuZXhwZWN0ZWQgY2FsbCBvZiBgJXNgICcgKyAnb24gdW5tb3VudGVkIGNvbnRhaW5lciBgJXNgLiBJdCBsb29rcyBsaWtlIHNvbWUgaW5zdGFuY2VzICcgKyAnb2YgeW91ciBjb250YWluZXIgc3RpbGwgdHJ5aW5nIHRvIGZldGNoIGRhdGEgYnV0IHRoZXkgYWxyZWFkeSAnICsgJ3VubW91bnRlZC4gUGxlYXNlIG1ha2Ugc3VyZSB5b3UgY2xlYXIgYWxsIHRpbWVycywgaW50ZXJ2YWxzLCBhc3luYyAnICsgJ2NhbGxzLCBldGMgdGhhdCBtYXkgdHJpZ2dlciBgJXNgIGNhbGwuJywgbWV0aG9kLCBjb250YWluZXJOYW1lLCBtZXRob2QpIDogdm9pZCAwO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2ZldGNoUGFnZSA9IGZ1bmN0aW9uIF9mZXRjaFBhZ2UocGFnaW5hdGluZ1ZhcmlhYmxlcywgb2JzZXJ2ZXIsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX2Fzc2VydFJlbGF5Q29udGV4dCA9IGFzc2VydFJlbGF5Q29udGV4dCh0aGlzLnByb3BzLl9fcmVsYXlDb250ZXh0KSxcbiAgICAgICAgICBlbnZpcm9ubWVudCA9IF9hc3NlcnRSZWxheUNvbnRleHQuZW52aXJvbm1lbnQ7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIF8gPSBfdGhpcyRwcm9wczIuY29tcG9uZW50UmVmLFxuICAgICAgICAgIF9fcmVsYXlDb250ZXh0ID0gX3RoaXMkcHJvcHMyLl9fcmVsYXlDb250ZXh0LFxuICAgICAgICAgIF9fcm9vdElzUXVlcnlSZW5kZXJlciA9IF90aGlzJHByb3BzMi5fX3Jvb3RJc1F1ZXJ5UmVuZGVyZXIsXG4gICAgICAgICAgcmVzdFByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMltcImRlZmF1bHRcIl0pKF90aGlzJHByb3BzMiwgW1wiY29tcG9uZW50UmVmXCIsIFwiX19yZWxheUNvbnRleHRcIiwgXCJfX3Jvb3RJc1F1ZXJ5UmVuZGVyZXJcIl0pO1xuICAgICAgdmFyIHByb3BzID0gKDAsIF9vYmplY3RTcHJlYWQzW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQzW1wiZGVmYXVsdFwiXSkoe30sIHJlc3RQcm9wcyksIHRoaXMuc3RhdGUuZGF0YSk7XG4gICAgICB2YXIgZnJhZ21lbnRWYXJpYWJsZXM7XG4gICAgICB2YXIgcm9vdFZhcmlhYmxlcyA9IGdldFJvb3RWYXJpYWJsZXNGb3JGcmFnbWVudHMoZnJhZ21lbnRzLCByZXN0UHJvcHMpOyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC1zcHJlYWQtaW50ZXJmYWNlXVxuXG4gICAgICBmcmFnbWVudFZhcmlhYmxlcyA9IGdldFZhcmlhYmxlc0Zyb21PYmplY3QoZnJhZ21lbnRzLCByZXN0UHJvcHMpOyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC1zcHJlYWQtaW50ZXJmYWNlXVxuXG4gICAgICBmcmFnbWVudFZhcmlhYmxlcyA9ICgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKHt9LCByb290VmFyaWFibGVzKSwgZnJhZ21lbnRWYXJpYWJsZXMpLCB0aGlzLl9yZWZldGNoVmFyaWFibGVzKTtcbiAgICAgIHZhciBmZXRjaFZhcmlhYmxlcyA9IGNvbm5lY3Rpb25Db25maWcuZ2V0VmFyaWFibGVzKHByb3BzLCB7XG4gICAgICAgIGNvdW50OiBwYWdpbmF0aW5nVmFyaWFibGVzLmNvdW50LFxuICAgICAgICBjdXJzb3I6IHBhZ2luYXRpbmdWYXJpYWJsZXMuY3Vyc29yXG4gICAgICB9LCBmcmFnbWVudFZhcmlhYmxlcyk7XG4gICAgICAhKHR5cGVvZiBmZXRjaFZhcmlhYmxlcyA9PT0gJ29iamVjdCcgJiYgZmV0Y2hWYXJpYWJsZXMgIT09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXI6IEV4cGVjdGVkIGBnZXRWYXJpYWJsZXMoKWAgdG8gJyArICdyZXR1cm4gYW4gb2JqZWN0LCBnb3QgYCVzYCBpbiBgJXNgLicsIGZldGNoVmFyaWFibGVzLCBjb21wb25lbnROYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7IC8vICRGbG93Rml4TWVbY2Fubm90LXNwcmVhZC1pbnRlcmZhY2VdXG5cbiAgICAgIGZldGNoVmFyaWFibGVzID0gKDAsIF9vYmplY3RTcHJlYWQzW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQzW1wiZGVmYXVsdFwiXSkoe30sIGZldGNoVmFyaWFibGVzKSwgdGhpcy5fcmVmZXRjaFZhcmlhYmxlcyk7XG4gICAgICBmcmFnbWVudFZhcmlhYmxlcyA9ICgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKHt9LCBmZXRjaFZhcmlhYmxlcyksIGZyYWdtZW50VmFyaWFibGVzKTtcbiAgICAgIHZhciBjYWNoZUNvbmZpZyA9IG9wdGlvbnMgPyB7XG4gICAgICAgIGZvcmNlOiAhIW9wdGlvbnMuZm9yY2VcbiAgICAgIH0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChjYWNoZUNvbmZpZyAhPSBudWxsICYmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWV0YWRhdGEpICE9IG51bGwpIHtcbiAgICAgICAgY2FjaGVDb25maWcubWV0YWRhdGEgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWV0YWRhdGE7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXF1ZXN0ID0gZ2V0UmVxdWVzdChjb25uZWN0aW9uQ29uZmlnLnF1ZXJ5KTtcbiAgICAgIHZhciBvcGVyYXRpb24gPSBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yKHJlcXVlc3QsIGZldGNoVmFyaWFibGVzLCBjYWNoZUNvbmZpZyk7XG4gICAgICB2YXIgcmVmZXRjaFN1YnNjcmlwdGlvbiA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMuX3JlZmV0Y2hTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faGFzRmV0Y2hlZCA9IHRydWU7XG5cbiAgICAgIHZhciBvbk5leHQgPSBmdW5jdGlvbiBvbk5leHQocGF5bG9hZCwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIHByZXZEYXRhID0gX3RoaXMyLl9yZXNvbHZlci5yZXNvbHZlKCk7XG5cbiAgICAgICAgX3RoaXMyLl9yZXNvbHZlci5zZXRWYXJpYWJsZXMoZ2V0RnJhZ21lbnRWYXJpYWJsZXMoZnJhZ21lbnRWYXJpYWJsZXMsIHBhZ2luYXRpbmdWYXJpYWJsZXMudG90YWxDb3VudCksIG9wZXJhdGlvbi5yZXF1ZXN0Lm5vZGUpO1xuXG4gICAgICAgIHZhciBuZXh0RGF0YSA9IF90aGlzMi5fcmVzb2x2ZXIucmVzb2x2ZSgpOyAvLyBXb3JrYXJvdW5kIHNsaWdodGx5IGRpZmZlcmVudCBoYW5kbGluZyBmb3IgY29ubmVjdGlvbiBpbiBkaWZmZXJlbnRcbiAgICAgICAgLy8gY29yZSBpbXBsZW1lbnRhdGlvbnM6XG4gICAgICAgIC8vIC0gQ2xhc3NpYyBjb3JlIHJlcXVpcmVzIHRoZSBjb3VudCB0byBiZSBleHBsaWNpdGx5IGluY3JlbWVudGVkXG4gICAgICAgIC8vIC0gTW9kZXJuIGNvcmUgYXV0b21hdGljYWxseSBhcHBlbmRzIG5ldyBpdGVtcywgdXBkYXRpbmcgdGhlIGNvdW50XG4gICAgICAgIC8vICAgaXNuJ3QgcmVxdWlyZWQgdG8gc2VlIG5ldyBkYXRhLlxuICAgICAgICAvL1xuICAgICAgICAvLyBgc2V0U3RhdGVgIGlzIG9ubHkgcmVxdWlyZWQgaWYgY2hhbmdpbmcgdGhlIHZhcmlhYmxlcyB3b3VsZCBjaGFuZ2UgdGhlXG4gICAgICAgIC8vIHJlc29sdmVkIGRhdGEuXG4gICAgICAgIC8vIFRPRE8gIzE0ODk0NzI1OiByZW1vdmUgUGFnaW5hdGlvbkNvbnRhaW5lciBlcXVhbCBjaGVja1xuXG5cbiAgICAgICAgaWYgKCFhcmVFcXVhbChwcmV2RGF0YSwgbmV4dERhdGEpKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGRhdGE6IG5leHREYXRhLFxuICAgICAgICAgICAgY29udGV4dEZvckNoaWxkcmVuOiB7XG4gICAgICAgICAgICAgIGVudmlyb25tZW50OiBfdGhpczIucHJvcHMuX19yZWxheUNvbnRleHQuZW52aXJvbm1lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBjb21wbGV0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIGNsZWFudXAgPSBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgICAgICBpZiAoX3RoaXMyLl9yZWZldGNoU3Vic2NyaXB0aW9uID09PSByZWZldGNoU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgX3RoaXMyLl9yZWZldGNoU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgICBfdGhpczIuX2lzQVJlcXVlc3RJbkZsaWdodCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9pc0FSZXF1ZXN0SW5GbGlnaHQgPSB0cnVlO1xuICAgICAgcmVmZXRjaFN1YnNjcmlwdGlvbiA9IHRoaXMuX2dldFF1ZXJ5RmV0Y2hlcigpLmV4ZWN1dGUoe1xuICAgICAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnQsXG4gICAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgICAgICBwcmVzZXJ2ZVByZXZpb3VzUmVmZXJlbmNlczogdHJ1ZVxuICAgICAgfSkubWVyZ2VNYXAoZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgICAgb25OZXh0KHBheWxvYWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNpbmsubmV4dCgpOyAvLyBwYXNzIHZvaWQgdG8gcHVibGljIG9ic2VydmVyJ3MgYG5leHRgXG5cbiAgICAgICAgICAgIHNpbmsuY29tcGxldGUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KSAvLyB1c2UgZG8gaW5zdGVhZCBvZiBmaW5hbGx5IHNvIHRoYXQgb2JzZXJ2ZXIncyBgY29tcGxldGVgIGZpcmVzIGFmdGVyIGNsZWFudXBcbiAgICAgIFtcImRvXCJdKHtcbiAgICAgICAgZXJyb3I6IGNsZWFudXAsXG4gICAgICAgIGNvbXBsZXRlOiBjbGVhbnVwLFxuICAgICAgICB1bnN1YnNjcmliZTogY2xlYW51cFxuICAgICAgfSkuc3Vic2NyaWJlKG9ic2VydmVyIHx8IHt9KTtcbiAgICAgIHRoaXMuX3JlZmV0Y2hTdWJzY3JpcHRpb24gPSB0aGlzLl9pc0FSZXF1ZXN0SW5GbGlnaHQgPyByZWZldGNoU3Vic2NyaXB0aW9uIDogbnVsbDtcbiAgICAgIHJldHVybiByZWZldGNoU3Vic2NyaXB0aW9uO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2NsZWFudXAgPSBmdW5jdGlvbiBfY2xlYW51cCgpIHtcbiAgICAgIHRoaXMuX3Jlc29sdmVyLmRpc3Bvc2UoKTtcblxuICAgICAgdGhpcy5fcmVmZXRjaFZhcmlhYmxlcyA9IG51bGw7XG4gICAgICB0aGlzLl9oYXNGZXRjaGVkID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMuX3JlZmV0Y2hTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcblxuICAgICAgICB0aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5faXNBUmVxdWVzdEluRmxpZ2h0ID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9xdWVyeUZldGNoZXIpIHtcbiAgICAgICAgdGhpcy5fcXVlcnlGZXRjaGVyLmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNvbXBvbmVudFJlZiA9IF90aGlzJHByb3BzMy5jb21wb25lbnRSZWYsXG4gICAgICAgICAgX19yZWxheUNvbnRleHQgPSBfdGhpcyRwcm9wczMuX19yZWxheUNvbnRleHQsXG4gICAgICAgICAgX19yb290SXNRdWVyeVJlbmRlcmVyID0gX3RoaXMkcHJvcHMzLl9fcm9vdElzUXVlcnlSZW5kZXJlcixcbiAgICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTJbXCJkZWZhdWx0XCJdKShfdGhpcyRwcm9wczMsIFtcImNvbXBvbmVudFJlZlwiLCBcIl9fcmVsYXlDb250ZXh0XCIsIFwiX19yb290SXNRdWVyeVJlbmRlcmVyXCJdKTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdFJlbGF5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5jb250ZXh0Rm9yQ2hpbGRyZW5cbiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBwcm9wcywgdGhpcy5zdGF0ZS5kYXRhLCB7XG4gICAgICAgIHJlZjogY29tcG9uZW50UmVmLFxuICAgICAgICByZWxheTogdGhpcy5zdGF0ZS5yZWxheVByb3BcbiAgICAgIH0pKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBfY2xhc3M7XG4gIH0oUmVhY3QuQ29tcG9uZW50KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3MsIFwiZGlzcGxheU5hbWVcIiwgY29udGFpbmVyTmFtZSksIF90ZW1wO1xufVxuLyoqXG4gKiBXcmFwIHRoZSBiYXNpYyBgY3JlYXRlQ29udGFpbmVyKClgIGZ1bmN0aW9uIHdpdGggbG9naWMgdG8gYWRhcHQgdG8gdGhlXG4gKiBgY29udGV4dC5yZWxheS5lbnZpcm9ubWVudGAgaW4gd2hpY2ggaXQgaXMgcmVuZGVyZWQuIFNwZWNpZmljYWxseSwgdGhlXG4gKiBleHRyYWN0aW9uIG9mIHRoZSBlbnZpcm9ubWVudC1zcGVjaWZpYyB2ZXJzaW9uIG9mIGZyYWdtZW50cyBpbiB0aGVcbiAqIGBmcmFnbWVudFNwZWNgIGlzIG1lbW9pemVkIG9uY2UgcGVyIGVudmlyb25tZW50LCByYXRoZXIgdGhhbiBvbmNlIHBlclxuICogaW5zdGFuY2Ugb2YgdGhlIGNvbnRhaW5lciBjb25zdHJ1Y3RlZC9yZW5kZXJlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lcihDb21wb25lbnQsIGZyYWdtZW50U3BlYywgY29ubmVjdGlvbkNvbmZpZykge1xuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gIHJldHVybiBidWlsZFJlYWN0UmVsYXlDb250YWluZXIoQ29tcG9uZW50LCBmcmFnbWVudFNwZWMsIGZ1bmN0aW9uIChDb21wb25lbnRDbGFzcywgZnJhZ21lbnRzKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbnRhaW5lcldpdGhGcmFnbWVudHMoQ29tcG9uZW50Q2xhc3MsIGZyYWdtZW50cywgY29ubmVjdGlvbkNvbmZpZyk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlQ29udGFpbmVyOiBjcmVhdGVDb250YWluZXJcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yID0gX3JlcXVpcmUuY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcixcbiAgICBpc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQgPSBfcmVxdWlyZS5pc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQsXG4gICAgZmV0Y2hRdWVyeSA9IF9yZXF1aXJlLl9faW50ZXJuYWwuZmV0Y2hRdWVyeTtcblxudmFyIFJlYWN0UmVsYXlRdWVyeUZldGNoZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWFjdFJlbGF5UXVlcnlGZXRjaGVyKGFyZ3MpIHtcbiAgICAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRoaXMsIFwiX3NlbGVjdGlvblJlZmVyZW5jZXNcIiwgW10pO1xuICAgICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkodGhpcywgXCJfY2FsbE9uRGF0YUNoYW5nZVdoZW5TZXRcIiwgZmFsc2UpO1xuXG4gICAgaWYgKGFyZ3MgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fY2FjaGVTZWxlY3Rpb25SZWZlcmVuY2UgPSBhcmdzLmNhY2hlU2VsZWN0aW9uUmVmZXJlbmNlO1xuICAgICAgdGhpcy5fc2VsZWN0aW9uUmVmZXJlbmNlcyA9IGFyZ3Muc2VsZWN0aW9uUmVmZXJlbmNlcztcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFNlbGVjdGlvblJlZmVyZW5jZXMgPSBmdW5jdGlvbiBnZXRTZWxlY3Rpb25SZWZlcmVuY2VzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjYWNoZVNlbGVjdGlvblJlZmVyZW5jZTogdGhpcy5fY2FjaGVTZWxlY3Rpb25SZWZlcmVuY2UsXG4gICAgICBzZWxlY3Rpb25SZWZlcmVuY2VzOiB0aGlzLl9zZWxlY3Rpb25SZWZlcmVuY2VzXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8ubG9va3VwSW5TdG9yZSA9IGZ1bmN0aW9uIGxvb2t1cEluU3RvcmUoZW52aXJvbm1lbnQsIG9wZXJhdGlvbiwgZmV0Y2hQb2xpY3kpIHtcbiAgICBpZiAoZmV0Y2hQb2xpY3kgPT09ICdzdG9yZS1hbmQtbmV0d29yaycgfHwgZmV0Y2hQb2xpY3kgPT09ICdzdG9yZS1vci1uZXR3b3JrJykge1xuICAgICAgaWYgKGVudmlyb25tZW50LmNoZWNrKG9wZXJhdGlvbikuc3RhdHVzID09PSAnYXZhaWxhYmxlJykge1xuICAgICAgICB0aGlzLl9yZXRhaW5DYWNoZWRPcGVyYXRpb24oZW52aXJvbm1lbnQsIG9wZXJhdGlvbik7XG5cbiAgICAgICAgcmV0dXJuIGVudmlyb25tZW50Lmxvb2t1cChvcGVyYXRpb24uZnJhZ21lbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIF9wcm90by5leGVjdXRlID0gZnVuY3Rpb24gZXhlY3V0ZShfcmVmKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBlbnZpcm9ubWVudCA9IF9yZWYuZW52aXJvbm1lbnQsXG4gICAgICAgIG9wZXJhdGlvbiA9IF9yZWYub3BlcmF0aW9uLFxuICAgICAgICBfcmVmJHByZXNlcnZlUHJldmlvdXMgPSBfcmVmLnByZXNlcnZlUHJldmlvdXNSZWZlcmVuY2VzLFxuICAgICAgICBwcmVzZXJ2ZVByZXZpb3VzUmVmZXJlbmNlcyA9IF9yZWYkcHJlc2VydmVQcmV2aW91cyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHByZXNlcnZlUHJldmlvdXM7XG4gICAgdmFyIHJlZmVyZW5jZSA9IGVudmlyb25tZW50LnJldGFpbihvcGVyYXRpb24pO1xuXG4gICAgdmFyIGVycm9yID0gZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgICAvLyBXZSBtYXkgaGF2ZSBwYXJ0aWFsbHkgZnVsZmlsbGVkIHRoZSByZXF1ZXN0LCBzbyBsZXQgdGhlIG5leHQgcmVxdWVzdFxuICAgICAgLy8gb3IgdGhlIHVubW91bnQgZGlzcG9zZSBvZiB0aGUgcmVmZXJlbmNlcy5cbiAgICAgIF90aGlzLl9zZWxlY3Rpb25SZWZlcmVuY2VzID0gX3RoaXMuX3NlbGVjdGlvblJlZmVyZW5jZXMuY29uY2F0KHJlZmVyZW5jZSk7XG4gICAgfTtcblxuICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgaWYgKCFwcmVzZXJ2ZVByZXZpb3VzUmVmZXJlbmNlcykge1xuICAgICAgICBfdGhpcy5kaXNwb3NlU2VsZWN0aW9uUmVmZXJlbmNlcygpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5fc2VsZWN0aW9uUmVmZXJlbmNlcyA9IF90aGlzLl9zZWxlY3Rpb25SZWZlcmVuY2VzLmNvbmNhdChyZWZlcmVuY2UpO1xuICAgIH07XG5cbiAgICB2YXIgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIC8vIExldCB0aGUgbmV4dCByZXF1ZXN0IG9yIHRoZSB1bm1vdW50IGNvZGUgZGlzcG9zZSBvZiB0aGUgcmVmZXJlbmNlcy5cbiAgICAgIC8vIFdlIG1heSBoYXZlIHBhcnRpYWxseSBmdWxmaWxsZWQgdGhlIHJlcXVlc3QuXG4gICAgICBfdGhpcy5fc2VsZWN0aW9uUmVmZXJlbmNlcyA9IF90aGlzLl9zZWxlY3Rpb25SZWZlcmVuY2VzLmNvbmNhdChyZWZlcmVuY2UpO1xuICAgIH07XG5cbiAgICBpZiAoIWlzUmVsYXlNb2Rlcm5FbnZpcm9ubWVudChlbnZpcm9ubWVudCkpIHtcbiAgICAgIHJldHVybiBlbnZpcm9ubWVudC5leGVjdXRlKHtcbiAgICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb25cbiAgICAgIH0pW1wiZG9cIl0oe1xuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSxcbiAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmV0Y2hRdWVyeShlbnZpcm9ubWVudCwgb3BlcmF0aW9uKVtcImRvXCJdKHtcbiAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSxcbiAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5zZXRPbkRhdGFDaGFuZ2UgPSBmdW5jdGlvbiBzZXRPbkRhdGFDaGFuZ2Uob25EYXRhQ2hhbmdlKSB7XG4gICAgIXRoaXMuX2ZldGNoT3B0aW9ucyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0UmVsYXlRdWVyeUZldGNoZXI6IGBzZXRPbkRhdGFDaGFuZ2VgIHNob3VsZCBoYXZlIGJlZW4gY2FsbGVkIGFmdGVyIGhhdmluZyBjYWxsZWQgYGZldGNoYCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmICh0eXBlb2Ygb25EYXRhQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBNdXRhdGUgdGhlIG1vc3QgcmVjZW50IGZldGNoT3B0aW9ucyBpbiBwbGFjZSxcbiAgICAgIC8vIFNvIHRoYXQgaW4tcHJvZ3Jlc3MgcmVxdWVzdHMgY2FuIGFjY2VzcyB0aGUgdXBkYXRlZCBjYWxsYmFjay5cbiAgICAgIHRoaXMuX2ZldGNoT3B0aW9ucy5vbkRhdGFDaGFuZ2VDYWxsYmFja3MgPSB0aGlzLl9mZXRjaE9wdGlvbnMub25EYXRhQ2hhbmdlQ2FsbGJhY2tzIHx8IFtdO1xuXG4gICAgICB0aGlzLl9mZXRjaE9wdGlvbnMub25EYXRhQ2hhbmdlQ2FsbGJhY2tzLnB1c2gob25EYXRhQ2hhbmdlKTtcblxuICAgICAgaWYgKHRoaXMuX2NhbGxPbkRhdGFDaGFuZ2VXaGVuU2V0KSB7XG4gICAgICAgIC8vIFdlIGRvbid0IHJlc2V0ICdfY2FsbE9uRGF0YUNoYW5nZVdoZW5TZXQnIGJlY2F1c2UgYW5vdGhlciBjYWxsYmFjayBtYXkgYmUgc2V0XG4gICAgICAgIGlmICh0aGlzLl9lcnJvciAhPSBudWxsKSB7XG4gICAgICAgICAgb25EYXRhQ2hhbmdlKHtcbiAgICAgICAgICAgIGVycm9yOiB0aGlzLl9lcnJvclxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3NuYXBzaG90ICE9IG51bGwpIHtcbiAgICAgICAgICBvbkRhdGFDaGFuZ2Uoe1xuICAgICAgICAgICAgc25hcHNob3Q6IHRoaXMuX3NuYXBzaG90XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIGBmZXRjaGAgZmV0Y2hlcyB0aGUgZGF0YSBmb3IgdGhlIGdpdmVuIG9wZXJhdGlvbi5cbiAgICogSWYgYSByZXN1bHQgaXMgaW1tZWRpYXRlbHkgYXZhaWxhYmxlIHN5bmNocm9ub3VzbHksIGl0IHdpbGwgYmUgc3luY2hyb25vdXNseVxuICAgKiByZXR1cm5lZCBieSB0aGlzIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBPdGhlcndpc2UsIHRoZSBmZXRjaGVkIHJlc3VsdCB3aWxsIGJlIGNvbW11bmljYXRlZCB2aWEgdGhlIGBvbkRhdGFDaGFuZ2VgIGNhbGxiYWNrLlxuICAgKiBgb25EYXRhQ2hhbmdlYCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBmaXJzdCByZXN1bHQgKCoqaWYgaXQgd2Fzbid0IHJldHVybmVkIHN5bmNocm9ub3VzbHkqKiksXG4gICAqIGFuZCB0aGVuIHN1YnNlcXVlbnRseSB3aGVuZXZlciB0aGUgZGF0YSBjaGFuZ2VzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5mZXRjaCA9IGZ1bmN0aW9uIGZldGNoKGZldGNoT3B0aW9ucywgY2FjaGVDb25maWdPdmVycmlkZSkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGVudmlyb25tZW50ID0gZmV0Y2hPcHRpb25zLmVudmlyb25tZW50LFxuICAgICAgICBvcGVyYXRpb24gPSBmZXRjaE9wdGlvbnMub3BlcmF0aW9uLFxuICAgICAgICBvbkRhdGFDaGFuZ2UgPSBmZXRjaE9wdGlvbnMub25EYXRhQ2hhbmdlO1xuICAgIHZhciBmZXRjaEhhc1JldHVybmVkID0gZmFsc2U7XG5cbiAgICB2YXIgX2Vycm9yO1xuXG4gICAgdGhpcy5kaXNwb3NlUmVxdWVzdCgpO1xuICAgIHZhciBvbGRPbkRhdGFDaGFuZ2VDYWxsYmFja3MgPSB0aGlzLl9mZXRjaE9wdGlvbnMgJiYgdGhpcy5fZmV0Y2hPcHRpb25zLm9uRGF0YUNoYW5nZUNhbGxiYWNrcztcbiAgICB0aGlzLl9mZXRjaE9wdGlvbnMgPSB7XG4gICAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnQsXG4gICAgICBvbkRhdGFDaGFuZ2VDYWxsYmFja3M6IG9sZE9uRGF0YUNoYW5nZUNhbGxiYWNrcyB8fCBbXSxcbiAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uXG4gICAgfTtcblxuICAgIGlmIChvbkRhdGFDaGFuZ2UgJiYgdGhpcy5fZmV0Y2hPcHRpb25zLm9uRGF0YUNoYW5nZUNhbGxiYWNrcy5pbmRleE9mKG9uRGF0YUNoYW5nZSkgPT09IC0xKSB7XG4gICAgICB0aGlzLl9mZXRjaE9wdGlvbnMub25EYXRhQ2hhbmdlQ2FsbGJhY2tzLnB1c2gob25EYXRhQ2hhbmdlKTtcbiAgICB9XG5cbiAgICB2YXIgb3BlcmF0aW9uT3ZlcnJpZGUgPSBjYWNoZUNvbmZpZ092ZXJyaWRlID8gY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcihvcGVyYXRpb24ucmVxdWVzdC5ub2RlLCBvcGVyYXRpb24ucmVxdWVzdC52YXJpYWJsZXMsIGNhY2hlQ29uZmlnT3ZlcnJpZGUpIDogb3BlcmF0aW9uO1xuICAgIHZhciByZXF1ZXN0ID0gdGhpcy5leGVjdXRlKHtcbiAgICAgIGVudmlyb25tZW50OiBlbnZpcm9ubWVudCxcbiAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uT3ZlcnJpZGVcbiAgICB9KVtcImZpbmFsbHlcIl0oZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLl9wZW5kaW5nUmVxdWVzdCA9IG51bGw7XG4gICAgfSkuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIC8vIElmIHdlIHJlY2VpdmVkIGEgcmVzcG9uc2UsXG4gICAgICAgIC8vIE1ha2UgYSBub3RlIHRoYXQgdG8gbm90aWZ5IHRoZSBjYWxsYmFjayB3aGVuIGl0J3MgbGF0ZXIgYWRkZWQuXG4gICAgICAgIF90aGlzMi5fY2FsbE9uRGF0YUNoYW5nZVdoZW5TZXQgPSB0cnVlO1xuICAgICAgICBfdGhpczIuX2Vycm9yID0gbnVsbDsgLy8gT25seSBub3RpZnkgb2YgdGhlIGZpcnN0IHJlc3VsdCBpZiBgbmV4dGAgaXMgYmVpbmcgY2FsbGVkICoqYXN5bmNocm9ub3VzbHkqKlxuICAgICAgICAvLyAoaS5lLiBhZnRlciBgZmV0Y2hgIGhhcyByZXR1cm5lZCkuXG5cbiAgICAgICAgX3RoaXMyLl9vblF1ZXJ5RGF0YUF2YWlsYWJsZSh7XG4gICAgICAgICAgbm90aWZ5Rmlyc3RSZXN1bHQ6IGZldGNoSGFzUmV0dXJuZWRcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKGVycikge1xuICAgICAgICAvLyBJZiB3ZSByZWNlaXZlZCBhIHJlc3BvbnNlIHdoZW4gd2UgZGlkbid0IGhhdmUgYSBjaGFuZ2UgY2FsbGJhY2ssXG4gICAgICAgIC8vIE1ha2UgYSBub3RlIHRoYXQgdG8gbm90aWZ5IHRoZSBjYWxsYmFjayB3aGVuIGl0J3MgbGF0ZXIgYWRkZWQuXG4gICAgICAgIF90aGlzMi5fY2FsbE9uRGF0YUNoYW5nZVdoZW5TZXQgPSB0cnVlO1xuICAgICAgICBfdGhpczIuX2Vycm9yID0gZXJyO1xuICAgICAgICBfdGhpczIuX3NuYXBzaG90ID0gbnVsbDtcbiAgICAgICAgdmFyIG9uRGF0YUNoYW5nZUNhbGxiYWNrcyA9IF90aGlzMi5fZmV0Y2hPcHRpb25zICYmIF90aGlzMi5fZmV0Y2hPcHRpb25zLm9uRGF0YUNoYW5nZUNhbGxiYWNrczsgLy8gT25seSBub3RpZnkgb2YgZXJyb3IgaWYgYGVycm9yYCBpcyBiZWluZyBjYWxsZWQgKiphc3luY2hyb25vdXNseSoqXG4gICAgICAgIC8vIChpLmUuIGFmdGVyIGBmZXRjaGAgaGFzIHJldHVybmVkKS5cblxuICAgICAgICBpZiAoZmV0Y2hIYXNSZXR1cm5lZCkge1xuICAgICAgICAgIGlmIChvbkRhdGFDaGFuZ2VDYWxsYmFja3MpIHtcbiAgICAgICAgICAgIG9uRGF0YUNoYW5nZUNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChvbkRhdGFDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgb25EYXRhQ2hhbmdlKHtcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9lcnJvciA9IGVycjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuX3BlbmRpbmdSZXF1ZXN0ID0ge1xuICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgcmVxdWVzdC51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgZmV0Y2hIYXNSZXR1cm5lZCA9IHRydWU7XG5cbiAgICBpZiAoX2Vycm9yKSB7XG4gICAgICB0aHJvdyBfZXJyb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3NuYXBzaG90O1xuICB9O1xuXG4gIF9wcm90by5yZXRyeSA9IGZ1bmN0aW9uIHJldHJ5KGNhY2hlQ29uZmlnT3ZlcnJpZGUpIHtcbiAgICAhdGhpcy5fZmV0Y2hPcHRpb25zID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlcjogYHJldHJ5YCBzaG91bGQgYmUgY2FsbGVkIGFmdGVyIGhhdmluZyBjYWxsZWQgYGZldGNoYCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gdGhpcy5mZXRjaCh7XG4gICAgICBlbnZpcm9ubWVudDogdGhpcy5fZmV0Y2hPcHRpb25zLmVudmlyb25tZW50LFxuICAgICAgb3BlcmF0aW9uOiB0aGlzLl9mZXRjaE9wdGlvbnMub3BlcmF0aW9uLFxuICAgICAgb25EYXRhQ2hhbmdlOiBudWxsIC8vIElmIHRoZXJlIGFyZSBvbkRhdGFDaGFuZ2VDYWxsYmFja3MgdGhleSB3aWxsIGJlIHJldXNlZFxuXG4gICAgfSwgY2FjaGVDb25maWdPdmVycmlkZSk7XG4gIH07XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIHRoaXMuZGlzcG9zZVJlcXVlc3QoKTtcbiAgICB0aGlzLmRpc3Bvc2VTZWxlY3Rpb25SZWZlcmVuY2VzKCk7XG4gIH07XG5cbiAgX3Byb3RvLmRpc3Bvc2VSZXF1ZXN0ID0gZnVuY3Rpb24gZGlzcG9zZVJlcXVlc3QoKSB7XG4gICAgdGhpcy5fZXJyb3IgPSBudWxsO1xuICAgIHRoaXMuX3NuYXBzaG90ID0gbnVsbDsgLy8gb3JkZXIgaXMgaW1wb3J0YW50LCBkaXNwb3NlIG9mIHBlbmRpbmdGZXRjaCBiZWZvcmUgc2VsZWN0aW9uUmVmZXJlbmNlc1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdSZXF1ZXN0KSB7XG4gICAgICB0aGlzLl9wZW5kaW5nUmVxdWVzdC5kaXNwb3NlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Jvb3RTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuX3Jvb3RTdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuXG4gICAgICB0aGlzLl9yb290U3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9yZXRhaW5DYWNoZWRPcGVyYXRpb24gPSBmdW5jdGlvbiBfcmV0YWluQ2FjaGVkT3BlcmF0aW9uKGVudmlyb25tZW50LCBvcGVyYXRpb24pIHtcbiAgICB0aGlzLl9kaXNwb3NlQ2FjaGVTZWxlY3Rpb25SZWZlcmVuY2UoKTtcblxuICAgIHRoaXMuX2NhY2hlU2VsZWN0aW9uUmVmZXJlbmNlID0gZW52aXJvbm1lbnQucmV0YWluKG9wZXJhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLl9kaXNwb3NlQ2FjaGVTZWxlY3Rpb25SZWZlcmVuY2UgPSBmdW5jdGlvbiBfZGlzcG9zZUNhY2hlU2VsZWN0aW9uUmVmZXJlbmNlKCkge1xuICAgIHRoaXMuX2NhY2hlU2VsZWN0aW9uUmVmZXJlbmNlICYmIHRoaXMuX2NhY2hlU2VsZWN0aW9uUmVmZXJlbmNlLmRpc3Bvc2UoKTtcbiAgICB0aGlzLl9jYWNoZVNlbGVjdGlvblJlZmVyZW5jZSA9IG51bGw7XG4gIH07XG5cbiAgX3Byb3RvLmRpc3Bvc2VTZWxlY3Rpb25SZWZlcmVuY2VzID0gZnVuY3Rpb24gZGlzcG9zZVNlbGVjdGlvblJlZmVyZW5jZXMoKSB7XG4gICAgdGhpcy5fZGlzcG9zZUNhY2hlU2VsZWN0aW9uUmVmZXJlbmNlKCk7XG5cbiAgICB0aGlzLl9zZWxlY3Rpb25SZWZlcmVuY2VzLmZvckVhY2goZnVuY3Rpb24gKHIpIHtcbiAgICAgIHJldHVybiByLmRpc3Bvc2UoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3NlbGVjdGlvblJlZmVyZW5jZXMgPSBbXTtcbiAgfTtcblxuICBfcHJvdG8uX29uUXVlcnlEYXRhQXZhaWxhYmxlID0gZnVuY3Rpb24gX29uUXVlcnlEYXRhQXZhaWxhYmxlKF9yZWYyKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgbm90aWZ5Rmlyc3RSZXN1bHQgPSBfcmVmMi5ub3RpZnlGaXJzdFJlc3VsdDtcbiAgICAhdGhpcy5fZmV0Y2hPcHRpb25zID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlcjogYF9vblF1ZXJ5RGF0YUF2YWlsYWJsZWAgc2hvdWxkIGhhdmUgYmVlbiBjYWxsZWQgYWZ0ZXIgaGF2aW5nIGNhbGxlZCBgZmV0Y2hgJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBfdGhpcyRfZmV0Y2hPcHRpb25zID0gdGhpcy5fZmV0Y2hPcHRpb25zLFxuICAgICAgICBlbnZpcm9ubWVudCA9IF90aGlzJF9mZXRjaE9wdGlvbnMuZW52aXJvbm1lbnQsXG4gICAgICAgIG9uRGF0YUNoYW5nZUNhbGxiYWNrcyA9IF90aGlzJF9mZXRjaE9wdGlvbnMub25EYXRhQ2hhbmdlQ2FsbGJhY2tzLFxuICAgICAgICBvcGVyYXRpb24gPSBfdGhpcyRfZmV0Y2hPcHRpb25zLm9wZXJhdGlvbjsgLy8gYF9vblF1ZXJ5RGF0YUF2YWlsYWJsZWAgY2FuIGJlIGNhbGxlZCBzeW5jaHJvbm91c2x5IHRoZSBmaXJzdCB0aW1lIGFuZCBjYW4gYmUgY2FsbGVkXG4gICAgLy8gbXVsdGlwbGUgdGltZXMgYnkgbmV0d29yayBsYXllcnMgdGhhdCBzdXBwb3J0IGRhdGEgc3Vic2NyaXB0aW9ucy5cbiAgICAvLyBXYWl0IHVudGlsIHRoZSBmaXJzdCBwYXlsb2FkIHRvIGNhbGwgYG9uRGF0YUNoYW5nZWAgYW5kIHN1YnNjcmliZSBmb3IgZGF0YSB1cGRhdGVzLlxuXG4gICAgaWYgKHRoaXMuX3NuYXBzaG90KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fc25hcHNob3QgPSBlbnZpcm9ubWVudC5sb29rdXAob3BlcmF0aW9uLmZyYWdtZW50KTsgLy8gU3Vic2NyaWJlIHRvIGNoYW5nZXMgaW4gdGhlIGRhdGEgb2YgdGhlIHJvb3QgZnJhZ21lbnRcblxuICAgIHRoaXMuX3Jvb3RTdWJzY3JpcHRpb24gPSBlbnZpcm9ubWVudC5zdWJzY3JpYmUodGhpcy5fc25hcHNob3QsIGZ1bmN0aW9uIChzbmFwc2hvdCkge1xuICAgICAgLy8gUmVhZCBmcm9tIHRoaXMuX2ZldGNoT3B0aW9ucyBpbiBjYXNlIG9uRGF0YUNoYW5nZSgpIHdhcyBsYXppbHkgYWRkZWQuXG4gICAgICBpZiAoX3RoaXMzLl9mZXRjaE9wdGlvbnMgIT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF5YmVOZXdPbkRhdGFDaGFuZ2VDYWxsYmFja3MgPSBfdGhpczMuX2ZldGNoT3B0aW9ucy5vbkRhdGFDaGFuZ2VDYWxsYmFja3M7XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWF5YmVOZXdPbkRhdGFDaGFuZ2VDYWxsYmFja3MpKSB7XG4gICAgICAgICAgbWF5YmVOZXdPbkRhdGFDaGFuZ2VDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAob25EYXRhQ2hhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm4gb25EYXRhQ2hhbmdlKHtcbiAgICAgICAgICAgICAgc25hcHNob3Q6IHNuYXBzaG90XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuX3NuYXBzaG90ICYmIG5vdGlmeUZpcnN0UmVzdWx0ICYmIEFycmF5LmlzQXJyYXkob25EYXRhQ2hhbmdlQ2FsbGJhY2tzKSkge1xuICAgICAgdmFyIHNuYXBzaG90ID0gdGhpcy5fc25hcHNob3Q7XG4gICAgICBvbkRhdGFDaGFuZ2VDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAob25EYXRhQ2hhbmdlKSB7XG4gICAgICAgIHJldHVybiBvbkRhdGFDaGFuZ2Uoe1xuICAgICAgICAgIHNuYXBzaG90OiBzbmFwc2hvdFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlcjtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJlbGF5UXVlcnlGZXRjaGVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBSZWFjdFJlbGF5Q29udGV4dCA9IHJlcXVpcmUoJy4vUmVhY3RSZWxheUNvbnRleHQnKTtcblxudmFyIFJlYWN0UmVsYXlRdWVyeUZldGNoZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlRdWVyeUZldGNoZXInKTtcblxudmFyIFJlYWN0UmVsYXlRdWVyeVJlbmRlcmVyQ29udGV4dCA9IHJlcXVpcmUoJy4vUmVhY3RSZWxheVF1ZXJ5UmVuZGVyZXJDb250ZXh0Jyk7XG5cbnZhciBhcmVFcXVhbCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9hcmVFcXVhbFwiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IgPSBfcmVxdWlyZS5jcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yLFxuICAgIGRlZXBGcmVlemUgPSBfcmVxdWlyZS5kZWVwRnJlZXplLFxuICAgIGdldFJlcXVlc3QgPSBfcmVxdWlyZS5nZXRSZXF1ZXN0O1xuXG4vKipcbiAqIFJlYWN0IG1heSBkb3VibGUtZmlyZSB0aGUgY29uc3RydWN0b3IsIGFuZCB3ZSBjYWxsICdmZXRjaCcgaW4gdGhlXG4gKiBjb25zdHJ1Y3Rvci4gSWYgYSByZXF1ZXN0IGlzIGFscmVhZHkgaW4gZmxpZ2h0IGZyb20gYSBwcmV2aW91cyBjYWxsIHRvIHRoZVxuICogY29uc3RydWN0b3IsIGp1c3QgcmV1c2UgdGhlIHF1ZXJ5IGZldGNoZXIgYW5kIHdhaXQgZm9yIHRoZSByZXNwb25zZS5cbiAqL1xudmFyIHJlcXVlc3RDYWNoZSA9IHt9O1xudmFyIHF1ZXJ5UmVuZGVyZXJDb250ZXh0ID0ge1xuICByb290SXNRdWVyeVJlbmRlcmVyOiB0cnVlXG59O1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBPcmNoZXN0cmF0ZXMgZmV0Y2hpbmcgYW5kIHJlbmRlcmluZyBkYXRhIGZvciBhIHNpbmdsZSB2aWV3IG9yIHZpZXcgaGllcmFyY2h5OlxuICogLSBGZXRjaGVzIHRoZSBxdWVyeS92YXJpYWJsZXMgdXNpbmcgdGhlIGdpdmVuIG5ldHdvcmsgaW1wbGVtZW50YXRpb24uXG4gKiAtIE5vcm1hbGl6ZXMgdGhlIHJlc3BvbnNlKHMpIHRvIHRoYXQgcXVlcnksIHB1Ymxpc2hpbmcgdGhlbSB0byB0aGUgZ2l2ZW5cbiAqICAgc3RvcmUuXG4gKiAtIFJlbmRlcnMgdGhlIHBlbmRpbmcvZmFpbC9zdWNjZXNzIHN0YXRlcyB3aXRoIHRoZSBwcm92aWRlZCByZW5kZXIgZnVuY3Rpb24uXG4gKiAtIFN1YnNjcmliZXMgZm9yIHVwZGF0ZXMgdG8gdGhlIHJvb3QgZGF0YSBhbmQgcmUtcmVuZGVycyB3aXRoIGFueSBjaGFuZ2VzLlxuICovXG52YXIgUmVhY3RSZWxheVF1ZXJ5UmVuZGVyZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMltcImRlZmF1bHRcIl0pKFJlYWN0UmVsYXlRdWVyeVJlbmRlcmVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWFjdFJlbGF5UXVlcnlSZW5kZXJlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzOyAvLyBDYWxsYmFja3MgYXJlIGF0dGFjaGVkIHRvIHRoZSBjdXJyZW50IGluc3RhbmNlIGFuZCBzaGFyZWQgd2l0aCBzdGF0aWNcbiAgICAvLyBsaWZlY3lsZXMgYnkgYnVuZGxpbmcgd2l0aCBzdGF0ZS4gVGhpcyBpcyBva2F5IHRvIGRvIGJlY2F1c2UgdGhlXG4gICAgLy8gY2FsbGJhY2tzIGRvbid0IGNoYW5nZSBpbiByZWFjdGlvbiB0byBwcm9wcy4gSG93ZXZlciB3ZSBzaG91bGQgbm90XG4gICAgLy8gXCJsZWFrXCIgdGhlbSBiZWZvcmUgbW91bnRpbmcgKHNpbmNlIHdlIHdvdWxkIGJlIHVuYWJsZSB0byBjbGVhbiB1cCkuIEZvclxuICAgIC8vIHRoYXQgcmVhc29uLCB3ZSBkZWZpbmUgdGhlbSBhcyBudWxsIGluaXRpYWxseSBhbmQgZmlsbCB0aGVtIGluIGFmdGVyXG4gICAgLy8gbW91bnRpbmcgdG8gYXZvaWQgbGVha2luZyBtZW1vcnkuXG5cbiAgICB2YXIgcmV0cnlDYWxsYmFja3MgPSB7XG4gICAgICBoYW5kbGVEYXRhQ2hhbmdlOiBudWxsLFxuICAgICAgaGFuZGxlUmV0cnlBZnRlckVycm9yOiBudWxsXG4gICAgfTtcbiAgICB2YXIgcXVlcnlGZXRjaGVyO1xuICAgIHZhciByZXF1ZXN0Q2FjaGVLZXk7XG5cbiAgICBpZiAocHJvcHMucXVlcnkpIHtcbiAgICAgIHZhciBxdWVyeSA9IHByb3BzLnF1ZXJ5O1xuICAgICAgdmFyIHJlcXVlc3QgPSBnZXRSZXF1ZXN0KHF1ZXJ5KTtcbiAgICAgIHJlcXVlc3RDYWNoZUtleSA9IGdldFJlcXVlc3RDYWNoZUtleShyZXF1ZXN0LnBhcmFtcywgcHJvcHMudmFyaWFibGVzKTtcbiAgICAgIHF1ZXJ5RmV0Y2hlciA9IHJlcXVlc3RDYWNoZVtyZXF1ZXN0Q2FjaGVLZXldID8gcmVxdWVzdENhY2hlW3JlcXVlc3RDYWNoZUtleV0ucXVlcnlGZXRjaGVyIDogbmV3IFJlYWN0UmVsYXlRdWVyeUZldGNoZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcXVlcnlGZXRjaGVyID0gbmV3IFJlYWN0UmVsYXlRdWVyeUZldGNoZXIoKTtcbiAgICB9XG5cbiAgICBfdGhpcy5zdGF0ZSA9ICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHtcbiAgICAgIHByZXZQcm9wc0Vudmlyb25tZW50OiBwcm9wcy5lbnZpcm9ubWVudCxcbiAgICAgIHByZXZQcm9wc1ZhcmlhYmxlczogcHJvcHMudmFyaWFibGVzLFxuICAgICAgcHJldlF1ZXJ5OiBwcm9wcy5xdWVyeSxcbiAgICAgIHF1ZXJ5RmV0Y2hlcjogcXVlcnlGZXRjaGVyLFxuICAgICAgcmV0cnlDYWxsYmFja3M6IHJldHJ5Q2FsbGJhY2tzXG4gICAgfSwgZmV0Y2hRdWVyeUFuZENvbXB1dGVTdGF0ZUZyb21Qcm9wcyhwcm9wcywgcXVlcnlGZXRjaGVyLCByZXRyeUNhbGxiYWNrcywgcmVxdWVzdENhY2hlS2V5KSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgUmVhY3RSZWxheVF1ZXJ5UmVuZGVyZXIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgaWYgKHByZXZTdGF0ZS5wcmV2UXVlcnkgIT09IG5leHRQcm9wcy5xdWVyeSB8fCBwcmV2U3RhdGUucHJldlByb3BzRW52aXJvbm1lbnQgIT09IG5leHRQcm9wcy5lbnZpcm9ubWVudCB8fCAhYXJlRXF1YWwocHJldlN0YXRlLnByZXZQcm9wc1ZhcmlhYmxlcywgbmV4dFByb3BzLnZhcmlhYmxlcykpIHtcbiAgICAgIHZhciBxdWVyeSA9IG5leHRQcm9wcy5xdWVyeTtcbiAgICAgIHZhciBwcmV2U2VsZWN0aW9uUmVmZXJlbmNlcyA9IHByZXZTdGF0ZS5xdWVyeUZldGNoZXIuZ2V0U2VsZWN0aW9uUmVmZXJlbmNlcygpO1xuICAgICAgcHJldlN0YXRlLnF1ZXJ5RmV0Y2hlci5kaXNwb3NlUmVxdWVzdCgpO1xuICAgICAgdmFyIHF1ZXJ5RmV0Y2hlcjtcblxuICAgICAgaWYgKHF1ZXJ5KSB7XG4gICAgICAgIHZhciByZXF1ZXN0ID0gZ2V0UmVxdWVzdChxdWVyeSk7XG4gICAgICAgIHZhciByZXF1ZXN0Q2FjaGVLZXkgPSBnZXRSZXF1ZXN0Q2FjaGVLZXkocmVxdWVzdC5wYXJhbXMsIG5leHRQcm9wcy52YXJpYWJsZXMpO1xuICAgICAgICBxdWVyeUZldGNoZXIgPSByZXF1ZXN0Q2FjaGVbcmVxdWVzdENhY2hlS2V5XSA/IHJlcXVlc3RDYWNoZVtyZXF1ZXN0Q2FjaGVLZXldLnF1ZXJ5RmV0Y2hlciA6IG5ldyBSZWFjdFJlbGF5UXVlcnlGZXRjaGVyKHByZXZTZWxlY3Rpb25SZWZlcmVuY2VzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXJ5RmV0Y2hlciA9IG5ldyBSZWFjdFJlbGF5UXVlcnlGZXRjaGVyKHByZXZTZWxlY3Rpb25SZWZlcmVuY2VzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHtcbiAgICAgICAgcHJldlF1ZXJ5OiBuZXh0UHJvcHMucXVlcnksXG4gICAgICAgIHByZXZQcm9wc0Vudmlyb25tZW50OiBuZXh0UHJvcHMuZW52aXJvbm1lbnQsXG4gICAgICAgIHByZXZQcm9wc1ZhcmlhYmxlczogbmV4dFByb3BzLnZhcmlhYmxlcyxcbiAgICAgICAgcXVlcnlGZXRjaGVyOiBxdWVyeUZldGNoZXJcbiAgICAgIH0sIGZldGNoUXVlcnlBbmRDb21wdXRlU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBxdWVyeUZldGNoZXIsIHByZXZTdGF0ZS5yZXRyeUNhbGxiYWNrcyAvLyBwYXNzaW5nIG5vIHJlcXVlc3RDYWNoZUtleSB3aWxsIGNhdXNlIGl0IHRvIGJlIHJlY2FsY3VsYXRlZCBpbnRlcm5hbGx5XG4gICAgICAvLyBhbmQgd2Ugd2FudCB0aGUgdXBkYXRlZCByZXF1ZXN0Q2FjaGVLZXksIHNpbmNlIHZhcmlhYmxlcyBtYXkgaGF2ZSBjaGFuZ2VkXG4gICAgICApKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB2YXIgX3Byb3RvID0gUmVhY3RSZWxheVF1ZXJ5UmVuZGVyZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgcmV0cnlDYWxsYmFja3MgPSBfdGhpcyRzdGF0ZS5yZXRyeUNhbGxiYWNrcyxcbiAgICAgICAgcXVlcnlGZXRjaGVyID0gX3RoaXMkc3RhdGUucXVlcnlGZXRjaGVyLFxuICAgICAgICByZXF1ZXN0Q2FjaGVLZXkgPSBfdGhpcyRzdGF0ZS5yZXF1ZXN0Q2FjaGVLZXk7XG5cbiAgICBpZiAocmVxdWVzdENhY2hlS2V5KSB7XG4gICAgICBkZWxldGUgcmVxdWVzdENhY2hlW3JlcXVlc3RDYWNoZUtleV07XG4gICAgfVxuXG4gICAgcmV0cnlDYWxsYmFja3MuaGFuZGxlRGF0YUNoYW5nZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHZhciBlcnJvciA9IHBhcmFtcy5lcnJvciA9PSBudWxsID8gbnVsbCA6IHBhcmFtcy5lcnJvcjtcbiAgICAgIHZhciBzbmFwc2hvdCA9IHBhcmFtcy5zbmFwc2hvdCA9PSBudWxsID8gbnVsbCA6IHBhcmFtcy5zbmFwc2hvdDtcblxuICAgICAgX3RoaXMyLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgdmFyIHByZXZSZXF1ZXN0Q2FjaGVLZXkgPSBwcmV2U3RhdGUucmVxdWVzdENhY2hlS2V5O1xuXG4gICAgICAgIGlmIChwcmV2UmVxdWVzdENhY2hlS2V5KSB7XG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RDYWNoZVtwcmV2UmVxdWVzdENhY2hlS2V5XTtcbiAgICAgICAgfSAvLyBEb24ndCB1cGRhdGUgc3RhdGUgaWYgbm90aGluZyBoYXMgY2hhbmdlZC5cblxuXG4gICAgICAgIGlmIChzbmFwc2hvdCA9PT0gcHJldlN0YXRlLnNuYXBzaG90ICYmIGVycm9yID09PSBwcmV2U3RhdGUuZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVuZGVyUHJvcHM6IGdldFJlbmRlclByb3BzKGVycm9yLCBzbmFwc2hvdCwgcHJldlN0YXRlLnF1ZXJ5RmV0Y2hlciwgcHJldlN0YXRlLnJldHJ5Q2FsbGJhY2tzKSxcbiAgICAgICAgICBzbmFwc2hvdDogc25hcHNob3QsXG4gICAgICAgICAgcmVxdWVzdENhY2hlS2V5OiBudWxsXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0cnlDYWxsYmFja3MuaGFuZGxlUmV0cnlBZnRlckVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgdmFyIHByZXZSZXF1ZXN0Q2FjaGVLZXkgPSBwcmV2U3RhdGUucmVxdWVzdENhY2hlS2V5O1xuXG4gICAgICAgIGlmIChwcmV2UmVxdWVzdENhY2hlS2V5KSB7XG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RDYWNoZVtwcmV2UmVxdWVzdENhY2hlS2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVuZGVyUHJvcHM6IGdldExvYWRpbmdSZW5kZXJQcm9wcygpLFxuICAgICAgICAgIHJlcXVlc3RDYWNoZUtleTogbnVsbFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTsgLy8gUmUtaW5pdGlhbGl6ZSB0aGUgUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlciB3aXRoIGNhbGxiYWNrcy5cbiAgICAvLyBJZiBkYXRhIGhhcyBjaGFuZ2VkIHNpbmNlIGNvbnN0cnVjdGlvbnMsIHRoaXMgd2lsbCByZS1yZW5kZXIuXG5cblxuICAgIGlmICh0aGlzLnByb3BzLnF1ZXJ5KSB7XG4gICAgICBxdWVyeUZldGNoZXIuc2V0T25EYXRhQ2hhbmdlKHJldHJ5Q2FsbGJhY2tzLmhhbmRsZURhdGFDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gY2FjaGUgdGhlIHJlcXVlc3QgYWZ0ZXIgdGhlIGNvbXBvbmVudCBjb21taXRzXG4gICAgdmFyIHJlcXVlc3RDYWNoZUtleSA9IHRoaXMuc3RhdGUucmVxdWVzdENhY2hlS2V5O1xuXG4gICAgaWYgKHJlcXVlc3RDYWNoZUtleSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RDYWNoZVtyZXF1ZXN0Q2FjaGVLZXldOyAvLyBIQUNLXG5cbiAgICAgIGRlbGV0ZSB0aGlzLnN0YXRlLnJlcXVlc3RDYWNoZUtleTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5zdGF0ZS5xdWVyeUZldGNoZXIuZGlzcG9zZSgpO1xuICB9O1xuXG4gIF9wcm90by5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gbmV4dFByb3BzLnJlbmRlciAhPT0gdGhpcy5wcm9wcy5yZW5kZXIgfHwgbmV4dFN0YXRlLnJlbmRlclByb3BzICE9PSB0aGlzLnN0YXRlLnJlbmRlclByb3BzO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHN0YXRlMiA9IHRoaXMuc3RhdGUsXG4gICAgICAgIHJlbmRlclByb3BzID0gX3RoaXMkc3RhdGUyLnJlbmRlclByb3BzLFxuICAgICAgICByZWxheUNvbnRleHQgPSBfdGhpcyRzdGF0ZTIucmVsYXlDb250ZXh0OyAvLyBOb3RlIHRoYXQgdGhlIHJvb3QgZnJhZ21lbnQgcmVzdWx0cyBpbiBgcmVuZGVyUHJvcHMucHJvcHNgIGlzIGFscmVhZHlcbiAgICAvLyBmcm96ZW4gYnkgdGhlIHN0b3JlOyB0aGlzIGNhbGwgaXMgdG8gZnJlZXplIHRoZSByZW5kZXJQcm9wcyBvYmplY3QgYW5kXG4gICAgLy8gZXJyb3IgcHJvcGVydHkgaWYgc2V0LlxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgZGVlcEZyZWV6ZShyZW5kZXJQcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0UmVsYXlDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogcmVsYXlDb250ZXh0XG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3RSZWxheVF1ZXJ5UmVuZGVyZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogcXVlcnlSZW5kZXJlckNvbnRleHRcbiAgICB9LCB0aGlzLnByb3BzLnJlbmRlcihyZW5kZXJQcm9wcykpKTtcbiAgfTtcblxuICByZXR1cm4gUmVhY3RSZWxheVF1ZXJ5UmVuZGVyZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmZ1bmN0aW9uIGdldExvYWRpbmdSZW5kZXJQcm9wcygpIHtcbiAgcmV0dXJuIHtcbiAgICBlcnJvcjogbnVsbCxcbiAgICBwcm9wczogbnVsbCxcbiAgICAvLyBgcHJvcHM6IG51bGxgIGluZGljYXRlcyB0aGF0IHRoZSBkYXRhIGlzIGJlaW5nIGZldGNoZWQgKGkuZS4gbG9hZGluZylcbiAgICByZXRyeTogbnVsbFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRFbXB0eVJlbmRlclByb3BzKCkge1xuICByZXR1cm4ge1xuICAgIGVycm9yOiBudWxsLFxuICAgIHByb3BzOiB7fSxcbiAgICAvLyBgcHJvcHM6IHt9YCBpbmRpY2F0ZXMgbm8gZGF0YSBhdmFpbGFibGVcbiAgICByZXRyeTogbnVsbFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRSZW5kZXJQcm9wcyhlcnJvciwgc25hcHNob3QsIHF1ZXJ5RmV0Y2hlciwgcmV0cnlDYWxsYmFja3MpIHtcbiAgcmV0dXJuIHtcbiAgICBlcnJvcjogZXJyb3IgPyBlcnJvciA6IG51bGwsXG4gICAgcHJvcHM6IHNuYXBzaG90ID8gc25hcHNob3QuZGF0YSA6IG51bGwsXG4gICAgcmV0cnk6IGZ1bmN0aW9uIHJldHJ5KGNhY2hlQ29uZmlnT3ZlcnJpZGUpIHtcbiAgICAgIHZhciBzeW5jU25hcHNob3QgPSBxdWVyeUZldGNoZXIucmV0cnkoY2FjaGVDb25maWdPdmVycmlkZSk7XG5cbiAgICAgIGlmIChzeW5jU25hcHNob3QgJiYgdHlwZW9mIHJldHJ5Q2FsbGJhY2tzLmhhbmRsZURhdGFDaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0cnlDYWxsYmFja3MuaGFuZGxlRGF0YUNoYW5nZSh7XG4gICAgICAgICAgc25hcHNob3Q6IHN5bmNTbmFwc2hvdFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoZXJyb3IgJiYgdHlwZW9mIHJldHJ5Q2FsbGJhY2tzLmhhbmRsZVJldHJ5QWZ0ZXJFcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBJZiByZXRyeWluZyBhZnRlciBhbiBlcnJvciBhbmQgbm8gc3luY2hyb25vdXMgcmVzdWx0IGF2YWlsYWJsZSxcbiAgICAgICAgLy8gcmVzZXQgdGhlIHJlbmRlciBwcm9wc1xuICAgICAgICByZXRyeUNhbGxiYWNrcy5oYW5kbGVSZXRyeUFmdGVyRXJyb3IoZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVxdWVzdENhY2hlS2V5KHJlcXVlc3QsIHZhcmlhYmxlcykge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgIGlkOiByZXF1ZXN0LmNhY2hlSUQgPyByZXF1ZXN0LmNhY2hlSUQgOiByZXF1ZXN0LmlkLFxuICAgIHZhcmlhYmxlczogdmFyaWFibGVzXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmZXRjaFF1ZXJ5QW5kQ29tcHV0ZVN0YXRlRnJvbVByb3BzKHByb3BzLCBxdWVyeUZldGNoZXIsIHJldHJ5Q2FsbGJhY2tzLCByZXF1ZXN0Q2FjaGVLZXkpIHtcbiAgdmFyIGVudmlyb25tZW50ID0gcHJvcHMuZW52aXJvbm1lbnQsXG4gICAgICBxdWVyeSA9IHByb3BzLnF1ZXJ5LFxuICAgICAgdmFyaWFibGVzID0gcHJvcHMudmFyaWFibGVzLFxuICAgICAgY2FjaGVDb25maWcgPSBwcm9wcy5jYWNoZUNvbmZpZztcbiAgdmFyIGdlbmVyaWNFbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuXG4gIGlmIChxdWVyeSkge1xuICAgIHZhciByZXF1ZXN0ID0gZ2V0UmVxdWVzdChxdWVyeSk7XG4gICAgdmFyIG9wZXJhdGlvbiA9IGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IocmVxdWVzdCwgdmFyaWFibGVzLCBjYWNoZUNvbmZpZyk7XG4gICAgdmFyIHJlbGF5Q29udGV4dCA9IHtcbiAgICAgIGVudmlyb25tZW50OiBnZW5lcmljRW52aXJvbm1lbnRcbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0Q2FjaGVLZXkgPT09ICdzdHJpbmcnICYmIHJlcXVlc3RDYWNoZVtyZXF1ZXN0Q2FjaGVLZXldKSB7XG4gICAgICAvLyBUaGlzIHNhbWUgcmVxdWVzdCBpcyBhbHJlYWR5IGluIGZsaWdodC5cbiAgICAgIHZhciBzbmFwc2hvdCA9IHJlcXVlc3RDYWNoZVtyZXF1ZXN0Q2FjaGVLZXldLnNuYXBzaG90O1xuXG4gICAgICBpZiAoc25hcHNob3QpIHtcbiAgICAgICAgLy8gVXNlIHRoZSBjYWNoZWQgcmVzcG9uc2VcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICByZWxheUNvbnRleHQ6IHJlbGF5Q29udGV4dCxcbiAgICAgICAgICByZW5kZXJQcm9wczogZ2V0UmVuZGVyUHJvcHMobnVsbCwgc25hcHNob3QsIHF1ZXJ5RmV0Y2hlciwgcmV0cnlDYWxsYmFja3MpLFxuICAgICAgICAgIHNuYXBzaG90OiBzbmFwc2hvdCxcbiAgICAgICAgICByZXF1ZXN0Q2FjaGVLZXk6IHJlcXVlc3RDYWNoZUtleVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVuZGVyIGxvYWRpbmcgc3RhdGVcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICByZWxheUNvbnRleHQ6IHJlbGF5Q29udGV4dCxcbiAgICAgICAgICByZW5kZXJQcm9wczogZ2V0TG9hZGluZ1JlbmRlclByb3BzKCksXG4gICAgICAgICAgc25hcHNob3Q6IG51bGwsXG4gICAgICAgICAgcmVxdWVzdENhY2hlS2V5OiByZXF1ZXN0Q2FjaGVLZXlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdmFyIHN0b3JlU25hcHNob3QgPSBxdWVyeUZldGNoZXIubG9va3VwSW5TdG9yZShnZW5lcmljRW52aXJvbm1lbnQsIG9wZXJhdGlvbiwgcHJvcHMuZmV0Y2hQb2xpY3kpO1xuICAgICAgdmFyIHF1ZXJ5U25hcHNob3QgPSBxdWVyeUZldGNoZXIuZmV0Y2goe1xuICAgICAgICBlbnZpcm9ubWVudDogZ2VuZXJpY0Vudmlyb25tZW50LFxuICAgICAgICBvbkRhdGFDaGFuZ2U6IHJldHJ5Q2FsbGJhY2tzLmhhbmRsZURhdGFDaGFuZ2UsXG4gICAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uXG4gICAgICB9KTsgLy8gVXNlIG5ldHdvcmsgZGF0YSBmaXJzdCwgc2luY2UgaXQgbWF5IGJlIGZyZXNoZXJcblxuICAgICAgdmFyIF9zbmFwc2hvdCA9IHF1ZXJ5U25hcHNob3QgfHwgc3RvcmVTbmFwc2hvdDsgLy8gY2FjaGUgdGhlIHJlcXVlc3QgdG8gYXZvaWQgZHVwbGljYXRlIHJlcXVlc3RzXG5cblxuICAgICAgcmVxdWVzdENhY2hlS2V5ID0gcmVxdWVzdENhY2hlS2V5IHx8IGdldFJlcXVlc3RDYWNoZUtleShyZXF1ZXN0LnBhcmFtcywgcHJvcHMudmFyaWFibGVzKTtcbiAgICAgIHJlcXVlc3RDYWNoZVtyZXF1ZXN0Q2FjaGVLZXldID0ge1xuICAgICAgICBxdWVyeUZldGNoZXI6IHF1ZXJ5RmV0Y2hlcixcbiAgICAgICAgc25hcHNob3Q6IF9zbmFwc2hvdFxuICAgICAgfTtcblxuICAgICAgaWYgKCFfc25hcHNob3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICByZWxheUNvbnRleHQ6IHJlbGF5Q29udGV4dCxcbiAgICAgICAgICByZW5kZXJQcm9wczogZ2V0TG9hZGluZ1JlbmRlclByb3BzKCksXG4gICAgICAgICAgc25hcHNob3Q6IG51bGwsXG4gICAgICAgICAgcmVxdWVzdENhY2hlS2V5OiByZXF1ZXN0Q2FjaGVLZXlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgIHJlbGF5Q29udGV4dDogcmVsYXlDb250ZXh0LFxuICAgICAgICByZW5kZXJQcm9wczogZ2V0UmVuZGVyUHJvcHMobnVsbCwgX3NuYXBzaG90LCBxdWVyeUZldGNoZXIsIHJldHJ5Q2FsbGJhY2tzKSxcbiAgICAgICAgc25hcHNob3Q6IF9zbmFwc2hvdCxcbiAgICAgICAgcmVxdWVzdENhY2hlS2V5OiByZXF1ZXN0Q2FjaGVLZXlcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgcmVsYXlDb250ZXh0OiByZWxheUNvbnRleHQsXG4gICAgICAgIHJlbmRlclByb3BzOiBnZXRSZW5kZXJQcm9wcyhlcnJvciwgbnVsbCwgcXVlcnlGZXRjaGVyLCByZXRyeUNhbGxiYWNrcyksXG4gICAgICAgIHNuYXBzaG90OiBudWxsLFxuICAgICAgICByZXF1ZXN0Q2FjaGVLZXk6IHJlcXVlc3RDYWNoZUtleVxuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcXVlcnlGZXRjaGVyLmRpc3Bvc2UoKTtcbiAgICB2YXIgX3JlbGF5Q29udGV4dCA9IHtcbiAgICAgIGVudmlyb25tZW50OiBnZW5lcmljRW52aXJvbm1lbnRcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogbnVsbCxcbiAgICAgIHJlbGF5Q29udGV4dDogX3JlbGF5Q29udGV4dCxcbiAgICAgIHJlbmRlclByb3BzOiBnZXRFbXB0eVJlbmRlclByb3BzKCksXG4gICAgICByZXF1ZXN0Q2FjaGVLZXk6IG51bGwgLy8gaWYgdGhlcmUgaXMgYW4gZXJyb3IsIGRvbid0IGNhY2hlIHJlcXVlc3RcblxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJlbGF5UXVlcnlSZW5kZXJlcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgcm9vdElzUXVlcnlSZW5kZXJlcjogZmFsc2Vcbn0pOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgUmVhY3RSZWxheUNvbnRleHQgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlDb250ZXh0Jyk7XG5cbnZhciBSZWFjdFJlbGF5UXVlcnlGZXRjaGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlbGF5UXVlcnlGZXRjaGVyJyk7XG5cbnZhciBhcmVFcXVhbCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9hcmVFcXVhbFwiKTtcblxudmFyIGJ1aWxkUmVhY3RSZWxheUNvbnRhaW5lciA9IHJlcXVpcmUoJy4vYnVpbGRSZWFjdFJlbGF5Q29udGFpbmVyJyk7XG5cbnZhciBnZXRSb290VmFyaWFibGVzRm9yRnJhZ21lbnRzID0gcmVxdWlyZSgnLi9nZXRSb290VmFyaWFibGVzRm9yRnJhZ21lbnRzJyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vUmVhY3RSZWxheUNvbnRhaW5lclV0aWxzJyksXG4gICAgZ2V0Q29udGFpbmVyTmFtZSA9IF9yZXF1aXJlLmdldENvbnRhaW5lck5hbWU7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuL1JlbGF5Q29udGV4dCcpLFxuICAgIGFzc2VydFJlbGF5Q29udGV4dCA9IF9yZXF1aXJlMi5hc3NlcnRSZWxheUNvbnRleHQ7XG5cbnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgT2JzZXJ2YWJsZSA9IF9yZXF1aXJlMy5PYnNlcnZhYmxlLFxuICAgIGNyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyID0gX3JlcXVpcmUzLmNyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyLFxuICAgIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IgPSBfcmVxdWlyZTMuY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcixcbiAgICBnZXREYXRhSURzRnJvbU9iamVjdCA9IF9yZXF1aXJlMy5nZXREYXRhSURzRnJvbU9iamVjdCxcbiAgICBnZXRSZXF1ZXN0ID0gX3JlcXVpcmUzLmdldFJlcXVlc3QsXG4gICAgZ2V0U2VsZWN0b3IgPSBfcmVxdWlyZTMuZ2V0U2VsZWN0b3IsXG4gICAgZ2V0VmFyaWFibGVzRnJvbU9iamVjdCA9IF9yZXF1aXJlMy5nZXRWYXJpYWJsZXNGcm9tT2JqZWN0LFxuICAgIGlzU2NhbGFyQW5kRXF1YWwgPSBfcmVxdWlyZTMuaXNTY2FsYXJBbmRFcXVhbDtcblxuLyoqXG4gKiBDb21wb3NlcyBhIFJlYWN0IGNvbXBvbmVudCBjbGFzcywgcmV0dXJuaW5nIGEgbmV3IGNsYXNzIHRoYXQgaW50ZXJjZXB0c1xuICogcHJvcHMsIHJlc29sdmluZyB0aGVtIHdpdGggdGhlIHByb3ZpZGVkIGZyYWdtZW50cyBhbmQgc3Vic2NyaWJpbmcgZm9yXG4gKiB1cGRhdGVzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDb250YWluZXJXaXRoRnJhZ21lbnRzKENvbXBvbmVudCwgZnJhZ21lbnRzLCB0YWdnZWROb2RlKSB7XG4gIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gIHZhciBjb250YWluZXJOYW1lID0gZ2V0Q29udGFpbmVyTmFtZShDb21wb25lbnQpO1xuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICAoMCwgX2luaGVyaXRzTG9vc2UyW1wiZGVmYXVsdFwiXSkoX2NsYXNzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIF9jbGFzcyhwcm9wcykge1xuICAgICAgdmFyIF9wcm9wcyRfX3Jvb3RJc1F1ZXJ5UiwgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcyksIFwiX2hhbmRsZUZyYWdtZW50RGF0YVVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXNvbHZlckZyb21UaGlzVXBkYXRlID0gX3RoaXMuc3RhdGUucmVzb2x2ZXI7XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHVwZGF0ZWRTdGF0ZSkge1xuICAgICAgICAgIHJldHVybiAoLy8gSWYgdGhpcyBldmVudCBiZWxvbmdzIHRvIHRoZSBjdXJyZW50IGRhdGEgc291cmNlLCB1cGRhdGUuXG4gICAgICAgICAgICAvLyBPdGhlcndpc2Ugd2Ugc2hvdWxkIGlnbm9yZSBpdC5cbiAgICAgICAgICAgIHJlc29sdmVyRnJvbVRoaXNVcGRhdGUgPT09IHVwZGF0ZWRTdGF0ZS5yZXNvbHZlciA/IHtcbiAgICAgICAgICAgICAgZGF0YTogdXBkYXRlZFN0YXRlLnJlc29sdmVyLnJlc29sdmUoKVxuICAgICAgICAgICAgfSA6IG51bGxcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcyksIFwiX3JlZmV0Y2hcIiwgZnVuY3Rpb24gKHJlZmV0Y2hWYXJpYWJsZXMsIHJlbmRlclZhcmlhYmxlcywgb2JzZXJ2ZXJPckNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNVbm1vdW50ZWQpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVhY3RSZWxheVJlZmV0Y2hDb250YWluZXI6IFVuZXhwZWN0ZWQgY2FsbCBvZiBgcmVmZXRjaGAgJyArICdvbiB1bm1vdW50ZWQgY29udGFpbmVyIGAlc2AuIEl0IGxvb2tzIGxpa2Ugc29tZSBpbnN0YW5jZXMgJyArICdvZiB5b3VyIGNvbnRhaW5lciBzdGlsbCB0cnlpbmcgdG8gcmVmZXRjaCB0aGUgZGF0YSBidXQgdGhleSBhbHJlYWR5ICcgKyAndW5tb3VudGVkLiBQbGVhc2UgbWFrZSBzdXJlIHlvdSBjbGVhciBhbGwgdGltZXJzLCBpbnRlcnZhbHMsIGFzeW5jICcgKyAnY2FsbHMsIGV0YyB0aGF0IG1heSB0cmlnZ2VyIGByZWZldGNoYC4nLCBjb250YWluZXJOYW1lKSA6IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHt9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfYXNzZXJ0UmVsYXlDb250ZXh0ID0gYXNzZXJ0UmVsYXlDb250ZXh0KF90aGlzLnByb3BzLl9fcmVsYXlDb250ZXh0KSxcbiAgICAgICAgICAgIGVudmlyb25tZW50ID0gX2Fzc2VydFJlbGF5Q29udGV4dC5lbnZpcm9ubWVudDtcblxuICAgICAgICB2YXIgcm9vdFZhcmlhYmxlcyA9IGdldFJvb3RWYXJpYWJsZXNGb3JGcmFnbWVudHMoZnJhZ21lbnRzLCBfdGhpcy5wcm9wcyk7XG4gICAgICAgIHZhciBmZXRjaFZhcmlhYmxlcyA9IHR5cGVvZiByZWZldGNoVmFyaWFibGVzID09PSAnZnVuY3Rpb24nID8gcmVmZXRjaFZhcmlhYmxlcyhfdGhpcy5fZ2V0RnJhZ21lbnRWYXJpYWJsZXMoKSkgOiByZWZldGNoVmFyaWFibGVzOyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC1zcHJlYWQtaW50ZXJmYWNlXVxuXG4gICAgICAgIGZldGNoVmFyaWFibGVzID0gKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIHJvb3RWYXJpYWJsZXMpLCBmZXRjaFZhcmlhYmxlcyk7XG4gICAgICAgIHZhciBmcmFnbWVudFZhcmlhYmxlcyA9IHJlbmRlclZhcmlhYmxlcyA/IC8vICRGbG93Rml4TWVbY2Fubm90LXNwcmVhZC1pbnRlcmZhY2VdXG4gICAgICAgICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCBmZXRjaFZhcmlhYmxlcyksIHJlbmRlclZhcmlhYmxlcykgOiBmZXRjaFZhcmlhYmxlcztcbiAgICAgICAgdmFyIGNhY2hlQ29uZmlnID0gb3B0aW9ucyA/IHtcbiAgICAgICAgICBmb3JjZTogISFvcHRpb25zLmZvcmNlXG4gICAgICAgIH0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKGNhY2hlQ29uZmlnICE9IG51bGwgJiYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tZXRhZGF0YSkgIT0gbnVsbCkge1xuICAgICAgICAgIGNhY2hlQ29uZmlnLm1ldGFkYXRhID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1ldGFkYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9ic2VydmVyID0gdHlwZW9mIG9ic2VydmVyT3JDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IHtcbiAgICAgICAgICAvLyBjYWxsYmFjayBpcyBub3QgZXhlY3R1ZWQgb24gY29tcGxldGUgb3IgdW5zdWJzY3JpYmVcbiAgICAgICAgICAvLyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgICAgICAgIG5leHQ6IG9ic2VydmVyT3JDYWxsYmFjayxcbiAgICAgICAgICBlcnJvcjogb2JzZXJ2ZXJPckNhbGxiYWNrXG4gICAgICAgIH0gOiBvYnNlcnZlck9yQ2FsbGJhY2sgfHwge307XG4gICAgICAgIHZhciBxdWVyeSA9IGdldFJlcXVlc3QodGFnZ2VkTm9kZSk7XG4gICAgICAgIHZhciBvcGVyYXRpb24gPSBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yKHF1ZXJ5LCBmZXRjaFZhcmlhYmxlcywgY2FjaGVDb25maWcpOyAvLyBUT0RPOiBUMjYyODg3NTIgZmluZCBhIGJldHRlciB3YXlcblxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBsaW50L3JlYWN0LXN0YXRlLXByb3BzLW11dGF0aW9uICovXG5cbiAgICAgICAgX3RoaXMuc3RhdGUubG9jYWxWYXJpYWJsZXMgPSBmZXRjaFZhcmlhYmxlcztcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBsaW50L3JlYWN0LXN0YXRlLXByb3BzLW11dGF0aW9uICovXG4gICAgICAgIC8vIENhbmNlbCBhbnkgcHJldmlvdXNseSBydW5uaW5nIHJlZmV0Y2guXG5cbiAgICAgICAgX3RoaXMuX3JlZmV0Y2hTdWJzY3JpcHRpb24gJiYgX3RoaXMuX3JlZmV0Y2hTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgLy8gRGVjbGFyZSByZWZldGNoU3Vic2NyaXB0aW9uIGJlZm9yZSBhc3NpZ25pbmcgaXQgaW4gLnN0YXJ0KCksIHNpbmNlXG4gICAgICAgIC8vIHN5bmNocm9ub3VzIGNvbXBsZXRpb24gbWF5IGNhbGwgY2FsbGJhY2tzIC5zdWJzY3JpYmUoKSByZXR1cm5zLlxuXG4gICAgICAgIHZhciByZWZldGNoU3Vic2NyaXB0aW9uO1xuXG4gICAgICAgIHZhciBzdG9yZVNuYXBzaG90ID0gX3RoaXMuX2dldFF1ZXJ5RmV0Y2hlcigpLmxvb2t1cEluU3RvcmUoZW52aXJvbm1lbnQsIG9wZXJhdGlvbiwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZldGNoUG9saWN5KTtcblxuICAgICAgICBpZiAoc3RvcmVTbmFwc2hvdCAhPSBudWxsKSB7XG4gICAgICAgICAgX3RoaXMuc3RhdGUucmVzb2x2ZXIuc2V0VmFyaWFibGVzKGZyYWdtZW50VmFyaWFibGVzLCBvcGVyYXRpb24ucmVxdWVzdC5ub2RlKTtcblxuICAgICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChsYXRlc3RTdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgZGF0YTogbGF0ZXN0U3RhdGUucmVzb2x2ZXIucmVzb2x2ZSgpLFxuICAgICAgICAgICAgICBjb250ZXh0Rm9yQ2hpbGRyZW46IHtcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudDogX3RoaXMucHJvcHMuX19yZWxheUNvbnRleHQuZW52aXJvbm1lbnRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0ICYmIG9ic2VydmVyLm5leHQoKTtcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlICYmIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHt9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLl9nZXRRdWVyeUZldGNoZXIoKS5leGVjdXRlKHtcbiAgICAgICAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnQsXG4gICAgICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgICAgICAgLy8gVE9ETyAoVDI2NDMwMDk5KTogQ2xlYW51cCBvbGQgcmVmZXJlbmNlc1xuICAgICAgICAgIHByZXNlcnZlUHJldmlvdXNSZWZlcmVuY2VzOiB0cnVlXG4gICAgICAgIH0pLm1lcmdlTWFwKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgIF90aGlzLnN0YXRlLnJlc29sdmVyLnNldFZhcmlhYmxlcyhmcmFnbWVudFZhcmlhYmxlcywgb3BlcmF0aW9uLnJlcXVlc3Qubm9kZSk7XG5cbiAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAobGF0ZXN0U3RhdGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBsYXRlc3RTdGF0ZS5yZXNvbHZlci5yZXNvbHZlKCksXG4gICAgICAgICAgICAgICAgY29udGV4dEZvckNoaWxkcmVuOiB7XG4gICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudDogX3RoaXMucHJvcHMuX19yZWxheUNvbnRleHQuZW52aXJvbm1lbnRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHNpbmsubmV4dCgpO1xuICAgICAgICAgICAgICBzaW5rLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJmaW5hbGx5XCJdKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBGaW5hbGl6aW5nIGEgcmVmZXRjaCBzaG91bGQgb25seSBjbGVhciB0aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uXG4gICAgICAgICAgLy8gaWYgdGhlIGZpbml6aW5nIHN1YnNjcmlwdGlvbiBpcyB0aGUgbW9zdCByZWNlbnQgY2FsbC5cbiAgICAgICAgICBpZiAoX3RoaXMuX3JlZmV0Y2hTdWJzY3JpcHRpb24gPT09IHJlZmV0Y2hTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLnN1YnNjcmliZSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgb2JzZXJ2ZXIpLCB7fSwge1xuICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uID0gcmVmZXRjaFN1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIG9ic2VydmVyLnN0YXJ0ICYmIG9ic2VydmVyLnN0YXJ0KHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICAgICAgcmVmZXRjaFN1YnNjcmlwdGlvbiAmJiByZWZldGNoU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICB2YXIgcmVsYXlDb250ZXh0ID0gYXNzZXJ0UmVsYXlDb250ZXh0KHByb3BzLl9fcmVsYXlDb250ZXh0KTtcbiAgICAgIHZhciByb290SXNRdWVyeVJlbmRlcmVyID0gKF9wcm9wcyRfX3Jvb3RJc1F1ZXJ5UiA9IHByb3BzLl9fcm9vdElzUXVlcnlSZW5kZXJlcikgIT09IG51bGwgJiYgX3Byb3BzJF9fcm9vdElzUXVlcnlSICE9PSB2b2lkIDAgPyBfcHJvcHMkX19yb290SXNRdWVyeVIgOiBmYWxzZTtcbiAgICAgIF90aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uID0gbnVsbDsgLy8gRG8gbm90IHByb3ZpZGUgYSBzdWJzY3JpcHRpb24vY2FsbGJhY2sgaGVyZS5cbiAgICAgIC8vIEl0IGlzIHBvc3NpYmxlIGZvciB0aGlzIHJlbmRlciB0byBiZSBpbnRlcnJ1cHRlZCBvciBhYm9ydGVkLFxuICAgICAgLy8gSW4gd2hpY2ggY2FzZSB0aGUgc3Vic2NyaXB0aW9uIHdvdWxkIGNhdXNlIGEgbGVhay5cbiAgICAgIC8vIFdlIHdpbGwgYWRkIHRoZSBzdWJzY3JpcHRpb24gaW4gY29tcG9uZW50RGlkTW91bnQoKS5cblxuICAgICAgdmFyIHJlc29sdmVyID0gY3JlYXRlRnJhZ21lbnRTcGVjUmVzb2x2ZXIocmVsYXlDb250ZXh0LCBjb250YWluZXJOYW1lLCBmcmFnbWVudHMsIHByb3BzLCByb290SXNRdWVyeVJlbmRlcmVyKTtcbiAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICBkYXRhOiByZXNvbHZlci5yZXNvbHZlKCksXG4gICAgICAgIGxvY2FsVmFyaWFibGVzOiBudWxsLFxuICAgICAgICBwcmV2UHJvcHM6IHByb3BzLFxuICAgICAgICBwcmV2UHJvcHNDb250ZXh0OiByZWxheUNvbnRleHQsXG4gICAgICAgIGNvbnRleHRGb3JDaGlsZHJlbjogcmVsYXlDb250ZXh0LFxuICAgICAgICByZWxheVByb3A6IGdldFJlbGF5UHJvcChyZWxheUNvbnRleHQuZW52aXJvbm1lbnQsIF90aGlzLl9yZWZldGNoKSxcbiAgICAgICAgcmVzb2x2ZXI6IHJlc29sdmVyXG4gICAgICB9O1xuICAgICAgX3RoaXMuX2lzVW5tb3VudGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IF9jbGFzcy5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuX2lzVW5tb3VudGVkID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuX3N1YnNjcmliZVRvTmV3UmVzb2x2ZXIoKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgLy8gSWYgdGhlIGVudmlyb25tZW50IGhhcyBjaGFuZ2VkIG9yIHByb3BzIHBvaW50IHRvIG5ldyByZWNvcmRzIHRoZW5cbiAgICAgIC8vIHByZXZpb3VzbHkgZmV0Y2hlZCBkYXRhIGFuZCBhbnkgcGVuZGluZyBmZXRjaGVzIG5vIGxvbmdlciBhcHBseTpcbiAgICAgIC8vIC0gRXhpc3RpbmcgcmVmZXJlbmNlcyBhcmUgb24gdGhlIG9sZCBlbnZpcm9ubWVudC5cbiAgICAgIC8vIC0gRXhpc3RpbmcgcmVmZXJlbmNlcyBhcmUgYmFzZWQgb24gb2xkIHZhcmlhYmxlcy5cbiAgICAgIC8vIC0gUGVuZGluZyBmZXRjaGVzIGFyZSBmb3IgdGhlIHByZXZpb3VzIHJlY29yZHMuXG4gICAgICBpZiAodGhpcy5zdGF0ZS5yZXNvbHZlciAhPT0gcHJldlN0YXRlLnJlc29sdmVyKSB7XG4gICAgICAgIHByZXZTdGF0ZS5yZXNvbHZlci5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuX3F1ZXJ5RmV0Y2hlciAmJiB0aGlzLl9xdWVyeUZldGNoZXIuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uICYmIHRoaXMuX3JlZmV0Y2hTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcblxuICAgICAgICB0aGlzLl9zdWJzY3JpYmVUb05ld1Jlc29sdmVyKCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZW4gbmV3IHByb3BzIGFyZSByZWNlaXZlZCwgcmVhZCBkYXRhIGZvciB0aGUgbmV3IHByb3BzIGFuZCBhZGQgaXQgdG9cbiAgICAgKiBzdGF0ZS4gUHJvcHMgbWF5IGJlIHRoZSBzYW1lIGluIHdoaWNoIGNhc2UgcHJldmlvdXMgZGF0YSBjYW4gYmUgcmV1c2VkLlxuICAgICAqL1xuICAgIDtcblxuICAgIF9jbGFzcy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIHZhciBfbmV4dFByb3BzJF9fcm9vdElzUXU7XG5cbiAgICAgIC8vIEFueSBwcm9wcyBjaGFuZ2UgY291bGQgaW1wYWN0IHRoZSBxdWVyeSwgc28gd2UgbWlycm9yIHByb3BzIGluIHN0YXRlLlxuICAgICAgLy8gVGhpcyBpcyBhbiB1bnVzdWFsIHBhdHRlcm4sIGJ1dCBuZWNlc3NhcnkgZm9yIHRoaXMgY29udGFpbmVyIHVzZWNhc2UuXG4gICAgICB2YXIgcHJldlByb3BzID0gcHJldlN0YXRlLnByZXZQcm9wcztcbiAgICAgIHZhciByZWxheUNvbnRleHQgPSBhc3NlcnRSZWxheUNvbnRleHQobmV4dFByb3BzLl9fcmVsYXlDb250ZXh0KTtcbiAgICAgIHZhciByb290SXNRdWVyeVJlbmRlcmVyID0gKF9uZXh0UHJvcHMkX19yb290SXNRdSA9IG5leHRQcm9wcy5fX3Jvb3RJc1F1ZXJ5UmVuZGVyZXIpICE9PSBudWxsICYmIF9uZXh0UHJvcHMkX19yb290SXNRdSAhPT0gdm9pZCAwID8gX25leHRQcm9wcyRfX3Jvb3RJc1F1IDogZmFsc2U7XG4gICAgICB2YXIgcHJldklEcyA9IGdldERhdGFJRHNGcm9tT2JqZWN0KGZyYWdtZW50cywgcHJldlByb3BzKTtcbiAgICAgIHZhciBuZXh0SURzID0gZ2V0RGF0YUlEc0Zyb21PYmplY3QoZnJhZ21lbnRzLCBuZXh0UHJvcHMpO1xuICAgICAgdmFyIHByZXZSb290VmFyaWFibGVzID0gZ2V0Um9vdFZhcmlhYmxlc0ZvckZyYWdtZW50cyhmcmFnbWVudHMsIHByZXZQcm9wcyk7XG4gICAgICB2YXIgbmV4dFJvb3RWYXJpYWJsZXMgPSBnZXRSb290VmFyaWFibGVzRm9yRnJhZ21lbnRzKGZyYWdtZW50cywgbmV4dFByb3BzKTtcbiAgICAgIHZhciByZXNvbHZlciA9IHByZXZTdGF0ZS5yZXNvbHZlcjsgLy8gSWYgdGhlIGVudmlyb25tZW50IGhhcyBjaGFuZ2VkIG9yIHByb3BzIHBvaW50IHRvIG5ldyByZWNvcmRzIHRoZW5cbiAgICAgIC8vIHByZXZpb3VzbHkgZmV0Y2hlZCBkYXRhIGFuZCBhbnkgcGVuZGluZyBmZXRjaGVzIG5vIGxvbmdlciBhcHBseTpcbiAgICAgIC8vIC0gRXhpc3RpbmcgcmVmZXJlbmNlcyBhcmUgb24gdGhlIG9sZCBlbnZpcm9ubWVudC5cbiAgICAgIC8vIC0gRXhpc3RpbmcgcmVmZXJlbmNlcyBhcmUgYmFzZWQgb24gb2xkIHZhcmlhYmxlcy5cbiAgICAgIC8vIC0gUGVuZGluZyBmZXRjaGVzIGFyZSBmb3IgdGhlIHByZXZpb3VzIHJlY29yZHMuXG5cbiAgICAgIGlmIChwcmV2U3RhdGUucHJldlByb3BzQ29udGV4dC5lbnZpcm9ubWVudCAhPT0gcmVsYXlDb250ZXh0LmVudmlyb25tZW50IHx8ICFhcmVFcXVhbChwcmV2Um9vdFZhcmlhYmxlcywgbmV4dFJvb3RWYXJpYWJsZXMpIHx8ICFhcmVFcXVhbChwcmV2SURzLCBuZXh0SURzKSkge1xuICAgICAgICAvLyBEbyBub3QgcHJvdmlkZSBhIHN1YnNjcmlwdGlvbi9jYWxsYmFjayBoZXJlLlxuICAgICAgICAvLyBJdCBpcyBwb3NzaWJsZSBmb3IgdGhpcyByZW5kZXIgdG8gYmUgaW50ZXJydXB0ZWQgb3IgYWJvcnRlZCxcbiAgICAgICAgLy8gSW4gd2hpY2ggY2FzZSB0aGUgc3Vic2NyaXB0aW9uIHdvdWxkIGNhdXNlIGEgbGVhay5cbiAgICAgICAgLy8gV2Ugd2lsbCBhZGQgdGhlIHN1YnNjcmlwdGlvbiBpbiBjb21wb25lbnREaWRVcGRhdGUoKS5cbiAgICAgICAgcmVzb2x2ZXIgPSBjcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlcihyZWxheUNvbnRleHQsIGNvbnRhaW5lck5hbWUsIGZyYWdtZW50cywgbmV4dFByb3BzLCByb290SXNRdWVyeVJlbmRlcmVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRhOiByZXNvbHZlci5yZXNvbHZlKCksXG4gICAgICAgICAgbG9jYWxWYXJpYWJsZXM6IG51bGwsXG4gICAgICAgICAgcHJldlByb3BzOiBuZXh0UHJvcHMsXG4gICAgICAgICAgcHJldlByb3BzQ29udGV4dDogcmVsYXlDb250ZXh0LFxuICAgICAgICAgIGNvbnRleHRGb3JDaGlsZHJlbjogcmVsYXlDb250ZXh0LFxuICAgICAgICAgIHJlbGF5UHJvcDogZ2V0UmVsYXlQcm9wKHJlbGF5Q29udGV4dC5lbnZpcm9ubWVudCwgcHJldlN0YXRlLnJlbGF5UHJvcC5yZWZldGNoKSxcbiAgICAgICAgICByZXNvbHZlcjogcmVzb2x2ZXJcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoIXByZXZTdGF0ZS5sb2NhbFZhcmlhYmxlcykge1xuICAgICAgICByZXNvbHZlci5zZXRQcm9wcyhuZXh0UHJvcHMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGF0YSA9IHJlc29sdmVyLnJlc29sdmUoKTtcblxuICAgICAgaWYgKGRhdGEgIT09IHByZXZTdGF0ZS5kYXRhKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICBwcmV2UHJvcHM6IG5leHRQcm9wc1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLl9pc1VubW91bnRlZCA9IHRydWU7XG4gICAgICB0aGlzLnN0YXRlLnJlc29sdmVyLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMuX3F1ZXJ5RmV0Y2hlciAmJiB0aGlzLl9xdWVyeUZldGNoZXIuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5fcmVmZXRjaFN1YnNjcmlwdGlvbiAmJiB0aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcblxuICAgIF9wcm90by5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICAgIC8vIFNob3J0LWNpcmN1aXQgaWYgYW55IFJlbGF5LXJlbGF0ZWQgZGF0YSBoYXMgY2hhbmdlZFxuICAgICAgaWYgKG5leHRTdGF0ZS5kYXRhICE9PSB0aGlzLnN0YXRlLmRhdGEgfHwgbmV4dFN0YXRlLnJlbGF5UHJvcCAhPT0gdGhpcy5zdGF0ZS5yZWxheVByb3ApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IC8vIE90aGVyd2lzZSwgZm9yIGNvbnZlbmllbmNlIHNob3J0LWNpcmN1aXQgaWYgYWxsIG5vbi1SZWxheSBwcm9wc1xuICAgICAgLy8gYXJlIHNjYWxhciBhbmQgZXF1YWxcblxuXG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG5leHRQcm9wcyk7XG5cbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBrZXlzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICB2YXIgX2tleSA9IGtleXNbaWldO1xuXG4gICAgICAgIGlmIChfa2V5ID09PSAnX19yZWxheUNvbnRleHQnKSB7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdGUucHJldlByb3BzQ29udGV4dC5lbnZpcm9ubWVudCAhPT0gbmV4dFN0YXRlLnByZXZQcm9wc0NvbnRleHQuZW52aXJvbm1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWZyYWdtZW50cy5oYXNPd25Qcm9wZXJ0eShfa2V5KSAmJiAhaXNTY2FsYXJBbmRFcXVhbChuZXh0UHJvcHNbX2tleV0sIHRoaXMucHJvcHNbX2tleV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3N1YnNjcmliZVRvTmV3UmVzb2x2ZXIgPSBmdW5jdGlvbiBfc3Vic2NyaWJlVG9OZXdSZXNvbHZlcigpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgZGF0YSA9IF90aGlzJHN0YXRlLmRhdGEsXG4gICAgICAgICAgcmVzb2x2ZXIgPSBfdGhpcyRzdGF0ZS5yZXNvbHZlcjsgLy8gRXZlbnQgbGlzdGVuZXJzIGFyZSBvbmx5IHNhZmUgdG8gYWRkIGR1cmluZyB0aGUgY29tbWl0IHBoYXNlLFxuICAgICAgLy8gU28gdGhleSB3b24ndCBsZWFrIGlmIHJlbmRlciBpcyBpbnRlcnJ1cHRlZCBvciBlcnJvcnMuXG5cbiAgICAgIHJlc29sdmVyLnNldENhbGxiYWNrKHRoaXMuX2hhbmRsZUZyYWdtZW50RGF0YVVwZGF0ZSk7IC8vIEV4dGVybmFsIHZhbHVlcyBjb3VsZCBjaGFuZ2UgYmV0d2VlbiByZW5kZXIgYW5kIGNvbW1pdC5cbiAgICAgIC8vIENoZWNrIGZvciB0aGlzIGNhc2UsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGFuIGV4dHJhIHN0b3JlIHJlYWQuXG5cbiAgICAgIHZhciBtYXliZU5ld0RhdGEgPSByZXNvbHZlci5yZXNvbHZlKCk7XG5cbiAgICAgIGlmIChkYXRhICE9PSBtYXliZU5ld0RhdGEpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZGF0YTogbWF5YmVOZXdEYXRhXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgbmV3IGRhdGEgZm9yIHRoZSBleGlzdGluZyBwcm9wcy9jb250ZXh0LlxuICAgICAqL1xuICAgIDtcblxuICAgIF9wcm90by5fZ2V0RnJhZ21lbnRWYXJpYWJsZXMgPSBmdW5jdGlvbiBfZ2V0RnJhZ21lbnRWYXJpYWJsZXMoKSB7XG4gICAgICByZXR1cm4gZ2V0VmFyaWFibGVzRnJvbU9iamVjdChmcmFnbWVudHMsIHRoaXMucHJvcHMpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFF1ZXJ5RmV0Y2hlciA9IGZ1bmN0aW9uIF9nZXRRdWVyeUZldGNoZXIoKSB7XG4gICAgICBpZiAoIXRoaXMuX3F1ZXJ5RmV0Y2hlcikge1xuICAgICAgICB0aGlzLl9xdWVyeUZldGNoZXIgPSBuZXcgUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlcigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fcXVlcnlGZXRjaGVyO1xuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb21wb25lbnRSZWYgPSBfdGhpcyRwcm9wcy5jb21wb25lbnRSZWYsXG4gICAgICAgICAgX19yZWxheUNvbnRleHQgPSBfdGhpcyRwcm9wcy5fX3JlbGF5Q29udGV4dCxcbiAgICAgICAgICBfX3Jvb3RJc1F1ZXJ5UmVuZGVyZXIgPSBfdGhpcyRwcm9wcy5fX3Jvb3RJc1F1ZXJ5UmVuZGVyZXIsXG4gICAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyW1wiZGVmYXVsdFwiXSkoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudFJlZlwiLCBcIl9fcmVsYXlDb250ZXh0XCIsIFwiX19yb290SXNRdWVyeVJlbmRlcmVyXCJdKTtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIHJlbGF5UHJvcCA9IF90aGlzJHN0YXRlMi5yZWxheVByb3AsXG4gICAgICAgICAgY29udGV4dEZvckNoaWxkcmVuID0gX3RoaXMkc3RhdGUyLmNvbnRleHRGb3JDaGlsZHJlbjtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdFJlbGF5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogY29udGV4dEZvckNoaWxkcmVuXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgcHJvcHMsIHRoaXMuc3RhdGUuZGF0YSwge1xuICAgICAgICByZWY6IGNvbXBvbmVudFJlZixcbiAgICAgICAgcmVsYXk6IHJlbGF5UHJvcFxuICAgICAgfSkpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfShSZWFjdC5Db21wb25lbnQpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9jbGFzcywgXCJkaXNwbGF5TmFtZVwiLCBjb250YWluZXJOYW1lKSwgX3RlbXA7XG59XG5cbmZ1bmN0aW9uIGdldFJlbGF5UHJvcChlbnZpcm9ubWVudCwgcmVmZXRjaCkge1xuICByZXR1cm4ge1xuICAgIGVudmlyb25tZW50OiBlbnZpcm9ubWVudCxcbiAgICByZWZldGNoOiByZWZldGNoXG4gIH07XG59XG4vKipcbiAqIFdyYXAgdGhlIGJhc2ljIGBjcmVhdGVDb250YWluZXIoKWAgZnVuY3Rpb24gd2l0aCBsb2dpYyB0byBhZGFwdCB0byB0aGVcbiAqIGBjb250ZXh0LnJlbGF5LmVudmlyb25tZW50YCBpbiB3aGljaCBpdCBpcyByZW5kZXJlZC4gU3BlY2lmaWNhbGx5LCB0aGVcbiAqIGV4dHJhY3Rpb24gb2YgdGhlIGVudmlyb25tZW50LXNwZWNpZmljIHZlcnNpb24gb2YgZnJhZ21lbnRzIGluIHRoZVxuICogYGZyYWdtZW50U3BlY2AgaXMgbWVtb2l6ZWQgb25jZSBwZXIgZW52aXJvbm1lbnQsIHJhdGhlciB0aGFuIG9uY2UgcGVyXG4gKiBpbnN0YW5jZSBvZiB0aGUgY29udGFpbmVyIGNvbnN0cnVjdGVkL3JlbmRlcmVkLlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKENvbXBvbmVudCwgZnJhZ21lbnRTcGVjLCB0YWdnZWROb2RlKSB7XG4gIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl1cbiAgcmV0dXJuIGJ1aWxkUmVhY3RSZWxheUNvbnRhaW5lcihDb21wb25lbnQsIGZyYWdtZW50U3BlYywgZnVuY3Rpb24gKENvbXBvbmVudENsYXNzLCBmcmFnbWVudHMpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGFpbmVyV2l0aEZyYWdtZW50cyhDb21wb25lbnRDbGFzcywgZnJhZ21lbnRzLCB0YWdnZWROb2RlKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVDb250YWluZXI6IGNyZWF0ZUNvbnRhaW5lclxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgaXNSZWxheUVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9pc1JlbGF5RW52aXJvbm1lbnQnKTtcblxuLyoqXG4gKiBBc3NlcnRzIHRoYXQgdGhlIGlucHV0IGlzIGEgbWF0Y2hlcyB0aGUgYFJlbGF5Q29udGV4dGAgdHlwZSBkZWZpbmVkIGluXG4gKiBgUmVsYXlFbnZpcm9ubWVudFR5cGVzYCBhbmQgcmV0dXJucyBpdCBhcyB0aGF0IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFJlbGF5Q29udGV4dChyZWxheSkge1xuICAhaXNSZWxheUNvbnRleHQocmVsYXkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlDb250ZXh0OiBFeHBlY3RlZCBgY29udGV4dC5yZWxheWAgdG8gYmUgYW4gb2JqZWN0IGNvbmZvcm1pbmcgdG8gJyArICd0aGUgYFJlbGF5Q29udGV4dGAgaW50ZXJmYWNlLCBnb3QgYCVzYC4nLCByZWxheSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcmVsYXk7XG59XG4vKipcbiAqIERldGVybWluZSBpZiB0aGUgaW5wdXQgaXMgYSBwbGFpbiBvYmplY3QgdGhhdCBtYXRjaGVzIHRoZSBgUmVsYXlDb250ZXh0YFxuICogdHlwZSBkZWZpbmVkIGluIGBSZWxheUVudmlyb25tZW50VHlwZXNgLlxuICovXG5cblxuZnVuY3Rpb24gaXNSZWxheUNvbnRleHQoY29udGV4dCkge1xuICByZXR1cm4gdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnICYmIGNvbnRleHQgIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkoY29udGV4dCkgJiYgaXNSZWxheUVudmlyb25tZW50KGNvbnRleHQuZW52aXJvbm1lbnQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXNzZXJ0UmVsYXlDb250ZXh0OiBhc3NlcnRSZWxheUNvbnRleHQsXG4gIGlzUmVsYXlDb250ZXh0OiBpc1JlbGF5Q29udGV4dFxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG4vKipcbiAqIEZhaWwgZmFzdCBpZiB0aGUgdXNlciBzdXBwbGllcyBpbnZhbGlkIGZyYWdtZW50cyBhcyBpbnB1dC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0RnJhZ21lbnRNYXAoY29tcG9uZW50TmFtZSwgZnJhZ21lbnRTcGVjKSB7XG4gICEoZnJhZ21lbnRTcGVjICYmIHR5cGVvZiBmcmFnbWVudFNwZWMgPT09ICdvYmplY3QnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NvdWxkIG5vdCBjcmVhdGUgUmVsYXkgQ29udGFpbmVyIGZvciBgJXNgLiAnICsgJ0V4cGVjdGVkIGEgc2V0IG9mIEdyYXBoUUwgZnJhZ21lbnRzLCBnb3QgYCVzYCBpbnN0ZWFkLicsIGNvbXBvbmVudE5hbWUsIGZyYWdtZW50U3BlYykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIGZvciAodmFyIGtleSBpbiBmcmFnbWVudFNwZWMpIHtcbiAgICBpZiAoZnJhZ21lbnRTcGVjLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHZhciBmcmFnbWVudCA9IGZyYWdtZW50U3BlY1trZXldO1xuICAgICAgIShmcmFnbWVudCAmJiAodHlwZW9mIGZyYWdtZW50ID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgZnJhZ21lbnQgPT09ICdmdW5jdGlvbicpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NvdWxkIG5vdCBjcmVhdGUgUmVsYXkgQ29udGFpbmVyIGZvciBgJXNgLiAnICsgJ1RoZSB2YWx1ZSBvZiBmcmFnbWVudCBgJXNgIHdhcyBleHBlY3RlZCB0byBiZSBhIGZyYWdtZW50LCBnb3QgYCVzYCBpbnN0ZWFkLicsIGNvbXBvbmVudE5hbWUsIGtleSwgZnJhZ21lbnQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NlcnRGcmFnbWVudE1hcDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgUmVhY3RSZWxheUNvbnRleHQgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlDb250ZXh0Jyk7XG5cbnZhciBSZWFjdFJlbGF5UXVlcnlSZW5kZXJlckNvbnRleHQgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlRdWVyeVJlbmRlcmVyQ29udGV4dCcpO1xuXG52YXIgYXNzZXJ0RnJhZ21lbnRNYXAgPSByZXF1aXJlKCcuL2Fzc2VydEZyYWdtZW50TWFwJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHJlYWRDb250ZXh0ID0gcmVxdWlyZSgnLi9yZWFkQ29udGV4dCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlDb250YWluZXJVdGlscycpLFxuICAgIGdldENvbXBvbmVudE5hbWUgPSBfcmVxdWlyZS5nZXRDb21wb25lbnROYW1lLFxuICAgIGdldENvbnRhaW5lck5hbWUgPSBfcmVxdWlyZS5nZXRDb250YWluZXJOYW1lO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIGdldEZyYWdtZW50ID0gX3JlcXVpcmUyLmdldEZyYWdtZW50O1xuXG4vKipcbiAqIEhlbHBlciB0byBjcmVhdGUgdGhlIFJlbGF5IEhPQ3Mgd2l0aCByZWYgZm9yd2FyZGluZywgc2V0dGluZyB0aGUgZGlzcGxheU5hbWVcbiAqIGFuZCByZWFkaW5nIHRoZSBSZWFjdCBjb250ZXh0LlxuICovXG5mdW5jdGlvbiBidWlsZFJlYWN0UmVsYXlDb250YWluZXIoQ29tcG9uZW50Q2xhc3MsIGZyYWdtZW50U3BlYywgY3JlYXRlQ29udGFpbmVyV2l0aEZyYWdtZW50cykge1xuICAvLyBTYW5pdHktY2hlY2sgdXNlci1kZWZpbmVkIGZyYWdtZW50IGlucHV0XG4gIHZhciBjb250YWluZXJOYW1lID0gZ2V0Q29udGFpbmVyTmFtZShDb21wb25lbnRDbGFzcyk7XG4gIGFzc2VydEZyYWdtZW50TWFwKGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50Q2xhc3MpLCBmcmFnbWVudFNwZWMpO1xuICB2YXIgZnJhZ21lbnRzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGZyYWdtZW50U3BlYykge1xuICAgIGZyYWdtZW50c1trZXldID0gZ2V0RnJhZ21lbnQoZnJhZ21lbnRTcGVjW2tleV0pO1xuICB9XG5cbiAgdmFyIENvbnRhaW5lciA9IGNyZWF0ZUNvbnRhaW5lcldpdGhGcmFnbWVudHMoQ29tcG9uZW50Q2xhc3MsIGZyYWdtZW50cyk7XG4gIENvbnRhaW5lci5kaXNwbGF5TmFtZSA9IGNvbnRhaW5lck5hbWU7XG5cbiAgZnVuY3Rpb24gZm9yd2FyZFJlZihwcm9wcywgcmVmKSB7XG4gICAgdmFyIF9xdWVyeVJlbmRlcmVyQ29udGV4dDtcblxuICAgIHZhciBjb250ZXh0ID0gcmVhZENvbnRleHQoUmVhY3RSZWxheUNvbnRleHQpO1xuICAgICEoY29udGV4dCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2Alc2AgdHJpZWQgdG8gcmVuZGVyIGEgY29udGV4dCB0aGF0IHdhcyBub3QgdmFsaWQgdGhpcyBtZWFucyB0aGF0ICcgKyAnYCVzYCB3YXMgcmVuZGVyZWQgb3V0c2lkZSBvZiBhIHF1ZXJ5IHJlbmRlcmVyLicsIGNvbnRhaW5lck5hbWUsIGNvbnRhaW5lck5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgcXVlcnlSZW5kZXJlckNvbnRleHQgPSByZWFkQ29udGV4dChSZWFjdFJlbGF5UXVlcnlSZW5kZXJlckNvbnRleHQpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250YWluZXIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgcHJvcHMsIHtcbiAgICAgIF9fcmVsYXlDb250ZXh0OiBjb250ZXh0LFxuICAgICAgX19yb290SXNRdWVyeVJlbmRlcmVyOiAoX3F1ZXJ5UmVuZGVyZXJDb250ZXh0ID0gcXVlcnlSZW5kZXJlckNvbnRleHQgPT09IG51bGwgfHwgcXVlcnlSZW5kZXJlckNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHF1ZXJ5UmVuZGVyZXJDb250ZXh0LnJvb3RJc1F1ZXJ5UmVuZGVyZXIpICE9PSBudWxsICYmIF9xdWVyeVJlbmRlcmVyQ29udGV4dCAhPT0gdm9pZCAwID8gX3F1ZXJ5UmVuZGVyZXJDb250ZXh0IDogZmFsc2UsXG4gICAgICBjb21wb25lbnRSZWY6IHByb3BzLmNvbXBvbmVudFJlZiB8fCByZWZcbiAgICB9KSk7XG4gIH1cblxuICBmb3J3YXJkUmVmLmRpc3BsYXlOYW1lID0gY29udGFpbmVyTmFtZTtcbiAgdmFyIEZvcndhcmRDb250YWluZXIgPSBSZWFjdC5mb3J3YXJkUmVmKGZvcndhcmRSZWYpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBVc2VkIGJ5IFJlbGF5TW9kZXJuVGVzdFV0aWxzXG4gICAgRm9yd2FyZENvbnRhaW5lci5fX0NvbXBvbmVudENsYXNzID0gQ29tcG9uZW50Q2xhc3M7XG4gICAgRm9yd2FyZENvbnRhaW5lci5kaXNwbGF5TmFtZSA9IGNvbnRhaW5lck5hbWU7XG4gIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuXG5cbiAgcmV0dXJuIEZvcndhcmRDb250YWluZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnVpbGRSZWFjdFJlbGF5Q29udGFpbmVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIGdldFNlbGVjdG9yID0gX3JlcXVpcmUuZ2V0U2VsZWN0b3I7XG5cbmZ1bmN0aW9uIGdldFJvb3RWYXJpYWJsZXNGb3JGcmFnbWVudHMoZnJhZ21lbnRzLCBwcm9wcykge1xuICB2YXIgcm9vdFZhcmlhYmxlcyA9IHt9OyAvLyBOT1RFOiBGb3IgZXh0cmEgc2FmZXR5LCB3ZSBtYWtlIHN1cmUgdGhlIHJvb3RWYXJpYWJsZXMgaW5jbHVkZSB0aGVcbiAgLy8gdmFyaWFibGVzIGZyb20gYWxsIG93bmVycyBpbiB0aGlzIGZyYWdtZW50U3BlYywgZXZlbiB0aG91Z2ggdGhleVxuICAvLyBzaG91bGQgYWxsIHBvaW50IHRvIHRoZSBzYW1lIG93bmVyXG5cbiAgT2JqZWN0LmtleXMoZnJhZ21lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgX3NlbGVjdG9yJHNlbGVjdG9ycyQsIF9zZWxlY3RvciRzZWxlY3RvcnMkMiwgX3NlbGVjdG9yJG93bmVyJHZhcmlhO1xuXG4gICAgdmFyIGZyYWdtZW50Tm9kZSA9IGZyYWdtZW50c1trZXldO1xuICAgIHZhciBmcmFnbWVudFJlZiA9IHByb3BzW2tleV07XG4gICAgdmFyIHNlbGVjdG9yID0gZ2V0U2VsZWN0b3IoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZik7XG4gICAgdmFyIGZyYWdtZW50T3duZXJWYXJpYWJsZXMgPSBzZWxlY3RvciAhPSBudWxsICYmIHNlbGVjdG9yLmtpbmQgPT09ICdQbHVyYWxSZWFkZXJTZWxlY3RvcicgPyAoX3NlbGVjdG9yJHNlbGVjdG9ycyQgPSAoX3NlbGVjdG9yJHNlbGVjdG9ycyQyID0gc2VsZWN0b3Iuc2VsZWN0b3JzWzBdKSA9PT0gbnVsbCB8fCBfc2VsZWN0b3Ikc2VsZWN0b3JzJDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zZWxlY3RvciRzZWxlY3RvcnMkMi5vd25lci52YXJpYWJsZXMpICE9PSBudWxsICYmIF9zZWxlY3RvciRzZWxlY3RvcnMkICE9PSB2b2lkIDAgPyBfc2VsZWN0b3Ikc2VsZWN0b3JzJCA6IHt9IDogKF9zZWxlY3RvciRvd25lciR2YXJpYSA9IHNlbGVjdG9yID09PSBudWxsIHx8IHNlbGVjdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZWxlY3Rvci5vd25lci52YXJpYWJsZXMpICE9PSBudWxsICYmIF9zZWxlY3RvciRvd25lciR2YXJpYSAhPT0gdm9pZCAwID8gX3NlbGVjdG9yJG93bmVyJHZhcmlhIDoge307IC8vICRGbG93Rml4TWVbY2Fubm90LXNwcmVhZC1pbnRlcmZhY2VdXG5cbiAgICByb290VmFyaWFibGVzID0gKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIHJvb3RWYXJpYWJsZXMpLCBmcmFnbWVudE93bmVyVmFyaWFibGVzKTtcbiAgfSk7XG4gIHJldHVybiByb290VmFyaWFibGVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJvb3RWYXJpYWJsZXNGb3JGcmFnbWVudHM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFbnRyeVBvaW50Q29udGFpbmVyID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy9FbnRyeVBvaW50Q29udGFpbmVyLnJlYWN0Jyk7XG5cbnZhciBSZWFjdFJlbGF5Q29udGV4dCA9IHJlcXVpcmUoJy4vUmVhY3RSZWxheUNvbnRleHQnKTtcblxudmFyIFJlYWN0UmVsYXlGcmFnbWVudENvbnRhaW5lciA9IHJlcXVpcmUoJy4vUmVhY3RSZWxheUZyYWdtZW50Q29udGFpbmVyJyk7XG5cbnZhciBSZWFjdFJlbGF5TG9jYWxRdWVyeVJlbmRlcmVyID0gcmVxdWlyZSgnLi9SZWFjdFJlbGF5TG9jYWxRdWVyeVJlbmRlcmVyJyk7XG5cbnZhciBSZWFjdFJlbGF5UGFnaW5hdGlvbkNvbnRhaW5lciA9IHJlcXVpcmUoJy4vUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXInKTtcblxudmFyIFJlYWN0UmVsYXlRdWVyeVJlbmRlcmVyID0gcmVxdWlyZSgnLi9SZWFjdFJlbGF5UXVlcnlSZW5kZXJlcicpO1xuXG52YXIgUmVhY3RSZWxheVJlZmV0Y2hDb250YWluZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlSZWZldGNoQ29udGFpbmVyJyk7XG5cbnZhciBSZWxheUVudmlyb25tZW50UHJvdmlkZXIgPSByZXF1aXJlKCcuL3JlbGF5LWhvb2tzL1JlbGF5RW52aXJvbm1lbnRQcm92aWRlcicpO1xuXG52YXIgUmVsYXlSdW50aW1lID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpO1xuXG52YXIgbG9hZEVudHJ5UG9pbnQgPSByZXF1aXJlKCcuL3JlbGF5LWhvb2tzL2xvYWRFbnRyeVBvaW50Jyk7XG5cbnZhciB1c2VFbnRyeVBvaW50TG9hZGVyID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy91c2VFbnRyeVBvaW50TG9hZGVyJyk7XG5cbnZhciB1c2VGcmFnbWVudCA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlRnJhZ21lbnQnKTtcblxudmFyIHVzZUxhenlMb2FkUXVlcnkgPSByZXF1aXJlKCcuL3JlbGF5LWhvb2tzL3VzZUxhenlMb2FkUXVlcnknKTtcblxudmFyIHVzZU11dGF0aW9uID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy91c2VNdXRhdGlvbicpO1xuXG52YXIgdXNlUGFnaW5hdGlvbkZyYWdtZW50ID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy91c2VQYWdpbmF0aW9uRnJhZ21lbnQnKTtcblxudmFyIHVzZVByZWxvYWRlZFF1ZXJ5ID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy91c2VQcmVsb2FkZWRRdWVyeScpO1xuXG52YXIgdXNlUXVlcnlMb2FkZXIgPSByZXF1aXJlKCcuL3JlbGF5LWhvb2tzL3VzZVF1ZXJ5TG9hZGVyJyk7XG5cbnZhciB1c2VSZWZldGNoYWJsZUZyYWdtZW50ID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy91c2VSZWZldGNoYWJsZUZyYWdtZW50Jyk7XG5cbnZhciB1c2VSZWxheUVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy91c2VSZWxheUVudmlyb25tZW50Jyk7XG5cbnZhciB1c2VTdWJzY3JpYmVUb0ludmFsaWRhdGlvblN0YXRlID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy91c2VTdWJzY3JpYmVUb0ludmFsaWRhdGlvblN0YXRlJyk7XG5cbnZhciB1c2VTdWJzY3JpcHRpb24gPSByZXF1aXJlKCcuL3JlbGF5LWhvb2tzL3VzZVN1YnNjcmlwdGlvbicpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL3JlbGF5LWhvb2tzL2xvYWRRdWVyeScpLFxuICAgIGxvYWRRdWVyeSA9IF9yZXF1aXJlLmxvYWRRdWVyeTtcblxuLyoqXG4gKiBUaGUgcHVibGljIGludGVyZmFjZSB0byByZWFjdC1yZWxheS5cbiAqIEN1cnJlbnRseSBjb250YWlucyBib3RoIFJlbGF5IEhvb2tzIGFuZCBsZWdhY3kgQ29udGFpbmVyIEFQSXMuXG4gKiBXaWxsIGV2ZW50dWFsbHkgb25seSBleHBvcnQgdGhlIGludGVyZmFjZSBmcm9tIC4vaG9va3MuanMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICBDb25uZWN0aW9uSGFuZGxlcjogUmVsYXlSdW50aW1lLkNvbm5lY3Rpb25IYW5kbGVyLFxuICBRdWVyeVJlbmRlcmVyOiBSZWFjdFJlbGF5UXVlcnlSZW5kZXJlcixcbiAgTG9jYWxRdWVyeVJlbmRlcmVyOiBSZWFjdFJlbGF5TG9jYWxRdWVyeVJlbmRlcmVyLFxuICBNdXRhdGlvblR5cGVzOiBSZWxheVJ1bnRpbWUuTXV0YXRpb25UeXBlcyxcbiAgUmFuZ2VPcGVyYXRpb25zOiBSZWxheVJ1bnRpbWUuUmFuZ2VPcGVyYXRpb25zLFxuICBSZWFjdFJlbGF5Q29udGV4dDogUmVhY3RSZWxheUNvbnRleHQsXG4gIGFwcGx5T3B0aW1pc3RpY011dGF0aW9uOiBSZWxheVJ1bnRpbWUuYXBwbHlPcHRpbWlzdGljTXV0YXRpb24sXG4gIGNvbW1pdExvY2FsVXBkYXRlOiBSZWxheVJ1bnRpbWUuY29tbWl0TG9jYWxVcGRhdGUsXG4gIGNvbW1pdE11dGF0aW9uOiBSZWxheVJ1bnRpbWUuY29tbWl0TXV0YXRpb24sXG4gIGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyOiBSZWFjdFJlbGF5RnJhZ21lbnRDb250YWluZXIuY3JlYXRlQ29udGFpbmVyLFxuICBjcmVhdGVQYWdpbmF0aW9uQ29udGFpbmVyOiBSZWFjdFJlbGF5UGFnaW5hdGlvbkNvbnRhaW5lci5jcmVhdGVDb250YWluZXIsXG4gIGNyZWF0ZVJlZmV0Y2hDb250YWluZXI6IFJlYWN0UmVsYXlSZWZldGNoQ29udGFpbmVyLmNyZWF0ZUNvbnRhaW5lcixcbiAgZmV0Y2hRdWVyeV9ERVBSRUNBVEVEOiBSZWxheVJ1bnRpbWUuZmV0Y2hRdWVyeV9ERVBSRUNBVEVELFxuICBncmFwaHFsOiBSZWxheVJ1bnRpbWUuZ3JhcGhxbCxcbiAgcmVhZElubGluZURhdGE6IFJlbGF5UnVudGltZS5yZWFkSW5saW5lRGF0YSxcbiAgcmVxdWVzdFN1YnNjcmlwdGlvbjogUmVsYXlSdW50aW1lLnJlcXVlc3RTdWJzY3JpcHRpb24sXG4gIC8vIFJlbGF5IEhvb2tzXG4gIEVudHJ5UG9pbnRDb250YWluZXI6IEVudHJ5UG9pbnRDb250YWluZXIsXG4gIFJlbGF5RW52aXJvbm1lbnRQcm92aWRlcjogUmVsYXlFbnZpcm9ubWVudFByb3ZpZGVyLFxuICBmZXRjaFF1ZXJ5OiBSZWxheVJ1bnRpbWUuZmV0Y2hRdWVyeSxcbiAgbG9hZFF1ZXJ5OiBsb2FkUXVlcnksXG4gIGxvYWRFbnRyeVBvaW50OiBsb2FkRW50cnlQb2ludCxcbiAgdXNlRnJhZ21lbnQ6IHVzZUZyYWdtZW50LFxuICB1c2VMYXp5TG9hZFF1ZXJ5OiB1c2VMYXp5TG9hZFF1ZXJ5LFxuICB1c2VFbnRyeVBvaW50TG9hZGVyOiB1c2VFbnRyeVBvaW50TG9hZGVyLFxuICB1c2VRdWVyeUxvYWRlcjogdXNlUXVlcnlMb2FkZXIsXG4gIHVzZU11dGF0aW9uOiB1c2VNdXRhdGlvbixcbiAgdXNlUGFnaW5hdGlvbkZyYWdtZW50OiB1c2VQYWdpbmF0aW9uRnJhZ21lbnQsXG4gIHVzZVByZWxvYWRlZFF1ZXJ5OiB1c2VQcmVsb2FkZWRRdWVyeSxcbiAgdXNlUmVmZXRjaGFibGVGcmFnbWVudDogdXNlUmVmZXRjaGFibGVGcmFnbWVudCxcbiAgdXNlUmVsYXlFbnZpcm9ubWVudDogdXNlUmVsYXlFbnZpcm9ubWVudCxcbiAgdXNlU3Vic2NyaWJlVG9JbnZhbGlkYXRpb25TdGF0ZTogdXNlU3Vic2NyaWJlVG9JbnZhbGlkYXRpb25TdGF0ZSxcbiAgdXNlU3Vic2NyaXB0aW9uOiB1c2VTdWJzY3JpcHRpb25cbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG4vKipcbiAqIERldGVybWluZSBpZiBhIGdpdmVuIHZhbHVlIGlzIGFuIG9iamVjdCB0aGF0IGltcGxlbWVudHMgdGhlIGBFbnZpcm9ubWVudGBcbiAqIGludGVyZmFjZSBkZWZpbmVkIGluIGBSZWxheUVudmlyb25tZW50VHlwZXNgLlxuICovXG5cbmZ1bmN0aW9uIGlzUmVsYXlFbnZpcm9ubWVudChlbnZpcm9ubWVudCkge1xuICByZXR1cm4gdHlwZW9mIGVudmlyb25tZW50ID09PSAnb2JqZWN0JyAmJiBlbnZpcm9ubWVudCAhPT0gbnVsbCAmJiAvLyBUT0RPOiBhZGQgYXBwbHlNdXRhdGlvbi9zZW5kTXV0YXRpb24gb25jZSByZWFkeSBpbiBib3RoIGNvcmVzXG4gIHR5cGVvZiBlbnZpcm9ubWVudC5jaGVjayA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW52aXJvbm1lbnQubG9va3VwID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbnZpcm9ubWVudC5yZXRhaW4gPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVudmlyb25tZW50LmV4ZWN1dGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVudmlyb25tZW50LnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1JlbGF5RW52aXJvbm1lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfUmVhY3QkX19TRUNSRVRfSU5URVIgPVxuLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIEZsb3cgZG9lc24ndCBrbm93IGFib3V0IFJlYWN0J3MgaW50ZXJuYWxzIGZvclxuICogZ29vZCByZWFzb24sIGJ1dCBmb3Igbm93LCBSZWxheSBuZWVkcyB0aGUgZGlzcGF0Y2hlciB0byByZWFkIGNvbnRleHQuICovXG5SZWFjdC5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxcbiAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyID0gX1JlYWN0JF9fU0VDUkVUX0lOVEVSLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsXG4gICAgUmVhY3RDdXJyZW50T3duZXIgPSBfUmVhY3QkX19TRUNSRVRfSU5URVIuUmVhY3RDdXJyZW50T3duZXI7XG5cbmZ1bmN0aW9uIHJlYWRDb250ZXh0KENvbnRleHQpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyICE9IG51bGwgPyBSZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQgOiBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50RGlzcGF0Y2hlcjtcbiAgcmV0dXJuIGRpc3BhdGNoZXIucmVhZENvbnRleHQoQ29udGV4dCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVhZENvbnRleHQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUHJvZmlsZXJDb250ZXh0ID0gcmVxdWlyZSgnLi9Qcm9maWxlckNvbnRleHQnKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIHVzZVJlbGF5RW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL3VzZVJlbGF5RW52aXJvbm1lbnQnKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICB1c2VDb250ZXh0ID0gX3JlcXVpcmUudXNlQ29udGV4dCxcbiAgICB1c2VFZmZlY3QgPSBfcmVxdWlyZS51c2VFZmZlY3Q7XG5cbmZ1bmN0aW9uIEVudHJ5UG9pbnRDb250YWluZXIoX3JlZikge1xuICB2YXIgZW50cnlQb2ludFJlZmVyZW5jZSA9IF9yZWYuZW50cnlQb2ludFJlZmVyZW5jZSxcbiAgICAgIHByb3BzID0gX3JlZi5wcm9wcztcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhlbnRyeVBvaW50UmVmZXJlbmNlLmlzRGlzcG9zZWQgPT09IGZhbHNlLCAnPEVudHJ5UG9pbnRDb250YWluZXI+OiBFeHBlY3RlZCBlbnRyeVBvaW50UmVmZXJlbmNlIHRvIG5vdCBiZSBkaXNwb3NlZCAnICsgJ3lldC4gVGhpcyBpcyBiZWNhdXNlIGRpc3Bvc2luZyB0aGUgZW50cnlwb2ludCBtYXJrcyBpdCBmb3IgZnV0dXJlIGdhcmJhZ2UgJyArICdjb2xsZWN0aW9uLCBhbmQgYXMgc3VjaCBtYXkgbm8gbG9uZ2VyIGJlIHByZXNlbnQgaW4gdGhlIFJlbGF5IHN0b3JlLiAnICsgJ0luIHRoZSBmdXR1cmUsIHRoaXMgd2lsbCBiZWNvbWUgYSBoYXJkIGVycm9yLicpIDogdm9pZCAwO1xuICB2YXIgZ2V0Q29tcG9uZW50ID0gZW50cnlQb2ludFJlZmVyZW5jZS5nZXRDb21wb25lbnQsXG4gICAgICBxdWVyaWVzID0gZW50cnlQb2ludFJlZmVyZW5jZS5xdWVyaWVzLFxuICAgICAgZW50cnlQb2ludHMgPSBlbnRyeVBvaW50UmVmZXJlbmNlLmVudHJ5UG9pbnRzLFxuICAgICAgZXh0cmFQcm9wcyA9IGVudHJ5UG9pbnRSZWZlcmVuY2UuZXh0cmFQcm9wcyxcbiAgICAgIHJvb3RNb2R1bGVJRCA9IGVudHJ5UG9pbnRSZWZlcmVuY2Uucm9vdE1vZHVsZUlEO1xuICB2YXIgQ29tcG9uZW50ID0gZ2V0Q29tcG9uZW50KCk7XG4gIHZhciBwcm9maWxlckNvbnRleHQgPSB1c2VDb250ZXh0KFByb2ZpbGVyQ29udGV4dCk7XG4gIHZhciBlbnZpcm9ubWVudCA9IHVzZVJlbGF5RW52aXJvbm1lbnQoKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBlbnZpcm9ubWVudC5fX2xvZyh7XG4gICAgICBuYW1lOiAnZW50cnlwb2ludC5yb290LmNvbnN1bWUnLFxuICAgICAgcHJvZmlsZXJDb250ZXh0OiBwcm9maWxlckNvbnRleHQsXG4gICAgICByb290TW9kdWxlSUQ6IHJvb3RNb2R1bGVJRFxuICAgIH0pO1xuICB9LCBbZW52aXJvbm1lbnQsIHByb2ZpbGVyQ29udGV4dCwgcm9vdE1vZHVsZUlEXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHtcbiAgICBlbnRyeVBvaW50czogZW50cnlQb2ludHMsXG4gICAgZXh0cmFQcm9wczogZXh0cmFQcm9wcyxcbiAgICBwcm9wczogcHJvcHMsXG4gICAgcXVlcmllczogcXVlcmllc1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFbnRyeVBvaW50Q29udGFpbmVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiKSk7XG5cbnZhciBMUlVDYWNoZSA9IHJlcXVpcmUoJy4vTFJVQ2FjaGUnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgZ2V0UHJvbWlzZUZvckFjdGl2ZVJlcXVlc3QgPSBfcmVxdWlyZS5fX2ludGVybmFsLmdldFByb21pc2VGb3JBY3RpdmVSZXF1ZXN0LFxuICAgIGdldEZyYWdtZW50SWRlbnRpZmllciA9IF9yZXF1aXJlLmdldEZyYWdtZW50SWRlbnRpZmllcixcbiAgICBnZXRTZWxlY3RvciA9IF9yZXF1aXJlLmdldFNlbGVjdG9yLFxuICAgIGlzUHJvbWlzZSA9IF9yZXF1aXJlLmlzUHJvbWlzZSxcbiAgICByZWN5Y2xlTm9kZXNJbnRvID0gX3JlcXVpcmUucmVjeWNsZU5vZGVzSW50byxcbiAgICByZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHMgPSBfcmVxdWlyZS5yZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHM7XG5cbnZhciBXRUFLTUFQX1NVUFBPUlRFRCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nO1xuLy8gVE9ETzogRml4IHRvIG5vdCByZWx5IG9uIExSVS4gSWYgdGhlIG51bWJlciBvZiBhY3RpdmUgZnJhZ21lbnRzIGV4Y2VlZHMgdGhpc1xuLy8gY2FwYWNpdHksIHJlYWRTcGVjKCkgd2lsbCBmYWlsIHRvIGZpbmQgY2FjaGVkIGVudHJpZXMgYW5kIGJyZWFrIG9iamVjdFxuLy8gaWRlbnRpdHkgZXZlbiBpZiBkYXRhIGhhc24ndCBjaGFuZ2VkLlxudmFyIENBQ0hFX0NBUEFDSVRZID0gMTAwMDAwMDsgLy8gdGhpcyBpcyBmcm96ZW4gc28gdGhhdCB1c2VycyBkb24ndCBhY2NpZGVudGFsbHkgcHVzaCBkYXRhIGludG8gdGhlIGFycmF5XG5cbnZhciBDT05TVEFOVF9SRUFET05MWV9FTVBUWV9BUlJBWSA9IE9iamVjdC5mcmVlemUoW10pO1xuXG5mdW5jdGlvbiBpc01pc3NpbmdEYXRhKHNuYXBzaG90KSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHNuYXBzaG90KSkge1xuICAgIHJldHVybiBzbmFwc2hvdC5zb21lKGZ1bmN0aW9uIChzKSB7XG4gICAgICByZXR1cm4gcy5pc01pc3NpbmdEYXRhO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHNuYXBzaG90LmlzTWlzc2luZ0RhdGE7XG59XG5cbmZ1bmN0aW9uIGdldEZyYWdtZW50UmVzdWx0KGNhY2hlS2V5LCBzbmFwc2hvdCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShzbmFwc2hvdCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2FjaGVLZXk6IGNhY2hlS2V5LFxuICAgICAgc25hcHNob3Q6IHNuYXBzaG90LFxuICAgICAgZGF0YTogc25hcHNob3QubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHJldHVybiBzLmRhdGE7XG4gICAgICB9KVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNhY2hlS2V5OiBjYWNoZUtleSxcbiAgICBzbmFwc2hvdDogc25hcHNob3QsXG4gICAgZGF0YTogc25hcHNob3QuZGF0YVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRQcm9taXNlRm9yUGVuZGluZ09wZXJhdGlvbkFmZmVjdGluZ093bmVyKGVudmlyb25tZW50LCByZXF1ZXN0KSB7XG4gIHJldHVybiBlbnZpcm9ubWVudC5nZXRPcGVyYXRpb25UcmFja2VyKCkuZ2V0UHJvbWlzZUZvclBlbmRpbmdPcGVyYXRpb25zQWZmZWN0aW5nT3duZXIocmVxdWVzdCk7XG59XG5cbnZhciBGcmFnbWVudFJlc291cmNlSW1wbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZyYWdtZW50UmVzb3VyY2VJbXBsKGVudmlyb25tZW50KSB7XG4gICAgdGhpcy5fZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcbiAgICB0aGlzLl9jYWNoZSA9IExSVUNhY2hlLmNyZWF0ZShDQUNIRV9DQVBBQ0lUWSk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCBkdXJpbmcgYSBDb21wb25lbnQncyByZW5kZXIgZnVuY3Rpb24sXG4gICAqIHRvIHJlYWQgdGhlIGRhdGEgZm9yIGEgZnJhZ21lbnQsIG9yIHN1c3BlbmQgaWYgdGhlIGZyYWdtZW50IGlzIGJlaW5nXG4gICAqIGZldGNoZWQuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEZyYWdtZW50UmVzb3VyY2VJbXBsLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVhZCA9IGZ1bmN0aW9uIHJlYWQoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZiwgY29tcG9uZW50RGlzcGxheU5hbWUsIGZyYWdtZW50S2V5KSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZFdpdGhJZGVudGlmaWVyKGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWYsIGdldEZyYWdtZW50SWRlbnRpZmllcihmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmKSwgY29tcG9uZW50RGlzcGxheU5hbWUsIGZyYWdtZW50S2V5KTtcbiAgfVxuICAvKipcbiAgICogTGlrZSBgcmVhZGAsIGJ1dCB3aXRoIGEgcHJlLWNvbXB1dGVkIGZyYWdtZW50SWRlbnRpZmllciB0aGF0IHNob3VsZCBiZVxuICAgKiBlcXVhbCB0byBgZ2V0RnJhZ21lbnRJZGVudGlmaWVyKGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWYpYCBmcm9tIHRoZVxuICAgKiBhcmd1bWVudHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlYWRXaXRoSWRlbnRpZmllciA9IGZ1bmN0aW9uIHJlYWRXaXRoSWRlbnRpZmllcihmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmLCBmcmFnbWVudElkZW50aWZpZXIsIGNvbXBvbmVudERpc3BsYXlOYW1lLCBmcmFnbWVudEtleSkge1xuICAgIHZhciBfZnJhZ21lbnROb2RlJG1ldGFkYXQ7XG5cbiAgICB2YXIgZW52aXJvbm1lbnQgPSB0aGlzLl9lbnZpcm9ubWVudDsgLy8gSWYgZnJhZ21lbnRSZWYgaXMgbnVsbCBvciB1bmRlZmluZWQsIHBhc3MgaXQgZGlyZWN0bHkgdGhyb3VnaC5cbiAgICAvLyBUaGlzIGlzIGEgY29udmVuaWVuY2Ugd2hlbiBjb25zdW1pbmcgZnJhZ21lbnRzIHZpYSBhIEhPQyBBUEksIHdoZW4gdGhlXG4gICAgLy8gcHJvcCBjb3JyZXNwb25kaW5nIHRvIHRoZSBmcmFnbWVudCByZWYgbWlnaHQgYmUgcGFzc2VkIGFzIG51bGwuXG5cbiAgICBpZiAoZnJhZ21lbnRSZWYgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2FjaGVLZXk6IGZyYWdtZW50SWRlbnRpZmllcixcbiAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgc25hcHNob3Q6IG51bGxcbiAgICAgIH07XG4gICAgfSAvLyBJZiBmcmFnbWVudFJlZiBpcyBwbHVyYWwsIGVuc3VyZSB0aGF0IGl0IGlzIGFuIGFycmF5LlxuICAgIC8vIElmIGl0J3MgZW1wdHksIHJldHVybiB0aGUgZW1wdHkgYXJyYXkgZGlyZWN0bHkgYmVmb3JlIGRvaW5nIGFueSBtb3JlIHdvcmsuXG5cblxuICAgIGlmICgoZnJhZ21lbnROb2RlID09PSBudWxsIHx8IGZyYWdtZW50Tm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9mcmFnbWVudE5vZGUkbWV0YWRhdCA9IGZyYWdtZW50Tm9kZS5tZXRhZGF0YSkgPT09IG51bGwgfHwgX2ZyYWdtZW50Tm9kZSRtZXRhZGF0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZnJhZ21lbnROb2RlJG1ldGFkYXQucGx1cmFsKSA9PT0gdHJ1ZSkge1xuICAgICAgIUFycmF5LmlzQXJyYXkoZnJhZ21lbnRSZWYpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIGZyYWdtZW50IHBvaW50ZXIlcyBmb3IgZnJhZ21lbnQgYCVzYCB0byBiZSAnICsgJ2FuIGFycmF5LCBpbnN0ZWFkIGdvdCBgJXNgLiBSZW1vdmUgYEByZWxheShwbHVyYWw6IHRydWUpYCAnICsgJ2Zyb20gZnJhZ21lbnQgYCVzYCB0byBhbGxvdyB0aGUgcHJvcCB0byBiZSBhbiBvYmplY3QuJywgZnJhZ21lbnRLZXkgIT0gbnVsbCA/IFwiIGZvciBrZXkgYFwiLmNvbmNhdChmcmFnbWVudEtleSwgXCJgXCIpIDogJycsIGZyYWdtZW50Tm9kZS5uYW1lLCB0eXBlb2YgZnJhZ21lbnRSZWYsIGZyYWdtZW50Tm9kZS5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICAgIGlmIChmcmFnbWVudFJlZi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjYWNoZUtleTogZnJhZ21lbnRJZGVudGlmaWVyLFxuICAgICAgICAgIGRhdGE6IENPTlNUQU5UX1JFQURPTkxZX0VNUFRZX0FSUkFZLFxuICAgICAgICAgIHNuYXBzaG90OiBDT05TVEFOVF9SRUFET05MWV9FTVBUWV9BUlJBWVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gLy8gTm93IHdlIGFjdHVhbGx5IGF0dGVtcHQgdG8gcmVhZCB0aGUgZnJhZ21lbnQ6XG4gICAgLy8gMS4gQ2hlY2sgaWYgdGhlcmUncyBhIGNhY2hlZCB2YWx1ZSBmb3IgdGhpcyBmcmFnbWVudFxuXG5cbiAgICB2YXIgY2FjaGVkVmFsdWUgPSB0aGlzLl9jYWNoZS5nZXQoZnJhZ21lbnRJZGVudGlmaWVyKTtcblxuICAgIGlmIChjYWNoZWRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICBpZiAoaXNQcm9taXNlKGNhY2hlZFZhbHVlKSkge1xuICAgICAgICB0aHJvdyBjYWNoZWRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhY2hlZFZhbHVlLnNuYXBzaG90KSB7XG4gICAgICAgIHRoaXMuX3JlcG9ydE1pc3NpbmdSZXF1aXJlZEZpZWxkc0luU25hcHNob3QoY2FjaGVkVmFsdWUuc25hcHNob3QpO1xuXG4gICAgICAgIHJldHVybiBjYWNoZWRWYWx1ZTtcbiAgICAgIH1cbiAgICB9IC8vIDIuIElmIG5vdCwgdHJ5IHJlYWRpbmcgdGhlIGZyYWdtZW50IGZyb20gdGhlIFJlbGF5IHN0b3JlLlxuICAgIC8vIElmIHRoZSBzbmFwc2hvdCBoYXMgZGF0YSwgcmV0dXJuIGl0IGFuZCBzYXZlIGl0IGluIGNhY2hlXG5cblxuICAgIHZhciBmcmFnbWVudFNlbGVjdG9yID0gZ2V0U2VsZWN0b3IoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZik7XG4gICAgIShmcmFnbWVudFNlbGVjdG9yICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIHRvIHJlY2VpdmUgYW4gb2JqZWN0IHdoZXJlIGAuLi4lc2Agd2FzIHNwcmVhZCwgJyArICdidXQgdGhlIGZyYWdtZW50IHJlZmVyZW5jZSB3YXMgbm90IGZvdW5kYC4gVGhpcyBpcyBtb3N0ICcgKyAnbGlrZWx5IHRoZSByZXN1bHQgb2Y6XFxuJyArIFwiLSBGb3JnZXR0aW5nIHRvIHNwcmVhZCBgJXNgIGluIGAlc2AncyBwYXJlbnQncyBmcmFnbWVudC5cXG5cIiArICctIENvbmRpdGlvbmFsbHkgZmV0Y2hpbmcgYCVzYCBidXQgdW5jb25kaXRpb25hbGx5IHBhc3NpbmcgJXMgcHJvcCAnICsgJ3RvIGAlc2AuIElmIHRoZSBwYXJlbnQgZnJhZ21lbnQgb25seSBmZXRjaGVzIHRoZSBmcmFnbWVudCBjb25kaXRpb25hbGx5ICcgKyAnLSB3aXRoIGUuZy4gYEBpbmNsdWRlYCwgYEBza2lwYCwgb3IgaW5zaWRlIGEgYC4uLiBvbiBTb21lVHlwZSB7IH1gICcgKyAnc3ByZWFkICAtIHRoZW4gdGhlIGZyYWdtZW50IHJlZmVyZW5jZSB3aWxsIG5vdCBleGlzdC4gJyArICdJbiB0aGlzIGNhc2UsIHBhc3MgYG51bGxgIGlmIHRoZSBjb25kaXRpb25zIGZvciBldmFsdWF0aW5nIHRoZSAnICsgJ2ZyYWdtZW50IGFyZSBub3QgbWV0IChlLmcuIGlmIHRoZSBgQGluY2x1ZGUoaWYpYCB2YWx1ZSBpcyBmYWxzZS4pJywgZnJhZ21lbnROb2RlLm5hbWUsIGZyYWdtZW50Tm9kZS5uYW1lLCBjb21wb25lbnREaXNwbGF5TmFtZSwgZnJhZ21lbnROb2RlLm5hbWUsIGZyYWdtZW50S2V5ID09IG51bGwgPyAnYSBmcmFnbWVudCByZWZlcmVuY2UnIDogXCJ0aGUgYFwiLmNvbmNhdChmcmFnbWVudEtleSwgXCJgXCIpLCBjb21wb25lbnREaXNwbGF5TmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBzbmFwc2hvdCA9IGZyYWdtZW50U2VsZWN0b3Iua2luZCA9PT0gJ1BsdXJhbFJlYWRlclNlbGVjdG9yJyA/IGZyYWdtZW50U2VsZWN0b3Iuc2VsZWN0b3JzLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIGVudmlyb25tZW50Lmxvb2t1cChzKTtcbiAgICB9KSA6IGVudmlyb25tZW50Lmxvb2t1cChmcmFnbWVudFNlbGVjdG9yKTtcbiAgICB2YXIgZnJhZ21lbnRPd25lciA9IGZyYWdtZW50U2VsZWN0b3Iua2luZCA9PT0gJ1BsdXJhbFJlYWRlclNlbGVjdG9yJyA/IGZyYWdtZW50U2VsZWN0b3Iuc2VsZWN0b3JzWzBdLm93bmVyIDogZnJhZ21lbnRTZWxlY3Rvci5vd25lcjtcblxuICAgIGlmICghaXNNaXNzaW5nRGF0YShzbmFwc2hvdCkpIHtcbiAgICAgIHRoaXMuX3JlcG9ydE1pc3NpbmdSZXF1aXJlZEZpZWxkc0luU25hcHNob3Qoc25hcHNob3QpO1xuXG4gICAgICB2YXIgZnJhZ21lbnRSZXN1bHQgPSBnZXRGcmFnbWVudFJlc3VsdChmcmFnbWVudElkZW50aWZpZXIsIHNuYXBzaG90KTtcblxuICAgICAgdGhpcy5fY2FjaGUuc2V0KGZyYWdtZW50SWRlbnRpZmllciwgZnJhZ21lbnRSZXN1bHQpO1xuXG4gICAgICByZXR1cm4gZnJhZ21lbnRSZXN1bHQ7XG4gICAgfSAvLyAzLiBJZiB3ZSBkb24ndCBoYXZlIGRhdGEgaW4gdGhlIHN0b3JlLCBjaGVjayBpZiBhIHJlcXVlc3QgaXMgaW5cbiAgICAvLyBmbGlnaHQgZm9yIHRoZSBmcmFnbWVudCdzIHBhcmVudCBxdWVyeSwgb3IgZm9yIGFub3RoZXIgb3BlcmF0aW9uXG4gICAgLy8gdGhhdCBtYXkgYWZmZWN0IHRoZSBwYXJlbnQncyBxdWVyeSBkYXRhLCBzdWNoIGFzIGEgbXV0YXRpb25cbiAgICAvLyBvciBzdWJzY3JpcHRpb24uIElmIGEgcHJvbWlzZSBleGlzdHMsIGNhY2hlIHRoZSBwcm9taXNlIGFuZCB1c2UgaXRcbiAgICAvLyB0byBzdXNwZW5kLlxuXG5cbiAgICB2YXIgbmV0d29ya1Byb21pc2UgPSB0aGlzLl9nZXRBbmRTYXZlUHJvbWlzZUZvckZyYWdtZW50UmVxdWVzdEluRmxpZ2h0KGZyYWdtZW50SWRlbnRpZmllciwgZnJhZ21lbnROb2RlLCBmcmFnbWVudE93bmVyKTtcblxuICAgIGlmIChuZXR3b3JrUHJvbWlzZSAhPSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXR3b3JrUHJvbWlzZTtcbiAgICB9XG5cbiAgICB0aGlzLl9yZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHNJblNuYXBzaG90KHNuYXBzaG90KTtcblxuICAgIHJldHVybiBnZXRGcmFnbWVudFJlc3VsdChmcmFnbWVudElkZW50aWZpZXIsIHNuYXBzaG90KTtcbiAgfTtcblxuICBfcHJvdG8uX3JlcG9ydE1pc3NpbmdSZXF1aXJlZEZpZWxkc0luU25hcHNob3QgPSBmdW5jdGlvbiBfcmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzSW5TbmFwc2hvdChzbmFwc2hvdCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbmFwc2hvdCkpIHtcbiAgICAgIHNuYXBzaG90LmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgaWYgKHMubWlzc2luZ1JlcXVpcmVkRmllbGRzICE9IG51bGwpIHtcbiAgICAgICAgICByZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHMoX3RoaXMuX2Vudmlyb25tZW50LCBzLm1pc3NpbmdSZXF1aXJlZEZpZWxkcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc25hcHNob3QubWlzc2luZ1JlcXVpcmVkRmllbGRzICE9IG51bGwpIHtcbiAgICAgICAgcmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzKHRoaXMuX2Vudmlyb25tZW50LCBzbmFwc2hvdC5taXNzaW5nUmVxdWlyZWRGaWVsZHMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVhZFNwZWMgPSBmdW5jdGlvbiByZWFkU3BlYyhmcmFnbWVudE5vZGVzLCBmcmFnbWVudFJlZnMsIGNvbXBvbmVudERpc3BsYXlOYW1lKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2tleSBpbiBmcmFnbWVudE5vZGVzKSB7XG4gICAgICByZXN1bHRbX2tleV0gPSB0aGlzLnJlYWQoZnJhZ21lbnROb2Rlc1tfa2V5XSwgZnJhZ21lbnRSZWZzW19rZXldLCBjb21wb25lbnREaXNwbGF5TmFtZSwgX2tleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBfcHJvdG8uc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGZyYWdtZW50UmVzdWx0LCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGVudmlyb25tZW50ID0gdGhpcy5fZW52aXJvbm1lbnQ7XG4gICAgdmFyIGNhY2hlS2V5ID0gZnJhZ21lbnRSZXN1bHQuY2FjaGVLZXk7XG4gICAgdmFyIHJlbmRlcmVkU25hcHNob3QgPSBmcmFnbWVudFJlc3VsdC5zbmFwc2hvdDtcblxuICAgIGlmICghcmVuZGVyZWRTbmFwc2hvdCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHt9XG4gICAgICB9O1xuICAgIH0gLy8gMS4gQ2hlY2sgZm9yIGFueSB1cGRhdGVzIG1pc3NlZCBkdXJpbmcgcmVuZGVyIHBoYXNlXG4gICAgLy8gVE9ETyhUNDQwNjY3NjApOiBNb3JlIGVmZmljaWVudGx5IGRldGVjdCBpZiB3ZSBtaXNzZWQgYW4gdXBkYXRlXG5cblxuICAgIHZhciBfdGhpcyRjaGVja01pc3NlZFVwZGEgPSB0aGlzLmNoZWNrTWlzc2VkVXBkYXRlcyhmcmFnbWVudFJlc3VsdCksXG4gICAgICAgIGRpZE1pc3NVcGRhdGVzID0gX3RoaXMkY2hlY2tNaXNzZWRVcGRhWzBdLFxuICAgICAgICBjdXJyZW50U25hcHNob3QgPSBfdGhpcyRjaGVja01pc3NlZFVwZGFbMV07IC8vIDIuIElmIGFuIHVwZGF0ZSB3YXMgbWlzc2VkLCBub3RpZnkgdGhlIGNvbXBvbmVudCBzbyBpdCB1cGRhdGVzIHdpdGhcbiAgICAvLyB0aGUgbGF0ZXN0IGRhdGEuXG5cblxuICAgIGlmIChkaWRNaXNzVXBkYXRlcykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IC8vIDMuIEVzdGFibGlzaCBzdWJzY3JpcHRpb25zIG9uIHRoZSBzbmFwc2hvdChzKVxuXG5cbiAgICB2YXIgZGF0YVN1YnNjcmlwdGlvbnMgPSBbXTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHJlbmRlcmVkU25hcHNob3QpKSB7XG4gICAgICAhQXJyYXkuaXNBcnJheShjdXJyZW50U25hcHNob3QpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIHNuYXBzaG90cyB0byBiZSBwbHVyYWwuICcgKyBcIklmIHlvdSdyZSBzZWVpbmcgdGhpcywgdGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVsYXkuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGN1cnJlbnRTbmFwc2hvdC5mb3JFYWNoKGZ1bmN0aW9uIChzbmFwc2hvdCwgaWR4KSB7XG4gICAgICAgIGRhdGFTdWJzY3JpcHRpb25zLnB1c2goZW52aXJvbm1lbnQuc3Vic2NyaWJlKHNuYXBzaG90LCBmdW5jdGlvbiAobGF0ZXN0U25hcHNob3QpIHtcbiAgICAgICAgICBfdGhpczIuX3VwZGF0ZVBsdXJhbFNuYXBzaG90KGNhY2hlS2V5LCBjdXJyZW50U25hcHNob3QsIGxhdGVzdFNuYXBzaG90LCBpZHgpO1xuXG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICEoY3VycmVudFNuYXBzaG90ICE9IG51bGwgJiYgIUFycmF5LmlzQXJyYXkoY3VycmVudFNuYXBzaG90KSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheTogRXhwZWN0ZWQgc25hcHNob3QgdG8gYmUgc2luZ3VsYXIuICcgKyBcIklmIHlvdSdyZSBzZWVpbmcgdGhpcywgdGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVsYXkuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGRhdGFTdWJzY3JpcHRpb25zLnB1c2goZW52aXJvbm1lbnQuc3Vic2NyaWJlKGN1cnJlbnRTbmFwc2hvdCwgZnVuY3Rpb24gKGxhdGVzdFNuYXBzaG90KSB7XG4gICAgICAgIF90aGlzMi5fY2FjaGUuc2V0KGNhY2hlS2V5LCBnZXRGcmFnbWVudFJlc3VsdChjYWNoZUtleSwgbGF0ZXN0U25hcHNob3QpKTtcblxuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXNwb3NlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICBkYXRhU3Vic2NyaXB0aW9ucy5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICByZXR1cm4gcy5kaXNwb3NlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzMi5fY2FjaGVbXCJkZWxldGVcIl0oY2FjaGVLZXkpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnN1YnNjcmliZVNwZWMgPSBmdW5jdGlvbiBzdWJzY3JpYmVTcGVjKGZyYWdtZW50UmVzdWx0cywgY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBkaXNwb3NhYmxlcyA9IE9iamVjdC5rZXlzKGZyYWdtZW50UmVzdWx0cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBfdGhpczMuc3Vic2NyaWJlKGZyYWdtZW50UmVzdWx0c1trZXldLCBjYWxsYmFjayk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgIGRpc3Bvc2FibGVzLmZvckVhY2goZnVuY3Rpb24gKGRpc3Bvc2FibGUpIHtcbiAgICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uY2hlY2tNaXNzZWRVcGRhdGVzID0gZnVuY3Rpb24gY2hlY2tNaXNzZWRVcGRhdGVzKGZyYWdtZW50UmVzdWx0KSB7XG4gICAgdmFyIGVudmlyb25tZW50ID0gdGhpcy5fZW52aXJvbm1lbnQ7XG4gICAgdmFyIGNhY2hlS2V5ID0gZnJhZ21lbnRSZXN1bHQuY2FjaGVLZXk7XG4gICAgdmFyIHJlbmRlcmVkU25hcHNob3QgPSBmcmFnbWVudFJlc3VsdC5zbmFwc2hvdDtcblxuICAgIGlmICghcmVuZGVyZWRTbmFwc2hvdCkge1xuICAgICAgcmV0dXJuIFtmYWxzZSwgbnVsbF07XG4gICAgfVxuXG4gICAgdmFyIGRpZE1pc3NVcGRhdGVzID0gZmFsc2U7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZW5kZXJlZFNuYXBzaG90KSkge1xuICAgICAgdmFyIGN1cnJlbnRTbmFwc2hvdHMgPSBbXTtcbiAgICAgIHJlbmRlcmVkU25hcHNob3QuZm9yRWFjaChmdW5jdGlvbiAoc25hcHNob3QsIGlkeCkge1xuICAgICAgICB2YXIgY3VycmVudFNuYXBzaG90ID0gZW52aXJvbm1lbnQubG9va3VwKHNuYXBzaG90LnNlbGVjdG9yKTtcbiAgICAgICAgdmFyIHJlbmRlckRhdGEgPSBzbmFwc2hvdC5kYXRhO1xuICAgICAgICB2YXIgY3VycmVudERhdGEgPSBjdXJyZW50U25hcHNob3QuZGF0YTtcbiAgICAgICAgdmFyIHVwZGF0ZWREYXRhID0gcmVjeWNsZU5vZGVzSW50byhyZW5kZXJEYXRhLCBjdXJyZW50RGF0YSk7XG5cbiAgICAgICAgaWYgKHVwZGF0ZWREYXRhICE9PSByZW5kZXJEYXRhKSB7XG4gICAgICAgICAgY3VycmVudFNuYXBzaG90ID0gKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIGN1cnJlbnRTbmFwc2hvdCksIHt9LCB7XG4gICAgICAgICAgICBkYXRhOiB1cGRhdGVkRGF0YVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRpZE1pc3NVcGRhdGVzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRTbmFwc2hvdHNbaWR4XSA9IGN1cnJlbnRTbmFwc2hvdDtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZGlkTWlzc1VwZGF0ZXMpIHtcbiAgICAgICAgdGhpcy5fY2FjaGUuc2V0KGNhY2hlS2V5LCBnZXRGcmFnbWVudFJlc3VsdChjYWNoZUtleSwgY3VycmVudFNuYXBzaG90cykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW2RpZE1pc3NVcGRhdGVzLCBjdXJyZW50U25hcHNob3RzXTtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudFNuYXBzaG90ID0gZW52aXJvbm1lbnQubG9va3VwKHJlbmRlcmVkU25hcHNob3Quc2VsZWN0b3IpO1xuICAgIHZhciByZW5kZXJEYXRhID0gcmVuZGVyZWRTbmFwc2hvdC5kYXRhO1xuICAgIHZhciBjdXJyZW50RGF0YSA9IGN1cnJlbnRTbmFwc2hvdC5kYXRhO1xuICAgIHZhciB1cGRhdGVkRGF0YSA9IHJlY3ljbGVOb2Rlc0ludG8ocmVuZGVyRGF0YSwgY3VycmVudERhdGEpO1xuICAgIGN1cnJlbnRTbmFwc2hvdCA9IHtcbiAgICAgIGRhdGE6IHVwZGF0ZWREYXRhLFxuICAgICAgaXNNaXNzaW5nRGF0YTogY3VycmVudFNuYXBzaG90LmlzTWlzc2luZ0RhdGEsXG4gICAgICBzZWVuUmVjb3JkczogY3VycmVudFNuYXBzaG90LnNlZW5SZWNvcmRzLFxuICAgICAgc2VsZWN0b3I6IGN1cnJlbnRTbmFwc2hvdC5zZWxlY3RvcixcbiAgICAgIG1pc3NpbmdSZXF1aXJlZEZpZWxkczogY3VycmVudFNuYXBzaG90Lm1pc3NpbmdSZXF1aXJlZEZpZWxkc1xuICAgIH07XG5cbiAgICBpZiAodXBkYXRlZERhdGEgIT09IHJlbmRlckRhdGEpIHtcbiAgICAgIHRoaXMuX2NhY2hlLnNldChjYWNoZUtleSwgZ2V0RnJhZ21lbnRSZXN1bHQoY2FjaGVLZXksIGN1cnJlbnRTbmFwc2hvdCkpO1xuXG4gICAgICBkaWRNaXNzVXBkYXRlcyA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtkaWRNaXNzVXBkYXRlcywgY3VycmVudFNuYXBzaG90XTtcbiAgfTtcblxuICBfcHJvdG8uY2hlY2tNaXNzZWRVcGRhdGVzU3BlYyA9IGZ1bmN0aW9uIGNoZWNrTWlzc2VkVXBkYXRlc1NwZWMoZnJhZ21lbnRSZXN1bHRzKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZnJhZ21lbnRSZXN1bHRzKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBfdGhpczQuY2hlY2tNaXNzZWRVcGRhdGVzKGZyYWdtZW50UmVzdWx0c1trZXldKVswXTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uX2dldEFuZFNhdmVQcm9taXNlRm9yRnJhZ21lbnRSZXF1ZXN0SW5GbGlnaHQgPSBmdW5jdGlvbiBfZ2V0QW5kU2F2ZVByb21pc2VGb3JGcmFnbWVudFJlcXVlc3RJbkZsaWdodChjYWNoZUtleSwgZnJhZ21lbnROb2RlLCBmcmFnbWVudE93bmVyKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICB2YXIgX2dldFByb21pc2VGb3JBY3RpdmVSO1xuXG4gICAgdmFyIGVudmlyb25tZW50ID0gdGhpcy5fZW52aXJvbm1lbnQ7XG4gICAgdmFyIG5ldHdvcmtQcm9taXNlID0gKF9nZXRQcm9taXNlRm9yQWN0aXZlUiA9IGdldFByb21pc2VGb3JBY3RpdmVSZXF1ZXN0KGVudmlyb25tZW50LCBmcmFnbWVudE93bmVyKSkgIT09IG51bGwgJiYgX2dldFByb21pc2VGb3JBY3RpdmVSICE9PSB2b2lkIDAgPyBfZ2V0UHJvbWlzZUZvckFjdGl2ZVIgOiBnZXRQcm9taXNlRm9yUGVuZGluZ09wZXJhdGlvbkFmZmVjdGluZ093bmVyKGVudmlyb25tZW50LCBmcmFnbWVudE93bmVyKTtcblxuICAgIGlmICghbmV0d29ya1Byb21pc2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gLy8gV2hlbiB0aGUgUHJvbWlzZSBmb3IgdGhlIHJlcXVlc3QgcmVzb2x2ZXMsIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRvXG4gICAgLy8gdXBkYXRlIHRoZSBjYWNoZSB3aXRoIHRoZSBsYXRlc3QgZGF0YSBhdmFpbGFibGUgaW4gdGhlIHN0b3JlIGJlZm9yZVxuICAgIC8vIHJlc29sdmluZyB0aGUgUHJvbWlzZVxuXG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldHdvcmtQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXM1Ll9jYWNoZVtcImRlbGV0ZVwiXShjYWNoZUtleSk7XG4gICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIF90aGlzNS5fY2FjaGVbXCJkZWxldGVcIl0oY2FjaGVLZXkpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fY2FjaGUuc2V0KGNhY2hlS2V5LCBwcm9taXNlKTtcblxuICAgIHZhciBxdWVyeU5hbWUgPSBmcmFnbWVudE93bmVyLm5vZGUucGFyYW1zLm5hbWU7XG4gICAgdmFyIGZyYWdtZW50TmFtZSA9IGZyYWdtZW50Tm9kZS5uYW1lO1xuICAgIHZhciBwcm9taXNlRGlzcGxheU5hbWUgPSBxdWVyeU5hbWUgPT09IGZyYWdtZW50TmFtZSA/IFwiUmVsYXkoXCIuY29uY2F0KHF1ZXJ5TmFtZSwgXCIpXCIpIDogXCJSZWxheShcIi5jb25jYXQocXVlcnlOYW1lLCBcIjpcIikuY29uY2F0KGZyYWdtZW50TmFtZSwgXCIpXCIpOyAvLyAkRmxvd0V4cGVjdGVkRXJyb3JbcHJvcC1taXNzaW5nXSBFeHBhbmRvIHRvIGFubm90YXRlIFByb21pc2VzLlxuXG4gICAgcHJvbWlzZS5kaXNwbGF5TmFtZSA9IHByb21pc2VEaXNwbGF5TmFtZTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICBfcHJvdG8uX3VwZGF0ZVBsdXJhbFNuYXBzaG90ID0gZnVuY3Rpb24gX3VwZGF0ZVBsdXJhbFNuYXBzaG90KGNhY2hlS2V5LCBiYXNlU25hcHNob3RzLCBsYXRlc3RTbmFwc2hvdCwgaWR4KSB7XG4gICAgdmFyIGN1cnJlbnRGcmFnbWVudFJlc3VsdCA9IHRoaXMuX2NhY2hlLmdldChjYWNoZUtleSk7XG5cbiAgICBpZiAoaXNQcm9taXNlKGN1cnJlbnRGcmFnbWVudFJlc3VsdCkpIHtcbiAgICAgIHJlcG9ydEludmFsaWRDYWNoZWREYXRhKGxhdGVzdFNuYXBzaG90LnNlbGVjdG9yLm5vZGUubmFtZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRTbmFwc2hvdCA9IGN1cnJlbnRGcmFnbWVudFJlc3VsdCA9PT0gbnVsbCB8fCBjdXJyZW50RnJhZ21lbnRSZXN1bHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1cnJlbnRGcmFnbWVudFJlc3VsdC5zbmFwc2hvdDtcblxuICAgIGlmIChjdXJyZW50U25hcHNob3QgJiYgIUFycmF5LmlzQXJyYXkoY3VycmVudFNuYXBzaG90KSkge1xuICAgICAgcmVwb3J0SW52YWxpZENhY2hlZERhdGEobGF0ZXN0U25hcHNob3Quc2VsZWN0b3Iubm9kZS5uYW1lKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dFNuYXBzaG90cyA9IGN1cnJlbnRTbmFwc2hvdCA/ICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkoY3VycmVudFNuYXBzaG90KSA6ICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkoYmFzZVNuYXBzaG90cyk7XG4gICAgbmV4dFNuYXBzaG90c1tpZHhdID0gbGF0ZXN0U25hcHNob3Q7XG5cbiAgICB0aGlzLl9jYWNoZS5zZXQoY2FjaGVLZXksIGdldEZyYWdtZW50UmVzdWx0KGNhY2hlS2V5LCBuZXh0U25hcHNob3RzKSk7XG4gIH07XG5cbiAgcmV0dXJuIEZyYWdtZW50UmVzb3VyY2VJbXBsO1xufSgpO1xuXG5mdW5jdGlvbiByZXBvcnRJbnZhbGlkQ2FjaGVkRGF0YShub2RlTmFtZSkge1xuICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheTogRXhwZWN0ZWQgdG8gZmluZCBjYWNoZWQgZGF0YSBmb3IgcGx1cmFsIGZyYWdtZW50IGAlc2Agd2hlbiAnICsgJ3JlY2VpdmluZyBhIHN1YnNjcmlwdGlvbi4gJyArIFwiSWYgeW91J3JlIHNlZWluZyB0aGlzLCB0aGlzIGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWxheS5cIiwgbm9kZU5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnRSZXNvdXJjZShlbnZpcm9ubWVudCkge1xuICByZXR1cm4gbmV3IEZyYWdtZW50UmVzb3VyY2VJbXBsKGVudmlyb25tZW50KTtcbn1cblxudmFyIGRhdGFSZXNvdXJjZXMgPSBXRUFLTUFQX1NVUFBPUlRFRCA/IG5ldyBXZWFrTWFwKCkgOiBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIGdldEZyYWdtZW50UmVzb3VyY2VGb3JFbnZpcm9ubWVudChlbnZpcm9ubWVudCkge1xuICB2YXIgY2FjaGVkID0gZGF0YVJlc291cmNlcy5nZXQoZW52aXJvbm1lbnQpO1xuXG4gIGlmIChjYWNoZWQpIHtcbiAgICByZXR1cm4gY2FjaGVkO1xuICB9XG5cbiAgdmFyIG5ld0RhdGFSZXNvdXJjZSA9IGNyZWF0ZUZyYWdtZW50UmVzb3VyY2UoZW52aXJvbm1lbnQpO1xuICBkYXRhUmVzb3VyY2VzLnNldChlbnZpcm9ubWVudCwgbmV3RGF0YVJlc291cmNlKTtcbiAgcmV0dXJuIG5ld0RhdGFSZXNvdXJjZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZUZyYWdtZW50UmVzb3VyY2U6IGNyZWF0ZUZyYWdtZW50UmVzb3VyY2UsXG4gIGdldEZyYWdtZW50UmVzb3VyY2VGb3JFbnZpcm9ubWVudDogZ2V0RnJhZ21lbnRSZXNvdXJjZUZvckVudmlyb25tZW50XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG4vKipcbiAqIEpTIG1hcHMgKGJvdGggcGxhaW4gb2JqZWN0cyBhbmQgTWFwKSBtYWludGFpbiBrZXkgaW5zZXJ0aW9uXG4gKiBvcmRlciwgd2hpY2ggbWVhbnMgdGhlcmUgaXMgYW4gZWFzeSB3YXkgdG8gc2ltdWxhdGUgTFJVIGJlaGF2aW9yXG4gKiB0aGF0IHNob3VsZCBhbHNvIHBlcmZvcm0gcXVpdGUgd2VsbDpcbiAqXG4gKiBUbyBpbnNlcnQgYSBuZXcgdmFsdWUsIGZpcnN0IGRlbGV0ZSB0aGUga2V5IGZyb20gdGhlIGlubmVyIF9tYXAsXG4gKiB0aGVuIF9tYXAuc2V0KGssIHYpLiBCeSBkZWxldGluZyBhbmQgcmVpbnNlcnRpbmcsIHlvdSBlbnN1cmUgdGhhdCB0aGVcbiAqIG1hcCBzZWVzIHRoZSBrZXkgYXMgdGhlIGxhc3QgaW5zZXJ0ZWQga2V5LlxuICpcbiAqIEdldCBkb2VzIHRoZSBzYW1lOiBpZiB0aGUga2V5IGlzIHByZXNlbnQsIGRlbGV0ZSBhbmQgcmVpbnNlcnQgaXQuXG4gKi9cbnZhciBMUlVDYWNoZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIExSVUNhY2hlKGNhcGFjaXR5KSB7XG4gICAgdGhpcy5fY2FwYWNpdHkgPSBjYXBhY2l0eTtcbiAgICAhKHRoaXMuX2NhcGFjaXR5ID4gMCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdMUlVDYWNoZTogVW5hYmxlIHRvIGNyZWF0ZSBpbnN0YW5jZSBvZiBjYWNoZSB3aXRoIHplcm8gb3IgbmVnYXRpdmUgY2FwYWNpdHkuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMUlVDYWNoZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldCA9IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5fbWFwW1wiZGVsZXRlXCJdKGtleSk7XG5cbiAgICB0aGlzLl9tYXAuc2V0KGtleSwgdmFsdWUpO1xuXG4gICAgaWYgKHRoaXMuX21hcC5zaXplID4gdGhpcy5fY2FwYWNpdHkpIHtcbiAgICAgIHZhciBmaXJzdEtleSA9IHRoaXMuX21hcC5rZXlzKCkubmV4dCgpO1xuXG4gICAgICBpZiAoIWZpcnN0S2V5LmRvbmUpIHtcbiAgICAgICAgdGhpcy5fbWFwW1wiZGVsZXRlXCJdKGZpcnN0S2V5LnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLl9tYXAuZ2V0KGtleSk7XG5cbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fbWFwW1wiZGVsZXRlXCJdKGtleSk7XG5cbiAgICAgIHRoaXMuX21hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIF9wcm90by5oYXMgPSBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5oYXMoa2V5KTtcbiAgfTtcblxuICBfcHJvdG9bXCJkZWxldGVcIl0gPSBmdW5jdGlvbiBfZGVsZXRlKGtleSkge1xuICAgIHRoaXMuX21hcFtcImRlbGV0ZVwiXShrZXkpO1xuICB9O1xuXG4gIF9wcm90by5zaXplID0gZnVuY3Rpb24gc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLnNpemU7XG4gIH07XG5cbiAgX3Byb3RvLmNhcGFjaXR5ID0gZnVuY3Rpb24gY2FwYWNpdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhcGFjaXR5IC0gdGhpcy5fbWFwLnNpemU7XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5fbWFwLmNsZWFyKCk7XG4gIH07XG5cbiAgcmV0dXJuIExSVUNhY2hlO1xufSgpO1xuXG5mdW5jdGlvbiBjcmVhdGUoY2FwYWNpdHkpIHtcbiAgcmV0dXJuIG5ldyBMUlVDYWNoZShjYXBhY2l0eSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IGNyZWF0ZVxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4vLyBUaGlzIGNvbnRleHR1YWwgcHJvZmlsZXIgY2FuIGJlIHVzZWQgdG8gd3JhcCBhIHJlYWN0IHN1Yi10cmVlLiBJdCB3aWxsIGJpbmRcbi8vIHRoZSBSZWxheVByb2ZpbGVyIGR1cmluZyB0aGUgcmVuZGVyIHBoYXNlIG9mIHRoZXNlIGNvbXBvbmVudHMuIEFsbG93c1xuLy8gY29sbGVjdGluZyBtZXRyaWNzIGZvciBhIHNwZWNpZmljIHBhcnQgb2YgeW91ciBhcHBsaWNhdGlvbi5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIFByb2ZpbGVyQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICB3cmFwUHJlcGFyZVF1ZXJ5UmVzb3VyY2U6IGZ1bmN0aW9uIHdyYXBQcmVwYXJlUXVlcnlSZXNvdXJjZShjYikge1xuICAgIHJldHVybiBjYigpO1xuICB9XG59KTtcbm1vZHVsZS5leHBvcnRzID0gUHJvZmlsZXJDb250ZXh0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBMUlVDYWNoZSA9IHJlcXVpcmUoJy4vTFJVQ2FjaGUnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgaXNQcm9taXNlID0gX3JlcXVpcmUuaXNQcm9taXNlO1xuXG52YXIgQ0FDSEVfQ0FQQUNJVFkgPSAxMDAwO1xudmFyIERFRkFVTFRfRkVUQ0hfUE9MSUNZID0gJ3N0b3JlLW9yLW5ldHdvcmsnO1xudmFyIERBVEFfUkVURU5USU9OX1RJTUVPVVQgPSA1ICogNjAgKiAxMDAwO1xudmFyIFdFQUtNQVBfU1VQUE9SVEVEID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbic7XG5cbmZ1bmN0aW9uIGdldFF1ZXJ5Q2FjaGVJZGVudGlmaWVyKGVudmlyb25tZW50LCBvcGVyYXRpb24sIG1heWJlRmV0Y2hQb2xpY3ksIG1heWJlUmVuZGVyUG9saWN5LCBjYWNoZUJyZWFrZXIpIHtcbiAgdmFyIGZldGNoUG9saWN5ID0gbWF5YmVGZXRjaFBvbGljeSAhPT0gbnVsbCAmJiBtYXliZUZldGNoUG9saWN5ICE9PSB2b2lkIDAgPyBtYXliZUZldGNoUG9saWN5IDogREVGQVVMVF9GRVRDSF9QT0xJQ1k7XG4gIHZhciByZW5kZXJQb2xpY3kgPSBtYXliZVJlbmRlclBvbGljeSAhPT0gbnVsbCAmJiBtYXliZVJlbmRlclBvbGljeSAhPT0gdm9pZCAwID8gbWF5YmVSZW5kZXJQb2xpY3kgOiBlbnZpcm9ubWVudC5VTlNUQUJMRV9nZXREZWZhdWx0UmVuZGVyUG9saWN5KCk7XG4gIHZhciBjYWNoZUlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChmZXRjaFBvbGljeSwgXCItXCIpLmNvbmNhdChyZW5kZXJQb2xpY3ksIFwiLVwiKS5jb25jYXQob3BlcmF0aW9uLnJlcXVlc3QuaWRlbnRpZmllcik7XG5cbiAgaWYgKGNhY2hlQnJlYWtlciAhPSBudWxsKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KGNhY2hlSWRlbnRpZmllciwgXCItXCIpLmNvbmNhdChjYWNoZUJyZWFrZXIpO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlSWRlbnRpZmllcjtcbn1cblxuZnVuY3Rpb24gZ2V0UXVlcnlSZXN1bHQob3BlcmF0aW9uLCBjYWNoZUlkZW50aWZpZXIpIHtcbiAgdmFyIHJvb3RGcmFnbWVudFJlZiA9IHtcbiAgICBfX2lkOiBvcGVyYXRpb24uZnJhZ21lbnQuZGF0YUlELFxuICAgIF9fZnJhZ21lbnRzOiAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHt9LCBvcGVyYXRpb24uZnJhZ21lbnQubm9kZS5uYW1lLCBvcGVyYXRpb24ucmVxdWVzdC52YXJpYWJsZXMpLFxuICAgIF9fZnJhZ21lbnRPd25lcjogb3BlcmF0aW9uLnJlcXVlc3RcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBjYWNoZUlkZW50aWZpZXI6IGNhY2hlSWRlbnRpZmllcixcbiAgICBmcmFnbWVudE5vZGU6IG9wZXJhdGlvbi5yZXF1ZXN0Lm5vZGUuZnJhZ21lbnQsXG4gICAgZnJhZ21lbnRSZWY6IHJvb3RGcmFnbWVudFJlZixcbiAgICBvcGVyYXRpb246IG9wZXJhdGlvblxuICB9O1xufVxuXG52YXIgbmV4dElEID0gMjAwMDAwO1xuXG5mdW5jdGlvbiBjcmVhdGVDYWNoZUVudHJ5KGNhY2hlSWRlbnRpZmllciwgb3BlcmF0aW9uLCB2YWx1ZSwgbmV0d29ya1N1YnNjcmlwdGlvbiwgb25EaXNwb3NlKSB7XG4gIHZhciBjdXJyZW50VmFsdWUgPSB2YWx1ZTtcbiAgdmFyIHJldGFpbkNvdW50ID0gMDtcbiAgdmFyIHJldGFpbkRpc3Bvc2FibGUgPSBudWxsO1xuICB2YXIgcmVsZWFzZVRlbXBvcmFyeVJldGFpbiA9IG51bGw7XG4gIHZhciBjdXJyZW50TmV0d29ya1N1YnNjcmlwdGlvbiA9IG5ldHdvcmtTdWJzY3JpcHRpb247XG5cbiAgdmFyIHJldGFpbiA9IGZ1bmN0aW9uIHJldGFpbihlbnZpcm9ubWVudCkge1xuICAgIHJldGFpbkNvdW50Kys7XG5cbiAgICBpZiAocmV0YWluQ291bnQgPT09IDEpIHtcbiAgICAgIHJldGFpbkRpc3Bvc2FibGUgPSBlbnZpcm9ubWVudC5yZXRhaW4ob3BlcmF0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgcmV0YWluQ291bnQgPSBNYXRoLm1heCgwLCByZXRhaW5Db3VudCAtIDEpO1xuXG4gICAgICAgIGlmIChyZXRhaW5Db3VudCA9PT0gMCkge1xuICAgICAgICAgICEocmV0YWluRGlzcG9zYWJsZSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBFeHBlY3RlZCBkaXNwb3NhYmxlIHRvIHJlbGVhc2UgcXVlcnkgdG8gYmUgZGVmaW5lZC4nICsgXCJJZiB5b3UncmUgc2VlaW5nIHRoaXMsIHRoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlbGF5LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgcmV0YWluRGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgcmV0YWluRGlzcG9zYWJsZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBvbkRpc3Bvc2UoY2FjaGVFbnRyeSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY2FjaGVFbnRyeSA9IHtcbiAgICBjYWNoZUlkZW50aWZpZXI6IGNhY2hlSWRlbnRpZmllcixcbiAgICBpZDogbmV4dElEKyssXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRWYWx1ZTtcbiAgICB9LFxuICAgIHNldFZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZSh2YWwpIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IHZhbDtcbiAgICB9LFxuICAgIGdldFJldGFpbkNvdW50OiBmdW5jdGlvbiBnZXRSZXRhaW5Db3VudCgpIHtcbiAgICAgIHJldHVybiByZXRhaW5Db3VudDtcbiAgICB9LFxuICAgIGdldE5ldHdvcmtTdWJzY3JpcHRpb246IGZ1bmN0aW9uIGdldE5ldHdvcmtTdWJzY3JpcHRpb24oKSB7XG4gICAgICByZXR1cm4gY3VycmVudE5ldHdvcmtTdWJzY3JpcHRpb247XG4gICAgfSxcbiAgICBzZXROZXR3b3JrU3Vic2NyaXB0aW9uOiBmdW5jdGlvbiBzZXROZXR3b3JrU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbikge1xuICAgICAgaWYgKGN1cnJlbnROZXR3b3JrU3Vic2NyaXB0aW9uICE9IG51bGwpIHtcbiAgICAgICAgY3VycmVudE5ldHdvcmtTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cblxuICAgICAgY3VycmVudE5ldHdvcmtTdWJzY3JpcHRpb24gPSBzdWJzY3JpcHRpb247XG4gICAgfSxcbiAgICB0ZW1wb3JhcnlSZXRhaW46IGZ1bmN0aW9uIHRlbXBvcmFyeVJldGFpbihlbnZpcm9ubWVudCkge1xuICAgICAgLy8gTk9URTogSWYgd2UncmUgZXhlY3V0aW5nIGluIGEgc2VydmVyIGVudmlyb25tZW50LCB0aGVyZSdzIG5vIG5lZWRcbiAgICAgIC8vIHRvIGNyZWF0ZSB0ZW1wb3JhcnkgcmV0YWlucywgc2luY2UgdGhlIGNvbXBvbmVudCB3aWxsIG5ldmVyIGNvbW1pdC5cbiAgICAgIGlmIChlbnZpcm9ubWVudC5pc1NlcnZlcigpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHt9XG4gICAgICAgIH07XG4gICAgICB9IC8vIE5PVEU6IHRlbXBvcmFyeVJldGFpbiBpcyBjYWxsZWQgZHVyaW5nIHRoZSByZW5kZXIgcGhhc2UuIEhvd2V2ZXIsXG4gICAgICAvLyBnaXZlbiB0aGF0IHdlIGNhbid0IHRlbGwgaWYgdGhpcyByZW5kZXIgd2lsbCBldmVudHVhbGx5IGNvbW1pdCBvciBub3QsXG4gICAgICAvLyB3ZSBjcmVhdGUgYSB0aW1lciB0byBhdXRvZGlzcG9zZSBvZiB0aGlzIHJldGFpbiBpbiBjYXNlIHRoZSBhc3NvY2lhdGVkXG4gICAgICAvLyBjb21wb25lbnQgbmV2ZXIgY29tbWl0cy5cbiAgICAgIC8vIElmIHRoZSBjb21wb25lbnQgL2RvZXMvIGNvbW1pdCwgcGVybWFuZW50UmV0YWluIHdpbGwgY2xlYXIgdGhpcyB0aW1lb3V0XG4gICAgICAvLyBhbmQgcGVybWFuZW50bHkgcmV0YWluIHRoZSBkYXRhLlxuXG5cbiAgICAgIHZhciBkaXNwb3NhYmxlID0gcmV0YWluKGVudmlyb25tZW50KTtcbiAgICAgIHZhciByZWxlYXNlUXVlcnlUaW1lb3V0ID0gbnVsbDtcblxuICAgICAgdmFyIGxvY2FsUmVsZWFzZVRlbXBvcmFyeVJldGFpbiA9IGZ1bmN0aW9uIGxvY2FsUmVsZWFzZVRlbXBvcmFyeVJldGFpbigpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHJlbGVhc2VRdWVyeVRpbWVvdXQpO1xuICAgICAgICByZWxlYXNlUXVlcnlUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgcmVsZWFzZVRlbXBvcmFyeVJldGFpbiA9IG51bGw7XG4gICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpOyAvLyBOb3JtYWxseSBpZiB0aGlzIGVudHJ5IG5ldmVyIGNvbW1pdHMsIHRoZSByZXF1ZXN0IHdvdWxkJ3ZlIGVuZGVkIGJ5IHRoZVxuICAgICAgICAvLyB0aW1lIHRoaXMgdGltZW91dCBleHBpcmVzIGFuZCB0aGUgdGVtcG9yYXJ5IHJldGFpbiBpcyByZWxlYXNlZC4gSG93ZXZlcixcbiAgICAgICAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGZvciBsaXZlIHF1ZXJpZXMgd2hpY2ggcmVtYWluIG9wZW4gaW5kZWZpbml0ZWx5LlxuXG4gICAgICAgIGlmIChyZXRhaW5Db3VudCA8PSAwICYmIGN1cnJlbnROZXR3b3JrU3Vic2NyaXB0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICBjdXJyZW50TmV0d29ya1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZWxlYXNlUXVlcnlUaW1lb3V0ID0gc2V0VGltZW91dChsb2NhbFJlbGVhc2VUZW1wb3JhcnlSZXRhaW4sIERBVEFfUkVURU5USU9OX1RJTUVPVVQpOyAvLyBOT1RFOiBTaW5jZSB0ZW1wb3JhcnlSZXRhaW4gY2FuIGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcywgd2UgcmVsZWFzZVxuICAgICAgLy8gdGhlIHByZXZpb3VzIHRlbXBvcmFyeSByZXRhaW4gYWZ0ZXIgd2UgcmUtZXN0YWJsaXNoIGEgbmV3IG9uZSwgc2luY2VcbiAgICAgIC8vIHdlIG9ubHkgZXZlciBuZWVkIGEgc2luZ2xlIHRlbXBvcmFyeSByZXRhaW4gdW50aWwgdGhlIHBlcm1hbmVudCByZXRhaW4gaXNcbiAgICAgIC8vIGVzdGFibGlzaGVkLlxuICAgICAgLy8gdGVtcG9yYXJ5UmV0YWluIG1heSBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMgYnkgUmVhY3QgZHVyaW5nIHRoZSByZW5kZXJcbiAgICAgIC8vIHBoYXNlLCBhcyB3ZWxsIGFzIG11bHRpcGxlIHRpbWVzIGJ5IG90aGVyIHF1ZXJ5IGNvbXBvbmVudHMgdGhhdCBhcmVcbiAgICAgIC8vIHJlbmRlcmluZyB0aGUgc2FtZSBxdWVyeS92YXJpYWJsZXMuXG5cbiAgICAgIGlmIChyZWxlYXNlVGVtcG9yYXJ5UmV0YWluICE9IG51bGwpIHtcbiAgICAgICAgcmVsZWFzZVRlbXBvcmFyeVJldGFpbigpO1xuICAgICAgfVxuXG4gICAgICByZWxlYXNlVGVtcG9yYXJ5UmV0YWluID0gbG9jYWxSZWxlYXNlVGVtcG9yYXJ5UmV0YWluO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgICByZWxlYXNlVGVtcG9yYXJ5UmV0YWluICYmIHJlbGVhc2VUZW1wb3JhcnlSZXRhaW4oKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIHBlcm1hbmVudFJldGFpbjogZnVuY3Rpb24gcGVybWFuZW50UmV0YWluKGVudmlyb25tZW50KSB7XG4gICAgICB2YXIgZGlzcG9zYWJsZSA9IHJldGFpbihlbnZpcm9ubWVudCk7XG5cbiAgICAgIGlmIChyZWxlYXNlVGVtcG9yYXJ5UmV0YWluICE9IG51bGwpIHtcbiAgICAgICAgcmVsZWFzZVRlbXBvcmFyeVJldGFpbigpO1xuICAgICAgICByZWxlYXNlVGVtcG9yYXJ5UmV0YWluID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcblxuICAgICAgICAgIGlmIChyZXRhaW5Db3VudCA8PSAwICYmIGN1cnJlbnROZXR3b3JrU3Vic2NyaXB0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgIGN1cnJlbnROZXR3b3JrU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGNhY2hlRW50cnk7XG59XG5cbnZhciBRdWVyeVJlc291cmNlSW1wbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFF1ZXJ5UmVzb3VyY2VJbXBsKGVudmlyb25tZW50KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkodGhpcywgXCJfY2xlYXJDYWNoZUVudHJ5XCIsIGZ1bmN0aW9uIChjYWNoZUVudHJ5KSB7XG4gICAgICBpZiAoY2FjaGVFbnRyeS5nZXRSZXRhaW5Db3VudCgpIDw9IDApIHtcbiAgICAgICAgX3RoaXMuX2NhY2hlW1wiZGVsZXRlXCJdKGNhY2hlRW50cnkuY2FjaGVJZGVudGlmaWVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLl9lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuICAgIHRoaXMuX2NhY2hlID0gTFJVQ2FjaGUuY3JlYXRlKENBQ0hFX0NBUEFDSVRZKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBRdWVyeVJlc291cmNlSW1wbC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnByZXBhcmUgPSBmdW5jdGlvbiBwcmVwYXJlKG9wZXJhdGlvbiwgZmV0Y2hPYnNlcnZhYmxlLCBtYXliZUZldGNoUG9saWN5LCBtYXliZVJlbmRlclBvbGljeSwgb2JzZXJ2ZXIsIGNhY2hlQnJlYWtlciwgcHJvZmlsZXJDb250ZXh0KSB7XG4gICAgdmFyIGNhY2hlSWRlbnRpZmllciA9IGdldFF1ZXJ5Q2FjaGVJZGVudGlmaWVyKHRoaXMuX2Vudmlyb25tZW50LCBvcGVyYXRpb24sIG1heWJlRmV0Y2hQb2xpY3ksIG1heWJlUmVuZGVyUG9saWN5LCBjYWNoZUJyZWFrZXIpO1xuICAgIHJldHVybiB0aGlzLnByZXBhcmVXaXRoSWRlbnRpZmllcihjYWNoZUlkZW50aWZpZXIsIG9wZXJhdGlvbiwgZmV0Y2hPYnNlcnZhYmxlLCBtYXliZUZldGNoUG9saWN5LCBtYXliZVJlbmRlclBvbGljeSwgb2JzZXJ2ZXIsIHByb2ZpbGVyQ29udGV4dCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCBkdXJpbmcgYSBDb21wb25lbnQncyByZW5kZXIgZnVuY3Rpb24sXG4gICAqIHRvIGVpdGhlciByZWFkIGFuIGV4aXN0aW5nIGNhY2hlZCB2YWx1ZSBmb3IgdGhlIHF1ZXJ5LCBvciBmZXRjaCB0aGUgcXVlcnlcbiAgICogYW5kIHN1c3BlbmQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnByZXBhcmVXaXRoSWRlbnRpZmllciA9IGZ1bmN0aW9uIHByZXBhcmVXaXRoSWRlbnRpZmllcihjYWNoZUlkZW50aWZpZXIsIG9wZXJhdGlvbiwgZmV0Y2hPYnNlcnZhYmxlLCBtYXliZUZldGNoUG9saWN5LCBtYXliZVJlbmRlclBvbGljeSwgb2JzZXJ2ZXIsIHByb2ZpbGVyQ29udGV4dCkge1xuICAgIHZhciBlbnZpcm9ubWVudCA9IHRoaXMuX2Vudmlyb25tZW50O1xuICAgIHZhciBmZXRjaFBvbGljeSA9IG1heWJlRmV0Y2hQb2xpY3kgIT09IG51bGwgJiYgbWF5YmVGZXRjaFBvbGljeSAhPT0gdm9pZCAwID8gbWF5YmVGZXRjaFBvbGljeSA6IERFRkFVTFRfRkVUQ0hfUE9MSUNZO1xuICAgIHZhciByZW5kZXJQb2xpY3kgPSBtYXliZVJlbmRlclBvbGljeSAhPT0gbnVsbCAmJiBtYXliZVJlbmRlclBvbGljeSAhPT0gdm9pZCAwID8gbWF5YmVSZW5kZXJQb2xpY3kgOiBlbnZpcm9ubWVudC5VTlNUQUJMRV9nZXREZWZhdWx0UmVuZGVyUG9saWN5KCk7IC8vIDEuIENoZWNrIGlmIHRoZXJlJ3MgYSBjYWNoZWQgdmFsdWUgZm9yIHRoaXMgb3BlcmF0aW9uLCBhbmQgcmV1c2UgaXQgaWZcbiAgICAvLyBpdCdzIGF2YWlsYWJsZVxuXG4gICAgdmFyIGNhY2hlRW50cnkgPSB0aGlzLl9jYWNoZS5nZXQoY2FjaGVJZGVudGlmaWVyKTtcblxuICAgIHZhciB0ZW1wb3JhcnlSZXRhaW5EaXNwb3NhYmxlID0gbnVsbDtcblxuICAgIGlmIChjYWNoZUVudHJ5ID09IG51bGwpIHtcbiAgICAgIC8vIDIuIElmIGEgY2FjaGVkIHZhbHVlIGlzbid0IGF2YWlsYWJsZSwgdHJ5IGZldGNoaW5nIHRoZSBvcGVyYXRpb24uXG4gICAgICAvLyBfZmV0Y2hBbmRTYXZlUXVlcnkgd2lsbCB1cGRhdGUgdGhlIGNhY2hlIHdpdGggZWl0aGVyIGEgUHJvbWlzZSBvclxuICAgICAgLy8gYW4gRXJyb3IgdG8gdGhyb3csIG9yIGEgUXVlcnlSZXN1bHQgdG8gcmV0dXJuLlxuICAgICAgY2FjaGVFbnRyeSA9IHRoaXMuX2ZldGNoQW5kU2F2ZVF1ZXJ5KGNhY2hlSWRlbnRpZmllciwgb3BlcmF0aW9uLCBmZXRjaE9ic2VydmFibGUsIGZldGNoUG9saWN5LCByZW5kZXJQb2xpY3ksIHByb2ZpbGVyQ29udGV4dCwgKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIG9ic2VydmVyKSwge30sIHtcbiAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgIC8vIDQuIElmIHRoZSByZXF1ZXN0IGlzIGNhbmNlbGxlZCwgbWFrZSBzdXJlIHRvIGRpc3Bvc2VcbiAgICAgICAgICAvLyBvZiB0aGUgdGVtcG9yYXJ5IHJldGFpbjsgdGhpcyB3aWxsIGVuc3VyZSB0aGF0IGEgcHJvbWlzZVxuICAgICAgICAgIC8vIGRvZXNuJ3QgcmVtYWluIHVubmVjZXNzYXJpbHkgY2FjaGVkIHVudGlsIHRoZSB0ZW1wb3JhcnkgcmV0YWluXG4gICAgICAgICAgLy8gZXhwaXJlcy4gTm90IGNsZWFyaW5nIHRoZSB0ZW1wb3JhcnkgcmV0YWluIG1pZ2h0IGNhdXNlIHRoZVxuICAgICAgICAgIC8vIHF1ZXJ5IHRvIGluY29ycmVjdGx5IHJlLXN1c3BlbmQuXG4gICAgICAgICAgaWYgKHRlbXBvcmFyeVJldGFpbkRpc3Bvc2FibGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGVtcG9yYXJ5UmV0YWluRGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG9ic2VydmVyVW5zdWJzY3JpYmUgPSBvYnNlcnZlciA9PT0gbnVsbCB8fCBvYnNlcnZlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JzZXJ2ZXIudW5zdWJzY3JpYmU7XG4gICAgICAgICAgb2JzZXJ2ZXJVbnN1YnNjcmliZSAmJiBvYnNlcnZlclVuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9IC8vIDMuIFRlbXBvcmFyaWx5IHJldGFpbiBoZXJlIGluIHJlbmRlciBwaGFzZS4gV2hlbiB0aGUgY29tcG9uZW50IHJlYWRpbmdcbiAgICAvLyB0aGUgb3BlcmF0aW9uIGlzIGNvbW1pdHRlZCwgd2Ugd2lsbCB0cmFuc2ZlciBvd25lcnNoaXAgb2YgZGF0YSByZXRlbnRpb25cbiAgICAvLyB0byB0aGUgY29tcG9uZW50LlxuICAgIC8vIEluIGNhc2UgdGhlIGNvbXBvbmVudCBuZXZlciBjb21taXRzIChtb3VudHMgb3IgdXBkYXRlcykgZnJvbSB0aGlzIHJlbmRlcixcbiAgICAvLyB0aGlzIGRhdGEgcmV0ZW50aW9uIGhvbGQgd2lsbCBhdXRvLXJlbGVhc2UgaXRzZWxmIGFmdGVyIGEgdGltZW91dC5cblxuXG4gICAgdGVtcG9yYXJ5UmV0YWluRGlzcG9zYWJsZSA9IGNhY2hlRW50cnkudGVtcG9yYXJ5UmV0YWluKGVudmlyb25tZW50KTtcbiAgICB2YXIgY2FjaGVkVmFsdWUgPSBjYWNoZUVudHJ5LmdldFZhbHVlKCk7XG5cbiAgICBpZiAoaXNQcm9taXNlKGNhY2hlZFZhbHVlKSB8fCBjYWNoZWRWYWx1ZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aHJvdyBjYWNoZWRWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGVkVmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCBkdXJpbmcgYSBjb21wb25lbnQncyBjb21taXQgcGhhc2VcbiAgICogKGUuZy4gaW5zaWRlIHVzZUVmZmVjdCksIGluIG9yZGVyIHRvIHJldGFpbiB0aGUgb3BlcmF0aW9uIGluIHRoZSBSZWxheSBzdG9yZVxuICAgKiBhbmQgdHJhbnNmZXIgb3duZXJzaGlwIG9mIHRoZSBvcGVyYXRpb24gdG8gdGhlIGNvbXBvbmVudCBsaWZlY3ljbGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJldGFpbiA9IGZ1bmN0aW9uIHJldGFpbihxdWVyeVJlc3VsdCwgcHJvZmlsZXJDb250ZXh0KSB7XG4gICAgdmFyIGVudmlyb25tZW50ID0gdGhpcy5fZW52aXJvbm1lbnQ7XG4gICAgdmFyIGNhY2hlSWRlbnRpZmllciA9IHF1ZXJ5UmVzdWx0LmNhY2hlSWRlbnRpZmllcixcbiAgICAgICAgb3BlcmF0aW9uID0gcXVlcnlSZXN1bHQub3BlcmF0aW9uO1xuXG4gICAgdmFyIGNhY2hlRW50cnkgPSB0aGlzLl9nZXRPckNyZWF0ZUNhY2hlRW50cnkoY2FjaGVJZGVudGlmaWVyLCBvcGVyYXRpb24sIHF1ZXJ5UmVzdWx0LCBudWxsKTtcblxuICAgIHZhciBkaXNwb3NhYmxlID0gY2FjaGVFbnRyeS5wZXJtYW5lbnRSZXRhaW4oZW52aXJvbm1lbnQpO1xuXG4gICAgZW52aXJvbm1lbnQuX19sb2coe1xuICAgICAgbmFtZTogJ3F1ZXJ5cmVzb3VyY2UucmV0YWluJyxcbiAgICAgIHByb2ZpbGVyQ29udGV4dDogcHJvZmlsZXJDb250ZXh0LFxuICAgICAgcmVzb3VyY2VJRDogY2FjaGVFbnRyeS5pZFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLlRFU1RTX09OTFlfX2dldENhY2hlRW50cnkgPSBmdW5jdGlvbiBURVNUU19PTkxZX19nZXRDYWNoZUVudHJ5KG9wZXJhdGlvbiwgbWF5YmVGZXRjaFBvbGljeSwgbWF5YmVSZW5kZXJQb2xpY3ksIGNhY2hlQnJlYWtlcikge1xuICAgIHZhciBlbnZpcm9ubWVudCA9IHRoaXMuX2Vudmlyb25tZW50O1xuICAgIHZhciBjYWNoZUlkZW50aWZpZXIgPSBnZXRRdWVyeUNhY2hlSWRlbnRpZmllcihlbnZpcm9ubWVudCwgb3BlcmF0aW9uLCBtYXliZUZldGNoUG9saWN5LCBtYXliZVJlbmRlclBvbGljeSwgY2FjaGVCcmVha2VyKTtcbiAgICByZXR1cm4gdGhpcy5fY2FjaGUuZ2V0KGNhY2hlSWRlbnRpZmllcik7XG4gIH07XG5cbiAgX3Byb3RvLl9nZXRPckNyZWF0ZUNhY2hlRW50cnkgPSBmdW5jdGlvbiBfZ2V0T3JDcmVhdGVDYWNoZUVudHJ5KGNhY2hlSWRlbnRpZmllciwgb3BlcmF0aW9uLCB2YWx1ZSwgbmV0d29ya1N1YnNjcmlwdGlvbikge1xuICAgIHZhciBjYWNoZUVudHJ5ID0gdGhpcy5fY2FjaGUuZ2V0KGNhY2hlSWRlbnRpZmllcik7XG5cbiAgICBpZiAoY2FjaGVFbnRyeSA9PSBudWxsKSB7XG4gICAgICBjYWNoZUVudHJ5ID0gY3JlYXRlQ2FjaGVFbnRyeShjYWNoZUlkZW50aWZpZXIsIG9wZXJhdGlvbiwgdmFsdWUsIG5ldHdvcmtTdWJzY3JpcHRpb24sIHRoaXMuX2NsZWFyQ2FjaGVFbnRyeSk7XG5cbiAgICAgIHRoaXMuX2NhY2hlLnNldChjYWNoZUlkZW50aWZpZXIsIGNhY2hlRW50cnkpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZUVudHJ5O1xuICB9O1xuXG4gIF9wcm90by5fZmV0Y2hBbmRTYXZlUXVlcnkgPSBmdW5jdGlvbiBfZmV0Y2hBbmRTYXZlUXVlcnkoY2FjaGVJZGVudGlmaWVyLCBvcGVyYXRpb24sIGZldGNoT2JzZXJ2YWJsZSwgZmV0Y2hQb2xpY3ksIHJlbmRlclBvbGljeSwgcHJvZmlsZXJDb250ZXh0LCBvYnNlcnZlcikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGVudmlyb25tZW50ID0gdGhpcy5fZW52aXJvbm1lbnQ7IC8vIE5PVEU6IFJ1bm5pbmcgYGNoZWNrYCB3aWxsIHdyaXRlIG1pc3NpbmcgZGF0YSB0byB0aGUgc3RvcmUgdXNpbmcgYW55XG4gICAgLy8gbWlzc2luZyBkYXRhIGhhbmRsZXJzIHNwZWNpZmllZCBvbiB0aGUgZW52aXJvbm1lbnQ7XG4gICAgLy8gV2UgcnVuIGl0IGhlcmUgZmlyc3QgdG8gbWFrZSB0aGUgaGFuZGxlcnMgZ2V0IGEgY2hhbmNlIHRvIHBvcHVsYXRlXG4gICAgLy8gbWlzc2luZyBkYXRhLlxuXG4gICAgdmFyIHF1ZXJ5QXZhaWxhYmlsaXR5ID0gZW52aXJvbm1lbnQuY2hlY2sob3BlcmF0aW9uKTtcbiAgICB2YXIgcXVlcnlTdGF0dXMgPSBxdWVyeUF2YWlsYWJpbGl0eS5zdGF0dXM7XG4gICAgdmFyIGhhc0Z1bGxRdWVyeSA9IHF1ZXJ5U3RhdHVzID09PSAnYXZhaWxhYmxlJztcbiAgICB2YXIgY2FuUGFydGlhbFJlbmRlciA9IGhhc0Z1bGxRdWVyeSB8fCByZW5kZXJQb2xpY3kgPT09ICdwYXJ0aWFsJyAmJiBxdWVyeVN0YXR1cyAhPT0gJ3N0YWxlJztcbiAgICB2YXIgc2hvdWxkRmV0Y2g7XG4gICAgdmFyIHNob3VsZEFsbG93UmVuZGVyO1xuXG4gICAgdmFyIHJlc29sdmVOZXR3b3JrUHJvbWlzZSA9IGZ1bmN0aW9uIHJlc29sdmVOZXR3b3JrUHJvbWlzZSgpIHt9O1xuXG4gICAgc3dpdGNoIChmZXRjaFBvbGljeSkge1xuICAgICAgY2FzZSAnc3RvcmUtb25seSc6XG4gICAgICAgIHtcbiAgICAgICAgICBzaG91bGRGZXRjaCA9IGZhbHNlO1xuICAgICAgICAgIHNob3VsZEFsbG93UmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlICdzdG9yZS1vci1uZXR3b3JrJzpcbiAgICAgICAge1xuICAgICAgICAgIHNob3VsZEZldGNoID0gIWhhc0Z1bGxRdWVyeTtcbiAgICAgICAgICBzaG91bGRBbGxvd1JlbmRlciA9IGNhblBhcnRpYWxSZW5kZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAnc3RvcmUtYW5kLW5ldHdvcmsnOlxuICAgICAgICB7XG4gICAgICAgICAgc2hvdWxkRmV0Y2ggPSB0cnVlO1xuICAgICAgICAgIHNob3VsZEFsbG93UmVuZGVyID0gY2FuUGFydGlhbFJlbmRlcjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlICduZXR3b3JrLW9ubHknOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIHNob3VsZEZldGNoID0gdHJ1ZTtcbiAgICAgICAgICBzaG91bGRBbGxvd1JlbmRlciA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSAvLyBOT1RFOiBJZiB0aGlzIHZhbHVlIGlzIGZhbHNlLCB3ZSB3aWxsIGNhY2hlIGEgcHJvbWlzZSBmb3IgdGhpc1xuICAgIC8vIHF1ZXJ5LCB3aGljaCBtZWFucyB3ZSB3aWxsIHN1c3BlbmQgaGVyZSBhdCB0aGlzIHF1ZXJ5IHJvb3QuXG4gICAgLy8gSWYgaXQncyB0cnVlLCB3ZSB3aWxsIGNhY2hlIHRoZSBxdWVyeSByZXNvdXJjZSBhbmQgYWxsb3cgcmVuZGVyaW5nIHRvXG4gICAgLy8gY29udGludWUuXG5cblxuICAgIGlmIChzaG91bGRBbGxvd1JlbmRlcikge1xuICAgICAgdmFyIHF1ZXJ5UmVzdWx0ID0gZ2V0UXVlcnlSZXN1bHQob3BlcmF0aW9uLCBjYWNoZUlkZW50aWZpZXIpO1xuXG4gICAgICB2YXIgX2NhY2hlRW50cnkgPSBjcmVhdGVDYWNoZUVudHJ5KGNhY2hlSWRlbnRpZmllciwgb3BlcmF0aW9uLCBxdWVyeVJlc3VsdCwgbnVsbCwgdGhpcy5fY2xlYXJDYWNoZUVudHJ5KTtcblxuICAgICAgdGhpcy5fY2FjaGUuc2V0KGNhY2hlSWRlbnRpZmllciwgX2NhY2hlRW50cnkpO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRGZXRjaCkge1xuICAgICAgdmFyIF9xdWVyeVJlc3VsdCA9IGdldFF1ZXJ5UmVzdWx0KG9wZXJhdGlvbiwgY2FjaGVJZGVudGlmaWVyKTtcblxuICAgICAgdmFyIG5ldHdvcmtTdWJzY3JpcHRpb247XG4gICAgICBmZXRjaE9ic2VydmFibGUuc3Vic2NyaWJlKHtcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgIG5ldHdvcmtTdWJzY3JpcHRpb24gPSBzdWJzY3JpcHRpb247XG5cbiAgICAgICAgICB2YXIgY2FjaGVFbnRyeSA9IF90aGlzMi5fY2FjaGUuZ2V0KGNhY2hlSWRlbnRpZmllcik7XG5cbiAgICAgICAgICBpZiAoY2FjaGVFbnRyeSkge1xuICAgICAgICAgICAgY2FjaGVFbnRyeS5zZXROZXR3b3JrU3Vic2NyaXB0aW9uKG5ldHdvcmtTdWJzY3JpcHRpb24pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBvYnNlcnZlclN0YXJ0ID0gb2JzZXJ2ZXIgPT09IG51bGwgfHwgb2JzZXJ2ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9ic2VydmVyLnN0YXJ0O1xuICAgICAgICAgIG9ic2VydmVyU3RhcnQgJiYgb2JzZXJ2ZXJTdGFydChzdWJzY3JpcHRpb24pO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHZhciBzbmFwc2hvdCA9IGVudmlyb25tZW50Lmxvb2t1cChvcGVyYXRpb24uZnJhZ21lbnQpO1xuXG4gICAgICAgICAgdmFyIGNhY2hlRW50cnkgPSBfdGhpczIuX2dldE9yQ3JlYXRlQ2FjaGVFbnRyeShjYWNoZUlkZW50aWZpZXIsIG9wZXJhdGlvbiwgX3F1ZXJ5UmVzdWx0LCBuZXR3b3JrU3Vic2NyaXB0aW9uKTtcblxuICAgICAgICAgIGNhY2hlRW50cnkuc2V0VmFsdWUoX3F1ZXJ5UmVzdWx0KTtcbiAgICAgICAgICByZXNvbHZlTmV0d29ya1Byb21pc2UoKTtcbiAgICAgICAgICB2YXIgb2JzZXJ2ZXJOZXh0ID0gb2JzZXJ2ZXIgPT09IG51bGwgfHwgb2JzZXJ2ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9ic2VydmVyLm5leHQ7XG4gICAgICAgICAgb2JzZXJ2ZXJOZXh0ICYmIG9ic2VydmVyTmV4dChzbmFwc2hvdCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IpIHtcbiAgICAgICAgICB2YXIgY2FjaGVFbnRyeSA9IF90aGlzMi5fZ2V0T3JDcmVhdGVDYWNoZUVudHJ5KGNhY2hlSWRlbnRpZmllciwgb3BlcmF0aW9uLCBfZXJyb3IsIG5ldHdvcmtTdWJzY3JpcHRpb24pO1xuXG4gICAgICAgICAgY2FjaGVFbnRyeS5zZXRWYWx1ZShfZXJyb3IpO1xuICAgICAgICAgIHJlc29sdmVOZXR3b3JrUHJvbWlzZSgpO1xuICAgICAgICAgIG5ldHdvcmtTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICAgIGNhY2hlRW50cnkuc2V0TmV0d29ya1N1YnNjcmlwdGlvbihudWxsKTtcbiAgICAgICAgICB2YXIgb2JzZXJ2ZXJFcnJvciA9IG9ic2VydmVyID09PSBudWxsIHx8IG9ic2VydmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYnNlcnZlci5lcnJvcjtcbiAgICAgICAgICBvYnNlcnZlckVycm9yICYmIG9ic2VydmVyRXJyb3IoX2Vycm9yKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgIHJlc29sdmVOZXR3b3JrUHJvbWlzZSgpO1xuICAgICAgICAgIG5ldHdvcmtTdWJzY3JpcHRpb24gPSBudWxsO1xuXG4gICAgICAgICAgdmFyIGNhY2hlRW50cnkgPSBfdGhpczIuX2NhY2hlLmdldChjYWNoZUlkZW50aWZpZXIpO1xuXG4gICAgICAgICAgaWYgKGNhY2hlRW50cnkpIHtcbiAgICAgICAgICAgIGNhY2hlRW50cnkuc2V0TmV0d29ya1N1YnNjcmlwdGlvbihudWxsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgb2JzZXJ2ZXJDb21wbGV0ZSA9IG9ic2VydmVyID09PSBudWxsIHx8IG9ic2VydmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYnNlcnZlci5jb21wbGV0ZTtcbiAgICAgICAgICBvYnNlcnZlckNvbXBsZXRlICYmIG9ic2VydmVyQ29tcGxldGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5zdWJzY3JpYmU6IG9ic2VydmVyID09PSBudWxsIHx8IG9ic2VydmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYnNlcnZlci51bnN1YnNjcmliZVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfY2FjaGVFbnRyeTIgPSB0aGlzLl9jYWNoZS5nZXQoY2FjaGVJZGVudGlmaWVyKTtcblxuICAgICAgaWYgKCFfY2FjaGVFbnRyeTIpIHtcbiAgICAgICAgdmFyIG5ldHdvcmtQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICByZXNvbHZlTmV0d29ya1Byb21pc2UgPSByZXNvbHZlO1xuICAgICAgICB9KTsgLy8gJEZsb3dFeHBlY3RlZEVycm9yW3Byb3AtbWlzc2luZ10gRXhwYW5kbyB0byBhbm5vdGF0ZSBQcm9taXNlcy5cblxuICAgICAgICBuZXR3b3JrUHJvbWlzZS5kaXNwbGF5TmFtZSA9ICdSZWxheSgnICsgb3BlcmF0aW9uLmZyYWdtZW50Lm5vZGUubmFtZSArICcpJztcbiAgICAgICAgX2NhY2hlRW50cnkyID0gY3JlYXRlQ2FjaGVFbnRyeShjYWNoZUlkZW50aWZpZXIsIG9wZXJhdGlvbiwgbmV0d29ya1Byb21pc2UsIG5ldHdvcmtTdWJzY3JpcHRpb24sIHRoaXMuX2NsZWFyQ2FjaGVFbnRyeSk7XG5cbiAgICAgICAgdGhpcy5fY2FjaGUuc2V0KGNhY2hlSWRlbnRpZmllciwgX2NhY2hlRW50cnkyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9ic2VydmVyQ29tcGxldGUgPSBvYnNlcnZlciA9PT0gbnVsbCB8fCBvYnNlcnZlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JzZXJ2ZXIuY29tcGxldGU7XG4gICAgICBvYnNlcnZlckNvbXBsZXRlICYmIG9ic2VydmVyQ29tcGxldGUoKTtcbiAgICB9XG5cbiAgICB2YXIgY2FjaGVFbnRyeSA9IHRoaXMuX2NhY2hlLmdldChjYWNoZUlkZW50aWZpZXIpO1xuXG4gICAgIShjYWNoZUVudHJ5ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIHRvIGhhdmUgY2FjaGVkIGEgcmVzdWx0IHdoZW4gYXR0ZW1wdGluZyB0byBmZXRjaCBxdWVyeS4nICsgXCJJZiB5b3UncmUgc2VlaW5nIHRoaXMsIHRoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlbGF5LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBlbnZpcm9ubWVudC5fX2xvZyh7XG4gICAgICBuYW1lOiAncXVlcnlyZXNvdXJjZS5mZXRjaCcsXG4gICAgICByZXNvdXJjZUlEOiBjYWNoZUVudHJ5LmlkLFxuICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgICBwcm9maWxlckNvbnRleHQ6IHByb2ZpbGVyQ29udGV4dCxcbiAgICAgIGZldGNoUG9saWN5OiBmZXRjaFBvbGljeSxcbiAgICAgIHJlbmRlclBvbGljeTogcmVuZGVyUG9saWN5LFxuICAgICAgcXVlcnlBdmFpbGFiaWxpdHk6IHF1ZXJ5QXZhaWxhYmlsaXR5LFxuICAgICAgc2hvdWxkRmV0Y2g6IHNob3VsZEZldGNoXG4gICAgfSk7XG5cbiAgICByZXR1cm4gY2FjaGVFbnRyeTtcbiAgfTtcblxuICByZXR1cm4gUXVlcnlSZXNvdXJjZUltcGw7XG59KCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVF1ZXJ5UmVzb3VyY2UoZW52aXJvbm1lbnQpIHtcbiAgcmV0dXJuIG5ldyBRdWVyeVJlc291cmNlSW1wbChlbnZpcm9ubWVudCk7XG59XG5cbnZhciBkYXRhUmVzb3VyY2VzID0gV0VBS01BUF9TVVBQT1JURUQgPyBuZXcgV2Vha01hcCgpIDogbmV3IE1hcCgpO1xuXG5mdW5jdGlvbiBnZXRRdWVyeVJlc291cmNlRm9yRW52aXJvbm1lbnQoZW52aXJvbm1lbnQpIHtcbiAgdmFyIGNhY2hlZCA9IGRhdGFSZXNvdXJjZXMuZ2V0KGVudmlyb25tZW50KTtcblxuICBpZiAoY2FjaGVkKSB7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuXG4gIHZhciBuZXdEYXRhUmVzb3VyY2UgPSBjcmVhdGVRdWVyeVJlc291cmNlKGVudmlyb25tZW50KTtcbiAgZGF0YVJlc291cmNlcy5zZXQoZW52aXJvbm1lbnQsIG5ld0RhdGFSZXNvdXJjZSk7XG4gIHJldHVybiBuZXdEYXRhUmVzb3VyY2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVRdWVyeVJlc291cmNlOiBjcmVhdGVRdWVyeVJlc291cmNlLFxuICBnZXRRdWVyeVJlc291cmNlRm9yRW52aXJvbm1lbnQ6IGdldFF1ZXJ5UmVzb3VyY2VGb3JFbnZpcm9ubWVudCxcbiAgZ2V0UXVlcnlDYWNoZUlkZW50aWZpZXI6IGdldFF1ZXJ5Q2FjaGVJZGVudGlmaWVyXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIFJlYWN0UmVsYXlDb250ZXh0ID0gcmVxdWlyZSgncmVhY3QtcmVsYXkvUmVhY3RSZWxheUNvbnRleHQnKTtcblxudmFyIHVzZU1lbW8gPSBSZWFjdC51c2VNZW1vO1xuXG5mdW5jdGlvbiBSZWxheUVudmlyb25tZW50UHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBlbnZpcm9ubWVudCA9IHByb3BzLmVudmlyb25tZW50O1xuICB2YXIgY29udGV4dCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnRcbiAgICB9O1xuICB9LCBbZW52aXJvbm1lbnRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0UmVsYXlDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5RW52aXJvbm1lbnRQcm92aWRlcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBnZXRSZWZldGNoTWV0YWRhdGEgPSByZXF1aXJlKCcuL2dldFJlZmV0Y2hNZXRhZGF0YScpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbmZ1bmN0aW9uIGdldFBhZ2luYXRpb25NZXRhZGF0YShmcmFnbWVudE5vZGUsIGNvbXBvbmVudERpc3BsYXlOYW1lKSB7XG4gIHZhciBfZnJhZ21lbnROb2RlJG1ldGFkYXQsIF9mcmFnbWVudE5vZGUkbWV0YWRhdDI7XG5cbiAgdmFyIF9nZXRSZWZldGNoTWV0YWRhdGEgPSBnZXRSZWZldGNoTWV0YWRhdGEoZnJhZ21lbnROb2RlLCBjb21wb25lbnREaXNwbGF5TmFtZSksXG4gICAgICBwYWdpbmF0aW9uUmVxdWVzdCA9IF9nZXRSZWZldGNoTWV0YWRhdGEucmVmZXRjaGFibGVSZXF1ZXN0LFxuICAgICAgcmVmZXRjaE1ldGFkYXRhID0gX2dldFJlZmV0Y2hNZXRhZGF0YS5yZWZldGNoTWV0YWRhdGE7XG5cbiAgdmFyIHBhZ2luYXRpb25NZXRhZGF0YSA9IHJlZmV0Y2hNZXRhZGF0YS5jb25uZWN0aW9uO1xuICAhKHBhZ2luYXRpb25NZXRhZGF0YSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBnZXRQYWdpbmF0aW9uTWV0YWRhdGEoKTogRXhwZWN0ZWQgZnJhZ21lbnQgYCVzYCB0byBpbmNsdWRlIGEgJyArICdjb25uZWN0aW9uIHdoZW4gdXNpbmcgYCVzYC4gRGlkIHlvdSBmb3JnZXQgdG8gYWRkIGEgQGNvbm5lY3Rpb24gJyArICdkaXJlY3RpdmUgdG8gdGhlIGNvbm5lY3Rpb24gZmllbGQgaW4gdGhlIGZyYWdtZW50PycsIGNvbXBvbmVudERpc3BsYXlOYW1lLCBmcmFnbWVudE5vZGUubmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgY29ubmVjdGlvblBhdGhJbkZyYWdtZW50RGF0YSA9IHBhZ2luYXRpb25NZXRhZGF0YS5wYXRoO1xuICB2YXIgY29ubmVjdGlvbk1ldGFkYXRhID0gKChfZnJhZ21lbnROb2RlJG1ldGFkYXQgPSAoX2ZyYWdtZW50Tm9kZSRtZXRhZGF0MiA9IGZyYWdtZW50Tm9kZS5tZXRhZGF0YSkgPT09IG51bGwgfHwgX2ZyYWdtZW50Tm9kZSRtZXRhZGF0MiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZyYWdtZW50Tm9kZSRtZXRhZGF0Mi5jb25uZWN0aW9uKSAhPT0gbnVsbCAmJiBfZnJhZ21lbnROb2RlJG1ldGFkYXQgIT09IHZvaWQgMCA/IF9mcmFnbWVudE5vZGUkbWV0YWRhdCA6IFtdKVswXTtcbiAgIShjb25uZWN0aW9uTWV0YWRhdGEgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheTogZ2V0UGFnaW5hdGlvbk1ldGFkYXRhKCk6IEV4cGVjdGVkIGZyYWdtZW50IGAlc2AgdG8gaW5jbHVkZSBhICcgKyAnY29ubmVjdGlvbiB3aGVuIHVzaW5nIGAlc2AuIERpZCB5b3UgZm9yZ2V0IHRvIGFkZCBhIEBjb25uZWN0aW9uICcgKyAnZGlyZWN0aXZlIHRvIHRoZSBjb25uZWN0aW9uIGZpZWxkIGluIHRoZSBmcmFnbWVudD8nLCBjb21wb25lbnREaXNwbGF5TmFtZSwgZnJhZ21lbnROb2RlLm5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGlkZW50aWZpZXJGaWVsZCA9IHJlZmV0Y2hNZXRhZGF0YS5pZGVudGlmaWVyRmllbGQ7XG4gICEoaWRlbnRpZmllckZpZWxkID09IG51bGwgfHwgdHlwZW9mIGlkZW50aWZpZXJGaWVsZCA9PT0gJ3N0cmluZycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IGdldFJlZmV0Y2hNZXRhZGF0YSgpOiBFeHBlY3RlZCBgaWRlbnRpZmllckZpZWxkYCB0byBiZSBhIHN0cmluZy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiB7XG4gICAgY29ubmVjdGlvblBhdGhJbkZyYWdtZW50RGF0YTogY29ubmVjdGlvblBhdGhJbkZyYWdtZW50RGF0YSxcbiAgICBpZGVudGlmaWVyRmllbGQ6IGlkZW50aWZpZXJGaWVsZCxcbiAgICBwYWdpbmF0aW9uUmVxdWVzdDogcGFnaW5hdGlvblJlcXVlc3QsXG4gICAgcGFnaW5hdGlvbk1ldGFkYXRhOiBwYWdpbmF0aW9uTWV0YWRhdGEsXG4gICAgc3RyZWFtOiBjb25uZWN0aW9uTWV0YWRhdGEuc3RyZWFtID09PSB0cnVlXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UGFnaW5hdGlvbk1ldGFkYXRhOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxuZnVuY3Rpb24gZ2V0UGFnaW5hdGlvblZhcmlhYmxlcyhkaXJlY3Rpb24sIGNvdW50LCBjdXJzb3IsIGJhc2VWYXJpYWJsZXMsIGV4dHJhVmFyaWFibGVzLCBwYWdpbmF0aW9uTWV0YWRhdGEpIHtcbiAgdmFyIF9vYmplY3RTcHJlYWQzO1xuXG4gIHZhciBiYWNrd2FyZE1ldGFkYXRhID0gcGFnaW5hdGlvbk1ldGFkYXRhLmJhY2t3YXJkLFxuICAgICAgZm9yd2FyZE1ldGFkYXRhID0gcGFnaW5hdGlvbk1ldGFkYXRhLmZvcndhcmQ7XG5cbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ2JhY2t3YXJkJykge1xuICAgIHZhciBfb2JqZWN0U3ByZWFkMjtcblxuICAgICEoYmFja3dhcmRNZXRhZGF0YSAhPSBudWxsICYmIGJhY2t3YXJkTWV0YWRhdGEuY291bnQgIT0gbnVsbCAmJiBiYWNrd2FyZE1ldGFkYXRhLmN1cnNvciAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBFeHBlY3RlZCBiYWNrd2FyZCBwYWdpbmF0aW9uIG1ldGFkYXRhIHRvIGJlIGF2YWlsYWJsZS4gJyArIFwiSWYgeW91J3JlIHNlZWluZyB0aGlzLCB0aGlzIGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWxheS5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWV4dHJhVmFyaWFibGVzLmhhc093blByb3BlcnR5KGJhY2t3YXJkTWV0YWRhdGEuY3Vyc29yKSwgJ1JlbGF5OiBgVU5TVEFCTEVfZXh0cmFWYXJpYWJsZXNgIHByb3ZpZGVkIGJ5IGNhbGxlciBzaG91bGQgbm90ICcgKyAnY29udGFpbiBjdXJzb3IgdmFyaWFibGUgYCVzYC4gVGhpcyB2YXJpYWJsZSBpcyBhdXRvbWF0aWNhbGx5ICcgKyAnZGV0ZXJtaW5lZCBieSBSZWxheS4nLCBiYWNrd2FyZE1ldGFkYXRhLmN1cnNvcikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghZXh0cmFWYXJpYWJsZXMuaGFzT3duUHJvcGVydHkoYmFja3dhcmRNZXRhZGF0YS5jb3VudCksICdSZWxheTogYFVOU1RBQkxFX2V4dHJhVmFyaWFibGVzYCBwcm92aWRlZCBieSBjYWxsZXIgc2hvdWxkIG5vdCAnICsgJ2NvbnRhaW4gY291bnQgdmFyaWFibGUgYCVzYC4gVGhpcyB2YXJpYWJsZSBpcyBhdXRvbWF0aWNhbGx5ICcgKyAnZGV0ZXJtaW5lZCBieSBSZWxheS4nLCBiYWNrd2FyZE1ldGFkYXRhLmNvdW50KSA6IHZvaWQgMDsgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtc3ByZWFkLWludGVyZmFjZV1cblxuICAgIHZhciBfcGFnaW5hdGlvblZhcmlhYmxlcyA9ICgwLCBfb2JqZWN0U3ByZWFkNFtcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkNFtcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkNFtcImRlZmF1bHRcIl0pKHt9LCBiYXNlVmFyaWFibGVzKSwgZXh0cmFWYXJpYWJsZXMpLCB7fSwgKF9vYmplY3RTcHJlYWQyID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX29iamVjdFNwcmVhZDIsIGJhY2t3YXJkTWV0YWRhdGEuY3Vyc29yLCBjdXJzb3IpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9vYmplY3RTcHJlYWQyLCBiYWNrd2FyZE1ldGFkYXRhLmNvdW50LCBjb3VudCksIF9vYmplY3RTcHJlYWQyKSk7XG5cbiAgICBpZiAoZm9yd2FyZE1ldGFkYXRhICYmIGZvcndhcmRNZXRhZGF0YS5jdXJzb3IpIHtcbiAgICAgIF9wYWdpbmF0aW9uVmFyaWFibGVzW2ZvcndhcmRNZXRhZGF0YS5jdXJzb3JdID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoZm9yd2FyZE1ldGFkYXRhICYmIGZvcndhcmRNZXRhZGF0YS5jb3VudCkge1xuICAgICAgX3BhZ2luYXRpb25WYXJpYWJsZXNbZm9yd2FyZE1ldGFkYXRhLmNvdW50XSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9wYWdpbmF0aW9uVmFyaWFibGVzO1xuICB9XG5cbiAgIShmb3J3YXJkTWV0YWRhdGEgIT0gbnVsbCAmJiBmb3J3YXJkTWV0YWRhdGEuY291bnQgIT0gbnVsbCAmJiBmb3J3YXJkTWV0YWRhdGEuY3Vyc29yICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIGZvcndhcmQgcGFnaW5hdGlvbiBtZXRhZGF0YSB0byBiZSBhdmFpbGFibGUuICcgKyBcIklmIHlvdSdyZSBzZWVpbmcgdGhpcywgdGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVsYXkuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghZXh0cmFWYXJpYWJsZXMuaGFzT3duUHJvcGVydHkoZm9yd2FyZE1ldGFkYXRhLmN1cnNvciksICdSZWxheTogYFVOU1RBQkxFX2V4dHJhVmFyaWFibGVzYCBwcm92aWRlZCBieSBjYWxsZXIgc2hvdWxkIG5vdCAnICsgJ2NvbnRhaW4gY3Vyc29yIHZhcmlhYmxlIGAlc2AuIFRoaXMgdmFyaWFibGUgaXMgYXV0b21hdGljYWxseSAnICsgJ2RldGVybWluZWQgYnkgUmVsYXkuJywgZm9yd2FyZE1ldGFkYXRhLmN1cnNvcikgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWV4dHJhVmFyaWFibGVzLmhhc093blByb3BlcnR5KGZvcndhcmRNZXRhZGF0YS5jb3VudCksICdSZWxheTogYFVOU1RBQkxFX2V4dHJhVmFyaWFibGVzYCBwcm92aWRlZCBieSBjYWxsZXIgc2hvdWxkIG5vdCAnICsgJ2NvbnRhaW4gY291bnQgdmFyaWFibGUgYCVzYC4gVGhpcyB2YXJpYWJsZSBpcyBhdXRvbWF0aWNhbGx5ICcgKyAnZGV0ZXJtaW5lZCBieSBSZWxheS4nLCBmb3J3YXJkTWV0YWRhdGEuY291bnQpIDogdm9pZCAwOyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC1zcHJlYWQtaW50ZXJmYWNlXVxuXG4gIHZhciBwYWdpbmF0aW9uVmFyaWFibGVzID0gKDAsIF9vYmplY3RTcHJlYWQ0W1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQ0W1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQ0W1wiZGVmYXVsdFwiXSkoe30sIGJhc2VWYXJpYWJsZXMpLCBleHRyYVZhcmlhYmxlcyksIHt9LCAoX29iamVjdFNwcmVhZDMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfb2JqZWN0U3ByZWFkMywgZm9yd2FyZE1ldGFkYXRhLmN1cnNvciwgY3Vyc29yKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfb2JqZWN0U3ByZWFkMywgZm9yd2FyZE1ldGFkYXRhLmNvdW50LCBjb3VudCksIF9vYmplY3RTcHJlYWQzKSk7XG5cbiAgaWYgKGJhY2t3YXJkTWV0YWRhdGEgJiYgYmFja3dhcmRNZXRhZGF0YS5jdXJzb3IpIHtcbiAgICBwYWdpbmF0aW9uVmFyaWFibGVzW2JhY2t3YXJkTWV0YWRhdGEuY3Vyc29yXSA9IG51bGw7XG4gIH1cblxuICBpZiAoYmFja3dhcmRNZXRhZGF0YSAmJiBiYWNrd2FyZE1ldGFkYXRhLmNvdW50KSB7XG4gICAgcGFnaW5hdGlvblZhcmlhYmxlc1tiYWNrd2FyZE1ldGFkYXRhLmNvdW50XSA9IG51bGw7XG4gIH1cblxuICByZXR1cm4gcGFnaW5hdGlvblZhcmlhYmxlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRQYWdpbmF0aW9uVmFyaWFibGVzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG5mdW5jdGlvbiBnZXRSZWZldGNoTWV0YWRhdGEoZnJhZ21lbnROb2RlLCBjb21wb25lbnREaXNwbGF5TmFtZSkge1xuICB2YXIgX2ZyYWdtZW50Tm9kZSRtZXRhZGF0LCBfZnJhZ21lbnROb2RlJG1ldGFkYXQyO1xuXG4gICEoKChfZnJhZ21lbnROb2RlJG1ldGFkYXQgPSBmcmFnbWVudE5vZGUubWV0YWRhdGEpID09PSBudWxsIHx8IF9mcmFnbWVudE5vZGUkbWV0YWRhdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZyYWdtZW50Tm9kZSRtZXRhZGF0LnBsdXJhbCkgIT09IHRydWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IGdldFJlZmV0Y2hNZXRhZGF0YSgpOiBFeHBlY3RlZCBmcmFnbWVudCBgJXNgIG5vdCB0byBiZSBwbHVyYWwgd2hlbiB1c2luZyAnICsgJ2Alc2AuIFJlbW92ZSBgQHJlbGF5KHBsdXJhbDogdHJ1ZSlgIGZyb20gZnJhZ21lbnQgYCVzYCAnICsgJ2luIG9yZGVyIHRvIHVzZSBpdCB3aXRoIGAlc2AuJywgZnJhZ21lbnROb2RlLm5hbWUsIGNvbXBvbmVudERpc3BsYXlOYW1lLCBmcmFnbWVudE5vZGUubmFtZSwgY29tcG9uZW50RGlzcGxheU5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIHJlZmV0Y2hNZXRhZGF0YSA9IChfZnJhZ21lbnROb2RlJG1ldGFkYXQyID0gZnJhZ21lbnROb2RlLm1ldGFkYXRhKSA9PT0gbnVsbCB8fCBfZnJhZ21lbnROb2RlJG1ldGFkYXQyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZnJhZ21lbnROb2RlJG1ldGFkYXQyLnJlZmV0Y2g7XG4gICEocmVmZXRjaE1ldGFkYXRhICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IGdldFJlZmV0Y2hNZXRhZGF0YSgpOiBFeHBlY3RlZCBmcmFnbWVudCBgJXNgIHRvIGJlIHJlZmV0Y2hhYmxlIHdoZW4gdXNpbmcgYCVzYC4gJyArICdEaWQgeW91IGZvcmdldCB0byBhZGQgYSBAcmVmZXRjaGFibGUgZGlyZWN0aXZlIHRvIHRoZSBmcmFnbWVudD8nLCBjb21wb25lbnREaXNwbGF5TmFtZSwgZnJhZ21lbnROb2RlLm5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gaGFuZGxlIGJvdGggY29tbW9uanMgYW5kIGVzIG1vZHVsZXNcblxuICB2YXIgcmVmZXRjaGFibGVSZXF1ZXN0ID0gcmVmZXRjaE1ldGFkYXRhLm9wZXJhdGlvbltcImRlZmF1bHRcIl0gPyByZWZldGNoTWV0YWRhdGEub3BlcmF0aW9uW1wiZGVmYXVsdFwiXSA6IHJlZmV0Y2hNZXRhZGF0YS5vcGVyYXRpb247XG4gIHZhciBmcmFnbWVudFJlZlBhdGhJblJlc3BvbnNlID0gcmVmZXRjaE1ldGFkYXRhLmZyYWdtZW50UGF0aEluUmVzdWx0O1xuICAhKHR5cGVvZiByZWZldGNoYWJsZVJlcXVlc3QgIT09ICdzdHJpbmcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBnZXRSZWZldGNoTWV0YWRhdGEoKTogRXhwZWN0ZWQgcmVmZXRjaCBxdWVyeSB0byBiZSBhbiAnICsgXCJvcGVyYXRpb24gYW5kIG5vdCBhIHN0cmluZyB3aGVuIHVzaW5nIGAlc2AuIElmIHlvdSdyZSBzZWVpbmcgdGhpcywgXCIgKyAndGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVsYXkuJywgY29tcG9uZW50RGlzcGxheU5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGlkZW50aWZpZXJGaWVsZCA9IHJlZmV0Y2hNZXRhZGF0YS5pZGVudGlmaWVyRmllbGQ7XG4gICEoaWRlbnRpZmllckZpZWxkID09IG51bGwgfHwgdHlwZW9mIGlkZW50aWZpZXJGaWVsZCA9PT0gJ3N0cmluZycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IGdldFJlZmV0Y2hNZXRhZGF0YSgpOiBFeHBlY3RlZCBgaWRlbnRpZmllckZpZWxkYCB0byBiZSBhIHN0cmluZy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiB7XG4gICAgZnJhZ21lbnRSZWZQYXRoSW5SZXNwb25zZTogZnJhZ21lbnRSZWZQYXRoSW5SZXNwb25zZSxcbiAgICBpZGVudGlmaWVyRmllbGQ6IGlkZW50aWZpZXJGaWVsZCxcbiAgICByZWZldGNoYWJsZVJlcXVlc3Q6IHJlZmV0Y2hhYmxlUmVxdWVzdCxcbiAgICByZWZldGNoTWV0YWRhdGE6IHJlZmV0Y2hNZXRhZGF0YVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJlZmV0Y2hNZXRhZGF0YTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyXCIpKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG5mdW5jdGlvbiBnZXRWYWx1ZUF0UGF0aChkYXRhLCBwYXRoKSB7XG4gIHZhciByZXN1bHQgPSBkYXRhO1xuXG4gIHZhciBfaXRlcmF0b3IgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkocGF0aCksXG4gICAgICBfc3RlcDtcblxuICB0cnkge1xuICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICB2YXIga2V5ID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICFBcnJheS5pc0FycmF5KHJlc3VsdCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheTogRXhwZWN0ZWQgYW4gYXJyYXkgd2hlbiBleHRyYWN0aW5nIHZhbHVlIGF0IHBhdGguICcgKyBcIklmIHlvdSdyZSBzZWVpbmcgdGhpcywgdGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVsYXkuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAhKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHJlc3VsdCkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIGFuIG9iamVjdCB3aGVuIGV4dHJhY3RpbmcgdmFsdWUgYXQgcGF0aC4gJyArIFwiSWYgeW91J3JlIHNlZWluZyB0aGlzLCB0aGlzIGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWxheS5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICByZXN1bHQgPSByZXN1bHRba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9pdGVyYXRvci5lKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgX2l0ZXJhdG9yLmYoKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmFsdWVBdFBhdGg7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9sb2FkUXVlcnknKSxcbiAgICBsb2FkUXVlcnkgPSBfcmVxdWlyZS5sb2FkUXVlcnk7XG5cbmZ1bmN0aW9uIGxvYWRFbnRyeVBvaW50KGVudmlyb25tZW50UHJvdmlkZXIsIGVudHJ5UG9pbnQsIGVudHJ5UG9pbnRQYXJhbXMpIHtcbiAgLy8gU3RhcnQgbG9hZGluZyB0aGUgY29kZSBmb3IgdGhlIGVudHJ5cG9pbnRcbiAgdmFyIGxvYWRpbmdQcm9taXNlID0gbnVsbDtcblxuICBpZiAoZW50cnlQb2ludC5yb290LmdldE1vZHVsZUlmUmVxdWlyZWQoKSA9PSBudWxsKSB7XG4gICAgbG9hZGluZ1Byb21pc2UgPSBlbnRyeVBvaW50LnJvb3QubG9hZCgpO1xuICB9XG5cbiAgdmFyIHByZWxvYWRQcm9wcyA9IGVudHJ5UG9pbnQuZ2V0UHJlbG9hZFByb3BzKGVudHJ5UG9pbnRQYXJhbXMpO1xuICB2YXIgcXVlcmllcyA9IHByZWxvYWRQcm9wcy5xdWVyaWVzLFxuICAgICAgZW50cnlQb2ludHMgPSBwcmVsb2FkUHJvcHMuZW50cnlQb2ludHMsXG4gICAgICBleHRyYVByb3BzID0gcHJlbG9hZFByb3BzLmV4dHJhUHJvcHM7XG4gIHZhciBwcmVsb2FkZWRRdWVyaWVzID0ge307XG4gIHZhciBwcmVsb2FkZWRFbnRyeVBvaW50cyA9IHt9O1xuXG4gIGlmIChxdWVyaWVzICE9IG51bGwpIHtcbiAgICB2YXIgcXVlcmllc1Byb3BOYW1lcyA9IE9iamVjdC5rZXlzKHF1ZXJpZXMpO1xuICAgIHF1ZXJpZXNQcm9wTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAocXVlcnlQcm9wTmFtZSkge1xuICAgICAgdmFyIF9xdWVyaWVzJHF1ZXJ5UHJvcE5hbSA9IHF1ZXJpZXNbcXVlcnlQcm9wTmFtZV0sXG4gICAgICAgICAgZW52aXJvbm1lbnRQcm92aWRlck9wdGlvbnMgPSBfcXVlcmllcyRxdWVyeVByb3BOYW0uZW52aXJvbm1lbnRQcm92aWRlck9wdGlvbnMsXG4gICAgICAgICAgb3B0aW9ucyA9IF9xdWVyaWVzJHF1ZXJ5UHJvcE5hbS5vcHRpb25zLFxuICAgICAgICAgIHBhcmFtZXRlcnMgPSBfcXVlcmllcyRxdWVyeVByb3BOYW0ucGFyYW1ldGVycyxcbiAgICAgICAgICB2YXJpYWJsZXMgPSBfcXVlcmllcyRxdWVyeVByb3BOYW0udmFyaWFibGVzO1xuICAgICAgdmFyIGVudmlyb25tZW50ID0gZW52aXJvbm1lbnRQcm92aWRlci5nZXRFbnZpcm9ubWVudChlbnZpcm9ubWVudFByb3ZpZGVyT3B0aW9ucyk7XG4gICAgICBwcmVsb2FkZWRRdWVyaWVzW3F1ZXJ5UHJvcE5hbWVdID0gbG9hZFF1ZXJ5KGVudmlyb25tZW50LCBwYXJhbWV0ZXJzLCB2YXJpYWJsZXMsIHtcbiAgICAgICAgZmV0Y2hQb2xpY3k6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5mZXRjaFBvbGljeSxcbiAgICAgICAgbmV0d29ya0NhY2hlQ29uZmlnOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubmV0d29ya0NhY2hlQ29uZmlnLFxuICAgICAgICBfX25hbWVGb3JXYXJuaW5nOiAnbG9hZEVudHJ5UG9pbnQnXG4gICAgICB9LCBlbnZpcm9ubWVudFByb3ZpZGVyT3B0aW9ucyk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoZW50cnlQb2ludHMgIT0gbnVsbCkge1xuICAgIHZhciBlbnRyeVBvaW50UHJvcE5hbWVzID0gT2JqZWN0LmtleXMoZW50cnlQb2ludHMpO1xuICAgIGVudHJ5UG9pbnRQcm9wTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZW50cnlQb2ludFByb3BOYW1lKSB7XG4gICAgICB2YXIgZW50cnlQb2ludERlc2NyaXB0aW9uID0gZW50cnlQb2ludHNbZW50cnlQb2ludFByb3BOYW1lXTtcblxuICAgICAgaWYgKGVudHJ5UG9pbnREZXNjcmlwdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG5lc3RlZEVudHJ5UG9pbnQgPSBlbnRyeVBvaW50RGVzY3JpcHRpb24uZW50cnlQb2ludCxcbiAgICAgICAgICBuZXN0ZWRQYXJhbXMgPSBlbnRyeVBvaW50RGVzY3JpcHRpb24uZW50cnlQb2ludFBhcmFtcztcbiAgICAgIHByZWxvYWRlZEVudHJ5UG9pbnRzW2VudHJ5UG9pbnRQcm9wTmFtZV0gPSBsb2FkRW50cnlQb2ludChlbnZpcm9ubWVudFByb3ZpZGVyLCBuZXN0ZWRFbnRyeVBvaW50LCBuZXN0ZWRQYXJhbXMpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGlzRGlzcG9zZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHtcbiAgICBkaXNwb3NlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgaWYgKGlzRGlzcG9zZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJlbG9hZGVkUXVlcmllcyAhPSBudWxsKSB7XG4gICAgICAgIE9iamVjdC52YWx1ZXMocHJlbG9hZGVkUXVlcmllcykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgIHZhciBpbm5lckRpc3Bvc2UgPSBfcmVmLmRpc3Bvc2U7XG4gICAgICAgICAgaW5uZXJEaXNwb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJlbG9hZGVkRW50cnlQb2ludHMgIT0gbnVsbCkge1xuICAgICAgICBPYmplY3QudmFsdWVzKHByZWxvYWRlZEVudHJ5UG9pbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgIHZhciBpbm5lckRpc3Bvc2UgPSBfcmVmMi5kaXNwb3NlO1xuICAgICAgICAgIGlubmVyRGlzcG9zZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgfSxcbiAgICBlbnRyeVBvaW50czogcHJlbG9hZGVkRW50cnlQb2ludHMsXG4gICAgZXh0cmFQcm9wczogZXh0cmFQcm9wcyAhPT0gbnVsbCAmJiBleHRyYVByb3BzICE9PSB2b2lkIDAgPyBleHRyYVByb3BzIDogbnVsbCxcbiAgICBnZXRDb21wb25lbnQ6IGZ1bmN0aW9uIGdldENvbXBvbmVudCgpIHtcbiAgICAgIHZhciBjb21wb25lbnQgPSBlbnRyeVBvaW50LnJvb3QuZ2V0TW9kdWxlSWZSZXF1aXJlZCgpO1xuXG4gICAgICBpZiAoY29tcG9uZW50ID09IG51bGwpIHtcbiAgICAgICAgdmFyIF9sb2FkaW5nUHJvbWlzZTtcblxuICAgICAgICBsb2FkaW5nUHJvbWlzZSA9IChfbG9hZGluZ1Byb21pc2UgPSBsb2FkaW5nUHJvbWlzZSkgIT09IG51bGwgJiYgX2xvYWRpbmdQcm9taXNlICE9PSB2b2lkIDAgPyBfbG9hZGluZ1Byb21pc2UgOiBlbnRyeVBvaW50LnJvb3QubG9hZCgpO1xuICAgICAgICB0aHJvdyBsb2FkaW5nUHJvbWlzZTtcbiAgICAgIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FzdF0gLSB0cnVzdCBtZSBGbG93LCBpdHMgZW50cnlQb2ludCBjb21wb25lbnRcblxuXG4gICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgIH0sXG5cbiAgICAvLyAkRmxvd0ZpeE1lW3Vuc2FmZS1nZXR0ZXJzLXNldHRlcnNdIC0gdGhpcyBoYXMgbm8gc2lkZSBlZmZlY3RzXG4gICAgZ2V0IGlzRGlzcG9zZWQoKSB7XG4gICAgICByZXR1cm4gaXNEaXNwb3NlZDtcbiAgICB9LFxuXG4gICAgcXVlcmllczogcHJlbG9hZGVkUXVlcmllcyxcbiAgICByb290TW9kdWxlSUQ6IGVudHJ5UG9pbnQucm9vdC5nZXRNb2R1bGVJZCgpXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbG9hZEVudHJ5UG9pbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIFByZWxvYWRhYmxlUXVlcnlSZWdpc3RyeSA9IF9yZXF1aXJlLlByZWxvYWRhYmxlUXVlcnlSZWdpc3RyeSxcbiAgICBSZXBsYXlTdWJqZWN0ID0gX3JlcXVpcmUuUmVwbGF5U3ViamVjdCxcbiAgICBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yID0gX3JlcXVpcmUuY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcixcbiAgICBnZXRSZXF1ZXN0ID0gX3JlcXVpcmUuZ2V0UmVxdWVzdCxcbiAgICBnZXRSZXF1ZXN0SWRlbnRpZmllciA9IF9yZXF1aXJlLmdldFJlcXVlc3RJZGVudGlmaWVyLFxuICAgIE9ic2VydmFibGUgPSBfcmVxdWlyZS5PYnNlcnZhYmxlLFxuICAgIFJlbGF5RmVhdHVyZUZsYWdzID0gX3JlcXVpcmUuUmVsYXlGZWF0dXJlRmxhZ3MsXG4gICAgZmV0Y2hRdWVyeURlZHVwZWQgPSBfcmVxdWlyZS5fX2ludGVybmFsLmZldGNoUXVlcnlEZWR1cGVkO1xuXG52YXIgUmVuZGVyRGlzcGF0Y2hlciA9IG51bGw7XG52YXIgZmV0Y2hLZXkgPSAxMDAwMDE7XG5cbmZ1bmN0aW9uIHVzZVRyYWNrTG9hZFF1ZXJ5SW5SZW5kZXIoKSB7XG4gIGlmIChSZW5kZXJEaXNwYXRjaGVyID09PSBudWxsKSB7XG4gICAgdmFyIF9SZWFjdCRfX1NFQ1JFVF9JTlRFUiwgX1JlYWN0JF9fU0VDUkVUX0lOVEVSMjtcblxuICAgIC8vIEZsb3cgZG9lcyBub3Qga25vdyBvZiBSZWFjdCBpbnRlcm5hbHMgKHJpZ2h0bHkgc28pLCBidXQgd2UgbmVlZCB0b1xuICAgIC8vIGVuc3VyZSBoZXJlIHRoYXQgdGhpcyBmdW5jdGlvbiBpc24ndCBjYWxsZWQgaW5zaWRlIHJlbmRlci5cbiAgICBSZW5kZXJEaXNwYXRjaGVyID0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgKF9SZWFjdCRfX1NFQ1JFVF9JTlRFUiA9IFJlYWN0Ll9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEKSA9PT0gbnVsbCB8fCBfUmVhY3QkX19TRUNSRVRfSU5URVIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfUmVhY3QkX19TRUNSRVRfSU5URVIyID0gX1JlYWN0JF9fU0VDUkVUX0lOVEVSLlJlYWN0Q3VycmVudERpc3BhdGNoZXIpID09PSBudWxsIHx8IF9SZWFjdCRfX1NFQ1JFVF9JTlRFUjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9SZWFjdCRfX1NFQ1JFVF9JTlRFUjIuY3VycmVudDtcbiAgfVxufVxuXG5mdW5jdGlvbiBsb2FkUXVlcnkoZW52aXJvbm1lbnQsIHByZWxvYWRhYmxlUmVxdWVzdCwgdmFyaWFibGVzLCBvcHRpb25zLCBlbnZpcm9ubWVudFByb3ZpZGVyT3B0aW9ucykge1xuICB2YXIgX1JlYWN0JF9fU0VDUkVUX0lOVEVSMywgX1JlYWN0JF9fU0VDUkVUX0lOVEVSNCwgX29wdGlvbnMkX19uYW1lRm9yV2FyLCBfb3B0aW9ucyRmZXRjaFBvbGljeTtcblxuICAvLyBUaGlzIGNvZGUgZW5zdXJlcyB0aGF0IHdlIGRvbid0IGNhbGwgbG9hZFF1ZXJ5IGR1cmluZyByZW5kZXIuXG4gIHZhciBDdXJyZW50RGlzcGF0Y2hlciA9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAoX1JlYWN0JF9fU0VDUkVUX0lOVEVSMyA9IFJlYWN0Ll9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEKSA9PT0gbnVsbCB8fCBfUmVhY3QkX19TRUNSRVRfSU5URVIzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX1JlYWN0JF9fU0VDUkVUX0lOVEVSNCA9IF9SZWFjdCRfX1NFQ1JFVF9JTlRFUjMuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcikgPT09IG51bGwgfHwgX1JlYWN0JF9fU0VDUkVUX0lOVEVSNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX1JlYWN0JF9fU0VDUkVUX0lOVEVSNC5jdXJyZW50O1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFJlbmRlckRpc3BhdGNoZXIgPT0gbnVsbCB8fCBDdXJyZW50RGlzcGF0Y2hlciAhPT0gUmVuZGVyRGlzcGF0Y2hlciwgJ1JlbGF5OiBgJXNgIHNob3VsZCBub3QgYmUgY2FsbGVkIGluc2lkZSBhIFJlYWN0IHJlbmRlciBmdW5jdGlvbi4nLCAoX29wdGlvbnMkX19uYW1lRm9yV2FyID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLl9fbmFtZUZvcldhcm5pbmcpICE9PSBudWxsICYmIF9vcHRpb25zJF9fbmFtZUZvcldhciAhPT0gdm9pZCAwID8gX29wdGlvbnMkX19uYW1lRm9yV2FyIDogJ2xvYWRRdWVyeScpIDogdm9pZCAwOyAvLyBFdmVyeSB0aW1lIHlvdSBjYWxsIGxvYWRRdWVyeSwgd2Ugd2lsbCBnZW5lcmF0ZSBhIG5ldyBmZXRjaEtleS5cbiAgLy8gVGhpcyB3aWxsIGVuc3VyZSB0aGF0IGV2ZXJ5IHF1ZXJ5IHJlZmVyZW5jZSB0aGF0IGlzIGNyZWF0ZWQgYW5kXG4gIC8vIHBhc3NlZCB0byB1c2VQcmVsb2FkZWRRdWVyeSBpcyBpbmRlcGVuZGVudGx5IGV2YWx1YXRlZCxcbiAgLy8gZXZlbiBpZiB0aGV5IGFyZSBmb3IgdGhlIHNhbWUgcXVlcnkvdmFyaWFibGVzLlxuICAvLyBTcGVjaWZpY2FsbHksIHdlIHdhbnQgdG8gYXZvaWQgYSBjYXNlIHdoZXJlIHdlIHRyeSB0byByZWZldGNoIGFcbiAgLy8gcXVlcnkgYnkgY2FsbGluZyBsb2FkUXVlcnkgYSBzZWNvbmQgdGltZSwgYW5kIGhhdmUgdGhlIFN1c3BlbnNlXG4gIC8vIGNhY2hlIGluIHVzZVByZWxvYWRlZFF1ZXJ5IHJldXNlIHRoZSBjYWNoZWQgcmVzdWx0IGluc3RlYWQgb2ZcbiAgLy8gcmUtZXZhbHVhdGluZyB0aGUgbmV3IHF1ZXJ5IHJlZiBhbmQgdHJpZ2dlcmluZyBhIHJlZmV0Y2ggaWZcbiAgLy8gbmVjZXNzYXJ5LlxuXG4gIGZldGNoS2V5Kys7XG4gIHZhciBmZXRjaFBvbGljeSA9IChfb3B0aW9ucyRmZXRjaFBvbGljeSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5mZXRjaFBvbGljeSkgIT09IG51bGwgJiYgX29wdGlvbnMkZmV0Y2hQb2xpY3kgIT09IHZvaWQgMCA/IF9vcHRpb25zJGZldGNoUG9saWN5IDogJ3N0b3JlLW9yLW5ldHdvcmsnO1xuICB2YXIgbmV0d29ya0NhY2hlQ29uZmlnID0gKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5uZXR3b3JrQ2FjaGVDb25maWcpLCB7fSwge1xuICAgIGZvcmNlOiB0cnVlXG4gIH0pOyAvLyBleGVjdXRlV2l0aE5ldHdvcmtTb3VyY2Ugd2lsbCByZXRhaW4gYW5kIGV4ZWN1dGUgYW4gb3BlcmF0aW9uXG4gIC8vIGFnYWluc3QgdGhlIFJlbGF5IHN0b3JlLCBnaXZlbiBhbiBPYnNlcnZhYmxlIHRoYXQgd291bGQgcHJvdmlkZVxuICAvLyB0aGUgbmV0d29yayBldmVudHMgZm9yIHRoZSBvcGVyYXRpb24uXG5cbiAgdmFyIHJldGFpblJlZmVyZW5jZTtcbiAgdmFyIGRpZEV4ZWN1dGVOZXR3b3JrU291cmNlID0gZmFsc2U7XG5cbiAgdmFyIGV4ZWN1dGVXaXRoTmV0d29ya1NvdXJjZSA9IGZ1bmN0aW9uIGV4ZWN1dGVXaXRoTmV0d29ya1NvdXJjZShvcGVyYXRpb24sIG5ldHdvcmtPYnNlcnZhYmxlKSB7XG4gICAgZGlkRXhlY3V0ZU5ldHdvcmtTb3VyY2UgPSB0cnVlO1xuICAgIHJldHVybiBlbnZpcm9ubWVudC5leGVjdXRlV2l0aFNvdXJjZSh7XG4gICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgIHNvdXJjZTogbmV0d29ya09ic2VydmFibGVcbiAgICB9KTtcbiAgfTsgLy8gTi5CLiBGb3IgbG9hZFF1ZXJ5LCB3ZSB1bmNvbnZlbnRpb25hbGx5IHdhbnQgdG8gcmV0dXJuIGFuIE9ic2VydmFibGVcbiAgLy8gdGhhdCBpc24ndCBsYXppbHkgZXhlY3V0ZWQsIG1lYW5pbmcgdGhhdCB3ZSBkb24ndCB3YW50IHRvIHdhaXRcbiAgLy8gdW50aWwgdGhlIHJldHVybmVkIE9ic2VydmFibGUgaXMgc3Vic2NyaWJlZCB0byB0byBhY3R1YWxseSBzdGFydFxuICAvLyBmZXRjaGluZyBhbmQgZXhlY3V0aW5nIGFuIG9wZXJhdGlvbjsgaS5lLiB3ZSB3YW50IHRvIGV4ZWN1dGUgdGhlXG4gIC8vIG9wZXJhdGlvbiBlYWdlcmx5LCB3aGVuIGxvYWRRdWVyeSBpcyBjYWxsZWQuXG4gIC8vIEZvciB0aGlzIHJlYXNvbiwgd2UgdXNlIGFuIGludGVybWVkaWF0ZSBleGVjdXRpb25TdWJqZWN0IHdoaWNoXG4gIC8vIGFsbG93cyB1cyB0byBjYXB0dXJlIHRoZSBldmVudHMgdGhhdCBvY2N1ciBkdXJpbmcgdGhlIGVhZ2VyIGV4ZWN1dGlvblxuICAvLyBvZiB0aGUgb3BlcmF0aW9uLCBhbmQgdGhlbiByZXBsYXkgdGhlbSB0byB0aGUgT2JzZXJ2YWJsZSB3ZVxuICAvLyB1bHRpbWF0ZWx5IHJldHVybi5cblxuXG4gIHZhciBleGVjdXRpb25TdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3QoKTtcbiAgdmFyIHJldHVybmVkT2JzZXJ2YWJsZSA9IE9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgcmV0dXJuIGV4ZWN1dGlvblN1YmplY3Quc3Vic2NyaWJlKHNpbmspO1xuICB9KTtcbiAgdmFyIHVuc3Vic2NyaWJlRnJvbU5ldHdvcmtSZXF1ZXN0O1xuICB2YXIgbmV0d29ya0Vycm9yID0gbnVsbDsgLy8gbWFrZU5ldHdvcmtSZXF1ZXN0IHdpbGwgaW1tZWRpYXRlbHkgc3RhcnQgYSByYXcgbmV0d29yayByZXF1ZXN0IGlmXG4gIC8vIG9uZSBpc24ndCBhbHJlYWR5IGluIGZsaWdodCBhbmQgcmV0dXJuIGFuIE9ic2VydmFibGUgdGhhdCB3aGVuXG4gIC8vIHN1YnNjcmliZWQgdG8gd2lsbCByZXBsYXkgdGhlIG5ldHdvcmsgZXZlbnRzIHRoYXQgaGF2ZSBvY2N1cmVkIHNvIGZhcixcbiAgLy8gYXMgd2VsbCBhcyBzdWJzZXF1ZW50IGV2ZW50cy5cblxuICB2YXIgZGlkTWFrZU5ldHdvcmtSZXF1ZXN0ID0gZmFsc2U7XG5cbiAgdmFyIG1ha2VOZXR3b3JrUmVxdWVzdCA9IGZ1bmN0aW9uIG1ha2VOZXR3b3JrUmVxdWVzdChwYXJhbXMpIHtcbiAgICAvLyBOLkIuIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHN5bmNocm9ub3VzbHkgb3Igbm90IGF0IGFsbFxuICAgIC8vIGRpZE1ha2VOZXR3b3JrUmVxdWVzdCBpcyBzYWZlIHRvIHJlbHkgb24gaW4gdGhlIHJldHVybmVkIHZhbHVlXG4gICAgLy8gRXZlbiBpZiB0aGUgcmVxdWVzdCBnZXRzIGRlZHVwZWQgYmVsb3csIHdlIHN0aWxsIHdhbid0IHRvIHJldHVybiBhblxuICAgIC8vIG9ic2VydmFibGUgdGhhdCBwcm92aWRlcyB0aGUgcmVwbGF5ZWQgbmV0d29yayBldmVudHMgZm9yIHRoZSBxdWVyeSxcbiAgICAvLyBzbyB3ZSBzZXQgdGhpcyB0byB0cnVlIGJlZm9yZSBkZWR1cGluZywgdG8gZ3VhcmFudGVlIHRoYXQgdGhlXG4gICAgLy8gYHNvdXJjZWAgb2JzZXJ2YWJsZSBpcyByZXR1cm5lZC5cbiAgICBkaWRNYWtlTmV0d29ya1JlcXVlc3QgPSB0cnVlO1xuICAgIHZhciBvYnNlcnZhYmxlO1xuICAgIHZhciBzdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3QoKTtcblxuICAgIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfTE9BRF9RVUVSWV9SRVFVRVNUX0RFRFVQSU5HID09PSB0cnVlKSB7XG4gICAgICAvLyBIZXJlLCB3ZSBhcmUgY2FsbGluZyBmZXRjaFF1ZXJ5RGVkdXBlZCBhdCB0aGUgbmV0d29yayBsYXllciBsZXZlbCxcbiAgICAgIC8vIHdoaWNoIGVuc3VyZXMgdGhhdCBvbmx5IGEgc2luZ2xlIG5ldHdvcmsgcmVxdWVzdCBpcyBhY3RpdmUgZm9yIGEgZ2l2ZW5cbiAgICAgIC8vIChlbnZpcm9ubWVudCwgaWRlbnRpZmllcikgcGFpci5cbiAgICAgIC8vIFNpbmNlIG5ldHdvcmsgcmVxdWVzdHMgY2FuIGJlIHN0YXJ0ZWQgL2JlZm9yZS8gd2UgaGF2ZSB0aGUgcXVlcnkgYXN0XG4gICAgICAvLyBuZWNlc3NhcnkgdG8gcHJvY2VzcyB0aGUgcmVzdWx0cywgd2UgbmVlZCB0byBkZWR1cGUgdGhlIHJhdyByZXF1ZXN0c1xuICAgICAgLy8gc2VwYXJhdGVseSBmcm9tIGRlZHVwaW5nIHRoZSBvcGVyYXRpb24gZXhlY3V0aW9uOyBzcGVjaWZpY2FsbHksXG4gICAgICAvLyBpZiBgbG9hZFF1ZXJ5YCBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMgYmVmb3JlIHRoZSBxdWVyeSBhc3QgaXMgYXZhaWxhYmxlLFxuICAgICAgLy8gd2Ugc3RpbGwgd2FudCB0aGUgbmV0d29yayByZXF1ZXN0IHRvIGJlIGRlZHVwZWQuXG4gICAgICAvLyAtIElmIGEgZHVwbGljYXRlIGFjdGl2ZSBuZXR3b3JrIHJlcXVlc3QgaXMgZm91bmQsIGl0IHdpbGwgcmV0dXJuIGFuXG4gICAgICAvLyBPYnNlcnZhYmxlIHRoYXQgcmVwbGF5cyB0aGUgZXZlbnRzIG9mIHRoZSBhbHJlYWR5IGFjdGl2ZSByZXF1ZXN0LlxuICAgICAgLy8gLSBJZiBubyBkdXBsaWNhdGUgYWN0aXZlIG5ldHdvcmsgcmVxdWVzdCBpcyBmb3VuZCwgaXQgd2lsbCBjYWxsIHRoZSBmZXRjaEZuXG4gICAgICAvLyB0byBzdGFydCB0aGUgcmVxdWVzdCwgYW5kIHJldHVybiBhbiBPYnNlcnZhYmxlIHRoYXQgd2lsbCByZXBsYXlcbiAgICAgIC8vIHRoZSBldmVudHMgZnJvbSB0aGUgbmV0d29yayByZXF1ZXN0LlxuICAgICAgLy8gV2UgcHJvdmlkZSBhbiBleHRyYSBrZXkgdG8gdGhlIGlkZW50aWZpZXIgdG8gZGlzdGluZ3Vpc2ggZGVkdXBpbmdcbiAgICAgIC8vIG9mIHJhdyBuZXR3b3JrIHJlcXVlc3RzIHZzIGRlZHVwaW5nIG9mIG9wZXJhdGlvbiBleGVjdXRpb25zLlxuICAgICAgdmFyIGlkZW50aWZpZXIgPSAncmF3LW5ldHdvcmstcmVxdWVzdC0nICsgZ2V0UmVxdWVzdElkZW50aWZpZXIocGFyYW1zLCB2YXJpYWJsZXMpO1xuICAgICAgb2JzZXJ2YWJsZSA9IGZldGNoUXVlcnlEZWR1cGVkKGVudmlyb25tZW50LCBpZGVudGlmaWVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXR3b3JrID0gZW52aXJvbm1lbnQuZ2V0TmV0d29yaygpO1xuICAgICAgICByZXR1cm4gbmV0d29yay5leGVjdXRlKHBhcmFtcywgdmFyaWFibGVzLCBuZXR3b3JrQ2FjaGVDb25maWcpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBuZXR3b3JrID0gZW52aXJvbm1lbnQuZ2V0TmV0d29yaygpO1xuICAgICAgb2JzZXJ2YWJsZSA9IG5ldHdvcmsuZXhlY3V0ZShwYXJhbXMsIHZhcmlhYmxlcywgbmV0d29ya0NhY2hlQ29uZmlnKTtcbiAgICB9XG5cbiAgICB2YXIgX29ic2VydmFibGUkc3Vic2NyaWJlID0gb2JzZXJ2YWJsZS5zdWJzY3JpYmUoe1xuICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKGVycikge1xuICAgICAgICBuZXR3b3JrRXJyb3IgPSBlcnI7XG4gICAgICAgIHN1YmplY3QuZXJyb3IoZXJyKTtcbiAgICAgIH0sXG4gICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KGRhdGEpIHtcbiAgICAgICAgc3ViamVjdC5uZXh0KGRhdGEpO1xuICAgICAgfSxcbiAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH0pLFxuICAgICAgICB1bnN1YnNjcmliZSA9IF9vYnNlcnZhYmxlJHN1YnNjcmliZS51bnN1YnNjcmliZTtcblxuICAgIHVuc3Vic2NyaWJlRnJvbU5ldHdvcmtSZXF1ZXN0ID0gdW5zdWJzY3JpYmU7XG4gICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICB2YXIgc3ViamVjdFN1YnNjcmlwdGlvbiA9IHN1YmplY3Quc3Vic2NyaWJlKHNpbmspO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3ViamVjdFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB1bnN1YnNjcmliZUZyb21OZXR3b3JrUmVxdWVzdCgpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgdW5zdWJzY3JpYmVGcm9tRXhlY3V0aW9uO1xuXG4gIHZhciBleGVjdXRlRGVkdXBlZCA9IGZ1bmN0aW9uIGV4ZWN1dGVEZWR1cGVkKG9wZXJhdGlvbiwgZmV0Y2hGbikge1xuICAgIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfTE9BRF9RVUVSWV9SRVFVRVNUX0RFRFVQSU5HID09PSB0cnVlKSB7XG4gICAgICAvLyBOLkIuIGF0IHRoaXMgcG9pbnQsIGlmIHdlJ3JlIGNhbGxpbmcgZXhlY3V0ZSB3aXRoIGEgcXVlcnkgYXN0IChPcGVyYXRpb25EZXNjcmlwdG9yKSxcbiAgICAgIC8vIHdlIGFyZSBndWFyYW50ZWVkIHRvIGhhdmUgc3RhcnRlZCBhIG5ldHdvcmsgcmVxdWVzdC4gV2Ugc2V0IHRoaXMgdG9cbiAgICAgIC8vIHRydWUgaGVyZSBhcyB3ZWxsIHNpbmNlIGBtYWtlTmV0d29ya1JlcXVlc3RgIG1pZ2h0IGdldCBza2lwcGVkIGluIHRoZSBjYXNlXG4gICAgICAvLyB3aGVyZSB0aGUgcXVlcnkgYXN0IGlzIGFscmVhZHkgYXZhaWxhYmxlIGFuZCB0aGUgcXVlcnkgZXhlY3V0aW9ucyBnZXQgZGVkdXBlZC5cbiAgICAgIC8vIEV2ZW4gaWYgdGhlIGV4ZWN1dGlvbiBnZXRzIGRlZHVwZWQgYmVsb3csIHdlIHN0aWxsIHdhbid0IHRvIHJldHVyblxuICAgICAgLy8gYW4gb2JzZXJ2YWJsZSB0aGF0IHByb3ZpZGVzIHRoZSByZXBsYXllZCBuZXR3b3JrIGV2ZW50cyBmb3IgdGhlIHF1ZXJ5LFxuICAgICAgLy8gc28gd2Ugc2V0IHRoaXMgdG8gdHJ1ZSBiZWZvcmUgZGVkdXBpbmcsIHRvIGd1YXJhbnRlZSB0aGF0IHRoZSBgc291cmNlYFxuICAgICAgLy8gb2JzZXJ2YWJsZSBpcyByZXR1cm5lZC5cbiAgICAgIGRpZE1ha2VOZXR3b3JrUmVxdWVzdCA9IHRydWU7XG4gICAgfSAvLyBIZXJlLCB3ZSBhcmUgY2FsbGluZyBmZXRjaFF1ZXJ5RGVkdXBlZCwgd2hpY2ggZW5zdXJlcyB0aGF0IG9ubHlcbiAgICAvLyBhIHNpbmdsZSBvcGVyYXRpb24gaXMgYWN0aXZlIGZvciBhIGdpdmVuIChlbnZpcm9ubWVudCwgaWRlbnRpZmllcikgcGFpcixcbiAgICAvLyBhbmQgYWxzbyB0cmFja3MgdGhlIGFjdGl2ZSBzdGF0ZSBvZiB0aGUgb3BlcmF0aW9uLCB3aGljaCBpcyBuZWNlc3NhcnlcbiAgICAvLyBmb3Igb3VyIFN1c3BlbnNlIGluZnJhIHRvIGxhdGVyIGJlIGFibGUgdG8gc3VzcGVuZCAob3Igbm90KSBvblxuICAgIC8vIGFjdGl2ZSBvcGVyYXRpb25zLiBFdmVuIHRob3VnaCB3ZSBhbHJlYWR5IGRlZHVwZSByYXcgbmV0d29yayByZXF1ZXN0cyxcbiAgICAvLyB3ZSBhbHNvIG5lZWQgdG8gZGVkdXBlIGFuZCBrZWVwIHRyYWNrIG9wZXJhdGlvbiBleGVjdXRpb24gZm9yIG91ciBTdXNwZW5zZVxuICAgIC8vIGluZnJhLCBhbmQgd2UgYWxzbyB3YW50IHRvIGF2b2lkIHByb2Nlc3NpbmcgcmVzcG9uc2VzIG1vcmUgdGhhbiBvbmNlLCBmb3JcbiAgICAvLyB0aGUgY2FzZXMgd2hlcmUgYGxvYWRRdWVyeWAgbWlnaHQgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGFmdGVyIHRoZSBxdWVyeSBhc3RcbiAgICAvLyBpcyBhdmFpbGFibGUuXG4gICAgLy8gLSBJZiBhIGR1cGxpY2F0ZSBhY3RpdmUgb3BlcmF0aW9uIGlzIGZvdW5kLCBpdCB3aWxsIHJldHVybiBhblxuICAgIC8vIE9ic2VydmFibGUgdGhhdCByZXBsYXlzIHRoZSBldmVudHMgb2YgdGhlIGFscmVhZHkgYWN0aXZlIG9wZXJhdGlvbi5cbiAgICAvLyAtIElmIG5vIGR1cGxpY2F0ZSBhY3RpdmUgb3BlcmF0aW9uIGlzIGZvdW5kLCBpdCB3aWxsIGNhbGwgdGhlIGZldGNoRm5cbiAgICAvLyB0byBleGVjdXRlIHRoZSBvcGVyYXRpb24sIGFuZCByZXR1cm4gYW4gT2JzZXJ2YWJsZSB0aGF0IHdpbGwgcHJvdmlkZVxuICAgIC8vIHRoZSBldmVudHMgZm9yIGV4ZWN1dGluZyB0aGUgb3BlcmF0aW9uLlxuXG5cbiAgICB2YXIgX2ZldGNoUXVlcnlEZWR1cGVkJHN1ID0gZmV0Y2hRdWVyeURlZHVwZWQoZW52aXJvbm1lbnQsIG9wZXJhdGlvbi5yZXF1ZXN0LmlkZW50aWZpZXIsIGZldGNoRm4pLnN1YnNjcmliZSh7XG4gICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoZXJyKSB7XG4gICAgICAgIGV4ZWN1dGlvblN1YmplY3QuZXJyb3IoZXJyKTtcbiAgICAgIH0sXG4gICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KGRhdGEpIHtcbiAgICAgICAgZXhlY3V0aW9uU3ViamVjdC5uZXh0KGRhdGEpO1xuICAgICAgfSxcbiAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgZXhlY3V0aW9uU3ViamVjdC5jb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdW5zdWJzY3JpYmVGcm9tRXhlY3V0aW9uID0gX2ZldGNoUXVlcnlEZWR1cGVkJHN1LnVuc3Vic2NyaWJlO1xuICB9O1xuXG4gIHZhciBjaGVja0F2YWlsYWJpbGl0eUFuZEV4ZWN1dGUgPSBmdW5jdGlvbiBjaGVja0F2YWlsYWJpbGl0eUFuZEV4ZWN1dGUoY29uY3JldGVSZXF1ZXN0KSB7XG4gICAgdmFyIG9wZXJhdGlvbiA9IGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IoY29uY3JldGVSZXF1ZXN0LCB2YXJpYWJsZXMsIG5ldHdvcmtDYWNoZUNvbmZpZyk7XG4gICAgcmV0YWluUmVmZXJlbmNlID0gZW52aXJvbm1lbnQucmV0YWluKG9wZXJhdGlvbik7XG5cbiAgICBpZiAoZmV0Y2hQb2xpY3kgPT09ICdzdG9yZS1vbmx5Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gTi5CLiBJZiB0aGUgZmV0Y2ggcG9saWN5IGFsbG93cyBmdWxmaWxsbWVudCBmcm9tIHRoZSBzdG9yZSBidXQgdGhlXG4gICAgLy8gZW52aXJvbm1lbnQgYWxyZWFkeSBoYXMgdGhlIGRhdGEgZm9yIHRoYXQgb3BlcmF0aW9uIGNhY2hlZCBpbiB0aGUgc3RvcmUsXG4gICAgLy8gdGhlbiB3ZSBkbyBub3RoaW5nLlxuXG5cbiAgICB2YXIgc2hvdWxkRmV0Y2ggPSBmZXRjaFBvbGljeSAhPT0gJ3N0b3JlLW9yLW5ldHdvcmsnIHx8IGVudmlyb25tZW50LmNoZWNrKG9wZXJhdGlvbikuc3RhdHVzICE9PSAnYXZhaWxhYmxlJztcblxuICAgIGlmIChzaG91bGRGZXRjaCkge1xuICAgICAgZXhlY3V0ZURlZHVwZWQob3BlcmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIE4uQi4gU2luY2Ugd2UgaGF2ZSB0aGUgb3BlcmF0aW9uIHN5bmNocm9ub3VzbHkgYXZhaWxhYmxlIGhlcmUsXG4gICAgICAgIC8vIHdlIGNhbiBpbW1lZGlhdGVseSBmZXRjaCBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uLlxuICAgICAgICB2YXIgbmV0d29ya09ic2VydmFibGUgPSBtYWtlTmV0d29ya1JlcXVlc3QoY29uY3JldGVSZXF1ZXN0LnBhcmFtcyk7XG4gICAgICAgIHZhciBleGVjdXRlT2JzZXJ2YWJsZSA9IGV4ZWN1dGVXaXRoTmV0d29ya1NvdXJjZShvcGVyYXRpb24sIG5ldHdvcmtPYnNlcnZhYmxlKTtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVPYnNlcnZhYmxlO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBwYXJhbXM7XG4gIHZhciBjYW5jZWxPbkxvYWRDYWxsYmFjaztcbiAgdmFyIHF1ZXJ5SWQ7XG5cbiAgaWYgKHByZWxvYWRhYmxlUmVxdWVzdC5raW5kID09PSAnUHJlbG9hZGFibGVDb25jcmV0ZVJlcXVlc3QnKSB7XG4gICAgdmFyIHByZWxvYWRhYmxlQ29uY3JldGVSZXF1ZXN0ID0gcHJlbG9hZGFibGVSZXF1ZXN0O1xuICAgIHBhcmFtcyA9IHByZWxvYWRhYmxlQ29uY3JldGVSZXF1ZXN0LnBhcmFtcztcbiAgICB2YXIgX3BhcmFtcyA9IHBhcmFtcztcbiAgICBxdWVyeUlkID0gX3BhcmFtcy5pZDtcbiAgICAhKHF1ZXJ5SWQgIT09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IGBsb2FkUXVlcnlgIHJlcXVpcmVzIHRoYXQgcHJlbG9hZGFibGUgcXVlcnkgYCVzYCBoYXMgYSBwZXJzaXN0ZWQgcXVlcnkgaWQnLCBwYXJhbXMubmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgdmFyIF9tb2R1bGUgPSBQcmVsb2FkYWJsZVF1ZXJ5UmVnaXN0cnkuZ2V0KHF1ZXJ5SWQpO1xuXG4gICAgaWYgKF9tb2R1bGUgIT0gbnVsbCkge1xuICAgICAgY2hlY2tBdmFpbGFiaWxpdHlBbmRFeGVjdXRlKF9tb2R1bGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgbW9kdWxlIGlzbid0IHN5bmNocm9ub3VzbHkgYXZhaWxhYmxlLCB3ZSBsYXVuY2ggdGhlXG4gICAgICAvLyBuZXR3b3JrIHJlcXVlc3QgaW1tZWRpYXRlbHkgaWYgdGhlIGZldGNoUG9saWN5IG1pZ2h0IHByb2R1Y2VcbiAgICAgIC8vIGEgbmV0d29yayBmZXRjaCwgcmVnYXJkbGVzcyBvZiB0aGUgc3RhdGUgb2YgdGhlIHN0b3JlIGNhY2hlLiBXZVxuICAgICAgLy8gZG8gdGhpcyBiZWNhdXNlIHdlIGNhbid0IGNoZWNrIGlmIGEgcXVlcnkgaXMgY2FjaGVkIHdpdGhvdXQgdGhlXG4gICAgICAvLyBhc3QsIGFuZCB3ZSBrbm93IHRoYXQgaWYgd2UgZG9uJ3QgaGF2ZSB0aGUgcXVlcnkgYXN0XG4gICAgICAvLyBhdmFpbGFibGUsIHRoZW4gdGhpcyBxdWVyeSBjb3VsZCd2ZSBuZXZlciBiZWVuIHdyaXR0ZW4gdG8gdGhlXG4gICAgICAvLyBzdG9yZSBpbiB0aGUgZmlyc3QgcGxhY2UsIHNvIGl0IGNvdWxkbid0IGhhdmUgYmVlbiBjYWNoZWQuXG4gICAgICB2YXIgbmV0d29ya09ic2VydmFibGUgPSBmZXRjaFBvbGljeSA9PT0gJ3N0b3JlLW9ubHknID8gbnVsbCA6IG1ha2VOZXR3b3JrUmVxdWVzdChwYXJhbXMpO1xuXG4gICAgICB2YXIgX1ByZWxvYWRhYmxlUXVlcnlSZWdpID0gUHJlbG9hZGFibGVRdWVyeVJlZ2lzdHJ5Lm9uTG9hZCggLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICAgIHF1ZXJ5SWQsIGZ1bmN0aW9uIChwcmVsb2FkZWRNb2R1bGUpIHtcbiAgICAgICAgY2FuY2VsT25Mb2FkQ2FsbGJhY2soKTtcbiAgICAgICAgdmFyIG9wZXJhdGlvbiA9IGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IocHJlbG9hZGVkTW9kdWxlLCB2YXJpYWJsZXMsIG5ldHdvcmtDYWNoZUNvbmZpZyk7XG4gICAgICAgIHJldGFpblJlZmVyZW5jZSA9IGVudmlyb25tZW50LnJldGFpbihvcGVyYXRpb24pO1xuXG4gICAgICAgIGlmIChuZXR3b3JrT2JzZXJ2YWJsZSAhPSBudWxsKSB7XG4gICAgICAgICAgZXhlY3V0ZURlZHVwZWQob3BlcmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhlY3V0ZVdpdGhOZXR3b3JrU291cmNlKG9wZXJhdGlvbiwgbmV0d29ya09ic2VydmFibGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgY2FuY2VsT25Mb2FkQ2FsbGJhY2sgPSBfUHJlbG9hZGFibGVRdWVyeVJlZ2kuZGlzcG9zZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGdyYXBoUWxUYWdnZWROb2RlID0gcHJlbG9hZGFibGVSZXF1ZXN0O1xuICAgIHZhciByZXF1ZXN0ID0gZ2V0UmVxdWVzdChncmFwaFFsVGFnZ2VkTm9kZSk7XG4gICAgcGFyYW1zID0gcmVxdWVzdC5wYXJhbXM7XG4gICAgcXVlcnlJZCA9IHBhcmFtcy5jYWNoZUlEICE9IG51bGwgPyBwYXJhbXMuY2FjaGVJRCA6IHBhcmFtcy5pZDtcbiAgICBjaGVja0F2YWlsYWJpbGl0eUFuZEV4ZWN1dGUocmVxdWVzdCk7XG4gIH1cblxuICB2YXIgaXNEaXNwb3NlZCA9IGZhbHNlO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6ICdQcmVsb2FkZWRRdWVyeScsXG4gICAgZW52aXJvbm1lbnQ6IGVudmlyb25tZW50LFxuICAgIGVudmlyb25tZW50UHJvdmlkZXJPcHRpb25zOiBlbnZpcm9ubWVudFByb3ZpZGVyT3B0aW9ucyxcbiAgICBkaXNwb3NlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgaWYgKGlzRGlzcG9zZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlkRXhlY3V0ZU5ldHdvcmtTb3VyY2UpIHtcbiAgICAgICAgdW5zdWJzY3JpYmVGcm9tRXhlY3V0aW9uICYmIHVuc3Vic2NyaWJlRnJvbUV4ZWN1dGlvbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdW5zdWJzY3JpYmVGcm9tTmV0d29ya1JlcXVlc3QgJiYgdW5zdWJzY3JpYmVGcm9tTmV0d29ya1JlcXVlc3QoKTtcbiAgICAgIH1cblxuICAgICAgcmV0YWluUmVmZXJlbmNlICYmIHJldGFpblJlZmVyZW5jZS5kaXNwb3NlKCk7XG4gICAgICBjYW5jZWxPbkxvYWRDYWxsYmFjayAmJiBjYW5jZWxPbkxvYWRDYWxsYmFjaygpO1xuICAgICAgaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgfSxcbiAgICBmZXRjaEtleTogZmV0Y2hLZXksXG4gICAgaWQ6IHF1ZXJ5SWQsXG5cbiAgICAvLyAkRmxvd0ZpeE1lW3Vuc2FmZS1nZXR0ZXJzLXNldHRlcnNdIC0gdGhpcyBoYXMgbm8gc2lkZSBlZmZlY3RzXG4gICAgZ2V0IGlzRGlzcG9zZWQoKSB7XG4gICAgICByZXR1cm4gaXNEaXNwb3NlZDtcbiAgICB9LFxuXG4gICAgLy8gJEZsb3dGaXhNZVt1bnNhZmUtZ2V0dGVycy1zZXR0ZXJzXSAtIHRoaXMgaGFzIG5vIHNpZGUgZWZmZWN0c1xuICAgIGdldCBuZXR3b3JrRXJyb3IoKSB7XG4gICAgICByZXR1cm4gbmV0d29ya0Vycm9yO1xuICAgIH0sXG5cbiAgICBuYW1lOiBwYXJhbXMubmFtZSxcbiAgICBuZXR3b3JrQ2FjaGVDb25maWc6IG5ldHdvcmtDYWNoZUNvbmZpZyxcbiAgICBmZXRjaFBvbGljeTogZmV0Y2hQb2xpY3ksXG4gICAgc291cmNlOiBkaWRNYWtlTmV0d29ya1JlcXVlc3QgPyByZXR1cm5lZE9ic2VydmFibGUgOiB1bmRlZmluZWQsXG4gICAgdmFyaWFibGVzOiB2YXJpYWJsZXNcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvYWRRdWVyeTogbG9hZFF1ZXJ5LFxuICB1c2VUcmFja0xvYWRRdWVyeUluUmVuZGVyOiB1c2VUcmFja0xvYWRRdWVyeUluUmVuZGVyXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJcIikpO1xuXG52YXIgbG9hZEVudHJ5UG9pbnQgPSByZXF1aXJlKCcuL2xvYWRFbnRyeVBvaW50Jyk7XG5cbnZhciB1c2VJc01vdW50ZWRSZWYgPSByZXF1aXJlKCcuL3VzZUlzTW91bnRlZFJlZicpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2xvYWRRdWVyeScpLFxuICAgIHVzZVRyYWNrTG9hZFF1ZXJ5SW5SZW5kZXIgPSBfcmVxdWlyZS51c2VUcmFja0xvYWRRdWVyeUluUmVuZGVyO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICB1c2VDYWxsYmFjayA9IF9yZXF1aXJlMi51c2VDYWxsYmFjayxcbiAgICB1c2VFZmZlY3QgPSBfcmVxdWlyZTIudXNlRWZmZWN0LFxuICAgIHVzZVJlZiA9IF9yZXF1aXJlMi51c2VSZWYsXG4gICAgdXNlU3RhdGUgPSBfcmVxdWlyZTIudXNlU3RhdGU7XG5cbnZhciBpbml0aWFsTnVsbEVudHJ5UG9pbnRSZWZlcmVuY2VTdGF0ZSA9IHtcbiAga2luZDogJ051bGxFbnRyeVBvaW50UmVmZXJlbmNlJ1xufTtcblxuZnVuY3Rpb24gdXNlTG9hZEVudHJ5UG9pbnQoZW52aXJvbm1lbnRQcm92aWRlciwgZW50cnlQb2ludCwgb3B0aW9ucykge1xuICB2YXIgX29wdGlvbnMkVEVTVF9PTkxZX19pLCBfb3B0aW9ucyRURVNUX09OTFlfX2kyLCBfb3B0aW9ucyRURVNUX09OTFlfX2kzLCBfb3B0aW9ucyRURVNUX09OTFlfX2k0O1xuXG4gIC8qKlxuICAgKiBXZSB3YW50IHRvIGFsd2F5cyBjYWxsIGBlbnRyeVBvaW50UmVmZXJlbmNlLmRpc3Bvc2UoKWAgZm9yIGV2ZXJ5IGNhbGwgdG9cbiAgICogYHNldEVudHJ5UG9pbnRSZWZlcmVuY2UobG9hZEVudHJ5UG9pbnQoLi4uKSlgIHNvIHRoYXQgbm8gbGVha3Mgb2YgZGF0YSBpbiBSZWxheVxuICAgKiBzdG9yZXMgd2lsbCBvY2N1ci5cbiAgICpcbiAgICogSG93ZXZlciwgYSBjYWxsIHRvIGBzZXRTdGF0ZShuZXdTdGF0ZSlgIGlzIG5vdCBhbHdheXMgZm9sbG93ZWQgYnkgYSBjb21taXQgd2hlcmVcbiAgICogdGhpcyB2YWx1ZSBpcyByZWZsZWN0ZWQgaW4gdGhlIHN0YXRlLiBUaHVzLCB3ZSBjYW5ub3QgcmVsaWFibHkgY2xlYW4gdXAgZWFjaCByZWZcbiAgICogd2l0aCBgdXNlRWZmZWN0KCgpID0+ICgpID0+IGVudHJ5UG9pbnRSZWZlcmVuY2UuZGlzcG9zZSgpLCBbZW50cnlQb2ludFJlZmVyZW5jZV0pYC5cbiAgICpcbiAgICogSW5zdGVhZCwgd2Uga2VlcCB0cmFjayBvZiBlYWNoIGNhbGwgdG8gYGxvYWRFbnRyeVBvaW50YCBpbiBhIHJlZi5cbiAgICogUmVseWluZyBvbiB0aGUgZmFjdCB0aGF0IGlmIGEgc3RhdGUgY2hhbmdlIGNvbW1pdHMsIG5vIHN0YXRlIGNoYW5nZXMgdGhhdCB3ZXJlXG4gICAqIGluaXRpYXRlZCBwcmlvciB0byB0aGUgY3VycmVudGx5IGNvbW1pdHRpbmcgc3RhdGUgY2hhbmdlIHdpbGwgZXZlciBzdWJzZXF1ZW50bHlcbiAgICogY29tbWl0LCB3ZSBjYW4gc2FmZWx5IGRpc3Bvc2Ugb2YgYWxsIHByZWxvYWRlZCBlbnRyeSBwb2ludCByZWZlcmVuY2VzXG4gICAqIGFzc29jaWF0ZWQgd2l0aCBzdGF0ZSBjaGFuZ2VzIGluaXRpYXRlZCBwcmlvciB0byB0aGUgY3VycmVudGx5IGNvbW1pdHRpbmcgc3RhdGVcbiAgICogY2hhbmdlLlxuICAgKlxuICAgKiBGaW5hbGx5LCB3aGVuIHRoZSBob29rIHVubW91bnRzLCB3ZSBhbHNvIGRpc3Bvc2Ugb2YgYWxsIHJlbWFpbmluZyB1bmNvbW1pdHRlZFxuICAgKiBlbnRyeSBwb2ludCByZWZlcmVuY2VzLlxuICAgKi9cbiAgdXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlcigpO1xuICB2YXIgaW5pdGlhbEVudHJ5UG9pbnRSZWZlcmVuY2VJbnRlcm5hbCA9IChfb3B0aW9ucyRURVNUX09OTFlfX2kgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRURVNUX09OTFlfX2kyID0gb3B0aW9ucy5URVNUX09OTFlfX2luaXRpYWxFbnRyeVBvaW50RGF0YSkgPT09IG51bGwgfHwgX29wdGlvbnMkVEVTVF9PTkxZX19pMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkVEVTVF9PTkxZX19pMi5lbnRyeVBvaW50UmVmZXJlbmNlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRURVNUX09OTFlfX2kgIT09IHZvaWQgMCA/IF9vcHRpb25zJFRFU1RfT05MWV9faSA6IGluaXRpYWxOdWxsRW50cnlQb2ludFJlZmVyZW5jZVN0YXRlO1xuICB2YXIgaW5pdGlhbEVudHJ5UG9pbnRQYXJhbXNJbnRlcm5hbCA9IChfb3B0aW9ucyRURVNUX09OTFlfX2kzID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkVEVTVF9PTkxZX19pNCA9IG9wdGlvbnMuVEVTVF9PTkxZX19pbml0aWFsRW50cnlQb2ludERhdGEpID09PSBudWxsIHx8IF9vcHRpb25zJFRFU1RfT05MWV9faTQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJFRFU1RfT05MWV9faTQuZW50cnlQb2ludFBhcmFtcykgIT09IG51bGwgJiYgX29wdGlvbnMkVEVTVF9PTkxZX19pMyAhPT0gdm9pZCAwID8gX29wdGlvbnMkVEVTVF9PTkxZX19pMyA6IG51bGw7XG4gIHZhciBpc01vdW50ZWRSZWYgPSB1c2VJc01vdW50ZWRSZWYoKTtcbiAgdmFyIHVuZGlzcG9zZWRFbnRyeVBvaW50UmVmZXJlbmNlc1JlZiA9IHVzZVJlZihuZXcgU2V0KFtpbml0aWFsRW50cnlQb2ludFJlZmVyZW5jZUludGVybmFsXSkpO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShpbml0aWFsRW50cnlQb2ludFJlZmVyZW5jZUludGVybmFsKSxcbiAgICAgIGVudHJ5UG9pbnRSZWZlcmVuY2UgPSBfdXNlU3RhdGVbMF0sXG4gICAgICBzZXRFbnRyeVBvaW50UmVmZXJlbmNlID0gX3VzZVN0YXRlWzFdO1xuXG4gIHZhciBfdXNlU3RhdGUyID0gdXNlU3RhdGUoaW5pdGlhbEVudHJ5UG9pbnRQYXJhbXNJbnRlcm5hbCksXG4gICAgICBlbnRyeVBvaW50UGFyYW1zID0gX3VzZVN0YXRlMlswXSxcbiAgICAgIHNldEVudHJ5UG9pbnRQYXJhbXMgPSBfdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBkaXNwb3NlRW50cnlQb2ludCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgIHZhciBudWxsRW50cnlQb2ludFJlZmVyZW5jZSA9IHtcbiAgICAgICAga2luZDogJ051bGxFbnRyeVBvaW50UmVmZXJlbmNlJ1xuICAgICAgfTtcbiAgICAgIHVuZGlzcG9zZWRFbnRyeVBvaW50UmVmZXJlbmNlc1JlZi5jdXJyZW50LmFkZChudWxsRW50cnlQb2ludFJlZmVyZW5jZSk7XG4gICAgICBzZXRFbnRyeVBvaW50UmVmZXJlbmNlKG51bGxFbnRyeVBvaW50UmVmZXJlbmNlKTtcbiAgICB9XG4gIH0sIFtzZXRFbnRyeVBvaW50UmVmZXJlbmNlLCBpc01vdW50ZWRSZWZdKTtcbiAgdmFyIGVudHJ5UG9pbnRMb2FkZXJDYWxsYmFjayA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgIHZhciB1cGRhdGVkRW50cnlQb2ludFJlZmVyZW5jZSA9IGxvYWRFbnRyeVBvaW50KGVudmlyb25tZW50UHJvdmlkZXIsIGVudHJ5UG9pbnQsIHBhcmFtcyk7XG4gICAgICB1bmRpc3Bvc2VkRW50cnlQb2ludFJlZmVyZW5jZXNSZWYuY3VycmVudC5hZGQodXBkYXRlZEVudHJ5UG9pbnRSZWZlcmVuY2UpO1xuICAgICAgc2V0RW50cnlQb2ludFJlZmVyZW5jZSh1cGRhdGVkRW50cnlQb2ludFJlZmVyZW5jZSk7XG4gICAgICBzZXRFbnRyeVBvaW50UGFyYW1zKHBhcmFtcyk7XG4gICAgfVxuICB9LCBbZW52aXJvbm1lbnRQcm92aWRlciwgZW50cnlQb2ludCwgc2V0RW50cnlQb2ludFJlZmVyZW5jZSwgaXNNb3VudGVkUmVmXSk7XG4gIHZhciBtYXliZUhpZGRlbk9yRmFzdFJlZnJlc2ggPSB1c2VSZWYoZmFsc2UpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBBdHRlbXB0IHRvIGRldGVjdCBpZiB0aGUgY29tcG9uZW50IHdhc1xuICAgICAgLy8gaGlkZGVuIChieSBPZmZzY3JlZW4gQVBJKSwgb3IgZmFzdCByZWZyZXNoIG9jY3VyZWQ7XG4gICAgICAvLyBPbmx5IGluIHRoZXNlIHNpdHVhdGlvbnMgd291bGQgdGhlIGVmZmVjdCBjbGVhbnVwXG4gICAgICAvLyBmb3IgXCJ1bm1vdW50aW5nXCIgcnVuIG11bHRpcGxlIHRpbWVzLCBzbyBpZlxuICAgICAgLy8gd2UgYXJlIGV2ZXIgYWJsZSB0byByZWFkIHRoaXMgcmVmIHdpdGggYSB2YWx1ZVxuICAgICAgLy8gb2YgdHJ1ZSwgaXQgbWVhbnMgdGhhdCBvbmUgb2YgdGhlc2UgY2FzZXNcbiAgICAgIC8vIGhhcyBoYXBwZW5lZC5cbiAgICAgIG1heWJlSGlkZGVuT3JGYXN0UmVmcmVzaC5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG1heWJlSGlkZGVuT3JGYXN0UmVmcmVzaC5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICAvLyBUaGlzIGJsb2NrIG9ubHkgcnVucyBpZiB0aGUgY29tcG9uZW50IGhhcyBwcmV2aW91c2x5IFwidW5tb3VudGVkXCJcbiAgICAgIC8vIGR1ZSB0byBpdCBiZWluZyBoaWRkZW4gYnkgdGhlIE9mZnNjcmVlbiBBUEksIG9yIGR1cmluZyBmYXN0IHJlZnJlc2guXG4gICAgICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgY3VycmVudCBlbnRyeVBvaW50UmVmZXJlbmNlIHdpbGwgaGF2ZSBiZWVuIGRpc3Bvc2VkXG4gICAgICAvLyBieSB0aGUgcHJldmlvdXMgY2xlYW51cCwgc28gaW5zdGVhZCBvZiBhdHRlbXB0aW5nIHRvXG4gICAgICAvLyBkbyBvdXIgcmVndWxhciBjb21taXQgc2V0dXAsIHdoaWNoIHdvdWxkIGluY29ycmVjdGx5IGxlYXZlIG91clxuICAgICAgLy8gY3VycmVudCBlbnRyeVBvaW50UmVmZXJlbmNlIGRpc3Bvc2VkLCB3ZSBuZWVkIHRvIGxvYWQgdGhlIGVudHJ5UG9pbnQgYWdhaW5cbiAgICAgIC8vIGFuZCBmb3JjZSBhIHJlLXJlbmRlciBieSBjYWxsaW5nIGVudHJ5UG9pbnRMb2FkZXJDYWxsYmFjayBhZ2FpbixcbiAgICAgIC8vIHNvIHRoYXQgdGhlIGVudHJ5UG9pbnRSZWZlcmVuY2UncyBxdWVyaWVzIGFyZSBjb3JyZWN0bHkgcmUtcmV0YWluZWQsIGFuZFxuICAgICAgLy8gcG90ZW50aWFsbHkgcmVmZXRjaGVkIGlmIG5lY2Vzc2FyeS5cbiAgICAgIG1heWJlSGlkZGVuT3JGYXN0UmVmcmVzaC5jdXJyZW50ID0gZmFsc2U7XG5cbiAgICAgIGlmIChlbnRyeVBvaW50UmVmZXJlbmNlLmtpbmQgIT09ICdOdWxsRW50cnlQb2ludFJlZmVyZW5jZScgJiYgZW50cnlQb2ludFBhcmFtcyAhPSBudWxsKSB7XG4gICAgICAgIGVudHJ5UG9pbnRMb2FkZXJDYWxsYmFjayhlbnRyeVBvaW50UGFyYW1zKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gV2hlbiBhIG5ldyBlbnRyeVBvaW50UmVmZXJlbmNlIGlzIGNvbW1pdHRlZCwgd2UgaXRlcmF0ZSBvdmVyIGFsbFxuICAgIC8vIGVudHJ5cG9pbnQgcmVmcyBpbiB1bmRpc3Bvc2VkRW50cnlQb2ludFJlZmVyZW5jZXMgYW5kIGRpc3Bvc2UgYWxsIG9mXG4gICAgLy8gdGhlIHJlZnMgdGhhdCBhcmVuJ3QgdGhlIGN1cnJlbnRseSBjb21taXR0ZWQgb25lLiBUaGlzIGVuc3VyZXNcbiAgICAvLyB0aGF0IHdlIGRvbid0IGxlYXZlIGFueSBkYW5nbGluZyBlbnRyeXBvaW50IHJlZmVyZW5jZXMgZm9yIHRoZVxuICAgIC8vIGNhc2UgdGhhdCBsb2FkRW50cnlQb2ludCBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMgYmVmb3JlIGNvbW1pdDsgd2hlblxuICAgIC8vIHRoaXMgaGFwcGVucywgbXVsdGlwbGUgc3RhdGUgdXBkYXRlcyB3aWxsIGJlIHNjaGVkdWxlZCwgYnV0IG9ubHkgb25lXG4gICAgLy8gd2lsbCBjb21taXQsIG1lYW5pbmcgdGhhdCB3ZSBuZWVkIHRvIGtlZXAgdHJhY2sgb2YgYW5kIGRpc3Bvc2UgYW55XG4gICAgLy8gcXVlcnkgcmVmZXJlbmNlcyB0aGF0IGRvbid0IGVuZCB1cCBjb21taXR0aW5nLlxuICAgIC8vIC0gV2UgYXJlIHJlbHlpbmcgb24gdGhlIGZhY3QgdGhhdCBzZXRzIGl0ZXJhdGUgaW4gaW5zZXJ0aW9uIG9yZGVyLCBhbmQgd2VcbiAgICAvLyBjYW4gcmVtb3ZlIGl0ZW1zIGZyb20gYSBzZXQgYXMgd2UgaXRlcmF0ZSBvdmVyIGl0IChpLmUuIG5vIGl0ZXJhdG9yXG4gICAgLy8gaW52YWxpZGF0aW9uIGlzc3Vlcy4pIFRodXMsIGl0IGlzIHNhZmUgdG8gbG9vcCB0aHJvdWdoXG4gICAgLy8gdW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2VzIHVudGlsIHdlIGZpbmQgZW50cnlQb2ludFJlZmVyZW5jZSwgYW5kXG4gICAgLy8gcmVtb3ZlIGFuZCBkaXNwb3NlIGFsbCBwcmV2aW91cyByZWZlcmVuY2VzLlxuICAgIC8vIC0gV2UgYXJlIGd1YXJhbnRlZWQgdG8gZmluZCBlbnRyeVBvaW50UmVmZXJlbmNlIGluIHRoZSBzZXQsIGJlY2F1c2UgaWYgYVxuICAgIC8vIHN0YXRlIGNoYW5nZSByZXN1bHRzIGluIGEgY29tbWl0LCBubyBzdGF0ZSBjaGFuZ2VzIGluaXRpYXRlZCBwcmlvciB0byB0aGF0XG4gICAgLy8gb25lIHdpbGwgYmUgY29tbWl0dGVkLCBhbmQgd2UgYXJlIGRpc3Bvc2luZyBhbmQgcmVtb3ZpbmcgcmVmZXJlbmNlc1xuICAgIC8vIGFzc29jaWF0ZWQgd2l0aCBjb21taXRzIHRoYXQgd2VyZSBpbml0aWF0ZWQgcHJpb3IgdG8gdGhlIGN1cnJlbnRseVxuICAgIC8vIGNvbW1pdHRpbmcgc3RhdGUgY2hhbmdlLiAoQSB1c2VFZmZlY3QgY2FsbGJhY2sgaXMgY2FsbGVkIGR1cmluZyB0aGUgY29tbWl0XG4gICAgLy8gcGhhc2UuKVxuXG5cbiAgICB2YXIgdW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2VzID0gdW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2VzUmVmLmN1cnJlbnQ7XG5cbiAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgIHZhciBfaXRlcmF0b3IgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkodW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2VzKSxcbiAgICAgICAgICBfc3RlcDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgdW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2UgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgIGlmICh1bmRpc3Bvc2VkRW50cnlQb2ludFJlZmVyZW5jZSA9PT0gZW50cnlQb2ludFJlZmVyZW5jZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2VzW1wiZGVsZXRlXCJdKHVuZGlzcG9zZWRFbnRyeVBvaW50UmVmZXJlbmNlKTtcblxuICAgICAgICAgIGlmICh1bmRpc3Bvc2VkRW50cnlQb2ludFJlZmVyZW5jZS5raW5kICE9PSAnTnVsbEVudHJ5UG9pbnRSZWZlcmVuY2UnKSB7XG4gICAgICAgICAgICB1bmRpc3Bvc2VkRW50cnlQb2ludFJlZmVyZW5jZS5kaXNwb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbZW50cnlQb2ludFJlZmVyZW5jZSwgZW50cnlQb2ludFBhcmFtcywgZW50cnlQb2ludExvYWRlckNhbGxiYWNrLCBpc01vdW50ZWRSZWZdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZGlzcG9zZUFsbFJlbWFpbmluZ0VudHJ5UG9pbnRSZWZlcmVuY2VzKCkge1xuICAgICAgLy8gdW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2VzLmN1cnJlbnQgaXMgbmV2ZXIgcmVhc3NpZ25lZFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgICAgdmFyIF9pdGVyYXRvcjIgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkodW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2VzUmVmLmN1cnJlbnQpLFxuICAgICAgICAgIF9zdGVwMjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgdW5oYW5kbGVkU3RhdGVDaGFuZ2UgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgICBpZiAodW5oYW5kbGVkU3RhdGVDaGFuZ2Uua2luZCAhPT0gJ051bGxFbnRyeVBvaW50UmVmZXJlbmNlJykge1xuICAgICAgICAgICAgdW5oYW5kbGVkU3RhdGVDaGFuZ2UuZGlzcG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yMi5mKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gW2VudHJ5UG9pbnRSZWZlcmVuY2Uua2luZCA9PT0gJ051bGxFbnRyeVBvaW50UmVmZXJlbmNlJyA/IG51bGwgOiBlbnRyeVBvaW50UmVmZXJlbmNlLCBlbnRyeVBvaW50TG9hZGVyQ2FsbGJhY2ssIGRpc3Bvc2VFbnRyeVBvaW50XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VMb2FkRW50cnlQb2ludDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdXNlQ2FsbGJhY2sgPSBfcmVxdWlyZS51c2VDYWxsYmFjayxcbiAgICB1c2VFZmZlY3QgPSBfcmVxdWlyZS51c2VFZmZlY3QsXG4gICAgdXNlUmVmID0gX3JlcXVpcmUudXNlUmVmO1xuXG4vKipcbiAqIFRoaXMgaG9vayByZXR1cm5zIGEgbXV0YWJsZSBSZWFjdCByZWYgdGhhdCBob2xkcyB0aGUgdmFsdWUgb2Ygd2hldGhlciBhXG4gKiBmZXRjaCByZXF1ZXN0IGlzIGluIGZsaWdodC4gVGhlIHJlYXNvbiB0aGlzIGlzIGEgbXV0YWJsZSByZWYgaW5zdGVhZCBvZlxuICogc3RhdGUgaXMgYmVjYXVzZSB3ZSBkb24ndCBhY3R1YWxseSB3YW50IHRvIHRyaWdnZXIgYW4gdXBkYXRlIHdoZW4gdGhpc1xuICogY2hhbmdlcywgYnV0IGluc3RlYWQgc3luY2hyb25vdXNseSBrZWVwIHRyYWNrIG9mIHdoZXRoZXIgdGhlIG5ldHdvcmsgcmVxdWVzdFxuICogaXMgaW4gZmxpZ2h0LCBmb3IgZXhhbXBsZSBpbiBvcmRlciB0byBiYWlsIG91dCBvZiBhIHJlcXVlc3QgaWYgb25lIGlzXG4gKiBhbHJlYWR5IGluIGZsaWdodC4gSWYgdGhpcyB3YXMgc3RhdGUsIGR1ZSB0byB0aGUgbmF0dXJlIG9mIGNvbmN1cnJlbnRcbiAqIHVwZGF0ZXMsIHRoaXMgdmFsdWUgd291bGRuJ3QgYmUgaW4gc3luYyB3aXRoIHdoZW4gdGhlIHJlcXVlc3QgaXMgYWN0dWFsbHlcbiAqIGluIGZsaWdodC5cbiAqIFRoZSBhZGRpdGlvbmFsIGZ1bmN0aW9ucyByZXR1cm5lZCBieSB0aGlzIEhvb2sgY2FuIGJlIHVzZWQgdG8gbXV0YXRlXG4gKiB0aGUgcmVmLlxuICovXG5mdW5jdGlvbiB1c2VGZXRjaFRyYWNraW5nUmVmKCkge1xuICB2YXIgc3Vic2NyaXB0aW9uUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgaXNGZXRjaGluZ1JlZiA9IHVzZVJlZihmYWxzZSk7XG4gIHZhciBkaXNwb3NlRmV0Y2ggPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHN1YnNjcmlwdGlvblJlZi5jdXJyZW50ICE9IG51bGwpIHtcbiAgICAgIHN1YnNjcmlwdGlvblJlZi5jdXJyZW50LnVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb25SZWYuY3VycmVudCA9IG51bGw7XG4gICAgfVxuXG4gICAgaXNGZXRjaGluZ1JlZi5jdXJyZW50ID0gZmFsc2U7XG4gIH0sIFtdKTtcbiAgdmFyIHN0YXJ0RmV0Y2ggPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgc3Vic2NyaXB0aW9uUmVmLmN1cnJlbnQgPSBzdWJzY3JpcHRpb247XG4gICAgaXNGZXRjaGluZ1JlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfSwgW10pO1xuICB2YXIgY29tcGxldGVGZXRjaCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBzdWJzY3JpcHRpb25SZWYuY3VycmVudCA9IG51bGw7XG4gICAgaXNGZXRjaGluZ1JlZi5jdXJyZW50ID0gZmFsc2U7XG4gIH0sIFtdKTsgLy8gRGlwb3NlIG9mIG9uZ29pbmcgZmV0Y2ggb24gdW5tb3VudFxuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3Bvc2VGZXRjaDtcbiAgfSwgW2Rpc3Bvc2VGZXRjaF0pO1xuICByZXR1cm4ge1xuICAgIGlzRmV0Y2hpbmdSZWY6IGlzRmV0Y2hpbmdSZWYsXG4gICAgc3RhcnRGZXRjaDogc3RhcnRGZXRjaCxcbiAgICBkaXNwb3NlRmV0Y2g6IGRpc3Bvc2VGZXRjaCxcbiAgICBjb21wbGV0ZUZldGNoOiBjb21wbGV0ZUZldGNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXNlRmV0Y2hUcmFja2luZ1JlZjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1c2VGcmFnbWVudE5vZGUgPSByZXF1aXJlKCcuL3VzZUZyYWdtZW50Tm9kZScpO1xuXG52YXIgdXNlU3RhdGljRnJhZ21lbnROb2RlV2FybmluZyA9IHJlcXVpcmUoJy4vdXNlU3RhdGljRnJhZ21lbnROb2RlV2FybmluZycpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2xvYWRRdWVyeScpLFxuICAgIHVzZVRyYWNrTG9hZFF1ZXJ5SW5SZW5kZXIgPSBfcmVxdWlyZS51c2VUcmFja0xvYWRRdWVyeUluUmVuZGVyO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICB1c2VEZWJ1Z1ZhbHVlID0gX3JlcXVpcmUyLnVzZURlYnVnVmFsdWU7XG5cbnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgZ2V0RnJhZ21lbnQgPSBfcmVxdWlyZTMuZ2V0RnJhZ21lbnQ7XG5cbmZ1bmN0aW9uIHVzZUZyYWdtZW50KGZyYWdtZW50SW5wdXQsIGZyYWdtZW50UmVmKSB7XG4gIC8vIFdlIG5lZWQgdG8gdXNlIHRoaXMgaG9vayBpbiBvcmRlciB0byBiZSBhYmxlIHRvIHRyYWNrIGlmXG4gIC8vIGxvYWRRdWVyeSB3YXMgY2FsbGVkIGR1cmluZyByZW5kZXJcbiAgdXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlcigpO1xuICB2YXIgZnJhZ21lbnROb2RlID0gZ2V0RnJhZ21lbnQoZnJhZ21lbnRJbnB1dCk7XG4gIHVzZVN0YXRpY0ZyYWdtZW50Tm9kZVdhcm5pbmcoZnJhZ21lbnROb2RlLCAnZmlyc3QgYXJndW1lbnQgb2YgdXNlRnJhZ21lbnQoKScpO1xuXG4gIHZhciBfdXNlRnJhZ21lbnROb2RlID0gdXNlRnJhZ21lbnROb2RlKGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWYsICd1c2VGcmFnbWVudCgpJyksXG4gICAgICBkYXRhID0gX3VzZUZyYWdtZW50Tm9kZS5kYXRhO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICB1c2VEZWJ1Z1ZhbHVlKHtcbiAgICAgIGZyYWdtZW50OiBmcmFnbWVudE5vZGUubmFtZSxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZUZyYWdtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIHVzZVJlbGF5RW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL3VzZVJlbGF5RW52aXJvbm1lbnQnKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9GcmFnbWVudFJlc291cmNlJyksXG4gICAgZ2V0RnJhZ21lbnRSZXNvdXJjZUZvckVudmlyb25tZW50ID0gX3JlcXVpcmUuZ2V0RnJhZ21lbnRSZXNvdXJjZUZvckVudmlyb25tZW50O1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICB1c2VFZmZlY3QgPSBfcmVxdWlyZTIudXNlRWZmZWN0LFxuICAgIHVzZVJlZiA9IF9yZXF1aXJlMi51c2VSZWYsXG4gICAgdXNlU3RhdGUgPSBfcmVxdWlyZTIudXNlU3RhdGU7XG5cbnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgZ2V0RnJhZ21lbnRJZGVudGlmaWVyID0gX3JlcXVpcmUzLmdldEZyYWdtZW50SWRlbnRpZmllcjtcblxuZnVuY3Rpb24gdXNlRnJhZ21lbnROb2RlKGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWYsIGNvbXBvbmVudERpc3BsYXlOYW1lKSB7XG4gIHZhciBlbnZpcm9ubWVudCA9IHVzZVJlbGF5RW52aXJvbm1lbnQoKTtcbiAgdmFyIEZyYWdtZW50UmVzb3VyY2UgPSBnZXRGcmFnbWVudFJlc291cmNlRm9yRW52aXJvbm1lbnQoZW52aXJvbm1lbnQpO1xuICB2YXIgaXNNb3VudGVkUmVmID0gdXNlUmVmKGZhbHNlKTtcblxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoMCksXG4gICAgICBmb3JjZVVwZGF0ZSA9IF91c2VTdGF0ZVsxXTtcblxuICB2YXIgZnJhZ21lbnRJZGVudGlmaWVyID0gZ2V0RnJhZ21lbnRJZGVudGlmaWVyKGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWYpOyAvLyBSZWFkIGZyYWdtZW50IGRhdGE7IHRoaXMgbWlnaHQgc3VzcGVuZC5cblxuICB2YXIgZnJhZ21lbnRSZXN1bHQgPSBGcmFnbWVudFJlc291cmNlLnJlYWRXaXRoSWRlbnRpZmllcihmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmLCBmcmFnbWVudElkZW50aWZpZXIsIGNvbXBvbmVudERpc3BsYXlOYW1lKTtcbiAgdmFyIGlzTGlzdGVuaW5nRm9yVXBkYXRlc1JlZiA9IHVzZVJlZih0cnVlKTtcblxuICBmdW5jdGlvbiBlbmFibGVTdG9yZVVwZGF0ZXMoKSB7XG4gICAgaXNMaXN0ZW5pbmdGb3JVcGRhdGVzUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIHZhciBkaWRNaXNzVXBkYXRlcyA9IEZyYWdtZW50UmVzb3VyY2UuY2hlY2tNaXNzZWRVcGRhdGVzKGZyYWdtZW50UmVzdWx0KVswXTtcblxuICAgIGlmIChkaWRNaXNzVXBkYXRlcykge1xuICAgICAgaGFuZGxlRGF0YVVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc2FibGVTdG9yZVVwZGF0ZXMoKSB7XG4gICAgaXNMaXN0ZW5pbmdGb3JVcGRhdGVzUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZURhdGFVcGRhdGUoKSB7XG4gICAgaWYgKGlzTW91bnRlZFJlZi5jdXJyZW50ID09PSBmYWxzZSB8fCBpc0xpc3RlbmluZ0ZvclVwZGF0ZXNSZWYuY3VycmVudCA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFJlYWN0IGJhaWxzIG91dCBvbiBub29wIHN0YXRlIHVwZGF0ZXMgYXMgYW4gb3B0aW1pemF0aW9uLlxuICAgIC8vIElmIHdlIHdhbnQgdG8gZm9yY2UgYW4gdXBkYXRlIHZpYSBzZXRTdGF0ZSwgd2UgbmVlZCB0byBwYXNzIGFuIHZhbHVlLlxuICAgIC8vIFRoZSBhY3R1YWwgdmFsdWUgY2FuIGJlIGFyYml0cmFyeSB0aG91Z2gsIGUuZy4gYW4gaW5jcmVtZW50ZWQgbnVtYmVyLlxuXG5cbiAgICBmb3JjZVVwZGF0ZShmdW5jdGlvbiAoY291bnQpIHtcbiAgICAgIHJldHVybiBjb3VudCArIDE7XG4gICAgfSk7XG4gIH0gLy8gRXN0YWJsaXNoIFJlbGF5IHN0b3JlIHN1YnNjcmlwdGlvbnMgaW4gdGhlIGNvbW1pdCBwaGFzZSwgb25seSBpZlxuICAvLyByZW5kZXJpbmcgZm9yIHRoZSBmaXJzdCB0aW1lLCBvciBpZiB3ZSBuZWVkIHRvIHN1YnNjcmliZSB0byBuZXcgZGF0YVxuICAvLyBJZiB0aGUgZnJhZ21lbnQgaWRlbnRpZmllciBjaGFuZ2VzLCBpdCBtZWFucyB0aGF0IHRoZSB2YXJpYWJsZXMgb24gdGhlXG4gIC8vIGZyYWdtZW50IG93bmVyIGNoYW5nZWQsIG9yIHRoZSBmcmFnbWVudCByZWYgcG9pbnRzIHRvIGRpZmZlcmVudCByZWNvcmRzLlxuICAvLyBJbiB0aGlzIGNhc2UsIHdlIG5lZWQgdG8gcmVzdWJzY3JpYmUgdG8gdGhlIFJlbGF5IHN0b3JlLlxuXG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpc01vdW50ZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgdmFyIGRpc3Bvc2FibGUgPSBGcmFnbWVudFJlc291cmNlLnN1YnNjcmliZShmcmFnbWVudFJlc3VsdCwgaGFuZGxlRGF0YVVwZGF0ZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFdoZW4gdW5tb3VudGluZyBvciByZXN1YnNjcmliaW5nIHRvIG5ldyBkYXRhLCBjbGVhbiB1cCBjdXJyZW50XG4gICAgICAvLyBzdWJzY3JpcHRpb24uIFRoaXMgd2lsbCBhbHNvIG1ha2Ugc3VyZSBmcmFnbWVudCBkYXRhIGlzIG5vIGxvbmdlclxuICAgICAgLy8gY2FjaGVkIHNvIHRoYXQgbmV4dCB0aW1lIGl0IGl0cyByZWFkLCBpdCB3aWxsIGJlIGZyZXNobHkgcmVhZCBmcm9tXG4gICAgICAvLyB0aGUgUmVsYXkgc3RvcmVcbiAgICAgIGlzTW91bnRlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICB9OyAvLyBOT1RFOiBXZSBkaXNhYmxlIHJlYWN0LWhvb2tzLWRlcHMgd2FybmluZyBiZWNhdXNlIGVudmlyb25tZW50IGFuZCBmcmFnbWVudElkZW50aWZpZXJcbiAgICAvLyBpcyBjYXB0dXJpbmcgYWxsIGluZm9ybWF0aW9uIGFib3V0IHdoZXRoZXIgdGhlIGVmZmVjdCBzaG91bGQgYmUgcmUtcmFuLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW2Vudmlyb25tZW50LCBmcmFnbWVudElkZW50aWZpZXJdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKGZyYWdtZW50UmVmICE9IG51bGwgJiYgKGZyYWdtZW50UmVzdWx0LmRhdGEgPT09IHVuZGVmaW5lZCB8fCBBcnJheS5pc0FycmF5KGZyYWdtZW50UmVzdWx0LmRhdGEpICYmIGZyYWdtZW50UmVzdWx0LmRhdGEubGVuZ3RoID4gMCAmJiBmcmFnbWVudFJlc3VsdC5kYXRhLmV2ZXJ5KGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICByZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkO1xuICAgIH0pKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5OiBFeHBlY3RlZCB0byBoYXZlIGJlZW4gYWJsZSB0byByZWFkIG5vbi1udWxsIGRhdGEgZm9yICcgKyAnZnJhZ21lbnQgYCVzYCBkZWNsYXJlZCBpbiAnICsgJ2Alc2AsIHNpbmNlIGZyYWdtZW50IHJlZmVyZW5jZSB3YXMgbm9uLW51bGwuICcgKyBcIk1ha2Ugc3VyZSB0aGF0IHRoYXQgYCVzYCdzIHBhcmVudCBpc24ndCBcIiArICdob2xkaW5nIG9uIHRvIGFuZC9vciBwYXNzaW5nIGEgZnJhZ21lbnQgcmVmZXJlbmNlIGZvciBkYXRhIHRoYXQgJyArICdoYXMgYmVlbiBkZWxldGVkLicsIGZyYWdtZW50Tm9kZS5uYW1lLCBjb21wb25lbnREaXNwbGF5TmFtZSwgY29tcG9uZW50RGlzcGxheU5hbWUpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgIGRhdGE6IGZyYWdtZW50UmVzdWx0LmRhdGEsXG4gICAgZGlzYWJsZVN0b3JlVXBkYXRlczogZGlzYWJsZVN0b3JlVXBkYXRlcyxcbiAgICBlbmFibGVTdG9yZVVwZGF0ZXM6IGVuYWJsZVN0b3JlVXBkYXRlc1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZUZyYWdtZW50Tm9kZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdXNlRWZmZWN0ID0gX3JlcXVpcmUudXNlRWZmZWN0LFxuICAgIHVzZVJlZiA9IF9yZXF1aXJlLnVzZVJlZjtcblxuZnVuY3Rpb24gdXNlSXNNb3VudGVkUmVmKCkge1xuICB2YXIgaXNNb3VudGVkUmVmID0gdXNlUmVmKHRydWUpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlzTW91bnRlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiBpc01vdW50ZWRSZWY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXNlSXNNb3VudGVkUmVmOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHVzZVJlbGF5RW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL3VzZVJlbGF5RW52aXJvbm1lbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIGdldE9ic2VydmFibGVGb3JBY3RpdmVSZXF1ZXN0ID0gX3JlcXVpcmUuX19pbnRlcm5hbC5nZXRPYnNlcnZhYmxlRm9yQWN0aXZlUmVxdWVzdCxcbiAgICBnZXRTZWxlY3RvciA9IF9yZXF1aXJlLmdldFNlbGVjdG9yO1xuXG52YXIgdXNlRWZmZWN0ID0gUmVhY3QudXNlRWZmZWN0LFxuICAgIHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUsXG4gICAgdXNlTWVtbyA9IFJlYWN0LnVzZU1lbW87XG5cbmZ1bmN0aW9uIHVzZUlzT3BlcmF0aW9uTm9kZUFjdGl2ZShmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmKSB7XG4gIHZhciBlbnZpcm9ubWVudCA9IHVzZVJlbGF5RW52aXJvbm1lbnQoKTtcbiAgdmFyIG9ic2VydmFibGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmKTtcblxuICAgIGlmIChzZWxlY3RvciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAhKHNlbGVjdG9yLmtpbmQgPT09ICdTaW5ndWxhclJlYWRlclNlbGVjdG9yJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICd1c2VJc09wZXJhdGlvbk5vZGVBY3RpdmU6IFBsdXJhbCBmcmFnbWVudHMgYXJlIG5vdCBzdXBwb3J0ZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBnZXRPYnNlcnZhYmxlRm9yQWN0aXZlUmVxdWVzdChlbnZpcm9ubWVudCwgc2VsZWN0b3Iub3duZXIpO1xuICB9LCBbZW52aXJvbm1lbnQsIGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWZdKTtcblxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUob2JzZXJ2YWJsZSAhPSBudWxsKSxcbiAgICAgIGlzQWN0aXZlID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0SXNBY3RpdmUgPSBfdXNlU3RhdGVbMV07XG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uO1xuICAgIHNldElzQWN0aXZlKG9ic2VydmFibGUgIT0gbnVsbCk7XG5cbiAgICBpZiAob2JzZXJ2YWJsZSAhPSBudWxsKSB7XG4gICAgICB2YXIgb25Db21wbGV0ZU9yRXJyb3IgPSBmdW5jdGlvbiBvbkNvbXBsZXRlT3JFcnJvcigpIHtcbiAgICAgICAgc2V0SXNBY3RpdmUoZmFsc2UpO1xuICAgICAgfTtcblxuICAgICAgc3Vic2NyaXB0aW9uID0gb2JzZXJ2YWJsZS5zdWJzY3JpYmUoe1xuICAgICAgICBjb21wbGV0ZTogb25Db21wbGV0ZU9yRXJyb3IsXG4gICAgICAgIGVycm9yOiBvbkNvbXBsZXRlT3JFcnJvclxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW29ic2VydmFibGVdKTtcbiAgcmV0dXJuIGlzQWN0aXZlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZUlzT3BlcmF0aW9uTm9kZUFjdGl2ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1c2VMYXp5TG9hZFF1ZXJ5Tm9kZSA9IHJlcXVpcmUoJy4vdXNlTGF6eUxvYWRRdWVyeU5vZGUnKTtcblxudmFyIHVzZU1lbW9PcGVyYXRpb25EZXNjcmlwdG9yID0gcmVxdWlyZSgnLi91c2VNZW1vT3BlcmF0aW9uRGVzY3JpcHRvcicpO1xuXG52YXIgdXNlUmVsYXlFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vdXNlUmVsYXlFbnZpcm9ubWVudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2xvYWRRdWVyeScpLFxuICAgIHVzZVRyYWNrTG9hZFF1ZXJ5SW5SZW5kZXIgPSBfcmVxdWlyZS51c2VUcmFja0xvYWRRdWVyeUluUmVuZGVyO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIGZldGNoUXVlcnkgPSBfcmVxdWlyZTIuX19pbnRlcm5hbC5mZXRjaFF1ZXJ5O1xuXG5mdW5jdGlvbiB1c2VMYXp5TG9hZFF1ZXJ5KGdxbFF1ZXJ5LCB2YXJpYWJsZXMsIG9wdGlvbnMpIHtcbiAgLy8gV2UgbmVlZCB0byB1c2UgdGhpcyBob29rIGluIG9yZGVyIHRvIGJlIGFibGUgdG8gdHJhY2sgaWZcbiAgLy8gbG9hZFF1ZXJ5IHdhcyBjYWxsZWQgZHVyaW5nIHJlbmRlclxuICB1c2VUcmFja0xvYWRRdWVyeUluUmVuZGVyKCk7XG4gIHZhciBlbnZpcm9ubWVudCA9IHVzZVJlbGF5RW52aXJvbm1lbnQoKTtcbiAgdmFyIHF1ZXJ5ID0gdXNlTWVtb09wZXJhdGlvbkRlc2NyaXB0b3IoZ3FsUXVlcnksIHZhcmlhYmxlcywgb3B0aW9ucyAmJiBvcHRpb25zLm5ldHdvcmtDYWNoZUNvbmZpZyA/IG9wdGlvbnMubmV0d29ya0NhY2hlQ29uZmlnIDoge1xuICAgIGZvcmNlOiB0cnVlXG4gIH0pO1xuICB2YXIgZGF0YSA9IHVzZUxhenlMb2FkUXVlcnlOb2RlKHtcbiAgICBjb21wb25lbnREaXNwbGF5TmFtZTogJ3VzZUxhenlMb2FkUXVlcnkoKScsXG4gICAgZmV0Y2hLZXk6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5mZXRjaEtleSxcbiAgICBmZXRjaE9ic2VydmFibGU6IGZldGNoUXVlcnkoZW52aXJvbm1lbnQsIHF1ZXJ5KSxcbiAgICBmZXRjaFBvbGljeTogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZldGNoUG9saWN5LFxuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICByZW5kZXJQb2xpY3k6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5VTlNUQUJMRV9yZW5kZXJQb2xpY3lcbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZUxhenlMb2FkUXVlcnk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUHJvZmlsZXJDb250ZXh0ID0gcmVxdWlyZSgnLi9Qcm9maWxlckNvbnRleHQnKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIHVzZUZldGNoVHJhY2tpbmdSZWYgPSByZXF1aXJlKCcuL3VzZUZldGNoVHJhY2tpbmdSZWYnKTtcblxudmFyIHVzZUZyYWdtZW50Tm9kZSA9IHJlcXVpcmUoJy4vdXNlRnJhZ21lbnROb2RlJyk7XG5cbnZhciB1c2VSZWxheUVudmlyb25tZW50ID0gcmVxdWlyZSgnLi91c2VSZWxheUVudmlyb25tZW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vUXVlcnlSZXNvdXJjZScpLFxuICAgIGdldFF1ZXJ5UmVzb3VyY2VGb3JFbnZpcm9ubWVudCA9IF9yZXF1aXJlLmdldFF1ZXJ5UmVzb3VyY2VGb3JFbnZpcm9ubWVudCxcbiAgICBnZXRRdWVyeUNhY2hlSWRlbnRpZmllciA9IF9yZXF1aXJlLmdldFF1ZXJ5Q2FjaGVJZGVudGlmaWVyO1xuXG52YXIgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQsXG4gICAgdXNlRWZmZWN0ID0gUmVhY3QudXNlRWZmZWN0LFxuICAgIHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUsXG4gICAgdXNlUmVmID0gUmVhY3QudXNlUmVmO1xuXG5mdW5jdGlvbiB1c2VMYXp5TG9hZFF1ZXJ5Tm9kZShfcmVmKSB7XG4gIHZhciBxdWVyeSA9IF9yZWYucXVlcnksXG4gICAgICBjb21wb25lbnREaXNwbGF5TmFtZSA9IF9yZWYuY29tcG9uZW50RGlzcGxheU5hbWUsXG4gICAgICBmZXRjaE9ic2VydmFibGUgPSBfcmVmLmZldGNoT2JzZXJ2YWJsZSxcbiAgICAgIGZldGNoUG9saWN5ID0gX3JlZi5mZXRjaFBvbGljeSxcbiAgICAgIGZldGNoS2V5ID0gX3JlZi5mZXRjaEtleSxcbiAgICAgIHJlbmRlclBvbGljeSA9IF9yZWYucmVuZGVyUG9saWN5O1xuICB2YXIgZW52aXJvbm1lbnQgPSB1c2VSZWxheUVudmlyb25tZW50KCk7XG4gIHZhciBwcm9maWxlckNvbnRleHQgPSB1c2VDb250ZXh0KFByb2ZpbGVyQ29udGV4dCk7XG4gIHZhciBRdWVyeVJlc291cmNlID0gZ2V0UXVlcnlSZXNvdXJjZUZvckVudmlyb25tZW50KGVudmlyb25tZW50KTtcblxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoMCksXG4gICAgICBmb3JjZVVwZGF0ZUtleSA9IF91c2VTdGF0ZVswXSxcbiAgICAgIGZvcmNlVXBkYXRlID0gX3VzZVN0YXRlWzFdO1xuXG4gIHZhciBfdXNlRmV0Y2hUcmFja2luZ1JlZiA9IHVzZUZldGNoVHJhY2tpbmdSZWYoKSxcbiAgICAgIHN0YXJ0RmV0Y2ggPSBfdXNlRmV0Y2hUcmFja2luZ1JlZi5zdGFydEZldGNoLFxuICAgICAgY29tcGxldGVGZXRjaCA9IF91c2VGZXRjaFRyYWNraW5nUmVmLmNvbXBsZXRlRmV0Y2g7XG5cbiAgdmFyIGNhY2hlQnJlYWtlciA9IFwiXCIuY29uY2F0KGZvcmNlVXBkYXRlS2V5LCBcIi1cIikuY29uY2F0KGZldGNoS2V5ICE9PSBudWxsICYmIGZldGNoS2V5ICE9PSB2b2lkIDAgPyBmZXRjaEtleSA6ICcnKTtcbiAgdmFyIGNhY2hlSWRlbnRpZmllciA9IGdldFF1ZXJ5Q2FjaGVJZGVudGlmaWVyKGVudmlyb25tZW50LCBxdWVyeSwgZmV0Y2hQb2xpY3ksIHJlbmRlclBvbGljeSwgY2FjaGVCcmVha2VyKTtcbiAgdmFyIHByZXBhcmVkUXVlcnlSZXN1bHQgPSBwcm9maWxlckNvbnRleHQud3JhcFByZXBhcmVRdWVyeVJlc291cmNlKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUXVlcnlSZXNvdXJjZS5wcmVwYXJlV2l0aElkZW50aWZpZXIoY2FjaGVJZGVudGlmaWVyLCBxdWVyeSwgZmV0Y2hPYnNlcnZhYmxlLCBmZXRjaFBvbGljeSwgcmVuZGVyUG9saWN5LCB7XG4gICAgICBzdGFydDogc3RhcnRGZXRjaCxcbiAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZUZldGNoLFxuICAgICAgZXJyb3I6IGNvbXBsZXRlRmV0Y2hcbiAgICB9LCBwcm9maWxlckNvbnRleHQpO1xuICB9KTtcbiAgdmFyIG1heWJlSGlkZGVuT3JGYXN0UmVmcmVzaCA9IHVzZVJlZihmYWxzZSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEF0dGVtcHQgdG8gZGV0ZWN0IGlmIHRoZSBjb21wb25lbnQgd2FzXG4gICAgICAvLyBoaWRkZW4gKGJ5IE9mZnNjcmVlbiBBUEkpLCBvciBmYXN0IHJlZnJlc2ggb2NjdXJlZDtcbiAgICAgIC8vIE9ubHkgaW4gdGhlc2Ugc2l0dWF0aW9ucyB3b3VsZCB0aGUgZWZmZWN0IGNsZWFudXBcbiAgICAgIC8vIGZvciBcInVubW91bnRpbmdcIiBydW4gbXVsdGlwbGUgdGltZXMsIHNvIGlmXG4gICAgICAvLyB3ZSBhcmUgZXZlciBhYmxlIHRvIHJlYWQgdGhpcyByZWYgd2l0aCBhIHZhbHVlXG4gICAgICAvLyBvZiB0cnVlLCBpdCBtZWFucyB0aGF0IG9uZSBvZiB0aGVzZSBjYXNlc1xuICAgICAgLy8gaGFzIGhhcHBlbmVkLlxuICAgICAgbWF5YmVIaWRkZW5PckZhc3RSZWZyZXNoLmN1cnJlbnQgPSB0cnVlO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobWF5YmVIaWRkZW5PckZhc3RSZWZyZXNoLmN1cnJlbnQgPT09IHRydWUpIHtcbiAgICAgIC8vIFRoaXMgYmxvY2sgb25seSBydW5zIGlmIHRoZSBjb21wb25lbnQgaGFzIHByZXZpb3VzbHkgXCJ1bm1vdW50ZWRcIlxuICAgICAgLy8gZHVlIHRvIGl0IGJlaW5nIGhpZGRlbiBieSB0aGUgT2Zmc2NyZWVuIEFQSSwgb3IgZHVyaW5nIGZhc3QgcmVmcmVzaC5cbiAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHRoZSBjdXJyZW50IGNhY2hlZCByZXNvdXJjZSB3aWxsIGhhdmUgYmVlbiBkaXNwb3NlZFxuICAgICAgLy8gYnkgdGhlIHByZXZpb3VzIGNsZWFudXAsIHNvIGluc3RlYWQgb2YgYXR0ZW1wdGluZyB0b1xuICAgICAgLy8gZG8gb3VyIHJlZ3VsYXIgY29tbWl0IHNldHVwLCB3aGljaCB3b3VsZCBpbmNvcnJlY3RseSBhdHRlbXB0IHRvXG4gICAgICAvLyByZXRhaW4gYSBjYWNoZWQgcXVlcnkgcmVzb3VyY2UgdGhhdCB3YXMgZGlzcG9zZWQsIHdlIG5lZWQgdG8gZm9yY2VcbiAgICAgIC8vIGEgcmUtcmVuZGVyIHNvIHRoYXQgdGhlIGNhY2hlIGVudHJ5IGZvciB0aGlzIHF1ZXJ5IGlzIHJlLWludGlsaWF6ZWQgYW5kXG4gICAgICAvLyBhbmQgcmUtZXZhbHVhdGVkIChhbmQgcG90ZW50aWFsbHkgY2F1c2UgYSByZWZldGNoKS5cbiAgICAgIG1heWJlSGlkZGVuT3JGYXN0UmVmcmVzaC5jdXJyZW50ID0gZmFsc2U7XG4gICAgICBmb3JjZVVwZGF0ZShmdW5jdGlvbiAobikge1xuICAgICAgICByZXR1cm4gbiArIDE7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGlzcG9zYWJsZSA9IFF1ZXJ5UmVzb3VyY2UucmV0YWluKHByZXBhcmVkUXVlcnlSZXN1bHQsIHByb2ZpbGVyQ29udGV4dCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgIH07IC8vIE5PVEU6IFdlIGRpc2FibGUgcmVhY3QtaG9va3MtZGVwcyB3YXJuaW5nIGJlY2F1c2UgdGhlIGBlbnZpcm9ubWVudGBcbiAgICAvLyBhbmQgYGNhY2hlSWRlbnRpZmllcmAgaWRlbnRpdGllcyBhcmUgY2FwdHVyaW5nIGFsbCBpbmZvcm1hdGlvbiBhYm91dCB3aGV0aGVyXG4gICAgLy8gdGhlIGVmZmVjdCBzaG91bGQgYmUgcmUtZXhlY3V0ZWQgYW5kIHRoZSBxdWVyeSByZS1yZXRhaW5lZC5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtlbnZpcm9ubWVudCwgY2FjaGVJZGVudGlmaWVyXSk7XG4gIHZhciBmcmFnbWVudE5vZGUgPSBwcmVwYXJlZFF1ZXJ5UmVzdWx0LmZyYWdtZW50Tm9kZSxcbiAgICAgIGZyYWdtZW50UmVmID0gcHJlcGFyZWRRdWVyeVJlc3VsdC5mcmFnbWVudFJlZjtcblxuICB2YXIgX3VzZUZyYWdtZW50Tm9kZSA9IHVzZUZyYWdtZW50Tm9kZShmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmLCBjb21wb25lbnREaXNwbGF5TmFtZSksXG4gICAgICBkYXRhID0gX3VzZUZyYWdtZW50Tm9kZS5kYXRhO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZUxhenlMb2FkUXVlcnlOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBnZXRQYWdpbmF0aW9uVmFyaWFibGVzID0gcmVxdWlyZSgnLi9nZXRQYWdpbmF0aW9uVmFyaWFibGVzJyk7XG5cbnZhciBnZXRWYWx1ZUF0UGF0aCA9IHJlcXVpcmUoJy4vZ2V0VmFsdWVBdFBhdGgnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgdXNlRmV0Y2hUcmFja2luZ1JlZiA9IHJlcXVpcmUoJy4vdXNlRmV0Y2hUcmFja2luZ1JlZicpO1xuXG52YXIgdXNlSXNNb3VudGVkUmVmID0gcmVxdWlyZSgnLi91c2VJc01vdW50ZWRSZWYnKTtcblxudmFyIHVzZUlzT3BlcmF0aW9uTm9kZUFjdGl2ZSA9IHJlcXVpcmUoJy4vdXNlSXNPcGVyYXRpb25Ob2RlQWN0aXZlJyk7XG5cbnZhciB1c2VSZWxheUVudmlyb25tZW50ID0gcmVxdWlyZSgnLi91c2VSZWxheUVudmlyb25tZW50Jyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdXNlQ2FsbGJhY2sgPSBfcmVxdWlyZS51c2VDYWxsYmFjayxcbiAgICB1c2VFZmZlY3QgPSBfcmVxdWlyZS51c2VFZmZlY3QsXG4gICAgdXNlU3RhdGUgPSBfcmVxdWlyZS51c2VTdGF0ZTtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBDb25uZWN0aW9uSW50ZXJmYWNlID0gX3JlcXVpcmUyLkNvbm5lY3Rpb25JbnRlcmZhY2UsXG4gICAgZmV0Y2hRdWVyeSA9IF9yZXF1aXJlMi5fX2ludGVybmFsLmZldGNoUXVlcnksXG4gICAgY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvciA9IF9yZXF1aXJlMi5jcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yLFxuICAgIGdldFNlbGVjdG9yID0gX3JlcXVpcmUyLmdldFNlbGVjdG9yO1xuXG5mdW5jdGlvbiB1c2VMb2FkTW9yZUZ1bmN0aW9uKGFyZ3MpIHtcbiAgdmFyIGRpcmVjdGlvbiA9IGFyZ3MuZGlyZWN0aW9uLFxuICAgICAgZnJhZ21lbnROb2RlID0gYXJncy5mcmFnbWVudE5vZGUsXG4gICAgICBmcmFnbWVudFJlZiA9IGFyZ3MuZnJhZ21lbnRSZWYsXG4gICAgICBmcmFnbWVudElkZW50aWZpZXIgPSBhcmdzLmZyYWdtZW50SWRlbnRpZmllcixcbiAgICAgIGZyYWdtZW50RGF0YSA9IGFyZ3MuZnJhZ21lbnREYXRhLFxuICAgICAgY29ubmVjdGlvblBhdGhJbkZyYWdtZW50RGF0YSA9IGFyZ3MuY29ubmVjdGlvblBhdGhJbkZyYWdtZW50RGF0YSxcbiAgICAgIHBhZ2luYXRpb25SZXF1ZXN0ID0gYXJncy5wYWdpbmF0aW9uUmVxdWVzdCxcbiAgICAgIHBhZ2luYXRpb25NZXRhZGF0YSA9IGFyZ3MucGFnaW5hdGlvbk1ldGFkYXRhLFxuICAgICAgY29tcG9uZW50RGlzcGxheU5hbWUgPSBhcmdzLmNvbXBvbmVudERpc3BsYXlOYW1lLFxuICAgICAgb2JzZXJ2ZXIgPSBhcmdzLm9ic2VydmVyLFxuICAgICAgb25SZXNldCA9IGFyZ3Mub25SZXNldCxcbiAgICAgIGlkZW50aWZpZXJGaWVsZCA9IGFyZ3MuaWRlbnRpZmllckZpZWxkO1xuICB2YXIgZW52aXJvbm1lbnQgPSB1c2VSZWxheUVudmlyb25tZW50KCk7XG5cbiAgdmFyIF91c2VGZXRjaFRyYWNraW5nUmVmID0gdXNlRmV0Y2hUcmFja2luZ1JlZigpLFxuICAgICAgaXNGZXRjaGluZ1JlZiA9IF91c2VGZXRjaFRyYWNraW5nUmVmLmlzRmV0Y2hpbmdSZWYsXG4gICAgICBzdGFydEZldGNoID0gX3VzZUZldGNoVHJhY2tpbmdSZWYuc3RhcnRGZXRjaCxcbiAgICAgIGRpc3Bvc2VGZXRjaCA9IF91c2VGZXRjaFRyYWNraW5nUmVmLmRpc3Bvc2VGZXRjaCxcbiAgICAgIGNvbXBsZXRlRmV0Y2ggPSBfdXNlRmV0Y2hUcmFja2luZ1JlZi5jb21wbGV0ZUZldGNoO1xuXG4gIHZhciBpZGVudGlmaWVyVmFsdWUgPSBpZGVudGlmaWVyRmllbGQgIT0gbnVsbCAmJiBmcmFnbWVudERhdGEgIT0gbnVsbCAmJiB0eXBlb2YgZnJhZ21lbnREYXRhID09PSAnb2JqZWN0JyA/IGZyYWdtZW50RGF0YVtpZGVudGlmaWVyRmllbGRdIDogbnVsbDtcbiAgdmFyIGlzTW91bnRlZFJlZiA9IHVzZUlzTW91bnRlZFJlZigpO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShlbnZpcm9ubWVudCksXG4gICAgICBtaXJyb3JlZEVudmlyb25tZW50ID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0TWlycm9yZWRFbnZpcm9ubWVudCA9IF91c2VTdGF0ZVsxXTtcblxuICB2YXIgX3VzZVN0YXRlMiA9IHVzZVN0YXRlKGZyYWdtZW50SWRlbnRpZmllciksXG4gICAgICBtaXJyb3JlZEZyYWdtZW50SWRlbnRpZmllciA9IF91c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRNaXJyb3JlZEZyYWdtZW50SWRlbnRpZmllciA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIGlzUGFyZW50UXVlcnlBY3RpdmUgPSB1c2VJc09wZXJhdGlvbk5vZGVBY3RpdmUoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZik7XG4gIHZhciBzaG91bGRSZXNldCA9IGVudmlyb25tZW50ICE9PSBtaXJyb3JlZEVudmlyb25tZW50IHx8IGZyYWdtZW50SWRlbnRpZmllciAhPT0gbWlycm9yZWRGcmFnbWVudElkZW50aWZpZXI7XG5cbiAgaWYgKHNob3VsZFJlc2V0KSB7XG4gICAgZGlzcG9zZUZldGNoKCk7XG4gICAgb25SZXNldCgpO1xuICAgIHNldE1pcnJvcmVkRW52aXJvbm1lbnQoZW52aXJvbm1lbnQpO1xuICAgIHNldE1pcnJvcmVkRnJhZ21lbnRJZGVudGlmaWVyKGZyYWdtZW50SWRlbnRpZmllcik7XG4gIH1cblxuICB2YXIgX2dldENvbm5lY3Rpb25TdGF0ZSA9IGdldENvbm5lY3Rpb25TdGF0ZShkaXJlY3Rpb24sIGZyYWdtZW50Tm9kZSwgZnJhZ21lbnREYXRhLCBjb25uZWN0aW9uUGF0aEluRnJhZ21lbnREYXRhKSxcbiAgICAgIGN1cnNvciA9IF9nZXRDb25uZWN0aW9uU3RhdGUuY3Vyc29yLFxuICAgICAgaGFzTW9yZSA9IF9nZXRDb25uZWN0aW9uU3RhdGUuaGFzTW9yZTsgLy8gRGlzcG9zZSBvZiBwYWdpbmF0aW9uIHJlcXVlc3RzIGluIGZsaWdodCB3aGVuIHVubW91bnRpbmdcblxuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRpc3Bvc2VGZXRjaCgpO1xuICAgIH07XG4gIH0sIFtkaXNwb3NlRmV0Y2hdKTtcbiAgdmFyIGxvYWRNb3JlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGNvdW50LCBvcHRpb25zKSB7XG4gICAgLy8gVE9ETyhUNDExMzE4NDYpOiBGZXRjaC9DYWNoaW5nIHBvbGljaWVzIGZvciBsb2FkTW9yZVxuICAgIHZhciBvbkNvbXBsZXRlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9uQ29tcGxldGU7XG5cbiAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQgIT09IHRydWUpIHtcbiAgICAgIC8vIEJhaWwgb3V0IGFuZCB3YXJuIGlmIHdlJ3JlIHRyeWluZyB0byBwYWdpbmF0ZSBhZnRlciB0aGUgY29tcG9uZW50XG4gICAgICAvLyBoYXMgdW5tb3VudGVkXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXk6IFVuZXhwZWN0ZWQgZmV0Y2ggb24gdW5tb3VudGVkIGNvbXBvbmVudCBmb3IgZnJhZ21lbnQgJyArICdgJXNgIGluIGAlc2AuIEl0IGxvb2tzIGxpa2Ugc29tZSBpbnN0YW5jZXMgb2YgeW91ciBjb21wb25lbnQgYXJlICcgKyAnc3RpbGwgdHJ5aW5nIHRvIGZldGNoIGRhdGEgYnV0IHRoZXkgYWxyZWFkeSB1bm1vdW50ZWQuICcgKyAnUGxlYXNlIG1ha2Ugc3VyZSB5b3UgY2xlYXIgYWxsIHRpbWVycywgaW50ZXJ2YWxzLCAnICsgJ2FzeW5jIGNhbGxzLCBldGMgdGhhdCBtYXkgdHJpZ2dlciBhIGZldGNoLicsIGZyYWdtZW50Tm9kZS5uYW1lLCBjb21wb25lbnREaXNwbGF5TmFtZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiBkaXNwb3NlKCkge31cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGZyYWdtZW50U2VsZWN0b3IgPSBnZXRTZWxlY3RvcihmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmKTtcblxuICAgIGlmIChpc0ZldGNoaW5nUmVmLmN1cnJlbnQgPT09IHRydWUgfHwgZnJhZ21lbnREYXRhID09IG51bGwgfHwgaXNQYXJlbnRRdWVyeUFjdGl2ZSkge1xuICAgICAgaWYgKGZyYWdtZW50U2VsZWN0b3IgPT0gbnVsbCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXk6IFVuZXhwZWN0ZWQgZmV0Y2ggd2hpbGUgdXNpbmcgYSBudWxsIGZyYWdtZW50IHJlZiAnICsgJ2ZvciBmcmFnbWVudCBgJXNgIGluIGAlc2AuIFdoZW4gZmV0Y2hpbmcgbW9yZSBpdGVtcywgd2UgZXhwZWN0ICcgKyBcImluaXRpYWwgZnJhZ21lbnQgZGF0YSB0byBiZSBub24tbnVsbC4gUGxlYXNlIG1ha2Ugc3VyZSB5b3UncmUgXCIgKyAncGFzc2luZyBhIHZhbGlkIGZyYWdtZW50IHJlZiB0byBgJXNgIGJlZm9yZSBwYWdpbmF0aW5nLicsIGZyYWdtZW50Tm9kZS5uYW1lLCBjb21wb25lbnREaXNwbGF5TmFtZSwgY29tcG9uZW50RGlzcGxheU5hbWUpIDogdm9pZCAwO1xuICAgICAgfVxuXG4gICAgICBpZiAob25Db21wbGV0ZSkge1xuICAgICAgICBvbkNvbXBsZXRlKG51bGwpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiBkaXNwb3NlKCkge31cbiAgICAgIH07XG4gICAgfVxuXG4gICAgIShmcmFnbWVudFNlbGVjdG9yICE9IG51bGwgJiYgZnJhZ21lbnRTZWxlY3Rvci5raW5kICE9PSAnUGx1cmFsUmVhZGVyU2VsZWN0b3InKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBFeHBlY3RlZCB0byBiZSBhYmxlIHRvIGZpbmQgYSBub24tcGx1cmFsIGZyYWdtZW50IG93bmVyIGZvciAnICsgXCJmcmFnbWVudCBgJXNgIHdoZW4gdXNpbmcgYCVzYC4gSWYgeW91J3JlIHNlZWluZyB0aGlzLCBcIiArICd0aGlzIGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWxheS4nLCBmcmFnbWVudE5vZGUubmFtZSwgY29tcG9uZW50RGlzcGxheU5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgcGFyZW50VmFyaWFibGVzID0gZnJhZ21lbnRTZWxlY3Rvci5vd25lci52YXJpYWJsZXM7XG4gICAgdmFyIGZyYWdtZW50VmFyaWFibGVzID0gZnJhZ21lbnRTZWxlY3Rvci52YXJpYWJsZXM7XG4gICAgdmFyIGV4dHJhVmFyaWFibGVzID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLlVOU1RBQkxFX2V4dHJhVmFyaWFibGVzOyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC1zcHJlYWQtaW50ZXJmYWNlXVxuXG4gICAgdmFyIGJhc2VWYXJpYWJsZXMgPSAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgcGFyZW50VmFyaWFibGVzKSwgZnJhZ21lbnRWYXJpYWJsZXMpO1xuICAgIHZhciBwYWdpbmF0aW9uVmFyaWFibGVzID0gZ2V0UGFnaW5hdGlvblZhcmlhYmxlcyhkaXJlY3Rpb24sIGNvdW50LCBjdXJzb3IsIGJhc2VWYXJpYWJsZXMsIC8vICRGbG93Rml4TWVbY2Fubm90LXNwcmVhZC1pbnRlcmZhY2VdXG4gICAgKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIGV4dHJhVmFyaWFibGVzKSwgcGFnaW5hdGlvbk1ldGFkYXRhKTsgLy8gSWYgdGhlIHF1ZXJ5IG5lZWRzIGFuIGlkZW50aWZpZXIgdmFsdWUgKCdpZCcgb3Igc2ltaWxhcikgYW5kIG9uZVxuICAgIC8vIHdhcyBub3QgZXhwbGljaXRseSBwcm92aWRlZCwgcmVhZCBpdCBmcm9tIHRoZSBmcmFnbWVudCBkYXRhLlxuXG4gICAgaWYgKGlkZW50aWZpZXJGaWVsZCAhPSBudWxsKSB7XG4gICAgICAvLyBAcmVmZXRjaGFibGUgZnJhZ21lbnRzIGFyZSBndWFyYW50ZWVkIHRvIGhhdmUgYW4gYGlkYCBzZWxlY3Rpb25cbiAgICAgIC8vIGlmIHRoZSB0eXBlIGlzIE5vZGUsIGltcGxlbWVudHMgTm9kZSwgb3IgaXMgQGZldGNoYWJsZS4gRG91YmxlLWNoZWNrXG4gICAgICAvLyB0aGF0IHRoZXJlIGFjdHVhbGx5IGlzIGEgdmFsdWUgYXQgcnVudGltZS5cbiAgICAgIGlmICh0eXBlb2YgaWRlbnRpZmllclZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIHJlc3VsdCB0byBoYXZlIGEgc3RyaW5nICAnICsgJ2Alc2AgaW4gb3JkZXIgdG8gcmVmZXRjaCwgZ290IGAlc2AuJywgaWRlbnRpZmllckZpZWxkLCBpZGVudGlmaWVyVmFsdWUpIDogdm9pZCAwO1xuICAgICAgfVxuXG4gICAgICBwYWdpbmF0aW9uVmFyaWFibGVzLmlkID0gaWRlbnRpZmllclZhbHVlO1xuICAgIH1cblxuICAgIHZhciBwYWdpbmF0aW9uUXVlcnkgPSBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yKHBhZ2luYXRpb25SZXF1ZXN0LCBwYWdpbmF0aW9uVmFyaWFibGVzLCB7XG4gICAgICBmb3JjZTogdHJ1ZVxuICAgIH0pO1xuICAgIGZldGNoUXVlcnkoZW52aXJvbm1lbnQsIHBhZ2luYXRpb25RdWVyeSkuc3Vic2NyaWJlKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCBvYnNlcnZlciksIHt9LCB7XG4gICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHN0YXJ0RmV0Y2goc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgb2JzZXJ2ZXIuc3RhcnQgJiYgb2JzZXJ2ZXIuc3RhcnQoc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0sXG4gICAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIGNvbXBsZXRlRmV0Y2goKTtcbiAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUgJiYgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKG51bGwpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IpIHtcbiAgICAgICAgY29tcGxldGVGZXRjaCgpO1xuICAgICAgICBvYnNlcnZlci5lcnJvciAmJiBvYnNlcnZlci5lcnJvcihfZXJyb3IpO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUoX2Vycm9yKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3Bvc2U6IGRpc3Bvc2VGZXRjaFxuICAgIH07XG4gIH0sIC8vIE5PVEU6IFdlIGRpc2FibGUgcmVhY3QtaG9va3MtZGVwcyB3YXJuaW5nIGJlY2F1c2UgYWxsIHZhbHVlc1xuICAvLyBpbnNpZGUgcGFnaW5hdGlvbk1ldGFkYXRhIGFyZSBzdGF0aWNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICBbZW52aXJvbm1lbnQsIGlkZW50aWZpZXJWYWx1ZSwgZGlyZWN0aW9uLCBjdXJzb3IsIHN0YXJ0RmV0Y2gsIGRpc3Bvc2VGZXRjaCwgY29tcGxldGVGZXRjaCwgaXNGZXRjaGluZ1JlZiwgaXNQYXJlbnRRdWVyeUFjdGl2ZSwgZnJhZ21lbnREYXRhLCBmcmFnbWVudE5vZGUubmFtZSwgZnJhZ21lbnRSZWYsIGNvbXBvbmVudERpc3BsYXlOYW1lXSk7XG4gIHJldHVybiBbbG9hZE1vcmUsIGhhc01vcmUsIGRpc3Bvc2VGZXRjaF07XG59XG5cbmZ1bmN0aW9uIGdldENvbm5lY3Rpb25TdGF0ZShkaXJlY3Rpb24sIGZyYWdtZW50Tm9kZSwgZnJhZ21lbnREYXRhLCBjb25uZWN0aW9uUGF0aEluRnJhZ21lbnREYXRhKSB7XG4gIHZhciBfcGFnZUluZm8kRU5EX0NVUlNPUiwgX3BhZ2VJbmZvJFNUQVJUX0NVUlNPO1xuXG4gIHZhciBfQ29ubmVjdGlvbkludGVyZmFjZSQgPSBDb25uZWN0aW9uSW50ZXJmYWNlLmdldCgpLFxuICAgICAgRURHRVMgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQuRURHRVMsXG4gICAgICBQQUdFX0lORk8gPSBfQ29ubmVjdGlvbkludGVyZmFjZSQuUEFHRV9JTkZPLFxuICAgICAgSEFTX05FWFRfUEFHRSA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJC5IQVNfTkVYVF9QQUdFLFxuICAgICAgSEFTX1BSRVZfUEFHRSA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJC5IQVNfUFJFVl9QQUdFLFxuICAgICAgRU5EX0NVUlNPUiA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJC5FTkRfQ1VSU09SLFxuICAgICAgU1RBUlRfQ1VSU09SID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkLlNUQVJUX0NVUlNPUjtcblxuICB2YXIgY29ubmVjdGlvbiA9IGdldFZhbHVlQXRQYXRoKGZyYWdtZW50RGF0YSwgY29ubmVjdGlvblBhdGhJbkZyYWdtZW50RGF0YSk7XG5cbiAgaWYgKGNvbm5lY3Rpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBjdXJzb3I6IG51bGwsXG4gICAgICBoYXNNb3JlOiBmYWxzZVxuICAgIH07XG4gIH1cblxuICAhKHR5cGVvZiBjb25uZWN0aW9uID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheTogRXhwZWN0ZWQgY29ubmVjdGlvbiBpbiBmcmFnbWVudCBgJXNgIHRvIGhhdmUgYmVlbiBgbnVsbGAsIG9yICcgKyAnYSBwbGFpbiBvYmplY3Qgd2l0aCAlcyBhbmQgJXMgcHJvcGVydGllcy4gSW5zdGVhZCBnb3QgYCVzYC4nLCBmcmFnbWVudE5vZGUubmFtZSwgRURHRVMsIFBBR0VfSU5GTywgY29ubmVjdGlvbikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZWRnZXMgPSBjb25uZWN0aW9uW0VER0VTXTtcbiAgdmFyIHBhZ2VJbmZvID0gY29ubmVjdGlvbltQQUdFX0lORk9dO1xuXG4gIGlmIChlZGdlcyA9PSBudWxsIHx8IHBhZ2VJbmZvID09IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY3Vyc29yOiBudWxsLFxuICAgICAgaGFzTW9yZTogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgIUFycmF5LmlzQXJyYXkoZWRnZXMpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIGNvbm5lY3Rpb24gaW4gZnJhZ21lbnQgYCVzYCB0byBoYXZlIGEgcGx1cmFsIGAlc2AgZmllbGQuICcgKyAnSW5zdGVhZCBnb3QgYCVzYC4nLCBmcmFnbWVudE5vZGUubmFtZSwgRURHRVMsIGVkZ2VzKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICEodHlwZW9mIHBhZ2VJbmZvID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheTogRXhwZWN0ZWQgY29ubmVjdGlvbiBpbiBmcmFnbWVudCBgJXNgIHRvIGhhdmUgYSBgJXNgIGZpZWxkLiAnICsgJ0luc3RlYWQgZ290IGAlc2AuJywgZnJhZ21lbnROb2RlLm5hbWUsIFBBR0VfSU5GTywgcGFnZUluZm8pIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGN1cnNvciA9IGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnID8gKF9wYWdlSW5mbyRFTkRfQ1VSU09SID0gcGFnZUluZm9bRU5EX0NVUlNPUl0pICE9PSBudWxsICYmIF9wYWdlSW5mbyRFTkRfQ1VSU09SICE9PSB2b2lkIDAgPyBfcGFnZUluZm8kRU5EX0NVUlNPUiA6IG51bGwgOiAoX3BhZ2VJbmZvJFNUQVJUX0NVUlNPID0gcGFnZUluZm9bU1RBUlRfQ1VSU09SXSkgIT09IG51bGwgJiYgX3BhZ2VJbmZvJFNUQVJUX0NVUlNPICE9PSB2b2lkIDAgPyBfcGFnZUluZm8kU1RBUlRfQ1VSU08gOiBudWxsO1xuICAhKGN1cnNvciA9PT0gbnVsbCB8fCB0eXBlb2YgY3Vyc29yID09PSAnc3RyaW5nJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheTogRXhwZWN0ZWQgcGFnZSBpbmZvIGZvciBjb25uZWN0aW9uIGluIGZyYWdtZW50IGAlc2AgdG8gaGF2ZSBhICcgKyAndmFsaWQgYCVzYC4gSW5zdGVhZCBnb3QgYCVzYC4nLCBmcmFnbWVudE5vZGUubmFtZSwgU1RBUlRfQ1VSU09SLCBjdXJzb3IpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGhhc01vcmU7XG5cbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgaGFzTW9yZSA9IGN1cnNvciAhPSBudWxsICYmIHBhZ2VJbmZvW0hBU19ORVhUX1BBR0VdID09PSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGhhc01vcmUgPSBjdXJzb3IgIT0gbnVsbCAmJiBwYWdlSW5mb1tIQVNfUFJFVl9QQUdFXSA9PT0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3Vyc29yOiBjdXJzb3IsXG4gICAgaGFzTW9yZTogaGFzTW9yZVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZUxvYWRNb3JlRnVuY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgdXNlTWVtb1ZhcmlhYmxlcyA9IHJlcXVpcmUoJy4vdXNlTWVtb1ZhcmlhYmxlcycpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvciA9IF9yZXF1aXJlLmNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IsXG4gICAgZ2V0UmVxdWVzdCA9IF9yZXF1aXJlLmdldFJlcXVlc3Q7XG5cbnZhciB1c2VNZW1vID0gUmVhY3QudXNlTWVtbztcblxuZnVuY3Rpb24gdXNlTWVtb09wZXJhdGlvbkRlc2NyaXB0b3IoZ3FsUXVlcnksIHZhcmlhYmxlcywgY2FjaGVDb25maWcpIHtcbiAgdmFyIF91c2VNZW1vVmFyaWFibGVzID0gdXNlTWVtb1ZhcmlhYmxlcyh2YXJpYWJsZXMpLFxuICAgICAgbWVtb1ZhcmlhYmxlcyA9IF91c2VNZW1vVmFyaWFibGVzWzBdO1xuXG4gIHZhciBfdXNlTWVtb1ZhcmlhYmxlczIgPSB1c2VNZW1vVmFyaWFibGVzKGNhY2hlQ29uZmlnIHx8IHt9KSxcbiAgICAgIG1lbW9DYWNoZUNvbmZpZyA9IF91c2VNZW1vVmFyaWFibGVzMlswXTtcblxuICByZXR1cm4gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IoZ2V0UmVxdWVzdChncWxRdWVyeSksIG1lbW9WYXJpYWJsZXMsIG1lbW9DYWNoZUNvbmZpZyk7XG4gIH0sIFtncWxRdWVyeSwgbWVtb1ZhcmlhYmxlcywgbWVtb0NhY2hlQ29uZmlnXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXNlTWVtb09wZXJhdGlvbkRlc2NyaXB0b3I7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgYXJlRXF1YWwgPSByZXF1aXJlKFwiZmJqcy9saWIvYXJlRXF1YWxcIik7XG5cbnZhciB1c2VNZW1vID0gUmVhY3QudXNlTWVtbyxcbiAgICB1c2VSZWYgPSBSZWFjdC51c2VSZWYsXG4gICAgdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZTtcblxuZnVuY3Rpb24gdXNlTWVtb1ZhcmlhYmxlcyh2YXJpYWJsZXMpIHtcbiAgdmFyIF92YXJpYWJsZXNDaGFuZ2VkR2VuZTI7XG5cbiAgLy8gVGhlIHZhbHVlIG9mIHRoaXMgcmVmIGlzIGEgY291bnRlciB0aGF0IHNob3VsZCBiZSBpbmNyZW1lbnRlZCB3aGVuXG4gIC8vIHZhcmlhYmxlcyBjaGFuZ2UuIFRoaXMgYWxsb3dzIHVzIHRvIHVzZSB0aGUgY291bnRlciBhcyBhXG4gIC8vIG1lbW9pemF0aW9uIHZhbHVlIHRvIGluZGljYXRlIGlmIHRoZSBjb21wdXRhdGlvbiBmb3IgdXNlTWVtb1xuICAvLyBzaG91bGQgYmUgcmUtZXhlY3V0ZWQuXG4gIHZhciB2YXJpYWJsZXNDaGFuZ2VkR2VuZXJhdGlvblJlZiA9IHVzZVJlZigwKTsgLy8gV2UgbWlycm9yIHRoZSB2YXJpYWJsZXMgdG8gY2hlY2sgaWYgdGhleSBoYXZlIGNoYW5nZWQgYmV0d2VlbiByZW5kZXJzXG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKHZhcmlhYmxlcyksXG4gICAgICBtaXJyb3JlZFZhcmlhYmxlcyA9IF91c2VTdGF0ZVswXSxcbiAgICAgIHNldE1pcnJvcmVkVmFyaWFibGVzID0gX3VzZVN0YXRlWzFdO1xuXG4gIHZhciB2YXJpYWJsZXNDaGFuZ2VkID0gIWFyZUVxdWFsKHZhcmlhYmxlcywgbWlycm9yZWRWYXJpYWJsZXMpO1xuXG4gIGlmICh2YXJpYWJsZXNDaGFuZ2VkKSB7XG4gICAgdmFyIF92YXJpYWJsZXNDaGFuZ2VkR2VuZTtcblxuICAgIHZhcmlhYmxlc0NoYW5nZWRHZW5lcmF0aW9uUmVmLmN1cnJlbnQgPSAoKF92YXJpYWJsZXNDaGFuZ2VkR2VuZSA9IHZhcmlhYmxlc0NoYW5nZWRHZW5lcmF0aW9uUmVmLmN1cnJlbnQpICE9PSBudWxsICYmIF92YXJpYWJsZXNDaGFuZ2VkR2VuZSAhPT0gdm9pZCAwID8gX3ZhcmlhYmxlc0NoYW5nZWRHZW5lIDogMCkgKyAxO1xuICAgIHNldE1pcnJvcmVkVmFyaWFibGVzKHZhcmlhYmxlcyk7XG4gIH0gLy8gTk9URTogV2UgZGlzYWJsZSByZWFjdC1ob29rcy1kZXBzIHdhcm5pbmcgYmVjYXVzZSB3ZSBleHBsaWNpdGx5XG4gIC8vIGRvbid0IHdhbnQgdG8gbWVtb2l6ZSBvbiBvYmplY3QgaWRlbnRpdHlcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuXG5cbiAgdmFyIG1lbW9WYXJpYWJsZXMgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdmFyaWFibGVzO1xuICB9LCBbdmFyaWFibGVzQ2hhbmdlZEdlbmVyYXRpb25SZWYuY3VycmVudF0pO1xuICByZXR1cm4gW21lbW9WYXJpYWJsZXMsIChfdmFyaWFibGVzQ2hhbmdlZEdlbmUyID0gdmFyaWFibGVzQ2hhbmdlZEdlbmVyYXRpb25SZWYuY3VycmVudCkgIT09IG51bGwgJiYgX3ZhcmlhYmxlc0NoYW5nZWRHZW5lMiAhPT0gdm9pZCAwID8gX3ZhcmlhYmxlc0NoYW5nZWRHZW5lMiA6IDBdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZU1lbW9WYXJpYWJsZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIHVzZVJlbGF5RW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL3VzZVJlbGF5RW52aXJvbm1lbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIGRlZmF1bHRDb21taXRNdXRhdGlvbiA9IF9yZXF1aXJlLmNvbW1pdE11dGF0aW9uO1xuXG52YXIgdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSxcbiAgICB1c2VFZmZlY3QgPSBSZWFjdC51c2VFZmZlY3QsXG4gICAgdXNlUmVmID0gUmVhY3QudXNlUmVmLFxuICAgIHVzZUNhbGxiYWNrID0gUmVhY3QudXNlQ2FsbGJhY2s7XG5cbnZhciB1c2VJc01vdW50ZWRSZWYgPSByZXF1aXJlKCcuL3VzZUlzTW91bnRlZFJlZicpO1xuXG5mdW5jdGlvbiB1c2VNdXRhdGlvbihtdXRhdGlvbikge1xuICB2YXIgY29tbWl0TXV0YXRpb25GbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdENvbW1pdE11dGF0aW9uO1xuICB2YXIgZW52aXJvbm1lbnQgPSB1c2VSZWxheUVudmlyb25tZW50KCk7XG4gIHZhciBpc01vdW50ZWRSZWYgPSB1c2VJc01vdW50ZWRSZWYoKTtcbiAgdmFyIGVudmlyb25tZW50UmVmID0gdXNlUmVmKGVudmlyb25tZW50KTtcbiAgdmFyIG11dGF0aW9uUmVmID0gdXNlUmVmKG11dGF0aW9uKTtcbiAgdmFyIGluRmxpZ2h0TXV0YXRpb25zUmVmID0gdXNlUmVmKG5ldyBTZXQoKSk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGlzTXV0YXRpb25JbkZsaWdodCA9IF91c2VTdGF0ZVswXSxcbiAgICAgIHNldE11dGF0aW9uSW5GbGlnaHQgPSBfdXNlU3RhdGVbMV07XG5cbiAgdmFyIGNsZWFudXAgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZGlzcG9zYWJsZSkge1xuICAgIGlmIChlbnZpcm9ubWVudFJlZi5jdXJyZW50ID09PSBlbnZpcm9ubWVudCAmJiBtdXRhdGlvblJlZi5jdXJyZW50ID09PSBtdXRhdGlvbikge1xuICAgICAgaW5GbGlnaHRNdXRhdGlvbnNSZWYuY3VycmVudFtcImRlbGV0ZVwiXShkaXNwb3NhYmxlKTtcblxuICAgICAgaWYgKGlzTW91bnRlZFJlZi5jdXJyZW50KSB7XG4gICAgICAgIHNldE11dGF0aW9uSW5GbGlnaHQoaW5GbGlnaHRNdXRhdGlvbnNSZWYuY3VycmVudC5zaXplID4gMCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbZW52aXJvbm1lbnQsIGlzTW91bnRlZFJlZiwgbXV0YXRpb25dKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZW52aXJvbm1lbnRSZWYuY3VycmVudCAhPT0gZW52aXJvbm1lbnQgfHwgbXV0YXRpb25SZWYuY3VycmVudCAhPT0gbXV0YXRpb24pIHtcbiAgICAgIGluRmxpZ2h0TXV0YXRpb25zUmVmLmN1cnJlbnQgPSBuZXcgU2V0KCk7XG5cbiAgICAgIGlmIChpc01vdW50ZWRSZWYuY3VycmVudCkge1xuICAgICAgICBzZXRNdXRhdGlvbkluRmxpZ2h0KGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgZW52aXJvbm1lbnRSZWYuY3VycmVudCA9IGVudmlyb25tZW50O1xuICAgICAgbXV0YXRpb25SZWYuY3VycmVudCA9IG11dGF0aW9uO1xuICAgIH1cbiAgfSwgW2Vudmlyb25tZW50LCBpc01vdW50ZWRSZWYsIG11dGF0aW9uXSk7XG4gIHZhciBjb21taXQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgdmFyIGRpc3Bvc2FibGUgPSBjb21taXRNdXRhdGlvbkZuKGVudmlyb25tZW50LCAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgY29uZmlnKSwge30sIHtcbiAgICAgIG11dGF0aW9uOiBtdXRhdGlvbixcbiAgICAgIG9uQ29tcGxldGVkOiBmdW5jdGlvbiBvbkNvbXBsZXRlZChyZXNwb25zZSwgZXJyb3JzKSB7XG4gICAgICAgIGNsZWFudXAoZGlzcG9zYWJsZSk7XG4gICAgICAgIGNvbmZpZy5vbkNvbXBsZXRlZCAmJiBjb25maWcub25Db21wbGV0ZWQocmVzcG9uc2UsIGVycm9ycyk7XG4gICAgICB9LFxuICAgICAgb25FcnJvcjogZnVuY3Rpb24gb25FcnJvcihlcnJvcikge1xuICAgICAgICBjbGVhbnVwKGRpc3Bvc2FibGUpO1xuICAgICAgICBjb25maWcub25FcnJvciAmJiBjb25maWcub25FcnJvcihlcnJvcik7XG4gICAgICB9LFxuICAgICAgb25VbnN1YnNjcmliZTogZnVuY3Rpb24gb25VbnN1YnNjcmliZSgpIHtcbiAgICAgICAgY2xlYW51cChkaXNwb3NhYmxlKTtcbiAgICAgICAgY29uZmlnLm9uVW5zdWJzY3JpYmUgJiYgY29uZmlnLm9uVW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgaW5GbGlnaHRNdXRhdGlvbnNSZWYuY3VycmVudC5hZGQoZGlzcG9zYWJsZSk7XG5cbiAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgIHNldE11dGF0aW9uSW5GbGlnaHQodHJ1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpc3Bvc2FibGU7XG4gIH0sIFtjbGVhbnVwLCBjb21taXRNdXRhdGlvbkZuLCBlbnZpcm9ubWVudCwgaXNNb3VudGVkUmVmLCBtdXRhdGlvbl0pO1xuICByZXR1cm4gW2NvbW1pdCwgaXNNdXRhdGlvbkluRmxpZ2h0XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VNdXRhdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgZ2V0UGFnaW5hdGlvbk1ldGFkYXRhID0gcmVxdWlyZSgnLi9nZXRQYWdpbmF0aW9uTWV0YWRhdGEnKTtcblxudmFyIHVzZUxvYWRNb3JlRnVuY3Rpb24gPSByZXF1aXJlKCcuL3VzZUxvYWRNb3JlRnVuY3Rpb24nKTtcblxudmFyIHVzZVJlZmV0Y2hhYmxlRnJhZ21lbnROb2RlID0gcmVxdWlyZSgnLi91c2VSZWZldGNoYWJsZUZyYWdtZW50Tm9kZScpO1xuXG52YXIgdXNlU3RhdGljRnJhZ21lbnROb2RlV2FybmluZyA9IHJlcXVpcmUoJy4vdXNlU3RhdGljRnJhZ21lbnROb2RlV2FybmluZycpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHVzZUNhbGxiYWNrID0gX3JlcXVpcmUudXNlQ2FsbGJhY2ssXG4gICAgdXNlRGVidWdWYWx1ZSA9IF9yZXF1aXJlLnVzZURlYnVnVmFsdWUsXG4gICAgdXNlU3RhdGUgPSBfcmVxdWlyZS51c2VTdGF0ZTtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBnZXRGcmFnbWVudCA9IF9yZXF1aXJlMi5nZXRGcmFnbWVudCxcbiAgICBnZXRGcmFnbWVudElkZW50aWZpZXIgPSBfcmVxdWlyZTIuZ2V0RnJhZ21lbnRJZGVudGlmaWVyO1xuXG5mdW5jdGlvbiB1c2VQYWdpbmF0aW9uRnJhZ21lbnQoZnJhZ21lbnRJbnB1dCwgcGFyZW50RnJhZ21lbnRSZWYpIHtcbiAgdmFyIGZyYWdtZW50Tm9kZSA9IGdldEZyYWdtZW50KGZyYWdtZW50SW5wdXQpO1xuICB1c2VTdGF0aWNGcmFnbWVudE5vZGVXYXJuaW5nKGZyYWdtZW50Tm9kZSwgJ2ZpcnN0IGFyZ3VtZW50IG9mIHVzZVBhZ2luYXRpb25GcmFnbWVudCgpJyk7XG4gIHZhciBjb21wb25lbnREaXNwbGF5TmFtZSA9ICd1c2VQYWdpbmF0aW9uRnJhZ21lbnQoKSc7XG5cbiAgdmFyIF9nZXRQYWdpbmF0aW9uTWV0YWRhdCA9IGdldFBhZ2luYXRpb25NZXRhZGF0YShmcmFnbWVudE5vZGUsIGNvbXBvbmVudERpc3BsYXlOYW1lKSxcbiAgICAgIGNvbm5lY3Rpb25QYXRoSW5GcmFnbWVudERhdGEgPSBfZ2V0UGFnaW5hdGlvbk1ldGFkYXQuY29ubmVjdGlvblBhdGhJbkZyYWdtZW50RGF0YSxcbiAgICAgIHBhZ2luYXRpb25SZXF1ZXN0ID0gX2dldFBhZ2luYXRpb25NZXRhZGF0LnBhZ2luYXRpb25SZXF1ZXN0LFxuICAgICAgcGFnaW5hdGlvbk1ldGFkYXRhID0gX2dldFBhZ2luYXRpb25NZXRhZGF0LnBhZ2luYXRpb25NZXRhZGF0YSxcbiAgICAgIGlkZW50aWZpZXJGaWVsZCA9IF9nZXRQYWdpbmF0aW9uTWV0YWRhdC5pZGVudGlmaWVyRmllbGQ7XG5cbiAgdmFyIF91c2VSZWZldGNoYWJsZUZyYWdtZSA9IHVzZVJlZmV0Y2hhYmxlRnJhZ21lbnROb2RlKGZyYWdtZW50Tm9kZSwgcGFyZW50RnJhZ21lbnRSZWYsIGNvbXBvbmVudERpc3BsYXlOYW1lKSxcbiAgICAgIGZyYWdtZW50RGF0YSA9IF91c2VSZWZldGNoYWJsZUZyYWdtZS5mcmFnbWVudERhdGEsXG4gICAgICBmcmFnbWVudFJlZiA9IF91c2VSZWZldGNoYWJsZUZyYWdtZS5mcmFnbWVudFJlZixcbiAgICAgIHJlZmV0Y2ggPSBfdXNlUmVmZXRjaGFibGVGcmFnbWUucmVmZXRjaDtcblxuICB2YXIgZnJhZ21lbnRJZGVudGlmaWVyID0gZ2V0RnJhZ21lbnRJZGVudGlmaWVyKGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWYpOyAvLyBCYWNrd2FyZCBwYWdpbmF0aW9uXG5cbiAgdmFyIF91c2VMb2FkTW9yZSA9IHVzZUxvYWRNb3JlKHtcbiAgICBjb21wb25lbnREaXNwbGF5TmFtZTogY29tcG9uZW50RGlzcGxheU5hbWUsXG4gICAgY29ubmVjdGlvblBhdGhJbkZyYWdtZW50RGF0YTogY29ubmVjdGlvblBhdGhJbkZyYWdtZW50RGF0YSxcbiAgICBkaXJlY3Rpb246ICdiYWNrd2FyZCcsXG4gICAgZnJhZ21lbnREYXRhOiBmcmFnbWVudERhdGEsXG4gICAgZnJhZ21lbnRJZGVudGlmaWVyOiBmcmFnbWVudElkZW50aWZpZXIsXG4gICAgZnJhZ21lbnROb2RlOiBmcmFnbWVudE5vZGUsXG4gICAgZnJhZ21lbnRSZWY6IGZyYWdtZW50UmVmLFxuICAgIGlkZW50aWZpZXJGaWVsZDogaWRlbnRpZmllckZpZWxkLFxuICAgIHBhZ2luYXRpb25NZXRhZGF0YTogcGFnaW5hdGlvbk1ldGFkYXRhLFxuICAgIHBhZ2luYXRpb25SZXF1ZXN0OiBwYWdpbmF0aW9uUmVxdWVzdFxuICB9KSxcbiAgICAgIGxvYWRQcmV2aW91cyA9IF91c2VMb2FkTW9yZVswXSxcbiAgICAgIGhhc1ByZXZpb3VzID0gX3VzZUxvYWRNb3JlWzFdLFxuICAgICAgaXNMb2FkaW5nUHJldmlvdXMgPSBfdXNlTG9hZE1vcmVbMl0sXG4gICAgICBkaXNwb3NlRmV0Y2hQcmV2aW91cyA9IF91c2VMb2FkTW9yZVszXTsgLy8gRm9yd2FyZCBwYWdpbmF0aW9uXG5cblxuICB2YXIgX3VzZUxvYWRNb3JlMiA9IHVzZUxvYWRNb3JlKHtcbiAgICBjb21wb25lbnREaXNwbGF5TmFtZTogY29tcG9uZW50RGlzcGxheU5hbWUsXG4gICAgY29ubmVjdGlvblBhdGhJbkZyYWdtZW50RGF0YTogY29ubmVjdGlvblBhdGhJbkZyYWdtZW50RGF0YSxcbiAgICBkaXJlY3Rpb246ICdmb3J3YXJkJyxcbiAgICBmcmFnbWVudERhdGE6IGZyYWdtZW50RGF0YSxcbiAgICBmcmFnbWVudElkZW50aWZpZXI6IGZyYWdtZW50SWRlbnRpZmllcixcbiAgICBmcmFnbWVudE5vZGU6IGZyYWdtZW50Tm9kZSxcbiAgICBmcmFnbWVudFJlZjogZnJhZ21lbnRSZWYsXG4gICAgaWRlbnRpZmllckZpZWxkOiBpZGVudGlmaWVyRmllbGQsXG4gICAgcGFnaW5hdGlvbk1ldGFkYXRhOiBwYWdpbmF0aW9uTWV0YWRhdGEsXG4gICAgcGFnaW5hdGlvblJlcXVlc3Q6IHBhZ2luYXRpb25SZXF1ZXN0XG4gIH0pLFxuICAgICAgbG9hZE5leHQgPSBfdXNlTG9hZE1vcmUyWzBdLFxuICAgICAgaGFzTmV4dCA9IF91c2VMb2FkTW9yZTJbMV0sXG4gICAgICBpc0xvYWRpbmdOZXh0ID0gX3VzZUxvYWRNb3JlMlsyXSxcbiAgICAgIGRpc3Bvc2VGZXRjaE5leHQgPSBfdXNlTG9hZE1vcmUyWzNdO1xuXG4gIHZhciByZWZldGNoUGFnaW5hdGlvbiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICh2YXJpYWJsZXMsIG9wdGlvbnMpIHtcbiAgICBkaXNwb3NlRmV0Y2hOZXh0KCk7XG4gICAgZGlzcG9zZUZldGNoUHJldmlvdXMoKTtcbiAgICByZXR1cm4gcmVmZXRjaCh2YXJpYWJsZXMsICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCBvcHRpb25zKSwge30sIHtcbiAgICAgIF9fZW52aXJvbm1lbnQ6IHVuZGVmaW5lZFxuICAgIH0pKTtcbiAgfSwgW2Rpc3Bvc2VGZXRjaE5leHQsIGRpc3Bvc2VGZXRjaFByZXZpb3VzLCByZWZldGNoXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIHVzZURlYnVnVmFsdWUoe1xuICAgICAgZnJhZ21lbnQ6IGZyYWdtZW50Tm9kZS5uYW1lLFxuICAgICAgZGF0YTogZnJhZ21lbnREYXRhLFxuICAgICAgaGFzTmV4dDogaGFzTmV4dCxcbiAgICAgIGlzTG9hZGluZ05leHQ6IGlzTG9hZGluZ05leHQsXG4gICAgICBoYXNQcmV2aW91czogaGFzUHJldmlvdXMsXG4gICAgICBpc0xvYWRpbmdQcmV2aW91czogaXNMb2FkaW5nUHJldmlvdXNcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZGF0YTogZnJhZ21lbnREYXRhLFxuICAgIGxvYWROZXh0OiBsb2FkTmV4dCxcbiAgICBsb2FkUHJldmlvdXM6IGxvYWRQcmV2aW91cyxcbiAgICBoYXNOZXh0OiBoYXNOZXh0LFxuICAgIGhhc1ByZXZpb3VzOiBoYXNQcmV2aW91cyxcbiAgICBpc0xvYWRpbmdOZXh0OiBpc0xvYWRpbmdOZXh0LFxuICAgIGlzTG9hZGluZ1ByZXZpb3VzOiBpc0xvYWRpbmdQcmV2aW91cyxcbiAgICByZWZldGNoOiByZWZldGNoUGFnaW5hdGlvblxuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VMb2FkTW9yZShhcmdzKSB7XG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShmYWxzZSksXG4gICAgICBpc0xvYWRpbmdNb3JlID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0SXNMb2FkaW5nTW9yZSA9IF91c2VTdGF0ZVsxXTtcblxuICB2YXIgb2JzZXJ2ZXIgPSB7XG4gICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgcmV0dXJuIHNldElzTG9hZGluZ01vcmUodHJ1ZSk7XG4gICAgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICByZXR1cm4gc2V0SXNMb2FkaW5nTW9yZShmYWxzZSk7XG4gICAgfSxcbiAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgICByZXR1cm4gc2V0SXNMb2FkaW5nTW9yZShmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVSZXNldCA9IGZ1bmN0aW9uIGhhbmRsZVJlc2V0KCkge1xuICAgIHJldHVybiBzZXRJc0xvYWRpbmdNb3JlKGZhbHNlKTtcbiAgfTtcblxuICB2YXIgX3VzZUxvYWRNb3JlRnVuY3Rpb24gPSB1c2VMb2FkTW9yZUZ1bmN0aW9uKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCBhcmdzKSwge30sIHtcbiAgICBvYnNlcnZlcjogb2JzZXJ2ZXIsXG4gICAgb25SZXNldDogaGFuZGxlUmVzZXRcbiAgfSkpLFxuICAgICAgbG9hZE1vcmUgPSBfdXNlTG9hZE1vcmVGdW5jdGlvblswXSxcbiAgICAgIGhhc01vcmUgPSBfdXNlTG9hZE1vcmVGdW5jdGlvblsxXSxcbiAgICAgIGRpc3Bvc2VGZXRjaCA9IF91c2VMb2FkTW9yZUZ1bmN0aW9uWzJdO1xuXG4gIHJldHVybiBbbG9hZE1vcmUsIGhhc01vcmUsIGlzTG9hZGluZ01vcmUsIGRpc3Bvc2VGZXRjaF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXNlUGFnaW5hdGlvbkZyYWdtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgdXNlTGF6eUxvYWRRdWVyeU5vZGUgPSByZXF1aXJlKCcuL3VzZUxhenlMb2FkUXVlcnlOb2RlJyk7XG5cbnZhciB1c2VNZW1vT3BlcmF0aW9uRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vdXNlTWVtb09wZXJhdGlvbkRlc2NyaXB0b3InKTtcblxudmFyIHVzZVJlbGF5RW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL3VzZVJlbGF5RW52aXJvbm1lbnQnKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9sb2FkUXVlcnknKSxcbiAgICB1c2VUcmFja0xvYWRRdWVyeUluUmVuZGVyID0gX3JlcXVpcmUudXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlcjtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdXNlRGVidWdWYWx1ZSA9IF9yZXF1aXJlMi51c2VEZWJ1Z1ZhbHVlO1xuXG52YXIgX3JlcXVpcmUzID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIF9yZXF1aXJlMyRfX2ludGVybmFsID0gX3JlcXVpcmUzLl9faW50ZXJuYWwsXG4gICAgZmV0Y2hRdWVyeURlZHVwZWQgPSBfcmVxdWlyZTMkX19pbnRlcm5hbC5mZXRjaFF1ZXJ5RGVkdXBlZCxcbiAgICBmZXRjaFF1ZXJ5ID0gX3JlcXVpcmUzJF9faW50ZXJuYWwuZmV0Y2hRdWVyeTtcblxuZnVuY3Rpb24gdXNlUHJlbG9hZGVkUXVlcnkoZ3FsUXVlcnksIHByZWxvYWRlZFF1ZXJ5LCBvcHRpb25zKSB7XG4gIC8vIFdlIG5lZWQgdG8gdXNlIHRoaXMgaG9vayBpbiBvcmRlciB0byBiZSBhYmxlIHRvIHRyYWNrIGlmXG4gIC8vIGxvYWRRdWVyeSB3YXMgY2FsbGVkIGR1cmluZyByZW5kZXJcbiAgdXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlcigpO1xuICB2YXIgZW52aXJvbm1lbnQgPSB1c2VSZWxheUVudmlyb25tZW50KCk7XG4gIHZhciBmZXRjaEtleSA9IHByZWxvYWRlZFF1ZXJ5LmZldGNoS2V5LFxuICAgICAgZmV0Y2hQb2xpY3kgPSBwcmVsb2FkZWRRdWVyeS5mZXRjaFBvbGljeSxcbiAgICAgIHNvdXJjZSA9IHByZWxvYWRlZFF1ZXJ5LnNvdXJjZSxcbiAgICAgIHZhcmlhYmxlcyA9IHByZWxvYWRlZFF1ZXJ5LnZhcmlhYmxlcyxcbiAgICAgIG5ldHdvcmtDYWNoZUNvbmZpZyA9IHByZWxvYWRlZFF1ZXJ5Lm5ldHdvcmtDYWNoZUNvbmZpZztcbiAgdmFyIG9wZXJhdGlvbiA9IHVzZU1lbW9PcGVyYXRpb25EZXNjcmlwdG9yKGdxbFF1ZXJ5LCB2YXJpYWJsZXMsIG5ldHdvcmtDYWNoZUNvbmZpZyk7XG4gIHZhciB1c2VMYXp5TG9hZFF1ZXJ5Tm9kZVBhcmFtcztcblxuICBpZiAocHJlbG9hZGVkUXVlcnkua2luZCA9PT0gJ1ByZWxvYWRlZFF1ZXJ5X0RFUFJFQ0FURUQnKSB7XG4gICAgIShvcGVyYXRpb24ucmVxdWVzdC5ub2RlLnBhcmFtcy5uYW1lID09PSBwcmVsb2FkZWRRdWVyeS5uYW1lKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ3VzZVByZWxvYWRlZFF1ZXJ5KCk6IEV4cGVjdGVkIGRhdGEgdG8gYmUgcHJlZmV0Y2hlZCBmb3IgcXVlcnkgYCVzYCwgJyArICdnb3QgcHJlZmV0Y2ggcmVzdWx0cyBmb3IgcXVlcnkgYCVzYC4nLCBvcGVyYXRpb24ucmVxdWVzdC5ub2RlLnBhcmFtcy5uYW1lLCBwcmVsb2FkZWRRdWVyeS5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdXNlTGF6eUxvYWRRdWVyeU5vZGVQYXJhbXMgPSB7XG4gICAgICBjb21wb25lbnREaXNwbGF5TmFtZTogJ3VzZVByZWxvYWRlZFF1ZXJ5KCknLFxuICAgICAgZmV0Y2hLZXk6IGZldGNoS2V5LFxuICAgICAgZmV0Y2hPYnNlcnZhYmxlOiBmZXRjaFF1ZXJ5RGVkdXBlZChlbnZpcm9ubWVudCwgb3BlcmF0aW9uLnJlcXVlc3QuaWRlbnRpZmllciwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZW52aXJvbm1lbnQgPT09IHByZWxvYWRlZFF1ZXJ5LmVudmlyb25tZW50ICYmIHNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGVudmlyb25tZW50LmV4ZWN1dGVXaXRoU291cmNlKHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgICAgICAgICAgc291cmNlOiBzb3VyY2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZW52aXJvbm1lbnQuZXhlY3V0ZSh7XG4gICAgICAgICAgICBvcGVyYXRpb246IG9wZXJhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIGZldGNoUG9saWN5OiBmZXRjaFBvbGljeSxcbiAgICAgIHF1ZXJ5OiBvcGVyYXRpb24sXG4gICAgICByZW5kZXJQb2xpY3k6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5VTlNUQUJMRV9yZW5kZXJQb2xpY3lcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJlbG9hZGVkUXVlcnkuaXNEaXNwb3NlZCA9PT0gZmFsc2UsICd1c2VQcmVsb2FkZWRRdWVyeSgpOiBFeHBlY3RlZCBwcmVsb2FkZWRRdWVyeSB0byBub3QgYmUgZGlzcG9zZWQgeWV0LiAnICsgJ1RoaXMgaXMgYmVjYXVzZSBkaXNwb3NpbmcgdGhlIHF1ZXJ5IG1hcmtzIGl0IGZvciBmdXR1cmUgZ2FyYmFnZSAnICsgJ2NvbGxlY3Rpb24sIGFuZCBhcyBzdWNoIHF1ZXJ5IHJlc3VsdHMgbWF5IG5vIGxvbmdlciBiZSBwcmVzZW50IGluIHRoZSBSZWxheSAnICsgJ3N0b3JlLiBJbiB0aGUgZnV0dXJlLCB0aGlzIHdpbGwgYmVjb21lIGEgaGFyZCBlcnJvci4nKSA6IHZvaWQgMDtcbiAgICB2YXIgZmFsbGJhY2tGZXRjaE9ic2VydmFibGUgPSBmZXRjaFF1ZXJ5KGVudmlyb25tZW50LCBvcGVyYXRpb24pO1xuICAgIHZhciBmZXRjaE9ic2VydmFibGU7XG5cbiAgICBpZiAoc291cmNlICE9IG51bGwgJiYgZW52aXJvbm1lbnQgPT09IHByZWxvYWRlZFF1ZXJ5LmVudmlyb25tZW50KSB7XG4gICAgICAvLyBJZiB0aGUgc291cmNlIG9ic2VydmFibGUgZXhpc3RzIGFuZCB0aGUgZW52aXJvbm1lbnRzIG1hdGNoLCByZXVzZVxuICAgICAgLy8gdGhlIHNvdXJjZSBvYnNlcnZhYmxlLlxuICAgICAgLy8gSWYgdGhlIHNvdXJjZSBvYnNlcnZhYmxlIGhhcHBlbnMgdG8gYmUgZW1wdHksIHdlIG5lZWQgdG8gZmFsbCBiYWNrXG4gICAgICAvLyBhbmQgcmUtZXhlY3V0ZSBhbmQgZGUtZHVwZSB0aGUgcXVlcnkgKGF0IHJlbmRlciB0aW1lKS5cbiAgICAgIGZldGNoT2JzZXJ2YWJsZSA9IHNvdXJjZS5pZkVtcHR5KGZhbGxiYWNrRmV0Y2hPYnNlcnZhYmxlKTtcbiAgICB9IGVsc2UgaWYgKGVudmlyb25tZW50ICE9PSBwcmVsb2FkZWRRdWVyeS5lbnZpcm9ubWVudCkge1xuICAgICAgLy8gSWYgYSBjYWxsIHRvIGxvYWRRdWVyeSBpcyBtYWRlIHdpdGggYSBwYXJ0aWN1bGFyIGVudmlyb25tZW50LCBhbmQgdGhhdFxuICAgICAgLy8gcHJlbG9hZGVkIHF1ZXJ5IGlzIHBhc3NlZCB0byB1c2VQcmVsb2FkZWRRdWVyeSBpbiBhIGRpZmZlcmVudCBlbnZpcm9ubWVudFxuICAgICAgLy8gY29udGV4dCwgd2UgY2Fubm90IHJlLXVzZSB0aGUgZXhpc3RpbmcgcHJlbG9hZGVkIHF1ZXJ5LlxuICAgICAgLy8gSW5zdGVhZCwgd2UgbmVlZCB0byBmYWxsIGJhY2sgYW5kIHJlLWV4ZWN1dGUgYW5kIGRlLWR1cGUgdGhlIHF1ZXJ5IHdpdGhcbiAgICAgIC8vIHRoZSBuZXcgZW52aXJvbm1lbnQgKGF0IHJlbmRlciB0aW1lKS5cbiAgICAgIC8vIFRPRE8gVDY4MDM2NzU2IHRyYWNrIG9jY3VyZW5jZXMgb2YgdGhpcyB3YXJuaW5nIGFuZCB0dXJuIGl0IGludG8gYSBoYXJkIGVycm9yXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAndXNlUHJlbG9hZGVkUXVlcnkoKTogdXNlUHJlbG9hZGVkUXVlcnkgd2FzIHBhc3NlZCBhIHByZWxvYWRlZCBxdWVyeSAnICsgJ3RoYXQgd2FzIGNyZWF0ZWQgd2l0aCBhIGRpZmZlcmVudCBlbnZpcm9ubWVudCB0aGFuIHRoZSBvbmUgdGhhdCBpcyBjdXJyZW50bHkgJyArICdpbiBjb250ZXh0LiBJbiB0aGUgZnV0dXJlLCB0aGlzIHdpbGwgYmVjb21lIGEgaGFyZCBlcnJvci4nKSA6IHZvaWQgMDtcbiAgICAgIGZldGNoT2JzZXJ2YWJsZSA9IGZhbGxiYWNrRmV0Y2hPYnNlcnZhYmxlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiAoc291cmNlID09IG51bGwpXG4gICAgICAvLyBJZiB0aGUgc291cmNlIG9ic2VydmFibGUgZG9lcyBub3QgZXhpc3QsIHdlIG5lZWQgdG9cbiAgICAgIC8vIGZhbGwgYmFjayBhbmQgcmUtZXhlY3V0ZSBhbmQgZGUtZHVwZSB0aGUgcXVlcnkgKGF0IHJlbmRlciB0aW1lKS5cbiAgICAgIGZldGNoT2JzZXJ2YWJsZSA9IGZhbGxiYWNrRmV0Y2hPYnNlcnZhYmxlO1xuICAgIH1cblxuICAgIHVzZUxhenlMb2FkUXVlcnlOb2RlUGFyYW1zID0ge1xuICAgICAgY29tcG9uZW50RGlzcGxheU5hbWU6ICd1c2VQcmVsb2FkZWRRdWVyeSgpJyxcbiAgICAgIGZldGNoT2JzZXJ2YWJsZTogZmV0Y2hPYnNlcnZhYmxlLFxuICAgICAgZmV0Y2hLZXk6IGZldGNoS2V5LFxuICAgICAgZmV0Y2hQb2xpY3k6IGZldGNoUG9saWN5LFxuICAgICAgcXVlcnk6IG9wZXJhdGlvbixcbiAgICAgIHJlbmRlclBvbGljeTogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLlVOU1RBQkxFX3JlbmRlclBvbGljeVxuICAgIH07XG4gIH1cblxuICB2YXIgZGF0YSA9IHVzZUxhenlMb2FkUXVlcnlOb2RlKHVzZUxhenlMb2FkUXVlcnlOb2RlUGFyYW1zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgdXNlRGVidWdWYWx1ZSh7XG4gICAgICBxdWVyeTogcHJlbG9hZGVkUXVlcnkubmFtZSxcbiAgICAgIHZhcmlhYmxlczogcHJlbG9hZGVkUXVlcnkudmFyaWFibGVzLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIGZldGNoS2V5OiBmZXRjaEtleSxcbiAgICAgIGZldGNoUG9saWN5OiBmZXRjaFBvbGljeSxcbiAgICAgIHJlbmRlclBvbGljeTogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLlVOU1RBQkxFX3JlbmRlclBvbGljeVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXNlUHJlbG9hZGVkUXVlcnk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlclwiKSk7XG5cbnZhciB1c2VJc01vdW50ZWRSZWYgPSByZXF1aXJlKCcuL3VzZUlzTW91bnRlZFJlZicpO1xuXG52YXIgdXNlUmVsYXlFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vdXNlUmVsYXlFbnZpcm9ubWVudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2xvYWRRdWVyeScpLFxuICAgIGxvYWRRdWVyeSA9IF9yZXF1aXJlLmxvYWRRdWVyeSxcbiAgICB1c2VUcmFja0xvYWRRdWVyeUluUmVuZGVyID0gX3JlcXVpcmUudXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlcjtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdXNlQ2FsbGJhY2sgPSBfcmVxdWlyZTIudXNlQ2FsbGJhY2ssXG4gICAgdXNlRWZmZWN0ID0gX3JlcXVpcmUyLnVzZUVmZmVjdCxcbiAgICB1c2VSZWYgPSBfcmVxdWlyZTIudXNlUmVmLFxuICAgIHVzZVN0YXRlID0gX3JlcXVpcmUyLnVzZVN0YXRlO1xuXG52YXIgaW5pdGlhbE51bGxRdWVyeVJlZmVyZW5jZVN0YXRlID0ge1xuICBraW5kOiAnTnVsbFF1ZXJ5UmVmZXJlbmNlJ1xufTtcblxuZnVuY3Rpb24gdXNlUXVlcnlMb2FkZXIocHJlbG9hZGFibGVSZXF1ZXN0LCBpbml0aWFsUXVlcnlSZWZlcmVuY2UpIHtcbiAgLyoqXG4gICAqIFdlIHdhbnQgdG8gYWx3YXlzIGNhbGwgYHF1ZXJ5UmVmZXJlbmNlLmRpc3Bvc2UoKWAgZm9yIGV2ZXJ5IGNhbGwgdG9cbiAgICogYHNldFF1ZXJ5UmVmZXJlbmNlKGxvYWRRdWVyeSguLi4pKWAgc28gdGhhdCBubyBsZWFrcyBvZiBkYXRhIGluIFJlbGF5IHN0b3Jlc1xuICAgKiB3aWxsIG9jY3VyLlxuICAgKlxuICAgKiBIb3dldmVyLCBhIGNhbGwgdG8gYHNldFN0YXRlKG5ld1N0YXRlKWAgaXMgbm90IGFsd2F5cyBmb2xsb3dlZCBieSBhIGNvbW1pdCB3aGVyZVxuICAgKiB0aGlzIHZhbHVlIGlzIHJlZmxlY3RlZCBpbiB0aGUgc3RhdGUuIFRodXMsIHdlIGNhbm5vdCByZWxpYWJseSBjbGVhbiB1cCBlYWNoXG4gICAqIHJlZiB3aXRoIGB1c2VFZmZlY3QoKCkgPT4gKCkgPT4gcXVlcnlSZWZlcmVuY2UuZGlzcG9zZSgpLCBbcXVlcnlSZWZlcmVuY2VdKWAuXG4gICAqXG4gICAqIEluc3RlYWQsIHdlIGtlZXAgdHJhY2sgb2YgZWFjaCBjYWxsIHRvIGBsb2FkUXVlcnlgIGluIGEgcmVmLlxuICAgKiBSZWx5aW5nIG9uIHRoZSBmYWN0IHRoYXQgaWYgYSBzdGF0ZSBjaGFuZ2UgY29tbWl0cywgbm8gc3RhdGUgY2hhbmdlcyB0aGF0IHdlcmVcbiAgICogaW5pdGlhdGVkIHByaW9yIHRvIHRoZSBjdXJyZW50bHkgY29tbWl0dGluZyBzdGF0ZSBjaGFuZ2Ugd2lsbCBldmVyIHN1YnNlcXVlbnRseVxuICAgKiBjb21taXQsIHdlIGNhbiBzYWZlbHkgZGlzcG9zZSBvZiBhbGwgcHJlbG9hZGVkIHF1ZXJ5IHJlZmVyZW5jZXNcbiAgICogYXNzb2NpYXRlZCB3aXRoIHN0YXRlIGNoYW5nZXMgaW5pdGlhdGVkIHByaW9yIHRvIHRoZSBjdXJyZW50bHkgY29tbWl0dGluZyBzdGF0ZVxuICAgKiBjaGFuZ2UuXG4gICAqXG4gICAqIEZpbmFsbHksIHdoZW4gdGhlIGhvb2sgdW5tb3VudHMsIHdlIGFsc28gZGlzcG9zZSBvZiBhbGwgcmVtYWluaW5nIHVuY29tbWl0dGVkXG4gICAqIHF1ZXJ5IHJlZmVyZW5jZXMuXG4gICAqL1xuICB2YXIgaW5pdGlhbFF1ZXJ5UmVmZXJlbmNlSW50ZXJuYWwgPSBpbml0aWFsUXVlcnlSZWZlcmVuY2UgIT09IG51bGwgJiYgaW5pdGlhbFF1ZXJ5UmVmZXJlbmNlICE9PSB2b2lkIDAgPyBpbml0aWFsUXVlcnlSZWZlcmVuY2UgOiBpbml0aWFsTnVsbFF1ZXJ5UmVmZXJlbmNlU3RhdGU7XG4gIHZhciBlbnZpcm9ubWVudCA9IHVzZVJlbGF5RW52aXJvbm1lbnQoKTtcbiAgdXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlcigpO1xuICB2YXIgaXNNb3VudGVkUmVmID0gdXNlSXNNb3VudGVkUmVmKCk7XG4gIHZhciB1bmRpc3Bvc2VkUXVlcnlSZWZlcmVuY2VzUmVmID0gdXNlUmVmKG5ldyBTZXQoW2luaXRpYWxRdWVyeVJlZmVyZW5jZUludGVybmFsXSkpO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGluaXRpYWxRdWVyeVJlZmVyZW5jZUludGVybmFsO1xuICB9KSxcbiAgICAgIHF1ZXJ5UmVmZXJlbmNlID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0UXVlcnlSZWZlcmVuY2UgPSBfdXNlU3RhdGVbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTIgPSB1c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGluaXRpYWxRdWVyeVJlZmVyZW5jZUludGVybmFsO1xuICB9KSxcbiAgICAgIHByZXZpb3VzSW5pdGlhbFF1ZXJ5UmVmZXJlbmNlID0gX3VzZVN0YXRlMlswXSxcbiAgICAgIHNldFByZXZpb3VzSW5pdGlhbFF1ZXJ5UmVmZXJlbmNlID0gX3VzZVN0YXRlMlsxXTtcblxuICBpZiAoaW5pdGlhbFF1ZXJ5UmVmZXJlbmNlSW50ZXJuYWwgIT09IHByZXZpb3VzSW5pdGlhbFF1ZXJ5UmVmZXJlbmNlKSB7XG4gICAgLy8gUmVuZGVyaW5nIHRoZSBxdWVyeSByZWZlcmVuY2UgbWFrZXMgaXQgXCJtYW5hZ2VkXCIgYnkgdGhpcyBob29rLCBzb1xuICAgIC8vIHdlIHN0YXJ0IGtlZXBpbmcgdHJhY2sgb2YgaXQgc28gd2UgY2FuIGRpc3Bvc2UgaXQgd2hlbiBpdCBpcyBubyBsb25nZXJcbiAgICAvLyBuZWNlc3NhcnkgaGVyZVxuICAgIC8vIFRPRE8oVDc4NDQ2NjM3KTogSGFuZGxlIGRpc3Bvc2FsIG9mIG1hbmFnZWQgcXVlcnkgcmVmZXJlbmNlcyBpblxuICAgIC8vIGNvbXBvbmVudHMgdGhhdCB3ZXJlIG5ldmVyIG1vdW50ZWQgYWZ0ZXIgcmVuZGVyaW5nXG4gICAgdW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlc1JlZi5jdXJyZW50LmFkZChpbml0aWFsUXVlcnlSZWZlcmVuY2VJbnRlcm5hbCk7XG4gICAgc2V0UHJldmlvdXNJbml0aWFsUXVlcnlSZWZlcmVuY2UoaW5pdGlhbFF1ZXJ5UmVmZXJlbmNlSW50ZXJuYWwpO1xuICAgIHNldFF1ZXJ5UmVmZXJlbmNlKGluaXRpYWxRdWVyeVJlZmVyZW5jZUludGVybmFsKTtcbiAgfVxuXG4gIHZhciBkaXNwb3NlUXVlcnkgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlzTW91bnRlZFJlZi5jdXJyZW50KSB7XG4gICAgICB1bmRpc3Bvc2VkUXVlcnlSZWZlcmVuY2VzUmVmLmN1cnJlbnQuYWRkKGluaXRpYWxOdWxsUXVlcnlSZWZlcmVuY2VTdGF0ZSk7XG4gICAgICBzZXRRdWVyeVJlZmVyZW5jZShpbml0aWFsTnVsbFF1ZXJ5UmVmZXJlbmNlU3RhdGUpO1xuICAgIH1cbiAgfSwgW2lzTW91bnRlZFJlZl0pO1xuICB2YXIgcXVlcnlMb2FkZXJDYWxsYmFjayA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICh2YXJpYWJsZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgbWVyZ2VkT3B0aW9ucyA9IG9wdGlvbnMgIT0gbnVsbCAmJiBvcHRpb25zLmhhc093blByb3BlcnR5KCdfX2Vudmlyb25tZW50JykgPyB7XG4gICAgICBmZXRjaFBvbGljeTogb3B0aW9ucy5mZXRjaFBvbGljeSxcbiAgICAgIG5ldHdvcmtDYWNoZUNvbmZpZzogb3B0aW9ucy5uZXR3b3JrQ2FjaGVDb25maWcsXG4gICAgICBfX25hbWVGb3JXYXJuaW5nOiBvcHRpb25zLl9fbmFtZUZvcldhcm5pbmdcbiAgICB9IDogb3B0aW9ucztcblxuICAgIGlmIChpc01vdW50ZWRSZWYuY3VycmVudCkge1xuICAgICAgdmFyIF9vcHRpb25zJF9fZW52aXJvbm1lbjtcblxuICAgICAgdmFyIHVwZGF0ZWRRdWVyeVJlZmVyZW5jZSA9IGxvYWRRdWVyeSgoX29wdGlvbnMkX19lbnZpcm9ubWVuID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLl9fZW52aXJvbm1lbnQpICE9PSBudWxsICYmIF9vcHRpb25zJF9fZW52aXJvbm1lbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkX19lbnZpcm9ubWVuIDogZW52aXJvbm1lbnQsIHByZWxvYWRhYmxlUmVxdWVzdCwgdmFyaWFibGVzLCBtZXJnZWRPcHRpb25zKTtcbiAgICAgIHVuZGlzcG9zZWRRdWVyeVJlZmVyZW5jZXNSZWYuY3VycmVudC5hZGQodXBkYXRlZFF1ZXJ5UmVmZXJlbmNlKTtcbiAgICAgIHNldFF1ZXJ5UmVmZXJlbmNlKHVwZGF0ZWRRdWVyeVJlZmVyZW5jZSk7XG4gICAgfVxuICB9LCBbZW52aXJvbm1lbnQsIHByZWxvYWRhYmxlUmVxdWVzdCwgc2V0UXVlcnlSZWZlcmVuY2UsIGlzTW91bnRlZFJlZl0pO1xuICB2YXIgbWF5YmVIaWRkZW5PckZhc3RSZWZyZXNoID0gdXNlUmVmKGZhbHNlKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gQXR0ZW1wdCB0byBkZXRlY3QgaWYgdGhlIGNvbXBvbmVudCB3YXNcbiAgICAgIC8vIGhpZGRlbiAoYnkgT2Zmc2NyZWVuIEFQSSksIG9yIGZhc3QgcmVmcmVzaCBvY2N1cmVkO1xuICAgICAgLy8gT25seSBpbiB0aGVzZSBzaXR1YXRpb25zIHdvdWxkIHRoZSBlZmZlY3QgY2xlYW51cFxuICAgICAgLy8gZm9yIFwidW5tb3VudGluZ1wiIHJ1biBtdWx0aXBsZSB0aW1lcywgc28gaWZcbiAgICAgIC8vIHdlIGFyZSBldmVyIGFibGUgdG8gcmVhZCB0aGlzIHJlZiB3aXRoIGEgdmFsdWVcbiAgICAgIC8vIG9mIHRydWUsIGl0IG1lYW5zIHRoYXQgb25lIG9mIHRoZXNlIGNhc2VzXG4gICAgICAvLyBoYXMgaGFwcGVuZWQuXG4gICAgICBtYXliZUhpZGRlbk9yRmFzdFJlZnJlc2guY3VycmVudCA9IHRydWU7XG4gICAgfTtcbiAgfSwgW10pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChtYXliZUhpZGRlbk9yRmFzdFJlZnJlc2guY3VycmVudCA9PT0gdHJ1ZSkge1xuICAgICAgLy8gVGhpcyBibG9jayBvbmx5IHJ1bnMgaWYgdGhlIGNvbXBvbmVudCBoYXMgcHJldmlvdXNseSBcInVubW91bnRlZFwiXG4gICAgICAvLyBkdWUgdG8gaXQgYmVpbmcgaGlkZGVuIGJ5IHRoZSBPZmZzY3JlZW4gQVBJLCBvciBkdXJpbmcgZmFzdCByZWZyZXNoLlxuICAgICAgLy8gQXQgdGhpcyBwb2ludCwgdGhlIGN1cnJlbnQgcXVlcnlSZWZlcmVuY2Ugd2lsbCBoYXZlIGJlZW4gZGlzcG9zZWRcbiAgICAgIC8vIGJ5IHRoZSBwcmV2aW91cyBjbGVhbnVwLCBzbyBpbnN0ZWFkIG9mIGF0dGVtcHRpbmcgdG9cbiAgICAgIC8vIGRvIG91ciByZWd1bGFyIGNvbW1pdCBzZXR1cCwgd2hpY2ggd291bGQgaW5jb3JyZWN0bHkgbGVhdmUgb3VyXG4gICAgICAvLyBjdXJyZW50IHF1ZXJ5UmVmZXJlbmNlIGRpc3Bvc2VkLCB3ZSBuZWVkIHRvIGxvYWQgdGhlIHF1ZXJ5IGFnYWluXG4gICAgICAvLyBhbmQgZm9yY2UgYSByZS1yZW5kZXIgYnkgY2FsbGluZyBxdWVyeUxvYWRlckNhbGxiYWNrIGFnYWluLFxuICAgICAgLy8gc28gdGhhdCB0aGUgcXVlcnlSZWZlcmVuY2UgaXMgY29ycmVjdGx5IHJlLXJldGFpbmVkLCBhbmRcbiAgICAgIC8vIHBvdGVudGlhbGx5IHJlZmV0Y2hlZCBpZiBuZWNlc3NhcnkuXG4gICAgICBtYXliZUhpZGRlbk9yRmFzdFJlZnJlc2guY3VycmVudCA9IGZhbHNlO1xuXG4gICAgICBpZiAocXVlcnlSZWZlcmVuY2Uua2luZCAhPT0gJ051bGxRdWVyeVJlZmVyZW5jZScpIHtcbiAgICAgICAgcXVlcnlMb2FkZXJDYWxsYmFjayhxdWVyeVJlZmVyZW5jZS52YXJpYWJsZXMsIHtcbiAgICAgICAgICBmZXRjaFBvbGljeTogcXVlcnlSZWZlcmVuY2UuZmV0Y2hQb2xpY3ksXG4gICAgICAgICAgbmV0d29ya0NhY2hlQ29uZmlnOiBxdWVyeVJlZmVyZW5jZS5uZXR3b3JrQ2FjaGVDb25maWdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFdoZW4gYSBuZXcgcXVlcnlSZWZlcmVuY2UgaXMgY29tbWl0dGVkLCB3ZSBpdGVyYXRlIG92ZXIgYWxsXG4gICAgLy8gcXVlcnkgcmVmZXJlbmNlcyBpbiB1bmRpc3Bvc2VkUXVlcnlSZWZlcmVuY2VzIGFuZCBkaXNwb3NlIGFsbCBvZlxuICAgIC8vIHRoZSByZWZzIHRoYXQgYXJlbid0IHRoZSBjdXJyZW50bHkgY29tbWl0dGVkIG9uZS4gVGhpcyBlbnN1cmVzXG4gICAgLy8gdGhhdCB3ZSBkb24ndCBsZWF2ZSBhbnkgZGFuZ2xpbmcgcXVlcnkgcmVmZXJlbmNlcyBmb3IgdGhlXG4gICAgLy8gY2FzZSB0aGF0IGxvYWRRdWVyeSBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMgYmVmb3JlIGNvbW1pdDsgd2hlblxuICAgIC8vIHRoaXMgaGFwcGVucywgbXVsdGlwbGUgc3RhdGUgdXBkYXRlcyB3aWxsIGJlIHNjaGVkdWxlZCwgYnV0IG9ubHkgb25lXG4gICAgLy8gd2lsbCBjb21taXQsIG1lYW5pbmcgdGhhdCB3ZSBuZWVkIHRvIGtlZXAgdHJhY2sgb2YgYW5kIGRpc3Bvc2UgYW55XG4gICAgLy8gcXVlcnkgcmVmZXJlbmNlcyB0aGF0IGRvbid0IGVuZCB1cCBjb21taXR0aW5nLlxuICAgIC8vIC0gV2UgYXJlIHJlbHlpbmcgb24gdGhlIGZhY3QgdGhhdCBzZXRzIGl0ZXJhdGUgaW4gaW5zZXJ0aW9uIG9yZGVyLCBhbmQgd2VcbiAgICAvLyBjYW4gcmVtb3ZlIGl0ZW1zIGZyb20gYSBzZXQgYXMgd2UgaXRlcmF0ZSBvdmVyIGl0IChpLmUuIG5vIGl0ZXJhdG9yXG4gICAgLy8gaW52YWxpZGF0aW9uIGlzc3Vlcy4pIFRodXMsIGl0IGlzIHNhZmUgdG8gbG9vcCB0aHJvdWdoXG4gICAgLy8gdW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlcyB1bnRpbCB3ZSBmaW5kIHF1ZXJ5UmVmZXJlbmNlLCBhbmRcbiAgICAvLyByZW1vdmUgYW5kIGRpc3Bvc2UgYWxsIHByZXZpb3VzIHJlZmVyZW5jZXMuXG4gICAgLy8gLSBXZSBhcmUgZ3VhcmFudGVlZCB0byBmaW5kIHF1ZXJ5UmVmZXJlbmNlIGluIHRoZSBzZXQsIGJlY2F1c2UgaWYgYVxuICAgIC8vIHN0YXRlIHVwZGF0ZSByZXN1bHRzIGluIGEgY29tbWl0LCBubyBzdGF0ZSB1cGRhdGVzIGluaXRpYXRlZCBwcmlvciB0byB0aGF0XG4gICAgLy8gb25lIHdpbGwgYmUgY29tbWl0dGVkLCBhbmQgd2UgYXJlIGRpc3Bvc2luZyBhbmQgcmVtb3ZpbmcgcmVmZXJlbmNlc1xuICAgIC8vIGFzc29jaWF0ZWQgd2l0aCB1cGRhdGVzIHRoYXQgd2VyZSBzY2hlZHVsZWQgcHJpb3IgdG8gdGhlIGN1cnJlbnRseVxuICAgIC8vIGNvbW1pdHRpbmcgc3RhdGUgY2hhbmdlLiAoQSB1c2VFZmZlY3QgY2FsbGJhY2sgaXMgY2FsbGVkIGR1cmluZyB0aGUgY29tbWl0XG4gICAgLy8gcGhhc2UuKVxuXG5cbiAgICB2YXIgdW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlcyA9IHVuZGlzcG9zZWRRdWVyeVJlZmVyZW5jZXNSZWYuY3VycmVudDtcblxuICAgIGlmIChpc01vdW50ZWRSZWYuY3VycmVudCkge1xuICAgICAgdmFyIF9pdGVyYXRvciA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKSh1bmRpc3Bvc2VkUXVlcnlSZWZlcmVuY2VzKSxcbiAgICAgICAgICBfc3RlcDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgdW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICBpZiAodW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlID09PSBxdWVyeVJlZmVyZW5jZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlc1tcImRlbGV0ZVwiXSh1bmRpc3Bvc2VkUXVlcnlSZWZlcmVuY2UpO1xuXG4gICAgICAgICAgaWYgKHVuZGlzcG9zZWRRdWVyeVJlZmVyZW5jZS5raW5kICE9PSAnTnVsbFF1ZXJ5UmVmZXJlbmNlJykge1xuICAgICAgICAgICAgdW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlLmRpc3Bvc2UgJiYgdW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlLmRpc3Bvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtxdWVyeVJlZmVyZW5jZSwgaXNNb3VudGVkUmVmLCBxdWVyeUxvYWRlckNhbGxiYWNrXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRpc3Bvc2VBbGxSZW1haW5pbmdRdWVyeVJlZmVyZW5jZXMoKSB7XG4gICAgICAvLyB1bmRpc3Bvc2VkUXVlcnlSZWZlcmVuY2VzLmN1cnJlbnQgaXMgbmV2ZXIgcmVhc3NpZ25lZFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgICAgdmFyIF9pdGVyYXRvcjIgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkodW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlc1JlZi5jdXJyZW50KSxcbiAgICAgICAgICBfc3RlcDI7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIHVuaGFuZGxlZFN0YXRlQ2hhbmdlID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKHVuaGFuZGxlZFN0YXRlQ2hhbmdlLmtpbmQgIT09ICdOdWxsUXVlcnlSZWZlcmVuY2UnKSB7XG4gICAgICAgICAgICB1bmhhbmRsZWRTdGF0ZUNoYW5nZS5kaXNwb3NlICYmIHVuaGFuZGxlZFN0YXRlQ2hhbmdlLmRpc3Bvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjIuZigpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFtxdWVyeVJlZmVyZW5jZS5raW5kID09PSAnTnVsbFF1ZXJ5UmVmZXJlbmNlJyA/IG51bGwgOiBxdWVyeVJlZmVyZW5jZSwgcXVlcnlMb2FkZXJDYWxsYmFjaywgZGlzcG9zZVF1ZXJ5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VRdWVyeUxvYWRlcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1c2VSZWZldGNoYWJsZUZyYWdtZW50Tm9kZSA9IHJlcXVpcmUoJy4vdXNlUmVmZXRjaGFibGVGcmFnbWVudE5vZGUnKTtcblxudmFyIHVzZVN0YXRpY0ZyYWdtZW50Tm9kZVdhcm5pbmcgPSByZXF1aXJlKCcuL3VzZVN0YXRpY0ZyYWdtZW50Tm9kZVdhcm5pbmcnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICB1c2VEZWJ1Z1ZhbHVlID0gX3JlcXVpcmUudXNlRGVidWdWYWx1ZTtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBnZXRGcmFnbWVudCA9IF9yZXF1aXJlMi5nZXRGcmFnbWVudDtcblxuZnVuY3Rpb24gdXNlUmVmZXRjaGFibGVGcmFnbWVudChmcmFnbWVudElucHV0LCBmcmFnbWVudFJlZikge1xuICB2YXIgZnJhZ21lbnROb2RlID0gZ2V0RnJhZ21lbnQoZnJhZ21lbnRJbnB1dCk7XG4gIHVzZVN0YXRpY0ZyYWdtZW50Tm9kZVdhcm5pbmcoZnJhZ21lbnROb2RlLCAnZmlyc3QgYXJndW1lbnQgb2YgdXNlUmVmZXRjaGFibGVGcmFnbWVudCgpJyk7XG5cbiAgdmFyIF91c2VSZWZldGNoYWJsZUZyYWdtZSA9IHVzZVJlZmV0Y2hhYmxlRnJhZ21lbnROb2RlKGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWYsICd1c2VSZWZldGNoYWJsZUZyYWdtZW50KCknKSxcbiAgICAgIGZyYWdtZW50RGF0YSA9IF91c2VSZWZldGNoYWJsZUZyYWdtZS5mcmFnbWVudERhdGEsXG4gICAgICByZWZldGNoID0gX3VzZVJlZmV0Y2hhYmxlRnJhZ21lLnJlZmV0Y2g7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIHVzZURlYnVnVmFsdWUoe1xuICAgICAgZnJhZ21lbnQ6IGZyYWdtZW50Tm9kZS5uYW1lLFxuICAgICAgZGF0YTogZnJhZ21lbnREYXRhXG4gICAgfSk7XG4gIH1cbiAgLyogJEZsb3dFeHBlY3RlZEVycm9yW3Byb3AtbWlzc2luZ10gOiBFeHBvc2VkIG9wdGlvbnMgaXMgYSBzdWJzZXQgb2YgaW50ZXJuYWxcbiAgICogb3B0aW9ucyAqL1xuXG5cbiAgcmV0dXJuIFtmcmFnbWVudERhdGEsIHJlZmV0Y2hdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZVJlZmV0Y2hhYmxlRnJhZ21lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcblxudmFyIFByb2ZpbGVyQ29udGV4dCA9IHJlcXVpcmUoJy4vUHJvZmlsZXJDb250ZXh0Jyk7XG5cbnZhciBnZXRSZWZldGNoTWV0YWRhdGEgPSByZXF1aXJlKCcuL2dldFJlZmV0Y2hNZXRhZGF0YScpO1xuXG52YXIgZ2V0VmFsdWVBdFBhdGggPSByZXF1aXJlKCcuL2dldFZhbHVlQXRQYXRoJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHVzZUZyYWdtZW50Tm9kZSA9IHJlcXVpcmUoJy4vdXNlRnJhZ21lbnROb2RlJyk7XG5cbnZhciB1c2VJc01vdW50ZWRSZWYgPSByZXF1aXJlKCcuL3VzZUlzTW91bnRlZFJlZicpO1xuXG52YXIgdXNlUXVlcnlMb2FkZXIgPSByZXF1aXJlKCcuL3VzZVF1ZXJ5TG9hZGVyJyk7XG5cbnZhciB1c2VSZWxheUVudmlyb25tZW50ID0gcmVxdWlyZSgnLi91c2VSZWxheUVudmlyb25tZW50Jyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vRnJhZ21lbnRSZXNvdXJjZScpLFxuICAgIGdldEZyYWdtZW50UmVzb3VyY2VGb3JFbnZpcm9ubWVudCA9IF9yZXF1aXJlLmdldEZyYWdtZW50UmVzb3VyY2VGb3JFbnZpcm9ubWVudDtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vUXVlcnlSZXNvdXJjZScpLFxuICAgIGdldFF1ZXJ5UmVzb3VyY2VGb3JFbnZpcm9ubWVudCA9IF9yZXF1aXJlMi5nZXRRdWVyeVJlc291cmNlRm9yRW52aXJvbm1lbnQ7XG5cbnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHVzZUNhbGxiYWNrID0gX3JlcXVpcmUzLnVzZUNhbGxiYWNrLFxuICAgIHVzZUNvbnRleHQgPSBfcmVxdWlyZTMudXNlQ29udGV4dCxcbiAgICB1c2VSZWR1Y2VyID0gX3JlcXVpcmUzLnVzZVJlZHVjZXI7XG5cbnZhciBfcmVxdWlyZTQgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgZmV0Y2hRdWVyeSA9IF9yZXF1aXJlNC5fX2ludGVybmFsLmZldGNoUXVlcnksXG4gICAgY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvciA9IF9yZXF1aXJlNC5jcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yLFxuICAgIGdldEZyYWdtZW50SWRlbnRpZmllciA9IF9yZXF1aXJlNC5nZXRGcmFnbWVudElkZW50aWZpZXIsXG4gICAgZ2V0U2VsZWN0b3IgPSBfcmVxdWlyZTQuZ2V0U2VsZWN0b3I7XG5cbmZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAncmVmZXRjaCc6XG4gICAgICB7XG4gICAgICAgIHZhciBfYWN0aW9uJHJlZmV0Y2hFbnZpcm87XG5cbiAgICAgICAgcmV0dXJuICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCBzdGF0ZSksIHt9LCB7XG4gICAgICAgICAgZmV0Y2hQb2xpY3k6IGFjdGlvbi5mZXRjaFBvbGljeSxcbiAgICAgICAgICBtaXJyb3JlZEVudmlyb25tZW50OiAoX2FjdGlvbiRyZWZldGNoRW52aXJvID0gYWN0aW9uLnJlZmV0Y2hFbnZpcm9ubWVudCkgIT09IG51bGwgJiYgX2FjdGlvbiRyZWZldGNoRW52aXJvICE9PSB2b2lkIDAgPyBfYWN0aW9uJHJlZmV0Y2hFbnZpcm8gOiBzdGF0ZS5taXJyb3JlZEVudmlyb25tZW50LFxuICAgICAgICAgIG9uQ29tcGxldGU6IGFjdGlvbi5vbkNvbXBsZXRlLFxuICAgICAgICAgIHJlZmV0Y2hFbnZpcm9ubWVudDogYWN0aW9uLnJlZmV0Y2hFbnZpcm9ubWVudCxcbiAgICAgICAgICByZWZldGNoUXVlcnk6IGFjdGlvbi5yZWZldGNoUXVlcnksXG4gICAgICAgICAgcmVuZGVyUG9saWN5OiBhY3Rpb24ucmVuZGVyUG9saWN5XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgY2FzZSAncmVzZXQnOlxuICAgICAge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGZldGNoUG9saWN5OiB1bmRlZmluZWQsXG4gICAgICAgICAgbWlycm9yZWRFbnZpcm9ubWVudDogYWN0aW9uLmVudmlyb25tZW50LFxuICAgICAgICAgIG1pcnJvcmVkRnJhZ21lbnRJZGVudGlmaWVyOiBhY3Rpb24uZnJhZ21lbnRJZGVudGlmaWVyLFxuICAgICAgICAgIG9uQ29tcGxldGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICByZWZldGNoUXVlcnk6IG51bGwsXG4gICAgICAgICAgcmVuZGVyUG9saWN5OiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICB7XG4gICAgICAgIGFjdGlvbi50eXBlO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VzZVJlZmV0Y2hhYmxlRnJhZ21lbnROb2RlOiBVbmV4cGVjdGVkIGFjdGlvbiB0eXBlJyk7XG4gICAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlUmVmZXRjaGFibGVGcmFnbWVudE5vZGUoZnJhZ21lbnROb2RlLCBwYXJlbnRGcmFnbWVudFJlZiwgY29tcG9uZW50RGlzcGxheU5hbWUpIHtcbiAgdmFyIHBhcmVudEVudmlyb25tZW50ID0gdXNlUmVsYXlFbnZpcm9ubWVudCgpO1xuXG4gIHZhciBfZ2V0UmVmZXRjaE1ldGFkYXRhID0gZ2V0UmVmZXRjaE1ldGFkYXRhKGZyYWdtZW50Tm9kZSwgY29tcG9uZW50RGlzcGxheU5hbWUpLFxuICAgICAgcmVmZXRjaGFibGVSZXF1ZXN0ID0gX2dldFJlZmV0Y2hNZXRhZGF0YS5yZWZldGNoYWJsZVJlcXVlc3QsXG4gICAgICBmcmFnbWVudFJlZlBhdGhJblJlc3BvbnNlID0gX2dldFJlZmV0Y2hNZXRhZGF0YS5mcmFnbWVudFJlZlBhdGhJblJlc3BvbnNlLFxuICAgICAgaWRlbnRpZmllckZpZWxkID0gX2dldFJlZmV0Y2hNZXRhZGF0YS5pZGVudGlmaWVyRmllbGQ7XG5cbiAgdmFyIGZyYWdtZW50SWRlbnRpZmllciA9IGdldEZyYWdtZW50SWRlbnRpZmllcihmcmFnbWVudE5vZGUsIHBhcmVudEZyYWdtZW50UmVmKTtcblxuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHJlZHVjZXIsIHtcbiAgICBmZXRjaFBvbGljeTogdW5kZWZpbmVkLFxuICAgIG1pcnJvcmVkRW52aXJvbm1lbnQ6IHBhcmVudEVudmlyb25tZW50LFxuICAgIG1pcnJvcmVkRnJhZ21lbnRJZGVudGlmaWVyOiBmcmFnbWVudElkZW50aWZpZXIsXG4gICAgb25Db21wbGV0ZTogdW5kZWZpbmVkLFxuICAgIHJlZmV0Y2hFbnZpcm9ubWVudDogbnVsbCxcbiAgICByZWZldGNoUXVlcnk6IG51bGwsXG4gICAgcmVuZGVyUG9saWN5OiB1bmRlZmluZWRcbiAgfSksXG4gICAgICByZWZldGNoU3RhdGUgPSBfdXNlUmVkdWNlclswXSxcbiAgICAgIGRpc3BhdGNoID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIGZldGNoUG9saWN5ID0gcmVmZXRjaFN0YXRlLmZldGNoUG9saWN5LFxuICAgICAgbWlycm9yZWRFbnZpcm9ubWVudCA9IHJlZmV0Y2hTdGF0ZS5taXJyb3JlZEVudmlyb25tZW50LFxuICAgICAgbWlycm9yZWRGcmFnbWVudElkZW50aWZpZXIgPSByZWZldGNoU3RhdGUubWlycm9yZWRGcmFnbWVudElkZW50aWZpZXIsXG4gICAgICBvbkNvbXBsZXRlID0gcmVmZXRjaFN0YXRlLm9uQ29tcGxldGUsXG4gICAgICByZWZldGNoRW52aXJvbm1lbnQgPSByZWZldGNoU3RhdGUucmVmZXRjaEVudmlyb25tZW50LFxuICAgICAgcmVmZXRjaFF1ZXJ5ID0gcmVmZXRjaFN0YXRlLnJlZmV0Y2hRdWVyeSxcbiAgICAgIHJlbmRlclBvbGljeSA9IHJlZmV0Y2hTdGF0ZS5yZW5kZXJQb2xpY3k7XG4gIHZhciBlbnZpcm9ubWVudCA9IHJlZmV0Y2hFbnZpcm9ubWVudCAhPT0gbnVsbCAmJiByZWZldGNoRW52aXJvbm1lbnQgIT09IHZvaWQgMCA/IHJlZmV0Y2hFbnZpcm9ubWVudCA6IHBhcmVudEVudmlyb25tZW50O1xuICB2YXIgUXVlcnlSZXNvdXJjZSA9IGdldFF1ZXJ5UmVzb3VyY2VGb3JFbnZpcm9ubWVudChlbnZpcm9ubWVudCk7XG4gIHZhciBGcmFnbWVudFJlc291cmNlID0gZ2V0RnJhZ21lbnRSZXNvdXJjZUZvckVudmlyb25tZW50KGVudmlyb25tZW50KTtcbiAgdmFyIHByb2ZpbGVyQ29udGV4dCA9IHVzZUNvbnRleHQoUHJvZmlsZXJDb250ZXh0KTtcbiAgdmFyIHNob3VsZFJlc2V0ID0gZW52aXJvbm1lbnQgIT09IG1pcnJvcmVkRW52aXJvbm1lbnQgfHwgZnJhZ21lbnRJZGVudGlmaWVyICE9PSBtaXJyb3JlZEZyYWdtZW50SWRlbnRpZmllcjtcblxuICB2YXIgX3VzZVF1ZXJ5TG9hZGVyID0gdXNlUXVlcnlMb2FkZXIocmVmZXRjaGFibGVSZXF1ZXN0KSxcbiAgICAgIHF1ZXJ5UmVmID0gX3VzZVF1ZXJ5TG9hZGVyWzBdLFxuICAgICAgbG9hZFF1ZXJ5ID0gX3VzZVF1ZXJ5TG9hZGVyWzFdLFxuICAgICAgZGlzcG9zZVF1ZXJ5ID0gX3VzZVF1ZXJ5TG9hZGVyWzJdO1xuXG4gIHZhciBmcmFnbWVudFJlZiA9IHBhcmVudEZyYWdtZW50UmVmO1xuXG4gIGlmIChzaG91bGRSZXNldCkge1xuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6ICdyZXNldCcsXG4gICAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnQsXG4gICAgICBmcmFnbWVudElkZW50aWZpZXI6IGZyYWdtZW50SWRlbnRpZmllclxuICAgIH0pO1xuICAgIGRpc3Bvc2VRdWVyeSgpO1xuICB9IGVsc2UgaWYgKHJlZmV0Y2hRdWVyeSAhPSBudWxsICYmIHF1ZXJ5UmVmICE9IG51bGwpIHtcbiAgICAvLyBJZiByZWZldGNoIHdhcyBjYWxsZWQsIHdlIGV4cGVjdCB0byBoYXZlIGEgcmVmZXRjaFF1ZXJ5IGFuZCBxdWVyeVJlZlxuICAgIC8vIGluIHN0YXRlLCBzaW5jZSBib3RoIHN0YXRlIHVwZGF0ZXMgdG8gc2V0IHRoZSByZWZldGNoUXVlcnkgYW5kIHRoZVxuICAgIC8vIHF1ZXJ5UmVmIG9jY3VyIHNpbXVsdGFuZW91c2x5LlxuICAgIC8vIEluIHRoaXMgY2FzZSwgd2UgbmVlZCB0byByZWFkIHRoZSByZWZldGNoZWQgcXVlcnkgZGF0YSAocG90ZW50aWFsbHlcbiAgICAvLyBzdXNwZW5kaW5nIGlmIGl0J3MgaW4gZmxpZ2h0KSwgYW5kIGV4dHJhY3QgdGhlIG5ldyBmcmFnbWVudCByZWZcbiAgICAvLyBmcm9tIHRoZSBxdWVyeSBpbiBvcmRlciByZWFkIHRoZSBjdXJyZW50IEByZWZldGNoYWJsZSBmcmFnbWVudFxuICAgIC8vIHdpdGggdGhlIHVwZGF0ZWQgZnJhZ21lbnQgb3duZXIgYXMgdGhlIG5ldyByZWZldGNoUXVlcnkuXG4gICAgLy8gQmVmb3JlIG9ic2VydmluZyB0aGUgcmVmZXRjaCwgcmVjb3JkIHRoZSBjdXJyZW50IElEIGFuZCB0eXBlbmFtZVxuICAgIC8vIHNvIHRoYXQsIGlmIHdlIGFyZSByZWZldGNoaW5nIGV4aXN0aW5nIGRhdGEgb25cbiAgICAvLyBhIGZpZWxkIHRoYXQgaW1wbGVtZW50cyBOb2RlLCBhZnRlciByZWZldGNoaW5nIHdlXG4gICAgLy8gY2FuIHZhbGlkYXRlIHRoYXQgdGhlIHJlY2VpdmVkIGRhdGEgaXMgY29uc2lzdGVudFxuICAgIHZhciBkZWJ1Z1ByZXZpb3VzSURBbmRUeXBlbmFtZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGRlYnVnUHJldmlvdXNJREFuZFR5cGVuYW1lID0gZGVidWdGdW5jdGlvbnMuZ2V0SW5pdGlhbElEQW5kVHlwZShyZWZldGNoUXVlcnkucmVxdWVzdC52YXJpYWJsZXMsIGZyYWdtZW50UmVmUGF0aEluUmVzcG9uc2UsIGVudmlyb25tZW50KTtcbiAgICB9XG5cbiAgICB2YXIgaGFuZGxlUXVlcnlDb21wbGV0ZWQgPSBmdW5jdGlvbiBoYW5kbGVRdWVyeUNvbXBsZXRlZChtYXliZUVycm9yKSB7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUobWF5YmVFcnJvciAhPT0gbnVsbCAmJiBtYXliZUVycm9yICE9PSB2b2lkIDAgPyBtYXliZUVycm9yIDogbnVsbCk7XG4gICAgfTsgLy8gVGhlIHF1ZXJ5UmVmLnNvdXJjZSBvYnRhaW5lZCBmcm9tIHVzZVF1ZXJ5TG9hZGVyIHdpbGwgYmVcbiAgICAvLyBhbiBvYnNlcnZhYmxlIHdlIGNhbiBjb25zdW1lIC9pZi8gYSBuZXR3b3JrIHJlcXVlc3Qgd2FzXG4gICAgLy8gc3RhcnRlZC4gT3RoZXJ3aXNlLCBnaXZlbiB0aGF0IFF1ZXJ5UmVzb3VyY2UucHJlcGFyZVxuICAgIC8vIGFsd2F5cyBleHBlY3RzIGFuIG9ic2VydmFibGUgd2UgZmFsbCBiYWNrIHRvIGEgbmV3IG5ldHdvcmtcbiAgICAvLyBvYnNlcnZhYmxlLiBOb3RlIGhvd2V2ZXIgdGhhdCBpZiBsb2FkUXVlcnkgZGlkIG5vdCBtYWtlIGEgbmV0d29ya1xuICAgIC8vIHJlcXVlc3QsIHdlIGRvbid0IGV4cGVjdCB0byBtYWtlIG9uZSBoZXJlLCB1bmxlc3MgdGhlIHN0YXRlIG9mXG4gICAgLy8gdGhlIGNhY2hlIGhhcyBjaGFuZ2VkIGJldHdlZW4gdGhlIGNhbGwgdG8gcmVmZXRjaCBhbmQgdGhpc1xuICAgIC8vIHJlbmRlci5cblxuXG4gICAgdmFyIGZldGNoT2JzZXJ2YWJsZSA9IHF1ZXJ5UmVmLnNvdXJjZSAhPSBudWxsID8gcXVlcnlSZWYuc291cmNlIDogZmV0Y2hRdWVyeShlbnZpcm9ubWVudCwgcmVmZXRjaFF1ZXJ5KTsgLy8gTm93IHd3ZSBjYW4gd2UgcmVhZCB0aGUgcmVmZXRjaCBxdWVyeSBoZXJlIHVzaW5nIHRoZVxuICAgIC8vIHF1ZXJ5UmVmIHByb3ZpZGVkIGZyb20gdXNlUXVlcnlMb2FkZXIuIE5vdGUgdGhhdCB0aGVcbiAgICAvLyBuZXR3b3JrIHJlcXVlc3QgaXMgc3RhcnRlZCBkdXJpbmcgdGhlIGNhbGwgdG8gcmVmZXRjaCxcbiAgICAvLyBidXQgaWYgdGhlIHJlZmV0Y2ggcXVlcnkgaXMgc3RpbGwgaW4gZmxpZ2h0LCB3ZSB3aWxsIHN1c3BlbmRcbiAgICAvLyBhdCB0aGlzIHBvaW50OlxuXG4gICAgdmFyIHF1ZXJ5UmVzdWx0ID0gcHJvZmlsZXJDb250ZXh0LndyYXBQcmVwYXJlUXVlcnlSZXNvdXJjZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gUXVlcnlSZXNvdXJjZS5wcmVwYXJlKHJlZmV0Y2hRdWVyeSwgZmV0Y2hPYnNlcnZhYmxlLCBmZXRjaFBvbGljeSwgcmVuZGVyUG9saWN5LCB7XG4gICAgICAgIGVycm9yOiBoYW5kbGVRdWVyeUNvbXBsZXRlZCxcbiAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgIC8vIFZhbGlkYXRlIHRoYXQgdGhlIHR5cGUgb2YgdGhlIG9iamVjdCB3ZSBnb3QgYmFjayBtYXRjaGVzIHRoZSB0eXBlXG4gICAgICAgICAgLy8gb2YgdGhlIG9iamVjdCBhbHJlYWR5IGluIHRoZSBzdG9yZVxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGRlYnVnRnVuY3Rpb25zLmNoZWNrU2FtZVR5cGVBZnRlclJlZmV0Y2goZGVidWdQcmV2aW91c0lEQW5kVHlwZW5hbWUsIGVudmlyb25tZW50LCBmcmFnbWVudE5vZGUsIGNvbXBvbmVudERpc3BsYXlOYW1lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBoYW5kbGVRdWVyeUNvbXBsZXRlZCgpO1xuICAgICAgICB9XG4gICAgICB9LCBxdWVyeVJlZi5mZXRjaEtleSwgcHJvZmlsZXJDb250ZXh0KTtcbiAgICB9KTtcbiAgICB2YXIgcXVlcnlEYXRhID0gRnJhZ21lbnRSZXNvdXJjZS5yZWFkKHF1ZXJ5UmVzdWx0LmZyYWdtZW50Tm9kZSwgcXVlcnlSZXN1bHQuZnJhZ21lbnRSZWYsIGNvbXBvbmVudERpc3BsYXlOYW1lKS5kYXRhO1xuICAgICEocXVlcnlEYXRhICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIHRvIGJlIGFibGUgdG8gcmVhZCByZWZldGNoIHF1ZXJ5IHJlc3BvbnNlLiAnICsgXCJJZiB5b3UncmUgc2VlaW5nIHRoaXMsIHRoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlbGF5LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7IC8vIEFmdGVyIHJlYWRpbmcvZmV0Y2hpbmcgdGhlIHJlZmV0Y2ggcXVlcnksIHdlIGV4dHJhY3QgZnJvbSB0aGVcbiAgICAvLyByZWZldGNoIHF1ZXJ5IHJlc3BvbnNlIHRoZSBuZXcgZnJhZ21lbnQgcmVmIHdlIG5lZWQgdG8gdXNlIHRvIHJlYWRcbiAgICAvLyB0aGUgZnJhZ21lbnQuIFRoZSBuZXcgZnJhZ21lbnQgcmVmIHdpbGwgcG9pbnQgdG8gdGhlIHJlZmV0Y2ggcXVlcnlcbiAgICAvLyBhcyBpdHMgZnJhZ21lbnQgb3duZXIuXG5cbiAgICB2YXIgcmVmZXRjaGVkRnJhZ21lbnRSZWYgPSBnZXRWYWx1ZUF0UGF0aChxdWVyeURhdGEsIGZyYWdtZW50UmVmUGF0aEluUmVzcG9uc2UpO1xuICAgIGZyYWdtZW50UmVmID0gcmVmZXRjaGVkRnJhZ21lbnRSZWY7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAvLyBWYWxpZGF0ZSB0aGF0IHRoZSBpZCBvZiB0aGUgb2JqZWN0IHdlIGdvdCBiYWNrIG1hdGNoZXMgdGhlIGlkXG4gICAgICAvLyB3ZSBxdWVyaWVkIGZvciBpbiB0aGUgdmFyaWFibGVzLlxuICAgICAgLy8gV2UgZG8gdGhpcyBkdXJpbmcgcmVuZGVyIGluc3RlYWQgb2Ygb25Db21wbGV0ZSB0byBtYWtlIHN1cmUgd2UgYXJlXG4gICAgICAvLyBvbmx5IHZhbGlkYXRpbmcgdGhlIG1vc3QgcmVjZW50IHJlZmV0Y2guXG4gICAgICBkZWJ1Z0Z1bmN0aW9ucy5jaGVja1NhbWVJREFmdGVyUmVmZXRjaChkZWJ1Z1ByZXZpb3VzSURBbmRUeXBlbmFtZSwgZnJhZ21lbnRSZWYsIGZyYWdtZW50Tm9kZSwgY29tcG9uZW50RGlzcGxheU5hbWUpO1xuICAgIH1cbiAgfSAvLyBXZSByZWFkIGFuZCBzdWJzY3JpYmUgdG8gdGhlIGZyYWdtZW50IHVzaW5nIHVzZUZyYWdtZW50Tm9kZS5cbiAgLy8gSWYgcmVmZXRjaCB3YXMgY2FsbGVkLCB3ZSByZWFkIHRoZSBmcmFnbWVudCB1c2luZyB0aGUgbmV3IGNvbXB1dGVkXG4gIC8vIGZyYWdtZW50IHJlZiBmcm9tIHRoZSByZWZldGNoIHF1ZXJ5IHJlc3BvbnNlOyBvdGhlcndpc2UsIHdlIHVzZSB0aGVcbiAgLy8gZnJhZ21lbnQgcmVmIHBhc3NlZCBieSB0aGUgY2FsbGVyIGFzIG5vcm1hbC5cblxuXG4gIHZhciBfdXNlRnJhZ21lbnROb2RlID0gdXNlRnJhZ21lbnROb2RlKGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWYsIGNvbXBvbmVudERpc3BsYXlOYW1lKSxcbiAgICAgIGZyYWdtZW50RGF0YSA9IF91c2VGcmFnbWVudE5vZGUuZGF0YSxcbiAgICAgIGRpc2FibGVTdG9yZVVwZGF0ZXMgPSBfdXNlRnJhZ21lbnROb2RlLmRpc2FibGVTdG9yZVVwZGF0ZXMsXG4gICAgICBlbmFibGVTdG9yZVVwZGF0ZXMgPSBfdXNlRnJhZ21lbnROb2RlLmVuYWJsZVN0b3JlVXBkYXRlcztcblxuICB2YXIgcmVmZXRjaCA9IHVzZVJlZmV0Y2hGdW5jdGlvbihjb21wb25lbnREaXNwbGF5TmFtZSwgZGlzcGF0Y2gsIGRpc3Bvc2VRdWVyeSwgZnJhZ21lbnREYXRhLCBmcmFnbWVudElkZW50aWZpZXIsIGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWZQYXRoSW5SZXNwb25zZSwgaWRlbnRpZmllckZpZWxkLCBsb2FkUXVlcnksIHBhcmVudEZyYWdtZW50UmVmLCByZWZldGNoYWJsZVJlcXVlc3QpO1xuICByZXR1cm4ge1xuICAgIGZyYWdtZW50RGF0YTogZnJhZ21lbnREYXRhLFxuICAgIGZyYWdtZW50UmVmOiBmcmFnbWVudFJlZixcbiAgICByZWZldGNoOiByZWZldGNoLFxuICAgIGRpc2FibGVTdG9yZVVwZGF0ZXM6IGRpc2FibGVTdG9yZVVwZGF0ZXMsXG4gICAgZW5hYmxlU3RvcmVVcGRhdGVzOiBlbmFibGVTdG9yZVVwZGF0ZXNcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlUmVmZXRjaEZ1bmN0aW9uKGNvbXBvbmVudERpc3BsYXlOYW1lLCBkaXNwYXRjaCwgZGlzcG9zZVF1ZXJ5LCBmcmFnbWVudERhdGEsIGZyYWdtZW50SWRlbnRpZmllciwgZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZlBhdGhJblJlc3BvbnNlLCBpZGVudGlmaWVyRmllbGQsIGxvYWRRdWVyeSwgcGFyZW50RnJhZ21lbnRSZWYsIHJlZmV0Y2hhYmxlUmVxdWVzdCkge1xuICB2YXIgaXNNb3VudGVkUmVmID0gdXNlSXNNb3VudGVkUmVmKCk7XG4gIHZhciBpZGVudGlmaWVyVmFsdWUgPSBpZGVudGlmaWVyRmllbGQgIT0gbnVsbCAmJiBmcmFnbWVudERhdGEgIT0gbnVsbCAmJiB0eXBlb2YgZnJhZ21lbnREYXRhID09PSAnb2JqZWN0JyA/IGZyYWdtZW50RGF0YVtpZGVudGlmaWVyRmllbGRdIDogbnVsbDtcbiAgcmV0dXJuIHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChwcm92aWRlZFJlZmV0Y2hWYXJpYWJsZXMsIG9wdGlvbnMpIHtcbiAgICAvLyBCYWlsIG91dCBhbmQgd2FybiBpZiB3ZSdyZSB0cnlpbmcgdG8gcmVmZXRjaCBhZnRlciB0aGUgY29tcG9uZW50XG4gICAgLy8gaGFzIHVubW91bnRlZFxuICAgIGlmIChpc01vdW50ZWRSZWYuY3VycmVudCAhPT0gdHJ1ZSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5OiBVbmV4cGVjdGVkIGNhbGwgdG8gYHJlZmV0Y2hgIG9uIHVubW91bnRlZCBjb21wb25lbnQgZm9yIGZyYWdtZW50ICcgKyAnYCVzYCBpbiBgJXNgLiBJdCBsb29rcyBsaWtlIHNvbWUgaW5zdGFuY2VzIG9mIHlvdXIgY29tcG9uZW50IGFyZSAnICsgJ3N0aWxsIHRyeWluZyB0byBmZXRjaCBkYXRhIGJ1dCB0aGV5IGFscmVhZHkgdW5tb3VudGVkLiAnICsgJ1BsZWFzZSBtYWtlIHN1cmUgeW91IGNsZWFyIGFsbCB0aW1lcnMsIGludGVydmFscywgJyArICdhc3luYyBjYWxscywgZXRjIHRoYXQgbWF5IHRyaWdnZXIgYSBmZXRjaC4nLCBmcmFnbWVudE5vZGUubmFtZSwgY29tcG9uZW50RGlzcGxheU5hbWUpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHt9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChwYXJlbnRGcmFnbWVudFJlZiA9PSBudWxsKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXk6IFVuZXhwZWN0ZWQgY2FsbCB0byBgcmVmZXRjaGAgd2hpbGUgdXNpbmcgYSBudWxsIGZyYWdtZW50IHJlZiAnICsgJ2ZvciBmcmFnbWVudCBgJXNgIGluIGAlc2AuIFdoZW4gY2FsbGluZyBgcmVmZXRjaGAsIHdlIGV4cGVjdCAnICsgXCJpbml0aWFsIGZyYWdtZW50IGRhdGEgdG8gYmUgbm9uLW51bGwuIFBsZWFzZSBtYWtlIHN1cmUgeW91J3JlIFwiICsgJ3Bhc3NpbmcgYSB2YWxpZCBmcmFnbWVudCByZWYgdG8gYCVzYCBiZWZvcmUgY2FsbGluZyAnICsgJ2ByZWZldGNoYCwgb3IgbWFrZSBzdXJlIHlvdSBwYXNzIGFsbCByZXF1aXJlZCB2YXJpYWJsZXMgdG8gYHJlZmV0Y2hgLicsIGZyYWdtZW50Tm9kZS5uYW1lLCBjb21wb25lbnREaXNwbGF5TmFtZSwgY29tcG9uZW50RGlzcGxheU5hbWUpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHZhciByZWZldGNoRW52aXJvbm1lbnQgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuX19lbnZpcm9ubWVudDtcbiAgICB2YXIgZmV0Y2hQb2xpY3kgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmV0Y2hQb2xpY3k7XG4gICAgdmFyIHJlbmRlclBvbGljeSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5VTlNUQUJMRV9yZW5kZXJQb2xpY3k7XG4gICAgdmFyIG9uQ29tcGxldGUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub25Db21wbGV0ZTtcbiAgICB2YXIgZnJhZ21lbnRTZWxlY3RvciA9IGdldFNlbGVjdG9yKGZyYWdtZW50Tm9kZSwgcGFyZW50RnJhZ21lbnRSZWYpO1xuICAgIHZhciBwYXJlbnRWYXJpYWJsZXM7XG4gICAgdmFyIGZyYWdtZW50VmFyaWFibGVzO1xuXG4gICAgaWYgKGZyYWdtZW50U2VsZWN0b3IgPT0gbnVsbCkge1xuICAgICAgcGFyZW50VmFyaWFibGVzID0ge307XG4gICAgICBmcmFnbWVudFZhcmlhYmxlcyA9IHt9O1xuICAgIH0gZWxzZSBpZiAoZnJhZ21lbnRTZWxlY3Rvci5raW5kID09PSAnUGx1cmFsUmVhZGVyU2VsZWN0b3InKSB7XG4gICAgICB2YXIgX2ZyYWdtZW50U2VsZWN0b3Ikc2VsLCBfZnJhZ21lbnRTZWxlY3RvciRzZWwyLCBfZnJhZ21lbnRTZWxlY3RvciRzZWwzLCBfZnJhZ21lbnRTZWxlY3RvciRzZWw0O1xuXG4gICAgICBwYXJlbnRWYXJpYWJsZXMgPSAoX2ZyYWdtZW50U2VsZWN0b3Ikc2VsID0gKF9mcmFnbWVudFNlbGVjdG9yJHNlbDIgPSBmcmFnbWVudFNlbGVjdG9yLnNlbGVjdG9yc1swXSkgPT09IG51bGwgfHwgX2ZyYWdtZW50U2VsZWN0b3Ikc2VsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZyYWdtZW50U2VsZWN0b3Ikc2VsMi5vd25lci52YXJpYWJsZXMpICE9PSBudWxsICYmIF9mcmFnbWVudFNlbGVjdG9yJHNlbCAhPT0gdm9pZCAwID8gX2ZyYWdtZW50U2VsZWN0b3Ikc2VsIDoge307XG4gICAgICBmcmFnbWVudFZhcmlhYmxlcyA9IChfZnJhZ21lbnRTZWxlY3RvciRzZWwzID0gKF9mcmFnbWVudFNlbGVjdG9yJHNlbDQgPSBmcmFnbWVudFNlbGVjdG9yLnNlbGVjdG9yc1swXSkgPT09IG51bGwgfHwgX2ZyYWdtZW50U2VsZWN0b3Ikc2VsNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZyYWdtZW50U2VsZWN0b3Ikc2VsNC52YXJpYWJsZXMpICE9PSBudWxsICYmIF9mcmFnbWVudFNlbGVjdG9yJHNlbDMgIT09IHZvaWQgMCA/IF9mcmFnbWVudFNlbGVjdG9yJHNlbDMgOiB7fTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50VmFyaWFibGVzID0gZnJhZ21lbnRTZWxlY3Rvci5vd25lci52YXJpYWJsZXM7XG4gICAgICBmcmFnbWVudFZhcmlhYmxlcyA9IGZyYWdtZW50U2VsZWN0b3IudmFyaWFibGVzO1xuICAgIH0gLy8gQSB1c2VyIG9mIGB1c2VSZWZldGNoYWJsZUZyYWdtZW50KClgIG1heSBwYXNzIGEgc3Vic2V0IG9mXG4gICAgLy8gYWxsIHZhcmlhYmxlcyByZXF1aXJlZCBieSB0aGUgZnJhZ21lbnQgd2hlbiBjYWxsaW5nIGByZWZldGNoKClgLlxuICAgIC8vIFdlIGZpbGwgaW4gYW55IHZhcmlhYmxlcyBub3QgcGFzc2VkIGJ5IHRoZSBjYWxsIHRvIGByZWZldGNoKClgIHdpdGggdGhlXG4gICAgLy8gdmFyaWFibGVzIGZyb20gdGhlIG9yaWdpbmFsIHBhcmVudCBmcmFnbWVudCBvd25lci5cbiAgICAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC1zcHJlYWQtaW50ZXJmYWNlXVxuXG5cbiAgICB2YXIgcmVmZXRjaFZhcmlhYmxlcyA9ICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCBwYXJlbnRWYXJpYWJsZXMpLCBmcmFnbWVudFZhcmlhYmxlcyksIHByb3ZpZGVkUmVmZXRjaFZhcmlhYmxlcyk7IC8vIElmIHRoZSBxdWVyeSBuZWVkcyBhbiBpZGVudGlmaWVyIHZhbHVlICgnaWQnIG9yIHNpbWlsYXIpIGFuZCBvbmVcbiAgICAvLyB3YXMgbm90IGV4cGxpY2l0bHkgcHJvdmlkZWQsIHJlYWQgaXQgZnJvbSB0aGUgZnJhZ21lbnQgZGF0YS5cblxuICAgIGlmIChpZGVudGlmaWVyRmllbGQgIT0gbnVsbCAmJiAhcHJvdmlkZWRSZWZldGNoVmFyaWFibGVzLmhhc093blByb3BlcnR5KCdpZCcpKSB7XG4gICAgICAvLyBAcmVmZXRjaGFibGUgZnJhZ21lbnRzIGFyZSBndWFyYW50ZWVkIHRvIGhhdmUgYW4gYGlkYCBzZWxlY3Rpb25cbiAgICAgIC8vIGlmIHRoZSB0eXBlIGlzIE5vZGUsIGltcGxlbWVudHMgTm9kZSwgb3IgaXMgQGZldGNoYWJsZS4gRG91YmxlLWNoZWNrXG4gICAgICAvLyB0aGF0IHRoZXJlIGFjdHVhbGx5IGlzIGEgdmFsdWUgYXQgcnVudGltZS5cbiAgICAgIGlmICh0eXBlb2YgaWRlbnRpZmllclZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIHJlc3VsdCB0byBoYXZlIGEgc3RyaW5nICAnICsgJ2Alc2AgaW4gb3JkZXIgdG8gcmVmZXRjaCwgZ290IGAlc2AuJywgaWRlbnRpZmllckZpZWxkLCBpZGVudGlmaWVyVmFsdWUpIDogdm9pZCAwO1xuICAgICAgfVxuXG4gICAgICByZWZldGNoVmFyaWFibGVzLmlkID0gaWRlbnRpZmllclZhbHVlO1xuICAgIH1cblxuICAgIHZhciByZWZldGNoUXVlcnkgPSBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yKHJlZmV0Y2hhYmxlUmVxdWVzdCwgcmVmZXRjaFZhcmlhYmxlcywge1xuICAgICAgZm9yY2U6IHRydWVcbiAgICB9KTsgLy8gV2UgY2FsbCBsb2FkUXVlcnkgd2hpY2ggd2lsbCBzdGFydCBhIG5ldHdvcmsgcmVxdWVzdCBpZiBuZWNlc3NhcnlcbiAgICAvLyBhbmQgdXBkYXRlIHRoZSBxdWVyUmVmIGZyb20gdXNlUXVlcnlMb2FkZXIuXG4gICAgLy8gTm90ZSB0aGUgZm9sbG93aW5nOlxuICAgIC8vIC0gbG9hZFF1ZXJ5IHdpbGwgZGlzcG9zZSBvZiBhbnkgcHJldmlvdXNseSByZWZldGNoZWQgcXVlcmllcy5cbiAgICAvLyAtIFdlIHVzZSB0aGUgdmFyaWFibGVzIGV4dHJhY3RlZCBvZmYgdGhlIE9wZXJhdGlvbkRlc2NyaXB0b3JcbiAgICAvLyBzbyB0aGF0IHRoZXkgaGF2ZSBiZWVuIGZpbHRlcmVkIG91dCB0byBpbmNsdWRlIG9ubHkgdGhlXG4gICAgLy8gdmFyaWFibGVzIGFjdHVhbGx5IGRlY2xhcmVkIGluIHRoZSBxdWVyeS5cblxuICAgIGxvYWRRdWVyeShyZWZldGNoUXVlcnkucmVxdWVzdC52YXJpYWJsZXMsIHtcbiAgICAgIGZldGNoUG9saWN5OiBmZXRjaFBvbGljeSxcbiAgICAgIF9fZW52aXJvbm1lbnQ6IHJlZmV0Y2hFbnZpcm9ubWVudCxcbiAgICAgIF9fbmFtZUZvcldhcm5pbmc6ICdyZWZldGNoJ1xuICAgIH0pO1xuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6ICdyZWZldGNoJyxcbiAgICAgIGZldGNoUG9saWN5OiBmZXRjaFBvbGljeSxcbiAgICAgIG9uQ29tcGxldGU6IG9uQ29tcGxldGUsXG4gICAgICByZWZldGNoRW52aXJvbm1lbnQ6IHJlZmV0Y2hFbnZpcm9ubWVudCxcbiAgICAgIHJlZmV0Y2hRdWVyeTogcmVmZXRjaFF1ZXJ5LFxuICAgICAgcmVuZGVyUG9saWN5OiByZW5kZXJQb2xpY3lcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcG9zZTogZGlzcG9zZVF1ZXJ5XG4gICAgfTtcbiAgfSwgLy8gTk9URTogV2UgZGlzYWJsZSByZWFjdC1ob29rcy1kZXBzIHdhcm5pbmcgYmVjYXVzZTpcbiAgLy8gICAtIFdlIGtub3cgZnJhZ21lbnRSZWZQYXRoSW5SZXNwb25zZSBpcyBzdGF0aWMsIHNvIGl0IGNhbiBiZSBvbWl0dGVkIGZyb21cbiAgLy8gICAgIGRlcHNcbiAgLy8gICAtIFdlIGtub3cgZnJhZ21lbnROb2RlIGlzIHN0YXRpYywgc28gaXQgY2FuIGJlIG9taXR0ZWQgZnJvbSBkZXBzLlxuICAvLyAgIC0gZnJhZ21lbnROb2RlIGFuZCBwYXJlbnRGcmFnbWVudFJlZiBhcmUgYWxzbyBjYXB0dXJlZCBieSBpbmNsdWRpbmdcbiAgLy8gICAgIGZyYWdtZW50SWRlbnRpZmllclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIFtmcmFnbWVudElkZW50aWZpZXIsIGRpc3BhdGNoLCBkaXNwb3NlUXVlcnksIGlkZW50aWZpZXJWYWx1ZV0pO1xufVxuXG52YXIgZGVidWdGdW5jdGlvbnM7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgZGVidWdGdW5jdGlvbnMgPSB7XG4gICAgZ2V0SW5pdGlhbElEQW5kVHlwZTogZnVuY3Rpb24gZ2V0SW5pdGlhbElEQW5kVHlwZShtZW1vUmVmZXRjaFZhcmlhYmxlcywgZnJhZ21lbnRSZWZQYXRoSW5SZXNwb25zZSwgZW52aXJvbm1lbnQpIHtcbiAgICAgIHZhciBfcmVxdWlyZTUgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgICAgICAgUmVjb3JkID0gX3JlcXVpcmU1LlJlY29yZDsgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cblxuICAgICAgdmFyIGlkID0gbWVtb1JlZmV0Y2hWYXJpYWJsZXMgPT09IG51bGwgfHwgbWVtb1JlZmV0Y2hWYXJpYWJsZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1lbW9SZWZldGNoVmFyaWFibGVzLmlkO1xuXG4gICAgICBpZiAoZnJhZ21lbnRSZWZQYXRoSW5SZXNwb25zZS5sZW5ndGggIT09IDEgfHwgZnJhZ21lbnRSZWZQYXRoSW5SZXNwb25zZVswXSAhPT0gJ25vZGUnIHx8IGlkID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmRTb3VyY2UgPSBlbnZpcm9ubWVudC5nZXRTdG9yZSgpLmdldFNvdXJjZSgpO1xuICAgICAgdmFyIHJlY29yZCA9IHJlY29yZFNvdXJjZS5nZXQoaWQpO1xuICAgICAgdmFyIHR5cGVuYW1lID0gcmVjb3JkICYmIFJlY29yZC5nZXRUeXBlKHJlY29yZCk7XG5cbiAgICAgIGlmICh0eXBlbmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIHR5cGVuYW1lOiB0eXBlbmFtZVxuICAgICAgfTtcbiAgICB9LFxuICAgIGNoZWNrU2FtZVR5cGVBZnRlclJlZmV0Y2g6IGZ1bmN0aW9uIGNoZWNrU2FtZVR5cGVBZnRlclJlZmV0Y2gocHJldmlvdXNJREFuZFR5cGUsIGVudmlyb25tZW50LCBmcmFnbWVudE5vZGUsIGNvbXBvbmVudERpc3BsYXlOYW1lKSB7XG4gICAgICB2YXIgX3JlcXVpcmU2ID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgICAgICAgIFJlY29yZCA9IF9yZXF1aXJlNi5SZWNvcmQ7XG5cbiAgICAgIGlmICghcHJldmlvdXNJREFuZFR5cGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkU291cmNlID0gZW52aXJvbm1lbnQuZ2V0U3RvcmUoKS5nZXRTb3VyY2UoKTtcbiAgICAgIHZhciByZWNvcmQgPSByZWNvcmRTb3VyY2UuZ2V0KHByZXZpb3VzSURBbmRUeXBlLmlkKTtcbiAgICAgIHZhciB0eXBlbmFtZSA9IHJlY29yZCAmJiBSZWNvcmQuZ2V0VHlwZShyZWNvcmQpO1xuXG4gICAgICBpZiAodHlwZW5hbWUgIT09IHByZXZpb3VzSURBbmRUeXBlLnR5cGVuYW1lKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdSZWxheTogQ2FsbCB0byBgcmVmZXRjaGAgcmV0dXJuZWQgZGF0YSB3aXRoIGEgZGlmZmVyZW50ICcgKyAnX190eXBlbmFtZTogd2FzIGAlc2AsIG5vdyBgJXNgLCBvbiBgJXNgIGluIGAlc2AuICcgKyAnUGxlYXNlIG1ha2Ugc3VyZSB0aGUgc2VydmVyIGNvcnJlY3RseSBpbXBsZW1lbnRzJyArICd1bmlxdWUgaWQgcmVxdWlyZW1lbnQuJywgcHJldmlvdXNJREFuZFR5cGUudHlwZW5hbWUsIHR5cGVuYW1lLCBmcmFnbWVudE5vZGUubmFtZSwgY29tcG9uZW50RGlzcGxheU5hbWUpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH0sXG4gICAgY2hlY2tTYW1lSURBZnRlclJlZmV0Y2g6IGZ1bmN0aW9uIGNoZWNrU2FtZUlEQWZ0ZXJSZWZldGNoKHByZXZpb3VzSURBbmRUeXBlbmFtZSwgcmVmZXRjaGVkRnJhZ21lbnRSZWYsIGZyYWdtZW50Tm9kZSwgY29tcG9uZW50RGlzcGxheU5hbWUpIHtcbiAgICAgIGlmIChwcmV2aW91c0lEQW5kVHlwZW5hbWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBfcmVxdWlyZTcgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgICAgICAgSURfS0VZID0gX3JlcXVpcmU3LklEX0tFWTsgLy8gJEZsb3dFeHBlY3RlZEVycm9yW2luY29tcGF0aWJsZS11c2VdXG5cblxuICAgICAgdmFyIHJlc3VsdElEID0gcmVmZXRjaGVkRnJhZ21lbnRSZWZbSURfS0VZXTtcblxuICAgICAgaWYgKHJlc3VsdElEICE9IG51bGwgJiYgcmVzdWx0SUQgIT09IHByZXZpb3VzSURBbmRUeXBlbmFtZS5pZCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXk6IENhbGwgdG8gYHJlZmV0Y2hgIHJldHVybmVkIGEgZGlmZmVyZW50IGlkLCBleHBlY3RlZCAnICsgJ2Alc2AsIGdvdCBgJXNgLCBvbiBgJXNgIGluIGAlc2AuICcgKyAnUGxlYXNlIG1ha2Ugc3VyZSB0aGUgc2VydmVyIGNvcnJlY3RseSBpbXBsZW1lbnRzICcgKyAndW5pcXVlIGlkIHJlcXVpcmVtZW50LicsIHJlc3VsdElELCBwcmV2aW91c0lEQW5kVHlwZW5hbWUuaWQsIGZyYWdtZW50Tm9kZS5uYW1lLCBjb21wb25lbnREaXNwbGF5TmFtZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZVJlZmV0Y2hhYmxlRnJhZ21lbnROb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UmVsYXlDb250ZXh0ID0gcmVxdWlyZSgncmVhY3QtcmVsYXkvUmVhY3RSZWxheUNvbnRleHQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHVzZUNvbnRleHQgPSBfcmVxdWlyZS51c2VDb250ZXh0O1xuXG5mdW5jdGlvbiB1c2VSZWxheUVudmlyb25tZW50KCkge1xuICB2YXIgY29udGV4dCA9IHVzZUNvbnRleHQoUmVhY3RSZWxheUNvbnRleHQpO1xuICAhKGNvbnRleHQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICd1c2VSZWxheUVudmlyb25tZW50OiBFeHBlY3RlZCB0byBoYXZlIGZvdW5kIGEgUmVsYXkgZW52aXJvbm1lbnQgcHJvdmlkZWQgYnkgJyArICdhIGBSZWxheUVudmlyb25tZW50UHJvdmlkZXJgIGNvbXBvbmVudC4gJyArICdUaGlzIHVzdWFsbHkgbWVhbnMgdGhhdCB1c2VSZWxheUVudmlyb25tZW50IHdhcyB1c2VkIGluIGEgJyArICdjb21wb25lbnQgdGhhdCBpcyBub3QgYSBkZXNjZW5kYW50IG9mIGEgYFJlbGF5RW52aXJvbm1lbnRQcm92aWRlcmAuICcgKyAnUGxlYXNlIG1ha2Ugc3VyZSBhIGBSZWxheUVudmlyb25tZW50UHJvdmlkZXJgIGhhcyBiZWVuIHJlbmRlcmVkIHNvbWV3aGVyZSAnICsgJ2FzIGEgcGFyZW50IG9yIGFuY2VzdG9yIG9mIHlvdXIgY29tcG9uZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGNvbnRleHQuZW52aXJvbm1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXNlUmVsYXlFbnZpcm9ubWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdXNlUmVmID0gX3JlcXVpcmUudXNlUmVmO1xuXG5mdW5jdGlvbiB1c2VTdGF0aWNGcmFnbWVudE5vZGVXYXJuaW5nKGZyYWdtZW50Tm9kZSwgd2FybmluZ0NvbnRleHQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vIFRoaXMgaXMgY2FsbGluZyBgdXNlUmVmYCBjb25kaXRpb25hbGx5LCBidXQgYmFzZWQgb24gdGhlIGVudmlyb25tZW50XG4gICAgLy8gX19ERVZfXyBzZXR0aW5nIHdoaWNoIHNob3VsZG4ndCBjaGFuZ2UuIFRoaXMgYWxsb3dzIHVzIHRvIG9ubHkgcGF5IHRoZVxuICAgIC8vIGNvc3Qgb2YgYHVzZVJlZmAgaW4gZGV2ZWxvcG1lbnQgbW9kZSB0byBwcm9kdWNlIHRoZSB3YXJuaW5nLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIHZhciBpbml0aWFsUHJvcFJlZiA9IHVzZVJlZihmcmFnbWVudE5vZGUubmFtZSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhpbml0aWFsUHJvcFJlZi5jdXJyZW50ID09PSBmcmFnbWVudE5vZGUubmFtZSwgJ1JlbGF5OiBUaGUgJXMgaGFzIHRvIHJlbWFpbiB0aGUgc2FtZSBvdmVyIHRoZSBsaWZldGltZSBvZiBhIGNvbXBvbmVudC4gJyArICdDaGFuZ2luZyBpdCBpcyBub3Qgc3VwcG9ydGVkIGFuZCB3aWxsIHJlc3VsdCBpbiB1bmV4cGVjdGVkIGJlaGF2aW9yLicsIHdhcm5pbmdDb250ZXh0KSA6IHZvaWQgMDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZVN0YXRpY0ZyYWdtZW50Tm9kZVdhcm5pbmc7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXNlUmVsYXlFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vdXNlUmVsYXlFbnZpcm9ubWVudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHVzZUVmZmVjdCA9IF9yZXF1aXJlLnVzZUVmZmVjdCxcbiAgICB1c2VSZWYgPSBfcmVxdWlyZS51c2VSZWY7XG5cbi8qKlxuICogVGhpcyBob29rIHN1YnNjcmliZXMgYSBjYWxsYmFjayB0byB0aGUgaW52YWxpZGF0aW9uIHN0YXRlIG9mIHRoZSBnaXZlbiBkYXRhXG4gKiBpZHMuXG4gKiBBbnkgdGltZSB0aGUgaW52YWxpZGF0aW9uIHN0YXRlIG9mIHRoZSBnaXZlbiBkYXRhIGlkcyBjaGFuZ2VzLCB0aGUgcHJvdmlkZWRcbiAqIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkLlxuICogSWYgbmV3IGlkcyBvciBhIG5ldyBjYWxsYmFjayBhcmUgcHJvdmlkZWQsIHRoZSBzdWJzY3JpcHRpb24gd2lsbCBiZVxuICogcmUtZXN0YWJsaXNoZWQgYW5kIHRoZSBwcmV2aW91cyBvbmUgd2lsbCBiZSBkaXNwb3NlZC5cbiAqIFRoZSBzdWJzY3JpcHRpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGJlIGRpc3Bvc2VkIG9uIHVubW91bnRcbiAqL1xuZnVuY3Rpb24gdXNlU3Vic2NyaWJlVG9JbnZhbGlkYXRpb25TdGF0ZShkYXRhSURzLCBjYWxsYmFjaykge1xuICB2YXIgZW52aXJvbm1lbnQgPSB1c2VSZWxheUVudmlyb25tZW50KCk7XG4gIHZhciBkaXNwb3NhYmxlUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgc3RhYmxlRGF0YUlEcyA9IEFycmF5LmZyb20oZGF0YUlEcykuc29ydCgpLmpvaW4oJycpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdG9yZSA9IGVudmlyb25tZW50LmdldFN0b3JlKCk7XG4gICAgdmFyIGludmFsaWRhdGlvblN0YXRlID0gc3RvcmUubG9va3VwSW52YWxpZGF0aW9uU3RhdGUoZGF0YUlEcyk7XG4gICAgdmFyIGRpc3Bvc2FibGUgPSBzdG9yZS5zdWJzY3JpYmVUb0ludmFsaWRhdGlvblN0YXRlKGludmFsaWRhdGlvblN0YXRlLCBjYWxsYmFjayk7XG4gICAgZGlzcG9zYWJsZVJlZi5jdXJyZW50ID0gZGlzcG9zYWJsZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgIH07IC8vIEludGVudGlvbmFsbHkgZXhjbHVkaW5nIGRhdGFJRHMsIHNpbmNlIHdlJ3JlIHVzaW5nIHN0YWJsZURhdGFJRHNcbiAgICAvLyBpbnN0ZWFkXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbc3RhYmxlRGF0YUlEcywgY2FsbGJhY2ssIGVudmlyb25tZW50XSk7XG4gIHJldHVybiB7XG4gICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIGlmIChkaXNwb3NhYmxlUmVmLmN1cnJlbnQgIT0gbnVsbCkge1xuICAgICAgICBkaXNwb3NhYmxlUmVmLmN1cnJlbnQuZGlzcG9zZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VTdWJzY3JpYmVUb0ludmFsaWRhdGlvblN0YXRlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgdXNlUmVsYXlFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vdXNlUmVsYXlFbnZpcm9ubWVudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgcmVxdWVzdFN1YnNjcmlwdGlvbiA9IF9yZXF1aXJlLnJlcXVlc3RTdWJzY3JpcHRpb247XG5cbmZ1bmN0aW9uIHVzZVN1YnNjcmlwdGlvbihjb25maWcsIHJlcXVlc3RTdWJzY3JpcHRpb25Gbikge1xuICAvLyBOLkIuIHRoaXMgd2lsbCByZS1zdWJzY3JpYmUgZXZlcnkgcmVuZGVyIGlmIGNvbmZpZyBvciByZXF1ZXN0U3Vic2NyaXB0aW9uRm5cbiAgLy8gYXJlIG5vdCBtZW1vaXplZC5cbiAgLy8gUGxlYXNlIGRvIG5vdCBwYXNzIGFuIG9iamVjdCBkZWZpbmVkIGluLWxpbmUuXG4gIHZhciBhY3R1YWxSZXF1ZXN0U3Vic2NyaXB0aW9uID0gcmVxdWVzdFN1YnNjcmlwdGlvbkZuICE9PSBudWxsICYmIHJlcXVlc3RTdWJzY3JpcHRpb25GbiAhPT0gdm9pZCAwID8gcmVxdWVzdFN1YnNjcmlwdGlvbkZuIDogcmVxdWVzdFN1YnNjcmlwdGlvbjtcbiAgdmFyIGVudmlyb25tZW50ID0gdXNlUmVsYXlFbnZpcm9ubWVudCgpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcmVxdWVzdFN1YnNjcmlwdGlvbiA9IHJlcXVlc3RTdWJzY3JpcHRpb24oZW52aXJvbm1lbnQsIGNvbmZpZyksXG4gICAgICAgIGRpc3Bvc2UgPSBfcmVxdWVzdFN1YnNjcmlwdGlvbi5kaXNwb3NlO1xuXG4gICAgcmV0dXJuIGRpc3Bvc2U7XG4gIH0sIFtlbnZpcm9ubWVudCwgY29uZmlnLCBhY3R1YWxSZXF1ZXN0U3Vic2NyaXB0aW9uXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXNlU3Vic2NyaXB0aW9uOyIsImZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlMaWtlVG9BcnJheTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJ2YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIik7XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRob3V0SG9sZXM7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsInZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCIpO1xuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkge1xuICB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoIWl0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAoaXQpIG8gPSBpdDtcbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHM6IEYsXG4gICAgICAgIG46IGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgICAgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogb1tpKytdXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZTogZnVuY3Rpb24gZShfZSkge1xuICAgICAgICAgIHRocm93IF9lO1xuICAgICAgICB9LFxuICAgICAgICBmOiBGXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbiAgfVxuXG4gIHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSxcbiAgICAgIGRpZEVyciA9IGZhbHNlLFxuICAgICAgZXJyO1xuICByZXR1cm4ge1xuICAgIHM6IGZ1bmN0aW9uIHMoKSB7XG4gICAgICBpdCA9IGl0LmNhbGwobyk7XG4gICAgfSxcbiAgICBuOiBmdW5jdGlvbiBuKCkge1xuICAgICAgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7XG4gICAgICBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lO1xuICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgfSxcbiAgICBlOiBmdW5jdGlvbiBlKF9lMikge1xuICAgICAgZGlkRXJyID0gdHJ1ZTtcbiAgICAgIGVyciA9IF9lMjtcbiAgICB9LFxuICAgIGY6IGZ1bmN0aW9uIGYoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbXCJyZXR1cm5cIl0gIT0gbnVsbCkgaXRbXCJyZXR1cm5cIl0oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChkaWRFcnIpIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXI7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsInZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mLmpzXCIpO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHNMb29zZTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0O1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5O1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL2RlZmluZVByb3BlcnR5LmpzXCIpO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG5cbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHtcbiAgICAgIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFNwcmVhZDI7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2U7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJ2YXIgYXJyYXlXaXRob3V0SG9sZXMgPSByZXF1aXJlKFwiLi9hcnJheVdpdGhvdXRIb2xlcy5qc1wiKTtcblxudmFyIGl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheS5qc1wiKTtcblxudmFyIHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIik7XG5cbnZhciBub25JdGVyYWJsZVNwcmVhZCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCIpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdG9Db25zdW1hYmxlQXJyYXk7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCIpO1xuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPTYwMTAzLHA9NjAxMDY7ZXhwb3J0cy5GcmFnbWVudD02MDEwNztleHBvcnRzLlN0cmljdE1vZGU9NjAxMDg7ZXhwb3J0cy5Qcm9maWxlcj02MDExNDt2YXIgcT02MDEwOSxyPTYwMTEwLHQ9NjAxMTI7ZXhwb3J0cy5TdXNwZW5zZT02MDExMzt2YXIgdT02MDExNSx2PTYwMTE2O1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHc9U3ltYm9sLmZvcjtuPXcoXCJyZWFjdC5lbGVtZW50XCIpO3A9dyhcInJlYWN0LnBvcnRhbFwiKTtleHBvcnRzLkZyYWdtZW50PXcoXCJyZWFjdC5mcmFnbWVudFwiKTtleHBvcnRzLlN0cmljdE1vZGU9dyhcInJlYWN0LnN0cmljdF9tb2RlXCIpO2V4cG9ydHMuUHJvZmlsZXI9dyhcInJlYWN0LnByb2ZpbGVyXCIpO3E9dyhcInJlYWN0LnByb3ZpZGVyXCIpO3I9dyhcInJlYWN0LmNvbnRleHRcIik7dD13KFwicmVhY3QuZm9yd2FyZF9yZWZcIik7ZXhwb3J0cy5TdXNwZW5zZT13KFwicmVhY3Quc3VzcGVuc2VcIik7dT13KFwicmVhY3QubWVtb1wiKTt2PXcoXCJyZWFjdC5sYXp5XCIpfXZhciB4PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIHkoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXgmJmFbeF18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiB6KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEE9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEI9e307ZnVuY3Rpb24gQyhhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfUMucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Qy5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKHooODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0MucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRCgpe31ELnByb3RvdHlwZT1DLnByb3RvdHlwZTtmdW5jdGlvbiBFKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9dmFyIEY9RS5wcm90b3R5cGU9bmV3IEQ7Ri5jb25zdHJ1Y3Rvcj1FO2woRixDLnByb3RvdHlwZSk7Ri5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgRz17Y3VycmVudDpudWxsfSxIPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksST17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gSihhLGIsYyl7dmFyIGUsZD17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilILmNhbGwoYixlKSYmIUkuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZylkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09ZFtlXSYmKGRbZV09Z1tlXSk7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmQsX293bmVyOkcuY3VycmVudH19XG5mdW5jdGlvbiBLKGEsYil7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBMKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ufWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTT0vXFwvKy9nO2Z1bmN0aW9uIE4oYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBPKGEsYixjLGUsZCl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIG46Y2FzZSBwOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxkPWQoaCksYT1cIlwiPT09ZT9cIi5cIitOKGgsMCk6ZSxBcnJheS5pc0FycmF5KGQpPyhjPVwiXCIsbnVsbCE9YSYmKGM9YS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpLE8oZCxiLGMsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1kJiYoTChkKSYmKGQ9SyhkLGMrKCFkLmtleXx8aCYmaC5rZXk9PT1kLmtleT9cIlwiOihcIlwiK2Qua2V5KS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goZCkpLDE7aD0wO2U9XCJcIj09PWU/XCIuXCI6ZStcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgZz1cbjA7ZzxhLmxlbmd0aDtnKyspe2s9YVtnXTt2YXIgZj1lK04oayxnKTtoKz1PKGssYixjLGYsZCl9ZWxzZSBpZihmPXkoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWUrTihrLGcrKyksaCs9TyhrLGIsYyxmLGQpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1cIlwiK2EsRXJyb3IoeigzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7cmV0dXJuIGh9ZnVuY3Rpb24gUChhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXSxkPTA7TyhhLGUsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoYyxhLGQrKyl9KTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFEoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTthLl9zdGF0dXM9MDthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdDt0aHJvdyBhLl9yZXN1bHQ7fXZhciBSPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFMoKXt2YXIgYT1SLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeigzMjEpKTtyZXR1cm4gYX12YXIgVD17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpSLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOnt0cmFuc2l0aW9uOjB9LFJlYWN0Q3VycmVudE93bmVyOkcsSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtcbmV4cG9ydHMuQ2hpbGRyZW49e21hcDpQLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe1AoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxjKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtQKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUChhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFMKGEpKXRocm93IEVycm9yKHooMTQzKSk7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1DO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1FO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VDtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcih6KDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1HLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUguY2FsbChiLGYpJiYhSS5oYXNPd25Qcm9wZXJ0eShmKSYmKGVbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7Zm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxcbmtleTpkLHJlZjprLHByb3BzOmUsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjpyLF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6cSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9SjtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9Si5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TDtcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlF9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6dSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4yXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogUmVsYXkgdjExLjAuMlxuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvaW5kZXguanMnKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ29ubmVjdGlvbkhhbmRsZXIgPSByZXF1aXJlKCcuL2Nvbm5lY3Rpb24vQ29ubmVjdGlvbkhhbmRsZXInKTtcblxudmFyIE11dGF0aW9uSGFuZGxlcnMgPSByZXF1aXJlKCcuL2Nvbm5lY3Rpb24vTXV0YXRpb25IYW5kbGVycycpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbmZ1bmN0aW9uIFJlbGF5RGVmYXVsdEhhbmRsZXJQcm92aWRlcihoYW5kbGUpIHtcbiAgc3dpdGNoIChoYW5kbGUpIHtcbiAgICBjYXNlICdjb25uZWN0aW9uJzpcbiAgICAgIHJldHVybiBDb25uZWN0aW9uSGFuZGxlcjtcblxuICAgIGNhc2UgJ2RlbGV0ZVJlY29yZCc6XG4gICAgICByZXR1cm4gTXV0YXRpb25IYW5kbGVycy5EZWxldGVSZWNvcmRIYW5kbGVyO1xuXG4gICAgY2FzZSAnZGVsZXRlRWRnZSc6XG4gICAgICByZXR1cm4gTXV0YXRpb25IYW5kbGVycy5EZWxldGVFZGdlSGFuZGxlcjtcblxuICAgIGNhc2UgJ2FwcGVuZEVkZ2UnOlxuICAgICAgcmV0dXJuIE11dGF0aW9uSGFuZGxlcnMuQXBwZW5kRWRnZUhhbmRsZXI7XG5cbiAgICBjYXNlICdwcmVwZW5kRWRnZSc6XG4gICAgICByZXR1cm4gTXV0YXRpb25IYW5kbGVycy5QcmVwZW5kRWRnZUhhbmRsZXI7XG5cbiAgICBjYXNlICdhcHBlbmROb2RlJzpcbiAgICAgIHJldHVybiBNdXRhdGlvbkhhbmRsZXJzLkFwcGVuZE5vZGVIYW5kbGVyO1xuXG4gICAgY2FzZSAncHJlcGVuZE5vZGUnOlxuICAgICAgcmV0dXJuIE11dGF0aW9uSGFuZGxlcnMuUHJlcGVuZE5vZGVIYW5kbGVyO1xuICB9XG5cbiAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlEZWZhdWx0SGFuZGxlclByb3ZpZGVyOiBObyBoYW5kbGVyIHByb3ZpZGVkIGZvciBgJXNgLicsIGhhbmRsZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5RGVmYXVsdEhhbmRsZXJQcm92aWRlcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIENvbm5lY3Rpb25JbnRlcmZhY2UgPSByZXF1aXJlKCcuL0Nvbm5lY3Rpb25JbnRlcmZhY2UnKTtcblxudmFyIGdldFJlbGF5SGFuZGxlS2V5ID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9nZXRSZWxheUhhbmRsZUtleScpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3JlL0NsaWVudElEJyksXG4gICAgZ2VuZXJhdGVDbGllbnRJRCA9IF9yZXF1aXJlLmdlbmVyYXRlQ2xpZW50SUQ7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuLi8uLi9zdG9yZS9SZWxheVN0b3JlVXRpbHMnKSxcbiAgICBnZXRTdGFibGVTdG9yYWdlS2V5ID0gX3JlcXVpcmUyLmdldFN0YWJsZVN0b3JhZ2VLZXk7XG5cbnZhciBDT05ORUNUSU9OID0gJ2Nvbm5lY3Rpb24nOyAvLyBQZXItaW5zdGFuY2UgaW5jcmVtZW50aW5nIGluZGV4IHVzZWQgdG8gZ2VuZXJhdGUgdW5pcXVlIGVkZ2UgSURzXG5cbnZhciBORVhUX0VER0VfSU5ERVggPSAnX19jb25uZWN0aW9uX25leHRfZWRnZV9pbmRleCc7XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBBIGRlZmF1bHQgcnVudGltZSBoYW5kbGVyIGZvciBjb25uZWN0aW9uIGZpZWxkcyB0aGF0IGFwcGVuZHMgbmV3bHkgZmV0Y2hlZFxuICogZWRnZXMgb250byB0aGUgZW5kIG9mIGEgY29ubmVjdGlvbiwgcmVnYXJkbGVzcyBvZiB0aGUgYXJndW1lbnRzIHVzZWQgdG8gZmV0Y2hcbiAqIHRob3NlIGVkZ2VzLlxuICovXG5cbmZ1bmN0aW9uIHVwZGF0ZShzdG9yZSwgcGF5bG9hZCkge1xuICB2YXIgcmVjb3JkID0gc3RvcmUuZ2V0KHBheWxvYWQuZGF0YUlEKTtcblxuICBpZiAoIXJlY29yZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfQ29ubmVjdGlvbkludGVyZmFjZSQgPSBDb25uZWN0aW9uSW50ZXJmYWNlLmdldCgpLFxuICAgICAgRURHRVMgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQuRURHRVMsXG4gICAgICBFTkRfQ1VSU09SID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkLkVORF9DVVJTT1IsXG4gICAgICBIQVNfTkVYVF9QQUdFID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkLkhBU19ORVhUX1BBR0UsXG4gICAgICBIQVNfUFJFVl9QQUdFID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkLkhBU19QUkVWX1BBR0UsXG4gICAgICBQQUdFX0lORk8gPSBfQ29ubmVjdGlvbkludGVyZmFjZSQuUEFHRV9JTkZPLFxuICAgICAgUEFHRV9JTkZPX1RZUEUgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQuUEFHRV9JTkZPX1RZUEUsXG4gICAgICBTVEFSVF9DVVJTT1IgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQuU1RBUlRfQ1VSU09SO1xuXG4gIHZhciBzZXJ2ZXJDb25uZWN0aW9uID0gcmVjb3JkLmdldExpbmtlZFJlY29yZChwYXlsb2FkLmZpZWxkS2V5KTtcbiAgdmFyIHNlcnZlclBhZ2VJbmZvID0gc2VydmVyQ29ubmVjdGlvbiAmJiBzZXJ2ZXJDb25uZWN0aW9uLmdldExpbmtlZFJlY29yZChQQUdFX0lORk8pO1xuXG4gIGlmICghc2VydmVyQ29ubmVjdGlvbikge1xuICAgIHJlY29yZC5zZXRWYWx1ZShudWxsLCBwYXlsb2FkLmhhbmRsZUtleSk7XG4gICAgcmV0dXJuO1xuICB9IC8vIEluIHJhcmUgY2FzZXMgdGhlIGhhbmRsZUtleSBmaWVsZCBtYXkgYmUgdW5zZXQgZXZlbiB0aG91Z2ggdGhlIGNsaWVudFxuICAvLyBjb25uZWN0aW9uIHJlY29yZCBleGlzdHMsIGluIHRoaXMgY2FzZSBuZXcgZWRnZXMgc2hvdWxkIHN0aWxsIGJlIG1lcmdlZFxuICAvLyBpbnRvIHRoZSBleGlzdGluZyBjbGllbnQgY29ubmVjdGlvbiByZWNvcmQgKGFuZCB0aGUgZmllbGQgcmVzZXQgdG8gcG9pbnRcbiAgLy8gdG8gdGhhdCByZWNvcmQpLlxuXG5cbiAgdmFyIGNsaWVudENvbm5lY3Rpb25JRCA9IGdlbmVyYXRlQ2xpZW50SUQocmVjb3JkLmdldERhdGFJRCgpLCBwYXlsb2FkLmhhbmRsZUtleSk7XG4gIHZhciBjbGllbnRDb25uZWN0aW9uRmllbGQgPSByZWNvcmQuZ2V0TGlua2VkUmVjb3JkKHBheWxvYWQuaGFuZGxlS2V5KTtcbiAgdmFyIGNsaWVudENvbm5lY3Rpb24gPSBjbGllbnRDb25uZWN0aW9uRmllbGQgIT09IG51bGwgJiYgY2xpZW50Q29ubmVjdGlvbkZpZWxkICE9PSB2b2lkIDAgPyBjbGllbnRDb25uZWN0aW9uRmllbGQgOiBzdG9yZS5nZXQoY2xpZW50Q29ubmVjdGlvbklEKTtcbiAgdmFyIGNsaWVudFBhZ2VJbmZvID0gY2xpZW50Q29ubmVjdGlvbiAmJiBjbGllbnRDb25uZWN0aW9uLmdldExpbmtlZFJlY29yZChQQUdFX0lORk8pO1xuXG4gIGlmICghY2xpZW50Q29ubmVjdGlvbikge1xuICAgIC8vIEluaXRpYWwgZmV0Y2ggd2l0aCBkYXRhOiBjb3B5IGZpZWxkcyBmcm9tIHRoZSBzZXJ2ZXIgcmVjb3JkXG4gICAgdmFyIGNvbm5lY3Rpb24gPSBzdG9yZS5jcmVhdGUoY2xpZW50Q29ubmVjdGlvbklELCBzZXJ2ZXJDb25uZWN0aW9uLmdldFR5cGUoKSk7XG4gICAgY29ubmVjdGlvbi5zZXRWYWx1ZSgwLCBORVhUX0VER0VfSU5ERVgpO1xuICAgIGNvbm5lY3Rpb24uY29weUZpZWxkc0Zyb20oc2VydmVyQ29ubmVjdGlvbik7XG4gICAgdmFyIHNlcnZlckVkZ2VzID0gc2VydmVyQ29ubmVjdGlvbi5nZXRMaW5rZWRSZWNvcmRzKEVER0VTKTtcblxuICAgIGlmIChzZXJ2ZXJFZGdlcykge1xuICAgICAgc2VydmVyRWRnZXMgPSBzZXJ2ZXJFZGdlcy5tYXAoZnVuY3Rpb24gKGVkZ2UpIHtcbiAgICAgICAgcmV0dXJuIGJ1aWxkQ29ubmVjdGlvbkVkZ2Uoc3RvcmUsIGNvbm5lY3Rpb24sIGVkZ2UpO1xuICAgICAgfSk7XG4gICAgICBjb25uZWN0aW9uLnNldExpbmtlZFJlY29yZHMoc2VydmVyRWRnZXMsIEVER0VTKTtcbiAgICB9XG5cbiAgICByZWNvcmQuc2V0TGlua2VkUmVjb3JkKGNvbm5lY3Rpb24sIHBheWxvYWQuaGFuZGxlS2V5KTtcbiAgICBjbGllbnRQYWdlSW5mbyA9IHN0b3JlLmNyZWF0ZShnZW5lcmF0ZUNsaWVudElEKGNvbm5lY3Rpb24uZ2V0RGF0YUlEKCksIFBBR0VfSU5GTyksIFBBR0VfSU5GT19UWVBFKTtcbiAgICBjbGllbnRQYWdlSW5mby5zZXRWYWx1ZShmYWxzZSwgSEFTX05FWFRfUEFHRSk7XG4gICAgY2xpZW50UGFnZUluZm8uc2V0VmFsdWUoZmFsc2UsIEhBU19QUkVWX1BBR0UpO1xuICAgIGNsaWVudFBhZ2VJbmZvLnNldFZhbHVlKG51bGwsIEVORF9DVVJTT1IpO1xuICAgIGNsaWVudFBhZ2VJbmZvLnNldFZhbHVlKG51bGwsIFNUQVJUX0NVUlNPUik7XG5cbiAgICBpZiAoc2VydmVyUGFnZUluZm8pIHtcbiAgICAgIGNsaWVudFBhZ2VJbmZvLmNvcHlGaWVsZHNGcm9tKHNlcnZlclBhZ2VJbmZvKTtcbiAgICB9XG5cbiAgICBjb25uZWN0aW9uLnNldExpbmtlZFJlY29yZChjbGllbnRQYWdlSW5mbywgUEFHRV9JTkZPKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoY2xpZW50Q29ubmVjdGlvbkZpZWxkID09IG51bGwpIHtcbiAgICAgIC8vIElmIHRoZSBoYW5kbGVLZXkgZmllbGQgd2FzIHVuc2V0IGJ1dCB0aGUgY2xpZW50IGNvbm5lY3Rpb24gcmVjb3JkXG4gICAgICAvLyBleGlzdGVkLCB1cGRhdGUgdGhlIGZpZWxkIHRvIHBvaW50IHRvIHRoZSByZWNvcmRcbiAgICAgIHJlY29yZC5zZXRMaW5rZWRSZWNvcmQoY2xpZW50Q29ubmVjdGlvbiwgcGF5bG9hZC5oYW5kbGVLZXkpO1xuICAgIH1cblxuICAgIHZhciBfY29ubmVjdGlvbiA9IGNsaWVudENvbm5lY3Rpb247IC8vIFN1YnNlcXVlbnQgZmV0Y2hlczpcbiAgICAvLyAtIHVwZGF0ZWQgZmllbGRzIG9uIHRoZSBjb25uZWN0aW9uXG4gICAgLy8gLSBtZXJnZSBwcmV2L25leHQgZWRnZXMsIGRlLWR1cGxpY2F0aW5nIGJ5IG5vZGUgaWRcbiAgICAvLyAtIHN5bnRoZXNpemUgcGFnZSBpbmZvIGZpZWxkc1xuXG4gICAgdmFyIF9zZXJ2ZXJFZGdlcyA9IHNlcnZlckNvbm5lY3Rpb24uZ2V0TGlua2VkUmVjb3JkcyhFREdFUyk7XG5cbiAgICBpZiAoX3NlcnZlckVkZ2VzKSB7XG4gICAgICBfc2VydmVyRWRnZXMgPSBfc2VydmVyRWRnZXMubWFwKGZ1bmN0aW9uIChlZGdlKSB7XG4gICAgICAgIHJldHVybiBidWlsZENvbm5lY3Rpb25FZGdlKHN0b3JlLCBfY29ubmVjdGlvbiwgZWRnZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgcHJldkVkZ2VzID0gX2Nvbm5lY3Rpb24uZ2V0TGlua2VkUmVjb3JkcyhFREdFUyk7XG5cbiAgICB2YXIgcHJldlBhZ2VJbmZvID0gX2Nvbm5lY3Rpb24uZ2V0TGlua2VkUmVjb3JkKFBBR0VfSU5GTyk7XG5cbiAgICBfY29ubmVjdGlvbi5jb3B5RmllbGRzRnJvbShzZXJ2ZXJDb25uZWN0aW9uKTsgLy8gUmVzZXQgRURHRVMgYW5kIFBBR0VfSU5GTyBmaWVsZHNcblxuXG4gICAgaWYgKHByZXZFZGdlcykge1xuICAgICAgX2Nvbm5lY3Rpb24uc2V0TGlua2VkUmVjb3JkcyhwcmV2RWRnZXMsIEVER0VTKTtcbiAgICB9XG5cbiAgICBpZiAocHJldlBhZ2VJbmZvKSB7XG4gICAgICBfY29ubmVjdGlvbi5zZXRMaW5rZWRSZWNvcmQocHJldlBhZ2VJbmZvLCBQQUdFX0lORk8pO1xuICAgIH1cblxuICAgIHZhciBuZXh0RWRnZXMgPSBbXTtcbiAgICB2YXIgYXJncyA9IHBheWxvYWQuYXJncztcblxuICAgIGlmIChwcmV2RWRnZXMgJiYgX3NlcnZlckVkZ2VzKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIGlmIChhcmdzLmFmdGVyICE9IG51bGwpIHtcbiAgICAgICAgLy8gRm9yd2FyZCBwYWdpbmF0aW9uIGZyb20gdGhlIGVuZCBvZiB0aGUgY29ubmVjdGlvbjogYXBwZW5kIGVkZ2VzXG4gICAgICAgIGlmIChjbGllbnRQYWdlSW5mbyAmJiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgICAgYXJncy5hZnRlciA9PT0gY2xpZW50UGFnZUluZm8uZ2V0VmFsdWUoRU5EX0NVUlNPUikpIHtcbiAgICAgICAgICB2YXIgbm9kZUlEcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICBtZXJnZUVkZ2VzKHByZXZFZGdlcywgbmV4dEVkZ2VzLCBub2RlSURzKTtcbiAgICAgICAgICBtZXJnZUVkZ2VzKF9zZXJ2ZXJFZGdlcywgbmV4dEVkZ2VzLCBub2RlSURzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXk6IFVuZXhwZWN0ZWQgYWZ0ZXIgY3Vyc29yIGAlc2AsIGVkZ2VzIG11c3QgJyArICdiZSBmZXRjaGVkIGZyb20gdGhlIGVuZCBvZiB0aGUgbGlzdCAoYCVzYCkuJywgYXJncy5hZnRlciwgY2xpZW50UGFnZUluZm8gJiYgY2xpZW50UGFnZUluZm8uZ2V0VmFsdWUoRU5EX0NVUlNPUikpIDogdm9pZCAwO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgICAgfSBlbHNlIGlmIChhcmdzLmJlZm9yZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIEJhY2t3YXJkIHBhZ2luYXRpb24gZnJvbSB0aGUgc3RhcnQgb2YgdGhlIGNvbm5lY3Rpb246IHByZXBlbmQgZWRnZXNcbiAgICAgICAgaWYgKGNsaWVudFBhZ2VJbmZvICYmIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgICBhcmdzLmJlZm9yZSA9PT0gY2xpZW50UGFnZUluZm8uZ2V0VmFsdWUoU1RBUlRfQ1VSU09SKSkge1xuICAgICAgICAgIHZhciBfbm9kZUlEcyA9IG5ldyBTZXQoKTtcblxuICAgICAgICAgIG1lcmdlRWRnZXMoX3NlcnZlckVkZ2VzLCBuZXh0RWRnZXMsIF9ub2RlSURzKTtcbiAgICAgICAgICBtZXJnZUVkZ2VzKHByZXZFZGdlcywgbmV4dEVkZ2VzLCBfbm9kZUlEcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5OiBVbmV4cGVjdGVkIGJlZm9yZSBjdXJzb3IgYCVzYCwgZWRnZXMgbXVzdCAnICsgJ2JlIGZldGNoZWQgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXN0IChgJXNgKS4nLCBhcmdzLmJlZm9yZSwgY2xpZW50UGFnZUluZm8gJiYgY2xpZW50UGFnZUluZm8uZ2V0VmFsdWUoU1RBUlRfQ1VSU09SKSkgOiB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGUgY29ubmVjdGlvbiB3YXMgcmVmZXRjaGVkIGZyb20gdGhlIGJlZ2lubmluZy9lbmQ6IHJlcGxhY2UgZWRnZXNcbiAgICAgICAgbmV4dEVkZ2VzID0gX3NlcnZlckVkZ2VzO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3NlcnZlckVkZ2VzKSB7XG4gICAgICBuZXh0RWRnZXMgPSBfc2VydmVyRWRnZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRFZGdlcyA9IHByZXZFZGdlcztcbiAgICB9IC8vIFVwZGF0ZSBlZGdlcyBvbmx5IGlmIHRoZXkgd2VyZSB1cGRhdGVkLCB0aGUgbnVsbCBjaGVjayBpc1xuICAgIC8vIGZvciBGbG93IChwcmV2RWRnZXMgY291bGQgYmUgbnVsbCkuXG5cblxuICAgIGlmIChuZXh0RWRnZXMgIT0gbnVsbCAmJiBuZXh0RWRnZXMgIT09IHByZXZFZGdlcykge1xuICAgICAgX2Nvbm5lY3Rpb24uc2V0TGlua2VkUmVjb3JkcyhuZXh0RWRnZXMsIEVER0VTKTtcbiAgICB9IC8vIFBhZ2UgaW5mbyBzaG91bGQgYmUgdXBkYXRlZCBldmVuIGlmIG5vIG5ldyBlZGdlIHdlcmUgcmV0dXJuZWQuXG5cblxuICAgIGlmIChjbGllbnRQYWdlSW5mbyAmJiBzZXJ2ZXJQYWdlSW5mbykge1xuICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBpZiAoYXJncy5hZnRlciA9PSBudWxsICYmIGFyZ3MuYmVmb3JlID09IG51bGwpIHtcbiAgICAgICAgLy8gVGhlIGNvbm5lY3Rpb24gd2FzIHJlZmV0Y2hlZCBmcm9tIHRoZSBiZWdpbm5pbmcvZW5kOiByZXBsYWNlXG4gICAgICAgIC8vIHBhZ2VfaW5mb1xuICAgICAgICBjbGllbnRQYWdlSW5mby5jb3B5RmllbGRzRnJvbShzZXJ2ZXJQYWdlSW5mbyk7IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgfSBlbHNlIGlmIChhcmdzLmJlZm9yZSAhPSBudWxsIHx8IGFyZ3MuYWZ0ZXIgPT0gbnVsbCAmJiBhcmdzLmxhc3QpIHtcbiAgICAgICAgY2xpZW50UGFnZUluZm8uc2V0VmFsdWUoISFzZXJ2ZXJQYWdlSW5mby5nZXRWYWx1ZShIQVNfUFJFVl9QQUdFKSwgSEFTX1BSRVZfUEFHRSk7XG4gICAgICAgIHZhciBzdGFydEN1cnNvciA9IHNlcnZlclBhZ2VJbmZvLmdldFZhbHVlKFNUQVJUX0NVUlNPUik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzdGFydEN1cnNvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBjbGllbnRQYWdlSW5mby5zZXRWYWx1ZShzdGFydEN1cnNvciwgU1RBUlRfQ1VSU09SKTtcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgICAgfSBlbHNlIGlmIChhcmdzLmFmdGVyICE9IG51bGwgfHwgYXJncy5iZWZvcmUgPT0gbnVsbCAmJiBhcmdzLmZpcnN0KSB7XG4gICAgICAgIGNsaWVudFBhZ2VJbmZvLnNldFZhbHVlKCEhc2VydmVyUGFnZUluZm8uZ2V0VmFsdWUoSEFTX05FWFRfUEFHRSksIEhBU19ORVhUX1BBR0UpO1xuICAgICAgICB2YXIgZW5kQ3Vyc29yID0gc2VydmVyUGFnZUluZm8uZ2V0VmFsdWUoRU5EX0NVUlNPUik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlbmRDdXJzb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY2xpZW50UGFnZUluZm8uc2V0VmFsdWUoZW5kQ3Vyc29yLCBFTkRfQ1VSU09SKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogR2l2ZW4gYSByZWNvcmQgYW5kIHRoZSBuYW1lIG9mIHRoZSBzY2hlbWEgZmllbGQgZm9yIHdoaWNoIGEgY29ubmVjdGlvbiB3YXNcbiAqIGZldGNoZWQsIHJldHVybnMgdGhlIGxpbmtlZCBjb25uZWN0aW9uIHJlY29yZC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIEdpdmVuIHRoYXQgZGF0YSBoYXMgYWxyZWFkeSBiZWVuIGZldGNoZWQgb24gc29tZSB1c2VyIGA8aWQ+YCBvbiB0aGUgYGZyaWVuZHNgXG4gKiBmaWVsZDpcbiAqXG4gKiBgYGBcbiAqIGZyYWdtZW50IEZyaWVuZHNGcmFnbWVudCBvbiBVc2VyIHtcbiAqICAgZnJpZW5kcyhmaXJzdDogMTApIEBjb25uZWN0aW9uKGtleTogXCJGcmllbmRzRnJhZ21lbnRfZnJpZW5kc1wiKSB7XG4gKiAgICBlZGdlcyB7XG4gKiAgICAgIG5vZGUge1xuICogICAgICAgIGlkXG4gKiAgICAgICAgfVxuICogICAgICB9XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBgZnJpZW5kc2AgY29ubmVjdGlvbiByZWNvcmQgY2FuIGJlIGFjY2Vzc2VkIHdpdGg6XG4gKlxuICogYGBgXG4gKiBzdG9yZSA9PiB7XG4gKiAgIGNvbnN0IHVzZXIgPSBzdG9yZS5nZXQoJzxpZD4nKTtcbiAqICAgY29uc3QgZnJpZW5kcyA9IENvbm5lY3Rpb25IYW5kbGVyLmdldENvbm5lY3Rpb24odXNlciwgJ0ZyaWVuZHNGcmFnbWVudF9mcmllbmRzJyk7XG4gKiAgIC8vIEFjY2VzcyBmaWVsZHMgb24gdGhlIGNvbm5lY3Rpb246XG4gKiAgIGNvbnN0IGVkZ2VzID0gZnJpZW5kcy5nZXRMaW5rZWRSZWNvcmRzKCdlZGdlcycpO1xuICogfVxuICogYGBgXG4gKlxuICogVE9ETzogdDE1NzMzMzEyXG4gKiBDdXJyZW50bHkgd2UgaGF2ZW4ndCBydW4gaW50byB0aGlzIGNhc2UgeWV0LCBidXQgd2UgbmVlZCB0byBhZGQgYSBgZ2V0Q29ubmVjdGlvbnNgXG4gKiB0aGF0IHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIGNvbm5lY3Rpb25zIHVuZGVyIHRoZSBzYW1lIGBrZXlgIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhcmlhYmxlcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldENvbm5lY3Rpb24ocmVjb3JkLCBrZXksIGZpbHRlcnMpIHtcbiAgdmFyIGhhbmRsZUtleSA9IGdldFJlbGF5SGFuZGxlS2V5KENPTk5FQ1RJT04sIGtleSwgbnVsbCk7XG4gIHJldHVybiByZWNvcmQuZ2V0TGlua2VkUmVjb3JkKGhhbmRsZUtleSwgZmlsdGVycyk7XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBHaXZlbiBhIHJlY29yZCBJRCwgdGhlIGtleSBvZiBhIGNvbm5lY3Rpb24gZmllbGQsIGFuZCBvcHRpb25hbCBmaWx0ZXJzIHVzZWRcbiAqIHRvIGlkZW50aWZ5IHRoZSBjb25uZWN0aW9uLCByZXR1cm5zIHRoZSBjb25uZWN0aW9uIElELlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogR2l2ZW4gdGhhdCBkYXRhIGhhcyBhbHJlYWR5IGJlZW4gZmV0Y2hlZCBvbiBzb21lIHVzZXIgYDx1c2VyLWlkPmAgb24gdGhlIGBmcmllbmRzYFxuICogZmllbGQ6XG4gKlxuICogYGBgXG4gKiBmcmFnbWVudCBGcmllbmRzRnJhZ21lbnQgb24gVXNlciB7XG4gKiAgIGZyaWVuZHMoZmlyc3Q6IDEwKSBAY29ubmVjdGlvbihrZXk6IFwiRnJpZW5kc0ZyYWdtZW50X2ZyaWVuZHNcIikge1xuICogICAgIGVkZ2VzIHtcbiAqICAgICAgIG5vZGUge1xuICogICAgICAgICBpZFxuICogICAgICAgfVxuICogICAgIH1cbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICogVGhlIElEIG9mIHRoZSBgZnJpZW5kc2AgY29ubmVjdGlvbiByZWNvcmQgY2FuIGJlIGFjY2Vzc2VkIHdpdGg6XG4gKlxuICogYGBgXG4gKiBzdG9yZSA9PiB7XG4gKiAgIGNvbnN0IGNvbm5lY3Rpb25JRCA9IENvbm5lY3Rpb25IYW5kbGVyLmdldENvbm5lY3Rpb25JRCgnPHVzZXItaWQ+JywgJ0ZyaWVuZHNGcmFnbWVudF9mcmllbmRzJyk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldENvbm5lY3Rpb25JRChyZWNvcmRJRCwga2V5LCBmaWx0ZXJzKSB7XG4gIHZhciBoYW5kbGVLZXkgPSBnZXRSZWxheUhhbmRsZUtleShDT05ORUNUSU9OLCBrZXksIG51bGwpO1xuICB2YXIgc3RvcmFnZUtleSA9IGdldFN0YWJsZVN0b3JhZ2VLZXkoaGFuZGxlS2V5LCBmaWx0ZXJzKTtcbiAgcmV0dXJuIGdlbmVyYXRlQ2xpZW50SUQocmVjb3JkSUQsIHN0b3JhZ2VLZXkpO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogSW5zZXJ0cyBhbiBlZGdlIGFmdGVyIHRoZSBnaXZlbiBjdXJzb3IsIG9yIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3QgaWYgbm9cbiAqIGN1cnNvciBpcyBwcm92aWRlZC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIEdpdmVuIHRoYXQgZGF0YSBoYXMgYWxyZWFkeSBiZWVuIGZldGNoZWQgb24gc29tZSB1c2VyIGA8aWQ+YCBvbiB0aGUgYGZyaWVuZHNgXG4gKiBmaWVsZDpcbiAqXG4gKiBgYGBcbiAqIGZyYWdtZW50IEZyaWVuZHNGcmFnbWVudCBvbiBVc2VyIHtcbiAqICAgZnJpZW5kcyhmaXJzdDogMTApIEBjb25uZWN0aW9uKGtleTogXCJGcmllbmRzRnJhZ21lbnRfZnJpZW5kc1wiKSB7XG4gKiAgICBlZGdlcyB7XG4gKiAgICAgIG5vZGUge1xuICogICAgICAgIGlkXG4gKiAgICAgICAgfVxuICogICAgICB9XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEFuIGVkZ2UgY2FuIGJlIGFwcGVuZGVkIHdpdGg6XG4gKlxuICogYGBgXG4gKiBzdG9yZSA9PiB7XG4gKiAgIGNvbnN0IHVzZXIgPSBzdG9yZS5nZXQoJzxpZD4nKTtcbiAqICAgY29uc3QgZnJpZW5kcyA9IENvbm5lY3Rpb25IYW5kbGVyLmdldENvbm5lY3Rpb24odXNlciwgJ0ZyaWVuZHNGcmFnbWVudF9mcmllbmRzJyk7XG4gKiAgIGNvbnN0IGVkZ2UgPSBzdG9yZS5jcmVhdGUoJzxlZGdlLWlkPicsICdGcmllbmRzRWRnZScpO1xuICogICBDb25uZWN0aW9uSGFuZGxlci5pbnNlcnRFZGdlQWZ0ZXIoZnJpZW5kcywgZWRnZSk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEVkZ2VBZnRlcihyZWNvcmQsIG5ld0VkZ2UsIGN1cnNvcikge1xuICB2YXIgX0Nvbm5lY3Rpb25JbnRlcmZhY2UkMiA9IENvbm5lY3Rpb25JbnRlcmZhY2UuZ2V0KCksXG4gICAgICBDVVJTT1IgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQyLkNVUlNPUixcbiAgICAgIEVER0VTID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkMi5FREdFUztcblxuICB2YXIgZWRnZXMgPSByZWNvcmQuZ2V0TGlua2VkUmVjb3JkcyhFREdFUyk7XG5cbiAgaWYgKCFlZGdlcykge1xuICAgIHJlY29yZC5zZXRMaW5rZWRSZWNvcmRzKFtuZXdFZGdlXSwgRURHRVMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBuZXh0RWRnZXM7XG5cbiAgaWYgKGN1cnNvciA9PSBudWxsKSB7XG4gICAgbmV4dEVkZ2VzID0gZWRnZXMuY29uY2F0KG5ld0VkZ2UpO1xuICB9IGVsc2Uge1xuICAgIG5leHRFZGdlcyA9IFtdO1xuICAgIHZhciBmb3VuZEN1cnNvciA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGVkZ2VzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIGVkZ2UgPSBlZGdlc1tpaV07XG4gICAgICBuZXh0RWRnZXMucHVzaChlZGdlKTtcblxuICAgICAgaWYgKGVkZ2UgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVkZ2VDdXJzb3IgPSBlZGdlLmdldFZhbHVlKENVUlNPUik7XG5cbiAgICAgIGlmIChjdXJzb3IgPT09IGVkZ2VDdXJzb3IpIHtcbiAgICAgICAgbmV4dEVkZ2VzLnB1c2gobmV3RWRnZSk7XG4gICAgICAgIGZvdW5kQ3Vyc29yID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWZvdW5kQ3Vyc29yKSB7XG4gICAgICBuZXh0RWRnZXMucHVzaChuZXdFZGdlKTtcbiAgICB9XG4gIH1cblxuICByZWNvcmQuc2V0TGlua2VkUmVjb3JkcyhuZXh0RWRnZXMsIEVER0VTKTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIENyZWF0ZXMgYW4gZWRnZSBmb3IgYSBjb25uZWN0aW9uIHJlY29yZCwgZ2l2ZW4gYSBub2RlIGFuZCBlZGdlIHR5cGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVFZGdlKHN0b3JlLCByZWNvcmQsIG5vZGUsIGVkZ2VUeXBlKSB7XG4gIHZhciBfQ29ubmVjdGlvbkludGVyZmFjZSQzID0gQ29ubmVjdGlvbkludGVyZmFjZS5nZXQoKSxcbiAgICAgIE5PREUgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQzLk5PREU7IC8vIEFuIGluZGV4LWJhc2VkIGNsaWVudCBJRCBjb3VsZCBlYXNpbHkgY29uZmxpY3QgKHVubGVzcyBpdCB3YXNcbiAgLy8gYXV0by1pbmNyZW1lbnRpbmcsIGJ1dCB0aGVyZSBpcyBub3doZXJlIHRvIHRoZSBzdG9yZSB0aGUgaWQpXG4gIC8vIEluc3RlYWQsIGNvbnN0cnVjdCBhIGNsaWVudCBJRCBiYXNlZCBvbiB0aGUgY29ubmVjdGlvbiBJRCBhbmQgbm9kZSBJRCxcbiAgLy8gd2hpY2ggd2lsbCBvbmx5IGNvbmZsaWN0IGlmIHRoZSBzYW1lIG5vZGUgaXMgYWRkZWQgdG8gdGhlIHNhbWUgY29ubmVjdGlvblxuICAvLyB0d2ljZS4gVGhpcyBpcyBhY2NlcHRhYmxlIHNpbmNlIHRoZSBgaW5zZXJ0RWRnZSpgIGZ1bmN0aW9ucyBpZ25vcmVcbiAgLy8gZHVwbGljYXRlcy5cblxuXG4gIHZhciBlZGdlSUQgPSBnZW5lcmF0ZUNsaWVudElEKHJlY29yZC5nZXREYXRhSUQoKSwgbm9kZS5nZXREYXRhSUQoKSk7XG4gIHZhciBlZGdlID0gc3RvcmUuZ2V0KGVkZ2VJRCk7XG5cbiAgaWYgKCFlZGdlKSB7XG4gICAgZWRnZSA9IHN0b3JlLmNyZWF0ZShlZGdlSUQsIGVkZ2VUeXBlKTtcbiAgfVxuXG4gIGVkZ2Uuc2V0TGlua2VkUmVjb3JkKG5vZGUsIE5PREUpO1xuXG4gIGlmIChlZGdlLmdldFZhbHVlKCdjdXJzb3InKSA9PSBudWxsKSB7XG4gICAgLy8gQWx3YXlzIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkIHZhbHVlIGZvciBjdXJzb3JcbiAgICAvLyB0byBhdm9pZCBjb25zaWRlcmluZyBpdCBhcyBtaXNzaW5nIGRhdGFcbiAgICBlZGdlLnNldFZhbHVlKG51bGwsICdjdXJzb3InKTtcbiAgfVxuXG4gIHJldHVybiBlZGdlO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogSW5zZXJ0cyBhbiBlZGdlIGJlZm9yZSB0aGUgZ2l2ZW4gY3Vyc29yLCBvciBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXN0IGlmXG4gKiBubyBjdXJzb3IgaXMgcHJvdmlkZWQuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBHaXZlbiB0aGF0IGRhdGEgaGFzIGFscmVhZHkgYmVlbiBmZXRjaGVkIG9uIHNvbWUgdXNlciBgPGlkPmAgb24gdGhlIGBmcmllbmRzYFxuICogZmllbGQ6XG4gKlxuICogYGBgXG4gKiBmcmFnbWVudCBGcmllbmRzRnJhZ21lbnQgb24gVXNlciB7XG4gKiAgIGZyaWVuZHMoZmlyc3Q6IDEwKSBAY29ubmVjdGlvbihrZXk6IFwiRnJpZW5kc0ZyYWdtZW50X2ZyaWVuZHNcIikge1xuICogICAgZWRnZXMge1xuICogICAgICBub2RlIHtcbiAqICAgICAgICBpZFxuICogICAgICAgIH1cbiAqICAgICAgfVxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBBbiBlZGdlIGNhbiBiZSBwcmVwZW5kZWQgd2l0aDpcbiAqXG4gKiBgYGBcbiAqIHN0b3JlID0+IHtcbiAqICAgY29uc3QgdXNlciA9IHN0b3JlLmdldCgnPGlkPicpO1xuICogICBjb25zdCBmcmllbmRzID0gQ29ubmVjdGlvbkhhbmRsZXIuZ2V0Q29ubmVjdGlvbih1c2VyLCAnRnJpZW5kc0ZyYWdtZW50X2ZyaWVuZHMnKTtcbiAqICAgY29uc3QgZWRnZSA9IHN0b3JlLmNyZWF0ZSgnPGVkZ2UtaWQ+JywgJ0ZyaWVuZHNFZGdlJyk7XG4gKiAgIENvbm5lY3Rpb25IYW5kbGVyLmluc2VydEVkZ2VCZWZvcmUoZnJpZW5kcywgZWRnZSk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEVkZ2VCZWZvcmUocmVjb3JkLCBuZXdFZGdlLCBjdXJzb3IpIHtcbiAgdmFyIF9Db25uZWN0aW9uSW50ZXJmYWNlJDQgPSBDb25uZWN0aW9uSW50ZXJmYWNlLmdldCgpLFxuICAgICAgQ1VSU09SID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkNC5DVVJTT1IsXG4gICAgICBFREdFUyA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJDQuRURHRVM7XG5cbiAgdmFyIGVkZ2VzID0gcmVjb3JkLmdldExpbmtlZFJlY29yZHMoRURHRVMpO1xuXG4gIGlmICghZWRnZXMpIHtcbiAgICByZWNvcmQuc2V0TGlua2VkUmVjb3JkcyhbbmV3RWRnZV0sIEVER0VTKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbmV4dEVkZ2VzO1xuXG4gIGlmIChjdXJzb3IgPT0gbnVsbCkge1xuICAgIG5leHRFZGdlcyA9IFtuZXdFZGdlXS5jb25jYXQoZWRnZXMpO1xuICB9IGVsc2Uge1xuICAgIG5leHRFZGdlcyA9IFtdO1xuICAgIHZhciBmb3VuZEN1cnNvciA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGVkZ2VzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIGVkZ2UgPSBlZGdlc1tpaV07XG5cbiAgICAgIGlmIChlZGdlICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGVkZ2VDdXJzb3IgPSBlZGdlLmdldFZhbHVlKENVUlNPUik7XG5cbiAgICAgICAgaWYgKGN1cnNvciA9PT0gZWRnZUN1cnNvcikge1xuICAgICAgICAgIG5leHRFZGdlcy5wdXNoKG5ld0VkZ2UpO1xuICAgICAgICAgIGZvdW5kQ3Vyc29yID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXh0RWRnZXMucHVzaChlZGdlKTtcbiAgICB9XG5cbiAgICBpZiAoIWZvdW5kQ3Vyc29yKSB7XG4gICAgICBuZXh0RWRnZXMudW5zaGlmdChuZXdFZGdlKTtcbiAgICB9XG4gIH1cblxuICByZWNvcmQuc2V0TGlua2VkUmVjb3JkcyhuZXh0RWRnZXMsIEVER0VTKTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIFJlbW92ZSBhbnkgZWRnZXMgd2hvc2UgYG5vZGUuaWRgIG1hdGNoZXMgdGhlIGdpdmVuIGlkLlxuICovXG5cblxuZnVuY3Rpb24gZGVsZXRlTm9kZShyZWNvcmQsIG5vZGVJRCkge1xuICB2YXIgX0Nvbm5lY3Rpb25JbnRlcmZhY2UkNSA9IENvbm5lY3Rpb25JbnRlcmZhY2UuZ2V0KCksXG4gICAgICBFREdFUyA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJDUuRURHRVMsXG4gICAgICBOT0RFID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkNS5OT0RFO1xuXG4gIHZhciBlZGdlcyA9IHJlY29yZC5nZXRMaW5rZWRSZWNvcmRzKEVER0VTKTtcblxuICBpZiAoIWVkZ2VzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG5leHRFZGdlcztcblxuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgZWRnZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgdmFyIGVkZ2UgPSBlZGdlc1tpaV07XG4gICAgdmFyIG5vZGUgPSBlZGdlICYmIGVkZ2UuZ2V0TGlua2VkUmVjb3JkKE5PREUpO1xuXG4gICAgaWYgKG5vZGUgIT0gbnVsbCAmJiBub2RlLmdldERhdGFJRCgpID09PSBub2RlSUQpIHtcbiAgICAgIGlmIChuZXh0RWRnZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXh0RWRnZXMgPSBlZGdlcy5zbGljZSgwLCBpaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0RWRnZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmV4dEVkZ2VzLnB1c2goZWRnZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG5leHRFZGdlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmVjb3JkLnNldExpbmtlZFJlY29yZHMobmV4dEVkZ2VzLCBFREdFUyk7XG4gIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKlxuICogQ3JlYXRlcyBhIGNvcHkgb2YgYW4gZWRnZSB3aXRoIGEgdW5pcXVlIElEIGJhc2VkIG9uIHBlci1jb25uZWN0aW9uLWluc3RhbmNlXG4gKiBpbmNyZW1lbnRpbmcgZWRnZSBpbmRleC4gVGhpcyBpcyBuZWNlc3NhcnkgdG8gYXZvaWQgY29sbGlzaW9ucyBiZXR3ZWVuIGVkZ2VzLFxuICogd2hpY2ggY2FuIG9jY3VyIGJlY2F1c2UgKGVkZ2UpIGNsaWVudCBJRHMgYXJlIGFzc2lnbmVkIGRldGVybWluaXN0aWNhbGx5XG4gKiBiYXNlZCBvbiB0aGUgcGF0aCBmcm9tIHRoZSBuZWFyZXN0IG5vZGUgd2l0aCBhbiBpZC5cbiAqXG4gKiBFeGFtcGxlOiBpZiB0aGUgZmlyc3QgTiBlZGdlcyBvZiB0aGUgc2FtZSBjb25uZWN0aW9uIGFyZSByZWZldGNoZWQsIHRoZSBlZGdlc1xuICogZnJvbSB0aGUgc2Vjb25kIGZldGNoIHdpbGwgYmUgYXNzaWduZWQgdGhlIHNhbWUgSURzIGFzIHRoZSBmaXJzdCBmZXRjaCwgZXZlblxuICogdGhvdWdoIHRoZSBub2RlcyB0aGV5IHBvaW50IHRvIG1heSBiZSBkaWZmZXJlbnQgKG9yIHRoZSBzYW1lIGFuZCBpbiBkaWZmZXJlbnRcbiAqIG9yZGVyKS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJ1aWxkQ29ubmVjdGlvbkVkZ2Uoc3RvcmUsIGNvbm5lY3Rpb24sIGVkZ2UpIHtcbiAgaWYgKGVkZ2UgPT0gbnVsbCkge1xuICAgIHJldHVybiBlZGdlO1xuICB9XG5cbiAgdmFyIF9Db25uZWN0aW9uSW50ZXJmYWNlJDYgPSBDb25uZWN0aW9uSW50ZXJmYWNlLmdldCgpLFxuICAgICAgRURHRVMgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQ2LkVER0VTO1xuXG4gIHZhciBlZGdlSW5kZXggPSBjb25uZWN0aW9uLmdldFZhbHVlKE5FWFRfRURHRV9JTkRFWCk7XG4gICEodHlwZW9mIGVkZ2VJbmRleCA9PT0gJ251bWJlcicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ29ubmVjdGlvbkhhbmRsZXI6IEV4cGVjdGVkICVzIHRvIGJlIGEgbnVtYmVyLCBnb3QgYCVzYC4nLCBORVhUX0VER0VfSU5ERVgsIGVkZ2VJbmRleCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZWRnZUlEID0gZ2VuZXJhdGVDbGllbnRJRChjb25uZWN0aW9uLmdldERhdGFJRCgpLCBFREdFUywgZWRnZUluZGV4KTtcbiAgdmFyIGNvbm5lY3Rpb25FZGdlID0gc3RvcmUuY3JlYXRlKGVkZ2VJRCwgZWRnZS5nZXRUeXBlKCkpO1xuICBjb25uZWN0aW9uRWRnZS5jb3B5RmllbGRzRnJvbShlZGdlKTtcblxuICBpZiAoY29ubmVjdGlvbkVkZ2UuZ2V0VmFsdWUoJ2N1cnNvcicpID09IG51bGwpIHtcbiAgICAvLyBBbHdheXMgdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQgdmFsdWUgZm9yIGN1cnNvclxuICAgIC8vIHRvIGF2b2lkIGNvbnNpZGVyaW5nIGl0IGFzIG1pc3NpbmcgZGF0YVxuICAgIGNvbm5lY3Rpb25FZGdlLnNldFZhbHVlKG51bGwsICdjdXJzb3InKTtcbiAgfVxuXG4gIGNvbm5lY3Rpb24uc2V0VmFsdWUoZWRnZUluZGV4ICsgMSwgTkVYVF9FREdFX0lOREVYKTtcbiAgcmV0dXJuIGNvbm5lY3Rpb25FZGdlO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBBZGRzIHRoZSBzb3VyY2UgZWRnZXMgdG8gdGhlIHRhcmdldCBlZGdlcywgc2tpcHBpbmcgZWRnZXMgd2l0aFxuICogZHVwbGljYXRlIG5vZGUgaWRzLlxuICovXG5cblxuZnVuY3Rpb24gbWVyZ2VFZGdlcyhzb3VyY2VFZGdlcywgdGFyZ2V0RWRnZXMsIG5vZGVJRHMpIHtcbiAgdmFyIF9Db25uZWN0aW9uSW50ZXJmYWNlJDcgPSBDb25uZWN0aW9uSW50ZXJmYWNlLmdldCgpLFxuICAgICAgTk9ERSA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJDcuTk9ERTtcblxuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgc291cmNlRWRnZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgdmFyIGVkZ2UgPSBzb3VyY2VFZGdlc1tpaV07XG5cbiAgICBpZiAoIWVkZ2UpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBub2RlID0gZWRnZS5nZXRMaW5rZWRSZWNvcmQoTk9ERSk7XG4gICAgdmFyIG5vZGVJRCA9IG5vZGUgJiYgbm9kZS5nZXREYXRhSUQoKTtcblxuICAgIGlmIChub2RlSUQpIHtcbiAgICAgIGlmIChub2RlSURzLmhhcyhub2RlSUQpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBub2RlSURzLmFkZChub2RlSUQpO1xuICAgIH1cblxuICAgIHRhcmdldEVkZ2VzLnB1c2goZWRnZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGJ1aWxkQ29ubmVjdGlvbkVkZ2U6IGJ1aWxkQ29ubmVjdGlvbkVkZ2UsXG4gIGNyZWF0ZUVkZ2U6IGNyZWF0ZUVkZ2UsXG4gIGRlbGV0ZU5vZGU6IGRlbGV0ZU5vZGUsXG4gIGdldENvbm5lY3Rpb246IGdldENvbm5lY3Rpb24sXG4gIGdldENvbm5lY3Rpb25JRDogZ2V0Q29ubmVjdGlvbklELFxuICBpbnNlcnRFZGdlQWZ0ZXI6IGluc2VydEVkZ2VBZnRlcixcbiAgaW5zZXJ0RWRnZUJlZm9yZTogaW5zZXJ0RWRnZUJlZm9yZSxcbiAgdXBkYXRlOiB1cGRhdGVcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDT05ORUNUSU9OX0NBTExTID0ge1xuICBhZnRlcjogdHJ1ZSxcbiAgYmVmb3JlOiB0cnVlLFxuICBmaW5kOiB0cnVlLFxuICBmaXJzdDogdHJ1ZSxcbiAgbGFzdDogdHJ1ZSxcbiAgc3Vycm91bmRzOiB0cnVlXG59O1xudmFyIGNvbmZpZyA9IHtcbiAgQ0xJRU5UX01VVEFUSU9OX0lEOiAnY2xpZW50TXV0YXRpb25JZCcsXG4gIENVUlNPUjogJ2N1cnNvcicsXG4gIEVER0VTOiAnZWRnZXMnLFxuICBFTkRfQ1VSU09SOiAnZW5kQ3Vyc29yJyxcbiAgSEFTX05FWFRfUEFHRTogJ2hhc05leHRQYWdlJyxcbiAgSEFTX1BSRVZfUEFHRTogJ2hhc1ByZXZpb3VzUGFnZScsXG4gIE5PREU6ICdub2RlJyxcbiAgUEFHRV9JTkZPX1RZUEU6ICdQYWdlSW5mbycsXG4gIFBBR0VfSU5GTzogJ3BhZ2VJbmZvJyxcbiAgU1RBUlRfQ1VSU09SOiAnc3RhcnRDdXJzb3InXG59O1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBEZWZpbmVzIGxvZ2ljIHJlbGV2YW50IHRvIHRoZSBpbmZvcm1hbCBcIkNvbm5lY3Rpb25cIiBHcmFwaFFMIGludGVyZmFjZS5cbiAqL1xuXG52YXIgQ29ubmVjdGlvbkludGVyZmFjZSA9IHtcbiAgaW5qZWN0OiBmdW5jdGlvbiBpbmplY3QobmV3Q29uZmlnKSB7XG4gICAgY29uZmlnID0gbmV3Q29uZmlnO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBhIGNhbGwgZXhpc3RzIHN0cmljdGx5IHRvIGVuY29kZSB3aGljaCBwYXJ0cyBvZiBhIGNvbm5lY3Rpb25cbiAgICogdG8gZmV0Y2guIEZpZWxkcyB0aGF0IG9ubHkgZGlmZmVyIGJ5IGNvbm5lY3Rpb24gY2FsbCB2YWx1ZXMgc2hvdWxkIGhhdmUgdGhlXG4gICAqIHNhbWUgaWRlbnRpdHkuXG4gICAqL1xuICBpc0Nvbm5lY3Rpb25DYWxsOiBmdW5jdGlvbiBpc0Nvbm5lY3Rpb25DYWxsKGNhbGwpIHtcbiAgICByZXR1cm4gQ09OTkVDVElPTl9DQUxMUy5oYXNPd25Qcm9wZXJ0eShjYWxsLm5hbWUpO1xuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBDb25uZWN0aW9uSW50ZXJmYWNlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlclwiKSk7XG5cbnZhciBDb25uZWN0aW9uSGFuZGxlciA9IHJlcXVpcmUoJy4vQ29ubmVjdGlvbkhhbmRsZXInKTtcblxudmFyIENvbm5lY3Rpb25JbnRlcmZhY2UgPSByZXF1aXJlKCcuL0Nvbm5lY3Rpb25JbnRlcmZhY2UnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG52YXIgRGVsZXRlUmVjb3JkSGFuZGxlciA9IHtcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoc3RvcmUsIHBheWxvYWQpIHtcbiAgICB2YXIgcmVjb3JkID0gc3RvcmUuZ2V0KHBheWxvYWQuZGF0YUlEKTtcblxuICAgIGlmIChyZWNvcmQgIT0gbnVsbCkge1xuICAgICAgdmFyIGlkT3JJZHMgPSByZWNvcmQuZ2V0VmFsdWUocGF5bG9hZC5maWVsZEtleSk7XG5cbiAgICAgIGlmICh0eXBlb2YgaWRPcklkcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3RvcmVbXCJkZWxldGVcIl0oaWRPcklkcyk7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaWRPcklkcykpIHtcbiAgICAgICAgaWRPcklkcy5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBzdG9yZVtcImRlbGV0ZVwiXShpZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG52YXIgRGVsZXRlRWRnZUhhbmRsZXIgPSB7XG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKHN0b3JlLCBwYXlsb2FkKSB7XG4gICAgdmFyIHJlY29yZCA9IHN0b3JlLmdldChwYXlsb2FkLmRhdGFJRCk7XG5cbiAgICBpZiAocmVjb3JkID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG5cbiAgICB2YXIgY29ubmVjdGlvbnMgPSBwYXlsb2FkLmhhbmRsZUFyZ3MuY29ubmVjdGlvbnM7XG4gICAgIShjb25uZWN0aW9ucyAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ011dGF0aW9uSGFuZGxlcnM6IEV4cGVjdGVkIGNvbm5lY3Rpb24gSURzIHRvIGJlIHNwZWNpZmllZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGlkT3JJZHMgPSByZWNvcmQuZ2V0VmFsdWUocGF5bG9hZC5maWVsZEtleSk7XG4gICAgdmFyIGlkTGlzdCA9IEFycmF5LmlzQXJyYXkoaWRPcklkcykgPyBpZE9ySWRzIDogW2lkT3JJZHNdO1xuICAgIGlkTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIF9pdGVyYXRvciA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShjb25uZWN0aW9ucyksXG4gICAgICAgICAgICBfc3RlcDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbklEID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHN0b3JlLmdldChjb25uZWN0aW9uSUQpO1xuXG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW1JlbGF5XVtNdXRhdGlvbl0gVGhlIGNvbm5lY3Rpb24gd2l0aCBpZCAnXCIuY29uY2F0KGNvbm5lY3Rpb25JRCwgXCInIGRvZXNuJ3QgZXhpc3QuXCIpKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIENvbm5lY3Rpb25IYW5kbGVyLmRlbGV0ZU5vZGUoY29ubmVjdGlvbiwgaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IuZigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG52YXIgQXBwZW5kRWRnZUhhbmRsZXIgPSB7XG4gIHVwZGF0ZTogZWRnZVVwZGF0ZXIoQ29ubmVjdGlvbkhhbmRsZXIuaW5zZXJ0RWRnZUFmdGVyKVxufTtcbnZhciBQcmVwZW5kRWRnZUhhbmRsZXIgPSB7XG4gIHVwZGF0ZTogZWRnZVVwZGF0ZXIoQ29ubmVjdGlvbkhhbmRsZXIuaW5zZXJ0RWRnZUJlZm9yZSlcbn07XG52YXIgQXBwZW5kTm9kZUhhbmRsZXIgPSB7XG4gIHVwZGF0ZTogbm9kZVVwZGF0ZXIoQ29ubmVjdGlvbkhhbmRsZXIuaW5zZXJ0RWRnZUFmdGVyKVxufTtcbnZhciBQcmVwZW5kTm9kZUhhbmRsZXIgPSB7XG4gIHVwZGF0ZTogbm9kZVVwZGF0ZXIoQ29ubmVjdGlvbkhhbmRsZXIuaW5zZXJ0RWRnZUJlZm9yZSlcbn07XG5cbmZ1bmN0aW9uIGVkZ2VVcGRhdGVyKGluc2VydEZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RvcmUsIHBheWxvYWQpIHtcbiAgICB2YXIgX3NlcnZlckVkZ2VzO1xuXG4gICAgdmFyIHJlY29yZCA9IHN0b3JlLmdldChwYXlsb2FkLmRhdGFJRCk7XG5cbiAgICBpZiAocmVjb3JkID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG5cbiAgICB2YXIgY29ubmVjdGlvbnMgPSBwYXlsb2FkLmhhbmRsZUFyZ3MuY29ubmVjdGlvbnM7XG4gICAgIShjb25uZWN0aW9ucyAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ011dGF0aW9uSGFuZGxlcnM6IEV4cGVjdGVkIGNvbm5lY3Rpb24gSURzIHRvIGJlIHNwZWNpZmllZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIHNpbmdsZVNlcnZlckVkZ2UsIHNlcnZlckVkZ2VzO1xuXG4gICAgdHJ5IHtcbiAgICAgIHNpbmdsZVNlcnZlckVkZ2UgPSByZWNvcmQuZ2V0TGlua2VkUmVjb3JkKHBheWxvYWQuZmllbGRLZXksIHBheWxvYWQuYXJncyk7XG4gICAgfSBjYXRjaCAoX3VudXNlZCkge31cblxuICAgIGlmICghc2luZ2xlU2VydmVyRWRnZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2VydmVyRWRnZXMgPSByZWNvcmQuZ2V0TGlua2VkUmVjb3JkcyhwYXlsb2FkLmZpZWxkS2V5LCBwYXlsb2FkLmFyZ3MpO1xuICAgICAgfSBjYXRjaCAoX3VudXNlZDIpIHt9XG4gICAgfVxuXG4gICAgaWYgKHNpbmdsZVNlcnZlckVkZ2UgPT0gbnVsbCAmJiBzZXJ2ZXJFZGdlcyA9PSBudWxsKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnTXV0YXRpb25IYW5kbGVyczogRXhwZWN0ZWQgdGhlIHNlcnZlciBlZGdlIHRvIGJlIG5vbi1udWxsLicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBfQ29ubmVjdGlvbkludGVyZmFjZSQgPSBDb25uZWN0aW9uSW50ZXJmYWNlLmdldCgpLFxuICAgICAgICBOT0RFID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkLk5PREUsXG4gICAgICAgIEVER0VTID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkLkVER0VTO1xuXG4gICAgdmFyIHNlcnZlckVkZ2VMaXN0ID0gKF9zZXJ2ZXJFZGdlcyA9IHNlcnZlckVkZ2VzKSAhPT0gbnVsbCAmJiBfc2VydmVyRWRnZXMgIT09IHZvaWQgMCA/IF9zZXJ2ZXJFZGdlcyA6IFtzaW5nbGVTZXJ2ZXJFZGdlXTtcblxuICAgIHZhciBfaXRlcmF0b3IyID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKHNlcnZlckVkZ2VMaXN0KSxcbiAgICAgICAgX3N0ZXAyO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkge1xuICAgICAgICB2YXIgc2VydmVyRWRnZSA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICBpZiAoc2VydmVyRWRnZSA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZXJ2ZXJOb2RlID0gc2VydmVyRWRnZS5nZXRMaW5rZWRSZWNvcmQoJ25vZGUnKTtcblxuICAgICAgICBpZiAoIXNlcnZlck5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlcnZlck5vZGVJZCA9IHNlcnZlck5vZGUuZ2V0RGF0YUlEKCk7XG5cbiAgICAgICAgdmFyIF9pdGVyYXRvcjMgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkoY29ubmVjdGlvbnMpLFxuICAgICAgICAgICAgX3N0ZXAzO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3IzLnMoKTsgIShfc3RlcDMgPSBfaXRlcmF0b3IzLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciBjb25uZWN0aW9uSUQgPSBfc3RlcDMudmFsdWU7XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHN0b3JlLmdldChjb25uZWN0aW9uSUQpO1xuXG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW1JlbGF5XVtNdXRhdGlvbl0gVGhlIGNvbm5lY3Rpb24gd2l0aCBpZCAnXCIuY29uY2F0KGNvbm5lY3Rpb25JRCwgXCInIGRvZXNuJ3QgZXhpc3QuXCIpKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBub2RlQWxyZWFkeUV4aXN0c0luQ29ubmVjdGlvbiA9IChfY29ubmVjdGlvbiRnZXRMaW5rZWQgPSBjb25uZWN0aW9uLmdldExpbmtlZFJlY29yZHMoRURHRVMpKSA9PT0gbnVsbCB8fCBfY29ubmVjdGlvbiRnZXRMaW5rZWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jb25uZWN0aW9uJGdldExpbmtlZC5zb21lKGZ1bmN0aW9uIChlZGdlKSB7XG4gICAgICAgICAgICAgIHZhciBfZWRnZSRnZXRMaW5rZWRSZWNvcmQ7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIChlZGdlID09PSBudWxsIHx8IGVkZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZWRnZSRnZXRMaW5rZWRSZWNvcmQgPSBlZGdlLmdldExpbmtlZFJlY29yZChOT0RFKSkgPT09IG51bGwgfHwgX2VkZ2UkZ2V0TGlua2VkUmVjb3JkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZWRnZSRnZXRMaW5rZWRSZWNvcmQuZ2V0RGF0YUlEKCkpID09PSBzZXJ2ZXJOb2RlSWQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKG5vZGVBbHJlYWR5RXhpc3RzSW5Db25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY2xpZW50RWRnZSA9IENvbm5lY3Rpb25IYW5kbGVyLmJ1aWxkQ29ubmVjdGlvbkVkZ2Uoc3RvcmUsIGNvbm5lY3Rpb24sIHNlcnZlckVkZ2UpO1xuICAgICAgICAgICAgIShjbGllbnRFZGdlICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnTXV0YXRpb25IYW5kbGVyczogRmFpbGVkIHRvIGJ1aWxkIHRoZSBlZGdlLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIGluc2VydEZuKGNvbm5lY3Rpb24sIGNsaWVudEVkZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMy5mKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBfY29ubmVjdGlvbiRnZXRMaW5rZWQ7XG5cbiAgICAgICAgdmFyIF9yZXQgPSBfbG9vcCgpO1xuXG4gICAgICAgIGlmIChfcmV0ID09PSBcImNvbnRpbnVlXCIpIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yMi5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvcjIuZigpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9kZVVwZGF0ZXIoaW5zZXJ0Rm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZSwgcGF5bG9hZCkge1xuICAgIHZhciBfc2VydmVyTm9kZXM7XG5cbiAgICB2YXIgcmVjb3JkID0gc3RvcmUuZ2V0KHBheWxvYWQuZGF0YUlEKTtcblxuICAgIGlmIChyZWNvcmQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cblxuICAgIHZhciBfcGF5bG9hZCRoYW5kbGVBcmdzID0gcGF5bG9hZC5oYW5kbGVBcmdzLFxuICAgICAgICBjb25uZWN0aW9ucyA9IF9wYXlsb2FkJGhhbmRsZUFyZ3MuY29ubmVjdGlvbnMsXG4gICAgICAgIGVkZ2VUeXBlTmFtZSA9IF9wYXlsb2FkJGhhbmRsZUFyZ3MuZWRnZVR5cGVOYW1lO1xuICAgICEoY29ubmVjdGlvbnMgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdNdXRhdGlvbkhhbmRsZXJzOiBFeHBlY3RlZCBjb25uZWN0aW9uIElEcyB0byBiZSBzcGVjaWZpZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEoZWRnZVR5cGVOYW1lICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnTXV0YXRpb25IYW5kbGVyczogRXhwZWN0ZWQgZWRnZSB0eXBlbmFtZSB0byBiZSBzcGVjaWZpZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBzaW5nbGVTZXJ2ZXJOb2RlO1xuICAgIHZhciBzZXJ2ZXJOb2RlcztcblxuICAgIHRyeSB7XG4gICAgICBzaW5nbGVTZXJ2ZXJOb2RlID0gcmVjb3JkLmdldExpbmtlZFJlY29yZChwYXlsb2FkLmZpZWxkS2V5LCBwYXlsb2FkLmFyZ3MpO1xuICAgIH0gY2F0Y2ggKF91bnVzZWQzKSB7fVxuXG4gICAgaWYgKCFzaW5nbGVTZXJ2ZXJOb2RlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXJ2ZXJOb2RlcyA9IHJlY29yZC5nZXRMaW5rZWRSZWNvcmRzKHBheWxvYWQuZmllbGRLZXksIHBheWxvYWQuYXJncyk7XG4gICAgICB9IGNhdGNoIChfdW51c2VkNCkge31cbiAgICB9XG5cbiAgICBpZiAoc2luZ2xlU2VydmVyTm9kZSA9PSBudWxsICYmIHNlcnZlck5vZGVzID09IG51bGwpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdNdXRhdGlvbkhhbmRsZXJzOiBFeHBlY3RlZCB0YXJnZXQgbm9kZSB0byBleGlzdC4nKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgX0Nvbm5lY3Rpb25JbnRlcmZhY2UkMiA9IENvbm5lY3Rpb25JbnRlcmZhY2UuZ2V0KCksXG4gICAgICAgIE5PREUgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQyLk5PREUsXG4gICAgICAgIEVER0VTID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkMi5FREdFUztcblxuICAgIHZhciBzZXJ2ZXJOb2RlTGlzdCA9IChfc2VydmVyTm9kZXMgPSBzZXJ2ZXJOb2RlcykgIT09IG51bGwgJiYgX3NlcnZlck5vZGVzICE9PSB2b2lkIDAgPyBfc2VydmVyTm9kZXMgOiBbc2luZ2xlU2VydmVyTm9kZV07XG5cbiAgICB2YXIgX2l0ZXJhdG9yNCA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShzZXJ2ZXJOb2RlTGlzdCksXG4gICAgICAgIF9zdGVwNDtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgX2xvb3AyID0gZnVuY3Rpb24gX2xvb3AyKCkge1xuICAgICAgICB2YXIgc2VydmVyTm9kZSA9IF9zdGVwNC52YWx1ZTtcblxuICAgICAgICBpZiAoc2VydmVyTm9kZSA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZXJ2ZXJOb2RlSWQgPSBzZXJ2ZXJOb2RlLmdldERhdGFJRCgpO1xuXG4gICAgICAgIHZhciBfaXRlcmF0b3I1ID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKGNvbm5lY3Rpb25zKSxcbiAgICAgICAgICAgIF9zdGVwNTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNS5zKCk7ICEoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbklEID0gX3N0ZXA1LnZhbHVlO1xuICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSBzdG9yZS5nZXQoY29ubmVjdGlvbklEKTtcblxuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltSZWxheV1bTXV0YXRpb25dIFRoZSBjb25uZWN0aW9uIHdpdGggaWQgJ1wiLmNvbmNhdChjb25uZWN0aW9uSUQsIFwiJyBkb2Vzbid0IGV4aXN0LlwiKSkgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbm9kZUFscmVhZHlFeGlzdHNJbkNvbm5lY3Rpb24gPSAoX2Nvbm5lY3Rpb24kZ2V0TGlua2VkMiA9IGNvbm5lY3Rpb24uZ2V0TGlua2VkUmVjb3JkcyhFREdFUykpID09PSBudWxsIHx8IF9jb25uZWN0aW9uJGdldExpbmtlZDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jb25uZWN0aW9uJGdldExpbmtlZDIuc29tZShmdW5jdGlvbiAoZWRnZSkge1xuICAgICAgICAgICAgICB2YXIgX2VkZ2UkZ2V0TGlua2VkUmVjb3JkMjtcblxuICAgICAgICAgICAgICByZXR1cm4gKGVkZ2UgPT09IG51bGwgfHwgZWRnZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9lZGdlJGdldExpbmtlZFJlY29yZDIgPSBlZGdlLmdldExpbmtlZFJlY29yZChOT0RFKSkgPT09IG51bGwgfHwgX2VkZ2UkZ2V0TGlua2VkUmVjb3JkMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2VkZ2UkZ2V0TGlua2VkUmVjb3JkMi5nZXREYXRhSUQoKSkgPT09IHNlcnZlck5vZGVJZDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAobm9kZUFscmVhZHlFeGlzdHNJbkNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjbGllbnRFZGdlID0gQ29ubmVjdGlvbkhhbmRsZXIuY3JlYXRlRWRnZShzdG9yZSwgY29ubmVjdGlvbiwgc2VydmVyTm9kZSwgZWRnZVR5cGVOYW1lKTtcbiAgICAgICAgICAgICEoY2xpZW50RWRnZSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ011dGF0aW9uSGFuZGxlcnM6IEZhaWxlZCB0byBidWlsZCB0aGUgZWRnZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICBpbnNlcnRGbihjb25uZWN0aW9uLCBjbGllbnRFZGdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjUuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjUuZigpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IgKF9pdGVyYXRvcjQucygpOyAhKF9zdGVwNCA9IF9pdGVyYXRvcjQubigpKS5kb25lOykge1xuICAgICAgICB2YXIgX2Nvbm5lY3Rpb24kZ2V0TGlua2VkMjtcblxuICAgICAgICB2YXIgX3JldDIgPSBfbG9vcDIoKTtcblxuICAgICAgICBpZiAoX3JldDIgPT09IFwiY29udGludWVcIikgY29udGludWU7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3I0LmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yNC5mKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQXBwZW5kRWRnZUhhbmRsZXI6IEFwcGVuZEVkZ2VIYW5kbGVyLFxuICBEZWxldGVSZWNvcmRIYW5kbGVyOiBEZWxldGVSZWNvcmRIYW5kbGVyLFxuICBQcmVwZW5kRWRnZUhhbmRsZXI6IFByZXBlbmRFZGdlSGFuZGxlcixcbiAgQXBwZW5kTm9kZUhhbmRsZXI6IEFwcGVuZE5vZGVIYW5kbGVyLFxuICBQcmVwZW5kTm9kZUhhbmRsZXI6IFByZXBlbmROb2RlSGFuZGxlcixcbiAgRGVsZXRlRWRnZUhhbmRsZXI6IERlbGV0ZUVkZ2VIYW5kbGVyXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ29ubmVjdGlvbkhhbmRsZXIgPSByZXF1aXJlKCcuL2hhbmRsZXJzL2Nvbm5lY3Rpb24vQ29ubmVjdGlvbkhhbmRsZXInKTtcblxudmFyIENvbm5lY3Rpb25JbnRlcmZhY2UgPSByZXF1aXJlKCcuL2hhbmRsZXJzL2Nvbm5lY3Rpb24vQ29ubmVjdGlvbkludGVyZmFjZScpO1xuXG52YXIgR3JhcGhRTFRhZyA9IHJlcXVpcmUoJy4vcXVlcnkvR3JhcGhRTFRhZycpO1xuXG52YXIgTXV0YXRpb25IYW5kbGVycyA9IHJlcXVpcmUoJy4vaGFuZGxlcnMvY29ubmVjdGlvbi9NdXRhdGlvbkhhbmRsZXJzJyk7XG5cbnZhciBQcmVsb2FkYWJsZVF1ZXJ5UmVnaXN0cnkgPSByZXF1aXJlKCcuL3F1ZXJ5L1ByZWxvYWRhYmxlUXVlcnlSZWdpc3RyeScpO1xuXG52YXIgUmVsYXlDb25jcmV0ZU5vZGUgPSByZXF1aXJlKCcuL3V0aWwvUmVsYXlDb25jcmV0ZU5vZGUnKTtcblxudmFyIFJlbGF5Q29uY3JldGVWYXJpYWJsZXMgPSByZXF1aXJlKCcuL3N0b3JlL1JlbGF5Q29uY3JldGVWYXJpYWJsZXMnKTtcblxudmFyIFJlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZyA9IHJlcXVpcmUoJy4vbXV0YXRpb25zL1JlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZycpO1xuXG52YXIgUmVsYXlEZWZhdWx0SGFuZGxlS2V5ID0gcmVxdWlyZSgnLi91dGlsL1JlbGF5RGVmYXVsdEhhbmRsZUtleScpO1xuXG52YXIgUmVsYXlEZWZhdWx0SGFuZGxlclByb3ZpZGVyID0gcmVxdWlyZSgnLi9oYW5kbGVycy9SZWxheURlZmF1bHRIYW5kbGVyUHJvdmlkZXInKTtcblxudmFyIFJlbGF5RXJyb3IgPSByZXF1aXJlKCcuL3V0aWwvUmVsYXlFcnJvcicpO1xuXG52YXIgUmVsYXlGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuL3V0aWwvUmVsYXlGZWF0dXJlRmxhZ3MnKTtcblxudmFyIFJlbGF5TW9kZXJuRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL3N0b3JlL1JlbGF5TW9kZXJuRW52aXJvbm1lbnQnKTtcblxudmFyIFJlbGF5TW9kZXJuT3BlcmF0aW9uRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vc3RvcmUvUmVsYXlNb2Rlcm5PcGVyYXRpb25EZXNjcmlwdG9yJyk7XG5cbnZhciBSZWxheU1vZGVyblJlY29yZCA9IHJlcXVpcmUoJy4vc3RvcmUvUmVsYXlNb2Rlcm5SZWNvcmQnKTtcblxudmFyIFJlbGF5TW9kZXJuU2VsZWN0b3IgPSByZXF1aXJlKCcuL3N0b3JlL1JlbGF5TW9kZXJuU2VsZWN0b3InKTtcblxudmFyIFJlbGF5TW9kZXJuU3RvcmUgPSByZXF1aXJlKCcuL3N0b3JlL1JlbGF5TW9kZXJuU3RvcmUnKTtcblxudmFyIFJlbGF5TmV0d29yayA9IHJlcXVpcmUoJy4vbmV0d29yay9SZWxheU5ldHdvcmsnKTtcblxudmFyIFJlbGF5T2JzZXJ2YWJsZSA9IHJlcXVpcmUoJy4vbmV0d29yay9SZWxheU9ic2VydmFibGUnKTtcblxudmFyIFJlbGF5T3BlcmF0aW9uVHJhY2tlciA9IHJlcXVpcmUoJy4vc3RvcmUvUmVsYXlPcGVyYXRpb25UcmFja2VyJyk7XG5cbnZhciBSZWxheVByb2ZpbGVyID0gcmVxdWlyZSgnLi91dGlsL1JlbGF5UHJvZmlsZXInKTtcblxudmFyIFJlbGF5UXVlcnlSZXNwb25zZUNhY2hlID0gcmVxdWlyZSgnLi9uZXR3b3JrL1JlbGF5UXVlcnlSZXNwb25zZUNhY2hlJyk7XG5cbnZhciBSZWxheVJlY29yZFNvdXJjZSA9IHJlcXVpcmUoJy4vc3RvcmUvUmVsYXlSZWNvcmRTb3VyY2UnKTtcblxudmFyIFJlbGF5UmVwbGF5U3ViamVjdCA9IHJlcXVpcmUoJy4vdXRpbC9SZWxheVJlcGxheVN1YmplY3QnKTtcblxudmFyIFJlbGF5U3RvcmVVdGlscyA9IHJlcXVpcmUoJy4vc3RvcmUvUmVsYXlTdG9yZVV0aWxzJyk7XG5cbnZhciBWaWV3ZXJQYXR0ZXJuID0gcmVxdWlyZSgnLi9zdG9yZS9WaWV3ZXJQYXR0ZXJuJyk7XG5cbnZhciBhcHBseU9wdGltaXN0aWNNdXRhdGlvbiA9IHJlcXVpcmUoJy4vbXV0YXRpb25zL2FwcGx5T3B0aW1pc3RpY011dGF0aW9uJyk7XG5cbnZhciBjb21taXRMb2NhbFVwZGF0ZSA9IHJlcXVpcmUoJy4vbXV0YXRpb25zL2NvbW1pdExvY2FsVXBkYXRlJyk7XG5cbnZhciBjb21taXRNdXRhdGlvbiA9IHJlcXVpcmUoJy4vbXV0YXRpb25zL2NvbW1pdE11dGF0aW9uJyk7XG5cbnZhciBjcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlciA9IHJlcXVpcmUoJy4vc3RvcmUvY3JlYXRlRnJhZ21lbnRTcGVjUmVzb2x2ZXInKTtcblxudmFyIGNyZWF0ZVBheWxvYWRGb3IzREZpZWxkID0gcmVxdWlyZSgnLi91dGlsL2NyZWF0ZVBheWxvYWRGb3IzREZpZWxkJyk7XG5cbnZhciBjcmVhdGVSZWxheUNvbnRleHQgPSByZXF1aXJlKCcuL3N0b3JlL2NyZWF0ZVJlbGF5Q29udGV4dCcpO1xuXG52YXIgZGVlcEZyZWV6ZSA9IHJlcXVpcmUoJy4vdXRpbC9kZWVwRnJlZXplJyk7XG5cbnZhciBmZXRjaFF1ZXJ5ID0gcmVxdWlyZSgnLi9xdWVyeS9mZXRjaFF1ZXJ5Jyk7XG5cbnZhciBmZXRjaFF1ZXJ5SW50ZXJuYWwgPSByZXF1aXJlKCcuL3F1ZXJ5L2ZldGNoUXVlcnlJbnRlcm5hbCcpO1xuXG52YXIgZmV0Y2hRdWVyeV9ERVBSRUNBVEVEID0gcmVxdWlyZSgnLi9xdWVyeS9mZXRjaFF1ZXJ5X0RFUFJFQ0FURUQnKTtcblxudmFyIGdldEZyYWdtZW50SWRlbnRpZmllciA9IHJlcXVpcmUoJy4vdXRpbC9nZXRGcmFnbWVudElkZW50aWZpZXInKTtcblxudmFyIGdldFJlbGF5SGFuZGxlS2V5ID0gcmVxdWlyZSgnLi91dGlsL2dldFJlbGF5SGFuZGxlS2V5Jyk7XG5cbnZhciBnZXRSZXF1ZXN0SWRlbnRpZmllciA9IHJlcXVpcmUoJy4vdXRpbC9nZXRSZXF1ZXN0SWRlbnRpZmllcicpO1xuXG52YXIgaXNQcm9taXNlID0gcmVxdWlyZSgnLi91dGlsL2lzUHJvbWlzZScpO1xuXG52YXIgaXNSZWxheU1vZGVybkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9zdG9yZS9pc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQnKTtcblxudmFyIGlzU2NhbGFyQW5kRXF1YWwgPSByZXF1aXJlKCcuL3V0aWwvaXNTY2FsYXJBbmRFcXVhbCcpO1xuXG52YXIgcmVhZElubGluZURhdGEgPSByZXF1aXJlKCcuL3N0b3JlL3JlYWRJbmxpbmVEYXRhJyk7XG5cbnZhciByZWN5Y2xlTm9kZXNJbnRvID0gcmVxdWlyZSgnLi91dGlsL3JlY3ljbGVOb2Rlc0ludG8nKTtcblxudmFyIHJlcG9ydE1pc3NpbmdSZXF1aXJlZEZpZWxkcyA9IHJlcXVpcmUoJy4vdXRpbC9yZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHMnKTtcblxudmFyIHJlcXVlc3RTdWJzY3JpcHRpb24gPSByZXF1aXJlKCcuL3N1YnNjcmlwdGlvbi9yZXF1ZXN0U3Vic2NyaXB0aW9uJyk7XG5cbnZhciBzdGFibGVDb3B5ID0gcmVxdWlyZSgnLi91dGlsL3N0YWJsZUNvcHknKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9zdG9yZS9DbGllbnRJRCcpLFxuICAgIGdlbmVyYXRlQ2xpZW50SUQgPSBfcmVxdWlyZS5nZW5lcmF0ZUNsaWVudElELFxuICAgIGdlbmVyYXRlVW5pcXVlQ2xpZW50SUQgPSBfcmVxdWlyZS5nZW5lcmF0ZVVuaXF1ZUNsaWVudElELFxuICAgIGlzQ2xpZW50SUQgPSBfcmVxdWlyZS5pc0NsaWVudElEO1xuXG4vLyBBcyBlYXJseSBhcyBwb3NzaWJsZSwgY2hlY2sgZm9yIHRoZSBleGlzdGVuY2Ugb2YgdGhlIEphdmFTY3JpcHQgZ2xvYmFscyB3aGljaFxuLy8gUmVsYXkgUnVudGltZSByZWxpZXMgdXBvbiwgYW5kIHByb2R1Y2UgYSBjbGVhciBtZXNzYWdlIGlmIHRoZXkgZG8gbm90IGV4aXN0LlxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWFwU3RyID0gdHlwZW9mIE1hcCAhPT0gJ2Z1bmN0aW9uJyA/ICdNYXAnIDogbnVsbDtcbiAgdmFyIHNldFN0ciA9IHR5cGVvZiBTZXQgIT09ICdmdW5jdGlvbicgPyAnU2V0JyA6IG51bGw7XG4gIHZhciBwcm9taXNlU3RyID0gdHlwZW9mIFByb21pc2UgIT09ICdmdW5jdGlvbicgPyAnUHJvbWlzZScgOiBudWxsO1xuICB2YXIgb2JqU3RyID0gdHlwZW9mIE9iamVjdC5hc3NpZ24gIT09ICdmdW5jdGlvbicgPyAnT2JqZWN0LmFzc2lnbicgOiBudWxsO1xuXG4gIGlmIChtYXBTdHIgfHwgc2V0U3RyIHx8IHByb21pc2VTdHIgfHwgb2JqU3RyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwicmVsYXktcnVudGltZSByZXF1aXJlcyBcIi5jb25jYXQoW21hcFN0ciwgc2V0U3RyLCBwcm9taXNlU3RyLCBvYmpTdHJdLmZpbHRlcihCb29sZWFuKS5qb2luKCcsIGFuZCAnKSwgXCIgdG8gZXhpc3QuIFwiKSArICdVc2UgYSBwb2x5ZmlsbCB0byBwcm92aWRlIHRoZXNlIGZvciBvbGRlciBicm93c2Vycy4nKTtcbiAgfVxufVxuLyoqXG4gKiBUaGUgcHVibGljIGludGVyZmFjZSB0byBSZWxheSBSdW50aW1lLlxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIENvcmUgQVBJXG4gIEVudmlyb25tZW50OiBSZWxheU1vZGVybkVudmlyb25tZW50LFxuICBOZXR3b3JrOiBSZWxheU5ldHdvcmssXG4gIE9ic2VydmFibGU6IFJlbGF5T2JzZXJ2YWJsZSxcbiAgUXVlcnlSZXNwb25zZUNhY2hlOiBSZWxheVF1ZXJ5UmVzcG9uc2VDYWNoZSxcbiAgUmVjb3JkU291cmNlOiBSZWxheVJlY29yZFNvdXJjZSxcbiAgUmVjb3JkOiBSZWxheU1vZGVyblJlY29yZCxcbiAgUmVwbGF5U3ViamVjdDogUmVsYXlSZXBsYXlTdWJqZWN0LFxuICBTdG9yZTogUmVsYXlNb2Rlcm5TdG9yZSxcbiAgYXJlRXF1YWxTZWxlY3RvcnM6IFJlbGF5TW9kZXJuU2VsZWN0b3IuYXJlRXF1YWxTZWxlY3RvcnMsXG4gIGNyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyOiBjcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlcixcbiAgY3JlYXRlTm9ybWFsaXphdGlvblNlbGVjdG9yOiBSZWxheU1vZGVyblNlbGVjdG9yLmNyZWF0ZU5vcm1hbGl6YXRpb25TZWxlY3RvcixcbiAgY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcjogUmVsYXlNb2Rlcm5PcGVyYXRpb25EZXNjcmlwdG9yLmNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IsXG4gIGNyZWF0ZVJlYWRlclNlbGVjdG9yOiBSZWxheU1vZGVyblNlbGVjdG9yLmNyZWF0ZVJlYWRlclNlbGVjdG9yLFxuICBjcmVhdGVSZXF1ZXN0RGVzY3JpcHRvcjogUmVsYXlNb2Rlcm5PcGVyYXRpb25EZXNjcmlwdG9yLmNyZWF0ZVJlcXVlc3REZXNjcmlwdG9yLFxuICBnZXREYXRhSURzRnJvbUZyYWdtZW50OiBSZWxheU1vZGVyblNlbGVjdG9yLmdldERhdGFJRHNGcm9tRnJhZ21lbnQsXG4gIGdldERhdGFJRHNGcm9tT2JqZWN0OiBSZWxheU1vZGVyblNlbGVjdG9yLmdldERhdGFJRHNGcm9tT2JqZWN0LFxuICBnZXROb2RlOiBHcmFwaFFMVGFnLmdldE5vZGUsXG4gIGdldEZyYWdtZW50OiBHcmFwaFFMVGFnLmdldEZyYWdtZW50LFxuICBnZXRJbmxpbmVEYXRhRnJhZ21lbnQ6IEdyYXBoUUxUYWcuZ2V0SW5saW5lRGF0YUZyYWdtZW50LFxuICBnZXRNb2R1bGVDb21wb25lbnRLZXk6IFJlbGF5U3RvcmVVdGlscy5nZXRNb2R1bGVDb21wb25lbnRLZXksXG4gIGdldE1vZHVsZU9wZXJhdGlvbktleTogUmVsYXlTdG9yZVV0aWxzLmdldE1vZHVsZU9wZXJhdGlvbktleSxcbiAgZ2V0UGFnaW5hdGlvbkZyYWdtZW50OiBHcmFwaFFMVGFnLmdldFBhZ2luYXRpb25GcmFnbWVudCxcbiAgZ2V0UGx1cmFsU2VsZWN0b3I6IFJlbGF5TW9kZXJuU2VsZWN0b3IuZ2V0UGx1cmFsU2VsZWN0b3IsXG4gIGdldFJlZmV0Y2hhYmxlRnJhZ21lbnQ6IEdyYXBoUUxUYWcuZ2V0UmVmZXRjaGFibGVGcmFnbWVudCxcbiAgZ2V0UmVxdWVzdDogR3JhcGhRTFRhZy5nZXRSZXF1ZXN0LFxuICBnZXRSZXF1ZXN0SWRlbnRpZmllcjogZ2V0UmVxdWVzdElkZW50aWZpZXIsXG4gIGdldFNlbGVjdG9yOiBSZWxheU1vZGVyblNlbGVjdG9yLmdldFNlbGVjdG9yLFxuICBnZXRTZWxlY3RvcnNGcm9tT2JqZWN0OiBSZWxheU1vZGVyblNlbGVjdG9yLmdldFNlbGVjdG9yc0Zyb21PYmplY3QsXG4gIGdldFNpbmd1bGFyU2VsZWN0b3I6IFJlbGF5TW9kZXJuU2VsZWN0b3IuZ2V0U2luZ3VsYXJTZWxlY3RvcixcbiAgZ2V0U3RvcmFnZUtleTogUmVsYXlTdG9yZVV0aWxzLmdldFN0b3JhZ2VLZXksXG4gIGdldFZhcmlhYmxlc0Zyb21GcmFnbWVudDogUmVsYXlNb2Rlcm5TZWxlY3Rvci5nZXRWYXJpYWJsZXNGcm9tRnJhZ21lbnQsXG4gIGdldFZhcmlhYmxlc0Zyb21PYmplY3Q6IFJlbGF5TW9kZXJuU2VsZWN0b3IuZ2V0VmFyaWFibGVzRnJvbU9iamVjdCxcbiAgZ2V0VmFyaWFibGVzRnJvbVBsdXJhbEZyYWdtZW50OiBSZWxheU1vZGVyblNlbGVjdG9yLmdldFZhcmlhYmxlc0Zyb21QbHVyYWxGcmFnbWVudCxcbiAgZ2V0VmFyaWFibGVzRnJvbVNpbmd1bGFyRnJhZ21lbnQ6IFJlbGF5TW9kZXJuU2VsZWN0b3IuZ2V0VmFyaWFibGVzRnJvbVNpbmd1bGFyRnJhZ21lbnQsXG4gIHJlcG9ydE1pc3NpbmdSZXF1aXJlZEZpZWxkczogcmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzLFxuICBncmFwaHFsOiBHcmFwaFFMVGFnLmdyYXBocWwsXG4gIGlzRnJhZ21lbnQ6IEdyYXBoUUxUYWcuaXNGcmFnbWVudCxcbiAgaXNJbmxpbmVEYXRhRnJhZ21lbnQ6IEdyYXBoUUxUYWcuaXNJbmxpbmVEYXRhRnJhZ21lbnQsXG4gIGlzUmVxdWVzdDogR3JhcGhRTFRhZy5pc1JlcXVlc3QsXG4gIHJlYWRJbmxpbmVEYXRhOiByZWFkSW5saW5lRGF0YSxcbiAgLy8gRGVjbGFyYXRpdmUgbXV0YXRpb24gQVBJXG4gIE11dGF0aW9uVHlwZXM6IFJlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZy5NdXRhdGlvblR5cGVzLFxuICBSYW5nZU9wZXJhdGlvbnM6IFJlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZy5SYW5nZU9wZXJhdGlvbnMsXG4gIC8vIEV4dGVuc2lvbnNcbiAgRGVmYXVsdEhhbmRsZXJQcm92aWRlcjogUmVsYXlEZWZhdWx0SGFuZGxlclByb3ZpZGVyLFxuICBDb25uZWN0aW9uSGFuZGxlcjogQ29ubmVjdGlvbkhhbmRsZXIsXG4gIE11dGF0aW9uSGFuZGxlcnM6IE11dGF0aW9uSGFuZGxlcnMsXG4gIFZJRVdFUl9JRDogVmlld2VyUGF0dGVybi5WSUVXRVJfSUQsXG4gIFZJRVdFUl9UWVBFOiBWaWV3ZXJQYXR0ZXJuLlZJRVdFUl9UWVBFLFxuICAvLyBIZWxwZXJzIChjYW4gYmUgaW1wbGVtZW50ZWQgdmlhIHRoZSBhYm92ZSBBUEkpXG4gIGFwcGx5T3B0aW1pc3RpY011dGF0aW9uOiBhcHBseU9wdGltaXN0aWNNdXRhdGlvbixcbiAgY29tbWl0TG9jYWxVcGRhdGU6IGNvbW1pdExvY2FsVXBkYXRlLFxuICBjb21taXRNdXRhdGlvbjogY29tbWl0TXV0YXRpb24sXG4gIGZldGNoUXVlcnk6IGZldGNoUXVlcnksXG4gIGZldGNoUXVlcnlfREVQUkVDQVRFRDogZmV0Y2hRdWVyeV9ERVBSRUNBVEVELFxuICBpc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQ6IGlzUmVsYXlNb2Rlcm5FbnZpcm9ubWVudCxcbiAgcmVxdWVzdFN1YnNjcmlwdGlvbjogcmVxdWVzdFN1YnNjcmlwdGlvbixcbiAgLy8gQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIGxlZ2FjeSBvciBzcGVjaWFsIHVzZXNcbiAgQ29ubmVjdGlvbkludGVyZmFjZTogQ29ubmVjdGlvbkludGVyZmFjZSxcbiAgLy8gVXRpbGl0aWVzXG4gIFByZWxvYWRhYmxlUXVlcnlSZWdpc3RyeTogUHJlbG9hZGFibGVRdWVyeVJlZ2lzdHJ5LFxuICBSZWxheVByb2ZpbGVyOiBSZWxheVByb2ZpbGVyLFxuICBjcmVhdGVQYXlsb2FkRm9yM0RGaWVsZDogY3JlYXRlUGF5bG9hZEZvcjNERmllbGQsXG4gIC8vIElOVEVSTkFMLU9OTFk6IFRoZXNlIGV4cG9ydHMgbWlnaHQgYmUgcmVtb3ZlZCBhdCBhbnkgcG9pbnQuXG4gIFJlbGF5Q29uY3JldGVOb2RlOiBSZWxheUNvbmNyZXRlTm9kZSxcbiAgUmVsYXlFcnJvcjogUmVsYXlFcnJvcixcbiAgUmVsYXlGZWF0dXJlRmxhZ3M6IFJlbGF5RmVhdHVyZUZsYWdzLFxuICBERUZBVUxUX0hBTkRMRV9LRVk6IFJlbGF5RGVmYXVsdEhhbmRsZUtleS5ERUZBVUxUX0hBTkRMRV9LRVksXG4gIEZSQUdNRU5UU19LRVk6IFJlbGF5U3RvcmVVdGlscy5GUkFHTUVOVFNfS0VZLFxuICBGUkFHTUVOVF9PV05FUl9LRVk6IFJlbGF5U3RvcmVVdGlscy5GUkFHTUVOVF9PV05FUl9LRVksXG4gIElEX0tFWTogUmVsYXlTdG9yZVV0aWxzLklEX0tFWSxcbiAgUkVGX0tFWTogUmVsYXlTdG9yZVV0aWxzLlJFRl9LRVksXG4gIFJFRlNfS0VZOiBSZWxheVN0b3JlVXRpbHMuUkVGU19LRVksXG4gIFJPT1RfSUQ6IFJlbGF5U3RvcmVVdGlscy5ST09UX0lELFxuICBST09UX1RZUEU6IFJlbGF5U3RvcmVVdGlscy5ST09UX1RZUEUsXG4gIFRZUEVOQU1FX0tFWTogUmVsYXlTdG9yZVV0aWxzLlRZUEVOQU1FX0tFWSxcbiAgZGVlcEZyZWV6ZTogZGVlcEZyZWV6ZSxcbiAgZ2VuZXJhdGVDbGllbnRJRDogZ2VuZXJhdGVDbGllbnRJRCxcbiAgZ2VuZXJhdGVVbmlxdWVDbGllbnRJRDogZ2VuZXJhdGVVbmlxdWVDbGllbnRJRCxcbiAgZ2V0UmVsYXlIYW5kbGVLZXk6IGdldFJlbGF5SGFuZGxlS2V5LFxuICBpc0NsaWVudElEOiBpc0NsaWVudElELFxuICBpc1Byb21pc2U6IGlzUHJvbWlzZSxcbiAgaXNTY2FsYXJBbmRFcXVhbDogaXNTY2FsYXJBbmRFcXVhbCxcbiAgcmVjeWNsZU5vZGVzSW50bzogcmVjeWNsZU5vZGVzSW50byxcbiAgc3RhYmxlQ29weTogc3RhYmxlQ29weSxcbiAgZ2V0RnJhZ21lbnRJZGVudGlmaWVyOiBnZXRGcmFnbWVudElkZW50aWZpZXIsXG4gIF9faW50ZXJuYWw6IHtcbiAgICBPcGVyYXRpb25UcmFja2VyOiBSZWxheU9wZXJhdGlvblRyYWNrZXIsXG4gICAgY3JlYXRlUmVsYXlDb250ZXh0OiBjcmVhdGVSZWxheUNvbnRleHQsXG4gICAgZ2V0T3BlcmF0aW9uVmFyaWFibGVzOiBSZWxheUNvbmNyZXRlVmFyaWFibGVzLmdldE9wZXJhdGlvblZhcmlhYmxlcyxcbiAgICBmZXRjaFF1ZXJ5OiBmZXRjaFF1ZXJ5SW50ZXJuYWwuZmV0Y2hRdWVyeSxcbiAgICBmZXRjaFF1ZXJ5RGVkdXBlZDogZmV0Y2hRdWVyeUludGVybmFsLmZldGNoUXVlcnlEZWR1cGVkLFxuICAgIGdldFByb21pc2VGb3JBY3RpdmVSZXF1ZXN0OiBmZXRjaFF1ZXJ5SW50ZXJuYWwuZ2V0UHJvbWlzZUZvckFjdGl2ZVJlcXVlc3QsXG4gICAgZ2V0T2JzZXJ2YWJsZUZvckFjdGl2ZVJlcXVlc3Q6IGZldGNoUXVlcnlJbnRlcm5hbC5nZXRPYnNlcnZhYmxlRm9yQWN0aXZlUmVxdWVzdFxuICB9XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlclwiKSk7XG5cbnZhciBDb25uZWN0aW9uSGFuZGxlciA9IHJlcXVpcmUoJy4uL2hhbmRsZXJzL2Nvbm5lY3Rpb24vQ29ubmVjdGlvbkhhbmRsZXInKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxudmFyIE11dGF0aW9uVHlwZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgUkFOR0VfQUREOiAnUkFOR0VfQUREJyxcbiAgUkFOR0VfREVMRVRFOiAnUkFOR0VfREVMRVRFJyxcbiAgTk9ERV9ERUxFVEU6ICdOT0RFX0RFTEVURSdcbn0pO1xudmFyIFJhbmdlT3BlcmF0aW9ucyA9IE9iamVjdC5mcmVlemUoe1xuICBBUFBFTkQ6ICdhcHBlbmQnLFxuICBQUkVQRU5EOiAncHJlcGVuZCdcbn0pO1xuXG5mdW5jdGlvbiBjb252ZXJ0KGNvbmZpZ3MsIHJlcXVlc3QsIG9wdGltaXN0aWNVcGRhdGVyLCB1cGRhdGVyKSB7XG4gIHZhciBjb25maWdPcHRpbWlzdGljVXBkYXRlcyA9IG9wdGltaXN0aWNVcGRhdGVyID8gW29wdGltaXN0aWNVcGRhdGVyXSA6IFtdO1xuICB2YXIgY29uZmlnVXBkYXRlcyA9IHVwZGF0ZXIgPyBbdXBkYXRlcl0gOiBbXTtcbiAgY29uZmlncy5mb3JFYWNoKGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICBzd2l0Y2ggKGNvbmZpZy50eXBlKSB7XG4gICAgICBjYXNlICdOT0RFX0RFTEVURSc6XG4gICAgICAgIHZhciBub2RlRGVsZXRlUmVzdWx0ID0gbm9kZURlbGV0ZShjb25maWcsIHJlcXVlc3QpO1xuXG4gICAgICAgIGlmIChub2RlRGVsZXRlUmVzdWx0KSB7XG4gICAgICAgICAgY29uZmlnT3B0aW1pc3RpY1VwZGF0ZXMucHVzaChub2RlRGVsZXRlUmVzdWx0KTtcbiAgICAgICAgICBjb25maWdVcGRhdGVzLnB1c2gobm9kZURlbGV0ZVJlc3VsdCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnUkFOR0VfQUREJzpcbiAgICAgICAgdmFyIHJhbmdlQWRkUmVzdWx0ID0gcmFuZ2VBZGQoY29uZmlnLCByZXF1ZXN0KTtcblxuICAgICAgICBpZiAocmFuZ2VBZGRSZXN1bHQpIHtcbiAgICAgICAgICBjb25maWdPcHRpbWlzdGljVXBkYXRlcy5wdXNoKHJhbmdlQWRkUmVzdWx0KTtcbiAgICAgICAgICBjb25maWdVcGRhdGVzLnB1c2gocmFuZ2VBZGRSZXN1bHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ1JBTkdFX0RFTEVURSc6XG4gICAgICAgIHZhciByYW5nZURlbGV0ZVJlc3VsdCA9IHJhbmdlRGVsZXRlKGNvbmZpZywgcmVxdWVzdCk7XG5cbiAgICAgICAgaWYgKHJhbmdlRGVsZXRlUmVzdWx0KSB7XG4gICAgICAgICAgY29uZmlnT3B0aW1pc3RpY1VwZGF0ZXMucHVzaChyYW5nZURlbGV0ZVJlc3VsdCk7XG4gICAgICAgICAgY29uZmlnVXBkYXRlcy5wdXNoKHJhbmdlRGVsZXRlUmVzdWx0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgb3B0aW1pc3RpY1VwZGF0ZXI6IGZ1bmN0aW9uIG9wdGltaXN0aWNVcGRhdGVyKHN0b3JlLCBkYXRhKSB7XG4gICAgICBjb25maWdPcHRpbWlzdGljVXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChlYWNoT3B0aW1pc3RpY1VwZGF0ZXIpIHtcbiAgICAgICAgZWFjaE9wdGltaXN0aWNVcGRhdGVyKHN0b3JlLCBkYXRhKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdXBkYXRlcjogZnVuY3Rpb24gdXBkYXRlcihzdG9yZSwgZGF0YSkge1xuICAgICAgY29uZmlnVXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChlYWNoVXBkYXRlcikge1xuICAgICAgICBlYWNoVXBkYXRlcihzdG9yZSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vZGVEZWxldGUoY29uZmlnLCByZXF1ZXN0KSB7XG4gIHZhciBkZWxldGVkSURGaWVsZE5hbWUgPSBjb25maWcuZGVsZXRlZElERmllbGROYW1lO1xuICB2YXIgcm9vdEZpZWxkID0gZ2V0Um9vdEZpZWxkKHJlcXVlc3QpO1xuXG4gIGlmICghcm9vdEZpZWxkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlLCBkYXRhKSB7XG4gICAgdmFyIHBheWxvYWQgPSBzdG9yZS5nZXRSb290RmllbGQocm9vdEZpZWxkKTtcblxuICAgIGlmICghcGF5bG9hZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkZWxldGVJRCA9IHBheWxvYWQuZ2V0VmFsdWUoZGVsZXRlZElERmllbGROYW1lKTtcbiAgICB2YXIgZGVsZXRlSURzID0gQXJyYXkuaXNBcnJheShkZWxldGVJRCkgPyBkZWxldGVJRCA6IFtkZWxldGVJRF07XG4gICAgZGVsZXRlSURzLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICBpZiAoaWQgJiYgdHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgICAgICBzdG9yZVtcImRlbGV0ZVwiXShpZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJhbmdlQWRkKGNvbmZpZywgcmVxdWVzdCkge1xuICB2YXIgcGFyZW50SUQgPSBjb25maWcucGFyZW50SUQsXG4gICAgICBjb25uZWN0aW9uSW5mbyA9IGNvbmZpZy5jb25uZWN0aW9uSW5mbyxcbiAgICAgIGVkZ2VOYW1lID0gY29uZmlnLmVkZ2VOYW1lO1xuXG4gIGlmICghcGFyZW50SUQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXlEZWNsYXJhdGl2ZU11dGF0aW9uQ29uZmlnOiBGb3IgbXV0YXRpb24gY29uZmlnIFJBTkdFX0FERCAnICsgJ3RvIHdvcmsgeW91IG11c3QgaW5jbHVkZSBhIHBhcmVudElEJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgcm9vdEZpZWxkID0gZ2V0Um9vdEZpZWxkKHJlcXVlc3QpO1xuXG4gIGlmICghY29ubmVjdGlvbkluZm8gfHwgIXJvb3RGaWVsZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZSwgZGF0YSkge1xuICAgIHZhciBwYXJlbnQgPSBzdG9yZS5nZXQocGFyZW50SUQpO1xuXG4gICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcGF5bG9hZCA9IHN0b3JlLmdldFJvb3RGaWVsZChyb290RmllbGQpO1xuXG4gICAgaWYgKCFwYXlsb2FkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNlcnZlckVkZ2UgPSBwYXlsb2FkLmdldExpbmtlZFJlY29yZChlZGdlTmFtZSk7XG5cbiAgICB2YXIgX2l0ZXJhdG9yID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKGNvbm5lY3Rpb25JbmZvKSxcbiAgICAgICAgX3N0ZXA7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGluZm8gPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICBpZiAoIXNlcnZlckVkZ2UpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb25uZWN0aW9uID0gQ29ubmVjdGlvbkhhbmRsZXIuZ2V0Q29ubmVjdGlvbihwYXJlbnQsIGluZm8ua2V5LCBpbmZvLmZpbHRlcnMpO1xuXG4gICAgICAgIGlmICghY29ubmVjdGlvbikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNsaWVudEVkZ2UgPSBDb25uZWN0aW9uSGFuZGxlci5idWlsZENvbm5lY3Rpb25FZGdlKHN0b3JlLCBjb25uZWN0aW9uLCBzZXJ2ZXJFZGdlKTtcblxuICAgICAgICBpZiAoIWNsaWVudEVkZ2UpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoaW5mby5yYW5nZUJlaGF2aW9yKSB7XG4gICAgICAgICAgY2FzZSAnYXBwZW5kJzpcbiAgICAgICAgICAgIENvbm5lY3Rpb25IYW5kbGVyLmluc2VydEVkZ2VBZnRlcihjb25uZWN0aW9uLCBjbGllbnRFZGdlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAncHJlcGVuZCc6XG4gICAgICAgICAgICBDb25uZWN0aW9uSGFuZGxlci5pbnNlcnRFZGdlQmVmb3JlKGNvbm5lY3Rpb24sIGNsaWVudEVkZ2UpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZzogUkFOR0VfQUREIHJhbmdlIGJlaGF2aW9yIGAlc2AgJyArICd3aWxsIG5vdCB3b3JrIGFzIGV4cGVjdGVkIGluIFJlbGF5TW9kZXJuLCBzdXBwb3J0ZWQgcmFuZ2UgJyArIFwiYmVoYXZpb3JzIGFyZSAnYXBwZW5kJywgJ3ByZXBlbmQnLlwiLCBpbmZvLnJhbmdlQmVoYXZpb3IpIDogdm9pZCAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiByYW5nZURlbGV0ZShjb25maWcsIHJlcXVlc3QpIHtcbiAgdmFyIHBhcmVudElEID0gY29uZmlnLnBhcmVudElELFxuICAgICAgY29ubmVjdGlvbktleXMgPSBjb25maWcuY29ubmVjdGlvbktleXMsXG4gICAgICBwYXRoVG9Db25uZWN0aW9uID0gY29uZmlnLnBhdGhUb0Nvbm5lY3Rpb24sXG4gICAgICBkZWxldGVkSURGaWVsZE5hbWUgPSBjb25maWcuZGVsZXRlZElERmllbGROYW1lO1xuXG4gIGlmICghcGFyZW50SUQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXlEZWNsYXJhdGl2ZU11dGF0aW9uQ29uZmlnOiBGb3IgbXV0YXRpb24gY29uZmlnIFJBTkdFX0RFTEVURSAnICsgJ3RvIHdvcmsgeW91IG11c3QgaW5jbHVkZSBhIHBhcmVudElEJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgcm9vdEZpZWxkID0gZ2V0Um9vdEZpZWxkKHJlcXVlc3QpO1xuXG4gIGlmICghcm9vdEZpZWxkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlLCBkYXRhKSB7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRlbGV0ZUlEcyA9IFtdO1xuICAgIHZhciBkZWxldGVkSURGaWVsZCA9IGRhdGFbcm9vdEZpZWxkXTtcblxuICAgIGlmIChkZWxldGVkSURGaWVsZCAmJiBBcnJheS5pc0FycmF5KGRlbGV0ZWRJREZpZWxkTmFtZSkpIHtcbiAgICAgIHZhciBfaXRlcmF0b3IyID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKGRlbGV0ZWRJREZpZWxkTmFtZSksXG4gICAgICAgICAgX3N0ZXAyO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBlYWNoRmllbGQgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgICBpZiAoZGVsZXRlZElERmllbGQgJiYgdHlwZW9mIGRlbGV0ZWRJREZpZWxkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZGVsZXRlZElERmllbGQgPSBkZWxldGVkSURGaWVsZFtlYWNoRmllbGRdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yMi5mKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRlbGV0ZWRJREZpZWxkKSkge1xuICAgICAgICBkZWxldGVkSURGaWVsZC5mb3JFYWNoKGZ1bmN0aW9uIChpZE9iamVjdCkge1xuICAgICAgICAgIGlmIChpZE9iamVjdCAmJiBpZE9iamVjdC5pZCAmJiB0eXBlb2YgaWRPYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBpZE9iamVjdC5pZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGRlbGV0ZUlEcy5wdXNoKGlkT2JqZWN0LmlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChkZWxldGVkSURGaWVsZCAmJiBkZWxldGVkSURGaWVsZC5pZCAmJiB0eXBlb2YgZGVsZXRlZElERmllbGQuaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGRlbGV0ZUlEcy5wdXNoKGRlbGV0ZWRJREZpZWxkLmlkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRlbGV0ZWRJREZpZWxkICYmIHR5cGVvZiBkZWxldGVkSURGaWVsZE5hbWUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBkZWxldGVkSURGaWVsZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGRlbGV0ZWRJREZpZWxkID0gZGVsZXRlZElERmllbGRbZGVsZXRlZElERmllbGROYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBkZWxldGVkSURGaWVsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZGVsZXRlSURzLnB1c2goZGVsZXRlZElERmllbGQpO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRlbGV0ZWRJREZpZWxkKSkge1xuICAgICAgICBkZWxldGVkSURGaWVsZC5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBkZWxldGVJRHMucHVzaChpZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWxldGVOb2RlKHBhcmVudElELCBjb25uZWN0aW9uS2V5cywgcGF0aFRvQ29ubmVjdGlvbiwgc3RvcmUsIGRlbGV0ZUlEcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZU5vZGUocGFyZW50SUQsIGNvbm5lY3Rpb25LZXlzLCBwYXRoVG9Db25uZWN0aW9uLCBzdG9yZSwgZGVsZXRlSURzKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY29ubmVjdGlvbktleXMgIT0gbnVsbCwgJ1JlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZzogUkFOR0VfREVMRVRFIG11c3QgcHJvdmlkZSBhICcgKyAnY29ubmVjdGlvbktleXMnKSA6IHZvaWQgMDtcbiAgdmFyIHBhcmVudCA9IHN0b3JlLmdldChwYXJlbnRJRCk7XG5cbiAgaWYgKCFwYXJlbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAocGF0aFRvQ29ubmVjdGlvbi5sZW5ndGggPCAyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZzogUkFOR0VfREVMRVRFICcgKyAncGF0aFRvQ29ubmVjdGlvbiBtdXN0IGluY2x1ZGUgYXQgbGVhc3QgcGFyZW50IGFuZCBjb25uZWN0aW9uJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHJlY29yZFByb3h5ID0gcGFyZW50O1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgcGF0aFRvQ29ubmVjdGlvbi5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBpZiAocmVjb3JkUHJveHkpIHtcbiAgICAgIHJlY29yZFByb3h5ID0gcmVjb3JkUHJveHkuZ2V0TGlua2VkUmVjb3JkKHBhdGhUb0Nvbm5lY3Rpb25baV0pO1xuICAgIH1cbiAgfSAvLyBTaG91bGQgbmV2ZXIgZW50ZXIgbG9vcCBleGNlcHQgZWRnZSBjYXNlc1xuXG5cbiAgaWYgKCFjb25uZWN0aW9uS2V5cyB8fCAhcmVjb3JkUHJveHkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXlEZWNsYXJhdGl2ZU11dGF0aW9uQ29uZmlnOiBSQU5HRV9ERUxFVEUgJyArICdwYXRoVG9Db25uZWN0aW9uIGlzIGluY29ycmVjdC4gVW5hYmxlIHRvIGZpbmQgY29ubmVjdGlvbiB3aXRoICcgKyAncGFyZW50SUQ6ICVzIGFuZCBwYXRoOiAlcycsIHBhcmVudElELCBwYXRoVG9Db25uZWN0aW9uLnRvU3RyaW5nKCkpIDogdm9pZCAwO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfaXRlcmF0b3IzID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKGNvbm5lY3Rpb25LZXlzKSxcbiAgICAgIF9zdGVwMztcblxuICB0cnkge1xuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkge1xuICAgICAgdmFyIGtleSA9IF9zdGVwMy52YWx1ZTtcbiAgICAgIHZhciBjb25uZWN0aW9uID0gQ29ubmVjdGlvbkhhbmRsZXIuZ2V0Q29ubmVjdGlvbihyZWNvcmRQcm94eSwga2V5LmtleSwga2V5LmZpbHRlcnMpO1xuXG4gICAgICBpZiAoY29ubmVjdGlvbikge1xuICAgICAgICBkZWxldGVJRHMuZm9yRWFjaChmdW5jdGlvbiAoZGVsZXRlSUQpIHtcbiAgICAgICAgICBDb25uZWN0aW9uSGFuZGxlci5kZWxldGVOb2RlKGNvbm5lY3Rpb24sIGRlbGV0ZUlEKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7XG4gICAgICBfbG9vcCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2l0ZXJhdG9yMy5lKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgX2l0ZXJhdG9yMy5mKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Um9vdEZpZWxkKHJlcXVlc3QpIHtcbiAgaWYgKHJlcXVlc3QuZnJhZ21lbnQuc2VsZWN0aW9ucyAmJiByZXF1ZXN0LmZyYWdtZW50LnNlbGVjdGlvbnMubGVuZ3RoID4gMCAmJiByZXF1ZXN0LmZyYWdtZW50LnNlbGVjdGlvbnNbMF0ua2luZCA9PT0gJ0xpbmtlZEZpZWxkJykge1xuICAgIHJldHVybiByZXF1ZXN0LmZyYWdtZW50LnNlbGVjdGlvbnNbMF0ubmFtZTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgTXV0YXRpb25UeXBlczogTXV0YXRpb25UeXBlcyxcbiAgUmFuZ2VPcGVyYXRpb25zOiBSYW5nZU9wZXJhdGlvbnMsXG4gIGNvbnZlcnQ6IGNvbnZlcnRcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vc3RvcmUvQ2xpZW50SUQnKSxcbiAgICBnZW5lcmF0ZUNsaWVudElEID0gX3JlcXVpcmUuZ2VuZXJhdGVDbGllbnRJRDtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4uL3N0b3JlL1JlbGF5U3RvcmVVdGlscycpLFxuICAgIGdldFN0YWJsZVN0b3JhZ2VLZXkgPSBfcmVxdWlyZTIuZ2V0U3RhYmxlU3RvcmFnZUtleTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBBIGhlbHBlciBjbGFzcyBmb3IgbWFuaXB1bGF0aW5nIGEgZ2l2ZW4gcmVjb3JkIGZyb20gYSByZWNvcmQgc291cmNlIHZpYSBhblxuICogaW1wZXJhdGl2ZS9PTy1zdHlsZSBBUEkuXG4gKi9cbnZhciBSZWxheVJlY29yZFByb3h5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVsYXlSZWNvcmRQcm94eShzb3VyY2UsIG11dGF0b3IsIGRhdGFJRCkge1xuICAgIHRoaXMuX2RhdGFJRCA9IGRhdGFJRDtcbiAgICB0aGlzLl9tdXRhdG9yID0gbXV0YXRvcjtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVsYXlSZWNvcmRQcm94eS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvcHlGaWVsZHNGcm9tID0gZnVuY3Rpb24gY29weUZpZWxkc0Zyb20oc291cmNlKSB7XG4gICAgdGhpcy5fbXV0YXRvci5jb3B5RmllbGRzKHNvdXJjZS5nZXREYXRhSUQoKSwgdGhpcy5fZGF0YUlEKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0RGF0YUlEID0gZnVuY3Rpb24gZ2V0RGF0YUlEKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhSUQ7XG4gIH07XG5cbiAgX3Byb3RvLmdldFR5cGUgPSBmdW5jdGlvbiBnZXRUeXBlKCkge1xuICAgIHZhciB0eXBlID0gdGhpcy5fbXV0YXRvci5nZXRUeXBlKHRoaXMuX2RhdGFJRCk7XG5cbiAgICAhKHR5cGUgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlY29yZFByb3h5OiBDYW5ub3QgZ2V0IHRoZSB0eXBlIG9mIGRlbGV0ZWQgcmVjb3JkIGAlc2AuJywgdGhpcy5fZGF0YUlEKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH07XG5cbiAgX3Byb3RvLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUobmFtZSwgYXJncykge1xuICAgIHZhciBzdG9yYWdlS2V5ID0gZ2V0U3RhYmxlU3RvcmFnZUtleShuYW1lLCBhcmdzKTtcbiAgICByZXR1cm4gdGhpcy5fbXV0YXRvci5nZXRWYWx1ZSh0aGlzLl9kYXRhSUQsIHN0b3JhZ2VLZXkpO1xuICB9O1xuXG4gIF9wcm90by5zZXRWYWx1ZSA9IGZ1bmN0aW9uIHNldFZhbHVlKHZhbHVlLCBuYW1lLCBhcmdzKSB7XG4gICAgIWlzVmFsaWRMZWFmVmFsdWUodmFsdWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWNvcmRQcm94eSNzZXRWYWx1ZSgpOiBFeHBlY3RlZCBhIHNjYWxhciBvciBhcnJheSBvZiBzY2FsYXJzLCAnICsgJ2dvdCBgJXNgLicsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBzdG9yYWdlS2V5ID0gZ2V0U3RhYmxlU3RvcmFnZUtleShuYW1lLCBhcmdzKTtcblxuICAgIHRoaXMuX211dGF0b3Iuc2V0VmFsdWUodGhpcy5fZGF0YUlELCBzdG9yYWdlS2V5LCB2YWx1ZSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uZ2V0TGlua2VkUmVjb3JkID0gZnVuY3Rpb24gZ2V0TGlua2VkUmVjb3JkKG5hbWUsIGFyZ3MpIHtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0YWJsZVN0b3JhZ2VLZXkobmFtZSwgYXJncyk7XG5cbiAgICB2YXIgbGlua2VkSUQgPSB0aGlzLl9tdXRhdG9yLmdldExpbmtlZFJlY29yZElEKHRoaXMuX2RhdGFJRCwgc3RvcmFnZUtleSk7XG5cbiAgICByZXR1cm4gbGlua2VkSUQgIT0gbnVsbCA/IHRoaXMuX3NvdXJjZS5nZXQobGlua2VkSUQpIDogbGlua2VkSUQ7XG4gIH07XG5cbiAgX3Byb3RvLnNldExpbmtlZFJlY29yZCA9IGZ1bmN0aW9uIHNldExpbmtlZFJlY29yZChyZWNvcmQsIG5hbWUsIGFyZ3MpIHtcbiAgICAhKHJlY29yZCBpbnN0YW5jZW9mIFJlbGF5UmVjb3JkUHJveHkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWNvcmRQcm94eSNzZXRMaW5rZWRSZWNvcmQoKTogRXhwZWN0ZWQgYSByZWNvcmQsIGdvdCBgJXNgLicsIHJlY29yZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBzdG9yYWdlS2V5ID0gZ2V0U3RhYmxlU3RvcmFnZUtleShuYW1lLCBhcmdzKTtcbiAgICB2YXIgbGlua2VkSUQgPSByZWNvcmQuZ2V0RGF0YUlEKCk7XG5cbiAgICB0aGlzLl9tdXRhdG9yLnNldExpbmtlZFJlY29yZElEKHRoaXMuX2RhdGFJRCwgc3RvcmFnZUtleSwgbGlua2VkSUQpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmdldE9yQ3JlYXRlTGlua2VkUmVjb3JkID0gZnVuY3Rpb24gZ2V0T3JDcmVhdGVMaW5rZWRSZWNvcmQobmFtZSwgdHlwZU5hbWUsIGFyZ3MpIHtcbiAgICB2YXIgbGlua2VkUmVjb3JkID0gdGhpcy5nZXRMaW5rZWRSZWNvcmQobmFtZSwgYXJncyk7XG5cbiAgICBpZiAoIWxpbmtlZFJlY29yZCkge1xuICAgICAgdmFyIF90aGlzJF9zb3VyY2UkZ2V0O1xuXG4gICAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0YWJsZVN0b3JhZ2VLZXkobmFtZSwgYXJncyk7XG4gICAgICB2YXIgY2xpZW50SUQgPSBnZW5lcmF0ZUNsaWVudElEKHRoaXMuZ2V0RGF0YUlEKCksIHN0b3JhZ2VLZXkpOyAvLyBOT1RFOiBpdCdzIHBvc3NpYmxlIHRoYXQgYSBjbGllbnQgcmVjb3JkIGZvciB0aGlzIGZpZWxkIGV4aXN0c1xuICAgICAgLy8gYnV0IHRoZSBmaWVsZCBpdHNlbGYgd2FzIHVuc2V0LlxuXG4gICAgICBsaW5rZWRSZWNvcmQgPSAoX3RoaXMkX3NvdXJjZSRnZXQgPSB0aGlzLl9zb3VyY2UuZ2V0KGNsaWVudElEKSkgIT09IG51bGwgJiYgX3RoaXMkX3NvdXJjZSRnZXQgIT09IHZvaWQgMCA/IF90aGlzJF9zb3VyY2UkZ2V0IDogdGhpcy5fc291cmNlLmNyZWF0ZShjbGllbnRJRCwgdHlwZU5hbWUpO1xuICAgICAgdGhpcy5zZXRMaW5rZWRSZWNvcmQobGlua2VkUmVjb3JkLCBuYW1lLCBhcmdzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlua2VkUmVjb3JkO1xuICB9O1xuXG4gIF9wcm90by5nZXRMaW5rZWRSZWNvcmRzID0gZnVuY3Rpb24gZ2V0TGlua2VkUmVjb3JkcyhuYW1lLCBhcmdzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBzdG9yYWdlS2V5ID0gZ2V0U3RhYmxlU3RvcmFnZUtleShuYW1lLCBhcmdzKTtcblxuICAgIHZhciBsaW5rZWRJRHMgPSB0aGlzLl9tdXRhdG9yLmdldExpbmtlZFJlY29yZElEcyh0aGlzLl9kYXRhSUQsIHN0b3JhZ2VLZXkpO1xuXG4gICAgaWYgKGxpbmtlZElEcyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbGlua2VkSURzO1xuICAgIH1cblxuICAgIHJldHVybiBsaW5rZWRJRHMubWFwKGZ1bmN0aW9uIChsaW5rZWRJRCkge1xuICAgICAgcmV0dXJuIGxpbmtlZElEICE9IG51bGwgPyBfdGhpcy5fc291cmNlLmdldChsaW5rZWRJRCkgOiBsaW5rZWRJRDtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uc2V0TGlua2VkUmVjb3JkcyA9IGZ1bmN0aW9uIHNldExpbmtlZFJlY29yZHMocmVjb3JkcywgbmFtZSwgYXJncykge1xuICAgICFBcnJheS5pc0FycmF5KHJlY29yZHMpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWNvcmRQcm94eSNzZXRMaW5rZWRSZWNvcmRzKCk6IEV4cGVjdGVkIHJlY29yZHMgdG8gYmUgYW4gYXJyYXksIGdvdCBgJXNgLicsIHJlY29yZHMpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0YWJsZVN0b3JhZ2VLZXkobmFtZSwgYXJncyk7XG4gICAgdmFyIGxpbmtlZElEcyA9IHJlY29yZHMubWFwKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgIHJldHVybiByZWNvcmQgJiYgcmVjb3JkLmdldERhdGFJRCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fbXV0YXRvci5zZXRMaW5rZWRSZWNvcmRJRHModGhpcy5fZGF0YUlELCBzdG9yYWdlS2V5LCBsaW5rZWRJRHMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmludmFsaWRhdGVSZWNvcmQgPSBmdW5jdGlvbiBpbnZhbGlkYXRlUmVjb3JkKCkge1xuICAgIHRoaXMuX3NvdXJjZS5tYXJrSURGb3JJbnZhbGlkYXRpb24odGhpcy5fZGF0YUlEKTtcbiAgfTtcblxuICByZXR1cm4gUmVsYXlSZWNvcmRQcm94eTtcbn0oKTtcblxuZnVuY3Rpb24gaXNWYWxpZExlYWZWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmV2ZXJ5KGlzVmFsaWRMZWFmVmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5UmVjb3JkUHJveHk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWxheU1vZGVyblJlY29yZCA9IHJlcXVpcmUoJy4uL3N0b3JlL1JlbGF5TW9kZXJuUmVjb3JkJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vc3RvcmUvUmVsYXlSZWNvcmRTdGF0ZScpLFxuICAgIEVYSVNURU5UID0gX3JlcXVpcmUuRVhJU1RFTlQ7XG5cbi8qKlxuICogQGludGVybmFsXG4gKlxuICogV3JhcHBlciBBUEkgdGhhdCBpcyBhbiBhbWFsZ2FtIG9mIHRoZSBgUmVsYXlNb2Rlcm5SZWNvcmRgIEFQSSBhbmRcbiAqIGBNdXRhYmxlUmVjb3JkU291cmNlYCBpbnRlcmZhY2UsIGltcGxlbWVudGluZyBjb3B5LW9uLXdyaXRlIHNlbWFudGljcyBmb3IgcmVjb3Jkc1xuICogaW4gYSByZWNvcmQgc291cmNlLlxuICpcbiAqIE1vZGlmaWNhdGlvbnMgYXJlIGFwcGxpZWQgdG8gZnJlc2ggY29waWVzIG9mIHJlY29yZHM6XG4gKiAtIFJlY29yZHMgaW4gYGJhc2VgIGFyZSBuZXZlciBtb2RpZmllZC5cbiAqIC0gTW9kaWZpY2F0aW9ucyBjYXVzZSBhIGZyZXNoIHZlcnNpb24gb2YgYSByZWNvcmQgdG8gYmUgY3JlYXRlZCBpbiBgc2lua2AuXG4gKiAgIFRoZXNlIHNpbmsgcmVjb3JkcyBjb250YWluIG9ubHkgbW9kaWZpZWQgZmllbGRzLlxuICovXG52YXIgUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yKGJhc2UsIHNpbmspIHtcbiAgICB0aGlzLl9fc291cmNlcyA9IFtzaW5rLCBiYXNlXTtcbiAgICB0aGlzLl9iYXNlID0gYmFzZTtcbiAgICB0aGlzLl9zaW5rID0gc2luaztcbiAgfVxuICAvKipcbiAgICogKipVTlNUQUJMRSoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGxpa2VseSB0byBiZSByZW1vdmVkIGluIGFuIHVwY29taW5nIHJlbGVhc2VcbiAgICogYW5kIHNob3VsZCBub3QgYmUgcmVsaWVkIHVwb24uXG4gICAqIFRPRE8gVDQxNTkzMTk2OiBSZW1vdmUgdW5zdGFibGVfZ2V0UmF3UmVjb3JkV2l0aENoYW5nZXNcbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yLnByb3RvdHlwZTtcblxuICBfcHJvdG8udW5zdGFibGVfZ2V0UmF3UmVjb3JkV2l0aENoYW5nZXMgPSBmdW5jdGlvbiB1bnN0YWJsZV9nZXRSYXdSZWNvcmRXaXRoQ2hhbmdlcyhkYXRhSUQpIHtcbiAgICB2YXIgYmFzZVJlY29yZCA9IHRoaXMuX2Jhc2UuZ2V0KGRhdGFJRCk7XG5cbiAgICB2YXIgc2lua1JlY29yZCA9IHRoaXMuX3NpbmsuZ2V0KGRhdGFJRCk7XG5cbiAgICBpZiAoc2lua1JlY29yZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoYmFzZVJlY29yZCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBiYXNlUmVjb3JkO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV4dFJlY29yZCA9IFJlbGF5TW9kZXJuUmVjb3JkLmNsb25lKGJhc2VSZWNvcmQpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIC8vIFByZXZlbnQgbXV0YXRpb24gb2YgYSByZWNvcmQgZnJvbSBvdXRzaWRlIHRoZSBzdG9yZS5cbiAgICAgICAgUmVsYXlNb2Rlcm5SZWNvcmQuZnJlZXplKG5leHRSZWNvcmQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV4dFJlY29yZDtcbiAgICB9IGVsc2UgaWYgKHNpbmtSZWNvcmQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAoYmFzZVJlY29yZCAhPSBudWxsKSB7XG4gICAgICB2YXIgX25leHRSZWNvcmQgPSBSZWxheU1vZGVyblJlY29yZC51cGRhdGUoYmFzZVJlY29yZCwgc2lua1JlY29yZCk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgaWYgKF9uZXh0UmVjb3JkICE9PSBiYXNlUmVjb3JkKSB7XG4gICAgICAgICAgLy8gUHJldmVudCBtdXRhdGlvbiBvZiBhIHJlY29yZCBmcm9tIG91dHNpZGUgdGhlIHN0b3JlLlxuICAgICAgICAgIFJlbGF5TW9kZXJuUmVjb3JkLmZyZWV6ZShfbmV4dFJlY29yZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9uZXh0UmVjb3JkO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX25leHRSZWNvcmQyID0gUmVsYXlNb2Rlcm5SZWNvcmQuY2xvbmUoc2lua1JlY29yZCk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgLy8gUHJldmVudCBtdXRhdGlvbiBvZiBhIHJlY29yZCBmcm9tIG91dHNpZGUgdGhlIHN0b3JlLlxuICAgICAgICBSZWxheU1vZGVyblJlY29yZC5mcmVlemUoX25leHRSZWNvcmQyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9uZXh0UmVjb3JkMjtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9nZXRTaW5rUmVjb3JkID0gZnVuY3Rpb24gX2dldFNpbmtSZWNvcmQoZGF0YUlEKSB7XG4gICAgdmFyIHNpbmtSZWNvcmQgPSB0aGlzLl9zaW5rLmdldChkYXRhSUQpO1xuXG4gICAgaWYgKCFzaW5rUmVjb3JkKSB7XG4gICAgICB2YXIgYmFzZVJlY29yZCA9IHRoaXMuX2Jhc2UuZ2V0KGRhdGFJRCk7XG5cbiAgICAgICFiYXNlUmVjb3JkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yOiBDYW5ub3QgbW9kaWZ5IG5vbi1leGlzdGVudCByZWNvcmQgYCVzYC4nLCBkYXRhSUQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHNpbmtSZWNvcmQgPSBSZWxheU1vZGVyblJlY29yZC5jcmVhdGUoZGF0YUlELCBSZWxheU1vZGVyblJlY29yZC5nZXRUeXBlKGJhc2VSZWNvcmQpKTtcblxuICAgICAgdGhpcy5fc2luay5zZXQoZGF0YUlELCBzaW5rUmVjb3JkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2lua1JlY29yZDtcbiAgfTtcblxuICBfcHJvdG8uY29weUZpZWxkcyA9IGZ1bmN0aW9uIGNvcHlGaWVsZHMoc291cmNlSUQsIHNpbmtJRCkge1xuICAgIHZhciBzaW5rU291cmNlID0gdGhpcy5fc2luay5nZXQoc291cmNlSUQpO1xuXG4gICAgdmFyIGJhc2VTb3VyY2UgPSB0aGlzLl9iYXNlLmdldChzb3VyY2VJRCk7XG5cbiAgICAhKHNpbmtTb3VyY2UgfHwgYmFzZVNvdXJjZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlY29yZFNvdXJjZU11dGF0b3IjY29weUZpZWxkcygpOiBDYW5ub3QgY29weSBmaWVsZHMgZnJvbSAnICsgJ25vbi1leGlzdGVudCByZWNvcmQgYCVzYC4nLCBzb3VyY2VJRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgdmFyIHNpbmsgPSB0aGlzLl9nZXRTaW5rUmVjb3JkKHNpbmtJRCk7XG5cbiAgICBpZiAoYmFzZVNvdXJjZSkge1xuICAgICAgUmVsYXlNb2Rlcm5SZWNvcmQuY29weUZpZWxkcyhiYXNlU291cmNlLCBzaW5rKTtcbiAgICB9XG5cbiAgICBpZiAoc2lua1NvdXJjZSkge1xuICAgICAgUmVsYXlNb2Rlcm5SZWNvcmQuY29weUZpZWxkcyhzaW5rU291cmNlLCBzaW5rKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvcHlGaWVsZHNGcm9tUmVjb3JkID0gZnVuY3Rpb24gY29weUZpZWxkc0Zyb21SZWNvcmQocmVjb3JkLCBzaW5rSUQpIHtcbiAgICB2YXIgc2luayA9IHRoaXMuX2dldFNpbmtSZWNvcmQoc2lua0lEKTtcblxuICAgIFJlbGF5TW9kZXJuUmVjb3JkLmNvcHlGaWVsZHMocmVjb3JkLCBzaW5rKTtcbiAgfTtcblxuICBfcHJvdG8uY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGRhdGFJRCwgdHlwZU5hbWUpIHtcbiAgICAhKHRoaXMuX2Jhc2UuZ2V0U3RhdHVzKGRhdGFJRCkgIT09IEVYSVNURU5UICYmIHRoaXMuX3NpbmsuZ2V0U3RhdHVzKGRhdGFJRCkgIT09IEVYSVNURU5UKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVjb3JkU291cmNlTXV0YXRvciNjcmVhdGUoKTogQ2Fubm90IGNyZWF0ZSBhIHJlY29yZCB3aXRoIGlkICcgKyAnYCVzYCwgdGhpcyByZWNvcmQgYWxyZWFkeSBleGlzdHMuJywgZGF0YUlEKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIHJlY29yZCA9IFJlbGF5TW9kZXJuUmVjb3JkLmNyZWF0ZShkYXRhSUQsIHR5cGVOYW1lKTtcblxuICAgIHRoaXMuX3Npbmsuc2V0KGRhdGFJRCwgcmVjb3JkKTtcbiAgfTtcblxuICBfcHJvdG9bXCJkZWxldGVcIl0gPSBmdW5jdGlvbiBfZGVsZXRlKGRhdGFJRCkge1xuICAgIHRoaXMuX3NpbmtbXCJkZWxldGVcIl0oZGF0YUlEKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0U3RhdHVzID0gZnVuY3Rpb24gZ2V0U3RhdHVzKGRhdGFJRCkge1xuICAgIHJldHVybiB0aGlzLl9zaW5rLmhhcyhkYXRhSUQpID8gdGhpcy5fc2luay5nZXRTdGF0dXMoZGF0YUlEKSA6IHRoaXMuX2Jhc2UuZ2V0U3RhdHVzKGRhdGFJRCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFR5cGUgPSBmdW5jdGlvbiBnZXRUeXBlKGRhdGFJRCkge1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB0aGlzLl9fc291cmNlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIHZhciByZWNvcmQgPSB0aGlzLl9fc291cmNlc1tpaV0uZ2V0KGRhdGFJRCk7XG5cbiAgICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgcmV0dXJuIFJlbGF5TW9kZXJuUmVjb3JkLmdldFR5cGUocmVjb3JkKTtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZShkYXRhSUQsIHN0b3JhZ2VLZXkpIHtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgdGhpcy5fX3NvdXJjZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICB2YXIgcmVjb3JkID0gdGhpcy5fX3NvdXJjZXNbaWldLmdldChkYXRhSUQpO1xuXG4gICAgICBpZiAocmVjb3JkKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFZhbHVlKHJlY29yZCwgc3RvcmFnZUtleSk7XG5cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2V0VmFsdWUgPSBmdW5jdGlvbiBzZXRWYWx1ZShkYXRhSUQsIHN0b3JhZ2VLZXksIHZhbHVlKSB7XG4gICAgdmFyIHNpbmtSZWNvcmQgPSB0aGlzLl9nZXRTaW5rUmVjb3JkKGRhdGFJRCk7XG5cbiAgICBSZWxheU1vZGVyblJlY29yZC5zZXRWYWx1ZShzaW5rUmVjb3JkLCBzdG9yYWdlS2V5LCB2YWx1ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldExpbmtlZFJlY29yZElEID0gZnVuY3Rpb24gZ2V0TGlua2VkUmVjb3JkSUQoZGF0YUlELCBzdG9yYWdlS2V5KSB7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHRoaXMuX19zb3VyY2VzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIHJlY29yZCA9IHRoaXMuX19zb3VyY2VzW2lpXS5nZXQoZGF0YUlEKTtcblxuICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICB2YXIgbGlua2VkSUQgPSBSZWxheU1vZGVyblJlY29yZC5nZXRMaW5rZWRSZWNvcmRJRChyZWNvcmQsIHN0b3JhZ2VLZXkpO1xuXG4gICAgICAgIGlmIChsaW5rZWRJRCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGxpbmtlZElEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNldExpbmtlZFJlY29yZElEID0gZnVuY3Rpb24gc2V0TGlua2VkUmVjb3JkSUQoZGF0YUlELCBzdG9yYWdlS2V5LCBsaW5rZWRJRCkge1xuICAgIHZhciBzaW5rUmVjb3JkID0gdGhpcy5fZ2V0U2lua1JlY29yZChkYXRhSUQpO1xuXG4gICAgUmVsYXlNb2Rlcm5SZWNvcmQuc2V0TGlua2VkUmVjb3JkSUQoc2lua1JlY29yZCwgc3RvcmFnZUtleSwgbGlua2VkSUQpO1xuICB9O1xuXG4gIF9wcm90by5nZXRMaW5rZWRSZWNvcmRJRHMgPSBmdW5jdGlvbiBnZXRMaW5rZWRSZWNvcmRJRHMoZGF0YUlELCBzdG9yYWdlS2V5KSB7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHRoaXMuX19zb3VyY2VzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIHJlY29yZCA9IHRoaXMuX19zb3VyY2VzW2lpXS5nZXQoZGF0YUlEKTtcblxuICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICB2YXIgbGlua2VkSURzID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0TGlua2VkUmVjb3JkSURzKHJlY29yZCwgc3RvcmFnZUtleSk7XG5cbiAgICAgICAgaWYgKGxpbmtlZElEcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGxpbmtlZElEcztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZWNvcmQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zZXRMaW5rZWRSZWNvcmRJRHMgPSBmdW5jdGlvbiBzZXRMaW5rZWRSZWNvcmRJRHMoZGF0YUlELCBzdG9yYWdlS2V5LCBsaW5rZWRJRHMpIHtcbiAgICB2YXIgc2lua1JlY29yZCA9IHRoaXMuX2dldFNpbmtSZWNvcmQoZGF0YUlEKTtcblxuICAgIFJlbGF5TW9kZXJuUmVjb3JkLnNldExpbmtlZFJlY29yZElEcyhzaW5rUmVjb3JkLCBzdG9yYWdlS2V5LCBsaW5rZWRJRHMpO1xuICB9O1xuXG4gIHJldHVybiBSZWxheVJlY29yZFNvdXJjZU11dGF0b3I7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVsYXlNb2Rlcm5SZWNvcmQgPSByZXF1aXJlKCcuLi9zdG9yZS9SZWxheU1vZGVyblJlY29yZCcpO1xuXG52YXIgUmVsYXlSZWNvcmRQcm94eSA9IHJlcXVpcmUoJy4vUmVsYXlSZWNvcmRQcm94eScpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3N0b3JlL1JlbGF5UmVjb3JkU3RhdGUnKSxcbiAgICBFWElTVEVOVCA9IF9yZXF1aXJlLkVYSVNURU5ULFxuICAgIE5PTkVYSVNURU5UID0gX3JlcXVpcmUuTk9ORVhJU1RFTlQ7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuLi9zdG9yZS9SZWxheVN0b3JlVXRpbHMnKSxcbiAgICBST09UX0lEID0gX3JlcXVpcmUyLlJPT1RfSUQsXG4gICAgUk9PVF9UWVBFID0gX3JlcXVpcmUyLlJPT1RfVFlQRTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBBIGhlbHBlciBmb3IgbWFuaXB1bGF0aW5nIGEgYFJlY29yZFNvdXJjZWAgdmlhIGFuIGltcGVyYXRpdmUvT08tc3R5bGUgQVBJLlxuICovXG52YXIgUmVsYXlSZWNvcmRTb3VyY2VQcm94eSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlbGF5UmVjb3JkU291cmNlUHJveHkobXV0YXRvciwgZ2V0RGF0YUlELCBoYW5kbGVyUHJvdmlkZXIpIHtcbiAgICB0aGlzLl9fbXV0YXRvciA9IG11dGF0b3I7XG4gICAgdGhpcy5faGFuZGxlclByb3ZpZGVyID0gaGFuZGxlclByb3ZpZGVyIHx8IG51bGw7XG4gICAgdGhpcy5fcHJveGllcyA9IHt9O1xuICAgIHRoaXMuX2dldERhdGFJRCA9IGdldERhdGFJRDtcbiAgICB0aGlzLl9pbnZhbGlkYXRlZFN0b3JlID0gZmFsc2U7XG4gICAgdGhpcy5faWRzTWFya2VkRm9ySW52YWxpZGF0aW9uID0gbmV3IFNldCgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlbGF5UmVjb3JkU291cmNlUHJveHkucHJvdG90eXBlO1xuXG4gIF9wcm90by5wdWJsaXNoU291cmNlID0gZnVuY3Rpb24gcHVibGlzaFNvdXJjZShzb3VyY2UsIGZpZWxkUGF5bG9hZHMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGRhdGFJRHMgPSBzb3VyY2UuZ2V0UmVjb3JkSURzKCk7XG4gICAgZGF0YUlEcy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhSUQpIHtcbiAgICAgIHZhciBzdGF0dXMgPSBzb3VyY2UuZ2V0U3RhdHVzKGRhdGFJRCk7XG5cbiAgICAgIGlmIChzdGF0dXMgPT09IEVYSVNURU5UKSB7XG4gICAgICAgIHZhciBzb3VyY2VSZWNvcmQgPSBzb3VyY2UuZ2V0KGRhdGFJRCk7XG5cbiAgICAgICAgaWYgKHNvdXJjZVJlY29yZCkge1xuICAgICAgICAgIGlmIChfdGhpcy5fX211dGF0b3IuZ2V0U3RhdHVzKGRhdGFJRCkgIT09IEVYSVNURU5UKSB7XG4gICAgICAgICAgICBfdGhpcy5jcmVhdGUoZGF0YUlELCBSZWxheU1vZGVyblJlY29yZC5nZXRUeXBlKHNvdXJjZVJlY29yZCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzLl9fbXV0YXRvci5jb3B5RmllbGRzRnJvbVJlY29yZChzb3VyY2VSZWNvcmQsIGRhdGFJRCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBOT05FWElTVEVOVCkge1xuICAgICAgICBfdGhpc1tcImRlbGV0ZVwiXShkYXRhSUQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGZpZWxkUGF5bG9hZHMgJiYgZmllbGRQYXlsb2Fkcy5sZW5ndGgpIHtcbiAgICAgIGZpZWxkUGF5bG9hZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGRQYXlsb2FkKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gX3RoaXMuX2hhbmRsZXJQcm92aWRlciAmJiBfdGhpcy5faGFuZGxlclByb3ZpZGVyKGZpZWxkUGF5bG9hZC5oYW5kbGUpO1xuXG4gICAgICAgICFoYW5kbGVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5FbnZpcm9ubWVudDogRXhwZWN0ZWQgYSBoYW5kbGVyIHRvIGJlIHByb3ZpZGVkIGZvciBoYW5kbGUgYCVzYC4nLCBmaWVsZFBheWxvYWQuaGFuZGxlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIGhhbmRsZXIudXBkYXRlKF90aGlzLCBmaWVsZFBheWxvYWQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoZGF0YUlELCB0eXBlTmFtZSkge1xuICAgIHRoaXMuX19tdXRhdG9yLmNyZWF0ZShkYXRhSUQsIHR5cGVOYW1lKTtcblxuICAgIGRlbGV0ZSB0aGlzLl9wcm94aWVzW2RhdGFJRF07XG4gICAgdmFyIHJlY29yZCA9IHRoaXMuZ2V0KGRhdGFJRCk7IC8vIEZvciBmbG93XG5cbiAgICAhcmVjb3JkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWNvcmRTb3VyY2VQcm94eSNjcmVhdGUoKTogRXhwZWN0ZWQgdGhlIGNyZWF0ZWQgcmVjb3JkIHRvIGV4aXN0LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gcmVjb3JkO1xuICB9O1xuXG4gIF9wcm90b1tcImRlbGV0ZVwiXSA9IGZ1bmN0aW9uIF9kZWxldGUoZGF0YUlEKSB7XG4gICAgIShkYXRhSUQgIT09IFJPT1RfSUQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWNvcmRTb3VyY2VQcm94eSNkZWxldGUoKTogQ2Fubm90IGRlbGV0ZSB0aGUgcm9vdCByZWNvcmQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGRlbGV0ZSB0aGlzLl9wcm94aWVzW2RhdGFJRF07XG5cbiAgICB0aGlzLl9fbXV0YXRvcltcImRlbGV0ZVwiXShkYXRhSUQpO1xuICB9O1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoZGF0YUlEKSB7XG4gICAgaWYgKCF0aGlzLl9wcm94aWVzLmhhc093blByb3BlcnR5KGRhdGFJRCkpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLl9fbXV0YXRvci5nZXRTdGF0dXMoZGF0YUlEKTtcblxuICAgICAgaWYgKHN0YXR1cyA9PT0gRVhJU1RFTlQpIHtcbiAgICAgICAgdGhpcy5fcHJveGllc1tkYXRhSURdID0gbmV3IFJlbGF5UmVjb3JkUHJveHkodGhpcywgdGhpcy5fX211dGF0b3IsIGRhdGFJRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wcm94aWVzW2RhdGFJRF0gPSBzdGF0dXMgPT09IE5PTkVYSVNURU5UID8gbnVsbCA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcHJveGllc1tkYXRhSURdO1xuICB9O1xuXG4gIF9wcm90by5nZXRSb290ID0gZnVuY3Rpb24gZ2V0Um9vdCgpIHtcbiAgICB2YXIgcm9vdCA9IHRoaXMuZ2V0KFJPT1RfSUQpO1xuXG4gICAgaWYgKCFyb290KSB7XG4gICAgICByb290ID0gdGhpcy5jcmVhdGUoUk9PVF9JRCwgUk9PVF9UWVBFKTtcbiAgICB9XG5cbiAgICAhKHJvb3QgJiYgcm9vdC5nZXRUeXBlKCkgPT09IFJPT1RfVFlQRSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlY29yZFNvdXJjZVByb3h5I2dldFJvb3QoKTogRXhwZWN0ZWQgdGhlIHNvdXJjZSB0byBjb250YWluIGEgJyArICdyb290IHJlY29yZCwgJXMuJywgcm9vdCA9PSBudWxsID8gJ25vIHJvb3QgcmVjb3JkIGZvdW5kJyA6IFwiZm91bmQgYSByb290IHJlY29yZCBvZiB0eXBlIGBcIi5jb25jYXQocm9vdC5nZXRUeXBlKCksIFwiYFwiKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiByb290O1xuICB9O1xuXG4gIF9wcm90by5pbnZhbGlkYXRlU3RvcmUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlU3RvcmUoKSB7XG4gICAgdGhpcy5faW52YWxpZGF0ZWRTdG9yZSA9IHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLmlzU3RvcmVNYXJrZWRGb3JJbnZhbGlkYXRpb24gPSBmdW5jdGlvbiBpc1N0b3JlTWFya2VkRm9ySW52YWxpZGF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnZhbGlkYXRlZFN0b3JlO1xuICB9O1xuXG4gIF9wcm90by5tYXJrSURGb3JJbnZhbGlkYXRpb24gPSBmdW5jdGlvbiBtYXJrSURGb3JJbnZhbGlkYXRpb24oZGF0YUlEKSB7XG4gICAgdGhpcy5faWRzTWFya2VkRm9ySW52YWxpZGF0aW9uLmFkZChkYXRhSUQpO1xuICB9O1xuXG4gIF9wcm90by5nZXRJRHNNYXJrZWRGb3JJbnZhbGlkYXRpb24gPSBmdW5jdGlvbiBnZXRJRHNNYXJrZWRGb3JJbnZhbGlkYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lkc01hcmtlZEZvckludmFsaWRhdGlvbjtcbiAgfTtcblxuICByZXR1cm4gUmVsYXlSZWNvcmRTb3VyY2VQcm94eTtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheVJlY29yZFNvdXJjZVByb3h5OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3N0b3JlL1JlbGF5U3RvcmVVdGlscycpLFxuICAgIGdldFN0b3JhZ2VLZXkgPSBfcmVxdWlyZS5nZXRTdG9yYWdlS2V5LFxuICAgIFJPT1RfVFlQRSA9IF9yZXF1aXJlLlJPT1RfVFlQRTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBBIHN1YmNsYXNzIG9mIFJlY29yZFNvdXJjZVByb3h5IHRoYXQgcHJvdmlkZXMgY29udmVuaWVuY2UgbWV0aG9kcyBmb3JcbiAqIGFjY2Vzc2luZyB0aGUgcm9vdCBmaWVsZHMgb2YgYSBnaXZlbiBxdWVyeS9tdXRhdGlvbi4gVGhlc2UgZmllbGRzIGFjY2VwdFxuICogY29tcGxleCBhcmd1bWVudHMgYW5kIGl0IGNhbiBiZSB0ZWRpb3VzIHRvIHJlLWNvbnN0cnVjdCB0aGUgY29ycmVjdCBzZXRzIG9mXG4gKiBhcmd1bWVudHMgdG8gcGFzcyB0byBlLmcuIGBnZXRSb290KCkuZ2V0TGlua2VkUmVjb3JkKClgLlxuICovXG52YXIgUmVsYXlSZWNvcmRTb3VyY2VTZWxlY3RvclByb3h5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVsYXlSZWNvcmRTb3VyY2VTZWxlY3RvclByb3h5KG11dGF0b3IsIHJlY29yZFNvdXJjZSwgcmVhZFNlbGVjdG9yKSB7XG4gICAgdGhpcy5fX211dGF0b3IgPSBtdXRhdG9yO1xuICAgIHRoaXMuX19yZWNvcmRTb3VyY2UgPSByZWNvcmRTb3VyY2U7XG4gICAgdGhpcy5fcmVhZFNlbGVjdG9yID0gcmVhZFNlbGVjdG9yO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlbGF5UmVjb3JkU291cmNlU2VsZWN0b3JQcm94eS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShkYXRhSUQsIHR5cGVOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX19yZWNvcmRTb3VyY2UuY3JlYXRlKGRhdGFJRCwgdHlwZU5hbWUpO1xuICB9O1xuXG4gIF9wcm90b1tcImRlbGV0ZVwiXSA9IGZ1bmN0aW9uIF9kZWxldGUoZGF0YUlEKSB7XG4gICAgdGhpcy5fX3JlY29yZFNvdXJjZVtcImRlbGV0ZVwiXShkYXRhSUQpO1xuICB9O1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoZGF0YUlEKSB7XG4gICAgcmV0dXJuIHRoaXMuX19yZWNvcmRTb3VyY2UuZ2V0KGRhdGFJRCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFJvb3QgPSBmdW5jdGlvbiBnZXRSb290KCkge1xuICAgIHJldHVybiB0aGlzLl9fcmVjb3JkU291cmNlLmdldFJvb3QoKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0T3BlcmF0aW9uUm9vdCA9IGZ1bmN0aW9uIGdldE9wZXJhdGlvblJvb3QoKSB7XG4gICAgdmFyIHJvb3QgPSB0aGlzLl9fcmVjb3JkU291cmNlLmdldCh0aGlzLl9yZWFkU2VsZWN0b3IuZGF0YUlEKTtcblxuICAgIGlmICghcm9vdCkge1xuICAgICAgcm9vdCA9IHRoaXMuX19yZWNvcmRTb3VyY2UuY3JlYXRlKHRoaXMuX3JlYWRTZWxlY3Rvci5kYXRhSUQsIFJPT1RfVFlQRSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvb3Q7XG4gIH07XG5cbiAgX3Byb3RvLl9nZXRSb290RmllbGQgPSBmdW5jdGlvbiBfZ2V0Um9vdEZpZWxkKHNlbGVjdG9yLCBmaWVsZE5hbWUsIHBsdXJhbCkge1xuICAgIHZhciBmaWVsZCA9IHNlbGVjdG9yLm5vZGUuc2VsZWN0aW9ucy5maW5kKGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzZWxlY3Rpb24ua2luZCA9PT0gJ0xpbmtlZEZpZWxkJyAmJiBzZWxlY3Rpb24ubmFtZSA9PT0gZmllbGROYW1lO1xuICAgIH0pO1xuICAgICEoZmllbGQgJiYgZmllbGQua2luZCA9PT0gJ0xpbmtlZEZpZWxkJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlY29yZFNvdXJjZVNlbGVjdG9yUHJveHkjZ2V0Um9vdEZpZWxkKCk6IENhbm5vdCBmaW5kIHJvb3QgJyArICdmaWVsZCBgJXNgLCBubyBzdWNoIGZpZWxkIGlzIGRlZmluZWQgb24gR3JhcGhRTCBkb2N1bWVudCBgJXNgLicsIGZpZWxkTmFtZSwgc2VsZWN0b3Iubm9kZS5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgIShmaWVsZC5wbHVyYWwgPT09IHBsdXJhbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlY29yZFNvdXJjZVNlbGVjdG9yUHJveHkjZ2V0Um9vdEZpZWxkKCk6IEV4cGVjdGVkIHJvb3QgZmllbGQgJyArICdgJXNgIHRvIGJlICVzLicsIGZpZWxkTmFtZSwgcGx1cmFsID8gJ3BsdXJhbCcgOiAnc2luZ3VsYXInKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGZpZWxkO1xuICB9O1xuXG4gIF9wcm90by5nZXRSb290RmllbGQgPSBmdW5jdGlvbiBnZXRSb290RmllbGQoZmllbGROYW1lKSB7XG4gICAgdmFyIGZpZWxkID0gdGhpcy5fZ2V0Um9vdEZpZWxkKHRoaXMuX3JlYWRTZWxlY3RvciwgZmllbGROYW1lLCBmYWxzZSk7XG5cbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0b3JhZ2VLZXkoZmllbGQsIHRoaXMuX3JlYWRTZWxlY3Rvci52YXJpYWJsZXMpO1xuICAgIHJldHVybiB0aGlzLmdldE9wZXJhdGlvblJvb3QoKS5nZXRMaW5rZWRSZWNvcmQoc3RvcmFnZUtleSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFBsdXJhbFJvb3RGaWVsZCA9IGZ1bmN0aW9uIGdldFBsdXJhbFJvb3RGaWVsZChmaWVsZE5hbWUpIHtcbiAgICB2YXIgZmllbGQgPSB0aGlzLl9nZXRSb290RmllbGQodGhpcy5fcmVhZFNlbGVjdG9yLCBmaWVsZE5hbWUsIHRydWUpO1xuXG4gICAgdmFyIHN0b3JhZ2VLZXkgPSBnZXRTdG9yYWdlS2V5KGZpZWxkLCB0aGlzLl9yZWFkU2VsZWN0b3IudmFyaWFibGVzKTtcbiAgICByZXR1cm4gdGhpcy5nZXRPcGVyYXRpb25Sb290KCkuZ2V0TGlua2VkUmVjb3JkcyhzdG9yYWdlS2V5KTtcbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZVN0b3JlID0gZnVuY3Rpb24gaW52YWxpZGF0ZVN0b3JlKCkge1xuICAgIHRoaXMuX19yZWNvcmRTb3VyY2UuaW52YWxpZGF0ZVN0b3JlKCk7XG4gIH07XG5cbiAgcmV0dXJuIFJlbGF5UmVjb3JkU291cmNlU2VsZWN0b3JQcm94eTtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheVJlY29yZFNvdXJjZVNlbGVjdG9yUHJveHk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWcgPSByZXF1aXJlKCcuL1JlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZycpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBpc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuLi9zdG9yZS9pc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vcXVlcnkvR3JhcGhRTFRhZycpLFxuICAgIGdldFJlcXVlc3QgPSBfcmVxdWlyZS5nZXRSZXF1ZXN0O1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi4vc3RvcmUvUmVsYXlNb2Rlcm5PcGVyYXRpb25EZXNjcmlwdG9yJyksXG4gICAgY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvciA9IF9yZXF1aXJlMi5jcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yO1xuXG4vKipcbiAqIEhpZ2hlci1sZXZlbCBoZWxwZXIgZnVuY3Rpb24gdG8gZXhlY3V0ZSBhIG11dGF0aW9uIGFnYWluc3QgYSBzcGVjaWZpY1xuICogZW52aXJvbm1lbnQuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5T3B0aW1pc3RpY011dGF0aW9uKGVudmlyb25tZW50LCBjb25maWcpIHtcbiAgIWlzUmVsYXlNb2Rlcm5FbnZpcm9ubWVudChlbnZpcm9ubWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdjb21taXRNdXRhdGlvbjogZXhwZWN0ZWQgYGVudmlyb25tZW50YCB0byBiZSBhbiBpbnN0YW5jZSBvZiAnICsgJ2BSZWxheU1vZGVybkVudmlyb25tZW50YC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBtdXRhdGlvbiA9IGdldFJlcXVlc3QoY29uZmlnLm11dGF0aW9uKTtcblxuICBpZiAobXV0YXRpb24ucGFyYW1zLm9wZXJhdGlvbktpbmQgIT09ICdtdXRhdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbW1pdE11dGF0aW9uOiBFeHBlY3RlZCBtdXRhdGlvbiBvcGVyYXRpb24nKTtcbiAgfVxuXG4gIHZhciBvcHRpbWlzdGljVXBkYXRlciA9IGNvbmZpZy5vcHRpbWlzdGljVXBkYXRlcjtcbiAgdmFyIGNvbmZpZ3MgPSBjb25maWcuY29uZmlncyxcbiAgICAgIG9wdGltaXN0aWNSZXNwb25zZSA9IGNvbmZpZy5vcHRpbWlzdGljUmVzcG9uc2UsXG4gICAgICB2YXJpYWJsZXMgPSBjb25maWcudmFyaWFibGVzO1xuICB2YXIgb3BlcmF0aW9uID0gY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcihtdXRhdGlvbiwgdmFyaWFibGVzKTtcblxuICBpZiAoY29uZmlncykge1xuICAgIHZhciBfUmVsYXlEZWNsYXJhdGl2ZU11dGEgPSBSZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWcuY29udmVydChjb25maWdzLCBtdXRhdGlvbiwgb3B0aW1pc3RpY1VwZGF0ZXIpO1xuXG4gICAgb3B0aW1pc3RpY1VwZGF0ZXIgPSBfUmVsYXlEZWNsYXJhdGl2ZU11dGEub3B0aW1pc3RpY1VwZGF0ZXI7XG4gIH1cblxuICByZXR1cm4gZW52aXJvbm1lbnQuYXBwbHlNdXRhdGlvbih7XG4gICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgcmVzcG9uc2U6IG9wdGltaXN0aWNSZXNwb25zZSxcbiAgICB1cGRhdGVyOiBvcHRpbWlzdGljVXBkYXRlclxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcHBseU9wdGltaXN0aWNNdXRhdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY29tbWl0TG9jYWxVcGRhdGUoZW52aXJvbm1lbnQsIHVwZGF0ZXIpIHtcbiAgZW52aXJvbm1lbnQuY29tbWl0VXBkYXRlKHVwZGF0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbW1pdExvY2FsVXBkYXRlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKTtcblxudmFyIFJlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZyA9IHJlcXVpcmUoJy4vUmVsYXlEZWNsYXJhdGl2ZU11dGF0aW9uQ29uZmlnJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIGlzUmVsYXlNb2Rlcm5FbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4uL3N0b3JlL2lzUmVsYXlNb2Rlcm5FbnZpcm9ubWVudCcpO1xuXG52YXIgdmFsaWRhdGVNdXRhdGlvbiA9IHJlcXVpcmUoJy4vdmFsaWRhdGVNdXRhdGlvbicpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi9xdWVyeS9HcmFwaFFMVGFnJyksXG4gICAgZ2V0UmVxdWVzdCA9IF9yZXF1aXJlLmdldFJlcXVlc3Q7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuLi9zdG9yZS9DbGllbnRJRCcpLFxuICAgIGdlbmVyYXRlVW5pcXVlQ2xpZW50SUQgPSBfcmVxdWlyZTIuZ2VuZXJhdGVVbmlxdWVDbGllbnRJRDtcblxudmFyIF9yZXF1aXJlMyA9IHJlcXVpcmUoJy4uL3N0b3JlL1JlbGF5TW9kZXJuT3BlcmF0aW9uRGVzY3JpcHRvcicpLFxuICAgIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IgPSBfcmVxdWlyZTMuY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcjtcblxuLyoqXG4gKiBIaWdoZXItbGV2ZWwgaGVscGVyIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgYSBtdXRhdGlvbiBhZ2FpbnN0IGEgc3BlY2lmaWNcbiAqIGVudmlyb25tZW50LlxuICovXG5mdW5jdGlvbiBjb21taXRNdXRhdGlvbihlbnZpcm9ubWVudCwgY29uZmlnKSB7XG4gICFpc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQoZW52aXJvbm1lbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnY29tbWl0TXV0YXRpb246IGV4cGVjdGVkIGBlbnZpcm9ubWVudGAgdG8gYmUgYW4gaW5zdGFuY2Ugb2YgJyArICdgUmVsYXlNb2Rlcm5FbnZpcm9ubWVudGAuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgbXV0YXRpb24gPSBnZXRSZXF1ZXN0KGNvbmZpZy5tdXRhdGlvbik7XG5cbiAgaWYgKG11dGF0aW9uLnBhcmFtcy5vcGVyYXRpb25LaW5kICE9PSAnbXV0YXRpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb21taXRNdXRhdGlvbjogRXhwZWN0ZWQgbXV0YXRpb24gb3BlcmF0aW9uJyk7XG4gIH1cblxuICBpZiAobXV0YXRpb24ua2luZCAhPT0gJ1JlcXVlc3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb21taXRNdXRhdGlvbjogRXhwZWN0ZWQgbXV0YXRpb24gdG8gYmUgb2YgdHlwZSByZXF1ZXN0Jyk7XG4gIH1cblxuICB2YXIgb3B0aW1pc3RpY1Jlc3BvbnNlID0gY29uZmlnLm9wdGltaXN0aWNSZXNwb25zZSxcbiAgICAgIG9wdGltaXN0aWNVcGRhdGVyID0gY29uZmlnLm9wdGltaXN0aWNVcGRhdGVyLFxuICAgICAgdXBkYXRlciA9IGNvbmZpZy51cGRhdGVyO1xuICB2YXIgY29uZmlncyA9IGNvbmZpZy5jb25maWdzLFxuICAgICAgY2FjaGVDb25maWcgPSBjb25maWcuY2FjaGVDb25maWcsXG4gICAgICBvbkVycm9yID0gY29uZmlnLm9uRXJyb3IsXG4gICAgICBvblVuc3Vic2NyaWJlID0gY29uZmlnLm9uVW5zdWJzY3JpYmUsXG4gICAgICB2YXJpYWJsZXMgPSBjb25maWcudmFyaWFibGVzLFxuICAgICAgdXBsb2FkYWJsZXMgPSBjb25maWcudXBsb2FkYWJsZXM7XG4gIHZhciBvcGVyYXRpb24gPSBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yKG11dGF0aW9uLCB2YXJpYWJsZXMsIGNhY2hlQ29uZmlnLCBnZW5lcmF0ZVVuaXF1ZUNsaWVudElEKCkpOyAvLyBUT0RPOiByZW1vdmUgdGhpcyBjaGVjayBhZnRlciB3ZSBmaXggZmxvdy5cblxuICBpZiAodHlwZW9mIG9wdGltaXN0aWNSZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGltaXN0aWNSZXNwb25zZSA9IG9wdGltaXN0aWNSZXNwb25zZSgpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdjb21taXRNdXRhdGlvbjogRXhwZWN0ZWQgYG9wdGltaXN0aWNSZXNwb25zZWAgdG8gYmUgYW4gb2JqZWN0LCAnICsgJ3JlY2VpdmVkIGEgZnVuY3Rpb24uJykgOiB2b2lkIDA7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKG9wdGltaXN0aWNSZXNwb25zZSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgdmFsaWRhdGVNdXRhdGlvbihvcHRpbWlzdGljUmVzcG9uc2UsIG11dGF0aW9uLCB2YXJpYWJsZXMpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjb25maWdzKSB7XG4gICAgdmFyIF9SZWxheURlY2xhcmF0aXZlTXV0YSA9IFJlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZy5jb252ZXJ0KGNvbmZpZ3MsIG11dGF0aW9uLCBvcHRpbWlzdGljVXBkYXRlciwgdXBkYXRlcik7XG5cbiAgICBvcHRpbWlzdGljVXBkYXRlciA9IF9SZWxheURlY2xhcmF0aXZlTXV0YS5vcHRpbWlzdGljVXBkYXRlcjtcbiAgICB1cGRhdGVyID0gX1JlbGF5RGVjbGFyYXRpdmVNdXRhLnVwZGF0ZXI7XG4gIH1cblxuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciBzdWJzY3JpcHRpb24gPSBlbnZpcm9ubWVudC5leGVjdXRlTXV0YXRpb24oe1xuICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgIG9wdGltaXN0aWNSZXNwb25zZTogb3B0aW1pc3RpY1Jlc3BvbnNlLFxuICAgIG9wdGltaXN0aWNVcGRhdGVyOiBvcHRpbWlzdGljVXBkYXRlcixcbiAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgIHVwbG9hZGFibGVzOiB1cGxvYWRhYmxlc1xuICB9KS5zdWJzY3JpYmUoe1xuICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQocGF5bG9hZCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGF5bG9hZCkpIHtcbiAgICAgICAgcGF5bG9hZC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgaWYgKGl0ZW0uZXJyb3JzKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaC5hcHBseShlcnJvcnMsICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkoaXRlbS5lcnJvcnMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHBheWxvYWQuZXJyb3JzKSB7XG4gICAgICAgICAgZXJyb3JzLnB1c2guYXBwbHkoZXJyb3JzLCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKHBheWxvYWQuZXJyb3JzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgIHZhciBvbkNvbXBsZXRlZCA9IGNvbmZpZy5vbkNvbXBsZXRlZDtcblxuICAgICAgaWYgKG9uQ29tcGxldGVkKSB7XG4gICAgICAgIHZhciBzbmFwc2hvdCA9IGVudmlyb25tZW50Lmxvb2t1cChvcGVyYXRpb24uZnJhZ21lbnQpO1xuICAgICAgICBvbkNvbXBsZXRlZChzbmFwc2hvdC5kYXRhLCBlcnJvcnMubGVuZ3RoICE9PSAwID8gZXJyb3JzIDogbnVsbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBlcnJvcjogb25FcnJvcixcbiAgICB1bnN1YnNjcmliZTogb25VbnN1YnNjcmliZVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBkaXNwb3NlOiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmVcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb21taXRNdXRhdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3V0aWwvUmVsYXlDb25jcmV0ZU5vZGUnKSxcbiAgICBDT05ESVRJT04gPSBfcmVxdWlyZS5DT05ESVRJT04sXG4gICAgQ0xJRU5UX0NPTVBPTkVOVCA9IF9yZXF1aXJlLkNMSUVOVF9DT01QT05FTlQsXG4gICAgQ0xJRU5UX0VYVEVOU0lPTiA9IF9yZXF1aXJlLkNMSUVOVF9FWFRFTlNJT04sXG4gICAgREVGRVIgPSBfcmVxdWlyZS5ERUZFUixcbiAgICBGTElHSFRfRklFTEQgPSBfcmVxdWlyZS5GTElHSFRfRklFTEQsXG4gICAgRlJBR01FTlRfU1BSRUFEID0gX3JlcXVpcmUuRlJBR01FTlRfU1BSRUFELFxuICAgIElOTElORV9GUkFHTUVOVCA9IF9yZXF1aXJlLklOTElORV9GUkFHTUVOVCxcbiAgICBMSU5LRURfRklFTEQgPSBfcmVxdWlyZS5MSU5LRURfRklFTEQsXG4gICAgTElOS0VEX0hBTkRMRSA9IF9yZXF1aXJlLkxJTktFRF9IQU5ETEUsXG4gICAgTU9EVUxFX0lNUE9SVCA9IF9yZXF1aXJlLk1PRFVMRV9JTVBPUlQsXG4gICAgU0NBTEFSX0ZJRUxEID0gX3JlcXVpcmUuU0NBTEFSX0ZJRUxELFxuICAgIFNDQUxBUl9IQU5ETEUgPSBfcmVxdWlyZS5TQ0FMQVJfSEFORExFLFxuICAgIFNUUkVBTSA9IF9yZXF1aXJlLlNUUkVBTSxcbiAgICBUWVBFX0RJU0NSSU1JTkFUT1IgPSBfcmVxdWlyZS5UWVBFX0RJU0NSSU1JTkFUT1I7XG5cbnZhciB2YWxpZGF0ZU11dGF0aW9uID0gZnVuY3Rpb24gdmFsaWRhdGVNdXRhdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciBhZGRGaWVsZFRvRGlmZiA9IGZ1bmN0aW9uIGFkZEZpZWxkVG9EaWZmKHBhdGgsIGRpZmYsIGlzU2NhbGFyKSB7XG4gICAgdmFyIGRlZXBMb2MgPSBkaWZmO1xuICAgIHBhdGguc3BsaXQoJy4nKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXksIGluZGV4LCBhcnIpIHtcbiAgICAgIGlmIChkZWVwTG9jW2tleV0gPT0gbnVsbCkge1xuICAgICAgICBkZWVwTG9jW2tleV0gPSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU2NhbGFyICYmIGluZGV4ID09PSBhcnIubGVuZ3RoIC0gMSkge1xuICAgICAgICBkZWVwTG9jW2tleV0gPSAnPHNjYWxhcj4nO1xuICAgICAgfVxuXG4gICAgICBkZWVwTG9jID0gZGVlcExvY1trZXldO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhbGlkYXRlTXV0YXRpb24gPSBmdW5jdGlvbiB2YWxpZGF0ZU11dGF0aW9uKG9wdGltaXN0aWNSZXNwb25zZSwgbXV0YXRpb24sIHZhcmlhYmxlcykge1xuICAgIHZhciBvcGVyYXRpb25OYW1lID0gbXV0YXRpb24ub3BlcmF0aW9uLm5hbWU7XG4gICAgdmFyIGNvbnRleHQgPSB7XG4gICAgICBwYXRoOiAnUk9PVCcsXG4gICAgICB2aXNpdGVkUGF0aHM6IG5ldyBTZXQoKSxcbiAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzIHx8IHt9LFxuICAgICAgbWlzc2luZ0RpZmY6IHt9LFxuICAgICAgZXh0cmFEaWZmOiB7fSxcbiAgICAgIG1vZHVsZUltcG9ydFBhdGhzOiBuZXcgU2V0KClcbiAgICB9O1xuICAgIHZhbGlkYXRlU2VsZWN0aW9ucyhvcHRpbWlzdGljUmVzcG9uc2UsIG11dGF0aW9uLm9wZXJhdGlvbi5zZWxlY3Rpb25zLCBjb250ZXh0KTtcbiAgICB2YWxpZGF0ZU9wdGltaXN0aWNSZXNwb25zZShvcHRpbWlzdGljUmVzcG9uc2UsIGNvbnRleHQpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY29udGV4dC5taXNzaW5nRGlmZi5ST09UID09IG51bGwsICdFeHBlY3RlZCBgb3B0aW1pc3RpY1Jlc3BvbnNlYCB0byBtYXRjaCBzdHJ1Y3R1cmUgb2Ygc2VydmVyIHJlc3BvbnNlIGZvciBtdXRhdGlvbiBgJXNgLCBwbGVhc2UgZGVmaW5lIGZpZWxkcyBmb3IgYWxsIG9mXFxuJXMnLCBvcGVyYXRpb25OYW1lLCBKU09OLnN0cmluZ2lmeShjb250ZXh0Lm1pc3NpbmdEaWZmLlJPT1QsIG51bGwsIDIpKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNvbnRleHQuZXh0cmFEaWZmLlJPT1QgPT0gbnVsbCwgJ0V4cGVjdGVkIGBvcHRpbWlzdGljUmVzcG9uc2VgIHRvIG1hdGNoIHN0cnVjdHVyZSBvZiBzZXJ2ZXIgcmVzcG9uc2UgZm9yIG11dGF0aW9uIGAlc2AsIHBsZWFzZSByZW1vdmUgYWxsIGZpZWxkcyBvZlxcbiVzJywgb3BlcmF0aW9uTmFtZSwgSlNPTi5zdHJpbmdpZnkoY29udGV4dC5leHRyYURpZmYuUk9PVCwgbnVsbCwgMikpIDogdm9pZCAwO1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZVNlbGVjdGlvbnMgPSBmdW5jdGlvbiB2YWxpZGF0ZVNlbGVjdGlvbnMob3B0aW1pc3RpY1Jlc3BvbnNlLCBzZWxlY3Rpb25zLCBjb250ZXh0KSB7XG4gICAgc2VsZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZVNlbGVjdGlvbihvcHRpbWlzdGljUmVzcG9uc2UsIHNlbGVjdGlvbiwgY29udGV4dCk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlU2VsZWN0aW9uID0gZnVuY3Rpb24gdmFsaWRhdGVTZWxlY3Rpb24ob3B0aW1pc3RpY1Jlc3BvbnNlLCBzZWxlY3Rpb24sIGNvbnRleHQpIHtcbiAgICBzd2l0Y2ggKHNlbGVjdGlvbi5raW5kKSB7XG4gICAgICBjYXNlIENPTkRJVElPTjpcbiAgICAgICAgdmFsaWRhdGVTZWxlY3Rpb25zKG9wdGltaXN0aWNSZXNwb25zZSwgc2VsZWN0aW9uLnNlbGVjdGlvbnMsIGNvbnRleHQpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgQ0xJRU5UX0NPTVBPTkVOVDpcbiAgICAgIGNhc2UgRlJBR01FTlRfU1BSRUFEOlxuICAgICAgICB2YWxpZGF0ZVNlbGVjdGlvbnMob3B0aW1pc3RpY1Jlc3BvbnNlLCBzZWxlY3Rpb24uZnJhZ21lbnQuc2VsZWN0aW9ucywgY29udGV4dCk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBTQ0FMQVJfRklFTEQ6XG4gICAgICBjYXNlIExJTktFRF9GSUVMRDpcbiAgICAgIGNhc2UgRkxJR0hUX0ZJRUxEOlxuICAgICAgICByZXR1cm4gdmFsaWRhdGVGaWVsZChvcHRpbWlzdGljUmVzcG9uc2UsIHNlbGVjdGlvbiwgY29udGV4dCk7XG5cbiAgICAgIGNhc2UgSU5MSU5FX0ZSQUdNRU5UOlxuICAgICAgICB2YXIgdHlwZSA9IHNlbGVjdGlvbi50eXBlO1xuICAgICAgICB2YXIgaXNDb25jcmV0ZVR5cGUgPSBzZWxlY3Rpb24uYWJzdHJhY3RLZXkgPT0gbnVsbDtcbiAgICAgICAgc2VsZWN0aW9uLnNlbGVjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2VsZWN0aW9uKSB7XG4gICAgICAgICAgaWYgKGlzQ29uY3JldGVUeXBlICYmIG9wdGltaXN0aWNSZXNwb25zZS5fX3R5cGVuYW1lICE9PSB0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFsaWRhdGVTZWxlY3Rpb24ob3B0aW1pc3RpY1Jlc3BvbnNlLCBzdWJzZWxlY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIENMSUVOVF9FWFRFTlNJT046XG4gICAgICAgIHNlbGVjdGlvbi5zZWxlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1YnNlbGVjdGlvbikge1xuICAgICAgICAgIHZhbGlkYXRlU2VsZWN0aW9uKG9wdGltaXN0aWNSZXNwb25zZSwgc3Vic2VsZWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBNT0RVTEVfSU1QT1JUOlxuICAgICAgICByZXR1cm4gdmFsaWRhdGVNb2R1bGVJbXBvcnQoY29udGV4dCk7XG5cbiAgICAgIGNhc2UgTElOS0VEX0hBTkRMRTpcbiAgICAgIGNhc2UgU0NBTEFSX0hBTkRMRTpcbiAgICAgIGNhc2UgREVGRVI6XG4gICAgICBjYXNlIFNUUkVBTTpcbiAgICAgIGNhc2UgVFlQRV9ESVNDUklNSU5BVE9SOlxuICAgICAgICB7XG4gICAgICAgICAgLy8gVE9ETyhUMzU4NjQyOTIpIC0gQWRkIG1pc3NpbmcgdmFsaWRhdGlvbnMgZm9yIHRoZXNlIHR5cGVzXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHNlbGVjdGlvbjtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfTtcblxuICB2YXIgdmFsaWRhdGVNb2R1bGVJbXBvcnQgPSBmdW5jdGlvbiB2YWxpZGF0ZU1vZHVsZUltcG9ydChjb250ZXh0KSB7XG4gICAgY29udGV4dC5tb2R1bGVJbXBvcnRQYXRocy5hZGQoY29udGV4dC5wYXRoKTtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGVGaWVsZCA9IGZ1bmN0aW9uIHZhbGlkYXRlRmllbGQob3B0aW1pc3RpY1Jlc3BvbnNlLCBmaWVsZCwgY29udGV4dCkge1xuICAgIHZhciBmaWVsZE5hbWUgPSBmaWVsZC5hbGlhcyB8fCBmaWVsZC5uYW1lO1xuICAgIHZhciBwYXRoID0gXCJcIi5jb25jYXQoY29udGV4dC5wYXRoLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSk7XG4gICAgY29udGV4dC52aXNpdGVkUGF0aHMuYWRkKHBhdGgpO1xuXG4gICAgc3dpdGNoIChmaWVsZC5raW5kKSB7XG4gICAgICBjYXNlIFNDQUxBUl9GSUVMRDpcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob3B0aW1pc3RpY1Jlc3BvbnNlLCBmaWVsZE5hbWUpID09PSBmYWxzZSkge1xuICAgICAgICAgIGFkZEZpZWxkVG9EaWZmKHBhdGgsIGNvbnRleHQubWlzc2luZ0RpZmYsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIExJTktFRF9GSUVMRDpcbiAgICAgICAgdmFyIHNlbGVjdGlvbnMgPSBmaWVsZC5zZWxlY3Rpb25zO1xuXG4gICAgICAgIGlmIChvcHRpbWlzdGljUmVzcG9uc2VbZmllbGROYW1lXSA9PT0gbnVsbCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGltaXN0aWNSZXNwb25zZSwgZmllbGROYW1lKSAmJiBvcHRpbWlzdGljUmVzcG9uc2VbZmllbGROYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpZWxkLnBsdXJhbCkge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGltaXN0aWNSZXNwb25zZVtmaWVsZE5hbWVdKSkge1xuICAgICAgICAgICAgb3B0aW1pc3RpY1Jlc3BvbnNlW2ZpZWxkTmFtZV0uZm9yRWFjaChmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICBpZiAociAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhbGlkYXRlU2VsZWN0aW9ucyhyLCBzZWxlY3Rpb25zLCAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgY29udGV4dCksIHt9LCB7XG4gICAgICAgICAgICAgICAgICBwYXRoOiBwYXRoXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWRkRmllbGRUb0RpZmYocGF0aCwgY29udGV4dC5taXNzaW5nRGlmZik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChvcHRpbWlzdGljUmVzcG9uc2VbZmllbGROYW1lXSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgdmFsaWRhdGVTZWxlY3Rpb25zKG9wdGltaXN0aWNSZXNwb25zZVtmaWVsZE5hbWVdLCBzZWxlY3Rpb25zLCAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgY29udGV4dCksIHt9LCB7XG4gICAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWRkRmllbGRUb0RpZmYocGF0aCwgY29udGV4dC5taXNzaW5nRGlmZik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIGNhc2UgRkxJR0hUX0ZJRUxEOlxuICAgICAgICBpZiAob3B0aW1pc3RpY1Jlc3BvbnNlW2ZpZWxkTmFtZV0gPT09IG51bGwgfHwgaGFzT3duUHJvcGVydHkuY2FsbChvcHRpbWlzdGljUmVzcG9uc2UsIGZpZWxkTmFtZSkgJiYgb3B0aW1pc3RpY1Jlc3BvbnNlW2ZpZWxkTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndmFsaWRhdGVNdXRhdGlvbjogRmxpZ2h0IGZpZWxkcyBhcmUgbm90IGNvbXBhdGlibGUgd2l0aCAnICsgJ29wdGltaXN0aWMgdXBkYXRlcywgYXMgUmVhY3QgZG9lcyBub3QgaGF2ZSB0aGUgY29tcG9uZW50IGNvZGUgJyArICduZWNlc3NhcnkgdG8gcHJvY2VzcyBuZXcgZGF0YSBvbiB0aGUgY2xpZW50LiBJbnN0ZWFkLCB5b3UgJyArICdzaG91bGQgdXBkYXRlIHlvdXIgY29kZSB0byByZXF1aXJlIGEgZnVsbCByZWZldGNoIG9mIHRoZSBGbGlnaHQgJyArICdmaWVsZCBzbyB5b3VyIFVJIGNhbiBiZSB1cGRhdGVkLicpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgdmFsaWRhdGVPcHRpbWlzdGljUmVzcG9uc2UgPSBmdW5jdGlvbiB2YWxpZGF0ZU9wdGltaXN0aWNSZXNwb25zZShvcHRpbWlzdGljUmVzcG9uc2UsIGNvbnRleHQpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpbWlzdGljUmVzcG9uc2UpKSB7XG4gICAgICBvcHRpbWlzdGljUmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiAocikge1xuICAgICAgICBpZiAociBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgIHZhbGlkYXRlT3B0aW1pc3RpY1Jlc3BvbnNlKHIsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhvcHRpbWlzdGljUmVzcG9uc2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW1pc3RpY1Jlc3BvbnNlW2tleV07XG4gICAgICB2YXIgcGF0aCA9IFwiXCIuY29uY2F0KGNvbnRleHQucGF0aCwgXCIuXCIpLmNvbmNhdChrZXkpOyAvLyBpZiBpdCdzIGEgbW9kdWxlIGltcG9ydCBwYXRoIHdlIGRvbid0IGhhdmUgYW4gYXN0IHNvIHdlIGNhbm5vdCB2YWxpZGF0ZSBpdFxuXG4gICAgICBpZiAoY29udGV4dC5tb2R1bGVJbXBvcnRQYXRocy5oYXMocGF0aCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNvbnRleHQudmlzaXRlZFBhdGhzLmhhcyhwYXRoKSkge1xuICAgICAgICBhZGRGaWVsZFRvRGlmZihwYXRoLCBjb250ZXh0LmV4dHJhRGlmZik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgIHZhbGlkYXRlT3B0aW1pc3RpY1Jlc3BvbnNlKHZhbHVlLCAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgY29udGV4dCksIHt9LCB7XG4gICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmFsaWRhdGVNdXRhdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlbGF5T2JzZXJ2YWJsZSA9IHJlcXVpcmUoJy4vUmVsYXlPYnNlcnZhYmxlJyk7XG5cbi8qKlxuICogQ29udmVydHMgYSBGZXRjaEZ1bmN0aW9uIGludG8gYW4gRXhlY3V0ZUZ1bmN0aW9uIGZvciB1c2UgYnkgUmVsYXlOZXR3b3JrLlxuICovXG5mdW5jdGlvbiBjb252ZXJ0RmV0Y2goZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZldGNoKHJlcXVlc3QsIHZhcmlhYmxlcywgY2FjaGVDb25maWcsIHVwbG9hZGFibGVzLCBsb2dSZXF1ZXN0SW5mbykge1xuICAgIHZhciByZXN1bHQgPSBmbihyZXF1ZXN0LCB2YXJpYWJsZXMsIGNhY2hlQ29uZmlnLCB1cGxvYWRhYmxlcywgbG9nUmVxdWVzdEluZm8pOyAvLyBOb3RlOiBXZSBhbGxvdyBGZXRjaEZ1bmN0aW9uIHRvIGRpcmVjdGx5IHJldHVybiBFcnJvciB0byBpbmRpY2F0ZVxuICAgIC8vIGEgZmFpbHVyZSB0byBmZXRjaC4gVG8gYXZvaWQgaGFuZGxpbmcgdGhpcyBzcGVjaWFsIGNhc2UgdGhyb3VnaG91dCB0aGVcbiAgICAvLyBSZWxheSBjb2RlYmFzZSwgaXQgaXMgZXhwbGljaXRseSBoYW5kbGVkIGhlcmUuXG5cbiAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHJldHVybiBSZWxheU9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgIHJldHVybiBzaW5rLmVycm9yKHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVsYXlPYnNlcnZhYmxlLmZyb20ocmVzdWx0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbnZlcnRGZXRjaDogY29udmVydEZldGNoXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vQ29udmVydFRvRXhlY3V0ZUZ1bmN0aW9uJyksXG4gICAgY29udmVydEZldGNoID0gX3JlcXVpcmUuY29udmVydEZldGNoO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIGBOZXR3b3JrYCBpbnRlcmZhY2UgZGVmaW5lZCBpblxuICogYFJlbGF5TmV0d29ya1R5cGVzYCBnaXZlbiBgZmV0Y2hgIGFuZCBgc3Vic2NyaWJlYCBmdW5jdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZShmZXRjaEZuLCBzdWJzY3JpYmUpIHtcbiAgLy8gQ29udmVydCB0byBmdW5jdGlvbnMgdGhhdCByZXR1cm5zIFJlbGF5T2JzZXJ2YWJsZS5cbiAgdmFyIG9ic2VydmVGZXRjaCA9IGNvbnZlcnRGZXRjaChmZXRjaEZuKTtcblxuICBmdW5jdGlvbiBleGVjdXRlKHJlcXVlc3QsIHZhcmlhYmxlcywgY2FjaGVDb25maWcsIHVwbG9hZGFibGVzLCBsb2dSZXF1ZXN0SW5mbykge1xuICAgIGlmIChyZXF1ZXN0Lm9wZXJhdGlvbktpbmQgPT09ICdzdWJzY3JpcHRpb24nKSB7XG4gICAgICAhc3Vic2NyaWJlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlOZXR3b3JrOiBUaGlzIG5ldHdvcmsgbGF5ZXIgZG9lcyBub3Qgc3VwcG9ydCBTdWJzY3JpcHRpb25zLiAnICsgJ1RvIHVzZSBTdWJzY3JpcHRpb25zLCBwcm92aWRlIGEgY3VzdG9tIG5ldHdvcmsgbGF5ZXIuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgISF1cGxvYWRhYmxlcyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TmV0d29yazogQ2Fubm90IHByb3ZpZGUgdXBsb2FkYWJsZXMgd2hpbGUgc3Vic2NyaWJpbmcuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIHN1YnNjcmliZShyZXF1ZXN0LCB2YXJpYWJsZXMsIGNhY2hlQ29uZmlnKTtcbiAgICB9XG5cbiAgICB2YXIgcG9sbEludGVydmFsID0gY2FjaGVDb25maWcucG9sbDtcblxuICAgIGlmIChwb2xsSW50ZXJ2YWwgIT0gbnVsbCkge1xuICAgICAgISF1cGxvYWRhYmxlcyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TmV0d29yazogQ2Fubm90IHByb3ZpZGUgdXBsb2FkYWJsZXMgd2hpbGUgcG9sbGluZy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gb2JzZXJ2ZUZldGNoKHJlcXVlc3QsIHZhcmlhYmxlcywge1xuICAgICAgICBmb3JjZTogdHJ1ZVxuICAgICAgfSkucG9sbChwb2xsSW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIHJldHVybiBvYnNlcnZlRmV0Y2gocmVxdWVzdCwgdmFyaWFibGVzLCBjYWNoZUNvbmZpZywgdXBsb2FkYWJsZXMsIGxvZ1JlcXVlc3RJbmZvKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhlY3V0ZTogZXhlY3V0ZVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiBjcmVhdGVcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc1Byb21pc2UgPSByZXF1aXJlKCcuLi91dGlsL2lzUHJvbWlzZScpO1xuLyoqXG4gKiBBIFN1YnNjcmlwdGlvbiBvYmplY3QgaXMgcmV0dXJuZWQgZnJvbSAuc3Vic2NyaWJlKCksIHdoaWNoIGNhbiBiZVxuICogdW5zdWJzY3JpYmVkIG9yIGNoZWNrZWQgdG8gc2VlIGlmIHRoZSByZXN1bHRpbmcgc3Vic2NyaXB0aW9uIGhhcyBjbG9zZWQuXG4gKi9cblxuXG52YXIgaG9zdFJlcG9ydEVycm9yID0gc3dhbGxvd0Vycm9yO1xuLyoqXG4gKiBMaW1pdGVkIGltcGxlbWVudGF0aW9uIG9mIEVTT2JzZXJ2YWJsZSwgcHJvdmlkaW5nIHRoZSBsaW1pdGVkIHNldCBvZiBiZWhhdmlvclxuICogUmVsYXkgbmV0d29ya2luZyByZXF1aXJlcy5cbiAqXG4gKiBPYnNlcnZhYmxlcyByZXRhaW4gdGhlIGJlbmVmaXQgb2YgY2FsbGJhY2tzIHdoaWNoIGNhbiBiZSBjYWxsZWRcbiAqIHN5bmNocm9ub3VzbHksIGF2b2lkaW5nIGFueSBVSSBqaXR0ZXIsIHdoaWxlIHByb3ZpZGluZyBhIGNvbXBvc2l0aW9uYWwgQVBJLFxuICogd2hpY2ggc2ltcGxpZmllcyBsb2dpYyBhbmQgcHJldmVudHMgbWlzaGFuZGxpbmcgb2YgZXJyb3JzIGNvbXBhcmVkIHRvXG4gKiB0aGUgZGlyZWN0IHVzZSBvZiBjYWxsYmFjayBmdW5jdGlvbnMuXG4gKlxuICogRVNPYnNlcnZhYmxlOiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gKi9cblxudmFyIFJlbGF5T2JzZXJ2YWJsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIFJlbGF5T2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoc291cmNlKSB7XG4gICAgcmV0dXJuIG5ldyBSZWxheU9ic2VydmFibGUoc291cmNlKTtcbiAgfSAvLyBVc2UgUmVsYXlPYnNlcnZhYmxlLmNyZWF0ZSgpXG4gIDtcblxuICBmdW5jdGlvbiBSZWxheU9ic2VydmFibGUoc291cmNlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgLy8gRWFybHkgcnVudGltZSBlcnJvcnMgZm9yIGlsbC1mb3JtZWQgc291cmNlcy5cbiAgICAgIGlmICghc291cmNlIHx8IHR5cGVvZiBzb3VyY2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTb3VyY2UgbXVzdCBiZSBhIEZ1bmN0aW9uOiAnICsgU3RyaW5nKHNvdXJjZSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuICAvKipcbiAgICogV2hlbiBhbiBlbWl0dGVkIGVycm9yIGV2ZW50IGlzIG5vdCBoYW5kbGVkIGJ5IGFuIE9ic2VydmVyLCBpdCBpcyByZXBvcnRlZFxuICAgKiB0byB0aGUgaG9zdCBlbnZpcm9ubWVudCAod2hhdCB0aGUgRVNPYnNlcnZhYmxlIHNwZWMgcmVmZXJzIHRvIGFzXG4gICAqIFwiSG9zdFJlcG9ydEVycm9ycygpXCIpLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpbiBkZXZlbG9wbWVudCByZXRocm93cyB0aHJvd24gZXJyb3JzLCBhbmRcbiAgICogbG9ncyBlbWl0dGVkIGVycm9yIGV2ZW50cyB0byB0aGUgY29uc29sZSwgd2hpbGUgaW4gcHJvZHVjdGlvbiBkb2VzIG5vdGhpbmdcbiAgICogKHN3YWxsb3dpbmcgdW5oYW5kbGVkIGVycm9ycykuXG4gICAqXG4gICAqIENhbGxlZCBkdXJpbmcgYXBwbGljYXRpb24gaW5pdGlhbGl6YXRpb24sIHRoaXMgbWV0aG9kIGFsbG93c1xuICAgKiBhcHBsaWNhdGlvbi1zcGVjaWZpYyBoYW5kbGluZyBvZiB1bmhhbmRsZWQgZXJyb3JzLiBBbGxvd2luZywgZm9yIGV4YW1wbGUsXG4gICAqIGludGVncmF0aW9uIHdpdGggZXJyb3IgbG9nZ2luZyBvciBkZXZlbG9wZXIgdG9vbHMuXG4gICAqXG4gICAqIEEgc2Vjb25kIHBhcmFtZXRlciBgaXNVbmNhdWdodFRocm93bkVycm9yYCBpcyB0cnVlIHdoZW4gdGhlIHVuaGFuZGxlZCBlcnJvclxuICAgKiB3YXMgdGhyb3duIHdpdGhpbiBhbiBPYnNlcnZlciBoYW5kbGVyLCBhbmQgZmFsc2Ugd2hlbiB0aGUgdW5oYW5kbGVkIGVycm9yXG4gICAqIHdhcyBhbiB1bmhhbmRsZWQgZW1pdHRlZCBldmVudC5cbiAgICpcbiAgICogIC0gVW5jYXVnaHQgdGhyb3duIGVycm9ycyB0eXBpY2FsbHkgcmVwcmVzZW50IGF2b2lkYWJsZSBlcnJvcnMgdGhyb3duIGZyb21cbiAgICogICAgYXBwbGljYXRpb24gY29kZSwgd2hpY2ggc2hvdWxkIGJlIGhhbmRsZWQgd2l0aCBhIHRyeS9jYXRjaCBibG9jaywgYW5kXG4gICAqICAgIHVzdWFsbHkgaGF2ZSB1c2VmdWwgc3RhY2sgdHJhY2VzLlxuICAgKlxuICAgKiAgLSBVbmhhbmRsZWQgZW1pdHRlZCBldmVudCBlcnJvcnMgdHlwaWNhbGx5IHJlcHJlc2VudCB1bmF2b2lkYWJsZSBldmVudHMgaW5cbiAgICogICAgYXBwbGljYXRpb24gZmxvdyBzdWNoIGFzIG5ldHdvcmsgZmFpbHVyZSwgYW5kIG1heSBub3QgaGF2ZSB1c2VmdWxcbiAgICogICAgc3RhY2sgdHJhY2VzLlxuICAgKi9cblxuXG4gIFJlbGF5T2JzZXJ2YWJsZS5vblVuaGFuZGxlZEVycm9yID0gZnVuY3Rpb24gb25VbmhhbmRsZWRFcnJvcihjYWxsYmFjaykge1xuICAgIGhvc3RSZXBvcnRFcnJvciA9IGNhbGxiYWNrO1xuICB9XG4gIC8qKlxuICAgKiBBY2NlcHRzIHZhcmlvdXMga2luZHMgb2YgZGF0YSBzb3VyY2VzLCBhbmQgYWx3YXlzIHJldHVybnMgYSBSZWxheU9ic2VydmFibGVcbiAgICogdXNlZnVsIGZvciBhY2NlcHRpbmcgdGhlIHJlc3VsdCBvZiBhIHVzZXItcHJvdmlkZWQgRmV0Y2hGdW5jdGlvbi5cbiAgICovXG4gIDtcblxuICBSZWxheU9ic2VydmFibGUuZnJvbSA9IGZ1bmN0aW9uIGZyb20ob2JqKSB7XG4gICAgcmV0dXJuIGlzT2JzZXJ2YWJsZShvYmopID8gZnJvbU9ic2VydmFibGUob2JqKSA6IGlzUHJvbWlzZShvYmopID8gZnJvbVByb21pc2Uob2JqKSA6IGZyb21WYWx1ZShvYmopO1xuICB9XG4gIC8qKlxuICAgKiBTaW1pbGFyIHRvIHByb21pc2UuY2F0Y2goKSwgb2JzZXJ2YWJsZS5jYXRjaCgpIGhhbmRsZXMgZXJyb3IgZXZlbnRzLCBhbmRcbiAgICogcHJvdmlkZXMgYW4gYWx0ZXJuYXRpdmUgb2JzZXJ2YWJsZSB0byB1c2UgaW4gaXQncyBwbGFjZS5cbiAgICpcbiAgICogSWYgdGhlIGNhdGNoIGhhbmRsZXIgdGhyb3dzIGEgbmV3IGVycm9yLCBpdCB3aWxsIGFwcGVhciBhcyBhbiBlcnJvciBldmVudFxuICAgKiBvbiB0aGUgcmVzdWx0aW5nIE9ic2VydmFibGUuXG4gICAqL1xuICA7XG5cbiAgdmFyIF9wcm90byA9IFJlbGF5T2JzZXJ2YWJsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvW1wiY2F0Y2hcIl0gPSBmdW5jdGlvbiBfY2F0Y2goZm4pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlbGF5T2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgIHZhciBzdWJzY3JpcHRpb247XG5cbiAgICAgIF90aGlzLnN1YnNjcmliZSh7XG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChzdWIpIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb24gPSBzdWI7XG4gICAgICAgIH0sXG4gICAgICAgIG5leHQ6IHNpbmsubmV4dCxcbiAgICAgICAgY29tcGxldGU6IHNpbmsuY29tcGxldGUsXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IyKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZuKF9lcnJvcjIpLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChzdWIpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBzdWI7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG5leHQ6IHNpbmsubmV4dCxcbiAgICAgICAgICAgICAgY29tcGxldGU6IHNpbmsuY29tcGxldGUsXG4gICAgICAgICAgICAgIGVycm9yOiBzaW5rLmVycm9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcjIpIHtcbiAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyb3IyLCB0cnVlXG4gICAgICAgICAgICAvKiBpc1VuY2F1Z2h0VGhyb3duRXJyb3IgKi9cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBPYnNlcnZhYmxlIHdoaWNoIGZpcnN0IHlpZWxkcyB2YWx1ZXMgZnJvbSB0aGlzIE9ic2VydmFibGUsXG4gICAqIHRoZW4geWllbGRzIHZhbHVlcyBmcm9tIHRoZSBuZXh0IE9ic2VydmFibGUuIFRoaXMgaXMgdXNlZnVsIGZvciBjaGFpbmluZ1xuICAgKiB0b2dldGhlciBPYnNlcnZhYmxlcyBvZiBmaW5pdGUgbGVuZ3RoLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQobmV4dCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlbGF5T2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgIHZhciBjdXJyZW50O1xuXG4gICAgICBfdGhpczIuc3Vic2NyaWJlKHtcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgIGN1cnJlbnQgPSBzdWJzY3JpcHRpb247XG4gICAgICAgIH0sXG4gICAgICAgIG5leHQ6IHNpbmsubmV4dCxcbiAgICAgICAgZXJyb3I6IHNpbmsuZXJyb3IsXG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICBjdXJyZW50ID0gbmV4dC5zdWJzY3JpYmUoc2luayk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjdXJyZW50ICYmIGN1cnJlbnQudW5zdWJzY3JpYmUoKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgT2JzZXJ2YWJsZSB3aGljaCByZXR1cm5zIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGlzIG9uZSwgYnV0XG4gICAqIG1vZGlmaWVkIHNvIHRoYXQgdGhlIHByb3ZpZGVkIE9ic2VydmVyIGlzIGNhbGxlZCB0byBwZXJmb3JtIGEgc2lkZS1lZmZlY3RzXG4gICAqIGZvciBhbGwgZXZlbnRzIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZS5cbiAgICpcbiAgICogQW55IGVycm9ycyB0aGF0IGFyZSB0aHJvd24gaW4gdGhlIHNpZGUtZWZmZWN0IE9ic2VydmVyIGFyZSB1bmhhbmRsZWQsIGFuZFxuICAgKiBkbyBub3QgYWZmZWN0IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBvciBpdHMgT2JzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgaXMgdXNlZnVsIGZvciB3aGVuIGRlYnVnZ2luZyB5b3VyIE9ic2VydmFibGVzIG9yIHBlcmZvcm1pbmcgb3RoZXJcbiAgICogc2lkZS1lZmZlY3RzIHN1Y2ggYXMgbG9nZ2luZyBvciBwZXJmb3JtYW5jZSBtb25pdG9yaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90b1tcImRvXCJdID0gZnVuY3Rpb24gX2RvKG9ic2VydmVyKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVsYXlPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgICAgdmFyIGJvdGggPSBmdW5jdGlvbiBib3RoKGFjdGlvbikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvYnNlcnZlclthY3Rpb25dICYmIG9ic2VydmVyW2FjdGlvbl0uYXBwbHkob2JzZXJ2ZXIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnJvciwgdHJ1ZVxuICAgICAgICAgICAgLyogaXNVbmNhdWdodFRocm93bkVycm9yICovXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNpbmtbYWN0aW9uXSAmJiBzaW5rW2FjdGlvbl0uYXBwbHkoc2luaywgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczMuc3Vic2NyaWJlKHtcbiAgICAgICAgc3RhcnQ6IGJvdGgoJ3N0YXJ0JyksXG4gICAgICAgIG5leHQ6IGJvdGgoJ25leHQnKSxcbiAgICAgICAgZXJyb3I6IGJvdGgoJ2Vycm9yJyksXG4gICAgICAgIGNvbXBsZXRlOiBib3RoKCdjb21wbGV0ZScpLFxuICAgICAgICB1bnN1YnNjcmliZTogYm90aCgndW5zdWJzY3JpYmUnKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgT2JzZXJ2YWJsZSB3aGljaCByZXR1cm5zIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGlzIG9uZSwgYnV0XG4gICAqIG1vZGlmaWVkIHNvIHRoYXQgdGhlIGZpbmFsbHkgY2FsbGJhY2sgaXMgcGVyZm9ybWVkIGFmdGVyIGNvbXBsZXRpb24sXG4gICAqIHdoZXRoZXIgbm9ybWFsIG9yIGR1ZSB0byBlcnJvciBvciB1bnN1YnNjcmlwdGlvbi5cbiAgICpcbiAgICogVGhpcyBpcyB1c2VmdWwgZm9yIGNsZWFudXAgc3VjaCBhcyByZXNvdXJjZSBmaW5hbGl6YXRpb24uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvW1wiZmluYWxseVwiXSA9IGZ1bmN0aW9uIF9maW5hbGx5KGZuKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVsYXlPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF90aGlzNC5zdWJzY3JpYmUoc2luayk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICBmbigpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBPYnNlcnZhYmxlIHdoaWNoIGlzIGlkZW50aWNhbCB0byB0aGlzIG9uZSwgdW5sZXNzIHRoaXNcbiAgICogT2JzZXJ2YWJsZSBjb21wbGV0ZXMgYmVmb3JlIHlpZWxkaW5nIGFueSB2YWx1ZXMsIGluIHdoaWNoIGNhc2UgdGhlIG5ld1xuICAgKiBPYnNlcnZhYmxlIHdpbGwgeWllbGQgdGhlIHZhbHVlcyBmcm9tIHRoZSBhbHRlcm5hdGUgT2JzZXJ2YWJsZS5cbiAgICpcbiAgICogSWYgdGhpcyBPYnNlcnZhYmxlIGRvZXMgeWllbGQgdmFsdWVzLCB0aGUgYWx0ZXJuYXRlIGlzIG5ldmVyIHN1YnNjcmliZWQgdG8uXG4gICAqXG4gICAqIFRoaXMgaXMgdXNlZnVsIGZvciBzY2VuYXJpb3Mgd2hlcmUgdmFsdWVzIG1heSBjb21lIGZyb20gbXVsdGlwbGUgc291cmNlc1xuICAgKiB3aGljaCBzaG91bGQgYmUgdHJpZWQgaW4gb3JkZXIsIGkuZS4gZnJvbSBhIGNhY2hlIGJlZm9yZSBhIG5ldHdvcmsuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmlmRW1wdHkgPSBmdW5jdGlvbiBpZkVtcHR5KGFsdGVybmF0ZSkge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlbGF5T2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgIHZhciBoYXNWYWx1ZSA9IGZhbHNlO1xuXG4gICAgICB2YXIgY3VycmVudCA9IF90aGlzNS5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICAgIHNpbmsubmV4dCh2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBzaW5rLmVycm9yLFxuICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgICBzaW5rLmNvbXBsZXRlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBhbHRlcm5hdGUuc3Vic2NyaWJlKHNpbmspO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGN1cnJlbnQudW5zdWJzY3JpYmUoKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIE9ic2VydmFibGUncyBwcmltYXJ5IEFQSTogcmV0dXJucyBhbiB1bnN1YnNjcmliYWJsZSBTdWJzY3JpcHRpb24gdG8gdGhlXG4gICAqIHNvdXJjZSBvZiB0aGlzIE9ic2VydmFibGUuXG4gICAqXG4gICAqIE5vdGU6IEEgc2luayBtYXkgYmUgcGFzc2VkIGRpcmVjdGx5IHRvIC5zdWJzY3JpYmUoKSBhcyBpdHMgb2JzZXJ2ZXIsXG4gICAqIGFsbG93aW5nIGZvciBlYXNpbHkgY29tcG9zaW5nIE9ic2VydmFibGVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAvLyBFYXJseSBydW50aW1lIGVycm9ycyBmb3IgaWxsLWZvcm1lZCBvYnNlcnZlcnMuXG4gICAgICBpZiAoIW9ic2VydmVyIHx8IHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYnNlcnZlciBtdXN0IGJlIGFuIE9iamVjdCB3aXRoIGNhbGxiYWNrczogJyArIFN0cmluZyhvYnNlcnZlcikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfc3Vic2NyaWJlKHRoaXMuX3NvdXJjZSwgb2JzZXJ2ZXIpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IE9ic2VydmVyYWJsZSB3aGVyZSBlYWNoIHZhbHVlIGhhcyBiZWVuIHRyYW5zZm9ybWVkIGJ5XG4gICAqIHRoZSBtYXBwaW5nIGZ1bmN0aW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5tYXAgPSBmdW5jdGlvbiBtYXAoZm4pIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIHJldHVybiBSZWxheU9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gX3RoaXM2LnN1YnNjcmliZSh7XG4gICAgICAgIGNvbXBsZXRlOiBzaW5rLmNvbXBsZXRlLFxuICAgICAgICBlcnJvcjogc2luay5lcnJvcixcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgbWFwVmFsdWUgPSBmbih2YWx1ZSk7XG4gICAgICAgICAgICBzaW5rLm5leHQobWFwVmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycm9yLCB0cnVlXG4gICAgICAgICAgICAvKiBpc1VuY2F1Z2h0VGhyb3duRXJyb3IgKi9cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IE9ic2VydmFibGUgd2hlcmUgZWFjaCB2YWx1ZSBpcyByZXBsYWNlZCB3aXRoIGEgbmV3IE9ic2VydmFibGVcbiAgICogYnkgdGhlIG1hcHBpbmcgZnVuY3Rpb24sIHRoZSByZXN1bHRzIG9mIHdoaWNoIHJldHVybmVkIGFzIGEgc2luZ2xlXG4gICAqIG1lcmdlZCBPYnNlcnZhYmxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5tZXJnZU1hcCA9IGZ1bmN0aW9uIG1lcmdlTWFwKGZuKSB7XG4gICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVsYXlPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBbXTtcblxuICAgICAgZnVuY3Rpb24gc3RhcnQoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMuX3N1YiA9IHN1YnNjcmlwdGlvbjtcbiAgICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBzdWJzY3JpcHRpb25zLnNwbGljZShzdWJzY3JpcHRpb25zLmluZGV4T2YodGhpcy5fc3ViKSwgMSk7XG5cbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2luay5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF90aGlzNy5zdWJzY3JpYmUoe1xuICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQodmFsdWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCFzaW5rLmNsb3NlZCkge1xuICAgICAgICAgICAgICBSZWxheU9ic2VydmFibGUuZnJvbShmbih2YWx1ZSkpLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICAgICAgICAgIG5leHQ6IHNpbmsubmV4dCxcbiAgICAgICAgICAgICAgICBlcnJvcjogc2luay5lcnJvcixcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogY29tcGxldGVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyb3IsIHRydWVcbiAgICAgICAgICAgIC8qIGlzVW5jYXVnaHRUaHJvd25FcnJvciAqL1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBzaW5rLmVycm9yLFxuICAgICAgICBjb21wbGV0ZTogY29tcGxldGVcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBzdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1Yikge1xuICAgICAgICAgIHJldHVybiBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN1YnNjcmlwdGlvbnMubGVuZ3RoID0gMDtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgT2JzZXJ2YWJsZSB3aGljaCBmaXJzdCBtaXJyb3JzIHRoaXMgT2JzZXJ2YWJsZSwgdGhlbiB3aGVuIGl0XG4gICAqIGNvbXBsZXRlcywgd2FpdHMgZm9yIGBwb2xsSW50ZXJ2YWxgIG1pbGxpc2Vjb25kcyBiZWZvcmUgcmUtc3Vic2NyaWJpbmcgdG9cbiAgICogdGhpcyBPYnNlcnZhYmxlIGFnYWluLCBsb29waW5nIGluIHRoaXMgbWFubmVyIHVudGlsIHVuc3Vic2NyaWJlZC5cbiAgICpcbiAgICogVGhlIHJldHVybmVkIE9ic2VydmFibGUgbmV2ZXIgY29tcGxldGVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wb2xsID0gZnVuY3Rpb24gcG9sbChwb2xsSW50ZXJ2YWwpIHtcbiAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmICh0eXBlb2YgcG9sbEludGVydmFsICE9PSAnbnVtYmVyJyB8fCBwb2xsSW50ZXJ2YWwgPD0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlbGF5T2JzZXJ2YWJsZTogRXhwZWN0ZWQgcG9sbEludGVydmFsIHRvIGJlIHBvc2l0aXZlLCBnb3Q6ICcgKyBwb2xsSW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBSZWxheU9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uO1xuICAgICAgdmFyIHRpbWVvdXQ7XG5cbiAgICAgIHZhciBwb2xsID0gZnVuY3Rpb24gcG9sbCgpIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uID0gX3RoaXM4LnN1YnNjcmliZSh7XG4gICAgICAgICAgbmV4dDogc2luay5uZXh0LFxuICAgICAgICAgIGVycm9yOiBzaW5rLmVycm9yLFxuICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHBvbGwsIHBvbGxJbnRlcnZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHBvbGwoKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgUHJvbWlzZSB3aGljaCByZXNvbHZlcyB3aGVuIHRoaXMgT2JzZXJ2YWJsZSB5aWVsZHMgYSBmaXJzdCB2YWx1ZVxuICAgKiBvciB3aGVuIGl0IGNvbXBsZXRlcyB3aXRoIG5vIHZhbHVlLlxuICAgKlxuICAgKiBOT1RFOiBUaGUgc291cmNlIE9ic2VydmFibGUgaXMgKk5PVCogY2FuY2VsZWQgd2hlbiB0aGUgcmV0dXJuZWQgUHJvbWlzZVxuICAgKiByZXNvbHZlcy4gVGhlIE9ic2VydmFibGUgaXMgYWx3YXlzIHJ1biB0byBjb21wbGV0aW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1Byb21pc2UgPSBmdW5jdGlvbiB0b1Byb21pc2UoKSB7XG4gICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlc29sdmVkID0gZmFsc2U7XG5cbiAgICAgIF90aGlzOS5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbCkge1xuICAgICAgICAgIGlmICghcmVzb2x2ZWQpIHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlc29sdmUodmFsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUmVsYXlPYnNlcnZhYmxlO1xufSgpOyAvLyBVc2UgZGVjbGFyYXRpb25zIHRvIHRlYWNoIEZsb3cgaG93IHRvIGNoZWNrIGlzT2JzZXJ2YWJsZS5cblxuXG5mdW5jdGlvbiBpc09ic2VydmFibGUob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iai5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGZyb21PYnNlcnZhYmxlKG9iaikge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgUmVsYXlPYnNlcnZhYmxlID8gb2JqIDogUmVsYXlPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgIHJldHVybiBvYmouc3Vic2NyaWJlKHNpbmspO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICByZXR1cm4gUmVsYXlPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgIC8vIFNpbmNlIHNpbmsgbWV0aG9kcyBkbyBub3QgdGhyb3csIHRoZSByZXN1bHRpbmcgUHJvbWlzZSBjYW4gYmUgaWdub3JlZC5cbiAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBzaW5rLm5leHQodmFsdWUpO1xuICAgICAgc2luay5jb21wbGV0ZSgpO1xuICAgIH0sIHNpbmsuZXJyb3IpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZnJvbVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiBSZWxheU9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgc2luay5uZXh0KHZhbHVlKTtcbiAgICBzaW5rLmNvbXBsZXRlKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBfc3Vic2NyaWJlKHNvdXJjZSwgb2JzZXJ2ZXIpIHtcbiAgdmFyIGNsb3NlZCA9IGZhbHNlO1xuICB2YXIgY2xlYW51cDsgLy8gSWRlYWxseSB3ZSB3b3VsZCBzaW1wbHkgZGVzY3JpYmUgYSBgZ2V0IGNsb3NlZCgpYCBtZXRob2Qgb24gdGhlIFNpbmsgYW5kXG4gIC8vIFN1YnNjcmlwdGlvbiBvYmplY3RzIGJlbG93LCBob3dldmVyIG5vdCBhbGwgZmxvdyBlbnZpcm9ubWVudHMgd2UgZXhwZWN0XG4gIC8vIFJlbGF5IHRvIGJlIHVzZWQgd2l0aGluIHdpbGwgc3VwcG9ydCBwcm9wZXJ0eSBnZXR0ZXJzLCBhbmQgbWFueSBtaW5pZmllclxuICAvLyB0b29scyBzdGlsbCBkbyBub3Qgc3VwcG9ydCBFUzUgc3ludGF4LiBJbnN0ZWFkLCB3ZSBjYW4gdXNlIGRlZmluZVByb3BlcnR5LlxuXG4gIHZhciB3aXRoQ2xvc2VkID0gZnVuY3Rpb24gd2l0aENsb3NlZChvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ2Nsb3NlZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gY2xvc2VkO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGRvQ2xlYW51cCgpIHtcbiAgICBpZiAoY2xlYW51cCkge1xuICAgICAgaWYgKGNsZWFudXAudW5zdWJzY3JpYmUpIHtcbiAgICAgICAgY2xlYW51cC51bnN1YnNjcmliZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycm9yLCB0cnVlXG4gICAgICAgICAgLyogaXNVbmNhdWdodFRocm93bkVycm9yICovXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjbGVhbnVwID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSAvLyBDcmVhdGUgYSBTdWJzY3JpcHRpb24uXG5cblxuICB2YXIgc3Vic2NyaXB0aW9uID0gd2l0aENsb3NlZCh7XG4gICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFjbG9zZWQpIHtcbiAgICAgICAgY2xvc2VkID0gdHJ1ZTsgLy8gVGVsbCBPYnNlcnZlciB0aGF0IHVuc3Vic2NyaWJlIHdhcyBjYWxsZWQuXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBvYnNlcnZlci51bnN1YnNjcmliZSAmJiBvYnNlcnZlci51bnN1YnNjcmliZShzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnJvciwgdHJ1ZVxuICAgICAgICAgIC8qIGlzVW5jYXVnaHRUaHJvd25FcnJvciAqL1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgZG9DbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBUZWxsIE9ic2VydmVyIHRoYXQgb2JzZXJ2YXRpb24gaXMgYWJvdXQgdG8gYmVnaW4uXG5cbiAgdHJ5IHtcbiAgICBvYnNlcnZlci5zdGFydCAmJiBvYnNlcnZlci5zdGFydChzdWJzY3JpcHRpb24pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGhvc3RSZXBvcnRFcnJvcihlcnJvciwgdHJ1ZVxuICAgIC8qIGlzVW5jYXVnaHRUaHJvd25FcnJvciAqL1xuICAgICk7XG4gIH0gLy8gSWYgY2xvc2VkIGFscmVhZHksIGRvbid0IGJvdGhlciBjcmVhdGluZyBhIFNpbmsuXG5cblxuICBpZiAoY2xvc2VkKSB7XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgfSAvLyBDcmVhdGUgYSBTaW5rIHJlc3BlY3Rpbmcgc3Vic2NyaXB0aW9uIHN0YXRlIGFuZCBjbGVhbnVwLlxuXG5cbiAgdmFyIHNpbmsgPSB3aXRoQ2xvc2VkKHtcbiAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgICBpZiAoIWNsb3NlZCAmJiBvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycm9yLCB0cnVlXG4gICAgICAgICAgLyogaXNVbmNhdWdodFRocm93bkVycm9yICovXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKF9lcnJvcjMsIGlzVW5jYXVnaHRUaHJvd25FcnJvcikge1xuICAgICAgaWYgKGNsb3NlZCB8fCAhb2JzZXJ2ZXIuZXJyb3IpIHtcbiAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgaG9zdFJlcG9ydEVycm9yKF9lcnJvcjMsIGlzVW5jYXVnaHRUaHJvd25FcnJvciB8fCBmYWxzZSk7XG4gICAgICAgIGRvQ2xlYW51cCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xvc2VkID0gdHJ1ZTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIG9ic2VydmVyLmVycm9yKF9lcnJvcjMpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcjIpIHtcbiAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyb3IyLCB0cnVlXG4gICAgICAgICAgLyogaXNVbmNhdWdodFRocm93bkVycm9yICovXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBkb0NsZWFudXAoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgaWYgKCFjbG9zZWQpIHtcbiAgICAgICAgY2xvc2VkID0gdHJ1ZTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlICYmIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycm9yLCB0cnVlXG4gICAgICAgICAgLyogaXNVbmNhdWdodFRocm93bkVycm9yICovXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBkb0NsZWFudXAoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7IC8vIElmIGFueXRoaW5nIGdvZXMgd3JvbmcgZHVyaW5nIG9ic2VydmluZyB0aGUgc291cmNlLCBoYW5kbGUgdGhlIGVycm9yLlxuXG4gIHRyeSB7XG4gICAgY2xlYW51cCA9IHNvdXJjZShzaW5rKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBzaW5rLmVycm9yKGVycm9yLCB0cnVlXG4gICAgLyogaXNVbmNhdWdodFRocm93bkVycm9yICovXG4gICAgKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBFYXJseSBydW50aW1lIGVycm9ycyBmb3IgaWxsLWZvcm1lZCByZXR1cm5lZCBjbGVhbnVwLlxuICAgIGlmIChjbGVhbnVwICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGNsZWFudXAgIT09ICdmdW5jdGlvbicgJiYgKCFjbGVhbnVwIHx8IHR5cGVvZiBjbGVhbnVwLnVuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXR1cm5lZCBjbGVhbnVwIGZ1bmN0aW9uIHdoaWNoIGNhbm5vdCBiZSBjYWxsZWQ6ICcgKyBTdHJpbmcoY2xlYW51cCkpO1xuICAgIH1cbiAgfSAvLyBJZiBjbG9zZWQgYmVmb3JlIHRoZSBzb3VyY2UgZnVuY3Rpb24gZXhpc3RlZCwgY2xlYW51cCBub3cuXG5cblxuICBpZiAoY2xvc2VkKSB7XG4gICAgZG9DbGVhbnVwKCk7XG4gIH1cblxuICByZXR1cm4gc3Vic2NyaXB0aW9uO1xufVxuXG5mdW5jdGlvbiBzd2FsbG93RXJyb3IoX2Vycm9yLCBfaXNVbmNhdWdodFRocm93bkVycm9yKSB7Ly8gZG8gbm90aGluZy5cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAvLyBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIEhvc3RSZXBvcnRFcnJvcnMoKSBpbiBkZXZlbG9wbWVudCBidWlsZHMuXG4gIC8vIENhbiBiZSByZXBsYWNlZCBieSB0aGUgaG9zdCBhcHBsaWNhdGlvbiBlbnZpcm9ubWVudC5cbiAgUmVsYXlPYnNlcnZhYmxlLm9uVW5oYW5kbGVkRXJyb3IoZnVuY3Rpb24gKGVycm9yLCBpc1VuY2F1Z2h0VGhyb3duRXJyb3IpIHtcbiAgICBpZiAodHlwZW9mIGZhaWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEluIHRlc3QgZW52aXJvbm1lbnRzIChKZXN0KSwgZmFpbCgpIGltbWVkaWF0ZWx5IGZhaWxzIHRoZSBjdXJyZW50IHRlc3QuXG4gICAgICBmYWlsKFN0cmluZyhlcnJvcikpO1xuICAgIH0gZWxzZSBpZiAoaXNVbmNhdWdodFRocm93bkVycm9yKSB7XG4gICAgICAvLyBSZXRocm93IHVuY2F1Z2h0IHRocm93biBlcnJvcnMgb24gdGhlIG5leHQgZnJhbWUgdG8gYXZvaWQgYnJlYWtpbmdcbiAgICAgIC8vIGN1cnJlbnQgbG9naWMuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gT3RoZXJ3aXNlLCBsb2cgdGhlIHVuaGFuZGxlZCBlcnJvciBmb3IgdmlzaWJpbGl0eS5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLmVycm9yKCdSZWxheU9ic2VydmFibGU6IFVuaGFuZGxlZCBFcnJvcicsIGVycm9yKTtcbiAgICB9XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5T2JzZXJ2YWJsZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHN0YWJsZUNvcHkgPSByZXF1aXJlKCcuLi91dGlsL3N0YWJsZUNvcHknKTtcblxuLyoqXG4gKiBBIGNhY2hlIGZvciBzdG9yaW5nIHF1ZXJ5IHJlc3BvbnNlcywgZmVhdHVyaW5nOlxuICogLSBgZ2V0YCB3aXRoIFRUTFxuICogLSBjYWNoZSBzaXplIGxpbWl0aW5nLCB3aXRoIGxlYXN0LXJlY2VudGx5ICp1cGRhdGVkKiBlbnRyaWVzIHB1cmdlZCBmaXJzdFxuICovXG52YXIgUmVsYXlRdWVyeVJlc3BvbnNlQ2FjaGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWxheVF1ZXJ5UmVzcG9uc2VDYWNoZShfcmVmKSB7XG4gICAgdmFyIHNpemUgPSBfcmVmLnNpemUsXG4gICAgICAgIHR0bCA9IF9yZWYudHRsO1xuICAgICEoc2l6ZSA+IDApID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlRdWVyeVJlc3BvbnNlQ2FjaGU6IEV4cGVjdGVkIHRoZSBtYXggY2FjaGUgc2l6ZSB0byBiZSA+IDAsIGdvdCAnICsgJ2Alc2AuJywgc2l6ZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEodHRsID4gMCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVF1ZXJ5UmVzcG9uc2VDYWNoZTogRXhwZWN0ZWQgdGhlIG1heCB0dGwgdG8gYmUgPiAwLCBnb3QgYCVzYC4nLCB0dGwpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB0aGlzLl9yZXNwb25zZXMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fc2l6ZSA9IHNpemU7XG4gICAgdGhpcy5fdHRsID0gdHRsO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlbGF5UXVlcnlSZXNwb25zZUNhY2hlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLl9yZXNwb25zZXMuY2xlYXIoKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KHF1ZXJ5SUQsIHZhcmlhYmxlcykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgY2FjaGVLZXkgPSBnZXRDYWNoZUtleShxdWVyeUlELCB2YXJpYWJsZXMpO1xuXG4gICAgdGhpcy5fcmVzcG9uc2VzLmZvckVhY2goZnVuY3Rpb24gKHJlc3BvbnNlLCBrZXkpIHtcbiAgICAgIGlmICghaXNDdXJyZW50KHJlc3BvbnNlLmZldGNoVGltZSwgX3RoaXMuX3R0bCkpIHtcbiAgICAgICAgX3RoaXMuX3Jlc3BvbnNlc1tcImRlbGV0ZVwiXShrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlc3BvbnNlID0gdGhpcy5fcmVzcG9uc2VzLmdldChjYWNoZUtleSk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2UgIT0gbnVsbCA/IC8vICRGbG93Rml4TWVbc3BlY3VsYXRpb24tYW1iaWd1b3VzXVxuICAgICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCByZXNwb25zZS5wYXlsb2FkKSwge30sIHtcbiAgICAgIGV4dGVuc2lvbnM6ICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCByZXNwb25zZS5wYXlsb2FkLmV4dGVuc2lvbnMpLCB7fSwge1xuICAgICAgICBjYWNoZVRpbWVzdGFtcDogcmVzcG9uc2UuZmV0Y2hUaW1lXG4gICAgICB9KVxuICAgIH0pIDogbnVsbDtcbiAgfTtcblxuICBfcHJvdG8uc2V0ID0gZnVuY3Rpb24gc2V0KHF1ZXJ5SUQsIHZhcmlhYmxlcywgcGF5bG9hZCkge1xuICAgIHZhciBmZXRjaFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHZhciBjYWNoZUtleSA9IGdldENhY2hlS2V5KHF1ZXJ5SUQsIHZhcmlhYmxlcyk7XG5cbiAgICB0aGlzLl9yZXNwb25zZXNbXCJkZWxldGVcIl0oY2FjaGVLZXkpOyAvLyBkZWxldGlvbiByZXNldHMga2V5IG9yZGVyaW5nXG5cblxuICAgIHRoaXMuX3Jlc3BvbnNlcy5zZXQoY2FjaGVLZXksIHtcbiAgICAgIGZldGNoVGltZTogZmV0Y2hUaW1lLFxuICAgICAgcGF5bG9hZDogcGF5bG9hZFxuICAgIH0pOyAvLyBQdXJnZSBsZWFzdC1yZWNlbnRseSB1cGRhdGVkIGtleSB3aGVuIG1heCBzaXplIHJlYWNoZWRcblxuXG4gICAgaWYgKHRoaXMuX3Jlc3BvbnNlcy5zaXplID4gdGhpcy5fc2l6ZSkge1xuICAgICAgdmFyIGZpcnN0S2V5ID0gdGhpcy5fcmVzcG9uc2VzLmtleXMoKS5uZXh0KCk7XG5cbiAgICAgIGlmICghZmlyc3RLZXkuZG9uZSkge1xuICAgICAgICB0aGlzLl9yZXNwb25zZXNbXCJkZWxldGVcIl0oZmlyc3RLZXkudmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVsYXlRdWVyeVJlc3BvbnNlQ2FjaGU7XG59KCk7XG5cbmZ1bmN0aW9uIGdldENhY2hlS2V5KHF1ZXJ5SUQsIHZhcmlhYmxlcykge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RhYmxlQ29weSh7XG4gICAgcXVlcnlJRDogcXVlcnlJRCxcbiAgICB2YXJpYWJsZXM6IHZhcmlhYmxlc1xuICB9KSk7XG59XG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIGEgcmVzcG9uc2UgZmV0Y2hlZCBhdCBgZmV0Y2hUaW1lYCBpcyBzdGlsbCB2YWxpZCBnaXZlblxuICogc29tZSBgdHRsYC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzQ3VycmVudChmZXRjaFRpbWUsIHR0bCkge1xuICByZXR1cm4gZmV0Y2hUaW1lICsgdHRsID49IERhdGUubm93KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVsYXlRdWVyeVJlc3BvbnNlQ2FjaGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWxheUNvbmNyZXRlTm9kZSA9IHJlcXVpcmUoJy4uL3V0aWwvUmVsYXlDb25jcmV0ZU5vZGUnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG4vKipcbiAqIFJ1bnRpbWUgZnVuY3Rpb24gdG8gY29ycmVzcG9uZCB0byB0aGUgYGdyYXBocWxgIHRhZ2dlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAqIEFsbCBjYWxscyB0byB0aGlzIGZ1bmN0aW9uIHNob3VsZCBiZSB0cmFuc2Zvcm1lZCBieSB0aGUgcGx1Z2luLlxuICovXG5mdW5jdGlvbiBncmFwaHFsKHN0cmluZ3MpIHtcbiAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnZ3JhcGhxbDogVW5leHBlY3RlZCBpbnZvY2F0aW9uIGF0IHJ1bnRpbWUuIEVpdGhlciB0aGUgQmFiZWwgdHJhbnNmb3JtICcgKyAnd2FzIG5vdCBzZXQgdXAsIG9yIGl0IGZhaWxlZCB0byBpZGVudGlmeSB0aGlzIGNhbGwgc2l0ZS4gTWFrZSBzdXJlIGl0ICcgKyAnaXMgYmVpbmcgdXNlZCB2ZXJiYXRpbSBhcyBgZ3JhcGhxbGAuIE5vdGUgYWxzbyB0aGF0IHRoZXJlIGNhbm5vdCBiZSAnICsgJ2Egc3BhY2UgYmV0d2VlbiBncmFwaHFsIGFuZCB0aGUgYmFja3RpY2sgdGhhdCBmb2xsb3dzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9kZSh0YWdnZWROb2RlKSB7XG4gIHZhciBub2RlID0gdGFnZ2VkTm9kZTtcblxuICBpZiAodHlwZW9mIG5vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBub2RlID0gbm9kZSgpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdSZWxheUdyYXBoUUxUYWc6IG5vZGUgYCVzYCB1bmV4cGVjdGVkbHkgd3JhcHBlZCBpbiBhIGZ1bmN0aW9uLicsIG5vZGUua2luZCA9PT0gJ0ZyYWdtZW50JyA/IG5vZGUubmFtZSA6IG5vZGUub3BlcmF0aW9uLm5hbWUpIDogdm9pZCAwO1xuICB9IGVsc2UgaWYgKG5vZGVbXCJkZWZhdWx0XCJdKSB7XG4gICAgLy8gU3VwcG9ydCBmb3IgbGFuZ3VhZ2VzIHRoYXQgd29yayAoYmVzdCkgd2l0aCBFUzYgbW9kdWxlcywgc3VjaCBhcyBUeXBlU2NyaXB0LlxuICAgIG5vZGUgPSBub2RlW1wiZGVmYXVsdFwiXTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBpc0ZyYWdtZW50KG5vZGUpIHtcbiAgdmFyIGZyYWdtZW50ID0gZ2V0Tm9kZShub2RlKTtcbiAgcmV0dXJuIHR5cGVvZiBmcmFnbWVudCA9PT0gJ29iamVjdCcgJiYgZnJhZ21lbnQgIT09IG51bGwgJiYgZnJhZ21lbnQua2luZCA9PT0gUmVsYXlDb25jcmV0ZU5vZGUuRlJBR01FTlQ7XG59XG5cbmZ1bmN0aW9uIGlzUmVxdWVzdChub2RlKSB7XG4gIHZhciByZXF1ZXN0ID0gZ2V0Tm9kZShub2RlKTtcbiAgcmV0dXJuIHR5cGVvZiByZXF1ZXN0ID09PSAnb2JqZWN0JyAmJiByZXF1ZXN0ICE9PSBudWxsICYmIHJlcXVlc3Qua2luZCA9PT0gUmVsYXlDb25jcmV0ZU5vZGUuUkVRVUVTVDtcbn1cblxuZnVuY3Rpb24gaXNJbmxpbmVEYXRhRnJhZ21lbnQobm9kZSkge1xuICB2YXIgZnJhZ21lbnQgPSBnZXROb2RlKG5vZGUpO1xuICByZXR1cm4gdHlwZW9mIGZyYWdtZW50ID09PSAnb2JqZWN0JyAmJiBmcmFnbWVudCAhPT0gbnVsbCAmJiBmcmFnbWVudC5raW5kID09PSBSZWxheUNvbmNyZXRlTm9kZS5JTkxJTkVfREFUQV9GUkFHTUVOVDtcbn1cblxuZnVuY3Rpb24gZ2V0RnJhZ21lbnQodGFnZ2VkTm9kZSkge1xuICB2YXIgZnJhZ21lbnQgPSBnZXROb2RlKHRhZ2dlZE5vZGUpO1xuICAhaXNGcmFnbWVudChmcmFnbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdHcmFwaFFMVGFnOiBFeHBlY3RlZCBhIGZyYWdtZW50LCBnb3QgYCVzYC4nLCBKU09OLnN0cmluZ2lmeShmcmFnbWVudCkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGZyYWdtZW50O1xufVxuXG5mdW5jdGlvbiBnZXRQYWdpbmF0aW9uRnJhZ21lbnQodGFnZ2VkTm9kZSkge1xuICB2YXIgX2ZyYWdtZW50JG1ldGFkYXRhO1xuXG4gIHZhciBmcmFnbWVudCA9IGdldEZyYWdtZW50KHRhZ2dlZE5vZGUpO1xuICB2YXIgcmVmZXRjaCA9IChfZnJhZ21lbnQkbWV0YWRhdGEgPSBmcmFnbWVudC5tZXRhZGF0YSkgPT09IG51bGwgfHwgX2ZyYWdtZW50JG1ldGFkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZnJhZ21lbnQkbWV0YWRhdGEucmVmZXRjaDtcbiAgdmFyIGNvbm5lY3Rpb24gPSByZWZldGNoID09PSBudWxsIHx8IHJlZmV0Y2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlZmV0Y2guY29ubmVjdGlvbjtcblxuICBpZiAocmVmZXRjaCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVmZXRjaCAhPT0gJ29iamVjdCcgfHwgY29ubmVjdGlvbiA9PT0gbnVsbCB8fCB0eXBlb2YgY29ubmVjdGlvbiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBmcmFnbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0UmVmZXRjaGFibGVGcmFnbWVudCh0YWdnZWROb2RlKSB7XG4gIHZhciBfZnJhZ21lbnQkbWV0YWRhdGEyO1xuXG4gIHZhciBmcmFnbWVudCA9IGdldEZyYWdtZW50KHRhZ2dlZE5vZGUpO1xuICB2YXIgcmVmZXRjaCA9IChfZnJhZ21lbnQkbWV0YWRhdGEyID0gZnJhZ21lbnQubWV0YWRhdGEpID09PSBudWxsIHx8IF9mcmFnbWVudCRtZXRhZGF0YTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mcmFnbWVudCRtZXRhZGF0YTIucmVmZXRjaDtcblxuICBpZiAocmVmZXRjaCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVmZXRjaCAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBmcmFnbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0UmVxdWVzdCh0YWdnZWROb2RlKSB7XG4gIHZhciByZXF1ZXN0ID0gZ2V0Tm9kZSh0YWdnZWROb2RlKTtcbiAgIWlzUmVxdWVzdChyZXF1ZXN0KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0dyYXBoUUxUYWc6IEV4cGVjdGVkIGEgcmVxdWVzdCwgZ290IGAlc2AuJywgSlNPTi5zdHJpbmdpZnkocmVxdWVzdCkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJlcXVlc3Q7XG59XG5cbmZ1bmN0aW9uIGdldElubGluZURhdGFGcmFnbWVudCh0YWdnZWROb2RlKSB7XG4gIHZhciBmcmFnbWVudCA9IGdldE5vZGUodGFnZ2VkTm9kZSk7XG4gICFpc0lubGluZURhdGFGcmFnbWVudChmcmFnbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdHcmFwaFFMVGFnOiBFeHBlY3RlZCBhbiBpbmxpbmUgZGF0YSBmcmFnbWVudCwgZ290IGAlc2AuJywgSlNPTi5zdHJpbmdpZnkoZnJhZ21lbnQpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBmcmFnbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEZyYWdtZW50OiBnZXRGcmFnbWVudCxcbiAgZ2V0Tm9kZTogZ2V0Tm9kZSxcbiAgZ2V0UGFnaW5hdGlvbkZyYWdtZW50OiBnZXRQYWdpbmF0aW9uRnJhZ21lbnQsXG4gIGdldFJlZmV0Y2hhYmxlRnJhZ21lbnQ6IGdldFJlZmV0Y2hhYmxlRnJhZ21lbnQsXG4gIGdldFJlcXVlc3Q6IGdldFJlcXVlc3QsXG4gIGdldElubGluZURhdGFGcmFnbWVudDogZ2V0SW5saW5lRGF0YUZyYWdtZW50LFxuICBncmFwaHFsOiBncmFwaHFsLFxuICBpc0ZyYWdtZW50OiBpc0ZyYWdtZW50LFxuICBpc1JlcXVlc3Q6IGlzUmVxdWVzdCxcbiAgaXNJbmxpbmVEYXRhRnJhZ21lbnQ6IGlzSW5saW5lRGF0YUZyYWdtZW50XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQcmVsb2FkYWJsZVF1ZXJ5UmVnaXN0cnkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcmVsb2FkYWJsZVF1ZXJ5UmVnaXN0cnkoKSB7XG4gICAgdGhpcy5fcHJlbG9hZGFibGVRdWVyaWVzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX2NhbGxiYWNrcyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBQcmVsb2FkYWJsZVF1ZXJ5UmVnaXN0cnkucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXQgPSBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHRoaXMuX3ByZWxvYWRhYmxlUXVlcmllcy5zZXQoa2V5LCB2YWx1ZSk7XG5cbiAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzLmdldChrZXkpO1xuXG4gICAgaWYgKGNhbGxiYWNrcyAhPSBudWxsKSB7XG4gICAgICBjYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjYih2YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBXZSBkbyAqbm90KiB3YW50IHRvIHRocm93IGluIHRoaXMgdGljaywgYXMgdGhpcyBjYWxsYmFjayBpcyBleGVjdXRlZFxuICAgICAgICAgIC8vIHdoaWxlIGEgcXVlcnkgaXMgcmVxdWlyZWQgZm9yIHRoZSB2ZXJ5IGZpcnN0IHRpbWUuXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJlbG9hZGFibGVRdWVyaWVzLmdldChrZXkpO1xuICB9O1xuXG4gIF9wcm90by5vbkxvYWQgPSBmdW5jdGlvbiBvbkxvYWQoa2V5LCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyRfY2FsbGJhY2tzJGdldDtcblxuICAgIHZhciBjYWxsYmFja3MgPSAoX3RoaXMkX2NhbGxiYWNrcyRnZXQgPSB0aGlzLl9jYWxsYmFja3MuZ2V0KGtleSkpICE9PSBudWxsICYmIF90aGlzJF9jYWxsYmFja3MkZ2V0ICE9PSB2b2lkIDAgPyBfdGhpcyRfY2FsbGJhY2tzJGdldCA6IG5ldyBTZXQoKTtcbiAgICBjYWxsYmFja3MuYWRkKGNhbGxiYWNrKTtcblxuICAgIHZhciBkaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIGNhbGxiYWNrc1tcImRlbGV0ZVwiXShjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIHRoaXMuX2NhbGxiYWNrcy5zZXQoa2V5LCBjYWxsYmFja3MpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3Bvc2U6IGRpc3Bvc2VcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuX3ByZWxvYWRhYmxlUXVlcmllcy5jbGVhcigpO1xuICB9O1xuXG4gIHJldHVybiBQcmVsb2FkYWJsZVF1ZXJ5UmVnaXN0cnk7XG59KCk7XG5cbnZhciBwcmVsb2FkYWJsZVF1ZXJ5UmVnaXN0cnkgPSBuZXcgUHJlbG9hZGFibGVRdWVyeVJlZ2lzdHJ5KCk7XG5tb2R1bGUuZXhwb3J0cyA9IHByZWxvYWRhYmxlUXVlcnlSZWdpc3RyeTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgUmVsYXlPYnNlcnZhYmxlID0gcmVxdWlyZSgnLi4vbmV0d29yay9SZWxheU9ic2VydmFibGUnKTtcblxudmFyIGZldGNoUXVlcnlJbnRlcm5hbCA9IHJlcXVpcmUoJy4vZmV0Y2hRdWVyeUludGVybmFsJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHJlcG9ydE1pc3NpbmdSZXF1aXJlZEZpZWxkcyA9IHJlcXVpcmUoJy4uL3V0aWwvcmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzJyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3N0b3JlL1JlbGF5TW9kZXJuT3BlcmF0aW9uRGVzY3JpcHRvcicpLFxuICAgIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IgPSBfcmVxdWlyZS5jcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9HcmFwaFFMVGFnJyksXG4gICAgZ2V0UmVxdWVzdCA9IF9yZXF1aXJlMi5nZXRSZXF1ZXN0O1xuXG4vKipcbiAqIEZldGNoZXMgdGhlIGdpdmVuIHF1ZXJ5IGFuZCB2YXJpYWJsZXMgb24gdGhlIHByb3ZpZGVkIGVudmlyb25tZW50LFxuICogYW5kIGRlLWR1cGVzIGlkZW50aWNhbCBpbi1mbGlnaHQgcmVxdWVzdHMuXG4gKlxuICogT2JzZXJ2aW5nIGEgcmVxdWVzdDpcbiAqID09PT09PT09PT09PT09PT09PT09XG4gKiBmZXRjaFF1ZXJ5IHJldHVybnMgYW4gT2JzZXJ2YWJsZSB3aGljaCB5b3UgY2FuIGNhbGwgLnN1YnNjcmliZSgpXG4gKiBvbi4gU3Vic2NyaWJlIG9wdGlvbmFsbHkgdGFrZXMgYW4gT2JzZXJ2ZXIsIHdoaWNoIHlvdSBjYW4gcHJvdmlkZSB0b1xuICogb2JzZXJ2ZSBuZXR3b3JrIGV2ZW50czpcbiAqXG4gKiBgYGBcbiAqIGZldGNoUXVlcnkoZW52aXJvbm1lbnQsIHF1ZXJ5LCB2YXJpYWJsZXMpLnN1YnNjcmliZSh7XG4gKiAgIC8vIENhbGxlZCB3aGVuIG5ldHdvcmsgcmVxdWVzdHMgc3RhcnRzXG4gKiAgIHN0YXJ0OiAoc3Vic2N0aXB0aW9uKSA9PiB7fSxcbiAqXG4gKiAgIC8vIENhbGxlZCBhZnRlciBhIHBheWxvYWQgaXMgcmVjZWl2ZWQgYW5kIHdyaXR0ZW4gdG8gdGhlIGxvY2FsIHN0b3JlXG4gKiAgIG5leHQ6IChwYXlsb2FkKSA9PiB7fSxcbiAqXG4gKiAgIC8vIENhbGxlZCB3aGVuIG5ldHdvcmsgcmVxdWVzdHMgZXJyb3JzXG4gKiAgIGVycm9yOiAoZXJyb3IpID0+IHt9LFxuICpcbiAqICAgLy8gQ2FsbGVkIHdoZW4gbmV0d29yayByZXF1ZXN0cyBmdWxseSBjb21wbGV0ZXNcbiAqICAgY29tcGxldGU6ICgpID0+IHt9LFxuICpcbiAqICAgLy8gQ2FsbGVkIHdoZW4gbmV0d29yayByZXF1ZXN0IGlzIHVuc3Vic2NyaWJlZFxuICogICB1bnN1YnNjcmliZTogKHN1YnNjcmlwdGlvbikgPT4ge30sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIFJlcXVlc3QgUHJvbWlzZTpcbiAqID09PT09PT09PT09PT09PT1cbiAqIFRoZSBvYmVydmFibGUgY2FuIGJlIGNvbnZlcnRlZCB0byBhIFByb21pc2Ugd2l0aCAudG9Qcm9taXNlKCksIHdoaWNoIHdpbGxcbiAqIHJlc29sdmUgdG8gYSBzbmFwc2hvdCBvZiB0aGUgcXVlcnkgZGF0YSB3aGVuIHRoZSBmaXJzdCByZXNwb25zZSBpcyByZWNlaXZlZFxuICogZnJvbSB0aGUgc2VydmVyLlxuICpcbiAqIGBgYFxuICogZmV0Y2hRdWVyeShlbnZpcm9ubWVudCwgcXVlcnksIHZhcmlhYmxlcykudG9Qcm9taXNlKCkudGhlbigoZGF0YSkgPT4ge1xuICogICAvLyAuLi5cbiAqIH0pO1xuICogYGBgXG4gKlxuICogSW4tZmxpZ2h0IHJlcXVlc3QgZGUtZHVwaW5nOlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQnkgZGVmYXVsdCwgY2FsbGluZyBmZXRjaFF1ZXJ5IG11bHRpcGxlIHRpbWVzIHdpdGggdGhlIHNhbWVcbiAqIGVudmlyb25tZW50LCBxdWVyeSBhbmQgdmFyaWFibGVzIHdpbGwgbm90IGluaXRpYXRlIGEgbmV3IHJlcXVlc3QgaWYgYSByZXF1ZXN0XG4gKiBmb3IgdGhvc2Ugc2FtZSBwYXJhbWV0ZXJzIGlzIGFscmVhZHkgaW4gZmxpZ2h0LlxuICpcbiAqIEEgcmVxdWVzdCBpcyBtYXJrZWQgaW4tZmxpZ2h0IGZyb20gdGhlIG1vbWVudCBpdCBzdGFydHMgdW50aWwgdGhlIG1vbWVudCBpdFxuICogZnVsbHkgY29tcGxldGVzLCByZWdhcmRsZXNzIG9mIGVycm9yIG9yIHN1Y2Nlc3NmdWwgY29tcGxldGlvbi5cbiAqXG4gKiBOT1RFOiBJZiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMgX3N5bmNocm9ub3VzbHlfLCBjYWxsaW5nIGZldGNoUXVlcnlcbiAqIGEgc2Vjb25kIHRpbWUgd2l0aCB0aGUgc2FtZSBhcmd1bWVudHMgaW4gdGhlIHNhbWUgdGljayB3aWxsIF9OT1RfIGRlLWR1cGVcbiAqIHRoZSByZXF1ZXN0IGdpdmVuIHRoYXQgaXQgd2lsbCBubyBsb25nZXIgYmUgaW4tZmxpZ2h0LlxuICpcbiAqXG4gKiBEYXRhIFJldGVudGlvbjpcbiAqID09PT09PT09PT09PT09PVxuICogVGhpcyBmdW5jdGlvbiB3aWxsIE5PVCByZXRhaW4gcXVlcnkgZGF0YSwgbWVhbmluZyB0aGF0IGl0IGlzIG5vdCBndWFyYW50ZWVkXG4gKiB0aGF0IHRoZSBmZXRjaGVkIGRhdGEgd2lsbCByZW1haW4gaW4gdGhlIFJlbGF5IHN0b3JlIGFmdGVyIHRoZSByZXF1ZXN0IGhhc1xuICogY29tcGxldGVkLlxuICogSWYgeW91IG5lZWQgdG8gcmV0YWluIHRoZSBxdWVyeSBkYXRhIG91dHNpZGUgb2YgdGhlIG5ldHdvcmsgcmVxdWVzdCxcbiAqIHlvdSBuZWVkIHRvIHVzZSBgZW52aXJvbm1lbnQucmV0YWluKClgLlxuICpcbiAqXG4gKiBDYW5jZWxsaW5nIHJlcXVlc3RzOlxuICogPT09PT09PT09PT09PT09PT09PT1cbiAqIElmIHRoZSBkaXNwb3NhYmxlIHJldHVybmVkIGJ5IHN1YnNjcmliZSBpcyBjYWxsZWQgd2hpbGUgdGhlXG4gKiByZXF1ZXN0IGlzIGluLWZsaWdodCwgdGhlIHJlcXVlc3Qgd2lsbCBiZSBjYW5jZWxsZWQuXG4gKlxuICogYGBgXG4gKiBjb25zdCBkaXNwb3NhYmxlID0gZmV0Y2hRdWVyeSguLi4pLnN1YnNjcmliZSguLi4pO1xuICpcbiAqIC8vIFRoaXMgd2lsbCBjYW5jZWwgdGhlIHJlcXVlc3QgaWYgaXQgaXMgaW4tZmxpZ2h0LlxuICogZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gKiBgYGBcbiAqIE5PVEU6IFdoZW4gdXNpbmcgLnRvUHJvbWlzZSgpLCB0aGUgcmVxdWVzdCBjYW5ub3QgYmUgY2FuY2VsbGVkLlxuICovXG5mdW5jdGlvbiBmZXRjaFF1ZXJ5KGVudmlyb25tZW50LCBxdWVyeSwgdmFyaWFibGVzLCBvcHRpb25zKSB7XG4gIHZhciBfb3B0aW9ucyRmZXRjaFBvbGljeTtcblxuICB2YXIgcXVlcnlOb2RlID0gZ2V0UmVxdWVzdChxdWVyeSk7XG4gICEocXVlcnlOb2RlLnBhcmFtcy5vcGVyYXRpb25LaW5kID09PSAncXVlcnknKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2ZldGNoUXVlcnk6IEV4cGVjdGVkIHF1ZXJ5IG9wZXJhdGlvbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIG5ldHdvcmtDYWNoZUNvbmZpZyA9ICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHtcbiAgICBmb3JjZTogdHJ1ZVxuICB9LCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubmV0d29ya0NhY2hlQ29uZmlnKTtcbiAgdmFyIG9wZXJhdGlvbiA9IGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IocXVlcnlOb2RlLCB2YXJpYWJsZXMsIG5ldHdvcmtDYWNoZUNvbmZpZyk7XG4gIHZhciBmZXRjaFBvbGljeSA9IChfb3B0aW9ucyRmZXRjaFBvbGljeSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5mZXRjaFBvbGljeSkgIT09IG51bGwgJiYgX29wdGlvbnMkZmV0Y2hQb2xpY3kgIT09IHZvaWQgMCA/IF9vcHRpb25zJGZldGNoUG9saWN5IDogJ25ldHdvcmstb25seSc7XG5cbiAgZnVuY3Rpb24gcmVhZERhdGEoc25hcHNob3QpIHtcbiAgICBpZiAoc25hcHNob3QubWlzc2luZ1JlcXVpcmVkRmllbGRzICE9IG51bGwpIHtcbiAgICAgIHJlcG9ydE1pc3NpbmdSZXF1aXJlZEZpZWxkcyhlbnZpcm9ubWVudCwgc25hcHNob3QubWlzc2luZ1JlcXVpcmVkRmllbGRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc25hcHNob3QuZGF0YTtcbiAgfVxuXG4gIHN3aXRjaCAoZmV0Y2hQb2xpY3kpIHtcbiAgICBjYXNlICduZXR3b3JrLW9ubHknOlxuICAgICAge1xuICAgICAgICByZXR1cm4gZ2V0TmV0d29ya09ic2VydmFibGUoZW52aXJvbm1lbnQsIG9wZXJhdGlvbikubWFwKHJlYWREYXRhKTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ3N0b3JlLW9yLW5ldHdvcmsnOlxuICAgICAge1xuICAgICAgICBpZiAoZW52aXJvbm1lbnQuY2hlY2sob3BlcmF0aW9uKS5zdGF0dXMgPT09ICdhdmFpbGFibGUnKSB7XG4gICAgICAgICAgcmV0dXJuIFJlbGF5T2JzZXJ2YWJsZS5mcm9tKGVudmlyb25tZW50Lmxvb2t1cChvcGVyYXRpb24uZnJhZ21lbnQpKS5tYXAocmVhZERhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdldE5ldHdvcmtPYnNlcnZhYmxlKGVudmlyb25tZW50LCBvcGVyYXRpb24pLm1hcChyZWFkRGF0YSk7XG4gICAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAgZmV0Y2hQb2xpY3k7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZldGNoUXVlcnk6IEludmFsaWQgZmV0Y2hQb2xpY3kgJyArIGZldGNoUG9saWN5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXROZXR3b3JrT2JzZXJ2YWJsZShlbnZpcm9ubWVudCwgb3BlcmF0aW9uKSB7XG4gIHJldHVybiBmZXRjaFF1ZXJ5SW50ZXJuYWwuZmV0Y2hRdWVyeShlbnZpcm9ubWVudCwgb3BlcmF0aW9uKS5tYXAoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlbnZpcm9ubWVudC5sb29rdXAob3BlcmF0aW9uLmZyYWdtZW50KTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmV0Y2hRdWVyeTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIE9ic2VydmFibGUgPSByZXF1aXJlKCcuLi9uZXR3b3JrL1JlbGF5T2JzZXJ2YWJsZScpO1xuXG52YXIgUmVsYXlSZXBsYXlTdWJqZWN0ID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheVJlcGxheVN1YmplY3QnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgV0VBS01BUF9TVVBQT1JURUQgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJztcbnZhciByZXF1ZXN0Q2FjaGVzQnlFbnZpcm9ubWVudCA9IFdFQUtNQVBfU1VQUE9SVEVEID8gbmV3IFdlYWtNYXAoKSA6IG5ldyBNYXAoKTtcbi8qKlxuICogRmV0Y2hlcyB0aGUgZ2l2ZW4gcXVlcnkgYW5kIHZhcmlhYmxlcyBvbiB0aGUgcHJvdmlkZWQgZW52aXJvbm1lbnQsXG4gKiBhbmQgZGUtZHVwZXMgaWRlbnRpY2FsIGluLWZsaWdodCByZXF1ZXN0cy5cbiAqXG4gKiBPYnNlcnZpbmcgYSByZXF1ZXN0OlxuICogPT09PT09PT09PT09PT09PT09PT1cbiAqIGZldGNoUXVlcnkgcmV0dXJucyBhbiBPYnNlcnZhYmxlIHdoaWNoIHlvdSBjYW4gY2FsbCAuc3Vic2NyaWJlKClcbiAqIG9uLiBzdWJzY3JpYmUoKSB0YWtlcyBhbiBPYnNlcnZlciwgd2hpY2ggeW91IGNhbiBwcm92aWRlIHRvXG4gKiBvYnNlcnZlIG5ldHdvcmsgZXZlbnRzOlxuICpcbiAqIGBgYFxuICogZmV0Y2hRdWVyeShlbnZpcm9ubWVudCwgcXVlcnksIHZhcmlhYmxlcykuc3Vic2NyaWJlKHtcbiAqICAgLy8gQ2FsbGVkIHdoZW4gbmV0d29yayByZXF1ZXN0cyBzdGFydHNcbiAqICAgc3RhcnQ6IChzdWJzY3JpcHRpb24pID0+IHt9LFxuICpcbiAqICAgLy8gQ2FsbGVkIGFmdGVyIGEgcGF5bG9hZCBpcyByZWNlaXZlZCBhbmQgd3JpdHRlbiB0byB0aGUgbG9jYWwgc3RvcmVcbiAqICAgbmV4dDogKHBheWxvYWQpID0+IHt9LFxuICpcbiAqICAgLy8gQ2FsbGVkIHdoZW4gbmV0d29yayByZXF1ZXN0cyBlcnJvcnNcbiAqICAgZXJyb3I6IChlcnJvcikgPT4ge30sXG4gKlxuICogICAvLyBDYWxsZWQgd2hlbiBuZXR3b3JrIHJlcXVlc3RzIGZ1bGx5IGNvbXBsZXRlc1xuICogICBjb21wbGV0ZTogKCkgPT4ge30sXG4gKlxuICogICAvLyBDYWxsZWQgd2hlbiBuZXR3b3JrIHJlcXVlc3QgaXMgdW5zdWJzY3JpYmVkXG4gKiAgIHVuc3Vic2NyaWJlOiAoc3Vic2NyaXB0aW9uKSA9PiB7fSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogSW4tZmxpZ2h0IHJlcXVlc3QgZGUtZHVwaW5nOlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQnkgZGVmYXVsdCwgY2FsbGluZyBmZXRjaFF1ZXJ5IG11bHRpcGxlIHRpbWVzIHdpdGggdGhlIHNhbWVcbiAqIGVudmlyb25tZW50LCBxdWVyeSBhbmQgdmFyaWFibGVzIHdpbGwgbm90IGluaXRpYXRlIGEgbmV3IHJlcXVlc3QgaWYgYSByZXF1ZXN0XG4gKiBmb3IgdGhvc2Ugc2FtZSBwYXJhbWV0ZXJzIGlzIGFscmVhZHkgaW4gZmxpZ2h0LlxuICpcbiAqIEEgcmVxdWVzdCBpcyBtYXJrZWQgaW4tZmxpZ2h0IGZyb20gdGhlIG1vbWVudCBpdCBzdGFydHMgdW50aWwgdGhlIG1vbWVudCBpdFxuICogZnVsbHkgY29tcGxldGVzLCByZWdhcmRsZXNzIG9mIGVycm9yIG9yIHN1Y2Nlc3NmdWwgY29tcGxldGlvbi5cbiAqXG4gKiBOT1RFOiBJZiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMgX3N5bmNocm9ub3VzbHlfLCBjYWxsaW5nIGZldGNoUXVlcnlcbiAqIGEgc2Vjb25kIHRpbWUgd2l0aCB0aGUgc2FtZSBhcmd1bWVudHMgaW4gdGhlIHNhbWUgdGljayB3aWxsIF9OT1RfIGRlLWR1cGVcbiAqIHRoZSByZXF1ZXN0IGdpdmVuIHRoYXQgaXQgd2lsbCBubyBsb25nZXIgYmUgaW4tZmxpZ2h0LlxuICpcbiAqXG4gKiBEYXRhIFJldGVudGlvbjpcbiAqID09PT09PT09PT09PT09PVxuICogVGhpcyBmdW5jdGlvbiB3aWxsIG5vdCByZXRhaW4gYW55IHF1ZXJ5IGRhdGEgb3V0c2lkZSB0aGUgc2NvcGUgb2YgdGhlXG4gKiByZXF1ZXN0LCB3aGljaCBtZWFucyBpdCBpcyBub3QgZ3VhcmFudGVlZCB0aGF0IGl0IHdvbid0IGJlIGdhcmJhZ2VcbiAqIGNvbGxlY3RlZCBhZnRlciB0aGUgcmVxdWVzdCBjb21wbGV0ZXMuXG4gKiBJZiB5b3UgbmVlZCB0byByZXRhaW4gZGF0YSwgeW91IGNhbiBkbyBzbyBtYW51YWxseSB3aXRoIGVudmlyb25tZW50LnJldGFpbigpLlxuICpcbiAqIENhbmNlbGxpbmcgcmVxdWVzdHM6XG4gKiA9PT09PT09PT09PT09PT09PT09PVxuICogSWYgdGhlIHN1YnNjcmlwdGlvbiByZXR1cm5lZCBieSBzdWJzY3JpYmUgaXMgY2FsbGVkIHdoaWxlIHRoZVxuICogcmVxdWVzdCBpcyBpbi1mbGlnaHQsIHRoZSByZXF1ZXN0IHdpbGwgYmUgY2FuY2VsbGVkLlxuICpcbiAqIGBgYFxuICogY29uc3Qgc3Vic2NyaXB0aW9uID0gZmV0Y2hRdWVyeSguLi4pLnN1YnNjcmliZSguLi4pO1xuICpcbiAqIC8vIFRoaXMgd2lsbCBjYW5jZWwgdGhlIHJlcXVlc3QgaWYgaXQgaXMgaW4tZmxpZ2h0LlxuICogc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gKiBgYGBcbiAqL1xuXG5mdW5jdGlvbiBmZXRjaFF1ZXJ5KGVudmlyb25tZW50LCBvcGVyYXRpb24pIHtcbiAgcmV0dXJuIGZldGNoUXVlcnlEZWR1cGVkKGVudmlyb25tZW50LCBvcGVyYXRpb24ucmVxdWVzdC5pZGVudGlmaWVyLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGVudmlyb25tZW50LmV4ZWN1dGUoe1xuICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb25cbiAgICB9KTtcbiAgfSk7XG59XG4vKipcbiAqIExvdy1sZXZlbCBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9mIGBmZXRjaFF1ZXJ5YC5cbiAqXG4gKiBgZmV0Y2hRdWVyeURlZHVwZWRgIGNhbiBhbHNvIGJlIHVzZWQgdG8gc2hhcmUgYSBzaW5nbGUgY2FjaGUgZm9yXG4gKiByZXF1ZXN0cyB0aGF0IGFyZW4ndCB1c2luZyBgZmV0Y2hRdWVyeWAgZGlyZWN0bHkgKGUuZy4gYmVjYXVzZSB0aGV5IGRvbid0XG4gKiBoYXZlIGFuIGBPcGVyYXRpb25EZXNjcmlwdG9yYCB3aGVuIHRoZXkgYXJlIGNhbGxlZCkuXG4gKi9cblxuXG5mdW5jdGlvbiBmZXRjaFF1ZXJ5RGVkdXBlZChlbnZpcm9ubWVudCwgaWRlbnRpZmllciwgZmV0Y2hGbikge1xuICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICB2YXIgcmVxdWVzdENhY2hlID0gZ2V0UmVxdWVzdENhY2hlKGVudmlyb25tZW50KTtcbiAgICB2YXIgY2FjaGVkUmVxdWVzdCA9IHJlcXVlc3RDYWNoZS5nZXQoaWRlbnRpZmllcik7XG5cbiAgICBpZiAoIWNhY2hlZFJlcXVlc3QpIHtcbiAgICAgIGZldGNoRm4oKVtcImZpbmFsbHlcIl0oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVxdWVzdENhY2hlW1wiZGVsZXRlXCJdKGlkZW50aWZpZXIpO1xuICAgICAgfSkuc3Vic2NyaWJlKHtcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgIGNhY2hlZFJlcXVlc3QgPSB7XG4gICAgICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICAgICAgc3ViamVjdDogbmV3IFJlbGF5UmVwbGF5U3ViamVjdCgpLFxuICAgICAgICAgICAgc3ViamVjdEZvckluRmxpZ2h0U3RhdHVzOiBuZXcgUmVsYXlSZXBsYXlTdWJqZWN0KCksXG4gICAgICAgICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgICAgICAgIH07XG4gICAgICAgICAgcmVxdWVzdENhY2hlLnNldChpZGVudGlmaWVyLCBjYWNoZWRSZXF1ZXN0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dChyZXNwb25zZSkge1xuICAgICAgICAgIHZhciBjYWNoZWRSZXEgPSBnZXRDYWNoZWRSZXF1ZXN0KHJlcXVlc3RDYWNoZSwgaWRlbnRpZmllcik7XG4gICAgICAgICAgY2FjaGVkUmVxLnN1YmplY3QubmV4dChyZXNwb25zZSk7XG4gICAgICAgICAgY2FjaGVkUmVxLnN1YmplY3RGb3JJbkZsaWdodFN0YXR1cy5uZXh0KHJlc3BvbnNlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKF9lcnJvcikge1xuICAgICAgICAgIHZhciBjYWNoZWRSZXEgPSBnZXRDYWNoZWRSZXF1ZXN0KHJlcXVlc3RDYWNoZSwgaWRlbnRpZmllcik7XG4gICAgICAgICAgY2FjaGVkUmVxLnN1YmplY3QuZXJyb3IoX2Vycm9yKTtcbiAgICAgICAgICBjYWNoZWRSZXEuc3ViamVjdEZvckluRmxpZ2h0U3RhdHVzLmVycm9yKF9lcnJvcik7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICB2YXIgY2FjaGVkUmVxID0gZ2V0Q2FjaGVkUmVxdWVzdChyZXF1ZXN0Q2FjaGUsIGlkZW50aWZpZXIpO1xuICAgICAgICAgIGNhY2hlZFJlcS5zdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgY2FjaGVkUmVxLnN1YmplY3RGb3JJbkZsaWdodFN0YXR1cy5jb21wbGV0ZSgpO1xuICAgICAgICB9LFxuICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgdmFyIGNhY2hlZFJlcSA9IGdldENhY2hlZFJlcXVlc3QocmVxdWVzdENhY2hlLCBpZGVudGlmaWVyKTtcbiAgICAgICAgICBjYWNoZWRSZXEuc3ViamVjdC51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIGNhY2hlZFJlcS5zdWJqZWN0Rm9ySW5GbGlnaHRTdGF0dXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgIShjYWNoZWRSZXF1ZXN0ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnW2ZldGNoUXVlcnlJbnRlcm5hbF0gZmV0Y2hRdWVyeURlZHVwZWQ6IEV4cGVjdGVkIGBzdGFydGAgdG8gYmUgJyArICdjYWxsZWQgc3luY2hyb25vdXNseScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZ2V0T2JzZXJ2YWJsZUZvckNhY2hlZFJlcXVlc3QocmVxdWVzdENhY2hlLCBjYWNoZWRSZXF1ZXN0KS5zdWJzY3JpYmUoc2luayk7XG4gIH0pO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gZ2V0T2JzZXJ2YWJsZUZvckNhY2hlZFJlcXVlc3QocmVxdWVzdENhY2hlLCBjYWNoZWRSZXF1ZXN0KSB7XG4gIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjYWNoZWRSZXF1ZXN0LnN1YmplY3Quc3Vic2NyaWJlKHNpbmspO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIHZhciBjYWNoZWRSZXF1ZXN0SW5zdGFuY2UgPSByZXF1ZXN0Q2FjaGUuZ2V0KGNhY2hlZFJlcXVlc3QuaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChjYWNoZWRSZXF1ZXN0SW5zdGFuY2UpIHtcbiAgICAgICAgdmFyIHJlcXVlc3RTdWJzY3JpcHRpb24gPSBjYWNoZWRSZXF1ZXN0SW5zdGFuY2Uuc3Vic2NyaXB0aW9uO1xuXG4gICAgICAgIGlmIChyZXF1ZXN0U3Vic2NyaXB0aW9uICE9IG51bGwgJiYgY2FjaGVkUmVxdWVzdEluc3RhbmNlLnN1YmplY3QuZ2V0T2JzZXJ2ZXJDb3VudCgpID09PSAwKSB7XG4gICAgICAgICAgcmVxdWVzdFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIHJlcXVlc3RDYWNoZVtcImRlbGV0ZVwiXShjYWNoZWRSZXF1ZXN0LmlkZW50aWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRBY3RpdmVTdGF0dXNPYnNlcnZhYmxlRm9yQ2FjaGVkUmVxdWVzdChlbnZpcm9ubWVudCwgcmVxdWVzdENhY2hlLCBjYWNoZWRSZXF1ZXN0KSB7XG4gIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjYWNoZWRSZXF1ZXN0LnN1YmplY3RGb3JJbkZsaWdodFN0YXR1cy5zdWJzY3JpYmUoe1xuICAgICAgZXJyb3I6IHNpbmsuZXJyb3IsXG4gICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICghZW52aXJvbm1lbnQuaXNSZXF1ZXN0QWN0aXZlKGNhY2hlZFJlcXVlc3QuaWRlbnRpZmllcikpIHtcbiAgICAgICAgICBzaW5rLmNvbXBsZXRlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2luay5uZXh0KCk7XG4gICAgICB9LFxuICAgICAgY29tcGxldGU6IHNpbmsuY29tcGxldGUsXG4gICAgICB1bnN1YnNjcmliZTogc2luay5jb21wbGV0ZVxuICAgIH0pO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9KTtcbn1cbi8qKlxuICogSWYgYSByZXF1ZXN0IGlzIGFjdGl2ZSBmb3IgdGhlIGdpdmVuIHF1ZXJ5LCB2YXJpYWJsZXMgYW5kIGVudmlyb25tZW50LFxuICogdGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBhIFByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgd2hlbiB0aGF0IHJlcXVlc3RcbiAqIHN0b3BzIGJlaW5nIGFjdGl2ZSAocmVjZWl2ZXMgYSBmaW5hbCBwYXlsb2FkKSwgYW5kIHRoZSBkYXRhIGhhcyBiZWVuIHNhdmVkXG4gKiB0byB0aGUgc3RvcmUuXG4gKiBJZiBubyByZXF1ZXN0IGlzIGFjdGl2ZSwgbnVsbCB3aWxsIGJlIHJldHVybmVkXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRQcm9taXNlRm9yQWN0aXZlUmVxdWVzdChlbnZpcm9ubWVudCwgcmVxdWVzdCkge1xuICB2YXIgcmVxdWVzdENhY2hlID0gZ2V0UmVxdWVzdENhY2hlKGVudmlyb25tZW50KTtcbiAgdmFyIGNhY2hlZFJlcXVlc3QgPSByZXF1ZXN0Q2FjaGUuZ2V0KHJlcXVlc3QuaWRlbnRpZmllcik7XG5cbiAgaWYgKCFjYWNoZWRSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoIWVudmlyb25tZW50LmlzUmVxdWVzdEFjdGl2ZShjYWNoZWRSZXF1ZXN0LmlkZW50aWZpZXIpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXNvbHZlT25OZXh0ID0gZmFsc2U7XG4gICAgZ2V0QWN0aXZlU3RhdHVzT2JzZXJ2YWJsZUZvckNhY2hlZFJlcXVlc3QoZW52aXJvbm1lbnQsIHJlcXVlc3RDYWNoZSwgY2FjaGVkUmVxdWVzdCkuc3Vic2NyaWJlKHtcbiAgICAgIGNvbXBsZXRlOiByZXNvbHZlLFxuICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQocmVzcG9uc2UpIHtcbiAgICAgICAgLypcbiAgICAgICAgICogVGhlIHVuZGVybHlpbmcgYFJlbGF5UmVwbGF5U3ViamVjdGAgd2lsbCBzeW5jaHJvbm91c2x5IHJlcGxheSBldmVudHNcbiAgICAgICAgICogYXMgc29vbiBhcyB3ZSBzdWJzY3JpYmUsIGJ1dCBzaW5jZSB3ZSB3YW50IHRoZSAqbmV4dCogYXN5bmNocm9ub3VzXG4gICAgICAgICAqIG9uZSwgd2UnbGwgaWdub3JlIHRoZW0gdW50aWwgdGhlIHJlcGxheSBmaW5pc2hlcy5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChyZXNvbHZlT25OZXh0KSB7XG4gICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXNvbHZlT25OZXh0ID0gdHJ1ZTtcbiAgfSk7XG59XG4vKipcbiAqIElmIHRoZXJlIGlzIGEgcGVuZGluZyByZXF1ZXN0IGZvciB0aGUgZ2l2ZW4gcXVlcnksIHJldHVybnMgYW4gT2JzZXJ2YWJsZSBvZlxuICogKmFsbCogaXRzIHJlc3BvbnNlcy4gRXhpc3RpbmcgcmVzcG9uc2VzIGFyZSBwdWJsaXNoZWQgc3luY2hyb25vdXNseSBhbmRcbiAqIHN1YnNlcXVlbnQgcmVzcG9uc2VzIGFyZSBwdWJsaXNoZWQgYXN5bmNocm9ub3VzbHkuIFJldHVybnMgbnVsbCBpZiB0aGVyZSBpc1xuICogbm8gcGVuZGluZyByZXF1ZXN0LiBUaGlzIGlzIHNpbWlsYXIgdG8gZmV0Y2hRdWVyeSgpIGV4Y2VwdCB0aGF0IGl0IHdpbGwgbm90XG4gKiBpc3N1ZSBhIGZldGNoIGlmIHRoZXJlIGlzbid0IGFscmVhZHkgb25lIHBlbmRpbmcuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRPYnNlcnZhYmxlRm9yQWN0aXZlUmVxdWVzdChlbnZpcm9ubWVudCwgcmVxdWVzdCkge1xuICB2YXIgcmVxdWVzdENhY2hlID0gZ2V0UmVxdWVzdENhY2hlKGVudmlyb25tZW50KTtcbiAgdmFyIGNhY2hlZFJlcXVlc3QgPSByZXF1ZXN0Q2FjaGUuZ2V0KHJlcXVlc3QuaWRlbnRpZmllcik7XG5cbiAgaWYgKCFjYWNoZWRSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoIWVudmlyb25tZW50LmlzUmVxdWVzdEFjdGl2ZShjYWNoZWRSZXF1ZXN0LmlkZW50aWZpZXIpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZ2V0QWN0aXZlU3RhdHVzT2JzZXJ2YWJsZUZvckNhY2hlZFJlcXVlc3QoZW52aXJvbm1lbnQsIHJlcXVlc3RDYWNoZSwgY2FjaGVkUmVxdWVzdCk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRSZXF1ZXN0Q2FjaGUoZW52aXJvbm1lbnQpIHtcbiAgdmFyIGNhY2hlZCA9IHJlcXVlc3RDYWNoZXNCeUVudmlyb25tZW50LmdldChlbnZpcm9ubWVudCk7XG5cbiAgaWYgKGNhY2hlZCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuXG4gIHZhciByZXF1ZXN0Q2FjaGUgPSBuZXcgTWFwKCk7XG4gIHJlcXVlc3RDYWNoZXNCeUVudmlyb25tZW50LnNldChlbnZpcm9ubWVudCwgcmVxdWVzdENhY2hlKTtcbiAgcmV0dXJuIHJlcXVlc3RDYWNoZTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldENhY2hlZFJlcXVlc3QocmVxdWVzdENhY2hlLCBpZGVudGlmaWVyKSB7XG4gIHZhciBjYWNoZWQgPSByZXF1ZXN0Q2FjaGUuZ2V0KGlkZW50aWZpZXIpO1xuICAhKGNhY2hlZCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1tmZXRjaFF1ZXJ5SW50ZXJuYWxdIGdldENhY2hlZFJlcXVlc3Q6IEV4cGVjdGVkIHJlcXVlc3QgdG8gYmUgY2FjaGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gY2FjaGVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmV0Y2hRdWVyeTogZmV0Y2hRdWVyeSxcbiAgZmV0Y2hRdWVyeURlZHVwZWQ6IGZldGNoUXVlcnlEZWR1cGVkLFxuICBnZXRQcm9taXNlRm9yQWN0aXZlUmVxdWVzdDogZ2V0UHJvbWlzZUZvckFjdGl2ZVJlcXVlc3QsXG4gIGdldE9ic2VydmFibGVGb3JBY3RpdmVSZXF1ZXN0OiBnZXRPYnNlcnZhYmxlRm9yQWN0aXZlUmVxdWVzdFxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vc3RvcmUvUmVsYXlNb2Rlcm5PcGVyYXRpb25EZXNjcmlwdG9yJyksXG4gICAgY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvciA9IF9yZXF1aXJlLmNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3I7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuL0dyYXBoUUxUYWcnKSxcbiAgICBnZXRSZXF1ZXN0ID0gX3JlcXVpcmUyLmdldFJlcXVlc3Q7XG5cbi8qKlxuICogQSBoZWxwZXIgZnVuY3Rpb24gdG8gZmV0Y2ggdGhlIHJlc3VsdHMgb2YgYSBxdWVyeS4gTm90ZSB0aGF0IHJlc3VsdHMgZm9yXG4gKiBmcmFnbWVudCBzcHJlYWRzIGFyZSBtYXNrZWQ6IGZpZWxkcyBtdXN0IGJlIGV4cGxpY2l0bHkgbGlzdGVkIGluIHRoZSBxdWVyeSBpblxuICogb3JkZXIgdG8gYmUgYWNjZXNzaWJsZSBpbiB0aGUgcmVzdWx0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZmV0Y2hRdWVyeV9ERVBSRUNBVEVEKGVudmlyb25tZW50LCB0YWdnZWROb2RlLCB2YXJpYWJsZXMsIGNhY2hlQ29uZmlnKSB7XG4gIHZhciBxdWVyeSA9IGdldFJlcXVlc3QodGFnZ2VkTm9kZSk7XG5cbiAgaWYgKHF1ZXJ5LnBhcmFtcy5vcGVyYXRpb25LaW5kICE9PSAncXVlcnknKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdmZXRjaFF1ZXJ5OiBFeHBlY3RlZCBxdWVyeSBvcGVyYXRpb24nKTtcbiAgfVxuXG4gIHZhciBvcGVyYXRpb24gPSBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yKHF1ZXJ5LCB2YXJpYWJsZXMsIGNhY2hlQ29uZmlnKTtcbiAgcmV0dXJuIGVudmlyb25tZW50LmV4ZWN1dGUoe1xuICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uXG4gIH0pLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGVudmlyb25tZW50Lmxvb2t1cChvcGVyYXRpb24uZnJhZ21lbnQpLmRhdGE7XG4gIH0pLnRvUHJvbWlzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZldGNoUXVlcnlfREVQUkVDQVRFRDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFBSRUZJWCA9ICdjbGllbnQ6JztcblxuZnVuY3Rpb24gZ2VuZXJhdGVDbGllbnRJRChpZCwgc3RvcmFnZUtleSwgaW5kZXgpIHtcbiAgdmFyIGtleSA9IGlkICsgJzonICsgc3RvcmFnZUtleTtcblxuICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgIGtleSArPSAnOicgKyBpbmRleDtcbiAgfVxuXG4gIGlmIChrZXkuaW5kZXhPZihQUkVGSVgpICE9PSAwKSB7XG4gICAga2V5ID0gUFJFRklYICsga2V5O1xuICB9XG5cbiAgcmV0dXJuIGtleTtcbn1cblxuZnVuY3Rpb24gaXNDbGllbnRJRChpZCkge1xuICByZXR1cm4gaWQuaW5kZXhPZihQUkVGSVgpID09PSAwO1xufVxuXG52YXIgbG9jYWxJRCA9IDA7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVW5pcXVlQ2xpZW50SUQoKSB7XG4gIHJldHVybiBcIlwiLmNvbmNhdChQUkVGSVgsIFwibG9jYWw6XCIpLmNvbmNhdChsb2NhbElEKyspO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2VuZXJhdGVDbGllbnRJRDogZ2VuZXJhdGVDbGllbnRJRCxcbiAgZ2VuZXJhdGVVbmlxdWVDbGllbnRJRDogZ2VuZXJhdGVVbmlxdWVDbGllbnRJRCxcbiAgaXNDbGllbnRJRDogaXNDbGllbnRJRFxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyXCIpKTtcblxudmFyIFJlbGF5Q29uY3JldGVOb2RlID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUNvbmNyZXRlTm9kZScpO1xuXG52YXIgUmVsYXlGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuLi91dGlsL1JlbGF5RmVhdHVyZUZsYWdzJyk7XG5cbnZhciBSZWxheU1vZGVyblJlY29yZCA9IHJlcXVpcmUoJy4vUmVsYXlNb2Rlcm5SZWNvcmQnKTtcblxudmFyIFJlbGF5UmVjb3JkU291cmNlTXV0YXRvciA9IHJlcXVpcmUoJy4uL211dGF0aW9ucy9SZWxheVJlY29yZFNvdXJjZU11dGF0b3InKTtcblxudmFyIFJlbGF5UmVjb3JkU291cmNlUHJveHkgPSByZXF1aXJlKCcuLi9tdXRhdGlvbnMvUmVsYXlSZWNvcmRTb3VyY2VQcm94eScpO1xuXG52YXIgUmVsYXlTdG9yZVJlYWN0RmxpZ2h0VXRpbHMgPSByZXF1aXJlKCcuL1JlbGF5U3RvcmVSZWFjdEZsaWdodFV0aWxzJyk7XG5cbnZhciBSZWxheVN0b3JlVXRpbHMgPSByZXF1aXJlKCcuL1JlbGF5U3RvcmVVdGlscycpO1xuXG52YXIgY2xvbmVSZWxheUhhbmRsZVNvdXJjZUZpZWxkID0gcmVxdWlyZSgnLi9jbG9uZVJlbGF5SGFuZGxlU291cmNlRmllbGQnKTtcblxudmFyIGNsb25lUmVsYXlTY2FsYXJIYW5kbGVTb3VyY2VGaWVsZCA9IHJlcXVpcmUoJy4vY2xvbmVSZWxheVNjYWxhckhhbmRsZVNvdXJjZUZpZWxkJyk7XG5cbnZhciBnZXRPcGVyYXRpb24gPSByZXF1aXJlKCcuLi91dGlsL2dldE9wZXJhdGlvbicpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vQ2xpZW50SUQnKSxcbiAgICBpc0NsaWVudElEID0gX3JlcXVpcmUuaXNDbGllbnRJRDtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vUmVsYXlSZWNvcmRTdGF0ZScpLFxuICAgIEVYSVNURU5UID0gX3JlcXVpcmUyLkVYSVNURU5ULFxuICAgIFVOS05PV04gPSBfcmVxdWlyZTIuVU5LTk9XTjtcblxudmFyIF9yZXF1aXJlMyA9IHJlcXVpcmUoJy4vVHlwZUlEJyksXG4gICAgZ2VuZXJhdGVUeXBlSUQgPSBfcmVxdWlyZTMuZ2VuZXJhdGVUeXBlSUQ7XG5cbnZhciBDT05ESVRJT04gPSBSZWxheUNvbmNyZXRlTm9kZS5DT05ESVRJT04sXG4gICAgQ0xJRU5UX0NPTVBPTkVOVCA9IFJlbGF5Q29uY3JldGVOb2RlLkNMSUVOVF9DT01QT05FTlQsXG4gICAgQ0xJRU5UX0VYVEVOU0lPTiA9IFJlbGF5Q29uY3JldGVOb2RlLkNMSUVOVF9FWFRFTlNJT04sXG4gICAgREVGRVIgPSBSZWxheUNvbmNyZXRlTm9kZS5ERUZFUixcbiAgICBGTElHSFRfRklFTEQgPSBSZWxheUNvbmNyZXRlTm9kZS5GTElHSFRfRklFTEQsXG4gICAgRlJBR01FTlRfU1BSRUFEID0gUmVsYXlDb25jcmV0ZU5vZGUuRlJBR01FTlRfU1BSRUFELFxuICAgIElOTElORV9GUkFHTUVOVCA9IFJlbGF5Q29uY3JldGVOb2RlLklOTElORV9GUkFHTUVOVCxcbiAgICBMSU5LRURfRklFTEQgPSBSZWxheUNvbmNyZXRlTm9kZS5MSU5LRURfRklFTEQsXG4gICAgTElOS0VEX0hBTkRMRSA9IFJlbGF5Q29uY3JldGVOb2RlLkxJTktFRF9IQU5ETEUsXG4gICAgTU9EVUxFX0lNUE9SVCA9IFJlbGF5Q29uY3JldGVOb2RlLk1PRFVMRV9JTVBPUlQsXG4gICAgU0NBTEFSX0ZJRUxEID0gUmVsYXlDb25jcmV0ZU5vZGUuU0NBTEFSX0ZJRUxELFxuICAgIFNDQUxBUl9IQU5ETEUgPSBSZWxheUNvbmNyZXRlTm9kZS5TQ0FMQVJfSEFORExFLFxuICAgIFNUUkVBTSA9IFJlbGF5Q29uY3JldGVOb2RlLlNUUkVBTSxcbiAgICBUWVBFX0RJU0NSSU1JTkFUT1IgPSBSZWxheUNvbmNyZXRlTm9kZS5UWVBFX0RJU0NSSU1JTkFUT1I7XG52YXIgUk9PVF9JRCA9IFJlbGF5U3RvcmVVdGlscy5ST09UX0lELFxuICAgIGdldE1vZHVsZU9wZXJhdGlvbktleSA9IFJlbGF5U3RvcmVVdGlscy5nZXRNb2R1bGVPcGVyYXRpb25LZXksXG4gICAgZ2V0U3RvcmFnZUtleSA9IFJlbGF5U3RvcmVVdGlscy5nZXRTdG9yYWdlS2V5LFxuICAgIGdldEFyZ3VtZW50VmFsdWVzID0gUmVsYXlTdG9yZVV0aWxzLmdldEFyZ3VtZW50VmFsdWVzO1xuLyoqXG4gKiBTeW5jaHJvbm91c2x5IGNoZWNrIHdoZXRoZXIgdGhlIHJlY29yZHMgcmVxdWlyZWQgdG8gZnVsZmlsbCB0aGUgZ2l2ZW5cbiAqIGBzZWxlY3RvcmAgYXJlIHByZXNlbnQgaW4gYHNvdXJjZWAuXG4gKlxuICogSWYgYSBmaWVsZCBpcyBtaXNzaW5nLCBpdCB1c2VzIHRoZSBwcm92aWRlZCBoYW5kbGVycyB0byBhdHRlbXB0IHRvIHN1YnN0aXR1dGVcbiAqIGRhdGEuIFRoZSBgdGFyZ2V0YCB3aWxsIHN0b3JlIGFsbCByZWNvcmRzIHRoYXQgYXJlIG1vZGlmaWVkIGJlY2F1c2Ugb2YgYVxuICogc3VjY2Vzc2Z1bCBzdWJzdGl0dXRpb24uXG4gKlxuICogSWYgYWxsIHJlY29yZHMgYXJlIHByZXNlbnQsIHJldHVybnMgYHRydWVgLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAqL1xuXG5mdW5jdGlvbiBjaGVjayhzb3VyY2UsIHRhcmdldCwgc2VsZWN0b3IsIGhhbmRsZXJzLCBvcGVyYXRpb25Mb2FkZXIsIGdldERhdGFJRCwgc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMpIHtcbiAgdmFyIGRhdGFJRCA9IHNlbGVjdG9yLmRhdGFJRCxcbiAgICAgIG5vZGUgPSBzZWxlY3Rvci5ub2RlLFxuICAgICAgdmFyaWFibGVzID0gc2VsZWN0b3IudmFyaWFibGVzO1xuICB2YXIgY2hlY2tlciA9IG5ldyBEYXRhQ2hlY2tlcihzb3VyY2UsIHRhcmdldCwgdmFyaWFibGVzLCBoYW5kbGVycywgb3BlcmF0aW9uTG9hZGVyLCBnZXREYXRhSUQsIHNob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzKTtcbiAgcmV0dXJuIGNoZWNrZXIuY2hlY2sobm9kZSwgZGF0YUlEKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBEYXRhQ2hlY2tlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERhdGFDaGVja2VyKHNvdXJjZSwgdGFyZ2V0LCB2YXJpYWJsZXMsIGhhbmRsZXJzLCBvcGVyYXRpb25Mb2FkZXIsIGdldERhdGFJRCwgc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMpIHtcbiAgICB2YXIgbXV0YXRvciA9IG5ldyBSZWxheVJlY29yZFNvdXJjZU11dGF0b3Ioc291cmNlLCB0YXJnZXQpO1xuICAgIHRoaXMuX21vc3RSZWNlbnRseUludmFsaWRhdGVkQXQgPSBudWxsO1xuICAgIHRoaXMuX2hhbmRsZXJzID0gaGFuZGxlcnM7XG4gICAgdGhpcy5fbXV0YXRvciA9IG11dGF0b3I7XG4gICAgdGhpcy5fb3BlcmF0aW9uTG9hZGVyID0gb3BlcmF0aW9uTG9hZGVyICE9PSBudWxsICYmIG9wZXJhdGlvbkxvYWRlciAhPT0gdm9pZCAwID8gb3BlcmF0aW9uTG9hZGVyIDogbnVsbDtcbiAgICB0aGlzLl9yZWNvcmRTb3VyY2VQcm94eSA9IG5ldyBSZWxheVJlY29yZFNvdXJjZVByb3h5KG11dGF0b3IsIGdldERhdGFJRCk7XG4gICAgdGhpcy5fcmVjb3JkV2FzTWlzc2luZyA9IGZhbHNlO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl92YXJpYWJsZXMgPSB2YXJpYWJsZXM7XG4gICAgdGhpcy5fc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMgPSBzaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50cztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBEYXRhQ2hlY2tlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNoZWNrID0gZnVuY3Rpb24gY2hlY2sobm9kZSwgZGF0YUlEKSB7XG4gICAgdGhpcy5fdHJhdmVyc2Uobm9kZSwgZGF0YUlEKTtcblxuICAgIHJldHVybiB0aGlzLl9yZWNvcmRXYXNNaXNzaW5nID09PSB0cnVlID8ge1xuICAgICAgc3RhdHVzOiAnbWlzc2luZycsXG4gICAgICBtb3N0UmVjZW50bHlJbnZhbGlkYXRlZEF0OiB0aGlzLl9tb3N0UmVjZW50bHlJbnZhbGlkYXRlZEF0XG4gICAgfSA6IHtcbiAgICAgIHN0YXR1czogJ2F2YWlsYWJsZScsXG4gICAgICBtb3N0UmVjZW50bHlJbnZhbGlkYXRlZEF0OiB0aGlzLl9tb3N0UmVjZW50bHlJbnZhbGlkYXRlZEF0XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uX2dldFZhcmlhYmxlVmFsdWUgPSBmdW5jdGlvbiBfZ2V0VmFyaWFibGVWYWx1ZShuYW1lKSB7XG4gICAgIXRoaXMuX3ZhcmlhYmxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5QXN5bmNMb2FkZXIoKTogVW5kZWZpbmVkIHZhcmlhYmxlIGAlc2AuJywgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cblxuICAgIHJldHVybiB0aGlzLl92YXJpYWJsZXNbbmFtZV07XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVNaXNzaW5nID0gZnVuY3Rpb24gX2hhbmRsZU1pc3NpbmcoKSB7XG4gICAgdGhpcy5fcmVjb3JkV2FzTWlzc2luZyA9IHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLl9nZXREYXRhRm9ySGFuZGxlcnMgPSBmdW5jdGlvbiBfZ2V0RGF0YUZvckhhbmRsZXJzKGZpZWxkLCBkYXRhSUQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXJnczogZmllbGQuYXJncyA/IGdldEFyZ3VtZW50VmFsdWVzKGZpZWxkLmFyZ3MsIHRoaXMuX3ZhcmlhYmxlcykgOiB7fSxcbiAgICAgIC8vIEdldHRpbmcgYSBzbmFwc2hvdCBvZiB0aGUgcmVjb3JkIHN0YXRlIGlzIHBvdGVudGlhbGx5IGV4cGVuc2l2ZSBzaW5jZVxuICAgICAgLy8gd2Ugd2lsbCBuZWVkIHRvIG1lcmdlIHRoZSBzaW5rIGFuZCBzb3VyY2UgcmVjb3Jkcy4gU2luY2Ugd2UgZG8gbm90IGNyZWF0ZVxuICAgICAgLy8gYW55IG5ldyByZWNvcmRzIGluIHRoaXMgcHJvY2VzcywgaXQgaXMgcHJvYmFibHkgcmVhc29uYWJsZSB0byBwcm92aWRlXG4gICAgICAvLyBoYW5kbGVycyB3aXRoIGEgY29weSBvZiB0aGUgc291cmNlIHJlY29yZC5cbiAgICAgIC8vIFRoZSBvbmx5IHRoaW5nIHRoYXQgdGhlIHByb3ZpZGVkIHJlY29yZCB3aWxsIG5vdCBjb250YWluIGlzIGZpZWxkc1xuICAgICAgLy8gYWRkZWQgYnkgcHJldmlvdXMgaGFuZGxlcnMuXG4gICAgICByZWNvcmQ6IHRoaXMuX3NvdXJjZS5nZXQoZGF0YUlEKVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVNaXNzaW5nU2NhbGFyRmllbGQgPSBmdW5jdGlvbiBfaGFuZGxlTWlzc2luZ1NjYWxhckZpZWxkKGZpZWxkLCBkYXRhSUQpIHtcbiAgICBpZiAoZmllbGQubmFtZSA9PT0gJ2lkJyAmJiBmaWVsZC5hbGlhcyA9PSBudWxsICYmIGlzQ2xpZW50SUQoZGF0YUlEKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkX2dldERhdGFGb3JIYW5kID0gdGhpcy5fZ2V0RGF0YUZvckhhbmRsZXJzKGZpZWxkLCBkYXRhSUQpLFxuICAgICAgICBhcmdzID0gX3RoaXMkX2dldERhdGFGb3JIYW5kLmFyZ3MsXG4gICAgICAgIHJlY29yZCA9IF90aGlzJF9nZXREYXRhRm9ySGFuZC5yZWNvcmQ7XG5cbiAgICB2YXIgX2l0ZXJhdG9yID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKHRoaXMuX2hhbmRsZXJzKSxcbiAgICAgICAgX3N0ZXA7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICBpZiAoaGFuZGxlci5raW5kID09PSAnc2NhbGFyJykge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGhhbmRsZXIuaGFuZGxlKGZpZWxkLCByZWNvcmQsIGFyZ3MsIHRoaXMuX3JlY29yZFNvdXJjZVByb3h5KTtcblxuICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IuZigpO1xuICAgIH1cblxuICAgIHRoaXMuX2hhbmRsZU1pc3NpbmcoKTtcbiAgfTtcblxuICBfcHJvdG8uX2hhbmRsZU1pc3NpbmdMaW5rRmllbGQgPSBmdW5jdGlvbiBfaGFuZGxlTWlzc2luZ0xpbmtGaWVsZChmaWVsZCwgZGF0YUlEKSB7XG4gICAgdmFyIF90aGlzJF9nZXREYXRhRm9ySGFuZDIgPSB0aGlzLl9nZXREYXRhRm9ySGFuZGxlcnMoZmllbGQsIGRhdGFJRCksXG4gICAgICAgIGFyZ3MgPSBfdGhpcyRfZ2V0RGF0YUZvckhhbmQyLmFyZ3MsXG4gICAgICAgIHJlY29yZCA9IF90aGlzJF9nZXREYXRhRm9ySGFuZDIucmVjb3JkO1xuXG4gICAgdmFyIF9pdGVyYXRvcjIgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkodGhpcy5faGFuZGxlcnMpLFxuICAgICAgICBfc3RlcDI7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgaWYgKGhhbmRsZXIua2luZCA9PT0gJ2xpbmtlZCcpIHtcbiAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBoYW5kbGVyLmhhbmRsZShmaWVsZCwgcmVjb3JkLCBhcmdzLCB0aGlzLl9yZWNvcmRTb3VyY2VQcm94eSk7XG5cbiAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAobmV3VmFsdWUgPT09IG51bGwgfHwgdGhpcy5fbXV0YXRvci5nZXRTdGF0dXMobmV3VmFsdWUpID09PSBFWElTVEVOVCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IyLmYoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9oYW5kbGVNaXNzaW5nKCk7XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVNaXNzaW5nUGx1cmFsTGlua0ZpZWxkID0gZnVuY3Rpb24gX2hhbmRsZU1pc3NpbmdQbHVyYWxMaW5rRmllbGQoZmllbGQsIGRhdGFJRCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgX3RoaXMkX2dldERhdGFGb3JIYW5kMyA9IHRoaXMuX2dldERhdGFGb3JIYW5kbGVycyhmaWVsZCwgZGF0YUlEKSxcbiAgICAgICAgYXJncyA9IF90aGlzJF9nZXREYXRhRm9ySGFuZDMuYXJncyxcbiAgICAgICAgcmVjb3JkID0gX3RoaXMkX2dldERhdGFGb3JIYW5kMy5yZWNvcmQ7XG5cbiAgICB2YXIgX2l0ZXJhdG9yMyA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKSh0aGlzLl9oYW5kbGVycyksXG4gICAgICAgIF9zdGVwMztcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykge1xuICAgICAgICB2YXIgaGFuZGxlciA9IF9zdGVwMy52YWx1ZTtcblxuICAgICAgICBpZiAoaGFuZGxlci5raW5kID09PSAncGx1cmFsTGlua2VkJykge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGhhbmRsZXIuaGFuZGxlKGZpZWxkLCByZWNvcmQsIGFyZ3MsIHRoaXMuX3JlY29yZFNvdXJjZVByb3h5KTtcblxuICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgYWxsSXRlbXNLbm93biA9IG5ld1ZhbHVlLmV2ZXJ5KGZ1bmN0aW9uIChsaW5rZWRJRCkge1xuICAgICAgICAgICAgICByZXR1cm4gbGlua2VkSUQgIT0gbnVsbCAmJiBfdGhpcy5fbXV0YXRvci5nZXRTdGF0dXMobGlua2VkSUQpID09PSBFWElTVEVOVDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoYWxsSXRlbXNLbm93bikge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChuZXdWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IzLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yMy5mKCk7XG4gICAgfVxuXG4gICAgdGhpcy5faGFuZGxlTWlzc2luZygpO1xuICB9O1xuXG4gIF9wcm90by5fdHJhdmVyc2UgPSBmdW5jdGlvbiBfdHJhdmVyc2Uobm9kZSwgZGF0YUlEKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuX211dGF0b3IuZ2V0U3RhdHVzKGRhdGFJRCk7XG5cbiAgICBpZiAoc3RhdHVzID09PSBVTktOT1dOKSB7XG4gICAgICB0aGlzLl9oYW5kbGVNaXNzaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gRVhJU1RFTlQpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0aGlzLl9zb3VyY2UuZ2V0KGRhdGFJRCk7XG5cbiAgICAgIHZhciBpbnZhbGlkYXRlZEF0ID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0SW52YWxpZGF0aW9uRXBvY2gocmVjb3JkKTtcblxuICAgICAgaWYgKGludmFsaWRhdGVkQXQgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9tb3N0UmVjZW50bHlJbnZhbGlkYXRlZEF0ID0gdGhpcy5fbW9zdFJlY2VudGx5SW52YWxpZGF0ZWRBdCAhPSBudWxsID8gTWF0aC5tYXgodGhpcy5fbW9zdFJlY2VudGx5SW52YWxpZGF0ZWRBdCwgaW52YWxpZGF0ZWRBdCkgOiBpbnZhbGlkYXRlZEF0O1xuICAgICAgfVxuXG4gICAgICB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMobm9kZS5zZWxlY3Rpb25zLCBkYXRhSUQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX3RyYXZlcnNlU2VsZWN0aW9ucyA9IGZ1bmN0aW9uIF90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9ucywgZGF0YUlEKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBzZWxlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgc3dpdGNoIChzZWxlY3Rpb24ua2luZCkge1xuICAgICAgICBjYXNlIFNDQUxBUl9GSUVMRDpcbiAgICAgICAgICBfdGhpczIuX2NoZWNrU2NhbGFyKHNlbGVjdGlvbiwgZGF0YUlEKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTElOS0VEX0ZJRUxEOlxuICAgICAgICAgIGlmIChzZWxlY3Rpb24ucGx1cmFsKSB7XG4gICAgICAgICAgICBfdGhpczIuX2NoZWNrUGx1cmFsTGluayhzZWxlY3Rpb24sIGRhdGFJRCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzMi5fY2hlY2tMaW5rKHNlbGVjdGlvbiwgZGF0YUlEKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIENPTkRJVElPTjpcbiAgICAgICAgICB2YXIgY29uZGl0aW9uVmFsdWUgPSBfdGhpczIuX2dldFZhcmlhYmxlVmFsdWUoc2VsZWN0aW9uLmNvbmRpdGlvbik7XG5cbiAgICAgICAgICBpZiAoY29uZGl0aW9uVmFsdWUgPT09IHNlbGVjdGlvbi5wYXNzaW5nVmFsdWUpIHtcbiAgICAgICAgICAgIF90aGlzMi5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5zZWxlY3Rpb25zLCBkYXRhSUQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgSU5MSU5FX0ZSQUdNRU5UOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBhYnN0cmFjdEtleSA9IHNlbGVjdGlvbi5hYnN0cmFjdEtleTtcblxuICAgICAgICAgICAgaWYgKGFic3RyYWN0S2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gY29uY3JldGUgdHlwZSByZWZpbmVtZW50OiBvbmx5IGNoZWNrIGRhdGEgaWYgdGhlIHR5cGUgZXhhY3RseSBtYXRjaGVzXG4gICAgICAgICAgICAgIHZhciB0eXBlTmFtZSA9IF90aGlzMi5fbXV0YXRvci5nZXRUeXBlKGRhdGFJRCk7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVOYW1lID09PSBzZWxlY3Rpb24udHlwZSkge1xuICAgICAgICAgICAgICAgIF90aGlzMi5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5zZWxlY3Rpb25zLCBkYXRhSUQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9QUkVDSVNFX1RZUEVfUkVGSU5FTUVOVCkge1xuICAgICAgICAgICAgICAvLyBBYnN0cmFjdCByZWZpbmVtZW50OiBjaGVjayBkYXRhIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSB0eXBlXG4gICAgICAgICAgICAgIC8vIGNvbmZvcm1zIHRvIHRoZSBpbnRlcmZhY2UvdW5pb24gb3Igbm90OlxuICAgICAgICAgICAgICAvLyAtIFR5cGUga25vd24gdG8gX25vdF8gaW1wbGVtZW50IHRoZSBpbnRlcmZhY2U6IGRvbid0IGNoZWNrIHRoZSBzZWxlY3Rpb25zLlxuICAgICAgICAgICAgICAvLyAtIFR5cGUgaXMga25vd24gX3RvXyBpbXBsZW1lbnQgdGhlIGludGVyZmFjZTogY2hlY2sgc2VsZWN0aW9ucy5cbiAgICAgICAgICAgICAgLy8gLSBVbmtub3duIHdoZXRoZXIgdGhlIHR5cGUgaW1wbGVtZW50cyB0aGUgaW50ZXJmYWNlOiBkb24ndCBjaGVjayB0aGUgc2VsZWN0aW9uc1xuICAgICAgICAgICAgICAvLyAgIGFuZCB0cmVhdCB0aGUgZGF0YSBhcyBtaXNzaW5nOyB3ZSBkbyB0aGlzIGJlY2F1c2UgdGhlIFJlbGF5IENvbXBpbGVyXG4gICAgICAgICAgICAgIC8vICAgZ3VhcmFudGVlcyB0aGF0IHRoZSB0eXBlIGRpc2NyaW1pbmF0b3Igd2lsbCBhbHdheXMgYmUgZmV0Y2hlZC5cbiAgICAgICAgICAgICAgdmFyIHJlY29yZFR5cGUgPSBfdGhpczIuX211dGF0b3IuZ2V0VHlwZShkYXRhSUQpO1xuXG4gICAgICAgICAgICAgICEocmVjb3JkVHlwZSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0RhdGFDaGVja2VyOiBFeHBlY3RlZCByZWNvcmQgYCVzYCB0byBoYXZlIGEga25vd24gdHlwZScsIGRhdGFJRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgICAgICB2YXIgdHlwZUlEID0gZ2VuZXJhdGVUeXBlSUQocmVjb3JkVHlwZSk7XG5cbiAgICAgICAgICAgICAgdmFyIGltcGxlbWVudHNJbnRlcmZhY2UgPSBfdGhpczIuX211dGF0b3IuZ2V0VmFsdWUodHlwZUlELCBhYnN0cmFjdEtleSk7XG5cbiAgICAgICAgICAgICAgaWYgKGltcGxlbWVudHNJbnRlcmZhY2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfdGhpczIuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uc2VsZWN0aW9ucywgZGF0YUlEKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbXBsZW1lbnRzSW50ZXJmYWNlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyB1bnN1cmUgaWYgdGhlIHR5cGUgaW1wbGVtZW50cyB0aGUgaW50ZXJmYWNlOiBkYXRhIGlzXG4gICAgICAgICAgICAgICAgLy8gbWlzc2luZyBzbyBkb24ndCBib3RoZXIgcmVhZGluZyB0aGUgZnJhZ21lbnRcbiAgICAgICAgICAgICAgICBfdGhpczIuX2hhbmRsZU1pc3NpbmcoKTtcbiAgICAgICAgICAgICAgfSAvLyBlbHNlIGZhbHNlOiBrbm93biB0byBub3QgaW1wbGVtZW50IHRoZSBpbnRlcmZhY2VcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbGVnYWN5IGJlaGF2aW9yIGZvciBhYnN0cmFjdCByZWZpbmVtZW50czogYWx3YXlzIGNoZWNrIGV2ZW5cbiAgICAgICAgICAgICAgLy8gaWYgdGhlIHR5cGUgZG9lc24ndCBjb25mb3JtXG4gICAgICAgICAgICAgIF90aGlzMi5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5zZWxlY3Rpb25zLCBkYXRhSUQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBMSU5LRURfSEFORExFOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZXMgaGF2ZSBubyBzZWxlY3Rpb25zIHRoZW1zZWx2ZXM7IHRyYXZlcnNlIHRoZSBvcmlnaW5hbCBmaWVsZFxuICAgICAgICAgICAgLy8gd2hlcmUgdGhlIGhhbmRsZSB3YXMgc2V0LXVwIGluc3RlYWQuXG4gICAgICAgICAgICB2YXIgaGFuZGxlRmllbGQgPSBjbG9uZVJlbGF5SGFuZGxlU291cmNlRmllbGQoc2VsZWN0aW9uLCBzZWxlY3Rpb25zLCBfdGhpczIuX3ZhcmlhYmxlcyk7XG5cbiAgICAgICAgICAgIGlmIChoYW5kbGVGaWVsZC5wbHVyYWwpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLl9jaGVja1BsdXJhbExpbmsoaGFuZGxlRmllbGQsIGRhdGFJRCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpczIuX2NoZWNrTGluayhoYW5kbGVGaWVsZCwgZGF0YUlEKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgU0NBTEFSX0hBTkRMRTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgX2hhbmRsZUZpZWxkID0gY2xvbmVSZWxheVNjYWxhckhhbmRsZVNvdXJjZUZpZWxkKHNlbGVjdGlvbiwgc2VsZWN0aW9ucywgX3RoaXMyLl92YXJpYWJsZXMpO1xuXG4gICAgICAgICAgICBfdGhpczIuX2NoZWNrU2NhbGFyKF9oYW5kbGVGaWVsZCwgZGF0YUlEKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgTU9EVUxFX0lNUE9SVDpcbiAgICAgICAgICBfdGhpczIuX2NoZWNrTW9kdWxlSW1wb3J0KHNlbGVjdGlvbiwgZGF0YUlEKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgREVGRVI6XG4gICAgICAgIGNhc2UgU1RSRUFNOlxuICAgICAgICAgIF90aGlzMi5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5zZWxlY3Rpb25zLCBkYXRhSUQpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdXG5cbiAgICAgICAgY2FzZSBGUkFHTUVOVF9TUFJFQUQ6XG4gICAgICAgICAgX3RoaXMyLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLmZyYWdtZW50LnNlbGVjdGlvbnMsIGRhdGFJRCk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIENMSUVOVF9FWFRFTlNJT046XG4gICAgICAgICAgdmFyIHJlY29yZFdhc01pc3NpbmcgPSBfdGhpczIuX3JlY29yZFdhc01pc3Npbmc7XG5cbiAgICAgICAgICBfdGhpczIuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uc2VsZWN0aW9ucywgZGF0YUlEKTtcblxuICAgICAgICAgIF90aGlzMi5fcmVjb3JkV2FzTWlzc2luZyA9IHJlY29yZFdhc01pc3Npbmc7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBUWVBFX0RJU0NSSU1JTkFUT1I6XG4gICAgICAgICAgaWYgKFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9QUkVDSVNFX1RZUEVfUkVGSU5FTUVOVCkge1xuICAgICAgICAgICAgdmFyIF9hYnN0cmFjdEtleSA9IHNlbGVjdGlvbi5hYnN0cmFjdEtleTtcblxuICAgICAgICAgICAgdmFyIF9yZWNvcmRUeXBlID0gX3RoaXMyLl9tdXRhdG9yLmdldFR5cGUoZGF0YUlEKTtcblxuICAgICAgICAgICAgIShfcmVjb3JkVHlwZSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0RhdGFDaGVja2VyOiBFeHBlY3RlZCByZWNvcmQgYCVzYCB0byBoYXZlIGEga25vd24gdHlwZScsIGRhdGFJRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgICAgICAgICB2YXIgX3R5cGVJRCA9IGdlbmVyYXRlVHlwZUlEKF9yZWNvcmRUeXBlKTtcblxuICAgICAgICAgICAgdmFyIF9pbXBsZW1lbnRzSW50ZXJmYWNlID0gX3RoaXMyLl9tdXRhdG9yLmdldFZhbHVlKF90eXBlSUQsIF9hYnN0cmFjdEtleSk7XG5cbiAgICAgICAgICAgIGlmIChfaW1wbGVtZW50c0ludGVyZmFjZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgIC8vIHVuc3VyZSBpZiB0aGUgdHlwZSBpbXBsZW1lbnRzIHRoZSBpbnRlcmZhY2U6IGRhdGEgaXNcbiAgICAgICAgICAgICAgLy8gbWlzc2luZ1xuICAgICAgICAgICAgICBfdGhpczIuX2hhbmRsZU1pc3NpbmcoKTtcbiAgICAgICAgICAgIH0gLy8gZWxzZTogaWYgaXQgZG9lcyBvciBkb2Vzbid0IGltcGxlbWVudCwgd2UgZG9uJ3QgbmVlZCB0byBjaGVjayBvciBza2lwIGFueXRoaW5nIGVsc2VcblxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRkxJR0hUX0ZJRUxEOlxuICAgICAgICAgIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUkVBQ1RfRkxJR0hUX0NPTVBPTkVOVF9GSUVMRCkge1xuICAgICAgICAgICAgX3RoaXMyLl9jaGVja0ZsaWdodEZpZWxkKHNlbGVjdGlvbiwgZGF0YUlEKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGbGlnaHQgZmllbGRzIGFyZSBub3QgeWV0IHN1cHBvcnRlZC4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIENMSUVOVF9DT01QT05FTlQ6XG4gICAgICAgICAgaWYgKF90aGlzMi5fc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczIuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uZnJhZ21lbnQuc2VsZWN0aW9ucywgZGF0YUlEKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgc2VsZWN0aW9uO1xuICAgICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5QXN5bmNMb2FkZXIoKTogVW5leHBlY3RlZCBhc3Qga2luZCBgJXNgLicsIHNlbGVjdGlvbi5raW5kKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLl9jaGVja01vZHVsZUltcG9ydCA9IGZ1bmN0aW9uIF9jaGVja01vZHVsZUltcG9ydChtb2R1bGVJbXBvcnQsIGRhdGFJRCkge1xuICAgIHZhciBvcGVyYXRpb25Mb2FkZXIgPSB0aGlzLl9vcGVyYXRpb25Mb2FkZXI7XG4gICAgIShvcGVyYXRpb25Mb2FkZXIgIT09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRGF0YUNoZWNrZXI6IEV4cGVjdGVkIGFuIG9wZXJhdGlvbkxvYWRlciB0byBiZSBjb25maWd1cmVkIHdoZW4gdXNpbmcgYEBtb2R1bGVgLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgb3BlcmF0aW9uS2V5ID0gZ2V0TW9kdWxlT3BlcmF0aW9uS2V5KG1vZHVsZUltcG9ydC5kb2N1bWVudE5hbWUpO1xuXG4gICAgdmFyIG9wZXJhdGlvblJlZmVyZW5jZSA9IHRoaXMuX211dGF0b3IuZ2V0VmFsdWUoZGF0YUlELCBvcGVyYXRpb25LZXkpO1xuXG4gICAgaWYgKG9wZXJhdGlvblJlZmVyZW5jZSA9PSBudWxsKSB7XG4gICAgICBpZiAob3BlcmF0aW9uUmVmZXJlbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlTWlzc2luZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5vcm1hbGl6YXRpb25Sb290Tm9kZSA9IG9wZXJhdGlvbkxvYWRlci5nZXQob3BlcmF0aW9uUmVmZXJlbmNlKTtcblxuICAgIGlmIChub3JtYWxpemF0aW9uUm9vdE5vZGUgIT0gbnVsbCkge1xuICAgICAgdmFyIG9wZXJhdGlvbiA9IGdldE9wZXJhdGlvbihub3JtYWxpemF0aW9uUm9vdE5vZGUpO1xuXG4gICAgICB0aGlzLl90cmF2ZXJzZShvcGVyYXRpb24sIGRhdGFJRCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRoZSBmcmFnbWVudCBpcyBub3QgYXZhaWxhYmxlLCB3ZSBhc3N1bWUgdGhhdCB0aGUgZGF0YSBjYW5ub3QgaGF2ZSBiZWVuXG4gICAgICAvLyBwcm9jZXNzZWQgeWV0IGFuZCBtdXN0IHRoZXJlZm9yZSBiZSBtaXNzaW5nLlxuICAgICAgdGhpcy5faGFuZGxlTWlzc2luZygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX2NoZWNrU2NhbGFyID0gZnVuY3Rpb24gX2NoZWNrU2NhbGFyKGZpZWxkLCBkYXRhSUQpIHtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0b3JhZ2VLZXkoZmllbGQsIHRoaXMuX3ZhcmlhYmxlcyk7XG5cbiAgICB2YXIgZmllbGRWYWx1ZSA9IHRoaXMuX211dGF0b3IuZ2V0VmFsdWUoZGF0YUlELCBzdG9yYWdlS2V5KTtcblxuICAgIGlmIChmaWVsZFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZpZWxkVmFsdWUgPSB0aGlzLl9oYW5kbGVNaXNzaW5nU2NhbGFyRmllbGQoZmllbGQsIGRhdGFJRCk7XG5cbiAgICAgIGlmIChmaWVsZFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fbXV0YXRvci5zZXRWYWx1ZShkYXRhSUQsIHN0b3JhZ2VLZXksIGZpZWxkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX2NoZWNrTGluayA9IGZ1bmN0aW9uIF9jaGVja0xpbmsoZmllbGQsIGRhdGFJRCkge1xuICAgIHZhciBzdG9yYWdlS2V5ID0gZ2V0U3RvcmFnZUtleShmaWVsZCwgdGhpcy5fdmFyaWFibGVzKTtcblxuICAgIHZhciBsaW5rZWRJRCA9IHRoaXMuX211dGF0b3IuZ2V0TGlua2VkUmVjb3JkSUQoZGF0YUlELCBzdG9yYWdlS2V5KTtcblxuICAgIGlmIChsaW5rZWRJRCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsaW5rZWRJRCA9IHRoaXMuX2hhbmRsZU1pc3NpbmdMaW5rRmllbGQoZmllbGQsIGRhdGFJRCk7XG5cbiAgICAgIGlmIChsaW5rZWRJRCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX211dGF0b3Iuc2V0TGlua2VkUmVjb3JkSUQoZGF0YUlELCBzdG9yYWdlS2V5LCBsaW5rZWRJRCk7XG4gICAgICB9IGVsc2UgaWYgKGxpbmtlZElEID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX211dGF0b3Iuc2V0VmFsdWUoZGF0YUlELCBzdG9yYWdlS2V5LCBudWxsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobGlua2VkSUQgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fdHJhdmVyc2UoZmllbGQsIGxpbmtlZElEKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9jaGVja1BsdXJhbExpbmsgPSBmdW5jdGlvbiBfY2hlY2tQbHVyYWxMaW5rKGZpZWxkLCBkYXRhSUQpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBzdG9yYWdlS2V5ID0gZ2V0U3RvcmFnZUtleShmaWVsZCwgdGhpcy5fdmFyaWFibGVzKTtcblxuICAgIHZhciBsaW5rZWRJRHMgPSB0aGlzLl9tdXRhdG9yLmdldExpbmtlZFJlY29yZElEcyhkYXRhSUQsIHN0b3JhZ2VLZXkpO1xuXG4gICAgaWYgKGxpbmtlZElEcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsaW5rZWRJRHMgPSB0aGlzLl9oYW5kbGVNaXNzaW5nUGx1cmFsTGlua0ZpZWxkKGZpZWxkLCBkYXRhSUQpO1xuXG4gICAgICBpZiAobGlua2VkSURzICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5fbXV0YXRvci5zZXRMaW5rZWRSZWNvcmRJRHMoZGF0YUlELCBzdG9yYWdlS2V5LCBsaW5rZWRJRHMpO1xuICAgICAgfSBlbHNlIGlmIChsaW5rZWRJRHMgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fbXV0YXRvci5zZXRWYWx1ZShkYXRhSUQsIHN0b3JhZ2VLZXksIG51bGwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChsaW5rZWRJRHMpIHtcbiAgICAgIGxpbmtlZElEcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5rZWRJRCkge1xuICAgICAgICBpZiAobGlua2VkSUQgIT0gbnVsbCkge1xuICAgICAgICAgIF90aGlzMy5fdHJhdmVyc2UoZmllbGQsIGxpbmtlZElEKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fY2hlY2tGbGlnaHRGaWVsZCA9IGZ1bmN0aW9uIF9jaGVja0ZsaWdodEZpZWxkKGZpZWxkLCBkYXRhSUQpIHtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0b3JhZ2VLZXkoZmllbGQsIHRoaXMuX3ZhcmlhYmxlcyk7XG5cbiAgICB2YXIgbGlua2VkSUQgPSB0aGlzLl9tdXRhdG9yLmdldExpbmtlZFJlY29yZElEKGRhdGFJRCwgc3RvcmFnZUtleSk7XG5cbiAgICBpZiAobGlua2VkSUQgPT0gbnVsbCkge1xuICAgICAgaWYgKGxpbmtlZElEID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlTWlzc2luZygpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0cmVlID0gdGhpcy5fbXV0YXRvci5nZXRWYWx1ZShsaW5rZWRJRCwgUmVsYXlTdG9yZVJlYWN0RmxpZ2h0VXRpbHMuUkVBQ1RfRkxJR0hUX1RSRUVfU1RPUkFHRV9LRVkpO1xuXG4gICAgdmFyIHJlYWNoYWJsZUV4ZWN1dGFibGVEZWZpbml0aW9ucyA9IHRoaXMuX211dGF0b3IuZ2V0VmFsdWUobGlua2VkSUQsIFJlbGF5U3RvcmVSZWFjdEZsaWdodFV0aWxzLlJFQUNUX0ZMSUdIVF9FWEVDVVRBQkxFX0RFRklOSVRJT05TX1NUT1JBR0VfS0VZKTtcblxuICAgIGlmICh0cmVlID09IG51bGwgfHwgIUFycmF5LmlzQXJyYXkocmVhY2hhYmxlRXhlY3V0YWJsZURlZmluaXRpb25zKSkge1xuICAgICAgdGhpcy5faGFuZGxlTWlzc2luZygpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG9wZXJhdGlvbkxvYWRlciA9IHRoaXMuX29wZXJhdGlvbkxvYWRlcjtcbiAgICAhKG9wZXJhdGlvbkxvYWRlciAhPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdEYXRhQ2hlY2tlcjogRXhwZWN0ZWQgYW4gb3BlcmF0aW9uTG9hZGVyIHRvIGJlIGNvbmZpZ3VyZWQgd2hlbiB1c2luZyAnICsgJ1JlYWN0IEZsaWdodC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7IC8vIEluIEZsaWdodCwgdGhlIHZhcmlhYmxlcyB0aGF0IGFyZSBpbiBzY29wZSBmb3IgcmVhY2hhYmxlIGV4ZWN1dGFibGVcbiAgICAvLyBkZWZpbml0aW9ucyBhcmVuJ3QgdGhlIHNhbWUgYXMgd2hhdCdzIGluIHNjb3BlIGZvciB0aGUgb3V0ZXIgcXVlcnkuXG5cbiAgICB2YXIgcHJldlZhcmlhYmxlcyA9IHRoaXMuX3ZhcmlhYmxlczsgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FzdF1cblxuICAgIHZhciBfaXRlcmF0b3I0ID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKHJlYWNoYWJsZUV4ZWN1dGFibGVEZWZpbml0aW9ucyksXG4gICAgICAgIF9zdGVwNDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjQucygpOyAhKF9zdGVwNCA9IF9pdGVyYXRvcjQubigpKS5kb25lOykge1xuICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IF9zdGVwNC52YWx1ZTtcbiAgICAgICAgdGhpcy5fdmFyaWFibGVzID0gZGVmaW5pdGlvbi52YXJpYWJsZXM7XG4gICAgICAgIHZhciBub3JtYWxpemF0aW9uUm9vdE5vZGUgPSBvcGVyYXRpb25Mb2FkZXIuZ2V0KGRlZmluaXRpb24ubW9kdWxlKTtcblxuICAgICAgICBpZiAobm9ybWFsaXphdGlvblJvb3ROb2RlICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgb3BlcmF0aW9uID0gZ2V0T3BlcmF0aW9uKG5vcm1hbGl6YXRpb25Sb290Tm9kZSk7XG5cbiAgICAgICAgICB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMob3BlcmF0aW9uLnNlbGVjdGlvbnMsIFJPT1RfSUQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHRoZSBmcmFnbWVudCBpcyBub3QgYXZhaWxhYmxlLCB3ZSBhc3N1bWUgdGhhdCB0aGUgZGF0YSBjYW5ub3QgaGF2ZVxuICAgICAgICAgIC8vIGJlZW4gcHJvY2Vzc2VkIHlldCBhbmQgbXVzdCB0aGVyZWZvcmUgYmUgbWlzc2luZy5cbiAgICAgICAgICB0aGlzLl9oYW5kbGVNaXNzaW5nKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvcjQuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3I0LmYoKTtcbiAgICB9XG5cbiAgICB0aGlzLl92YXJpYWJsZXMgPSBwcmV2VmFyaWFibGVzO1xuICB9O1xuXG4gIHJldHVybiBEYXRhQ2hlY2tlcjtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNoZWNrOiBjaGVja1xufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyXCIpKTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKTtcblxudmFyIFJlbGF5RXJyb3IgPSByZXF1aXJlKCcuLi91dGlsL1JlbGF5RXJyb3InKTtcblxudmFyIFJlbGF5RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUZlYXR1cmVGbGFncycpO1xuXG52YXIgUmVsYXlNb2Rlcm5SZWNvcmQgPSByZXF1aXJlKCcuL1JlbGF5TW9kZXJuUmVjb3JkJyk7XG5cbnZhciBSZWxheU9ic2VydmFibGUgPSByZXF1aXJlKCcuLi9uZXR3b3JrL1JlbGF5T2JzZXJ2YWJsZScpO1xuXG52YXIgUmVsYXlSZWNvcmRTb3VyY2UgPSByZXF1aXJlKCcuL1JlbGF5UmVjb3JkU291cmNlJyk7XG5cbnZhciBSZWxheVJlc3BvbnNlTm9ybWFsaXplciA9IHJlcXVpcmUoJy4vUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXInKTtcblxudmFyIGdldE9wZXJhdGlvbiA9IHJlcXVpcmUoJy4uL3V0aWwvZ2V0T3BlcmF0aW9uJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHN0YWJsZUNvcHkgPSByZXF1aXJlKCcuLi91dGlsL3N0YWJsZUNvcHknKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9DbGllbnRJRCcpLFxuICAgIGdlbmVyYXRlQ2xpZW50SUQgPSBfcmVxdWlyZS5nZW5lcmF0ZUNsaWVudElELFxuICAgIGdlbmVyYXRlVW5pcXVlQ2xpZW50SUQgPSBfcmVxdWlyZS5nZW5lcmF0ZVVuaXF1ZUNsaWVudElEO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9SZWxheU1vZGVyblNlbGVjdG9yJyksXG4gICAgY3JlYXRlTm9ybWFsaXphdGlvblNlbGVjdG9yID0gX3JlcXVpcmUyLmNyZWF0ZU5vcm1hbGl6YXRpb25TZWxlY3RvcixcbiAgICBjcmVhdGVSZWFkZXJTZWxlY3RvciA9IF9yZXF1aXJlMi5jcmVhdGVSZWFkZXJTZWxlY3RvcjtcblxudmFyIF9yZXF1aXJlMyA9IHJlcXVpcmUoJy4vUmVsYXlTdG9yZVV0aWxzJyksXG4gICAgUk9PVF9UWVBFID0gX3JlcXVpcmUzLlJPT1RfVFlQRSxcbiAgICBUWVBFTkFNRV9LRVkgPSBfcmVxdWlyZTMuVFlQRU5BTUVfS0VZLFxuICAgIGdldFN0b3JhZ2VLZXkgPSBfcmVxdWlyZTMuZ2V0U3RvcmFnZUtleTtcblxuZnVuY3Rpb24gZXhlY3V0ZShjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBFeGVjdXRvcihjb25maWcpO1xufVxuLyoqXG4gKiBDb29yZGluYXRlcyB0aGUgZXhlY3V0aW9uIG9mIGEgcXVlcnksIGhhbmRsaW5nIG5ldHdvcmsgY2FsbGJhY2tzXG4gKiBpbmNsdWRpbmcgb3B0aW1pc3RpYyBwYXlsb2Fkcywgc3RhbmRhcmQgcGF5bG9hZHMsIHJlc29sdXRpb24gb2YgbWF0Y2hcbiAqIGRlcGVuZGVuY2llcywgZXRjLlxuICovXG5cblxudmFyIEV4ZWN1dG9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRXhlY3V0b3IoX3JlZikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb3BlcmF0aW9uID0gX3JlZi5vcGVyYXRpb24sXG4gICAgICAgIG9wZXJhdGlvbkV4ZWN1dGlvbnMgPSBfcmVmLm9wZXJhdGlvbkV4ZWN1dGlvbnMsXG4gICAgICAgIG9wZXJhdGlvbkxvYWRlciA9IF9yZWYub3BlcmF0aW9uTG9hZGVyLFxuICAgICAgICBvcHRpbWlzdGljQ29uZmlnID0gX3JlZi5vcHRpbWlzdGljQ29uZmlnLFxuICAgICAgICBwdWJsaXNoUXVldWUgPSBfcmVmLnB1Ymxpc2hRdWV1ZSxcbiAgICAgICAgc2NoZWR1bGVyID0gX3JlZi5zY2hlZHVsZXIsXG4gICAgICAgIHNpbmsgPSBfcmVmLnNpbmssXG4gICAgICAgIHNvdXJjZSA9IF9yZWYuc291cmNlLFxuICAgICAgICBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICAgIHVwZGF0ZXIgPSBfcmVmLnVwZGF0ZXIsXG4gICAgICAgIG9wZXJhdGlvblRyYWNrZXIgPSBfcmVmLm9wZXJhdGlvblRyYWNrZXIsXG4gICAgICAgIHRyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCA9IF9yZWYudHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsLFxuICAgICAgICBnZXREYXRhSUQgPSBfcmVmLmdldERhdGFJRCxcbiAgICAgICAgaXNDbGllbnRQYXlsb2FkID0gX3JlZi5pc0NsaWVudFBheWxvYWQsXG4gICAgICAgIHJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplciA9IF9yZWYucmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyLFxuICAgICAgICByZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlciA9IF9yZWYucmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXIsXG4gICAgICAgIHNob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzID0gX3JlZi5zaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50cztcbiAgICB0aGlzLl9nZXREYXRhSUQgPSBnZXREYXRhSUQ7XG4gICAgdGhpcy5fdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsID0gdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsO1xuICAgIHRoaXMuX2luY3JlbWVudGFsUGF5bG9hZHNQZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5faW5jcmVtZW50YWxSZXN1bHRzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX25leHRTdWJzY3JpcHRpb25JZCA9IDA7XG4gICAgdGhpcy5fb3BlcmF0aW9uID0gb3BlcmF0aW9uO1xuICAgIHRoaXMuX29wZXJhdGlvbkV4ZWN1dGlvbnMgPSBvcGVyYXRpb25FeGVjdXRpb25zO1xuICAgIHRoaXMuX29wZXJhdGlvbkxvYWRlciA9IG9wZXJhdGlvbkxvYWRlcjtcbiAgICB0aGlzLl9vcGVyYXRpb25UcmFja2VyID0gb3BlcmF0aW9uVHJhY2tlcjtcbiAgICB0aGlzLl9vcGVyYXRpb25VcGRhdGVFcG9jaHMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fb3B0aW1pc3RpY1VwZGF0ZXMgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdNb2R1bGVQYXlsb2Fkc0NvdW50ID0gMDtcbiAgICB0aGlzLl9wdWJsaXNoUXVldWUgPSBwdWJsaXNoUXVldWU7XG4gICAgdGhpcy5fc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgIHRoaXMuX3NpbmsgPSBzaW5rO1xuICAgIHRoaXMuX3NvdXJjZSA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9zdGF0ZSA9ICdzdGFydGVkJztcbiAgICB0aGlzLl9zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fdXBkYXRlciA9IHVwZGF0ZXI7XG4gICAgdGhpcy5faXNDbGllbnRQYXlsb2FkID0gaXNDbGllbnRQYXlsb2FkID09PSB0cnVlO1xuICAgIHRoaXMuX3JlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplciA9IHJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcjtcbiAgICB0aGlzLl9yZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlciA9IHJlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyO1xuICAgIHRoaXMuX2lzU3Vic2NyaXB0aW9uT3BlcmF0aW9uID0gdGhpcy5fb3BlcmF0aW9uLnJlcXVlc3Qubm9kZS5wYXJhbXMub3BlcmF0aW9uS2luZCA9PT0gJ3N1YnNjcmlwdGlvbic7XG4gICAgdGhpcy5fc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMgPSBzaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50cztcbiAgICB2YXIgaWQgPSB0aGlzLl9uZXh0U3Vic2NyaXB0aW9uSWQrKztcbiAgICBzb3VyY2Uuc3Vic2NyaWJlKHtcbiAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLl9jb21wbGV0ZShpZCk7XG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKF9lcnJvcjIpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLl9lcnJvcihfZXJyb3IyKTtcbiAgICAgIH0sXG4gICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KHJlc3BvbnNlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgX3RoaXMuX25leHQoaWQsIHJlc3BvbnNlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBzaW5rLmVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLl9zdGFydChpZCwgc3Vic2NyaXB0aW9uKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChvcHRpbWlzdGljQ29uZmlnICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3Byb2Nlc3NPcHRpbWlzdGljUmVzcG9uc2Uob3B0aW1pc3RpY0NvbmZpZy5yZXNwb25zZSAhPSBudWxsID8ge1xuICAgICAgICBkYXRhOiBvcHRpbWlzdGljQ29uZmlnLnJlc3BvbnNlXG4gICAgICB9IDogbnVsbCwgb3B0aW1pc3RpY0NvbmZpZy51cGRhdGVyLCBmYWxzZSk7XG4gICAgfVxuICB9IC8vIENhbmNlbCBhbnkgcGVuZGluZyBleGVjdXRpb24gdGFza3MgYW5kIG1hcmsgdGhlIGV4ZWN1dG9yIGFzIGNvbXBsZXRlZC5cblxuXG4gIHZhciBfcHJvdG8gPSBFeGVjdXRvci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNhbmNlbCA9IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gJ2NvbXBsZXRlZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9zdGF0ZSA9ICdjb21wbGV0ZWQnO1xuXG4gICAgdGhpcy5fb3BlcmF0aW9uRXhlY3V0aW9uc1tcImRlbGV0ZVwiXSh0aGlzLl9vcGVyYXRpb24ucmVxdWVzdC5pZGVudGlmaWVyKTtcblxuICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb25zLnNpemUgIT09IDApIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7XG4gICAgICAgIHJldHVybiBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25zLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgdmFyIG9wdGltaXN0aWNVcGRhdGVzID0gdGhpcy5fb3B0aW1pc3RpY1VwZGF0ZXM7XG5cbiAgICBpZiAob3B0aW1pc3RpY1VwZGF0ZXMgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX29wdGltaXN0aWNVcGRhdGVzID0gbnVsbDtcbiAgICAgIG9wdGltaXN0aWNVcGRhdGVzLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLl9wdWJsaXNoUXVldWUucmV2ZXJ0VXBkYXRlKHVwZGF0ZSk7XG4gICAgICB9KTsgLy8gT0s6IHJ1biByZXZlcnQgb24gY2FuY2VsXG5cbiAgICAgIHRoaXMuX3B1Ymxpc2hRdWV1ZS5ydW4oKTtcbiAgICB9XG5cbiAgICB0aGlzLl9pbmNyZW1lbnRhbFJlc3VsdHMuY2xlYXIoKTtcblxuICAgIHRoaXMuX2NvbXBsZXRlT3BlcmF0aW9uVHJhY2tlcigpO1xuXG4gICAgaWYgKHRoaXMuX3JldGFpbkRpc3Bvc2FibGUpIHtcbiAgICAgIHRoaXMuX3JldGFpbkRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuXG4gICAgICB0aGlzLl9yZXRhaW5EaXNwb3NhYmxlID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl91cGRhdGVBY3RpdmVTdGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGVBY3RpdmVTdGF0ZSgpIHtcbiAgICB2YXIgYWN0aXZlU3RhdGU7XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3N0YXRlKSB7XG4gICAgICBjYXNlICdzdGFydGVkJzpcbiAgICAgICAge1xuICAgICAgICAgIGFjdGl2ZVN0YXRlID0gJ2FjdGl2ZSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAnbG9hZGluZ19pbmNyZW1lbnRhbCc6XG4gICAgICAgIHtcbiAgICAgICAgICBhY3RpdmVTdGF0ZSA9ICdhY3RpdmUnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgJ2NvbXBsZXRlZCc6XG4gICAgICAgIHtcbiAgICAgICAgICBhY3RpdmVTdGF0ZSA9ICdpbmFjdGl2ZSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAnbG9hZGluZ19maW5hbCc6XG4gICAgICAgIHtcbiAgICAgICAgICBhY3RpdmVTdGF0ZSA9IHRoaXMuX3BlbmRpbmdNb2R1bGVQYXlsb2Fkc0NvdW50ID4gMCA/ICdhY3RpdmUnIDogJ2luYWN0aXZlJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLl9zdGF0ZTtcbiAgICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnT3BlcmF0aW9uRXhlY3V0b3I6IGludmFsaWQgZXhlY3V0b3Igc3RhdGUuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHRoaXMuX29wZXJhdGlvbkV4ZWN1dGlvbnMuc2V0KHRoaXMuX29wZXJhdGlvbi5yZXF1ZXN0LmlkZW50aWZpZXIsIGFjdGl2ZVN0YXRlKTtcbiAgfTtcblxuICBfcHJvdG8uX3NjaGVkdWxlID0gZnVuY3Rpb24gX3NjaGVkdWxlKHRhc2spIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLl9zY2hlZHVsZXI7XG5cbiAgICBpZiAoc2NoZWR1bGVyICE9IG51bGwpIHtcbiAgICAgIHZhciBfaWQyID0gdGhpcy5fbmV4dFN1YnNjcmlwdGlvbklkKys7XG5cbiAgICAgIFJlbGF5T2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgdmFyIGNhbmNlbGxhdGlvblRva2VuID0gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGFzaygpO1xuICAgICAgICAgICAgc2luay5jb21wbGV0ZSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzY2hlZHVsZXIuY2FuY2VsKGNhbmNlbGxhdGlvblRva2VuKTtcbiAgICAgICAgfTtcbiAgICAgIH0pLnN1YnNjcmliZSh7XG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLl9jb21wbGV0ZShfaWQyKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKF9lcnJvcjMpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLl9lcnJvcihfZXJyb3IzKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgIHJldHVybiBfdGhpczMuX3N0YXJ0KF9pZDIsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXNrKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fY29tcGxldGUgPSBmdW5jdGlvbiBfY29tcGxldGUoaWQpIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zW1wiZGVsZXRlXCJdKGlkKTtcblxuICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb25zLnNpemUgPT09IDApIHtcbiAgICAgIHRoaXMuY2FuY2VsKCk7XG5cbiAgICAgIHRoaXMuX3NpbmsuY29tcGxldGUoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9lcnJvciA9IGZ1bmN0aW9uIF9lcnJvcihlcnJvcikge1xuICAgIHRoaXMuY2FuY2VsKCk7XG5cbiAgICB0aGlzLl9zaW5rLmVycm9yKGVycm9yKTtcbiAgfTtcblxuICBfcHJvdG8uX3N0YXJ0ID0gZnVuY3Rpb24gX3N0YXJ0KGlkLCBzdWJzY3JpcHRpb24pIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zLnNldChpZCwgc3Vic2NyaXB0aW9uKTtcblxuICAgIHRoaXMuX3VwZGF0ZUFjdGl2ZVN0YXRlKCk7XG4gIH0gLy8gSGFuZGxlIGEgcmF3IEdyYXBoUUwgcmVzcG9uc2UuXG4gIDtcblxuICBfcHJvdG8uX25leHQgPSBmdW5jdGlvbiBfbmV4dChfaWQsIHJlc3BvbnNlKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB0aGlzLl9zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczQuX2hhbmRsZU5leHQocmVzcG9uc2UpO1xuXG4gICAgICBfdGhpczQuX21heWJlQ29tcGxldGVTdWJzY3JpcHRpb25PcGVyYXRpb25UcmFja2luZygpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5faGFuZGxlRXJyb3JSZXNwb25zZSA9IGZ1bmN0aW9uIF9oYW5kbGVFcnJvclJlc3BvbnNlKHJlc3BvbnNlcykge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICByZXNwb25zZXMuZm9yRWFjaChmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIGlmIChyZXNwb25zZS5kYXRhID09PSBudWxsICYmIHJlc3BvbnNlLmV4dGVuc2lvbnMgIT0gbnVsbCAmJiAhcmVzcG9uc2UuaGFzT3duUHJvcGVydHkoJ2Vycm9ycycpKSB7XG4gICAgICAgIC8vIFNraXAgZXh0ZW5zaW9ucy1vbmx5IHBheWxvYWRzXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YSA9PSBudWxsKSB7XG4gICAgICAgIC8vIEVycm9yIGlmIGFueSBvdGhlciBwYXlsb2FkIGluIHRoZSBiYXRjaCBpcyBtaXNzaW5nIGRhdGEsIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlclxuICAgICAgICAvLyBpdCBoYWQgYGVycm9yc2Agb3Igbm90LlxuICAgICAgICB2YXIgZXJyb3JzID0gcmVzcG9uc2UuaGFzT3duUHJvcGVydHkoJ2Vycm9ycycpICYmIHJlc3BvbnNlLmVycm9ycyAhPSBudWxsID8gcmVzcG9uc2UuZXJyb3JzIDogbnVsbDtcbiAgICAgICAgdmFyIG1lc3NhZ2VzID0gZXJyb3JzID8gZXJyb3JzLm1hcChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgICB2YXIgbWVzc2FnZSA9IF9yZWYyLm1lc3NhZ2U7XG4gICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgIH0pLmpvaW4oJ1xcbicpIDogJyhObyBlcnJvcnMpJztcbiAgICAgICAgdmFyIGVycm9yID0gUmVsYXlFcnJvci5jcmVhdGUoJ1JlbGF5TmV0d29yaycsICdObyBkYXRhIHJldHVybmVkIGZvciBvcGVyYXRpb24gYCcgKyBfdGhpczUuX29wZXJhdGlvbi5yZXF1ZXN0Lm5vZGUucGFyYW1zLm5hbWUgKyAnYCwgZ290IGVycm9yKHMpOlxcbicgKyBtZXNzYWdlcyArICdcXG5cXG5TZWUgdGhlIGVycm9yIGBzb3VyY2VgIHByb3BlcnR5IGZvciBtb3JlIGluZm9ybWF0aW9uLicpO1xuICAgICAgICBlcnJvci5zb3VyY2UgPSB7XG4gICAgICAgICAgZXJyb3JzOiBlcnJvcnMsXG4gICAgICAgICAgb3BlcmF0aW9uOiBfdGhpczUuX29wZXJhdGlvbi5yZXF1ZXN0Lm5vZGUsXG4gICAgICAgICAgdmFyaWFibGVzOiBfdGhpczUuX29wZXJhdGlvbi5yZXF1ZXN0LnZhcmlhYmxlc1xuICAgICAgICB9OyAvLyBJbiBWOCwgRXJyb3Igb2JqZWN0cyBrZWVwIHRoZSBjbG9zdXJlIHNjb3BlIGNoYWluIGFsaXZlIHVudGlsIHRoZVxuICAgICAgICAvLyBlcnIuc3RhY2sgcHJvcGVydHkgaXMgYWNjZXNzZWQuXG5cbiAgICAgICAgZXJyb3Iuc3RhY2s7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3BvbnNlV2l0aERhdGEgPSByZXNwb25zZTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3BvbnNlV2l0aERhdGEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm4gYm9vbGVhbiB0byBpbmRpY2F0ZSBpZiB0aGUgb3B0aW1pc3RpY1xuICAgKiByZXNwb25zZSBoYXMgYmVlbiBoYW5kbGVkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9oYW5kbGVPcHRpbWlzdGljUmVzcG9uc2VzID0gZnVuY3Rpb24gX2hhbmRsZU9wdGltaXN0aWNSZXNwb25zZXMocmVzcG9uc2VzKSB7XG4gICAgdmFyIF9yZXNwb25zZSRleHRlbnNpb25zO1xuXG4gICAgaWYgKHJlc3BvbnNlcy5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAocmVzcG9uc2VzLnNvbWUoZnVuY3Rpb24gKHJlc3BvbnNlUGFydCkge1xuICAgICAgICB2YXIgX3Jlc3BvbnNlUGFydCRleHRlbnNpO1xuXG4gICAgICAgIHJldHVybiAoKF9yZXNwb25zZVBhcnQkZXh0ZW5zaSA9IHJlc3BvbnNlUGFydC5leHRlbnNpb25zKSA9PT0gbnVsbCB8fCBfcmVzcG9uc2VQYXJ0JGV4dGVuc2kgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yZXNwb25zZVBhcnQkZXh0ZW5zaS5pc09wdGltaXN0aWMpID09PSB0cnVlO1xuICAgICAgfSkpIHtcbiAgICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnT3B0aW1pc3RpYyByZXNwb25zZXMgY2Fubm90IGJlIGJhdGNoZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHJlc3BvbnNlID0gcmVzcG9uc2VzWzBdO1xuICAgIHZhciBpc09wdGltaXN0aWMgPSAoKF9yZXNwb25zZSRleHRlbnNpb25zID0gcmVzcG9uc2UuZXh0ZW5zaW9ucykgPT09IG51bGwgfHwgX3Jlc3BvbnNlJGV4dGVuc2lvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yZXNwb25zZSRleHRlbnNpb25zLmlzT3B0aW1pc3RpYykgPT09IHRydWU7XG5cbiAgICBpZiAoaXNPcHRpbWlzdGljICYmIHRoaXMuX3N0YXRlICE9PSAnc3RhcnRlZCcpIHtcbiAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ09wZXJhdGlvbkV4ZWN1dG9yOiBvcHRpbWlzdGljIHBheWxvYWQgcmVjZWl2ZWQgYWZ0ZXIgc2VydmVyIHBheWxvYWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIGlmIChpc09wdGltaXN0aWMpIHtcbiAgICAgIHRoaXMuX3Byb2Nlc3NPcHRpbWlzdGljUmVzcG9uc2UocmVzcG9uc2UsIG51bGwsIHRoaXMuX3RyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCk7XG5cbiAgICAgIHRoaXMuX3NpbmsubmV4dChyZXNwb25zZSk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8uX2hhbmRsZU5leHQgPSBmdW5jdGlvbiBfaGFuZGxlTmV4dChyZXNwb25zZSkge1xuICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gJ2NvbXBsZXRlZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcmVzcG9uc2VzID0gQXJyYXkuaXNBcnJheShyZXNwb25zZSkgPyByZXNwb25zZSA6IFtyZXNwb25zZV07XG5cbiAgICB2YXIgcmVzcG9uc2VzV2l0aERhdGEgPSB0aGlzLl9oYW5kbGVFcnJvclJlc3BvbnNlKHJlc3BvbnNlcyk7XG5cbiAgICBpZiAocmVzcG9uc2VzV2l0aERhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBubyByZXN1bHRzIHdpdGggZGF0YSwgbm90aGluZyB0byBwcm9jZXNzXG4gICAgICAvLyB0aGlzIGNhbiBvY2N1ciB3aXRoIGV4dGVuc2lvbnMtb25seSBwYXlsb2Fkc1xuICAgICAgdmFyIGlzRmluYWwgPSByZXNwb25zZXMuc29tZShmdW5jdGlvbiAoeCkge1xuICAgICAgICB2YXIgX3gkZXh0ZW5zaW9ucztcblxuICAgICAgICByZXR1cm4gKChfeCRleHRlbnNpb25zID0geC5leHRlbnNpb25zKSA9PT0gbnVsbCB8fCBfeCRleHRlbnNpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfeCRleHRlbnNpb25zLmlzX2ZpbmFsKSA9PT0gdHJ1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaXNGaW5hbCkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9ICdsb2FkaW5nX2ZpbmFsJztcblxuICAgICAgICB0aGlzLl91cGRhdGVBY3RpdmVTdGF0ZSgpO1xuXG4gICAgICAgIHRoaXMuX2luY3JlbWVudGFsUGF5bG9hZHNQZW5kaW5nID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NpbmsubmV4dChyZXNwb25zZSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIE5leHQsIGhhbmRsZSBvcHRpbWlzdGljIHJlc3BvbnNlc1xuXG5cbiAgICB2YXIgaXNPcHRpbWlzdGljID0gdGhpcy5faGFuZGxlT3B0aW1pc3RpY1Jlc3BvbnNlcyhyZXNwb25zZXNXaXRoRGF0YSk7XG5cbiAgICBpZiAoaXNPcHRpbWlzdGljKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIF9wYXJ0aXRpb25HcmFwaFFMUmVzcCA9IHBhcnRpdGlvbkdyYXBoUUxSZXNwb25zZXMocmVzcG9uc2VzV2l0aERhdGEpLFxuICAgICAgICBub25JbmNyZW1lbnRhbFJlc3BvbnNlcyA9IF9wYXJ0aXRpb25HcmFwaFFMUmVzcFswXSxcbiAgICAgICAgaW5jcmVtZW50YWxSZXNwb25zZXMgPSBfcGFydGl0aW9uR3JhcGhRTFJlc3BbMV07XG5cbiAgICB2YXIgaGFzTm9uSW5jcmVtZW50YWxSZXNwb25zZXMgPSBub25JbmNyZW1lbnRhbFJlc3BvbnNlcy5sZW5ndGggPiAwOyAvLyBJbiB0aGVvcnkgdGhpcyBkb2Vzbid0IHByZXNlcnZlIHRoZSBvcmRlcmluZyBvZiB0aGUgYmF0Y2guXG4gICAgLy8gVGhlIGlkZWEgaXMgdGhhdCBhIGJhdGNoIGlzIGFsd2F5czpcbiAgICAvLyAgKiBhdCBtb3N0IG9uZSBub24taW5jcmVtZW50YWwgcGF5bG9hZFxuICAgIC8vICAqIGZvbGxvd2VkIGJ5IHplcm8gb3IgbW9yZSBpbmNyZW1lbnRhbCBwYXlsb2Fkc1xuICAgIC8vIFRoZSBub24taW5jcmVtZW50YWwgcGF5bG9hZCBjYW4gYXBwZWFyIGlmIHRoZSBzZXJ2ZXIgc2VuZHMgYSBiYXRjaFxuICAgIC8vIHdpdGggdGhlIGluaXRpYWwgcGF5bG9hZCBmb2xsb3dlZCBieSBzb21lIGVhcmx5LXRvLXJlc29sdmUgaW5jcmVtZW50YWxcbiAgICAvLyBwYXlsb2FkcyAoYWx0aG91Z2gsIGNhbiB0aGF0IGV2ZW4gaGFwcGVuPylcblxuICAgIGlmIChoYXNOb25JbmNyZW1lbnRhbFJlc3BvbnNlcykge1xuICAgICAgdmFyIHBheWxvYWRGb2xsb3d1cHMgPSB0aGlzLl9wcm9jZXNzUmVzcG9uc2VzKG5vbkluY3JlbWVudGFsUmVzcG9uc2VzKTtcblxuICAgICAgaWYgKCFSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfQkFUQ0hFRF9TVE9SRV9VUERBVEVTKSB7XG4gICAgICAgIHZhciB1cGRhdGVkT3duZXJzID0gdGhpcy5fcHVibGlzaFF1ZXVlLnJ1bih0aGlzLl9vcGVyYXRpb24pO1xuXG4gICAgICAgIHRoaXMuX3VwZGF0ZU9wZXJhdGlvblRyYWNrZXIodXBkYXRlZE93bmVycyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3Byb2Nlc3NQYXlsb2FkRm9sbG93dXBzKHBheWxvYWRGb2xsb3d1cHMpO1xuXG4gICAgICBpZiAoIVJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9CQVRDSEVEX1NUT1JFX1VQREFURVMpIHtcbiAgICAgICAgaWYgKHRoaXMuX2luY3JlbWVudGFsUGF5bG9hZHNQZW5kaW5nICYmICF0aGlzLl9yZXRhaW5EaXNwb3NhYmxlKSB7XG4gICAgICAgICAgdGhpcy5fcmV0YWluRGlzcG9zYWJsZSA9IHRoaXMuX3N0b3JlLnJldGFpbih0aGlzLl9vcGVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluY3JlbWVudGFsUmVzcG9uc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBfcGF5bG9hZEZvbGxvd3VwcyA9IHRoaXMuX3Byb2Nlc3NJbmNyZW1lbnRhbFJlc3BvbnNlcyhpbmNyZW1lbnRhbFJlc3BvbnNlcyk7XG5cbiAgICAgIGlmICghUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX0JBVENIRURfU1RPUkVfVVBEQVRFUykge1xuICAgICAgICAvLyBGb3IgdGhlIGluY3JlbWVudGFsIGNhc2UsIHdlJ3JlIG9ubHkgaGFuZGxpbmcgZm9sbG93LXVwIHJlc3BvbnNlc1xuICAgICAgICAvLyBmb3IgYWxyZWFkeSBpbml0aWF0ZWQgb3BlcmF0aW9uIChhbmQgd2UncmUgbm90IHBhc3NpbmcgaXQgdG9cbiAgICAgICAgLy8gdGhlIHJ1biguLi4pIGNhbGwpXG4gICAgICAgIHZhciBfdXBkYXRlZE93bmVycyA9IHRoaXMuX3B1Ymxpc2hRdWV1ZS5ydW4oKTtcblxuICAgICAgICB0aGlzLl91cGRhdGVPcGVyYXRpb25UcmFja2VyKF91cGRhdGVkT3duZXJzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcHJvY2Vzc1BheWxvYWRGb2xsb3d1cHMoX3BheWxvYWRGb2xsb3d1cHMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9pc1N1YnNjcmlwdGlvbk9wZXJhdGlvbiAmJiBSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfVU5JUVVFX1NVQlNDUklQVElPTl9ST09UKSB7XG4gICAgICAvLyBXZSBhdHRhY2ggdGhlIGlkIHRvIGFsbG93IHRoZSBgcmVxdWVzdFN1YnNjcmlwdGlvbmAgdG8gcmVhZCBmcm9tIHRoZSBzdG9yZSB1c2luZ1xuICAgICAgLy8gdGhlIGN1cnJlbnQgaWQgaW4gaXRzIGBvbk5leHRgIGNhbGxiYWNrXG4gICAgICBpZiAocmVzcG9uc2VzV2l0aERhdGFbMF0uZXh0ZW5zaW9ucyA9PSBudWxsKSB7XG4gICAgICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuICAgICAgICByZXNwb25zZXNXaXRoRGF0YVswXS5leHRlbnNpb25zID0ge1xuICAgICAgICAgIF9fcmVsYXlfc3Vic2NyaXB0aW9uX3Jvb3RfaWQ6IHRoaXMuX29wZXJhdGlvbi5mcmFnbWVudC5kYXRhSURcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3BvbnNlc1dpdGhEYXRhWzBdLmV4dGVuc2lvbnMuX19yZWxheV9zdWJzY3JpcHRpb25fcm9vdF9pZCA9IHRoaXMuX29wZXJhdGlvbi5mcmFnbWVudC5kYXRhSUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9CQVRDSEVEX1NUT1JFX1VQREFURVMpIHtcbiAgICAgIC8vIE9LOiBydW4gb25jZSBhZnRlciBlYWNoIG5ldyBwYXlsb2FkXG4gICAgICAvLyBJZiB3ZSBoYXZlIG5vbi1pbmNyZW1lbnRhbCByZXNwb25zZXMsIHdlIHBhc3NpbmcgYHRoaXMuX29wZXJhdGlvbmAgdG9cbiAgICAgIC8vIHRoZSBwdWJsaXNoIHF1ZXVlIGhlcmUsIHdoaWNoIHdpbGwgbGF0ZXIgYmUgcGFzc2VkIHRvIHRoZSBzdG9yZSAodmlhXG4gICAgICAvLyBub3RpZnkpIHRvIGluZGljYXRlIHRoYXQgdGhpcyBvcGVyYXRpb24gY2F1c2VkIHRoZSBzdG9yZSB0byB1cGRhdGVcbiAgICAgIHZhciBfdXBkYXRlZE93bmVyczIgPSB0aGlzLl9wdWJsaXNoUXVldWUucnVuKGhhc05vbkluY3JlbWVudGFsUmVzcG9uc2VzID8gdGhpcy5fb3BlcmF0aW9uIDogdW5kZWZpbmVkKTtcblxuICAgICAgaWYgKGhhc05vbkluY3JlbWVudGFsUmVzcG9uc2VzKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbmNyZW1lbnRhbFBheWxvYWRzUGVuZGluZyAmJiAhdGhpcy5fcmV0YWluRGlzcG9zYWJsZSkge1xuICAgICAgICAgIHRoaXMuX3JldGFpbkRpc3Bvc2FibGUgPSB0aGlzLl9zdG9yZS5yZXRhaW4odGhpcy5fb3BlcmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl91cGRhdGVPcGVyYXRpb25UcmFja2VyKF91cGRhdGVkT3duZXJzMik7XG4gICAgfVxuXG4gICAgdGhpcy5fc2luay5uZXh0KHJlc3BvbnNlKTtcbiAgfTtcblxuICBfcHJvdG8uX3Byb2Nlc3NPcHRpbWlzdGljUmVzcG9uc2UgPSBmdW5jdGlvbiBfcHJvY2Vzc09wdGltaXN0aWNSZXNwb25zZShyZXNwb25zZSwgdXBkYXRlciwgdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAhKHRoaXMuX29wdGltaXN0aWNVcGRhdGVzID09PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2Vudmlyb25tZW50LmV4ZWN1dGU6IG9ubHkgc3VwcG9ydCBvbmUgb3B0aW1pc3RpYyByZXNwb25zZSBwZXIgJyArICdleGVjdXRlLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmIChyZXNwb25zZSA9PSBudWxsICYmIHVwZGF0ZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvcHRpbWlzdGljVXBkYXRlcyA9IFtdO1xuXG4gICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICB2YXIgcGF5bG9hZCA9IG5vcm1hbGl6ZVJlc3BvbnNlKHJlc3BvbnNlLCB0aGlzLl9vcGVyYXRpb24ucm9vdCwgUk9PVF9UWVBFLCB7XG4gICAgICAgIGdldERhdGFJRDogdGhpcy5fZ2V0RGF0YUlELFxuICAgICAgICBwYXRoOiBbXSxcbiAgICAgICAgcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyOiB0aGlzLl9yZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIsXG4gICAgICAgIHJlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyOiB0aGlzLl9yZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcixcbiAgICAgICAgc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHM6IHRoaXMuX3Nob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzLFxuICAgICAgICB0cmVhdE1pc3NpbmdGaWVsZHNBc051bGw6IHRyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbFxuICAgICAgfSk7XG4gICAgICB2YWxpZGF0ZU9wdGltaXN0aWNSZXNwb25zZVBheWxvYWQocGF5bG9hZCk7XG4gICAgICBvcHRpbWlzdGljVXBkYXRlcy5wdXNoKHtcbiAgICAgICAgb3BlcmF0aW9uOiB0aGlzLl9vcGVyYXRpb24sXG4gICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXJcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9wcm9jZXNzT3B0aW1pc3RpY0ZvbGxvd3VwcyhwYXlsb2FkLCBvcHRpbWlzdGljVXBkYXRlcyk7XG4gICAgfSBlbHNlIGlmICh1cGRhdGVyKSB7XG4gICAgICBvcHRpbWlzdGljVXBkYXRlcy5wdXNoKHtcbiAgICAgICAgb3BlcmF0aW9uOiB0aGlzLl9vcGVyYXRpb24sXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBlcnJvcnM6IG51bGwsXG4gICAgICAgICAgZmllbGRQYXlsb2FkczogbnVsbCxcbiAgICAgICAgICBpbmNyZW1lbnRhbFBsYWNlaG9sZGVyczogbnVsbCxcbiAgICAgICAgICBtb2R1bGVJbXBvcnRQYXlsb2FkczogbnVsbCxcbiAgICAgICAgICBzb3VyY2U6IFJlbGF5UmVjb3JkU291cmNlLmNyZWF0ZSgpLFxuICAgICAgICAgIGlzRmluYWw6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXJcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuX29wdGltaXN0aWNVcGRhdGVzID0gb3B0aW1pc3RpY1VwZGF0ZXM7XG4gICAgb3B0aW1pc3RpY1VwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAodXBkYXRlKSB7XG4gICAgICByZXR1cm4gX3RoaXM2Ll9wdWJsaXNoUXVldWUuYXBwbHlVcGRhdGUodXBkYXRlKTtcbiAgICB9KTsgLy8gT0s6IG9ubHkgY2FsbGVkIG9uIGNvbnN0cnVjdGlvbiBhbmQgd2hlbiByZWNlaXZpbmcgYW4gb3B0aW1pc3RpYyBwYXlsb2FkIGZyb20gbmV0d29yayxcbiAgICAvLyB3aGljaCBkb2Vzbid0IGZhbGwtdGhyb3VnaCB0byB0aGUgcmVndWxhciBuZXh0KCkgaGFuZGxpbmdcblxuICAgIHRoaXMuX3B1Ymxpc2hRdWV1ZS5ydW4oKTtcbiAgfTtcblxuICBfcHJvdG8uX3Byb2Nlc3NPcHRpbWlzdGljRm9sbG93dXBzID0gZnVuY3Rpb24gX3Byb2Nlc3NPcHRpbWlzdGljRm9sbG93dXBzKHBheWxvYWQsIG9wdGltaXN0aWNVcGRhdGVzKSB7XG4gICAgaWYgKHBheWxvYWQubW9kdWxlSW1wb3J0UGF5bG9hZHMgJiYgcGF5bG9hZC5tb2R1bGVJbXBvcnRQYXlsb2Fkcy5sZW5ndGgpIHtcbiAgICAgIHZhciBtb2R1bGVJbXBvcnRQYXlsb2FkcyA9IHBheWxvYWQubW9kdWxlSW1wb3J0UGF5bG9hZHM7XG4gICAgICB2YXIgb3BlcmF0aW9uTG9hZGVyID0gdGhpcy5fb3BlcmF0aW9uTG9hZGVyO1xuICAgICAgIW9wZXJhdGlvbkxvYWRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuRW52aXJvbm1lbnQ6IEV4cGVjdGVkIGFuIG9wZXJhdGlvbkxvYWRlciB0byBiZSAnICsgJ2NvbmZpZ3VyZWQgd2hlbiB1c2luZyBgQG1hdGNoYC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICAgIHZhciBfaXRlcmF0b3IgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkobW9kdWxlSW1wb3J0UGF5bG9hZHMpLFxuICAgICAgICAgIF9zdGVwO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBtb2R1bGVJbXBvcnRQYXlsb2FkID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgdmFyIG9wZXJhdGlvbiA9IG9wZXJhdGlvbkxvYWRlci5nZXQobW9kdWxlSW1wb3J0UGF5bG9hZC5vcGVyYXRpb25SZWZlcmVuY2UpO1xuXG4gICAgICAgICAgaWYgKG9wZXJhdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzQXN5bmNPcHRpbWlzdGljTW9kdWxlSW1wb3J0KG9wZXJhdGlvbkxvYWRlciwgbW9kdWxlSW1wb3J0UGF5bG9hZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBtb2R1bGVJbXBvcnRPcHRpbWlzdGljVXBkYXRlcyA9IHRoaXMuX3Byb2Nlc3NPcHRpbWlzdGljTW9kdWxlSW1wb3J0KG9wZXJhdGlvbiwgbW9kdWxlSW1wb3J0UGF5bG9hZCk7XG5cbiAgICAgICAgICAgIG9wdGltaXN0aWNVcGRhdGVzLnB1c2guYXBwbHkob3B0aW1pc3RpY1VwZGF0ZXMsICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkobW9kdWxlSW1wb3J0T3B0aW1pc3RpY1VwZGF0ZXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9ub3JtYWxpemVNb2R1bGVJbXBvcnQgPSBmdW5jdGlvbiBfbm9ybWFsaXplTW9kdWxlSW1wb3J0KG1vZHVsZUltcG9ydFBheWxvYWQsIG9wZXJhdGlvbikge1xuICAgIHZhciBzZWxlY3RvciA9IGNyZWF0ZU5vcm1hbGl6YXRpb25TZWxlY3RvcihvcGVyYXRpb24sIG1vZHVsZUltcG9ydFBheWxvYWQuZGF0YUlELCBtb2R1bGVJbXBvcnRQYXlsb2FkLnZhcmlhYmxlcyk7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVJlc3BvbnNlKHtcbiAgICAgIGRhdGE6IG1vZHVsZUltcG9ydFBheWxvYWQuZGF0YVxuICAgIH0sIHNlbGVjdG9yLCBtb2R1bGVJbXBvcnRQYXlsb2FkLnR5cGVOYW1lLCB7XG4gICAgICBnZXREYXRhSUQ6IHRoaXMuX2dldERhdGFJRCxcbiAgICAgIHBhdGg6IG1vZHVsZUltcG9ydFBheWxvYWQucGF0aCxcbiAgICAgIHJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcjogdGhpcy5fcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyLFxuICAgICAgcmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXI6IHRoaXMuX3JlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyLFxuICAgICAgdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsOiB0aGlzLl90cmVhdE1pc3NpbmdGaWVsZHNBc051bGwsXG4gICAgICBzaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50czogdGhpcy5fc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHNcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uX3Byb2Nlc3NPcHRpbWlzdGljTW9kdWxlSW1wb3J0ID0gZnVuY3Rpb24gX3Byb2Nlc3NPcHRpbWlzdGljTW9kdWxlSW1wb3J0KG5vcm1hbGl6YXRpb25Sb290Tm9kZSwgbW9kdWxlSW1wb3J0UGF5bG9hZCkge1xuICAgIHZhciBvcGVyYXRpb24gPSBnZXRPcGVyYXRpb24obm9ybWFsaXphdGlvblJvb3ROb2RlKTtcbiAgICB2YXIgb3B0aW1pc3RpY1VwZGF0ZXMgPSBbXTtcblxuICAgIHZhciBtb2R1bGVQYXlsb2FkID0gdGhpcy5fbm9ybWFsaXplTW9kdWxlSW1wb3J0KG1vZHVsZUltcG9ydFBheWxvYWQsIG9wZXJhdGlvbik7XG5cbiAgICB2YWxpZGF0ZU9wdGltaXN0aWNSZXNwb25zZVBheWxvYWQobW9kdWxlUGF5bG9hZCk7XG4gICAgb3B0aW1pc3RpY1VwZGF0ZXMucHVzaCh7XG4gICAgICBvcGVyYXRpb246IHRoaXMuX29wZXJhdGlvbixcbiAgICAgIHBheWxvYWQ6IG1vZHVsZVBheWxvYWQsXG4gICAgICB1cGRhdGVyOiBudWxsXG4gICAgfSk7XG5cbiAgICB0aGlzLl9wcm9jZXNzT3B0aW1pc3RpY0ZvbGxvd3Vwcyhtb2R1bGVQYXlsb2FkLCBvcHRpbWlzdGljVXBkYXRlcyk7XG5cbiAgICByZXR1cm4gb3B0aW1pc3RpY1VwZGF0ZXM7XG4gIH07XG5cbiAgX3Byb3RvLl9wcm9jZXNzQXN5bmNPcHRpbWlzdGljTW9kdWxlSW1wb3J0ID0gZnVuY3Rpb24gX3Byb2Nlc3NBc3luY09wdGltaXN0aWNNb2R1bGVJbXBvcnQob3BlcmF0aW9uTG9hZGVyLCBtb2R1bGVJbXBvcnRQYXlsb2FkKSB7XG4gICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICBvcGVyYXRpb25Mb2FkZXIubG9hZChtb2R1bGVJbXBvcnRQYXlsb2FkLm9wZXJhdGlvblJlZmVyZW5jZSkudGhlbihmdW5jdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgICBpZiAob3BlcmF0aW9uID09IG51bGwgfHwgX3RoaXM3Ll9zdGF0ZSAhPT0gJ3N0YXJ0ZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG1vZHVsZUltcG9ydE9wdGltaXN0aWNVcGRhdGVzID0gX3RoaXM3Ll9wcm9jZXNzT3B0aW1pc3RpY01vZHVsZUltcG9ydChvcGVyYXRpb24sIG1vZHVsZUltcG9ydFBheWxvYWQpO1xuXG4gICAgICBtb2R1bGVJbXBvcnRPcHRpbWlzdGljVXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNy5fcHVibGlzaFF1ZXVlLmFwcGx5VXBkYXRlKHVwZGF0ZSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKF90aGlzNy5fb3B0aW1pc3RpY1VwZGF0ZXMgPT0gbnVsbCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnT3BlcmF0aW9uRXhlY3V0b3I6IFVuZXhwZWN0ZWQgTW9kdWxlSW1wb3J0IG9wdGltaXN0aWMgJyArICd1cGRhdGUgaW4gb3BlcmF0aW9uICVzLicgKyBfdGhpczcuX29wZXJhdGlvbi5yZXF1ZXN0Lm5vZGUucGFyYW1zLm5hbWUpIDogdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF90aGlzJF9vcHRpbWlzdGljVXBkYTtcblxuICAgICAgICAoX3RoaXMkX29wdGltaXN0aWNVcGRhID0gX3RoaXM3Ll9vcHRpbWlzdGljVXBkYXRlcykucHVzaC5hcHBseShfdGhpcyRfb3B0aW1pc3RpY1VwZGEsICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkobW9kdWxlSW1wb3J0T3B0aW1pc3RpY1VwZGF0ZXMpKTsgLy8gT0s6IGFsd2F5cyBoYXZlIHRvIHJ1bigpIGFmdGVyIGFuIG1vZHVsZSBpbXBvcnQgcmVzb2x2ZXMgYXN5bmNcblxuXG4gICAgICAgIF90aGlzNy5fcHVibGlzaFF1ZXVlLnJ1bigpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5fcHJvY2Vzc1Jlc3BvbnNlcyA9IGZ1bmN0aW9uIF9wcm9jZXNzUmVzcG9uc2VzKHJlc3BvbnNlcykge1xuICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuX29wdGltaXN0aWNVcGRhdGVzICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl9vcHRpbWlzdGljVXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzOC5fcHVibGlzaFF1ZXVlLnJldmVydFVwZGF0ZSh1cGRhdGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX29wdGltaXN0aWNVcGRhdGVzID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLl9pbmNyZW1lbnRhbFBheWxvYWRzUGVuZGluZyA9IGZhbHNlO1xuXG4gICAgdGhpcy5faW5jcmVtZW50YWxSZXN1bHRzLmNsZWFyKCk7XG5cbiAgICB0aGlzLl9zb3VyY2UuY2xlYXIoKTtcblxuICAgIHJldHVybiByZXNwb25zZXMubWFwKGZ1bmN0aW9uIChwYXlsb2FkUGFydCkge1xuICAgICAgdmFyIHJlbGF5UGF5bG9hZCA9IG5vcm1hbGl6ZVJlc3BvbnNlKHBheWxvYWRQYXJ0LCBfdGhpczguX29wZXJhdGlvbi5yb290LCBST09UX1RZUEUsIHtcbiAgICAgICAgZ2V0RGF0YUlEOiBfdGhpczguX2dldERhdGFJRCxcbiAgICAgICAgcGF0aDogW10sXG4gICAgICAgIHJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcjogX3RoaXM4Ll9yZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIsXG4gICAgICAgIHJlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyOiBfdGhpczguX3JlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyLFxuICAgICAgICB0cmVhdE1pc3NpbmdGaWVsZHNBc051bGw6IF90aGlzOC5fdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsLFxuICAgICAgICBzaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50czogX3RoaXM4Ll9zaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50c1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzOC5fcHVibGlzaFF1ZXVlLmNvbW1pdFBheWxvYWQoX3RoaXM4Ll9vcGVyYXRpb24sIHJlbGF5UGF5bG9hZCwgX3RoaXM4Ll91cGRhdGVyKTtcblxuICAgICAgcmV0dXJuIHJlbGF5UGF5bG9hZDtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyBhbnkgZm9sbG93LXVwIGFjdGlvbnMgZm9yIGEgUmVsYXkgcGF5bG9hZCBmb3IgQG1hdGNoLCBAZGVmZXIsXG4gICAqIGFuZCBAc3RyZWFtIGRpcmVjdGl2ZXMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9wcm9jZXNzUGF5bG9hZEZvbGxvd3VwcyA9IGZ1bmN0aW9uIF9wcm9jZXNzUGF5bG9hZEZvbGxvd3VwcyhwYXlsb2Fkcykge1xuICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuX3N0YXRlID09PSAnY29tcGxldGVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBheWxvYWRzLmZvckVhY2goZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgIHZhciBpbmNyZW1lbnRhbFBsYWNlaG9sZGVycyA9IHBheWxvYWQuaW5jcmVtZW50YWxQbGFjZWhvbGRlcnMsXG4gICAgICAgICAgbW9kdWxlSW1wb3J0UGF5bG9hZHMgPSBwYXlsb2FkLm1vZHVsZUltcG9ydFBheWxvYWRzLFxuICAgICAgICAgIGlzRmluYWwgPSBwYXlsb2FkLmlzRmluYWw7XG4gICAgICBfdGhpczkuX3N0YXRlID0gaXNGaW5hbCA/ICdsb2FkaW5nX2ZpbmFsJyA6ICdsb2FkaW5nX2luY3JlbWVudGFsJztcblxuICAgICAgX3RoaXM5Ll91cGRhdGVBY3RpdmVTdGF0ZSgpO1xuXG4gICAgICBpZiAoaXNGaW5hbCkge1xuICAgICAgICBfdGhpczkuX2luY3JlbWVudGFsUGF5bG9hZHNQZW5kaW5nID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2R1bGVJbXBvcnRQYXlsb2FkcyAmJiBtb2R1bGVJbXBvcnRQYXlsb2Fkcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbkxvYWRlciA9IF90aGlzOS5fb3BlcmF0aW9uTG9hZGVyO1xuICAgICAgICAhb3BlcmF0aW9uTG9hZGVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5FbnZpcm9ubWVudDogRXhwZWN0ZWQgYW4gb3BlcmF0aW9uTG9hZGVyIHRvIGJlICcgKyAnY29uZmlndXJlZCB3aGVuIHVzaW5nIGBAbWF0Y2hgLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgbW9kdWxlSW1wb3J0UGF5bG9hZHMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSW1wb3J0UGF5bG9hZCkge1xuICAgICAgICAgIF90aGlzOS5fcHJvY2Vzc01vZHVsZUltcG9ydFBheWxvYWQobW9kdWxlSW1wb3J0UGF5bG9hZCwgb3BlcmF0aW9uTG9hZGVyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmNyZW1lbnRhbFBsYWNlaG9sZGVycyAmJiBpbmNyZW1lbnRhbFBsYWNlaG9sZGVycy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgX3RoaXM5Ll9pbmNyZW1lbnRhbFBheWxvYWRzUGVuZGluZyA9IF90aGlzOS5fc3RhdGUgIT09ICdsb2FkaW5nX2ZpbmFsJztcbiAgICAgICAgaW5jcmVtZW50YWxQbGFjZWhvbGRlcnMuZm9yRWFjaChmdW5jdGlvbiAoaW5jcmVtZW50YWxQbGFjZWhvbGRlcikge1xuICAgICAgICAgIF90aGlzOS5fcHJvY2Vzc0luY3JlbWVudGFsUGxhY2Vob2xkZXIocGF5bG9hZCwgaW5jcmVtZW50YWxQbGFjZWhvbGRlcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChfdGhpczkuX2lzQ2xpZW50UGF5bG9hZCB8fCBfdGhpczkuX3N0YXRlID09PSAnbG9hZGluZ19maW5hbCcpIHtcbiAgICAgICAgICAvLyBUaGUgcXVlcnkgaGFzIGRlZmVyL3N0cmVhbSBzZWxlY3Rpb25zIHRoYXQgYXJlIGVuYWJsZWQsIGJ1dCBlaXRoZXJcbiAgICAgICAgICAvLyB0aGUgc2VydmVyIGluZGljYXRlZCB0aGF0IHRoaXMgaXMgYSBcImZpbmFsXCIgcGF5bG9hZDogbm8gaW5jcmVtZW50YWxcbiAgICAgICAgICAvLyBwYXlsb2FkcyB3aWxsIGJlIGRlbGl2ZXJlZCwgdGhlbiB3YXJuIHRoYXQgdGhlIHF1ZXJ5IHdhcyAobGlrZWx5KVxuICAgICAgICAgIC8vIGV4ZWN1dGVkIG9uIHRoZSBzZXJ2ZXIgaW4gbm9uLXN0cmVhbWluZyBtb2RlLCB3aXRoIGluY3JlbWVudGFsXG4gICAgICAgICAgLy8gZGVsaXZlcnkgZGlzYWJsZWQ7IG9yIHRoaXMgaXMgYSBjbGllbnQgcGF5bG9hZCwgYW5kIHRoZXJlIHdpbGwgYmVcbiAgICAgICAgICAvLyBubyBpbmNyZW1lbnRhbCBwYXlsb2FkLlxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoX3RoaXM5Ll9pc0NsaWVudFBheWxvYWQsICdSZWxheU1vZGVybkVudmlyb25tZW50OiBPcGVyYXRpb24gYCVzYCBjb250YWlucyBAZGVmZXIvQHN0cmVhbSAnICsgJ2RpcmVjdGl2ZXMgYnV0IHdhcyBleGVjdXRlZCBpbiBub24tc3RyZWFtaW5nIG1vZGUuIFNlZSAnICsgJ2h0dHBzOi8vZmJ1cmwuY29tL3JlbGF5LWluY3JlbWVudGFsLWRlbGl2ZXJ5LW5vbi1zdHJlYW1pbmctd2FybmluZy4nLCBfdGhpczkuX29wZXJhdGlvbi5yZXF1ZXN0Lm5vZGUucGFyYW1zLm5hbWUpIDogdm9pZCAwOyAvLyBCdXQgZWFnZXJseSBwcm9jZXNzIGFueSBkZWZlcnJlZCBwYXlsb2Fkc1xuXG4gICAgICAgICAgdmFyIHJlbGF5UGF5bG9hZHMgPSBbXTtcbiAgICAgICAgICBpbmNyZW1lbnRhbFBsYWNlaG9sZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChwbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgaWYgKHBsYWNlaG9sZGVyLmtpbmQgPT09ICdkZWZlcicpIHtcbiAgICAgICAgICAgICAgcmVsYXlQYXlsb2Fkcy5wdXNoKF90aGlzOS5fcHJvY2Vzc0RlZmVyUmVzcG9uc2UocGxhY2Vob2xkZXIubGFiZWwsIHBsYWNlaG9sZGVyLnBhdGgsIHBsYWNlaG9sZGVyLCB7XG4gICAgICAgICAgICAgICAgZGF0YTogcGxhY2Vob2xkZXIuZGF0YVxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAocmVsYXlQYXlsb2Fkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAoIVJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9CQVRDSEVEX1NUT1JFX1VQREFURVMpIHtcbiAgICAgICAgICAgICAgdmFyIHVwZGF0ZWRPd25lcnMgPSBfdGhpczkuX3B1Ymxpc2hRdWV1ZS5ydW4oKTtcblxuICAgICAgICAgICAgICBfdGhpczkuX3VwZGF0ZU9wZXJhdGlvblRyYWNrZXIodXBkYXRlZE93bmVycyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF90aGlzOS5fcHJvY2Vzc1BheWxvYWRGb2xsb3d1cHMocmVsYXlQYXlsb2Fkcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLl9tYXliZUNvbXBsZXRlU3Vic2NyaXB0aW9uT3BlcmF0aW9uVHJhY2tpbmcgPSBmdW5jdGlvbiBfbWF5YmVDb21wbGV0ZVN1YnNjcmlwdGlvbk9wZXJhdGlvblRyYWNraW5nKCkge1xuICAgIGlmICghdGhpcy5faXNTdWJzY3JpcHRpb25PcGVyYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ01vZHVsZVBheWxvYWRzQ291bnQgPT09IDAgJiYgdGhpcy5faW5jcmVtZW50YWxQYXlsb2Fkc1BlbmRpbmcgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLl9jb21wbGV0ZU9wZXJhdGlvblRyYWNrZXIoKTtcbiAgICB9XG5cbiAgICBpZiAoUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX1VOSVFVRV9TVUJTQ1JJUFRJT05fUk9PVCkge1xuICAgICAgdmFyIG5leHRJRCA9IGdlbmVyYXRlVW5pcXVlQ2xpZW50SUQoKTtcbiAgICAgIHRoaXMuX29wZXJhdGlvbiA9IHtcbiAgICAgICAgcmVxdWVzdDogdGhpcy5fb3BlcmF0aW9uLnJlcXVlc3QsXG4gICAgICAgIGZyYWdtZW50OiBjcmVhdGVSZWFkZXJTZWxlY3Rvcih0aGlzLl9vcGVyYXRpb24uZnJhZ21lbnQubm9kZSwgbmV4dElELCB0aGlzLl9vcGVyYXRpb24uZnJhZ21lbnQudmFyaWFibGVzLCB0aGlzLl9vcGVyYXRpb24uZnJhZ21lbnQub3duZXIpLFxuICAgICAgICByb290OiBjcmVhdGVOb3JtYWxpemF0aW9uU2VsZWN0b3IodGhpcy5fb3BlcmF0aW9uLnJvb3Qubm9kZSwgbmV4dElELCB0aGlzLl9vcGVyYXRpb24ucm9vdC52YXJpYWJsZXMpXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUHJvY2Vzc2VzIGEgTW9kdWxlSW1wb3J0UGF5bG9hZCwgYXN5bmNocm9ub3VzbHkgcmVzb2x2aW5nIHRoZSBub3JtYWxpemF0aW9uXG4gICAqIEFTVCBhbmQgdXNpbmcgaXQgdG8gbm9ybWFsaXplIHRoZSBmaWVsZCBkYXRhIGludG8gYSBSZWxheVJlc3BvbnNlUGF5bG9hZC5cbiAgICogVGhlIHJlc3VsdGluZyBwYXlsb2FkIG1heSBjb250YWluIG90aGVyIGluY3JlbWVudGFsIHBheWxvYWRzIChtYXRjaCxcbiAgICogZGVmZXIsIHN0cmVhbSwgZXRjKTsgdGhlc2UgYXJlIGhhbmRsZWQgYnkgY2FsbGluZ1xuICAgKiBgX3Byb2Nlc3NQYXlsb2FkRm9sbG93dXBzKClgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fcHJvY2Vzc01vZHVsZUltcG9ydFBheWxvYWQgPSBmdW5jdGlvbiBfcHJvY2Vzc01vZHVsZUltcG9ydFBheWxvYWQobW9kdWxlSW1wb3J0UGF5bG9hZCwgb3BlcmF0aW9uTG9hZGVyKSB7XG4gICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgdmFyIG5vZGUgPSBvcGVyYXRpb25Mb2FkZXIuZ2V0KG1vZHVsZUltcG9ydFBheWxvYWQub3BlcmF0aW9uUmVmZXJlbmNlKTtcblxuICAgIGlmIChub2RlICE9IG51bGwpIHtcbiAgICAgIHZhciBvcGVyYXRpb24gPSBnZXRPcGVyYXRpb24obm9kZSk7IC8vIElmIHRoZSBvcGVyYXRpb24gbW9kdWxlIGlzIGF2YWlsYWJsZSBzeW5jaHJvbm91c2x5LCBub3JtYWxpemUgdGhlXG4gICAgICAvLyBkYXRhIHN5bmNocm9ub3VzbHkuXG5cbiAgICAgIHRoaXMuX2hhbmRsZU1vZHVsZUltcG9ydFBheWxvYWQobW9kdWxlSW1wb3J0UGF5bG9hZCwgb3BlcmF0aW9uKTtcblxuICAgICAgdGhpcy5fbWF5YmVDb21wbGV0ZVN1YnNjcmlwdGlvbk9wZXJhdGlvblRyYWNraW5nKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSBsb2FkIHRoZSBvcGVyYXRpb24gbW9kdWxlIGFuZCBzY2hlZHVsZSBhIHRhc2sgdG8gbm9ybWFsaXplXG4gICAgICAvLyB0aGUgZGF0YSB3aGVuIHRoZSBtb2R1bGUgaXMgYXZhaWxhYmxlLlxuICAgICAgdmFyIF9pZDMgPSB0aGlzLl9uZXh0U3Vic2NyaXB0aW9uSWQrKztcblxuICAgICAgdGhpcy5fcGVuZGluZ01vZHVsZVBheWxvYWRzQ291bnQrKztcblxuICAgICAgdmFyIGRlY3JlbWVudFBlbmRpbmdDb3VudCA9IGZ1bmN0aW9uIGRlY3JlbWVudFBlbmRpbmdDb3VudCgpIHtcbiAgICAgICAgX3RoaXMxMC5fcGVuZGluZ01vZHVsZVBheWxvYWRzQ291bnQtLTtcblxuICAgICAgICBfdGhpczEwLl9tYXliZUNvbXBsZXRlU3Vic2NyaXB0aW9uT3BlcmF0aW9uVHJhY2tpbmcoKTtcbiAgICAgIH07IC8vIE9ic2VydmFibGUuZnJvbShvcGVyYXRpb25Mb2FkZXIubG9hZCgpKSB3b3VsZG4ndCBjYXRjaCBzeW5jaHJvbm91c1xuICAgICAgLy8gZXJyb3JzIHRocm93biBieSB0aGUgbG9hZCBmdW5jdGlvbiwgd2hpY2ggaXMgdXNlci1kZWZpbmVkLiBHdWFyZFxuICAgICAgLy8gYWdhaW5zdCB0aGF0IHdpdGggT2JzZXJ2YWJsZS5mcm9tKG5ldyBQcm9taXNlKDx3b3JrPikpLlxuXG5cbiAgICAgIFJlbGF5T2JzZXJ2YWJsZS5mcm9tKG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgb3BlcmF0aW9uTG9hZGVyLmxvYWQobW9kdWxlSW1wb3J0UGF5bG9hZC5vcGVyYXRpb25SZWZlcmVuY2UpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pKS5tYXAoZnVuY3Rpb24gKG9wZXJhdGlvbikge1xuICAgICAgICBpZiAob3BlcmF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICBfdGhpczEwLl9zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczEwLl9oYW5kbGVNb2R1bGVJbXBvcnRQYXlsb2FkKG1vZHVsZUltcG9ydFBheWxvYWQsIGdldE9wZXJhdGlvbihvcGVyYXRpb24pKTsgLy8gT0s6IGFsd2F5cyBoYXZlIHRvIHJ1biBhZnRlciBhbiBhc3luYyBtb2R1bGUgaW1wb3J0IHJlc29sdmVzXG5cblxuICAgICAgICAgICAgdmFyIHVwZGF0ZWRPd25lcnMgPSBfdGhpczEwLl9wdWJsaXNoUXVldWUucnVuKCk7XG5cbiAgICAgICAgICAgIF90aGlzMTAuX3VwZGF0ZU9wZXJhdGlvblRyYWNrZXIodXBkYXRlZE93bmVycyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pLnN1YnNjcmliZSh7XG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICBfdGhpczEwLl9jb21wbGV0ZShfaWQzKTtcblxuICAgICAgICAgIGRlY3JlbWVudFBlbmRpbmdDb3VudCgpO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoX2Vycm9yNCkge1xuICAgICAgICAgIF90aGlzMTAuX2Vycm9yKF9lcnJvcjQpO1xuXG4gICAgICAgICAgZGVjcmVtZW50UGVuZGluZ0NvdW50KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMxMC5fc3RhcnQoX2lkMywgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5faGFuZGxlTW9kdWxlSW1wb3J0UGF5bG9hZCA9IGZ1bmN0aW9uIF9oYW5kbGVNb2R1bGVJbXBvcnRQYXlsb2FkKG1vZHVsZUltcG9ydFBheWxvYWQsIG9wZXJhdGlvbikge1xuICAgIHZhciByZWxheVBheWxvYWQgPSB0aGlzLl9ub3JtYWxpemVNb2R1bGVJbXBvcnQobW9kdWxlSW1wb3J0UGF5bG9hZCwgb3BlcmF0aW9uKTtcblxuICAgIHRoaXMuX3B1Ymxpc2hRdWV1ZS5jb21taXRQYXlsb2FkKHRoaXMuX29wZXJhdGlvbiwgcmVsYXlQYXlsb2FkKTtcblxuICAgIGlmICghUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX0JBVENIRURfU1RPUkVfVVBEQVRFUykge1xuICAgICAgdmFyIHVwZGF0ZWRPd25lcnMgPSB0aGlzLl9wdWJsaXNoUXVldWUucnVuKCk7XG5cbiAgICAgIHRoaXMuX3VwZGF0ZU9wZXJhdGlvblRyYWNrZXIodXBkYXRlZE93bmVycyk7XG4gICAgfVxuXG4gICAgdGhpcy5fcHJvY2Vzc1BheWxvYWRGb2xsb3d1cHMoW3JlbGF5UGF5bG9hZF0pO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgZXhlY3V0b3Igbm93IGtub3dzIHRoYXQgR3JhcGhRTCByZXNwb25zZXMgYXJlIGV4cGVjdGVkIGZvciBhIGdpdmVuXG4gICAqIGxhYmVsL3BhdGg6XG4gICAqIC0gU3RvcmUgdGhlIHBsYWNlaG9sZGVyIGluIG9yZGVyIHRvIHByb2Nlc3MgYW55IGZ1dHVyZSByZXNwb25zZXMgdGhhdCBtYXlcbiAgICogICBhcnJpdmUuXG4gICAqIC0gVGhlbiBwcm9jZXNzIGFueSByZXNwb25zZXMgdGhhdCBoYWQgYWxyZWFkeSBhcnJpdmVkLlxuICAgKlxuICAgKiBUaGUgcGxhY2Vob2xkZXIgY29udGFpbnMgdGhlIG5vcm1hbGl6YXRpb24gc2VsZWN0b3IsIHBhdGggKGZvciBuZXN0ZWRcbiAgICogZGVmZXIvc3RyZWFtKSwgYW5kIG90aGVyIG1ldGFkYXRhIHVzZWQgdG8gbm9ybWFsaXplIHRoZSBpbmNyZW1lbnRhbFxuICAgKiByZXNwb25zZShzKS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uX3Byb2Nlc3NJbmNyZW1lbnRhbFBsYWNlaG9sZGVyID0gZnVuY3Rpb24gX3Byb2Nlc3NJbmNyZW1lbnRhbFBsYWNlaG9sZGVyKHJlbGF5UGF5bG9hZCwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgX3JlbGF5UGF5bG9hZCRmaWVsZFBhO1xuXG4gICAgLy8gVXBkYXRlIHRoZSBsYWJlbCA9PiBwYXRoID0+IHBsYWNlaG9sZGVyIG1hcFxuICAgIHZhciBsYWJlbCA9IHBsYWNlaG9sZGVyLmxhYmVsLFxuICAgICAgICBwYXRoID0gcGxhY2Vob2xkZXIucGF0aDtcbiAgICB2YXIgcGF0aEtleSA9IHBhdGgubWFwKFN0cmluZykuam9pbignLicpO1xuXG4gICAgdmFyIHJlc3VsdEZvckxhYmVsID0gdGhpcy5faW5jcmVtZW50YWxSZXN1bHRzLmdldChsYWJlbCk7XG5cbiAgICBpZiAocmVzdWx0Rm9yTGFiZWwgPT0gbnVsbCkge1xuICAgICAgcmVzdWx0Rm9yTGFiZWwgPSBuZXcgTWFwKCk7XG5cbiAgICAgIHRoaXMuX2luY3JlbWVudGFsUmVzdWx0cy5zZXQobGFiZWwsIHJlc3VsdEZvckxhYmVsKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0Rm9yUGF0aCA9IHJlc3VsdEZvckxhYmVsLmdldChwYXRoS2V5KTtcbiAgICB2YXIgcGVuZGluZ1Jlc3BvbnNlcyA9IHJlc3VsdEZvclBhdGggIT0gbnVsbCAmJiByZXN1bHRGb3JQYXRoLmtpbmQgPT09ICdyZXNwb25zZScgPyByZXN1bHRGb3JQYXRoLnJlc3BvbnNlcyA6IG51bGw7XG4gICAgcmVzdWx0Rm9yTGFiZWwuc2V0KHBhdGhLZXksIHtcbiAgICAgIGtpbmQ6ICdwbGFjZWhvbGRlcicsXG4gICAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXJcbiAgICB9KTsgLy8gU3RvcmUgcmVmZXJlbmNlcyB0byB0aGUgcGFyZW50IG5vZGUgdG8gYWxsb3cgZGV0ZWN0aW5nIGNvbmN1cnJlbnRcbiAgICAvLyBtb2RpZmljYXRpb25zIHRvIHRoZSBwYXJlbnQgYmVmb3JlIGl0ZW1zIGFycml2ZSBhbmQgdG8gcmVwbGF5XG4gICAgLy8gaGFuZGxlIGZpZWxkIHBheWxvYWRzIHRvIGFjY291bnQgZm9yIG5ldyBpbmZvcm1hdGlvbiBvbiBzb3VyY2UgcmVjb3Jkcy5cblxuICAgIHZhciBwYXJlbnRJRDtcblxuICAgIGlmIChwbGFjZWhvbGRlci5raW5kID09PSAnc3RyZWFtJykge1xuICAgICAgcGFyZW50SUQgPSBwbGFjZWhvbGRlci5wYXJlbnRJRDtcbiAgICB9IGVsc2UgaWYgKHBsYWNlaG9sZGVyLmtpbmQgPT09ICdkZWZlcicpIHtcbiAgICAgIHBhcmVudElEID0gcGxhY2Vob2xkZXIuc2VsZWN0b3IuZGF0YUlEO1xuICAgIH0gZWxzZSB7XG4gICAgICBwbGFjZWhvbGRlcjtcbiAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1Vuc3VwcG9ydGVkIGluY3JlbWVudGFsIHBsYWNlaG9sZGVyIGtpbmQgYCVzYC4nLCBwbGFjZWhvbGRlci5raW5kKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudFJlY29yZCA9IHJlbGF5UGF5bG9hZC5zb3VyY2UuZ2V0KHBhcmVudElEKTtcbiAgICB2YXIgcGFyZW50UGF5bG9hZHMgPSAoKF9yZWxheVBheWxvYWQkZmllbGRQYSA9IHJlbGF5UGF5bG9hZC5maWVsZFBheWxvYWRzKSAhPT0gbnVsbCAmJiBfcmVsYXlQYXlsb2FkJGZpZWxkUGEgIT09IHZvaWQgMCA/IF9yZWxheVBheWxvYWQkZmllbGRQYSA6IFtdKS5maWx0ZXIoZnVuY3Rpb24gKGZpZWxkUGF5bG9hZCkge1xuICAgICAgdmFyIGZpZWxkSUQgPSBnZW5lcmF0ZUNsaWVudElEKGZpZWxkUGF5bG9hZC5kYXRhSUQsIGZpZWxkUGF5bG9hZC5maWVsZEtleSk7XG4gICAgICByZXR1cm4gKC8vIGhhbmRsZXJzIGFwcGxpZWQgdG8gdGhlIHN0cmVhbWVkIGZpZWxkIGl0c2VsZlxuICAgICAgICBmaWVsZFBheWxvYWQuZGF0YUlEID09PSBwYXJlbnRJRCB8fCAvLyBoYW5kbGVycyBhcHBsaWVkIHRvIGEgZmllbGQgb24gYW4gYW5jZXN0b3Igb2JqZWN0LCB3aGVyZVxuICAgICAgICAvLyBhbmNlc3Rvci5maWVsZCBsaW5rcyB0byB0aGUgcGFyZW50IHJlY29yZCAoZXhhbXBsZTogY29ubmVjdGlvbnMpXG4gICAgICAgIGZpZWxkSUQgPT09IHBhcmVudElEXG4gICAgICApO1xuICAgIH0pOyAvLyBJZiBhbiBpbmNyZW1lbnRhbCBwYXlsb2FkIGV4aXN0cyBmb3Igc29tZSBpZCB0aGF0IHJlY29yZCBzaG91bGQgYWxzb1xuICAgIC8vIGV4aXN0LlxuXG4gICAgIShwYXJlbnRSZWNvcmQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkVudmlyb25tZW50OiBFeHBlY3RlZCByZWNvcmQgYCVzYCB0byBleGlzdC4nLCBwYXJlbnRJRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBuZXh0UGFyZW50UmVjb3JkO1xuICAgIHZhciBuZXh0UGFyZW50UGF5bG9hZHM7XG5cbiAgICB2YXIgcHJldmlvdXNQYXJlbnRFbnRyeSA9IHRoaXMuX3NvdXJjZS5nZXQocGFyZW50SUQpO1xuXG4gICAgaWYgKHByZXZpb3VzUGFyZW50RW50cnkgIT0gbnVsbCkge1xuICAgICAgLy8gSWYgYSBwcmV2aW91cyBlbnRyeSBleGlzdHMsIG1lcmdlIHRoZSBwcmV2aW91cy9uZXh0IHJlY29yZHMgYW5kXG4gICAgICAvLyBwYXlsb2FkcyB0b2dldGhlci5cbiAgICAgIG5leHRQYXJlbnRSZWNvcmQgPSBSZWxheU1vZGVyblJlY29yZC51cGRhdGUocHJldmlvdXNQYXJlbnRFbnRyeS5yZWNvcmQsIHBhcmVudFJlY29yZCk7XG4gICAgICB2YXIgaGFuZGxlUGF5bG9hZHMgPSBuZXcgTWFwKCk7XG5cbiAgICAgIHZhciBkZWR1cGVQYXlsb2FkID0gZnVuY3Rpb24gZGVkdXBlUGF5bG9hZChwYXlsb2FkKSB7XG4gICAgICAgIHZhciBrZXkgPSBzdGFibGVTdHJpbmdpZnkocGF5bG9hZCk7XG4gICAgICAgIGhhbmRsZVBheWxvYWRzLnNldChrZXksIHBheWxvYWQpO1xuICAgICAgfTtcblxuICAgICAgcHJldmlvdXNQYXJlbnRFbnRyeS5maWVsZFBheWxvYWRzLmZvckVhY2goZGVkdXBlUGF5bG9hZCk7XG4gICAgICBwYXJlbnRQYXlsb2Fkcy5mb3JFYWNoKGRlZHVwZVBheWxvYWQpO1xuICAgICAgbmV4dFBhcmVudFBheWxvYWRzID0gQXJyYXkuZnJvbShoYW5kbGVQYXlsb2Fkcy52YWx1ZXMoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRQYXJlbnRSZWNvcmQgPSBwYXJlbnRSZWNvcmQ7XG4gICAgICBuZXh0UGFyZW50UGF5bG9hZHMgPSBwYXJlbnRQYXlsb2FkcztcbiAgICB9XG5cbiAgICB0aGlzLl9zb3VyY2Uuc2V0KHBhcmVudElELCB7XG4gICAgICByZWNvcmQ6IG5leHRQYXJlbnRSZWNvcmQsXG4gICAgICBmaWVsZFBheWxvYWRzOiBuZXh0UGFyZW50UGF5bG9hZHNcbiAgICB9KTsgLy8gSWYgdGhlcmUgd2VyZSBhbnkgcXVldWVkIHJlc3BvbnNlcywgcHJvY2VzcyB0aGVtIG5vdyB0aGF0IHBsYWNlaG9sZGVyc1xuICAgIC8vIGFyZSBpbiBwbGFjZVxuXG5cbiAgICBpZiAocGVuZGluZ1Jlc3BvbnNlcyAhPSBudWxsKSB7XG4gICAgICB2YXIgcGF5bG9hZEZvbGxvd3VwcyA9IHRoaXMuX3Byb2Nlc3NJbmNyZW1lbnRhbFJlc3BvbnNlcyhwZW5kaW5nUmVzcG9uc2VzKTtcblxuICAgICAgaWYgKCFSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfQkFUQ0hFRF9TVE9SRV9VUERBVEVTKSB7XG4gICAgICAgIHZhciB1cGRhdGVkT3duZXJzID0gdGhpcy5fcHVibGlzaFF1ZXVlLnJ1bigpO1xuXG4gICAgICAgIHRoaXMuX3VwZGF0ZU9wZXJhdGlvblRyYWNrZXIodXBkYXRlZE93bmVycyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3Byb2Nlc3NQYXlsb2FkRm9sbG93dXBzKHBheWxvYWRGb2xsb3d1cHMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogTG9va3VwIHRoZSBwbGFjZWhvbGRlciB0aGUgZGVzY3JpYmVzIGhvdyB0byBwcm9jZXNzIGFuIGluY3JlbWVudGFsXG4gICAqIHJlc3BvbnNlLCBub3JtYWxpemUvcHVibGlzaCBpdCwgYW5kIHByb2Nlc3MgYW55IG5lc3RlZCBkZWZlci9tYXRjaC9zdHJlYW1cbiAgICogbWV0YWRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9wcm9jZXNzSW5jcmVtZW50YWxSZXNwb25zZXMgPSBmdW5jdGlvbiBfcHJvY2Vzc0luY3JlbWVudGFsUmVzcG9uc2VzKGluY3JlbWVudGFsUmVzcG9uc2VzKSB7XG4gICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuXG4gICAgdmFyIHJlbGF5UGF5bG9hZHMgPSBbXTtcbiAgICBpbmNyZW1lbnRhbFJlc3BvbnNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbmNyZW1lbnRhbFJlc3BvbnNlKSB7XG4gICAgICB2YXIgbGFiZWwgPSBpbmNyZW1lbnRhbFJlc3BvbnNlLmxhYmVsLFxuICAgICAgICAgIHBhdGggPSBpbmNyZW1lbnRhbFJlc3BvbnNlLnBhdGgsXG4gICAgICAgICAgcmVzcG9uc2UgPSBpbmNyZW1lbnRhbFJlc3BvbnNlLnJlc3BvbnNlO1xuXG4gICAgICB2YXIgcmVzdWx0Rm9yTGFiZWwgPSBfdGhpczExLl9pbmNyZW1lbnRhbFJlc3VsdHMuZ2V0KGxhYmVsKTtcblxuICAgICAgaWYgKHJlc3VsdEZvckxhYmVsID09IG51bGwpIHtcbiAgICAgICAgcmVzdWx0Rm9yTGFiZWwgPSBuZXcgTWFwKCk7XG5cbiAgICAgICAgX3RoaXMxMS5faW5jcmVtZW50YWxSZXN1bHRzLnNldChsYWJlbCwgcmVzdWx0Rm9yTGFiZWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAobGFiZWwuaW5kZXhPZignJGRlZmVyJCcpICE9PSAtMSkge1xuICAgICAgICB2YXIgcGF0aEtleSA9IHBhdGgubWFwKFN0cmluZykuam9pbignLicpO1xuICAgICAgICB2YXIgcmVzdWx0Rm9yUGF0aCA9IHJlc3VsdEZvckxhYmVsLmdldChwYXRoS2V5KTtcblxuICAgICAgICBpZiAocmVzdWx0Rm9yUGF0aCA9PSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0Rm9yUGF0aCA9IHtcbiAgICAgICAgICAgIGtpbmQ6ICdyZXNwb25zZScsXG4gICAgICAgICAgICByZXNwb25zZXM6IFtpbmNyZW1lbnRhbFJlc3BvbnNlXVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmVzdWx0Rm9yTGFiZWwuc2V0KHBhdGhLZXksIHJlc3VsdEZvclBhdGgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHRGb3JQYXRoLmtpbmQgPT09ICdyZXNwb25zZScpIHtcbiAgICAgICAgICByZXN1bHRGb3JQYXRoLnJlc3BvbnNlcy5wdXNoKGluY3JlbWVudGFsUmVzcG9uc2UpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwbGFjZWhvbGRlciA9IHJlc3VsdEZvclBhdGgucGxhY2Vob2xkZXI7XG4gICAgICAgICEocGxhY2Vob2xkZXIua2luZCA9PT0gJ2RlZmVyJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkVudmlyb25tZW50OiBFeHBlY3RlZCBkYXRhIGZvciBwYXRoIGAlc2AgZm9yIGxhYmVsIGAlc2AgJyArICd0byBiZSBkYXRhIGZvciBAZGVmZXIsIHdhcyBgQCVzYC4nLCBwYXRoS2V5LCBsYWJlbCwgcGxhY2Vob2xkZXIua2luZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICByZWxheVBheWxvYWRzLnB1c2goX3RoaXMxMS5fcHJvY2Vzc0RlZmVyUmVzcG9uc2UobGFiZWwsIHBhdGgsIHBsYWNlaG9sZGVyLCByZXNwb25zZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQHN0cmVhbSBwYXlsb2FkIHBhdGggdmFsdWVzIGVuZCBpbiB0aGUgZmllbGQgbmFtZSBhbmQgaXRlbSBpbmRleCxcbiAgICAgICAgLy8gYnV0IFJlbGF5IHJlY29yZHMgcGF0aHMgcmVsYXRpdmUgdG8gdGhlIHBhcmVudCBvZiB0aGUgc3RyZWFtIG5vZGU6XG4gICAgICAgIC8vIHRoZXJlZm9yZSB3ZSBzdHJpcCB0aGUgbGFzdCB0d28gZWxlbWVudHMganVzdCB0byBsb29rdXAgdGhlIHBhdGhcbiAgICAgICAgLy8gKHRoZSBpdGVtIGluZGV4IGlzIHVzZWQgbGF0ZXIgdG8gaW5zZXJ0IHRoZSBlbGVtZW50IGluIHRoZSBsaXN0KVxuICAgICAgICB2YXIgX3BhdGhLZXkgPSBwYXRoLnNsaWNlKDAsIC0yKS5tYXAoU3RyaW5nKS5qb2luKCcuJyk7XG5cbiAgICAgICAgdmFyIF9yZXN1bHRGb3JQYXRoID0gcmVzdWx0Rm9yTGFiZWwuZ2V0KF9wYXRoS2V5KTtcblxuICAgICAgICBpZiAoX3Jlc3VsdEZvclBhdGggPT0gbnVsbCkge1xuICAgICAgICAgIF9yZXN1bHRGb3JQYXRoID0ge1xuICAgICAgICAgICAga2luZDogJ3Jlc3BvbnNlJyxcbiAgICAgICAgICAgIHJlc3BvbnNlczogW2luY3JlbWVudGFsUmVzcG9uc2VdXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXN1bHRGb3JMYWJlbC5zZXQoX3BhdGhLZXksIF9yZXN1bHRGb3JQYXRoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoX3Jlc3VsdEZvclBhdGgua2luZCA9PT0gJ3Jlc3BvbnNlJykge1xuICAgICAgICAgIF9yZXN1bHRGb3JQYXRoLnJlc3BvbnNlcy5wdXNoKGluY3JlbWVudGFsUmVzcG9uc2UpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9wbGFjZWhvbGRlciA9IF9yZXN1bHRGb3JQYXRoLnBsYWNlaG9sZGVyO1xuICAgICAgICAhKF9wbGFjZWhvbGRlci5raW5kID09PSAnc3RyZWFtJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkVudmlyb25tZW50OiBFeHBlY3RlZCBkYXRhIGZvciBwYXRoIGAlc2AgZm9yIGxhYmVsIGAlc2AgJyArICd0byBiZSBkYXRhIGZvciBAc3RyZWFtLCB3YXMgYEAlc2AuJywgX3BhdGhLZXksIGxhYmVsLCBfcGxhY2Vob2xkZXIua2luZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICByZWxheVBheWxvYWRzLnB1c2goX3RoaXMxMS5fcHJvY2Vzc1N0cmVhbVJlc3BvbnNlKGxhYmVsLCBwYXRoLCBfcGxhY2Vob2xkZXIsIHJlc3BvbnNlKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlbGF5UGF5bG9hZHM7XG4gIH07XG5cbiAgX3Byb3RvLl9wcm9jZXNzRGVmZXJSZXNwb25zZSA9IGZ1bmN0aW9uIF9wcm9jZXNzRGVmZXJSZXNwb25zZShsYWJlbCwgcGF0aCwgcGxhY2Vob2xkZXIsIHJlc3BvbnNlKSB7XG4gICAgdmFyIHBhcmVudElEID0gcGxhY2Vob2xkZXIuc2VsZWN0b3IuZGF0YUlEO1xuICAgIHZhciByZWxheVBheWxvYWQgPSBub3JtYWxpemVSZXNwb25zZShyZXNwb25zZSwgcGxhY2Vob2xkZXIuc2VsZWN0b3IsIHBsYWNlaG9sZGVyLnR5cGVOYW1lLCB7XG4gICAgICBnZXREYXRhSUQ6IHRoaXMuX2dldERhdGFJRCxcbiAgICAgIHBhdGg6IHBsYWNlaG9sZGVyLnBhdGgsXG4gICAgICByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXI6IHRoaXMuX3JlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcixcbiAgICAgIHJlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyOiB0aGlzLl9yZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcixcbiAgICAgIHRyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbDogdGhpcy5fdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsLFxuICAgICAgc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHM6IHRoaXMuX3Nob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzXG4gICAgfSk7XG5cbiAgICB0aGlzLl9wdWJsaXNoUXVldWUuY29tbWl0UGF5bG9hZCh0aGlzLl9vcGVyYXRpb24sIHJlbGF5UGF5bG9hZCk7IC8vIExvYWQgdGhlIHZlcnNpb24gb2YgdGhlIHBhcmVudCByZWNvcmQgZnJvbSB3aGljaCB0aGlzIGluY3JlbWVudGFsIGRhdGFcbiAgICAvLyB3YXMgZGVyaXZlZFxuXG5cbiAgICB2YXIgcGFyZW50RW50cnkgPSB0aGlzLl9zb3VyY2UuZ2V0KHBhcmVudElEKTtcblxuICAgICEocGFyZW50RW50cnkgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkVudmlyb25tZW50OiBFeHBlY3RlZCB0aGUgcGFyZW50IHJlY29yZCBgJXNgIGZvciBAZGVmZXIgJyArICdkYXRhIHRvIGV4aXN0LicsIHBhcmVudElEKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGZpZWxkUGF5bG9hZHMgPSBwYXJlbnRFbnRyeS5maWVsZFBheWxvYWRzO1xuXG4gICAgaWYgKGZpZWxkUGF5bG9hZHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICB2YXIgX3Jlc3BvbnNlJGV4dGVuc2lvbnMyO1xuXG4gICAgICB2YXIgaGFuZGxlRmllbGRzUmVsYXlQYXlsb2FkID0ge1xuICAgICAgICBlcnJvcnM6IG51bGwsXG4gICAgICAgIGZpZWxkUGF5bG9hZHM6IGZpZWxkUGF5bG9hZHMsXG4gICAgICAgIGluY3JlbWVudGFsUGxhY2Vob2xkZXJzOiBudWxsLFxuICAgICAgICBtb2R1bGVJbXBvcnRQYXlsb2FkczogbnVsbCxcbiAgICAgICAgc291cmNlOiBSZWxheVJlY29yZFNvdXJjZS5jcmVhdGUoKSxcbiAgICAgICAgaXNGaW5hbDogKChfcmVzcG9uc2UkZXh0ZW5zaW9uczIgPSByZXNwb25zZS5leHRlbnNpb25zKSA9PT0gbnVsbCB8fCBfcmVzcG9uc2UkZXh0ZW5zaW9uczIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yZXNwb25zZSRleHRlbnNpb25zMi5pc19maW5hbCkgPT09IHRydWVcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX3B1Ymxpc2hRdWV1ZS5jb21taXRQYXlsb2FkKHRoaXMuX29wZXJhdGlvbiwgaGFuZGxlRmllbGRzUmVsYXlQYXlsb2FkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVsYXlQYXlsb2FkO1xuICB9XG4gIC8qKlxuICAgKiBQcm9jZXNzIHRoZSBkYXRhIGZvciBvbmUgaXRlbSBpbiBhIEBzdHJlYW0gZmllbGQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9wcm9jZXNzU3RyZWFtUmVzcG9uc2UgPSBmdW5jdGlvbiBfcHJvY2Vzc1N0cmVhbVJlc3BvbnNlKGxhYmVsLCBwYXRoLCBwbGFjZWhvbGRlciwgcmVzcG9uc2UpIHtcbiAgICB2YXIgcGFyZW50SUQgPSBwbGFjZWhvbGRlci5wYXJlbnRJRCxcbiAgICAgICAgbm9kZSA9IHBsYWNlaG9sZGVyLm5vZGUsXG4gICAgICAgIHZhcmlhYmxlcyA9IHBsYWNlaG9sZGVyLnZhcmlhYmxlczsgLy8gRmluZCB0aGUgTGlua2VkRmllbGQgd2hlcmUgQHN0cmVhbSB3YXMgYXBwbGllZFxuXG4gICAgdmFyIGZpZWxkID0gbm9kZS5zZWxlY3Rpb25zWzBdO1xuICAgICEoZmllbGQgIT0gbnVsbCAmJiBmaWVsZC5raW5kID09PSAnTGlua2VkRmllbGQnICYmIGZpZWxkLnBsdXJhbCA9PT0gdHJ1ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkVudmlyb25tZW50OiBFeHBlY3RlZCBAc3RyZWFtIHRvIGJlIHVzZWQgb24gYSBwbHVyYWwgZmllbGQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgdmFyIF90aGlzJF9ub3JtYWxpemVTdHJlYSA9IHRoaXMuX25vcm1hbGl6ZVN0cmVhbUl0ZW0ocmVzcG9uc2UsIHBhcmVudElELCBmaWVsZCwgdmFyaWFibGVzLCBwYXRoLCBwbGFjZWhvbGRlci5wYXRoKSxcbiAgICAgICAgZmllbGRQYXlsb2FkcyA9IF90aGlzJF9ub3JtYWxpemVTdHJlYS5maWVsZFBheWxvYWRzLFxuICAgICAgICBpdGVtSUQgPSBfdGhpcyRfbm9ybWFsaXplU3RyZWEuaXRlbUlELFxuICAgICAgICBpdGVtSW5kZXggPSBfdGhpcyRfbm9ybWFsaXplU3RyZWEuaXRlbUluZGV4LFxuICAgICAgICBwcmV2SURzID0gX3RoaXMkX25vcm1hbGl6ZVN0cmVhLnByZXZJRHMsXG4gICAgICAgIHJlbGF5UGF5bG9hZCA9IF90aGlzJF9ub3JtYWxpemVTdHJlYS5yZWxheVBheWxvYWQsXG4gICAgICAgIHN0b3JhZ2VLZXkgPSBfdGhpcyRfbm9ybWFsaXplU3RyZWEuc3RvcmFnZUtleTsgLy8gUHVibGlzaCB0aGUgbmV3IGl0ZW0gYW5kIHVwZGF0ZSB0aGUgcGFyZW50IHJlY29yZCB0byBzZXRcbiAgICAvLyBmaWVsZFtpbmRleF0gPSBpdGVtICppZiogdGhlIHBhcmVudCByZWNvcmQgaGFzbid0IGJlZW4gY29uY3VycmVudGx5XG4gICAgLy8gbW9kaWZpZWQuXG5cblxuICAgIHRoaXMuX3B1Ymxpc2hRdWV1ZS5jb21taXRQYXlsb2FkKHRoaXMuX29wZXJhdGlvbiwgcmVsYXlQYXlsb2FkLCBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICAgIHZhciBjdXJyZW50UGFyZW50UmVjb3JkID0gc3RvcmUuZ2V0KHBhcmVudElEKTtcblxuICAgICAgaWYgKGN1cnJlbnRQYXJlbnRSZWNvcmQgPT0gbnVsbCkge1xuICAgICAgICAvLyBwYXJlbnQgaGFzIHNpbmNlIGJlZW4gZGVsZXRlZCwgc3RyZWFtIGRhdGEgaXMgc3RhbGVcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY3VycmVudEl0ZW1zID0gY3VycmVudFBhcmVudFJlY29yZC5nZXRMaW5rZWRSZWNvcmRzKHN0b3JhZ2VLZXkpO1xuXG4gICAgICBpZiAoY3VycmVudEl0ZW1zID09IG51bGwpIHtcbiAgICAgICAgLy8gZmllbGQgaGFzIHNpbmNlIGJlZW4gZGVsZXRlZCwgc3RyZWFtIGRhdGEgaXMgc3RhbGVcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudEl0ZW1zLmxlbmd0aCAhPT0gcHJldklEcy5sZW5ndGggfHwgY3VycmVudEl0ZW1zLnNvbWUoZnVuY3Rpb24gKGN1cnJlbnRJdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gcHJldklEc1tpbmRleF0gIT09IChjdXJyZW50SXRlbSAmJiBjdXJyZW50SXRlbS5nZXREYXRhSUQoKSk7XG4gICAgICB9KSkge1xuICAgICAgICAvLyBmaWVsZCBoYXMgYmVlbiBtb2RpZmllZCBieSBzb21ldGhpbmcgb3RoZXIgdGhhbiB0aGlzIHF1ZXJ5LFxuICAgICAgICAvLyBzdHJlYW0gZGF0YSBpcyBzdGFsZVxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHBhcmVudC5maWVsZCBoYXMgbm90IGJlZW4gY29uY3VycmVudGx5IG1vZGlmaWVkOlxuICAgICAgLy8gdXBkYXRlIGBwYXJlbnQuZmllbGRbaW5kZXhdID0gaXRlbWBcblxuXG4gICAgICB2YXIgbmV4dEl0ZW1zID0gKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShjdXJyZW50SXRlbXMpO1xuICAgICAgbmV4dEl0ZW1zW2l0ZW1JbmRleF0gPSBzdG9yZS5nZXQoaXRlbUlEKTtcbiAgICAgIGN1cnJlbnRQYXJlbnRSZWNvcmQuc2V0TGlua2VkUmVjb3JkcyhuZXh0SXRlbXMsIHN0b3JhZ2VLZXkpO1xuICAgIH0pOyAvLyBOb3cgdGhhdCB0aGUgcGFyZW50IHJlY29yZCBoYXMgYmVlbiB1cGRhdGVkIHRvIGluY2x1ZGUgdGhlIG5ldyBpdGVtLFxuICAgIC8vIGFsc28gdXBkYXRlIGFueSBoYW5kbGUgZmllbGRzIHRoYXQgYXJlIGRlcml2ZWQgZnJvbSB0aGUgcGFyZW50IHJlY29yZC5cblxuXG4gICAgaWYgKGZpZWxkUGF5bG9hZHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICB2YXIgaGFuZGxlRmllbGRzUmVsYXlQYXlsb2FkID0ge1xuICAgICAgICBlcnJvcnM6IG51bGwsXG4gICAgICAgIGZpZWxkUGF5bG9hZHM6IGZpZWxkUGF5bG9hZHMsXG4gICAgICAgIGluY3JlbWVudGFsUGxhY2Vob2xkZXJzOiBudWxsLFxuICAgICAgICBtb2R1bGVJbXBvcnRQYXlsb2FkczogbnVsbCxcbiAgICAgICAgc291cmNlOiBSZWxheVJlY29yZFNvdXJjZS5jcmVhdGUoKSxcbiAgICAgICAgaXNGaW5hbDogZmFsc2VcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX3B1Ymxpc2hRdWV1ZS5jb21taXRQYXlsb2FkKHRoaXMuX29wZXJhdGlvbiwgaGFuZGxlRmllbGRzUmVsYXlQYXlsb2FkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVsYXlQYXlsb2FkO1xuICB9O1xuXG4gIF9wcm90by5fbm9ybWFsaXplU3RyZWFtSXRlbSA9IGZ1bmN0aW9uIF9ub3JtYWxpemVTdHJlYW1JdGVtKHJlc3BvbnNlLCBwYXJlbnRJRCwgZmllbGQsIHZhcmlhYmxlcywgcGF0aCwgbm9ybWFsaXphdGlvblBhdGgpIHtcbiAgICB2YXIgX2ZpZWxkJGFsaWFzLCBfZmllbGQkY29uY3JldGVUeXBlLCBfdGhpcyRfZ2V0RGF0YUlEO1xuXG4gICAgdmFyIGRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICEodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuRW52aXJvbm1lbnQ6IEV4cGVjdGVkIHRoZSBHcmFwaFFMIEBzdHJlYW0gcGF5bG9hZCBgZGF0YWAgJyArICd2YWx1ZSB0byBiZSBhbiBvYmplY3QuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciByZXNwb25zZUtleSA9IChfZmllbGQkYWxpYXMgPSBmaWVsZC5hbGlhcykgIT09IG51bGwgJiYgX2ZpZWxkJGFsaWFzICE9PSB2b2lkIDAgPyBfZmllbGQkYWxpYXMgOiBmaWVsZC5uYW1lO1xuICAgIHZhciBzdG9yYWdlS2V5ID0gZ2V0U3RvcmFnZUtleShmaWVsZCwgdmFyaWFibGVzKTsgLy8gTG9hZCB0aGUgdmVyc2lvbiBvZiB0aGUgcGFyZW50IHJlY29yZCBmcm9tIHdoaWNoIHRoaXMgaW5jcmVtZW50YWwgZGF0YVxuICAgIC8vIHdhcyBkZXJpdmVkXG5cbiAgICB2YXIgcGFyZW50RW50cnkgPSB0aGlzLl9zb3VyY2UuZ2V0KHBhcmVudElEKTtcblxuICAgICEocGFyZW50RW50cnkgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkVudmlyb25tZW50OiBFeHBlY3RlZCB0aGUgcGFyZW50IHJlY29yZCBgJXNgIGZvciBAc3RyZWFtICcgKyAnZGF0YSB0byBleGlzdC4nLCBwYXJlbnRJRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBwYXJlbnRSZWNvcmQgPSBwYXJlbnRFbnRyeS5yZWNvcmQsXG4gICAgICAgIGZpZWxkUGF5bG9hZHMgPSBwYXJlbnRFbnRyeS5maWVsZFBheWxvYWRzOyAvLyBMb2FkIHRoZSBmaWVsZCB2YWx1ZSAoaXRlbXMpIHRoYXQgd2VyZSBjcmVhdGVkIGJ5ICp0aGlzKiBxdWVyeSBleGVjdXRvclxuICAgIC8vIGluIG9yZGVyIHRvIGNoZWNrIGlmIHRoZXJlIGhhcyBiZWVuIGFueSBjb25jdXJyZW50IG1vZGlmaWNhdGlvbnMgYnkgc29tZVxuICAgIC8vIG90aGVyIG9wZXJhdGlvbi5cblxuICAgIHZhciBwcmV2SURzID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0TGlua2VkUmVjb3JkSURzKHBhcmVudFJlY29yZCwgc3RvcmFnZUtleSk7XG4gICAgIShwcmV2SURzICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5FbnZpcm9ubWVudDogRXhwZWN0ZWQgcmVjb3JkIGAlc2AgdG8gaGF2ZSBmZXRjaGVkIGZpZWxkICcgKyAnYCVzYCB3aXRoIEBzdHJlYW0uJywgcGFyZW50SUQsIGZpZWxkLm5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gRGV0ZXJtaW5lIHRoZSBpbmRleCBpbiB0aGUgZmllbGQgb2YgdGhlIG5ldyBpdGVtXG5cbiAgICB2YXIgZmluYWxQYXRoRW50cnkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gICAgdmFyIGl0ZW1JbmRleCA9IHBhcnNlSW50KGZpbmFsUGF0aEVudHJ5LCAxMCk7XG4gICAgIShpdGVtSW5kZXggPT09IGZpbmFsUGF0aEVudHJ5ICYmIGl0ZW1JbmRleCA+PSAwKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuRW52aXJvbm1lbnQ6IEV4cGVjdGVkIHBhdGggZm9yIEBzdHJlYW0gdG8gZW5kIGluIGEgJyArICdwb3NpdGl2ZSBpbnRlZ2VyIGluZGV4LCBnb3QgYCVzYCcsIGZpbmFsUGF0aEVudHJ5KSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIHR5cGVOYW1lID0gKF9maWVsZCRjb25jcmV0ZVR5cGUgPSBmaWVsZC5jb25jcmV0ZVR5cGUpICE9PSBudWxsICYmIF9maWVsZCRjb25jcmV0ZVR5cGUgIT09IHZvaWQgMCA/IF9maWVsZCRjb25jcmV0ZVR5cGUgOiBkYXRhW1RZUEVOQU1FX0tFWV07XG4gICAgISh0eXBlb2YgdHlwZU5hbWUgPT09ICdzdHJpbmcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuRW52aXJvbm1lbnQ6IEV4cGVjdGVkIEBzdHJlYW0gZmllbGQgYCVzYCB0byBoYXZlIGEgJyArICdfX3R5cGVuYW1lLicsIGZpZWxkLm5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gRGV0ZXJtaW5lIHRoZSBfX2lkIG9mIHRoZSBuZXcgaXRlbTogdGhpcyBtdXN0IGVxdWFsIHRoZSB2YWx1ZSB0aGF0IHdvdWxkXG4gICAgLy8gYmUgYXNzaWduZWQgaGFkIHRoZSBpdGVtIG5vdCBiZWVuIHN0cmVhbWVkXG5cbiAgICB2YXIgaXRlbUlEID0gLy8gaHR0cHM6Ly9naXRodWIuY29tL3ByZXR0aWVyL3ByZXR0aWVyL2lzc3Vlcy82NDAzXG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgKChfdGhpcyRfZ2V0RGF0YUlEID0gdGhpcy5fZ2V0RGF0YUlEKGRhdGEsIHR5cGVOYW1lKSkgIT09IG51bGwgJiYgX3RoaXMkX2dldERhdGFJRCAhPT0gdm9pZCAwID8gX3RoaXMkX2dldERhdGFJRCA6IHByZXZJRHMgJiYgcHJldklEc1tpdGVtSW5kZXhdKSB8fCAvLyBSZXVzZSBwcmV2aW91c2x5IGdlbmVyYXRlZCBjbGllbnQgSURzXG4gICAgZ2VuZXJhdGVDbGllbnRJRChwYXJlbnRJRCwgc3RvcmFnZUtleSwgaXRlbUluZGV4KTtcbiAgICAhKHR5cGVvZiBpdGVtSUQgPT09ICdzdHJpbmcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuRW52aXJvbm1lbnQ6IEV4cGVjdGVkIGlkIG9mIGVsZW1lbnRzIG9mIGZpZWxkIGAlc2AgdG8gJyArICdiZSBzdHJpbmdzLicsIHN0b3JhZ2VLZXkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gQnVpbGQgYSBzZWxlY3RvciB0byBub3JtYWxpemUgdGhlIGl0ZW0gZGF0YSB3aXRoXG5cbiAgICB2YXIgc2VsZWN0b3IgPSBjcmVhdGVOb3JtYWxpemF0aW9uU2VsZWN0b3IoZmllbGQsIGl0ZW1JRCwgdmFyaWFibGVzKTsgLy8gVXBkYXRlIHRoZSBjYWNoZWQgdmVyc2lvbiBvZiB0aGUgcGFyZW50IHJlY29yZCB0byByZWZsZWN0IHRoZSBuZXcgaXRlbTpcbiAgICAvLyB0aGlzIGlzIHVzZWQgd2hlbiBzdWJzZXF1ZW50IHN0cmVhbSBwYXlsb2FkcyBhcnJpdmUgdG8gc2VlIGlmIHRoZXJlXG4gICAgLy8gaGF2ZSBiZWVuIGNvbmN1cnJlbnQgbW9kaWZpY2F0aW9ucyB0byB0aGUgbGlzdFxuXG4gICAgdmFyIG5leHRQYXJlbnRSZWNvcmQgPSBSZWxheU1vZGVyblJlY29yZC5jbG9uZShwYXJlbnRSZWNvcmQpO1xuICAgIHZhciBuZXh0SURzID0gKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShwcmV2SURzKTtcbiAgICBuZXh0SURzW2l0ZW1JbmRleF0gPSBpdGVtSUQ7XG4gICAgUmVsYXlNb2Rlcm5SZWNvcmQuc2V0TGlua2VkUmVjb3JkSURzKG5leHRQYXJlbnRSZWNvcmQsIHN0b3JhZ2VLZXksIG5leHRJRHMpO1xuXG4gICAgdGhpcy5fc291cmNlLnNldChwYXJlbnRJRCwge1xuICAgICAgcmVjb3JkOiBuZXh0UGFyZW50UmVjb3JkLFxuICAgICAgZmllbGRQYXlsb2FkczogZmllbGRQYXlsb2Fkc1xuICAgIH0pO1xuXG4gICAgdmFyIHJlbGF5UGF5bG9hZCA9IG5vcm1hbGl6ZVJlc3BvbnNlKHJlc3BvbnNlLCBzZWxlY3RvciwgdHlwZU5hbWUsIHtcbiAgICAgIGdldERhdGFJRDogdGhpcy5fZ2V0RGF0YUlELFxuICAgICAgcGF0aDogW10uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkobm9ybWFsaXphdGlvblBhdGgpLCBbcmVzcG9uc2VLZXksIFN0cmluZyhpdGVtSW5kZXgpXSksXG4gICAgICByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXI6IHRoaXMuX3JlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcixcbiAgICAgIHJlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyOiB0aGlzLl9yZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcixcbiAgICAgIHRyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbDogdGhpcy5fdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsLFxuICAgICAgc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHM6IHRoaXMuX3Nob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZpZWxkUGF5bG9hZHM6IGZpZWxkUGF5bG9hZHMsXG4gICAgICBpdGVtSUQ6IGl0ZW1JRCxcbiAgICAgIGl0ZW1JbmRleDogaXRlbUluZGV4LFxuICAgICAgcHJldklEczogcHJldklEcyxcbiAgICAgIHJlbGF5UGF5bG9hZDogcmVsYXlQYXlsb2FkLFxuICAgICAgc3RvcmFnZUtleTogc3RvcmFnZUtleVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLl91cGRhdGVPcGVyYXRpb25UcmFja2VyID0gZnVuY3Rpb24gX3VwZGF0ZU9wZXJhdGlvblRyYWNrZXIodXBkYXRlZE93bmVycykge1xuICAgIGlmICh1cGRhdGVkT3duZXJzICE9IG51bGwgJiYgdXBkYXRlZE93bmVycy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLl9vcGVyYXRpb25UcmFja2VyLnVwZGF0ZSh0aGlzLl9vcGVyYXRpb24ucmVxdWVzdCwgbmV3IFNldCh1cGRhdGVkT3duZXJzKSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fY29tcGxldGVPcGVyYXRpb25UcmFja2VyID0gZnVuY3Rpb24gX2NvbXBsZXRlT3BlcmF0aW9uVHJhY2tlcigpIHtcbiAgICB0aGlzLl9vcGVyYXRpb25UcmFja2VyLmNvbXBsZXRlKHRoaXMuX29wZXJhdGlvbi5yZXF1ZXN0KTtcbiAgfTtcblxuICByZXR1cm4gRXhlY3V0b3I7XG59KCk7XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbkdyYXBoUUxSZXNwb25zZXMocmVzcG9uc2VzKSB7XG4gIHZhciBub25JbmNyZW1lbnRhbFJlc3BvbnNlcyA9IFtdO1xuICB2YXIgaW5jcmVtZW50YWxSZXNwb25zZXMgPSBbXTtcbiAgcmVzcG9uc2VzLmZvckVhY2goZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgaWYgKHJlc3BvbnNlLnBhdGggIT0gbnVsbCB8fCByZXNwb25zZS5sYWJlbCAhPSBudWxsKSB7XG4gICAgICB2YXIgbGFiZWwgPSByZXNwb25zZS5sYWJlbCxcbiAgICAgICAgICBwYXRoID0gcmVzcG9uc2UucGF0aDtcblxuICAgICAgaWYgKGxhYmVsID09IG51bGwgfHwgcGF0aCA9PSBudWxsKSB7XG4gICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ09wZXJhdGlvbkV4ZWN1dG9yOiBpbnZhbGlkIGluY3JlbWVudGFsIHBheWxvYWQsIGV4cGVjdGVkICcgKyAnYHBhdGhgIGFuZCBgbGFiZWxgIHRvIGVpdGhlciBib3RoIGJlIG51bGwvdW5kZWZpbmVkLCBvciAnICsgJ2BwYXRoYCB0byBiZSBhbiBgQXJyYXk8c3RyaW5nIHwgbnVtYmVyPmAgYW5kIGBsYWJlbGAgdG8gYmUgYSAnICsgJ2BzdHJpbmdgLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIH1cblxuICAgICAgaW5jcmVtZW50YWxSZXNwb25zZXMucHVzaCh7XG4gICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9uSW5jcmVtZW50YWxSZXNwb25zZXMucHVzaChyZXNwb25zZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtub25JbmNyZW1lbnRhbFJlc3BvbnNlcywgaW5jcmVtZW50YWxSZXNwb25zZXNdO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVSZXNwb25zZShyZXNwb25zZSwgc2VsZWN0b3IsIHR5cGVOYW1lLCBvcHRpb25zKSB7XG4gIHZhciBfcmVzcG9uc2UkZXh0ZW5zaW9uczM7XG5cbiAgdmFyIGRhdGEgPSByZXNwb25zZS5kYXRhLFxuICAgICAgZXJyb3JzID0gcmVzcG9uc2UuZXJyb3JzO1xuICB2YXIgc291cmNlID0gUmVsYXlSZWNvcmRTb3VyY2UuY3JlYXRlKCk7XG4gIHZhciByZWNvcmQgPSBSZWxheU1vZGVyblJlY29yZC5jcmVhdGUoc2VsZWN0b3IuZGF0YUlELCB0eXBlTmFtZSk7XG4gIHNvdXJjZS5zZXQoc2VsZWN0b3IuZGF0YUlELCByZWNvcmQpO1xuICB2YXIgcmVsYXlQYXlsb2FkID0gUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXIubm9ybWFsaXplKHNvdXJjZSwgc2VsZWN0b3IsIGRhdGEsIG9wdGlvbnMpO1xuICByZXR1cm4gKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIHJlbGF5UGF5bG9hZCksIHt9LCB7XG4gICAgZXJyb3JzOiBlcnJvcnMsXG4gICAgaXNGaW5hbDogKChfcmVzcG9uc2UkZXh0ZW5zaW9uczMgPSByZXNwb25zZS5leHRlbnNpb25zKSA9PT0gbnVsbCB8fCBfcmVzcG9uc2UkZXh0ZW5zaW9uczMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yZXNwb25zZSRleHRlbnNpb25zMy5pc19maW5hbCkgPT09IHRydWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0YWJsZVN0cmluZ2lmeSh2YWx1ZSkge1xuICB2YXIgX0pTT04kc3RyaW5naWZ5O1xuXG4gIHJldHVybiAoX0pTT04kc3RyaW5naWZ5ID0gSlNPTi5zdHJpbmdpZnkoc3RhYmxlQ29weSh2YWx1ZSkpKSAhPT0gbnVsbCAmJiBfSlNPTiRzdHJpbmdpZnkgIT09IHZvaWQgMCA/IF9KU09OJHN0cmluZ2lmeSA6ICcnOyAvLyBudWxsLWNoZWNrIGZvciBmbG93XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlT3B0aW1pc3RpY1Jlc3BvbnNlUGF5bG9hZChwYXlsb2FkKSB7XG4gIHZhciBpbmNyZW1lbnRhbFBsYWNlaG9sZGVycyA9IHBheWxvYWQuaW5jcmVtZW50YWxQbGFjZWhvbGRlcnM7XG5cbiAgaWYgKGluY3JlbWVudGFsUGxhY2Vob2xkZXJzICE9IG51bGwgJiYgaW5jcmVtZW50YWxQbGFjZWhvbGRlcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnT3BlcmF0aW9uRXhlY3V0b3I6IG9wdGltaXN0aWMgcmVzcG9uc2VzIGNhbm5vdCBiZSByZXR1cm5lZCAnICsgJ2ZvciBvcGVyYXRpb25zIHRoYXQgdXNlIGluY3JlbWVudGFsIGRhdGEgZGVsaXZlcnkgKEBkZWZlciwgJyArICdAc3RyZWFtLCBhbmQgQHN0cmVhbV9jb25uZWN0aW9uKS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGV4ZWN1dGU6IGV4ZWN1dGVcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB0aGUgdmFyaWFibGVzIHRoYXQgYXJlIGluIHNjb3BlIGZvciBhIGZyYWdtZW50IGdpdmVuIHRoZSB2YXJpYWJsZXNcbiAqIGluIHNjb3BlIGF0IHRoZSByb290IHF1ZXJ5IGFzIHdlbGwgYXMgYW55IGFyZ3VtZW50cyBhcHBsaWVkIGF0IHRoZSBmcmFnbWVudFxuICogc3ByZWFkIHZpYSBgQGFyZ3VtZW50c2AuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgaXMgYW5hbGFnb3VzIHRvIGRldGVybWluaW5nIGZ1bmN0aW9uIGFyZ3VtZW50cyBnaXZlbiBhIGZ1bmN0aW9uIGNhbGwuXG4gKi9cbmZ1bmN0aW9uIGdldEZyYWdtZW50VmFyaWFibGVzKGZyYWdtZW50LCByb290VmFyaWFibGVzLCBhcmd1bWVudFZhcmlhYmxlcykge1xuICB2YXIgdmFyaWFibGVzO1xuICBmcmFnbWVudC5hcmd1bWVudERlZmluaXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgICBpZiAoYXJndW1lbnRWYXJpYWJsZXMuaGFzT3duUHJvcGVydHkoZGVmaW5pdGlvbi5uYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gJEZsb3dGaXhNZVtjYW5ub3Qtc3ByZWFkLWludGVyZmFjZV1cblxuXG4gICAgdmFyaWFibGVzID0gdmFyaWFibGVzIHx8ICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCBhcmd1bWVudFZhcmlhYmxlcyk7XG5cbiAgICBzd2l0Y2ggKGRlZmluaXRpb24ua2luZCkge1xuICAgICAgY2FzZSAnTG9jYWxBcmd1bWVudCc6XG4gICAgICAgIHZhcmlhYmxlc1tkZWZpbml0aW9uLm5hbWVdID0gZGVmaW5pdGlvbi5kZWZhdWx0VmFsdWU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdSb290QXJndW1lbnQnOlxuICAgICAgICBpZiAoIXJvb3RWYXJpYWJsZXMuaGFzT3duUHJvcGVydHkoZGVmaW5pdGlvbi5uYW1lKSkge1xuICAgICAgICAgIC8qXG4gICAgICAgICAgICogR2xvYmFsIHZhcmlhYmxlcyBwYXNzZWQgYXMgdmFsdWVzIG9mIEBhcmd1bWVudHMgYXJlIG5vdCByZXF1aXJlZCB0b1xuICAgICAgICAgICAqIGJlIGRlY2xhcmVkIHVubGVzcyB0aGV5IGFyZSB1c2VkIGJ5IHRoZSBjYWxsZWUgZnJhZ21lbnQgb3IgYVxuICAgICAgICAgICAqIGRlc2NlbmRhbnQuIEluIHRoaXMgY2FzZSwgdGhlIHJvb3QgdmFyaWFibGUgbWF5IG5vdCBiZSBkZWZpbmVkIHdoZW5cbiAgICAgICAgICAgKiByZXNvbHZpbmcgdGhlIGNhbGxlZSdzIHZhcmlhYmxlcy4gVGhlIHZhbHVlIGlzIGV4cGxpY2l0bHkgc2V0IHRvXG4gICAgICAgICAgICogdW5kZWZpbmVkIHRvIGNvbmZvcm0gdG8gdGhlIGNoZWNrIGluXG4gICAgICAgICAgICogUmVsYXlTdG9yZVV0aWxzLmdldFN0YWJsZVZhcmlhYmxlVmFsdWUoKSB0aGF0IHZhcmlhYmxlIGtleXMgYXJlIGFsbFxuICAgICAgICAgICAqIHByZXNlbnQuXG4gICAgICAgICAgICovXG4gICAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICAgICAgICAgIHZhcmlhYmxlc1tkZWZpbml0aW9uLm5hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgICAgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cblxuICAgICAgICB2YXJpYWJsZXNbZGVmaW5pdGlvbi5uYW1lXSA9IHJvb3RWYXJpYWJsZXNbZGVmaW5pdGlvbi5uYW1lXTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGRlZmluaXRpb247XG4gICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5Q29uY3JldGVWYXJpYWJsZXM6IFVuZXhwZWN0ZWQgbm9kZSBraW5kIGAlc2AgaW4gZnJhZ21lbnQgYCVzYC4nLCBkZWZpbml0aW9uLmtpbmQsIGZyYWdtZW50Lm5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdmFyaWFibGVzIHx8IGFyZ3VtZW50VmFyaWFibGVzO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSB2YXJpYWJsZXMgdGhhdCBhcmUgaW4gc2NvcGUgZm9yIGEgZ2l2ZW4gb3BlcmF0aW9uIGdpdmVuIHZhbHVlc1xuICogZm9yIHNvbWUvYWxsIG9mIGl0cyBhcmd1bWVudHMuIEV4dHJhbmVvdXMgaW5wdXQgdmFyaWFibGVzIGFyZSBmaWx0ZXJlZCBmcm9tXG4gKiB0aGUgb3V0cHV0LCBhbmQgbWlzc2luZyB2YXJpYWJsZXMgYXJlIHNldCB0byBkZWZhdWx0IHZhbHVlcyAoaWYgZ2l2ZW4gaW4gdGhlXG4gKiBvcGVyYXRpb24ncyBkZWZpbml0aW9uKS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldE9wZXJhdGlvblZhcmlhYmxlcyhvcGVyYXRpb24sIHZhcmlhYmxlcykge1xuICB2YXIgb3BlcmF0aW9uVmFyaWFibGVzID0ge307XG4gIG9wZXJhdGlvbi5hcmd1bWVudERlZmluaXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGRlZikge1xuICAgIHZhciB2YWx1ZSA9IGRlZi5kZWZhdWx0VmFsdWU7IC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuXG4gICAgaWYgKHZhcmlhYmxlc1tkZWYubmFtZV0gIT0gbnVsbCkge1xuICAgICAgdmFsdWUgPSB2YXJpYWJsZXNbZGVmLm5hbWVdO1xuICAgIH1cblxuICAgIG9wZXJhdGlvblZhcmlhYmxlc1tkZWYubmFtZV0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBvcGVyYXRpb25WYXJpYWJsZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRGcmFnbWVudFZhcmlhYmxlczogZ2V0RnJhZ21lbnRWYXJpYWJsZXMsXG4gIGdldE9wZXJhdGlvblZhcmlhYmxlczogZ2V0T3BlcmF0aW9uVmFyaWFibGVzXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBPcGVyYXRpb25FeGVjdXRvciA9IHJlcXVpcmUoJy4vT3BlcmF0aW9uRXhlY3V0b3InKTtcblxudmFyIFJlbGF5RGVmYXVsdEhhbmRsZXJQcm92aWRlciA9IHJlcXVpcmUoJy4uL2hhbmRsZXJzL1JlbGF5RGVmYXVsdEhhbmRsZXJQcm92aWRlcicpO1xuXG52YXIgUmVsYXlGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuLi91dGlsL1JlbGF5RmVhdHVyZUZsYWdzJyk7XG5cbnZhciBSZWxheU9ic2VydmFibGUgPSByZXF1aXJlKCcuLi9uZXR3b3JrL1JlbGF5T2JzZXJ2YWJsZScpO1xuXG52YXIgUmVsYXlPcGVyYXRpb25UcmFja2VyID0gcmVxdWlyZSgnLi4vc3RvcmUvUmVsYXlPcGVyYXRpb25UcmFja2VyJyk7XG5cbnZhciBSZWxheVB1Ymxpc2hRdWV1ZSA9IHJlcXVpcmUoJy4vUmVsYXlQdWJsaXNoUXVldWUnKTtcblxudmFyIFJlbGF5UmVjb3JkU291cmNlID0gcmVxdWlyZSgnLi9SZWxheVJlY29yZFNvdXJjZScpO1xuXG52YXIgZGVmYXVsdEdldERhdGFJRCA9IHJlcXVpcmUoJy4vZGVmYXVsdEdldERhdGFJRCcpO1xuXG52YXIgZGVmYXVsdFJlcXVpcmVkRmllbGRMb2dnZXIgPSByZXF1aXJlKCcuL2RlZmF1bHRSZXF1aXJlZEZpZWxkTG9nZ2VyJyk7XG5cbnZhciBnZW5lcmF0ZUlEID0gcmVxdWlyZSgnLi4vdXRpbC9nZW5lcmF0ZUlEJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIFJlbGF5TW9kZXJuRW52aXJvbm1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWxheU1vZGVybkVudmlyb25tZW50KGNvbmZpZykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgX2NvbmZpZyRsb2csIF9jb25maWckcmVxdWlyZWRGaWVsZCwgX2NvbmZpZyRVTlNUQUJMRV9kZWZhLCBfY29uZmlnJGdldERhdGFJRCwgX2NvbmZpZyRoYW5kbGVyUHJvdmlkLCBfY29uZmlnJHNjaGVkdWxlciwgX2NvbmZpZyRpc1NlcnZlciwgX2NvbmZpZyRvcGVyYXRpb25UcmFjO1xuXG4gICAgdGhpcy5jb25maWdOYW1lID0gY29uZmlnLmNvbmZpZ05hbWU7XG4gICAgdGhpcy5fdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsID0gY29uZmlnLnRyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCA9PT0gdHJ1ZTtcbiAgICB2YXIgb3BlcmF0aW9uTG9hZGVyID0gY29uZmlnLm9wZXJhdGlvbkxvYWRlcjtcbiAgICB2YXIgcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyID0gY29uZmlnLnJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcjtcbiAgICB2YXIgcmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXIgPSBjb25maWcucmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXI7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAob3BlcmF0aW9uTG9hZGVyICE9IG51bGwpIHtcbiAgICAgICAgISh0eXBlb2Ygb3BlcmF0aW9uTG9hZGVyID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb3BlcmF0aW9uTG9hZGVyLmdldCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb3BlcmF0aW9uTG9hZGVyLmxvYWQgPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5FbnZpcm9ubWVudDogRXhwZWN0ZWQgYG9wZXJhdGlvbkxvYWRlcmAgdG8gYmUgYW4gb2JqZWN0ICcgKyAnd2l0aCBnZXQoKSBhbmQgbG9hZCgpIGZ1bmN0aW9ucywgZ290IGAlc2AuJywgb3BlcmF0aW9uTG9hZGVyKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIgIT0gbnVsbCkge1xuICAgICAgICAhKHR5cGVvZiByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIgPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5FbnZpcm9ubWVudDogRXhwZWN0ZWQgYHJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcmAgJyArICcgdG8gYmUgYSBmdW5jdGlvbiwgZ290IGAlc2AuJywgcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fX2xvZyA9IChfY29uZmlnJGxvZyA9IGNvbmZpZy5sb2cpICE9PSBudWxsICYmIF9jb25maWckbG9nICE9PSB2b2lkIDAgPyBfY29uZmlnJGxvZyA6IGVtcHR5RnVuY3Rpb247XG4gICAgdGhpcy5yZXF1aXJlZEZpZWxkTG9nZ2VyID0gKF9jb25maWckcmVxdWlyZWRGaWVsZCA9IGNvbmZpZy5yZXF1aXJlZEZpZWxkTG9nZ2VyKSAhPT0gbnVsbCAmJiBfY29uZmlnJHJlcXVpcmVkRmllbGQgIT09IHZvaWQgMCA/IF9jb25maWckcmVxdWlyZWRGaWVsZCA6IGRlZmF1bHRSZXF1aXJlZEZpZWxkTG9nZ2VyO1xuICAgIHRoaXMuX2RlZmF1bHRSZW5kZXJQb2xpY3kgPSAoKF9jb25maWckVU5TVEFCTEVfZGVmYSA9IGNvbmZpZy5VTlNUQUJMRV9kZWZhdWx0UmVuZGVyUG9saWN5KSAhPT0gbnVsbCAmJiBfY29uZmlnJFVOU1RBQkxFX2RlZmEgIT09IHZvaWQgMCA/IF9jb25maWckVU5TVEFCTEVfZGVmYSA6IFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9QQVJUSUFMX1JFTkRFUklOR19ERUZBVUxUID09PSB0cnVlKSA/ICdwYXJ0aWFsJyA6ICdmdWxsJztcbiAgICB0aGlzLl9vcGVyYXRpb25Mb2FkZXIgPSBvcGVyYXRpb25Mb2FkZXI7XG4gICAgdGhpcy5fb3BlcmF0aW9uRXhlY3V0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9uZXR3b3JrID0gdGhpcy5fX3dyYXBOZXR3b3JrV2l0aExvZ09ic2VydmVyKGNvbmZpZy5uZXR3b3JrKTtcbiAgICB0aGlzLl9nZXREYXRhSUQgPSAoX2NvbmZpZyRnZXREYXRhSUQgPSBjb25maWcuZ2V0RGF0YUlEKSAhPT0gbnVsbCAmJiBfY29uZmlnJGdldERhdGFJRCAhPT0gdm9pZCAwID8gX2NvbmZpZyRnZXREYXRhSUQgOiBkZWZhdWx0R2V0RGF0YUlEO1xuICAgIHRoaXMuX3B1Ymxpc2hRdWV1ZSA9IG5ldyBSZWxheVB1Ymxpc2hRdWV1ZShjb25maWcuc3RvcmUsIChfY29uZmlnJGhhbmRsZXJQcm92aWQgPSBjb25maWcuaGFuZGxlclByb3ZpZGVyKSAhPT0gbnVsbCAmJiBfY29uZmlnJGhhbmRsZXJQcm92aWQgIT09IHZvaWQgMCA/IF9jb25maWckaGFuZGxlclByb3ZpZCA6IFJlbGF5RGVmYXVsdEhhbmRsZXJQcm92aWRlciwgdGhpcy5fZ2V0RGF0YUlEKTtcbiAgICB0aGlzLl9zY2hlZHVsZXIgPSAoX2NvbmZpZyRzY2hlZHVsZXIgPSBjb25maWcuc2NoZWR1bGVyKSAhPT0gbnVsbCAmJiBfY29uZmlnJHNjaGVkdWxlciAhPT0gdm9pZCAwID8gX2NvbmZpZyRzY2hlZHVsZXIgOiBudWxsO1xuICAgIHRoaXMuX3N0b3JlID0gY29uZmlnLnN0b3JlO1xuICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuICAgIHRoaXMuX2lzU2VydmVyID0gKF9jb25maWckaXNTZXJ2ZXIgPSBjb25maWcuaXNTZXJ2ZXIpICE9PSBudWxsICYmIF9jb25maWckaXNTZXJ2ZXIgIT09IHZvaWQgMCA/IF9jb25maWckaXNTZXJ2ZXIgOiBmYWxzZTtcblxuICAgIHRoaXMuX19zZXROZXQgPSBmdW5jdGlvbiAobmV3TmV0KSB7XG4gICAgICByZXR1cm4gX3RoaXMuX25ldHdvcmsgPSBfdGhpcy5fX3dyYXBOZXR3b3JrV2l0aExvZ09ic2VydmVyKG5ld05ldCk7XG4gICAgfTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vU3RvcmVJbnNwZWN0b3InKSxcbiAgICAgICAgICBpbnNwZWN0ID0gX3JlcXVpcmUuaW5zcGVjdDtcblxuICAgICAgdGhpcy5ERUJVR19pbnNwZWN0ID0gZnVuY3Rpb24gKGRhdGFJRCkge1xuICAgICAgICByZXR1cm4gaW5zcGVjdChfdGhpcywgZGF0YUlEKTtcbiAgICAgIH07XG4gICAgfSAvLyBSZWdpc3RlciB0aGlzIFJlbGF5IEVudmlyb25tZW50IHdpdGggUmVsYXkgRGV2VG9vbHMgaWYgaXQgZXhpc3RzLlxuICAgIC8vIE5vdGU6IHRoaXMgbXVzdCBhbHdheXMgYmUgdGhlIGxhc3Qgc3RlcCBpbiB0aGUgY29uc3RydWN0b3IuXG5cblxuICAgIHZhciBfZ2xvYmFsID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBkZXZUb29sc0hvb2sgPSBfZ2xvYmFsICYmIF9nbG9iYWwuX19SRUxBWV9ERVZUT09MU19IT09LX187XG5cbiAgICBpZiAoZGV2VG9vbHNIb29rKSB7XG4gICAgICBkZXZUb29sc0hvb2sucmVnaXN0ZXJFbnZpcm9ubWVudCh0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLl9taXNzaW5nRmllbGRIYW5kbGVycyA9IGNvbmZpZy5taXNzaW5nRmllbGRIYW5kbGVycztcbiAgICB0aGlzLl9vcGVyYXRpb25UcmFja2VyID0gKF9jb25maWckb3BlcmF0aW9uVHJhYyA9IGNvbmZpZy5vcGVyYXRpb25UcmFja2VyKSAhPT0gbnVsbCAmJiBfY29uZmlnJG9wZXJhdGlvblRyYWMgIT09IHZvaWQgMCA/IF9jb25maWckb3BlcmF0aW9uVHJhYyA6IG5ldyBSZWxheU9wZXJhdGlvblRyYWNrZXIoKTtcbiAgICB0aGlzLl9yZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIgPSByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXI7XG4gICAgdGhpcy5fcmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXIgPSByZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcjtcbiAgICB0aGlzLl9zaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50cyA9IGNvbmZpZy5zaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50cztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZWxheU1vZGVybkVudmlyb25tZW50LnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0U3RvcmUgPSBmdW5jdGlvbiBnZXRTdG9yZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RvcmU7XG4gIH07XG5cbiAgX3Byb3RvLmdldE5ldHdvcmsgPSBmdW5jdGlvbiBnZXROZXR3b3JrKCkge1xuICAgIHJldHVybiB0aGlzLl9uZXR3b3JrO1xuICB9O1xuXG4gIF9wcm90by5nZXRPcGVyYXRpb25UcmFja2VyID0gZnVuY3Rpb24gZ2V0T3BlcmF0aW9uVHJhY2tlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fb3BlcmF0aW9uVHJhY2tlcjtcbiAgfTtcblxuICBfcHJvdG8uaXNSZXF1ZXN0QWN0aXZlID0gZnVuY3Rpb24gaXNSZXF1ZXN0QWN0aXZlKHJlcXVlc3RJZGVudGlmaWVyKSB7XG4gICAgdmFyIGFjdGl2ZVN0YXRlID0gdGhpcy5fb3BlcmF0aW9uRXhlY3V0aW9ucy5nZXQocmVxdWVzdElkZW50aWZpZXIpO1xuXG4gICAgcmV0dXJuIGFjdGl2ZVN0YXRlID09PSAnYWN0aXZlJztcbiAgfTtcblxuICBfcHJvdG8uVU5TVEFCTEVfZ2V0RGVmYXVsdFJlbmRlclBvbGljeSA9IGZ1bmN0aW9uIFVOU1RBQkxFX2dldERlZmF1bHRSZW5kZXJQb2xpY3koKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRSZW5kZXJQb2xpY3k7XG4gIH07XG5cbiAgX3Byb3RvLmFwcGx5VXBkYXRlID0gZnVuY3Rpb24gYXBwbHlVcGRhdGUob3B0aW1pc3RpY1VwZGF0ZSkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgX3RoaXMyLl9zY2hlZHVsZVVwZGF0ZXMoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuX3B1Ymxpc2hRdWV1ZS5yZXZlcnRVcGRhdGUob3B0aW1pc3RpY1VwZGF0ZSk7XG5cbiAgICAgICAgX3RoaXMyLl9wdWJsaXNoUXVldWUucnVuKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdGhpcy5fc2NoZWR1bGVVcGRhdGVzKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5fcHVibGlzaFF1ZXVlLmFwcGx5VXBkYXRlKG9wdGltaXN0aWNVcGRhdGUpO1xuXG4gICAgICBfdGhpczIuX3B1Ymxpc2hRdWV1ZS5ydW4oKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBkaXNwb3NlOiBkaXNwb3NlXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8ucmV2ZXJ0VXBkYXRlID0gZnVuY3Rpb24gcmV2ZXJ0VXBkYXRlKHVwZGF0ZSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdGhpcy5fc2NoZWR1bGVVcGRhdGVzKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5fcHVibGlzaFF1ZXVlLnJldmVydFVwZGF0ZSh1cGRhdGUpO1xuXG4gICAgICBfdGhpczMuX3B1Ymxpc2hRdWV1ZS5ydW4oKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVwbGFjZVVwZGF0ZSA9IGZ1bmN0aW9uIHJlcGxhY2VVcGRhdGUodXBkYXRlLCBuZXdVcGRhdGUpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHRoaXMuX3NjaGVkdWxlVXBkYXRlcyhmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczQuX3B1Ymxpc2hRdWV1ZS5yZXZlcnRVcGRhdGUodXBkYXRlKTtcblxuICAgICAgX3RoaXM0Ll9wdWJsaXNoUXVldWUuYXBwbHlVcGRhdGUobmV3VXBkYXRlKTtcblxuICAgICAgX3RoaXM0Ll9wdWJsaXNoUXVldWUucnVuKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmFwcGx5TXV0YXRpb24gPSBmdW5jdGlvbiBhcHBseU11dGF0aW9uKG9wdGltaXN0aWNDb25maWcpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICBjcmVhdGVTb3VyY2U6IGZ1bmN0aW9uIGNyZWF0ZVNvdXJjZSgpIHtcbiAgICAgICAgcmV0dXJuIFJlbGF5T2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKF9zaW5rKSB7fSk7XG4gICAgICB9LFxuICAgICAgaXNDbGllbnRQYXlsb2FkOiBmYWxzZSxcbiAgICAgIG9wZXJhdGlvbjogb3B0aW1pc3RpY0NvbmZpZy5vcGVyYXRpb24sXG4gICAgICBvcHRpbWlzdGljQ29uZmlnOiBvcHRpbWlzdGljQ29uZmlnLFxuICAgICAgdXBkYXRlcjogbnVsbFxuICAgIH0pLnN1YnNjcmliZSh7fSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmNoZWNrID0gZnVuY3Rpb24gY2hlY2sob3BlcmF0aW9uKSB7XG4gICAgaWYgKHRoaXMuX21pc3NpbmdGaWVsZEhhbmRsZXJzID09IG51bGwgfHwgdGhpcy5fbWlzc2luZ0ZpZWxkSGFuZGxlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RvcmUuY2hlY2sob3BlcmF0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fY2hlY2tTZWxlY3RvckFuZEhhbmRsZU1pc3NpbmdGaWVsZHMob3BlcmF0aW9uLCB0aGlzLl9taXNzaW5nRmllbGRIYW5kbGVycyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbW1pdFBheWxvYWQgPSBmdW5jdGlvbiBjb21taXRQYXlsb2FkKG9wZXJhdGlvbiwgcGF5bG9hZCkge1xuICAgIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgY3JlYXRlU291cmNlOiBmdW5jdGlvbiBjcmVhdGVTb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiBSZWxheU9ic2VydmFibGUuZnJvbSh7XG4gICAgICAgICAgZGF0YTogcGF5bG9hZFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBpc0NsaWVudFBheWxvYWQ6IHRydWUsXG4gICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgIG9wdGltaXN0aWNDb25maWc6IG51bGwsXG4gICAgICB1cGRhdGVyOiBudWxsXG4gICAgfSkuc3Vic2NyaWJlKHt9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tbWl0VXBkYXRlID0gZnVuY3Rpb24gY29tbWl0VXBkYXRlKHVwZGF0ZXIpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIHRoaXMuX3NjaGVkdWxlVXBkYXRlcyhmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczUuX3B1Ymxpc2hRdWV1ZS5jb21taXRVcGRhdGUodXBkYXRlcik7XG5cbiAgICAgIF90aGlzNS5fcHVibGlzaFF1ZXVlLnJ1bigpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5sb29rdXAgPSBmdW5jdGlvbiBsb29rdXAocmVhZFNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0b3JlLmxvb2t1cChyZWFkU2VsZWN0b3IpO1xuICB9O1xuXG4gIF9wcm90by5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoc25hcHNob3QsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0b3JlLnN1YnNjcmliZShzbmFwc2hvdCwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5yZXRhaW4gPSBmdW5jdGlvbiByZXRhaW4ob3BlcmF0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0b3JlLnJldGFpbihvcGVyYXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5pc1NlcnZlciA9IGZ1bmN0aW9uIGlzU2VydmVyKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1NlcnZlcjtcbiAgfTtcblxuICBfcHJvdG8uX2NoZWNrU2VsZWN0b3JBbmRIYW5kbGVNaXNzaW5nRmllbGRzID0gZnVuY3Rpb24gX2NoZWNrU2VsZWN0b3JBbmRIYW5kbGVNaXNzaW5nRmllbGRzKG9wZXJhdGlvbiwgaGFuZGxlcnMpIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIHZhciB0YXJnZXQgPSBSZWxheVJlY29yZFNvdXJjZS5jcmVhdGUoKTtcblxuICAgIHZhciByZXN1bHQgPSB0aGlzLl9zdG9yZS5jaGVjayhvcGVyYXRpb24sIHtcbiAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgaGFuZGxlcnM6IGhhbmRsZXJzXG4gICAgfSk7XG5cbiAgICBpZiAodGFyZ2V0LnNpemUoKSA+IDApIHtcbiAgICAgIHRoaXMuX3NjaGVkdWxlVXBkYXRlcyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzNi5fcHVibGlzaFF1ZXVlLmNvbW1pdFNvdXJjZSh0YXJnZXQpO1xuXG4gICAgICAgIF90aGlzNi5fcHVibGlzaFF1ZXVlLnJ1bigpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBfcHJvdG8uX3NjaGVkdWxlVXBkYXRlcyA9IGZ1bmN0aW9uIF9zY2hlZHVsZVVwZGF0ZXModGFzaykge1xuICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLl9zY2hlZHVsZXI7XG5cbiAgICBpZiAoc2NoZWR1bGVyICE9IG51bGwpIHtcbiAgICAgIHNjaGVkdWxlci5zY2hlZHVsZSh0YXNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFzaygpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIG9mIEdyYXBoUUxSZXNwb25zZSByZXN1bHRpbmcgZnJvbSBleGVjdXRpbmcgdGhlXG4gICAqIHByb3ZpZGVkIFF1ZXJ5IG9yIFN1YnNjcmlwdGlvbiBvcGVyYXRpb24sIGVhY2ggcmVzdWx0IG9mIHdoaWNoIGlzIHRoZW5cbiAgICogbm9ybWFsaXplZCBhbmQgY29tbWl0dGVkIHRvIHRoZSBwdWJsaXNoIHF1ZXVlLlxuICAgKlxuICAgKiBOb3RlOiBPYnNlcnZhYmxlcyBhcmUgbGF6eSwgc28gY2FsbGluZyB0aGlzIG1ldGhvZCB3aWxsIGRvIG5vdGhpbmcgdW50aWxcbiAgICogdGhlIHJlc3VsdCBpcyBzdWJzY3JpYmVkIHRvOiBlbnZpcm9ubWVudC5leGVjdXRlKHsuLi59KS5zdWJzY3JpYmUoey4uLn0pLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leGVjdXRlID0gZnVuY3Rpb24gZXhlY3V0ZShfcmVmKSB7XG4gICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICB2YXIgb3BlcmF0aW9uID0gX3JlZi5vcGVyYXRpb24sXG4gICAgICAgIHVwZGF0ZXIgPSBfcmVmLnVwZGF0ZXI7XG4gICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgY3JlYXRlU291cmNlOiBmdW5jdGlvbiBjcmVhdGVTb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczcuX25ldHdvcmsuZXhlY3V0ZShvcGVyYXRpb24ucmVxdWVzdC5ub2RlLnBhcmFtcywgb3BlcmF0aW9uLnJlcXVlc3QudmFyaWFibGVzLCBvcGVyYXRpb24ucmVxdWVzdC5jYWNoZUNvbmZpZyB8fCB7fSwgbnVsbCk7XG4gICAgICB9LFxuICAgICAgaXNDbGllbnRQYXlsb2FkOiBmYWxzZSxcbiAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgICAgb3B0aW1pc3RpY0NvbmZpZzogbnVsbCxcbiAgICAgIHVwZGF0ZXI6IHVwZGF0ZXJcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIG9mIEdyYXBoUUxSZXNwb25zZSByZXN1bHRpbmcgZnJvbSBleGVjdXRpbmcgdGhlXG4gICAqIHByb3ZpZGVkIE11dGF0aW9uIG9wZXJhdGlvbiwgdGhlIHJlc3VsdCBvZiB3aGljaCBpcyB0aGVuIG5vcm1hbGl6ZWQgYW5kXG4gICAqIGNvbW1pdHRlZCB0byB0aGUgcHVibGlzaCBxdWV1ZSBhbG9uZyB3aXRoIGFuIG9wdGlvbmFsIG9wdGltaXN0aWMgcmVzcG9uc2VcbiAgICogb3IgdXBkYXRlci5cbiAgICpcbiAgICogTm90ZTogT2JzZXJ2YWJsZXMgYXJlIGxhenksIHNvIGNhbGxpbmcgdGhpcyBtZXRob2Qgd2lsbCBkbyBub3RoaW5nIHVudGlsXG4gICAqIHRoZSByZXN1bHQgaXMgc3Vic2NyaWJlZCB0bzpcbiAgICogZW52aXJvbm1lbnQuZXhlY3V0ZU11dGF0aW9uKHsuLi59KS5zdWJzY3JpYmUoey4uLn0pLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leGVjdXRlTXV0YXRpb24gPSBmdW5jdGlvbiBleGVjdXRlTXV0YXRpb24oX3JlZjIpIHtcbiAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgIHZhciBvcGVyYXRpb24gPSBfcmVmMi5vcGVyYXRpb24sXG4gICAgICAgIG9wdGltaXN0aWNSZXNwb25zZSA9IF9yZWYyLm9wdGltaXN0aWNSZXNwb25zZSxcbiAgICAgICAgb3B0aW1pc3RpY1VwZGF0ZXIgPSBfcmVmMi5vcHRpbWlzdGljVXBkYXRlcixcbiAgICAgICAgdXBkYXRlciA9IF9yZWYyLnVwZGF0ZXIsXG4gICAgICAgIHVwbG9hZGFibGVzID0gX3JlZjIudXBsb2FkYWJsZXM7XG4gICAgdmFyIG9wdGltaXN0aWNDb25maWc7XG5cbiAgICBpZiAob3B0aW1pc3RpY1Jlc3BvbnNlIHx8IG9wdGltaXN0aWNVcGRhdGVyKSB7XG4gICAgICBvcHRpbWlzdGljQ29uZmlnID0ge1xuICAgICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgICAgcmVzcG9uc2U6IG9wdGltaXN0aWNSZXNwb25zZSxcbiAgICAgICAgdXBkYXRlcjogb3B0aW1pc3RpY1VwZGF0ZXJcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgY3JlYXRlU291cmNlOiBmdW5jdGlvbiBjcmVhdGVTb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczguX25ldHdvcmsuZXhlY3V0ZShvcGVyYXRpb24ucmVxdWVzdC5ub2RlLnBhcmFtcywgb3BlcmF0aW9uLnJlcXVlc3QudmFyaWFibGVzLCAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgb3BlcmF0aW9uLnJlcXVlc3QuY2FjaGVDb25maWcpLCB7fSwge1xuICAgICAgICAgIGZvcmNlOiB0cnVlXG4gICAgICAgIH0pLCB1cGxvYWRhYmxlcyk7XG4gICAgICB9LFxuICAgICAgaXNDbGllbnRQYXlsb2FkOiBmYWxzZSxcbiAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgICAgb3B0aW1pc3RpY0NvbmZpZzogb3B0aW1pc3RpY0NvbmZpZyxcbiAgICAgIHVwZGF0ZXI6IHVwZGF0ZXJcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIG9mIEdyYXBoUUxSZXNwb25zZSByZXN1bHRpbmcgZnJvbSBleGVjdXRpbmcgdGhlXG4gICAqIHByb3ZpZGVkIFF1ZXJ5IG9yIFN1YnNjcmlwdGlvbiBvcGVyYXRpb24gcmVzcG9uc2VzLCB0aGUgcmVzdWx0IG9mIHdoaWNoIGlzXG4gICAqIHRoZW4gbm9ybWFsaXplZCBhbmQgY29taXR0ZWQgdG8gdGhlIHB1Ymxpc2ggcXVldWUuXG4gICAqXG4gICAqIE5vdGU6IE9ic2VydmFibGVzIGFyZSBsYXp5LCBzbyBjYWxsaW5nIHRoaXMgbWV0aG9kIHdpbGwgZG8gbm90aGluZyB1bnRpbFxuICAgKiB0aGUgcmVzdWx0IGlzIHN1YnNjcmliZWQgdG86XG4gICAqIGVudmlyb25tZW50LmV4ZWN1dGVXaXRoU291cmNlKHsuLi59KS5zdWJzY3JpYmUoey4uLn0pLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leGVjdXRlV2l0aFNvdXJjZSA9IGZ1bmN0aW9uIGV4ZWN1dGVXaXRoU291cmNlKF9yZWYzKSB7XG4gICAgdmFyIG9wZXJhdGlvbiA9IF9yZWYzLm9wZXJhdGlvbixcbiAgICAgICAgc291cmNlID0gX3JlZjMuc291cmNlO1xuICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgIGNyZWF0ZVNvdXJjZTogZnVuY3Rpb24gY3JlYXRlU291cmNlKCkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfSxcbiAgICAgIGlzQ2xpZW50UGF5bG9hZDogZmFsc2UsXG4gICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgIG9wdGltaXN0aWNDb25maWc6IG51bGwsXG4gICAgICB1cGRhdGVyOiBudWxsXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICB2YXIgX3RoaXMkY29uZmlnTmFtZTtcblxuICAgIHJldHVybiBcIlJlbGF5TW9kZXJuRW52aXJvbm1lbnQoXCIuY29uY2F0KChfdGhpcyRjb25maWdOYW1lID0gdGhpcy5jb25maWdOYW1lKSAhPT0gbnVsbCAmJiBfdGhpcyRjb25maWdOYW1lICE9PSB2b2lkIDAgPyBfdGhpcyRjb25maWdOYW1lIDogJycsIFwiKVwiKTtcbiAgfTtcblxuICBfcHJvdG8uX2V4ZWN1dGUgPSBmdW5jdGlvbiBfZXhlY3V0ZShfcmVmNCkge1xuICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgdmFyIGNyZWF0ZVNvdXJjZSA9IF9yZWY0LmNyZWF0ZVNvdXJjZSxcbiAgICAgICAgaXNDbGllbnRQYXlsb2FkID0gX3JlZjQuaXNDbGllbnRQYXlsb2FkLFxuICAgICAgICBvcGVyYXRpb24gPSBfcmVmNC5vcGVyYXRpb24sXG4gICAgICAgIG9wdGltaXN0aWNDb25maWcgPSBfcmVmNC5vcHRpbWlzdGljQ29uZmlnLFxuICAgICAgICB1cGRhdGVyID0gX3JlZjQudXBkYXRlcjtcbiAgICByZXR1cm4gUmVsYXlPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgICAgdmFyIGV4ZWN1dG9yID0gT3BlcmF0aW9uRXhlY3V0b3IuZXhlY3V0ZSh7XG4gICAgICAgIGdldERhdGFJRDogX3RoaXM5Ll9nZXREYXRhSUQsXG4gICAgICAgIGlzQ2xpZW50UGF5bG9hZDogaXNDbGllbnRQYXlsb2FkLFxuICAgICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgICAgb3BlcmF0aW9uRXhlY3V0aW9uczogX3RoaXM5Ll9vcGVyYXRpb25FeGVjdXRpb25zLFxuICAgICAgICBvcGVyYXRpb25Mb2FkZXI6IF90aGlzOS5fb3BlcmF0aW9uTG9hZGVyLFxuICAgICAgICBvcGVyYXRpb25UcmFja2VyOiBfdGhpczkuX29wZXJhdGlvblRyYWNrZXIsXG4gICAgICAgIG9wdGltaXN0aWNDb25maWc6IG9wdGltaXN0aWNDb25maWcsXG4gICAgICAgIHB1Ymxpc2hRdWV1ZTogX3RoaXM5Ll9wdWJsaXNoUXVldWUsXG4gICAgICAgIHJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcjogX3RoaXM5Ll9yZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIsXG4gICAgICAgIHJlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyOiBfdGhpczkuX3JlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyLFxuICAgICAgICBzY2hlZHVsZXI6IF90aGlzOS5fc2NoZWR1bGVyLFxuICAgICAgICBzaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50czogX3RoaXM5Ll9zaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50cyxcbiAgICAgICAgc2luazogc2luayxcbiAgICAgICAgLy8gTk9URTogU29tZSBwcm9kdWN0IHRlc3RzIGV4cGVjdCBgTmV0d29yay5leGVjdXRlYCB0byBiZSBjYWxsZWQgb25seVxuICAgICAgICAvLyAgICAgICB3aGVuIHRoZSBPYnNlcnZhYmxlIGlzIGV4ZWN1dGVkLlxuICAgICAgICBzb3VyY2U6IGNyZWF0ZVNvdXJjZSgpLFxuICAgICAgICBzdG9yZTogX3RoaXM5Ll9zdG9yZSxcbiAgICAgICAgdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsOiBfdGhpczkuX3RyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCxcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlclxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZXhlY3V0b3IuY2FuY2VsKCk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBXcmFwcyB0aGUgbmV0d29yayB3aXRoIGxvZ2dpbmcgdG8gZW5zdXJlIHRoYXQgbmV0d29yayByZXF1ZXN0cyBhcmVcbiAgICogYWx3YXlzIGxvZ2dlZC4gUmVseWluZyBvbiBlYWNoIG5ldHdvcmsgY2FsbHNpdGUgdG8gYmUgd3JhcHBlZCBpc1xuICAgKiB1bnRlbmFibGUgYW5kIHdpbGwgZXZlbnR1YWxseSBsZWFkIHRvIGhvbGVzIGluIHRoZSBsb2dnaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fX3dyYXBOZXR3b3JrV2l0aExvZ09ic2VydmVyID0gZnVuY3Rpb24gX193cmFwTmV0d29ya1dpdGhMb2dPYnNlcnZlcihuZXR3b3JrKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB7XG4gICAgICBleGVjdXRlOiBmdW5jdGlvbiBleGVjdXRlKHBhcmFtcywgdmFyaWFibGVzLCBjYWNoZUNvbmZpZywgdXBsb2FkYWJsZXMpIHtcbiAgICAgICAgdmFyIHRyYW5zYWN0aW9uSUQgPSBnZW5lcmF0ZUlEKCk7XG4gICAgICAgIHZhciBsb2cgPSB0aGF0Ll9fbG9nO1xuICAgICAgICB2YXIgbG9nT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgbG9nKHtcbiAgICAgICAgICAgICAgbmFtZTogJ25ldHdvcmsuc3RhcnQnLFxuICAgICAgICAgICAgICB0cmFuc2FjdGlvbklEOiB0cmFuc2FjdGlvbklELFxuICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgICAgICAgIGNhY2hlQ29uZmlnOiBjYWNoZUNvbmZpZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBsb2coe1xuICAgICAgICAgICAgICBuYW1lOiAnbmV0d29yay5uZXh0JyxcbiAgICAgICAgICAgICAgdHJhbnNhY3Rpb25JRDogdHJhbnNhY3Rpb25JRCxcbiAgICAgICAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZyh7XG4gICAgICAgICAgICAgIG5hbWU6ICduZXR3b3JrLmVycm9yJyxcbiAgICAgICAgICAgICAgdHJhbnNhY3Rpb25JRDogdHJhbnNhY3Rpb25JRCxcbiAgICAgICAgICAgICAgZXJyb3I6IF9lcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgICBsb2coe1xuICAgICAgICAgICAgICBuYW1lOiAnbmV0d29yay5jb21wbGV0ZScsXG4gICAgICAgICAgICAgIHRyYW5zYWN0aW9uSUQ6IHRyYW5zYWN0aW9uSURcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgbG9nKHtcbiAgICAgICAgICAgICAgbmFtZTogJ25ldHdvcmsudW5zdWJzY3JpYmUnLFxuICAgICAgICAgICAgICB0cmFuc2FjdGlvbklEOiB0cmFuc2FjdGlvbklEXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGxvZ1JlcXVlc3RJbmZvID0gZnVuY3Rpb24gbG9nUmVxdWVzdEluZm8oaW5mbykge1xuICAgICAgICAgIGxvZyh7XG4gICAgICAgICAgICBuYW1lOiAnbmV0d29yay5pbmZvJyxcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uSUQ6IHRyYW5zYWN0aW9uSUQsXG4gICAgICAgICAgICBpbmZvOiBpbmZvXG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5ldHdvcmsuZXhlY3V0ZShwYXJhbXMsIHZhcmlhYmxlcywgY2FjaGVDb25maWcsIHVwbG9hZGFibGVzLCBsb2dSZXF1ZXN0SW5mbylbXCJkb1wiXShsb2dPYnNlcnZlcik7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4gUmVsYXlNb2Rlcm5FbnZpcm9ubWVudDtcbn0oKTsgLy8gQWRkIGEgc2lnaWwgZm9yIGRldGVjdGlvbiBieSBgaXNSZWxheU1vZGVybkVudmlyb25tZW50KClgIHRvIGF2b2lkIGFcbi8vIHJlYWxtLXNwZWNpZmljIGluc3RhbmNlb2YgY2hlY2ssIGFuZCB0byBhaWQgaW4gbW9kdWxlIHRyZWUtc2hha2luZyB0b1xuLy8gYXZvaWQgcmVxdWlyaW5nIGFsbCBvZiBSZWxheVJ1bnRpbWUganVzdCB0byBkZXRlY3QgaXRzIGVudmlyb25tZW50LlxuXG5cblJlbGF5TW9kZXJuRW52aXJvbm1lbnQucHJvdG90eXBlWydAQFJlbGF5TW9kZXJuRW52aXJvbm1lbnQnXSA9IHRydWU7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5TW9kZXJuRW52aXJvbm1lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgUmVsYXlGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuLi91dGlsL1JlbGF5RmVhdHVyZUZsYWdzJyk7XG5cbnZhciBhcmVFcXVhbCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9hcmVFcXVhbFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgaXNTY2FsYXJBbmRFcXVhbCA9IHJlcXVpcmUoJy4uL3V0aWwvaXNTY2FsYXJBbmRFcXVhbCcpO1xuXG52YXIgcmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzID0gcmVxdWlyZSgnLi4vdXRpbC9yZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHMnKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vcXVlcnkvZmV0Y2hRdWVyeUludGVybmFsJyksXG4gICAgZ2V0UHJvbWlzZUZvckFjdGl2ZVJlcXVlc3QgPSBfcmVxdWlyZS5nZXRQcm9taXNlRm9yQWN0aXZlUmVxdWVzdDtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vUmVsYXlNb2Rlcm5PcGVyYXRpb25EZXNjcmlwdG9yJyksXG4gICAgY3JlYXRlUmVxdWVzdERlc2NyaXB0b3IgPSBfcmVxdWlyZTIuY3JlYXRlUmVxdWVzdERlc2NyaXB0b3I7XG5cbnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKCcuL1JlbGF5TW9kZXJuU2VsZWN0b3InKSxcbiAgICBhcmVFcXVhbFNlbGVjdG9ycyA9IF9yZXF1aXJlMy5hcmVFcXVhbFNlbGVjdG9ycyxcbiAgICBjcmVhdGVSZWFkZXJTZWxlY3RvciA9IF9yZXF1aXJlMy5jcmVhdGVSZWFkZXJTZWxlY3RvcixcbiAgICBnZXRTZWxlY3RvcnNGcm9tT2JqZWN0ID0gX3JlcXVpcmUzLmdldFNlbGVjdG9yc0Zyb21PYmplY3Q7XG5cbi8qKlxuICogQSB1dGlsaXR5IGZvciByZXNvbHZpbmcgYW5kIHN1YnNjcmliaW5nIHRvIHRoZSByZXN1bHRzIG9mIGEgZnJhZ21lbnQgc3BlY1xuICogKGtleSAtPiBmcmFnbWVudCBtYXBwaW5nKSBnaXZlbiBzb21lIFwicHJvcHNcIiB0aGF0IGRldGVybWluZSB0aGUgcm9vdCBJRFxuICogYW5kIHZhcmlhYmxlcyB0byB1c2Ugd2hlbiByZWFkaW5nIGVhY2ggZnJhZ21lbnQuIFdoZW4gcHJvcHMgYXJlIGNoYW5nZWQgdmlhXG4gKiBgc2V0UHJvcHMoKWAsIHRoZSByZXNvbHZlciB3aWxsIHVwZGF0ZSBpdHMgcmVzdWx0cyBhbmQgc3Vic2NyaXB0aW9uc1xuICogYWNjb3JkaW5nbHkuIEludGVybmFsbHksIHRoZSByZXNvbHZlcjpcbiAqIC0gQ29udmVydHMgdGhlIGZyYWdtZW50IG1hcCAmIHByb3BzIG1hcCBpbnRvIGEgbWFwIG9mIGBTZWxlY3RvcmBzLlxuICogLSBSZW1vdmVzIGFueSByZXNvbHZlcnMgZm9yIGFueSBwcm9wcyB0aGF0IGJlY2FtZSBudWxsLlxuICogLSBDcmVhdGVzIHJlc29sdmVycyBmb3IgYW55IHByb3BzIHRoYXQgYmVjYW1lIG5vbi1udWxsLlxuICogLSBVcGRhdGVzIHJlc29sdmVycyB3aXRoIHRoZSBsYXRlc3QgcHJvcHMuXG4gKlxuICogVGhpcyB1dGlsaXR5IGlzIGltcGxlbWVudGVkIGFzIGFuIGltcGVyYXRpdmUsIHN0YXRlZnVsIEFQSSBmb3IgcGVyZm9ybWFuY2VcbiAqIHJlYXNvbnM6IHJldXNpbmcgcHJldmlvdXMgcmVzb2x2ZXJzLCBjYWxsYmFjayBmdW5jdGlvbnMsIGFuZCBzdWJzY3JpcHRpb25zXG4gKiBhbGwgaGVscHMgdG8gcmVkdWNlIG9iamVjdCBhbGxvY2F0aW9uIGFuZCB0aGVyZWJ5IGRlY3JlYXNlIEdDIHRpbWUuXG4gKlxuICogVGhlIGByZXNvbHZlKClgIGZ1bmN0aW9uIGlzIGFsc28gbGF6eSBhbmQgbWVtb2l6ZWQ6IGNoYW5nZXMgaW4gdGhlIHN0b3JlIG1hcmtcbiAqIHRoZSByZXNvbHZlciBhcyBzdGFsZSBhbmQgbm90aWZ5IHRoZSBjYWxsZXIsIGFuZCB0aGUgYWN0dWFsIHJlc3VsdHMgYXJlXG4gKiByZWNvbXB1dGVkIHRoZSBmaXJzdCB0aW1lIGByZXNvbHZlKClgIGlzIGNhbGxlZC5cbiAqL1xudmFyIFJlbGF5TW9kZXJuRnJhZ21lbnRTcGVjUmVzb2x2ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWxheU1vZGVybkZyYWdtZW50U3BlY1Jlc29sdmVyKGNvbnRleHQsIGZyYWdtZW50cywgcHJvcHMsIGNhbGxiYWNrLCByb290SXNRdWVyeVJlbmRlcmVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkodGhpcywgXCJfb25DaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuX3N0YWxlID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBfdGhpcy5fY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgX3RoaXMuX2NhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9kYXRhID0ge307XG4gICAgdGhpcy5fZnJhZ21lbnRzID0gZnJhZ21lbnRzO1xuICAgIHRoaXMuX3Byb3BzID0ge307XG4gICAgdGhpcy5fcmVzb2x2ZXJzID0ge307XG4gICAgdGhpcy5fc3RhbGUgPSBmYWxzZTtcbiAgICB0aGlzLl9yb290SXNRdWVyeVJlbmRlcmVyID0gcm9vdElzUXVlcnlSZW5kZXJlcjtcbiAgICB0aGlzLnNldFByb3BzKHByb3BzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZWxheU1vZGVybkZyYWdtZW50U3BlY1Jlc29sdmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgZm9yICh2YXIgX2tleSBpbiB0aGlzLl9yZXNvbHZlcnMpIHtcbiAgICAgIGlmICh0aGlzLl9yZXNvbHZlcnMuaGFzT3duUHJvcGVydHkoX2tleSkpIHtcbiAgICAgICAgZGlzcG9zZUNhbGxiYWNrKHRoaXMuX3Jlc29sdmVyc1tfa2V5XSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSgpIHtcbiAgICBpZiAodGhpcy5fc3RhbGUpIHtcbiAgICAgIC8vIEF2b2lkIG1hcHBpbmcgdGhlIG9iamVjdCBtdWx0aXBsZSB0aW1lcywgd2hpY2ggY291bGQgb2NjdXIgaWYgZGF0YSBmb3JcbiAgICAgIC8vIG11bHRpcGxlIGtleXMgY2hhbmdlcyBpbiB0aGUgc2FtZSBldmVudCBsb29wLlxuICAgICAgdmFyIHByZXZEYXRhID0gdGhpcy5fZGF0YTtcbiAgICAgIHZhciBuZXh0RGF0YTtcblxuICAgICAgZm9yICh2YXIgX2tleTIgaW4gdGhpcy5fcmVzb2x2ZXJzKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZXNvbHZlcnMuaGFzT3duUHJvcGVydHkoX2tleTIpKSB7XG4gICAgICAgICAgdmFyIHJlc29sdmVyID0gdGhpcy5fcmVzb2x2ZXJzW19rZXkyXTtcbiAgICAgICAgICB2YXIgcHJldkl0ZW0gPSBwcmV2RGF0YVtfa2V5Ml07XG5cbiAgICAgICAgICBpZiAocmVzb2x2ZXIpIHtcbiAgICAgICAgICAgIHZhciBuZXh0SXRlbSA9IHJlc29sdmVyLnJlc29sdmUoKTtcblxuICAgICAgICAgICAgaWYgKG5leHREYXRhIHx8IG5leHRJdGVtICE9PSBwcmV2SXRlbSkge1xuICAgICAgICAgICAgICBuZXh0RGF0YSA9IG5leHREYXRhIHx8ICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCBwcmV2RGF0YSk7XG4gICAgICAgICAgICAgIG5leHREYXRhW19rZXkyXSA9IG5leHRJdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcHJvcCA9IHRoaXMuX3Byb3BzW19rZXkyXTtcblxuICAgICAgICAgICAgdmFyIF9uZXh0SXRlbSA9IHByb3AgIT09IHVuZGVmaW5lZCA/IHByb3AgOiBudWxsO1xuXG4gICAgICAgICAgICBpZiAobmV4dERhdGEgfHwgIWlzU2NhbGFyQW5kRXF1YWwoX25leHRJdGVtLCBwcmV2SXRlbSkpIHtcbiAgICAgICAgICAgICAgbmV4dERhdGEgPSBuZXh0RGF0YSB8fCAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgcHJldkRhdGEpO1xuICAgICAgICAgICAgICBuZXh0RGF0YVtfa2V5Ml0gPSBfbmV4dEl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2RhdGEgPSBuZXh0RGF0YSB8fCBwcmV2RGF0YTtcbiAgICAgIHRoaXMuX3N0YWxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gIH07XG5cbiAgX3Byb3RvLnNldENhbGxiYWNrID0gZnVuY3Rpb24gc2V0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICB9O1xuXG4gIF9wcm90by5zZXRQcm9wcyA9IGZ1bmN0aW9uIHNldFByb3BzKHByb3BzKSB7XG4gICAgdmFyIG93bmVkU2VsZWN0b3JzID0gZ2V0U2VsZWN0b3JzRnJvbU9iamVjdCh0aGlzLl9mcmFnbWVudHMsIHByb3BzKTtcbiAgICB0aGlzLl9wcm9wcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2tleTMgaW4gb3duZWRTZWxlY3RvcnMpIHtcbiAgICAgIGlmIChvd25lZFNlbGVjdG9ycy5oYXNPd25Qcm9wZXJ0eShfa2V5MykpIHtcbiAgICAgICAgdmFyIG93bmVkU2VsZWN0b3IgPSBvd25lZFNlbGVjdG9yc1tfa2V5M107XG4gICAgICAgIHZhciByZXNvbHZlciA9IHRoaXMuX3Jlc29sdmVyc1tfa2V5M107XG5cbiAgICAgICAgaWYgKG93bmVkU2VsZWN0b3IgPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChyZXNvbHZlciAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXNvbHZlci5kaXNwb3NlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVzb2x2ZXIgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKG93bmVkU2VsZWN0b3Iua2luZCA9PT0gJ1BsdXJhbFJlYWRlclNlbGVjdG9yJykge1xuICAgICAgICAgIGlmIChyZXNvbHZlciA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXNvbHZlciA9IG5ldyBTZWxlY3Rvckxpc3RSZXNvbHZlcih0aGlzLl9jb250ZXh0LmVudmlyb25tZW50LCB0aGlzLl9yb290SXNRdWVyeVJlbmRlcmVyLCBvd25lZFNlbGVjdG9yLCB0aGlzLl9vbkNoYW5nZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICEocmVzb2x2ZXIgaW5zdGFuY2VvZiBTZWxlY3Rvckxpc3RSZXNvbHZlcikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkZyYWdtZW50U3BlY1Jlc29sdmVyOiBFeHBlY3RlZCBwcm9wIGAlc2AgdG8gYWx3YXlzIGJlIGFuIGFycmF5LicsIF9rZXkzKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICByZXNvbHZlci5zZXRTZWxlY3Rvcihvd25lZFNlbGVjdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHJlc29sdmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJlc29sdmVyID0gbmV3IFNlbGVjdG9yUmVzb2x2ZXIodGhpcy5fY29udGV4dC5lbnZpcm9ubWVudCwgdGhpcy5fcm9vdElzUXVlcnlSZW5kZXJlciwgb3duZWRTZWxlY3RvciwgdGhpcy5fb25DaGFuZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAhKHJlc29sdmVyIGluc3RhbmNlb2YgU2VsZWN0b3JSZXNvbHZlcikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkZyYWdtZW50U3BlY1Jlc29sdmVyOiBFeHBlY3RlZCBwcm9wIGAlc2AgdG8gYWx3YXlzIGJlIGFuIG9iamVjdC4nLCBfa2V5MykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgICAgcmVzb2x2ZXIuc2V0U2VsZWN0b3Iob3duZWRTZWxlY3Rvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcHJvcHNbX2tleTNdID0gcHJvcHNbX2tleTNdO1xuICAgICAgICB0aGlzLl9yZXNvbHZlcnNbX2tleTNdID0gcmVzb2x2ZXI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fc3RhbGUgPSB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5zZXRWYXJpYWJsZXMgPSBmdW5jdGlvbiBzZXRWYXJpYWJsZXModmFyaWFibGVzLCByZXF1ZXN0KSB7XG4gICAgZm9yICh2YXIgX2tleTQgaW4gdGhpcy5fcmVzb2x2ZXJzKSB7XG4gICAgICBpZiAodGhpcy5fcmVzb2x2ZXJzLmhhc093blByb3BlcnR5KF9rZXk0KSkge1xuICAgICAgICB2YXIgcmVzb2x2ZXIgPSB0aGlzLl9yZXNvbHZlcnNbX2tleTRdO1xuXG4gICAgICAgIGlmIChyZXNvbHZlcikge1xuICAgICAgICAgIHJlc29sdmVyLnNldFZhcmlhYmxlcyh2YXJpYWJsZXMsIHJlcXVlc3QpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fc3RhbGUgPSB0cnVlO1xuICB9O1xuXG4gIHJldHVybiBSZWxheU1vZGVybkZyYWdtZW50U3BlY1Jlc29sdmVyO1xufSgpO1xuLyoqXG4gKiBBIHJlc29sdmVyIGZvciBhIHNpbmdsZSBTZWxlY3Rvci5cbiAqL1xuXG5cbnZhciBTZWxlY3RvclJlc29sdmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2VsZWN0b3JSZXNvbHZlcihlbnZpcm9ubWVudCwgcm9vdElzUXVlcnlSZW5kZXJlciwgc2VsZWN0b3IsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRoaXMsIFwiX29uQ2hhbmdlXCIsIGZ1bmN0aW9uIChzbmFwc2hvdCkge1xuICAgICAgX3RoaXMyLl9kYXRhID0gc25hcHNob3QuZGF0YTtcbiAgICAgIF90aGlzMi5faXNNaXNzaW5nRGF0YSA9IHNuYXBzaG90LmlzTWlzc2luZ0RhdGE7XG4gICAgICBfdGhpczIuX21pc3NpbmdSZXF1aXJlZEZpZWxkcyA9IHNuYXBzaG90Lm1pc3NpbmdSZXF1aXJlZEZpZWxkcztcblxuICAgICAgX3RoaXMyLl9jYWxsYmFjaygpO1xuICAgIH0pO1xuXG4gICAgdmFyIF9zbmFwc2hvdCA9IGVudmlyb25tZW50Lmxvb2t1cChzZWxlY3Rvcik7XG5cbiAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX2RhdGEgPSBfc25hcHNob3QuZGF0YTtcbiAgICB0aGlzLl9pc01pc3NpbmdEYXRhID0gX3NuYXBzaG90LmlzTWlzc2luZ0RhdGE7XG4gICAgdGhpcy5fbWlzc2luZ1JlcXVpcmVkRmllbGRzID0gX3NuYXBzaG90Lm1pc3NpbmdSZXF1aXJlZEZpZWxkcztcbiAgICB0aGlzLl9lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuICAgIHRoaXMuX3Jvb3RJc1F1ZXJ5UmVuZGVyZXIgPSByb290SXNRdWVyeVJlbmRlcmVyO1xuICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gZW52aXJvbm1lbnQuc3Vic2NyaWJlKF9zbmFwc2hvdCwgdGhpcy5fb25DaGFuZ2UpO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBTZWxlY3RvclJlc29sdmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbi5kaXNwb3NlKCk7XG5cbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgaWYgKFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9SRUxBWV9DT05UQUlORVJTX1NVU1BFTlNFID09PSB0cnVlICYmIHRoaXMuX2lzTWlzc2luZ0RhdGEgPT09IHRydWUpIHtcbiAgICAgIHZhciBfZ2V0UHJvbWlzZUZvckFjdGl2ZVI7XG5cbiAgICAgIC8vIE5PVEU6IFRoaXMgYnJhbmNoIGV4aXN0cyB0byBoYW5kbGUgdGhlIGNhc2UgaW4gd2hpY2g6XG4gICAgICAvLyAtIEEgUmVsYXlNb2Rlcm4gY29udGFpbmVyIGlzIHJlbmRlcmVkIGFzIGEgZGVzY2VuZGFudCBvZiBhIFJlbGF5IEhvb2tcbiAgICAgIC8vICAgcm9vdCB1c2luZyBhIFwicGFydGlhbFwiIHJlbmRlclBvbGljeSAodGhpcyBtZWFucyB0aGF0IGVhcmdlcmx5XG4gICAgICAvLyAgIHJlYWRpbmcgYW55IGNhY2hlZCBkYXRhIHRoYXQgaXMgYXZhaWxhYmxlIGluc3RlYWQgb2YgYmxvY2tpbmdcbiAgICAgIC8vICAgYXQgdGhlIHJvb3QgdW50aWwgdGhlIHdob2xlIHF1ZXJ5IGlzIGZldGNoZWQpLlxuICAgICAgLy8gLSBBIHBhcmVudCBSZWxheSBIb29rIGRpZG50JyBzdXNwZW5kIGVhcmxpZXIgb24gZGF0YSBiZWluZyBmZXRjaGVkLFxuICAgICAgLy8gICBlaXRoZXIgYmVjYXVzZSB0aGUgZnJhZ21lbnQgZGF0YSBmb3IgdGhlIHBhcmVudCB3YXMgYXZhaWxhYmxlLCBvclxuICAgICAgLy8gICB0aGUgcGFyZW50IGZyYWdtZW50IGRpZG4ndCBoYXZlIGFueSBkYXRhIGRlcGVuZGVuY2llcy5cbiAgICAgIC8vIEV2ZW4gdGhvdWdoIG91ciBGbG93IHR5cGVzIHJlZmxlY3QgdGhlIHBvc3NpYmxpdHkgb2YgbnVsbCBkYXRhLCB0aGVyZVxuICAgICAgLy8gbWlnaHQgc3RpbGwgYmUgY2FzZXMgd2hlcmUgaXQncyBub3QgaGFuZGxlZCBhdCBydW50aW1lIGJlY3Vhc2UgdGhlXG4gICAgICAvLyBGbG93IHR5cGVzIGFyZSBiZWluZyBpZ25vcmVkLCBvciBzaW1wbHkgbm90IGJlaW5nIHVzZWQgKGZvciBleGFtcGxlLFxuICAgICAgLy8gdGhlIGNhc2UgcmVwb3J0ZWQgaGVyZTogaHR0cHM6Ly9mYnVybC5jb20vc3JuYnVjZjgsIHdhcyBkdWUgdG9cbiAgICAgIC8vIG1pc3VzZSBvZiBGbG93IHR5cGVzIGhlcmU6IGh0dHBzOi8vZmJ1cmwuY29tL2czbTBtcXFoKS5cbiAgICAgIC8vIEFkZGl0aW9uYWxseSwgZXZlbiB0aG91Z2ggdGhlIG51bGwgZGF0YSBtaWdodCBiZSBoYW5kbGVkIHdpdGhvdXQgYVxuICAgICAgLy8gcnVudGltZSBlcnJvciwgd2UgbWlnaHQgbm90IHN1c3BlbmQgd2hlbiB3ZSBpbnRlbmRlZCB0byBpZiBhIHBhcmVudFxuICAgICAgLy8gUmVsYXkgSG9vayAoZS5nLiB0aGF0IGlzIHVzaW5nIEBkZWZlcikgZGVjaWRlZCBub3QgdG8gc3VzcGVuZCBiZWN1YXNlXG4gICAgICAvLyBpdCdzIGltbWVkaWF0ZSBkYXRhIHdhcyBhbHJlYWR5IGF2YWlsYWJsZSAoZXZlbiBpZiBpdCB3YXMgZGVmZXJyZWQpLFxuICAgICAgLy8gb3IgaXQgZGlkbid0IGFjdHVhbGx5IG5lZWQgYW55IGRhdGEgKHdhcyBqdXN0IHNwcmVhZGluZyBvdGhlciBmcmFnbWVudHMpLlxuICAgICAgLy8gVGhpcyBzaG91bGQgZXZlbnR1YWxseSBnbyBhd2F5IHdpdGggc29tZXRoaW5nIGxpa2UgQG9wdGlvbmFsLCB3aGVyZSB3ZSBvbmx5XG4gICAgICAvLyBzdXNwZW5kIGF0IHNwZWNpZmljIGJvdW5kYXJpZXMgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGJvdW5kYXJ5XG4gICAgICAvLyBjYW4gYmUgZnVsZmlsbGVkIG9yIG5vdC5cbiAgICAgIHZhciBwcm9taXNlID0gKF9nZXRQcm9taXNlRm9yQWN0aXZlUiA9IGdldFByb21pc2VGb3JBY3RpdmVSZXF1ZXN0KHRoaXMuX2Vudmlyb25tZW50LCB0aGlzLl9zZWxlY3Rvci5vd25lcikpICE9PSBudWxsICYmIF9nZXRQcm9taXNlRm9yQWN0aXZlUiAhPT0gdm9pZCAwID8gX2dldFByb21pc2VGb3JBY3RpdmVSIDogdGhpcy5fZW52aXJvbm1lbnQuZ2V0T3BlcmF0aW9uVHJhY2tlcigpLmdldFByb21pc2VGb3JQZW5kaW5nT3BlcmF0aW9uc0FmZmVjdGluZ093bmVyKHRoaXMuX3NlbGVjdG9yLm93bmVyKTtcblxuICAgICAgaWYgKHByb21pc2UgIT0gbnVsbCkge1xuICAgICAgICBpZiAodGhpcy5fcm9vdElzUXVlcnlSZW5kZXJlcikge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdSZWxheTogUmVsYXkgQ29udGFpbmVyIGZvciBmcmFnbWVudCBgJXNgIGhhcyBtaXNzaW5nIGRhdGEgYW5kICcgKyAnd291bGQgc3VzcGVuZC4gV2hlbiB1c2luZyBmZWF0dXJlcyBzdWNoIGFzIEBkZWZlciBvciBAbW9kdWxlLCAnICsgJ3VzZSBgdXNlRnJhZ21lbnRgIGluc3RlYWQgb2YgYSBSZWxheSBDb250YWluZXIuJywgdGhpcy5fc2VsZWN0b3Iubm9kZS5uYW1lKSA6IHZvaWQgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXk6IFJlbGF5IENvbnRhaW5lciBmb3IgZnJhZ21lbnQgYCVzYCBzdXNwZW5kZWQuIFdoZW4gdXNpbmcgJyArICdmZWF0dXJlcyBzdWNoIGFzIEBkZWZlciBvciBAbW9kdWxlLCB1c2UgYHVzZUZyYWdtZW50YCBpbnN0ZWFkICcgKyAnb2YgYSBSZWxheSBDb250YWluZXIuJywgdGhpcy5fc2VsZWN0b3Iubm9kZS5uYW1lKSA6IHZvaWQgMDtcbiAgICAgICAgICB0aHJvdyBwcm9taXNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX21pc3NpbmdSZXF1aXJlZEZpZWxkcyAhPSBudWxsKSB7XG4gICAgICByZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHModGhpcy5fZW52aXJvbm1lbnQsIHRoaXMuX21pc3NpbmdSZXF1aXJlZEZpZWxkcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gIH07XG5cbiAgX3Byb3RvMi5zZXRTZWxlY3RvciA9IGZ1bmN0aW9uIHNldFNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgaWYgKHRoaXMuX3N1YnNjcmlwdGlvbiAhPSBudWxsICYmIGFyZUVxdWFsU2VsZWN0b3JzKHNlbGVjdG9yLCB0aGlzLl9zZWxlY3RvcikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmRpc3Bvc2UoKTtcblxuICAgIHZhciBzbmFwc2hvdCA9IHRoaXMuX2Vudmlyb25tZW50Lmxvb2t1cChzZWxlY3Rvcik7XG5cbiAgICB0aGlzLl9kYXRhID0gc25hcHNob3QuZGF0YTtcbiAgICB0aGlzLl9pc01pc3NpbmdEYXRhID0gc25hcHNob3QuaXNNaXNzaW5nRGF0YTtcbiAgICB0aGlzLl9taXNzaW5nUmVxdWlyZWRGaWVsZHMgPSBzbmFwc2hvdC5taXNzaW5nUmVxdWlyZWRGaWVsZHM7XG4gICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSB0aGlzLl9lbnZpcm9ubWVudC5zdWJzY3JpYmUoc25hcHNob3QsIHRoaXMuX29uQ2hhbmdlKTtcbiAgfTtcblxuICBfcHJvdG8yLnNldFZhcmlhYmxlcyA9IGZ1bmN0aW9uIHNldFZhcmlhYmxlcyh2YXJpYWJsZXMsIHJlcXVlc3QpIHtcbiAgICBpZiAoYXJlRXF1YWwodmFyaWFibGVzLCB0aGlzLl9zZWxlY3Rvci52YXJpYWJsZXMpKSB7XG4gICAgICAvLyBJZiB3ZSdyZSBub3QgYWN0dWFsbHkgc2V0dGluZyBuZXcgdmFyaWFibGVzLCB3ZSBkb24ndCBhY3R1YWxseSB3YW50XG4gICAgICAvLyB0byBjcmVhdGUgYSBuZXcgZnJhZ21lbnQgb3duZXIsIHNpbmNlIGFyZUVxdWFsU2VsZWN0b3JzIHJlbGllcyBvblxuICAgICAgLy8gb3duZXIgaWRlbnRpdHkuXG4gICAgICAvLyBJbiBmYWN0LCB3ZSBkb24ndCBldmVuIG5lZWQgdG8gdHJ5IHRvIGF0dGVtcHQgdG8gc2V0IGEgbmV3IHNlbGVjdG9yLlxuICAgICAgLy8gV2hlbiBmcmFnbWVudCBvd25lcnNoaXAgaXMgbm90IGVuYWJsZWQsIHNldFNlbGVjdG9yIHdpbGwgYWxzbyBiYWlsXG4gICAgICAvLyBvdXQgc2luY2UgdGhlIHNlbGVjdG9yIGRvZXNuJ3QgcmVhbGx5IGNoYW5nZSwgc28gd2UncmUgZG9pbmcgaXQgaGVyZVxuICAgICAgLy8gZWFybGllci5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIE5PVEU6IFdlIG1hbnVhbGx5IGNyZWF0ZSB0aGUgcmVxdWVzdCBkZXNjcmlwdG9yIGhlcmUgaW5zdGVhZCBvZlxuICAgIC8vIGNhbGxpbmcgY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcigpIGJlY2F1c2Ugd2Ugd2FudCB0byBzZXQgYVxuICAgIC8vIGRlc2NyaXB0b3Igd2l0aCAqdW5hbHRlcmVkKiB2YXJpYWJsZXMgYXMgdGhlIGZyYWdtZW50IG93bmVyLlxuICAgIC8vIFRoaXMgaXMgYSBoYWNrIHRoYXQgYWxsb3dzIHVzIHRvIHByZXNlcnZlIGV4aXN0aW5nIChicm9rZW4pXG4gICAgLy8gYmVoYXZpb3Igb2YgUmVsYXlNb2Rlcm4gY29udGFpbmVycyB3aGlsZSB1c2luZyBmcmFnbWVudCBvd25lcnNoaXBcbiAgICAvLyB0byBwcm9wYWdhdGUgdmFyaWFibGVzIGluc3RlYWQgb2YgQ29udGV4dC5cbiAgICAvLyBGb3IgbW9yZSBkZXRhaWxzLCBzZWUgdGhlIHN1bW1hcnkgb2YgRDEzOTk5MzA4XG5cblxuICAgIHZhciByZXF1ZXN0RGVzY3JpcHRvciA9IGNyZWF0ZVJlcXVlc3REZXNjcmlwdG9yKHJlcXVlc3QsIHZhcmlhYmxlcyk7XG4gICAgdmFyIHNlbGVjdG9yID0gY3JlYXRlUmVhZGVyU2VsZWN0b3IodGhpcy5fc2VsZWN0b3Iubm9kZSwgdGhpcy5fc2VsZWN0b3IuZGF0YUlELCB2YXJpYWJsZXMsIHJlcXVlc3REZXNjcmlwdG9yKTtcbiAgICB0aGlzLnNldFNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcblxuICByZXR1cm4gU2VsZWN0b3JSZXNvbHZlcjtcbn0oKTtcbi8qKlxuICogQSByZXNvbHZlciBmb3IgYW4gYXJyYXkgb2YgU2VsZWN0b3JzLlxuICovXG5cblxudmFyIFNlbGVjdG9yTGlzdFJlc29sdmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2VsZWN0b3JMaXN0UmVzb2x2ZXIoZW52aXJvbm1lbnQsIHJvb3RJc1F1ZXJ5UmVuZGVyZXIsIHNlbGVjdG9yLCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh0aGlzLCBcIl9vbkNoYW5nZVwiLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgX3RoaXMzLl9zdGFsZSA9IHRydWU7XG5cbiAgICAgIF90aGlzMy5fY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX2RhdGEgPSBbXTtcbiAgICB0aGlzLl9lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuICAgIHRoaXMuX3Jlc29sdmVycyA9IFtdO1xuICAgIHRoaXMuX3N0YWxlID0gdHJ1ZTtcbiAgICB0aGlzLl9yb290SXNRdWVyeVJlbmRlcmVyID0gcm9vdElzUXVlcnlSZW5kZXJlcjtcbiAgICB0aGlzLnNldFNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8zID0gU2VsZWN0b3JMaXN0UmVzb2x2ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90bzMuZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5fcmVzb2x2ZXJzLmZvckVhY2goZGlzcG9zZUNhbGxiYWNrKTtcbiAgfTtcblxuICBfcHJvdG8zLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKCkge1xuICAgIGlmICh0aGlzLl9zdGFsZSkge1xuICAgICAgLy8gQXZvaWQgbWFwcGluZyB0aGUgYXJyYXkgbXVsdGlwbGUgdGltZXMsIHdoaWNoIGNvdWxkIG9jY3VyIGlmIGRhdGEgZm9yXG4gICAgICAvLyBtdWx0aXBsZSBpbmRpY2VzIGNoYW5nZXMgaW4gdGhlIHNhbWUgZXZlbnQgbG9vcC5cbiAgICAgIHZhciBwcmV2RGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICB2YXIgbmV4dERhdGE7XG5cbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB0aGlzLl9yZXNvbHZlcnMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgIHZhciBwcmV2SXRlbSA9IHByZXZEYXRhW2lpXTtcblxuICAgICAgICB2YXIgbmV4dEl0ZW0gPSB0aGlzLl9yZXNvbHZlcnNbaWldLnJlc29sdmUoKTtcblxuICAgICAgICBpZiAobmV4dERhdGEgfHwgbmV4dEl0ZW0gIT09IHByZXZJdGVtKSB7XG4gICAgICAgICAgbmV4dERhdGEgPSBuZXh0RGF0YSB8fCBwcmV2RGF0YS5zbGljZSgwLCBpaSk7XG4gICAgICAgICAgbmV4dERhdGEucHVzaChuZXh0SXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFuZXh0RGF0YSAmJiB0aGlzLl9yZXNvbHZlcnMubGVuZ3RoICE9PSBwcmV2RGF0YS5sZW5ndGgpIHtcbiAgICAgICAgbmV4dERhdGEgPSBwcmV2RGF0YS5zbGljZSgwLCB0aGlzLl9yZXNvbHZlcnMubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZGF0YSA9IG5leHREYXRhIHx8IHByZXZEYXRhO1xuICAgICAgdGhpcy5fc3RhbGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgfTtcblxuICBfcHJvdG8zLnNldFNlbGVjdG9yID0gZnVuY3Rpb24gc2V0U2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICB2YXIgc2VsZWN0b3JzID0gc2VsZWN0b3Iuc2VsZWN0b3JzO1xuXG4gICAgd2hpbGUgKHRoaXMuX3Jlc29sdmVycy5sZW5ndGggPiBzZWxlY3RvcnMubGVuZ3RoKSB7XG4gICAgICB2YXIgcmVzb2x2ZXIgPSB0aGlzLl9yZXNvbHZlcnMucG9wKCk7XG5cbiAgICAgIHJlc29sdmVyLmRpc3Bvc2UoKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgc2VsZWN0b3JzLmxlbmd0aDsgaWkrKykge1xuICAgICAgaWYgKGlpIDwgdGhpcy5fcmVzb2x2ZXJzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9yZXNvbHZlcnNbaWldLnNldFNlbGVjdG9yKHNlbGVjdG9yc1tpaV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZXJzW2lpXSA9IG5ldyBTZWxlY3RvclJlc29sdmVyKHRoaXMuX2Vudmlyb25tZW50LCB0aGlzLl9yb290SXNRdWVyeVJlbmRlcmVyLCBzZWxlY3RvcnNbaWldLCB0aGlzLl9vbkNoYW5nZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fc3RhbGUgPSB0cnVlO1xuICB9O1xuXG4gIF9wcm90bzMuc2V0VmFyaWFibGVzID0gZnVuY3Rpb24gc2V0VmFyaWFibGVzKHZhcmlhYmxlcywgcmVxdWVzdCkge1xuICAgIHRoaXMuX3Jlc29sdmVycy5mb3JFYWNoKGZ1bmN0aW9uIChyZXNvbHZlcikge1xuICAgICAgcmV0dXJuIHJlc29sdmVyLnNldFZhcmlhYmxlcyh2YXJpYWJsZXMsIHJlcXVlc3QpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fc3RhbGUgPSB0cnVlO1xuICB9O1xuXG4gIHJldHVybiBTZWxlY3Rvckxpc3RSZXNvbHZlcjtcbn0oKTtcblxuZnVuY3Rpb24gZGlzcG9zZUNhbGxiYWNrKGRpc3Bvc2FibGUpIHtcbiAgZGlzcG9zYWJsZSAmJiBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheU1vZGVybkZyYWdtZW50U3BlY1Jlc29sdmVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVlcEZyZWV6ZSA9IHJlcXVpcmUoJy4uL3V0aWwvZGVlcEZyZWV6ZScpO1xuXG52YXIgZ2V0UmVxdWVzdElkZW50aWZpZXIgPSByZXF1aXJlKCcuLi91dGlsL2dldFJlcXVlc3RJZGVudGlmaWVyJyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vUmVsYXlDb25jcmV0ZVZhcmlhYmxlcycpLFxuICAgIGdldE9wZXJhdGlvblZhcmlhYmxlcyA9IF9yZXF1aXJlLmdldE9wZXJhdGlvblZhcmlhYmxlcztcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vUmVsYXlNb2Rlcm5TZWxlY3RvcicpLFxuICAgIGNyZWF0ZU5vcm1hbGl6YXRpb25TZWxlY3RvciA9IF9yZXF1aXJlMi5jcmVhdGVOb3JtYWxpemF0aW9uU2VsZWN0b3IsXG4gICAgY3JlYXRlUmVhZGVyU2VsZWN0b3IgPSBfcmVxdWlyZTIuY3JlYXRlUmVhZGVyU2VsZWN0b3I7XG5cbnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKCcuL1JlbGF5U3RvcmVVdGlscycpLFxuICAgIFJPT1RfSUQgPSBfcmVxdWlyZTMuUk9PVF9JRDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSBgT3BlcmF0aW9uRGVzY3JpcHRvcmAgdHlwZSBkZWZpbmVkIGluXG4gKiBgUmVsYXlTdG9yZVR5cGVzYCBnaXZlbiBhbiBvcGVyYXRpb24gYW5kIHNvbWUgdmFyaWFibGVzLiBUaGUgaW5wdXQgdmFyaWFibGVzXG4gKiBhcmUgZmlsdGVyZWQgdG8gZXhjbHVkZSB2YXJpYWJsZXMgdGhhdCBkbyBub3QgbWF0Y2ggZGVmaW5lZCBhcmd1bWVudHMgb24gdGhlXG4gKiBvcGVyYXRpb24sIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgcG9wdWxhdGVkIGZvciBudWxsIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcihyZXF1ZXN0LCB2YXJpYWJsZXMsIGNhY2hlQ29uZmlnKSB7XG4gIHZhciBkYXRhSUQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IFJPT1RfSUQ7XG4gIHZhciBvcGVyYXRpb24gPSByZXF1ZXN0Lm9wZXJhdGlvbjtcbiAgdmFyIG9wZXJhdGlvblZhcmlhYmxlcyA9IGdldE9wZXJhdGlvblZhcmlhYmxlcyhvcGVyYXRpb24sIHZhcmlhYmxlcyk7XG4gIHZhciByZXF1ZXN0RGVzY3JpcHRvciA9IGNyZWF0ZVJlcXVlc3REZXNjcmlwdG9yKHJlcXVlc3QsIG9wZXJhdGlvblZhcmlhYmxlcywgY2FjaGVDb25maWcpO1xuICB2YXIgb3BlcmF0aW9uRGVzY3JpcHRvciA9IHtcbiAgICBmcmFnbWVudDogY3JlYXRlUmVhZGVyU2VsZWN0b3IocmVxdWVzdC5mcmFnbWVudCwgZGF0YUlELCBvcGVyYXRpb25WYXJpYWJsZXMsIHJlcXVlc3REZXNjcmlwdG9yKSxcbiAgICByZXF1ZXN0OiByZXF1ZXN0RGVzY3JpcHRvcixcbiAgICByb290OiBjcmVhdGVOb3JtYWxpemF0aW9uU2VsZWN0b3Iob3BlcmF0aW9uLCBkYXRhSUQsIG9wZXJhdGlvblZhcmlhYmxlcylcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gRnJlZXppbmcgcHJvcGVydGllcyBzaG9ydC1jaXJjdWl0cyBhIGRlZXBGcmVlemUgb2Ygc25hcHNob3RzIHRoYXQgY29udGFpblxuICAgIC8vIGFuIE9wZXJhdGlvbkRlc2NyaXB0b3IgdmlhIHRoZWlyIHNlbGVjdG9yJ3Mgb3duZXIsIGF2b2lkaW5nIHN0YWNrXG4gICAgLy8gb3ZlcmZsb3cgb24gbGFyZ2VyIHF1ZXJpZXMuXG4gICAgT2JqZWN0LmZyZWV6ZShvcGVyYXRpb25EZXNjcmlwdG9yLmZyYWdtZW50KTtcbiAgICBPYmplY3QuZnJlZXplKG9wZXJhdGlvbkRlc2NyaXB0b3Iucm9vdCk7XG4gICAgT2JqZWN0LmZyZWV6ZShvcGVyYXRpb25EZXNjcmlwdG9yKTtcbiAgfVxuXG4gIHJldHVybiBvcGVyYXRpb25EZXNjcmlwdG9yO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZXF1ZXN0RGVzY3JpcHRvcihyZXF1ZXN0LCB2YXJpYWJsZXMsIGNhY2hlQ29uZmlnKSB7XG4gIHZhciByZXF1ZXN0RGVzY3JpcHRvciA9IHtcbiAgICBpZGVudGlmaWVyOiBnZXRSZXF1ZXN0SWRlbnRpZmllcihyZXF1ZXN0LnBhcmFtcywgdmFyaWFibGVzKSxcbiAgICBub2RlOiByZXF1ZXN0LFxuICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgIGNhY2hlQ29uZmlnOiBjYWNoZUNvbmZpZ1xuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBkZWVwRnJlZXplKHZhcmlhYmxlcyk7XG4gICAgT2JqZWN0LmZyZWV6ZShyZXF1ZXN0KTtcbiAgICBPYmplY3QuZnJlZXplKHJlcXVlc3REZXNjcmlwdG9yKTtcbiAgfVxuXG4gIHJldHVybiByZXF1ZXN0RGVzY3JpcHRvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3I6IGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IsXG4gIGNyZWF0ZVJlcXVlc3REZXNjcmlwdG9yOiBjcmVhdGVSZXF1ZXN0RGVzY3JpcHRvclxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBhcmVFcXVhbCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9hcmVFcXVhbFwiKTtcblxudmFyIGRlZXBGcmVlemUgPSByZXF1aXJlKCcuLi91dGlsL2RlZXBGcmVlemUnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL0NsaWVudElEJyksXG4gICAgaXNDbGllbnRJRCA9IF9yZXF1aXJlLmlzQ2xpZW50SUQ7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuL1JlbGF5U3RvcmVVdGlscycpLFxuICAgIElEX0tFWSA9IF9yZXF1aXJlMi5JRF9LRVksXG4gICAgUkVGX0tFWSA9IF9yZXF1aXJlMi5SRUZfS0VZLFxuICAgIFJFRlNfS0VZID0gX3JlcXVpcmUyLlJFRlNfS0VZLFxuICAgIFRZUEVOQU1FX0tFWSA9IF9yZXF1aXJlMi5UWVBFTkFNRV9LRVksXG4gICAgSU5WQUxJREFURURfQVRfS0VZID0gX3JlcXVpcmUyLklOVkFMSURBVEVEX0FUX0tFWSxcbiAgICBST09UX0lEID0gX3JlcXVpcmUyLlJPT1RfSUQ7XG5cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIExvdy1sZXZlbCByZWNvcmQgbWFuaXB1bGF0aW9uIG1ldGhvZHMuXG4gKlxuICogQSBub3RlIGFib3V0IHBlcmY6IHdlIHVzZSBsb25nLWhhbmQgcHJvcGVydHkgYWNjZXNzIHJhdGhlciB0aGFuIGNvbXB1dGVkXG4gKiBwcm9wZXJ0aWVzIGluIHRoaXMgZmlsZSBmb3Igc3BlZWQgaWUuXG4gKlxuICogICAgY29uc3Qgb2JqZWN0ID0ge307XG4gKiAgICBvYmplY3RbS0VZXSA9IHZhbHVlO1xuICogICAgcmVjb3JkW3N0b3JhZ2VLZXldID0gb2JqZWN0O1xuICpcbiAqIGluc3RlYWQgb2Y6XG4gKlxuICogICAgcmVjb3JkW3N0b3JhZ2VLZXldID0ge1xuICogICAgICBbS0VZXTogdmFsdWUsXG4gKiAgICB9O1xuICpcbiAqIFRoZSBsYXR0ZXIgZ2V0cyB0cmFuc2Zvcm1lZCBieSBCYWJlbCBpbnRvIHNvbWV0aGluZyBsaWtlOlxuICpcbiAqICAgIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAqICAgICAgaWYgKGtleSBpbiBvYmopIHtcbiAqICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAqICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAqICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gKiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gKiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAqICAgICAgICB9KTtcbiAqICAgICAgfSBlbHNlIHtcbiAqICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICogICAgICB9XG4gKiAgICAgIHJldHVybiBvYmo7XG4gKiAgICB9XG4gKlxuICogICAgcmVjb3JkW3N0b3JhZ2VLZXldID0gX2RlZmluZVByb3BlcnR5KHt9LCBLRVksIHZhbHVlKTtcbiAqXG4gKiBBIHF1aWNrIGJlbmNobWFyayBzaG93cyB0aGF0IGNvbXB1dGVkIHByb3BlcnR5IGFjY2VzcyBpcyBhbiBvcmRlciBvZlxuICogbWFnbml0dWRlIHNsb3dlciAodGltZXMgaW4gc2Vjb25kcyBmb3IgMTAwLDAwMCBpdGVyYXRpb25zKTpcbiAqXG4gKiAgICAgICAgICAgICAgIGJlc3QgICAgIGF2ZyAgICAgc2RcbiAqICAgIGNvbXB1dGVkIDAuMDIxNzUgMC4wMjI5MiAwLjAwMTEzXG4gKiAgICAgIG1hbnVhbCAwLjAwMTEwIDAuMDAxMjMgMC4wMDAwOFxuICovXG5cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIENsb25lIGEgcmVjb3JkLlxuICovXG5mdW5jdGlvbiBjbG9uZShyZWNvcmQpIHtcbiAgcmV0dXJuICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCByZWNvcmQpO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogQ29waWVzIGFsbCBmaWVsZHMgZnJvbSBgc291cmNlYCB0byBgc2lua2AsIGV4Y2x1ZGluZyBgX19pZGAgYW5kIGBfX3R5cGVuYW1lYC5cbiAqXG4gKiBOT1RFOiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IHRyZWF0IGBpZGAgc3BlY2lhbGx5LiBUbyBwcmVzZXJ2ZSB0aGUgaWQsXG4gKiBtYW51YWxseSByZXNldCBpdCBhZnRlciBjYWxsaW5nIHRoaXMgZnVuY3Rpb24uIEFsc28gbm90ZSB0aGF0IHZhbHVlcyBhcmVcbiAqIGNvcGllZCBieSByZWZlcmVuY2UgYW5kIG5vdCB2YWx1ZTsgY2FsbGVycyBzaG91bGQgZW5zdXJlIHRoYXQgdmFsdWVzIGFyZVxuICogY29waWVkIG9uIHdyaXRlLlxuICovXG5cblxuZnVuY3Rpb24gY29weUZpZWxkcyhzb3VyY2UsIHNpbmspIHtcbiAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgaWYgKGtleSAhPT0gSURfS0VZICYmIGtleSAhPT0gVFlQRU5BTUVfS0VZKSB7XG4gICAgICAgIHNpbmtba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogQ3JlYXRlIGEgbmV3IHJlY29yZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZShkYXRhSUQsIHR5cGVOYW1lKSB7XG4gIC8vIFNlZSBwZXJmIG5vdGUgYWJvdmUgZm9yIHdoeSB3ZSBhcmVuJ3QgdXNpbmcgY29tcHV0ZWQgcHJvcGVydHkgYWNjZXNzLlxuICB2YXIgcmVjb3JkID0ge307XG4gIHJlY29yZFtJRF9LRVldID0gZGF0YUlEO1xuICByZWNvcmRbVFlQRU5BTUVfS0VZXSA9IHR5cGVOYW1lO1xuICByZXR1cm4gcmVjb3JkO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogR2V0IHRoZSByZWNvcmQncyBgaWRgIGlmIGF2YWlsYWJsZSBvciB0aGUgY2xpZW50LWdlbmVyYXRlZCBpZGVudGlmaWVyLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0RGF0YUlEKHJlY29yZCkge1xuICByZXR1cm4gcmVjb3JkW0lEX0tFWV07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBHZXQgdGhlIGNvbmNyZXRlIHR5cGUgb2YgdGhlIHJlY29yZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFR5cGUocmVjb3JkKSB7XG4gIHJldHVybiByZWNvcmRbVFlQRU5BTUVfS0VZXTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIEdldCBhIHNjYWxhciAobm9uLWxpbmspIGZpZWxkIHZhbHVlLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0VmFsdWUocmVjb3JkLCBzdG9yYWdlS2V5KSB7XG4gIHZhciB2YWx1ZSA9IHJlY29yZFtzdG9yYWdlS2V5XTtcblxuICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICEoIXZhbHVlLmhhc093blByb3BlcnR5KFJFRl9LRVkpICYmICF2YWx1ZS5oYXNPd25Qcm9wZXJ0eShSRUZTX0tFWSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0VmFsdWUoKTogRXhwZWN0ZWQgYSBzY2FsYXIgKG5vbi1saW5rKSB2YWx1ZSBmb3IgYCVzLiVzYCAnICsgJ2J1dCBmb3VuZCAlcy4nLCByZWNvcmRbSURfS0VZXSwgc3RvcmFnZUtleSwgdmFsdWUuaGFzT3duUHJvcGVydHkoUkVGX0tFWSkgPyAnYSBsaW5rZWQgcmVjb3JkJyA6ICdwbHVyYWwgbGlua2VkIHJlY29yZHMnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGEgZmllbGQgYXMgYSByZWZlcmVuY2UgdG8gYW5vdGhlciByZWNvcmQuIFRocm93cyBpZiB0aGVcbiAqIGZpZWxkIGhhcyBhIGRpZmZlcmVudCB0eXBlLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0TGlua2VkUmVjb3JkSUQocmVjb3JkLCBzdG9yYWdlS2V5KSB7XG4gIHZhciBsaW5rID0gcmVjb3JkW3N0b3JhZ2VLZXldO1xuXG4gIGlmIChsaW5rID09IG51bGwpIHtcbiAgICByZXR1cm4gbGluaztcbiAgfVxuXG4gICEodHlwZW9mIGxpbmsgPT09ICdvYmplY3QnICYmIGxpbmsgJiYgdHlwZW9mIGxpbmtbUkVGX0tFWV0gPT09ICdzdHJpbmcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuUmVjb3JkLmdldExpbmtlZFJlY29yZElEKCk6IEV4cGVjdGVkIGAlcy4lc2AgdG8gYmUgYSBsaW5rZWQgSUQsICcgKyAnd2FzIGAlc2AuJywgcmVjb3JkW0lEX0tFWV0sIHN0b3JhZ2VLZXksIEpTT04uc3RyaW5naWZ5KGxpbmspKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBsaW5rW1JFRl9LRVldO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBhIGZpZWxkIGFzIGEgbGlzdCBvZiByZWZlcmVuY2VzIHRvIG90aGVyIHJlY29yZHMuIFRocm93cyBpZlxuICogdGhlIGZpZWxkIGhhcyBhIGRpZmZlcmVudCB0eXBlLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0TGlua2VkUmVjb3JkSURzKHJlY29yZCwgc3RvcmFnZUtleSkge1xuICB2YXIgbGlua3MgPSByZWNvcmRbc3RvcmFnZUtleV07XG5cbiAgaWYgKGxpbmtzID09IG51bGwpIHtcbiAgICByZXR1cm4gbGlua3M7XG4gIH1cblxuICAhKHR5cGVvZiBsaW5rcyA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShsaW5rc1tSRUZTX0tFWV0pKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuUmVjb3JkLmdldExpbmtlZFJlY29yZElEcygpOiBFeHBlY3RlZCBgJXMuJXNgIHRvIGNvbnRhaW4gYW4gYXJyYXkgJyArICdvZiBsaW5rZWQgSURzLCBnb3QgYCVzYC4nLCByZWNvcmRbSURfS0VZXSwgc3RvcmFnZUtleSwgSlNPTi5zdHJpbmdpZnkobGlua3MpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7IC8vIGFzc3VtZSBpdGVtcyBvZiB0aGUgYXJyYXkgYXJlIGlkc1xuXG4gIHJldHVybiBsaW5rc1tSRUZTX0tFWV07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBSZXR1cm5zIHRoZSBlcG9jaCBhdCB3aGljaCB0aGUgcmVjb3JkIHdhcyBpbnZhbGlkYXRlZCwgaWYgaXRcbiAqIGV2ZXIgd2FzOyBvdGhlcndpc2UgcmV0dXJucyBudWxsO1xuICovXG5cblxuZnVuY3Rpb24gZ2V0SW52YWxpZGF0aW9uRXBvY2gocmVjb3JkKSB7XG4gIGlmIChyZWNvcmQgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGludmFsaWRhdGVkQXQgPSByZWNvcmRbSU5WQUxJREFURURfQVRfS0VZXTtcblxuICBpZiAodHlwZW9mIGludmFsaWRhdGVkQXQgIT09ICdudW1iZXInKSB7XG4gICAgLy8gSWYgdGhlIHJlY29yZCBoYXMgbmV2ZXIgYmVlbiBpbnZhbGlkYXRlZCwgaXQgaXNuJ3Qgc3RhbGUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gaW52YWxpZGF0ZWRBdDtcbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIENvbXBhcmVzIHRoZSBmaWVsZHMgb2YgYSBwcmV2aW91cyBhbmQgbmV3IHJlY29yZCwgcmV0dXJuaW5nIGVpdGhlciB0aGVcbiAqIHByZXZpb3VzIHJlY29yZCBpZiBhbGwgZmllbGRzIGFyZSBlcXVhbCBvciBhIG5ldyByZWNvcmQgKHdpdGggbWVyZ2VkIGZpZWxkcylcbiAqIGlmIGFueSBmaWVsZHMgaGF2ZSBjaGFuZ2VkLlxuICovXG5cblxuZnVuY3Rpb24gdXBkYXRlKHByZXZSZWNvcmQsIG5leHRSZWNvcmQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhciBfZ2V0VHlwZSwgX2dldFR5cGUyO1xuXG4gICAgdmFyIHByZXZJRCA9IGdldERhdGFJRChwcmV2UmVjb3JkKTtcbiAgICB2YXIgbmV4dElEID0gZ2V0RGF0YUlEKG5leHRSZWNvcmQpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldklEID09PSBuZXh0SUQsICdSZWxheU1vZGVyblJlY29yZDogSW52YWxpZCByZWNvcmQgdXBkYXRlLCBleHBlY3RlZCBib3RoIHZlcnNpb25zIG9mICcgKyAndGhlIHJlY29yZCB0byBoYXZlIHRoZSBzYW1lIGlkLCBnb3QgYCVzYCBhbmQgYCVzYC4nLCBwcmV2SUQsIG5leHRJRCkgOiB2b2lkIDA7IC8vIG5vdGU6IGNvYWxlc2NlIG51bGwvdW5kZWZpbmVkIHRvIG51bGxcblxuICAgIHZhciBwcmV2VHlwZSA9IChfZ2V0VHlwZSA9IGdldFR5cGUocHJldlJlY29yZCkpICE9PSBudWxsICYmIF9nZXRUeXBlICE9PSB2b2lkIDAgPyBfZ2V0VHlwZSA6IG51bGw7XG4gICAgdmFyIG5leHRUeXBlID0gKF9nZXRUeXBlMiA9IGdldFR5cGUobmV4dFJlY29yZCkpICE9PSBudWxsICYmIF9nZXRUeXBlMiAhPT0gdm9pZCAwID8gX2dldFR5cGUyIDogbnVsbDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGlzQ2xpZW50SUQobmV4dElEKSAmJiBuZXh0SUQgIT09IFJPT1RfSUQgfHwgcHJldlR5cGUgPT09IG5leHRUeXBlLCAnUmVsYXlNb2Rlcm5SZWNvcmQ6IEludmFsaWQgcmVjb3JkIHVwZGF0ZSwgZXhwZWN0ZWQgYm90aCB2ZXJzaW9ucyBvZiAnICsgJ3JlY29yZCBgJXNgIHRvIGhhdmUgdGhlIHNhbWUgYCVzYCBidXQgZ290IGNvbmZsaWN0aW5nIHR5cGVzIGAlc2AgJyArICdhbmQgYCVzYC4gVGhlIEdyYXBoUUwgc2VydmVyIGxpa2VseSB2aW9sYXRlZCB0aGUgZ2xvYmFsbHkgdW5pcXVlICcgKyAnaWQgcmVxdWlyZW1lbnQgYnkgcmV0dXJuaW5nIHRoZSBzYW1lIGlkIGZvciBkaWZmZXJlbnQgb2JqZWN0cy4nLCBwcmV2SUQsIFRZUEVOQU1FX0tFWSwgcHJldlR5cGUsIG5leHRUeXBlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciB1cGRhdGVkID0gbnVsbDtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhuZXh0UmVjb3JkKTtcblxuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwga2V5cy5sZW5ndGg7IGlpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpaV07XG5cbiAgICBpZiAodXBkYXRlZCB8fCAhYXJlRXF1YWwocHJldlJlY29yZFtrZXldLCBuZXh0UmVjb3JkW2tleV0pKSB7XG4gICAgICB1cGRhdGVkID0gdXBkYXRlZCAhPT0gbnVsbCA/IHVwZGF0ZWQgOiAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgcHJldlJlY29yZCk7XG4gICAgICB1cGRhdGVkW2tleV0gPSBuZXh0UmVjb3JkW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVwZGF0ZWQgIT09IG51bGwgPyB1cGRhdGVkIDogcHJldlJlY29yZDtcbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIFJldHVybnMgYSBuZXcgcmVjb3JkIHdpdGggdGhlIGNvbnRlbnRzIG9mIHRoZSBnaXZlbiByZWNvcmRzLiBGaWVsZHMgaW4gdGhlXG4gKiBzZWNvbmQgcmVjb3JkIHdpbGwgb3ZlcndyaXRlIGlkZW50aWNhbCBmaWVsZHMgaW4gdGhlIGZpcnN0IHJlY29yZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1lcmdlKHJlY29yZDEsIHJlY29yZDIpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhciBfZ2V0VHlwZTMsIF9nZXRUeXBlNDtcblxuICAgIHZhciBwcmV2SUQgPSBnZXREYXRhSUQocmVjb3JkMSk7XG4gICAgdmFyIG5leHRJRCA9IGdldERhdGFJRChyZWNvcmQyKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZJRCA9PT0gbmV4dElELCAnUmVsYXlNb2Rlcm5SZWNvcmQ6IEludmFsaWQgcmVjb3JkIG1lcmdlLCBleHBlY3RlZCBib3RoIHZlcnNpb25zIG9mICcgKyAndGhlIHJlY29yZCB0byBoYXZlIHRoZSBzYW1lIGlkLCBnb3QgYCVzYCBhbmQgYCVzYC4nLCBwcmV2SUQsIG5leHRJRCkgOiB2b2lkIDA7IC8vIG5vdGU6IGNvYWxlc2NlIG51bGwvdW5kZWZpbmVkIHRvIG51bGxcblxuICAgIHZhciBwcmV2VHlwZSA9IChfZ2V0VHlwZTMgPSBnZXRUeXBlKHJlY29yZDEpKSAhPT0gbnVsbCAmJiBfZ2V0VHlwZTMgIT09IHZvaWQgMCA/IF9nZXRUeXBlMyA6IG51bGw7XG4gICAgdmFyIG5leHRUeXBlID0gKF9nZXRUeXBlNCA9IGdldFR5cGUocmVjb3JkMikpICE9PSBudWxsICYmIF9nZXRUeXBlNCAhPT0gdm9pZCAwID8gX2dldFR5cGU0IDogbnVsbDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGlzQ2xpZW50SUQobmV4dElEKSAmJiBuZXh0SUQgIT09IFJPT1RfSUQgfHwgcHJldlR5cGUgPT09IG5leHRUeXBlLCAnUmVsYXlNb2Rlcm5SZWNvcmQ6IEludmFsaWQgcmVjb3JkIG1lcmdlLCBleHBlY3RlZCBib3RoIHZlcnNpb25zIG9mICcgKyAncmVjb3JkIGAlc2AgdG8gaGF2ZSB0aGUgc2FtZSBgJXNgIGJ1dCBnb3QgY29uZmxpY3RpbmcgdHlwZXMgYCVzYCAnICsgJ2FuZCBgJXNgLiBUaGUgR3JhcGhRTCBzZXJ2ZXIgbGlrZWx5IHZpb2xhdGVkIHRoZSBnbG9iYWxseSB1bmlxdWUgJyArICdpZCByZXF1aXJlbWVudCBieSByZXR1cm5pbmcgdGhlIHNhbWUgaWQgZm9yIGRpZmZlcmVudCBvYmplY3RzLicsIHByZXZJRCwgVFlQRU5BTUVfS0VZLCBwcmV2VHlwZSwgbmV4dFR5cGUpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJlY29yZDEsIHJlY29yZDIpO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogUHJldmVudCBtb2RpZmljYXRpb25zIHRvIHRoZSByZWNvcmQuIEF0dGVtcHRzIHRvIGNhbGwgYHNldCpgIGZ1bmN0aW9ucyBvbiBhXG4gKiBmcm96ZW4gcmVjb3JkIHdpbGwgZmF0YWwgYXQgcnVudGltZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZyZWV6ZShyZWNvcmQpIHtcbiAgZGVlcEZyZWV6ZShyZWNvcmQpO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogU2V0IHRoZSB2YWx1ZSBvZiBhIHN0b3JhZ2VLZXkgdG8gYSBzY2FsYXIuXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRWYWx1ZShyZWNvcmQsIHN0b3JhZ2VLZXksIHZhbHVlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgcHJldklEID0gZ2V0RGF0YUlEKHJlY29yZCk7XG5cbiAgICBpZiAoc3RvcmFnZUtleSA9PT0gSURfS0VZKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZJRCA9PT0gdmFsdWUsICdSZWxheU1vZGVyblJlY29yZDogSW52YWxpZCBmaWVsZCB1cGRhdGUsIGV4cGVjdGVkIGJvdGggdmVyc2lvbnMgb2YgJyArICd0aGUgcmVjb3JkIHRvIGhhdmUgdGhlIHNhbWUgaWQsIGdvdCBgJXNgIGFuZCBgJXNgLicsIHByZXZJRCwgdmFsdWUpIDogdm9pZCAwO1xuICAgIH0gZWxzZSBpZiAoc3RvcmFnZUtleSA9PT0gVFlQRU5BTUVfS0VZKSB7XG4gICAgICB2YXIgX2dldFR5cGU1O1xuXG4gICAgICAvLyBub3RlOiBjb2FsZXNjZSBudWxsL3VuZGVmaW5lZCB0byBudWxsXG4gICAgICB2YXIgcHJldlR5cGUgPSAoX2dldFR5cGU1ID0gZ2V0VHlwZShyZWNvcmQpKSAhPT0gbnVsbCAmJiBfZ2V0VHlwZTUgIT09IHZvaWQgMCA/IF9nZXRUeXBlNSA6IG51bGw7XG4gICAgICB2YXIgbmV4dFR5cGUgPSB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwID8gdmFsdWUgOiBudWxsO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhpc0NsaWVudElEKGdldERhdGFJRChyZWNvcmQpKSAmJiBnZXREYXRhSUQocmVjb3JkKSAhPT0gUk9PVF9JRCB8fCBwcmV2VHlwZSA9PT0gbmV4dFR5cGUsICdSZWxheU1vZGVyblJlY29yZDogSW52YWxpZCBmaWVsZCB1cGRhdGUsIGV4cGVjdGVkIGJvdGggdmVyc2lvbnMgb2YgJyArICdyZWNvcmQgYCVzYCB0byBoYXZlIHRoZSBzYW1lIGAlc2AgYnV0IGdvdCBjb25mbGljdGluZyB0eXBlcyBgJXNgICcgKyAnYW5kIGAlc2AuIFRoZSBHcmFwaFFMIHNlcnZlciBsaWtlbHkgdmlvbGF0ZWQgdGhlIGdsb2JhbGx5IHVuaXF1ZSAnICsgJ2lkIHJlcXVpcmVtZW50IGJ5IHJldHVybmluZyB0aGUgc2FtZSBpZCBmb3IgZGlmZmVyZW50IG9iamVjdHMuJywgcHJldklELCBUWVBFTkFNRV9LRVksIHByZXZUeXBlLCBuZXh0VHlwZSkgOiB2b2lkIDA7XG4gICAgfVxuICB9XG5cbiAgcmVjb3JkW3N0b3JhZ2VLZXldID0gdmFsdWU7XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBTZXQgdGhlIHZhbHVlIG9mIGEgZmllbGQgdG8gYSByZWZlcmVuY2UgdG8gYW5vdGhlciByZWNvcmQuXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRMaW5rZWRSZWNvcmRJRChyZWNvcmQsIHN0b3JhZ2VLZXksIGxpbmtlZElEKSB7XG4gIC8vIFNlZSBwZXJmIG5vdGUgYWJvdmUgZm9yIHdoeSB3ZSBhcmVuJ3QgdXNpbmcgY29tcHV0ZWQgcHJvcGVydHkgYWNjZXNzLlxuICB2YXIgbGluayA9IHt9O1xuICBsaW5rW1JFRl9LRVldID0gbGlua2VkSUQ7XG4gIHJlY29yZFtzdG9yYWdlS2V5XSA9IGxpbms7XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBTZXQgdGhlIHZhbHVlIG9mIGEgZmllbGQgdG8gYSBsaXN0IG9mIHJlZmVyZW5jZXMgb3RoZXIgcmVjb3Jkcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHNldExpbmtlZFJlY29yZElEcyhyZWNvcmQsIHN0b3JhZ2VLZXksIGxpbmtlZElEcykge1xuICAvLyBTZWUgcGVyZiBub3RlIGFib3ZlIGZvciB3aHkgd2UgYXJlbid0IHVzaW5nIGNvbXB1dGVkIHByb3BlcnR5IGFjY2Vzcy5cbiAgdmFyIGxpbmtzID0ge307XG4gIGxpbmtzW1JFRlNfS0VZXSA9IGxpbmtlZElEcztcbiAgcmVjb3JkW3N0b3JhZ2VLZXldID0gbGlua3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjbG9uZTogY2xvbmUsXG4gIGNvcHlGaWVsZHM6IGNvcHlGaWVsZHMsXG4gIGNyZWF0ZTogY3JlYXRlLFxuICBmcmVlemU6IGZyZWV6ZSxcbiAgZ2V0RGF0YUlEOiBnZXREYXRhSUQsXG4gIGdldEludmFsaWRhdGlvbkVwb2NoOiBnZXRJbnZhbGlkYXRpb25FcG9jaCxcbiAgZ2V0TGlua2VkUmVjb3JkSUQ6IGdldExpbmtlZFJlY29yZElELFxuICBnZXRMaW5rZWRSZWNvcmRJRHM6IGdldExpbmtlZFJlY29yZElEcyxcbiAgZ2V0VHlwZTogZ2V0VHlwZSxcbiAgZ2V0VmFsdWU6IGdldFZhbHVlLFxuICBtZXJnZTogbWVyZ2UsXG4gIHNldFZhbHVlOiBzZXRWYWx1ZSxcbiAgc2V0TGlua2VkUmVjb3JkSUQ6IHNldExpbmtlZFJlY29yZElELFxuICBzZXRMaW5rZWRSZWNvcmRJRHM6IHNldExpbmtlZFJlY29yZElEcyxcbiAgdXBkYXRlOiB1cGRhdGVcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhcmVFcXVhbCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9hcmVFcXVhbFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL1JlbGF5Q29uY3JldGVWYXJpYWJsZXMnKSxcbiAgICBnZXRGcmFnbWVudFZhcmlhYmxlcyA9IF9yZXF1aXJlLmdldEZyYWdtZW50VmFyaWFibGVzO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlVXRpbHMnKSxcbiAgICBGUkFHTUVOVF9PV05FUl9LRVkgPSBfcmVxdWlyZTIuRlJBR01FTlRfT1dORVJfS0VZLFxuICAgIEZSQUdNRU5UU19LRVkgPSBfcmVxdWlyZTIuRlJBR01FTlRTX0tFWSxcbiAgICBJRF9LRVkgPSBfcmVxdWlyZTIuSURfS0VZLFxuICAgIElTX1dJVEhJTl9VTk1BVENIRURfVFlQRV9SRUZJTkVNRU5UID0gX3JlcXVpcmUyLklTX1dJVEhJTl9VTk1BVENIRURfVFlQRV9SRUZJTkVNRU5UO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBHaXZlbiB0aGUgcmVzdWx0IGBpdGVtYCBmcm9tIGEgcGFyZW50IHRoYXQgZmV0Y2hlZCBgZnJhZ21lbnRgLCBjcmVhdGVzIGFcbiAqIHNlbGVjdG9yIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVhZCB0aGUgcmVzdWx0cyBvZiB0aGF0IGZyYWdtZW50IGZvciB0aGF0IGl0ZW0uXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBHaXZlbiB0d28gZnJhZ21lbnRzIGFzIGZvbGxvd3M6XG4gKlxuICogYGBgXG4gKiBmcmFnbWVudCBQYXJlbnQgb24gVXNlciB7XG4gKiAgIGlkXG4gKiAgIC4uLkNoaWxkXG4gKiB9XG4gKiBmcmFnbWVudCBDaGlsZCBvbiBVc2VyIHtcbiAqICAgbmFtZVxuICogfVxuICogYGBgXG4gKlxuICogQW5kIGdpdmVuIHNvbWUgb2JqZWN0IGBwYXJlbnRgIHRoYXQgaXMgdGhlIHJlc3VsdHMgb2YgYFBhcmVudGAgZm9yIGlkIFwiNFwiLFxuICogdGhlIHJlc3VsdHMgb2YgYENoaWxkYCBjYW4gYmUgYWNjZXNzZWQgYnkgZmlyc3QgZ2V0dGluZyBhIHNlbGVjdG9yIGFuZCB0aGVuXG4gKiB1c2luZyB0aGF0IHNlbGVjdG9yIHRvIGBsb29rdXAoKWAgdGhlIHJlc3VsdHMgYWdhaW5zdCB0aGUgZW52aXJvbm1lbnQ6XG4gKlxuICogYGBgXG4gKiBjb25zdCBjaGlsZFNlbGVjdG9yID0gZ2V0U2luZ3VsYXJTZWxlY3RvcihxdWVyeVZhcmlhYmxlcywgQ2hpbGQsIHBhcmVudCk7XG4gKiBjb25zdCBjaGlsZERhdGEgPSBlbnZpcm9ubWVudC5sb29rdXAoY2hpbGRTZWxlY3RvcikuZGF0YTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBnZXRTaW5ndWxhclNlbGVjdG9yKGZyYWdtZW50LCBpdGVtKSB7XG4gICEodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0gIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkoaXRlbSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5TZWxlY3RvcjogRXhwZWN0ZWQgdmFsdWUgZm9yIGZyYWdtZW50IGAlc2AgdG8gYmUgYW4gb2JqZWN0LCBnb3QgJyArICdgJXNgLicsIGZyYWdtZW50Lm5hbWUsIEpTT04uc3RyaW5naWZ5KGl0ZW0pKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBkYXRhSUQgPSBpdGVtW0lEX0tFWV07XG4gIHZhciBmcmFnbWVudHMgPSBpdGVtW0ZSQUdNRU5UU19LRVldO1xuICB2YXIgbWl4ZWRPd25lciA9IGl0ZW1bRlJBR01FTlRfT1dORVJfS0VZXTtcbiAgdmFyIGlzV2l0aGluVW5tYXRjaGVkVHlwZVJlZmluZW1lbnQgPSBpdGVtW0lTX1dJVEhJTl9VTk1BVENIRURfVFlQRV9SRUZJTkVNRU5UXSA9PT0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGRhdGFJRCA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIGZyYWdtZW50cyA9PT0gJ29iamVjdCcgJiYgZnJhZ21lbnRzICE9PSBudWxsICYmIHR5cGVvZiBmcmFnbWVudHNbZnJhZ21lbnQubmFtZV0gPT09ICdvYmplY3QnICYmIGZyYWdtZW50c1tmcmFnbWVudC5uYW1lXSAhPT0gbnVsbCAmJiB0eXBlb2YgbWl4ZWRPd25lciA9PT0gJ29iamVjdCcgJiYgbWl4ZWRPd25lciAhPT0gbnVsbCkge1xuICAgIHZhciBvd25lciA9IG1peGVkT3duZXI7XG4gICAgdmFyIGFyZ3VtZW50VmFyaWFibGVzID0gZnJhZ21lbnRzW2ZyYWdtZW50Lm5hbWVdO1xuICAgIHZhciBmcmFnbWVudFZhcmlhYmxlcyA9IGdldEZyYWdtZW50VmFyaWFibGVzKGZyYWdtZW50LCBvd25lci52YXJpYWJsZXMsIGFyZ3VtZW50VmFyaWFibGVzKTtcbiAgICByZXR1cm4gY3JlYXRlUmVhZGVyU2VsZWN0b3IoZnJhZ21lbnQsIGRhdGFJRCwgZnJhZ21lbnRWYXJpYWJsZXMsIG93bmVyLCBpc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50KTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgc3RyaW5naWZpZWRJdGVtID0gSlNPTi5zdHJpbmdpZnkoaXRlbSk7XG5cbiAgICBpZiAoc3RyaW5naWZpZWRJdGVtLmxlbmd0aCA+IDQ5OSkge1xuICAgICAgc3RyaW5naWZpZWRJdGVtID0gc3RyaW5naWZpZWRJdGVtLnN1YnN0cigwLCA0OTgpICsgXCJcXHUyMDI2XCI7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5TW9kZXJuU2VsZWN0b3I6IEV4cGVjdGVkIG9iamVjdCB0byBjb250YWluIGRhdGEgZm9yIGZyYWdtZW50IGAlc2AsIGdvdCAnICsgJ2Alc2AuIE1ha2Ugc3VyZSB0aGF0IHRoZSBwYXJlbnQgb3BlcmF0aW9uL2ZyYWdtZW50IGluY2x1ZGVkIGZyYWdtZW50ICcgKyAnYC4uLiVzYCB3aXRob3V0IGBAcmVsYXkobWFzazogZmFsc2UpYC4nLCBmcmFnbWVudC5uYW1lLCBzdHJpbmdpZmllZEl0ZW0sIGZyYWdtZW50Lm5hbWUpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBHaXZlbiB0aGUgcmVzdWx0IGBpdGVtc2AgZnJvbSBhIHBhcmVudCB0aGF0IGZldGNoZWQgYGZyYWdtZW50YCwgY3JlYXRlcyBhXG4gKiBzZWxlY3RvciB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlYWQgdGhlIHJlc3VsdHMgb2YgdGhhdCBmcmFnbWVudCBvbiB0aG9zZVxuICogaXRlbXMuIFRoaXMgaXMgc2ltaWxhciB0byBgZ2V0U2luZ3VsYXJTZWxlY3RvcmAgYnV0IGZvciBcInBsdXJhbFwiIGZyYWdtZW50cyB0aGF0XG4gKiBleHBlY3QgYW4gYXJyYXkgb2YgcmVzdWx0cyBhbmQgdGhlcmVmb3JlIHJldHVybiBhbiBhcnJheSBvZiBzZWxlY3RvcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRQbHVyYWxTZWxlY3RvcihmcmFnbWVudCwgaXRlbXMpIHtcbiAgdmFyIHNlbGVjdG9ycyA9IG51bGw7XG4gIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGlpKSB7XG4gICAgdmFyIHNlbGVjdG9yID0gaXRlbSAhPSBudWxsID8gZ2V0U2luZ3VsYXJTZWxlY3RvcihmcmFnbWVudCwgaXRlbSkgOiBudWxsO1xuXG4gICAgaWYgKHNlbGVjdG9yICE9IG51bGwpIHtcbiAgICAgIHNlbGVjdG9ycyA9IHNlbGVjdG9ycyB8fCBbXTtcbiAgICAgIHNlbGVjdG9ycy5wdXNoKHNlbGVjdG9yKTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChzZWxlY3RvcnMgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiAnUGx1cmFsUmVhZGVyU2VsZWN0b3InLFxuICAgICAgc2VsZWN0b3JzOiBzZWxlY3RvcnNcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNlbGVjdG9yKGZyYWdtZW50LCBpdGVtKSB7XG4gIGlmIChpdGVtID09IG51bGwpIHtcbiAgICByZXR1cm4gaXRlbTtcbiAgfSBlbHNlIGlmIChmcmFnbWVudC5tZXRhZGF0YSAmJiBmcmFnbWVudC5tZXRhZGF0YS5wbHVyYWwgPT09IHRydWUpIHtcbiAgICAhQXJyYXkuaXNBcnJheShpdGVtKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuU2VsZWN0b3I6IEV4cGVjdGVkIHZhbHVlIGZvciBmcmFnbWVudCBgJXNgIHRvIGJlIGFuIGFycmF5LCBnb3QgYCVzYC4gJyArICdSZW1vdmUgYEByZWxheShwbHVyYWw6IHRydWUpYCBmcm9tIGZyYWdtZW50IGAlc2AgdG8gYWxsb3cgdGhlIHByb3AgdG8gYmUgYW4gb2JqZWN0LicsIGZyYWdtZW50Lm5hbWUsIEpTT04uc3RyaW5naWZ5KGl0ZW0pLCBmcmFnbWVudC5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGdldFBsdXJhbFNlbGVjdG9yKGZyYWdtZW50LCBpdGVtKTtcbiAgfSBlbHNlIHtcbiAgICAhIUFycmF5LmlzQXJyYXkoaXRlbSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVyblNlbGVjdG9yOiBFeHBlY3RlZCB2YWx1ZSBmb3IgZnJhZ21lbnQgYCVzYCB0byBiZSBhbiBvYmplY3QsIGdvdCBgJXNgLiAnICsgJ0FkZCBgQHJlbGF5KHBsdXJhbDogdHJ1ZSlgIHRvIGZyYWdtZW50IGAlc2AgdG8gYWxsb3cgdGhlIHByb3AgdG8gYmUgYW4gYXJyYXkgb2YgaXRlbXMuJywgZnJhZ21lbnQubmFtZSwgSlNPTi5zdHJpbmdpZnkoaXRlbSksIGZyYWdtZW50Lm5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZ2V0U2luZ3VsYXJTZWxlY3RvcihmcmFnbWVudCwgaXRlbSk7XG4gIH1cbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIEdpdmVuIGEgbWFwcGluZyBvZiBrZXlzIC0+IHJlc3VsdHMgYW5kIGEgbWFwcGluZyBvZiBrZXlzIC0+IGZyYWdtZW50cyxcbiAqIGV4dHJhY3RzIHRoZSBzZWxlY3RvcnMgZm9yIHRob3NlIGZyYWdtZW50cyBmcm9tIHRoZSByZXN1bHRzLlxuICpcbiAqIFRoZSBjYW5vbmljYWwgdXNlLWNhc2UgZm9yIHRoaXMgZnVuY3Rpb24gaXMgUmVhY3RSZWxheUZyYWdtZW50Q29udGFpbmVyLCB3aGljaFxuICogdXNlcyB0aGlzIGZ1bmN0aW9uIHRvIGNvbnZlcnQgKHByb3BzLCBmcmFnbWVudHMpIGludG8gc2VsZWN0b3JzIHNvIHRoYXQgaXRcbiAqIGNhbiByZWFkIHRoZSByZXN1bHRzIHRvIHBhc3MgdG8gdGhlIGlubmVyIGNvbXBvbmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFNlbGVjdG9yc0Zyb21PYmplY3QoZnJhZ21lbnRzLCBvYmplY3QpIHtcbiAgdmFyIHNlbGVjdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIF9rZXkgaW4gZnJhZ21lbnRzKSB7XG4gICAgaWYgKGZyYWdtZW50cy5oYXNPd25Qcm9wZXJ0eShfa2V5KSkge1xuICAgICAgdmFyIGZyYWdtZW50ID0gZnJhZ21lbnRzW19rZXldO1xuICAgICAgdmFyIGl0ZW0gPSBvYmplY3RbX2tleV07XG4gICAgICBzZWxlY3RvcnNbX2tleV0gPSBnZXRTZWxlY3RvcihmcmFnbWVudCwgaXRlbSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlbGVjdG9ycztcbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIEdpdmVuIGEgbWFwcGluZyBvZiBrZXlzIC0+IHJlc3VsdHMgYW5kIGEgbWFwcGluZyBvZiBrZXlzIC0+IGZyYWdtZW50cyxcbiAqIGV4dHJhY3RzIGEgbWFwcGluZyBvZiBrZXlzIC0+IGlkKHMpIG9mIHRoZSByZXN1bHRzLlxuICpcbiAqIFNpbWlsYXIgdG8gYGdldFNlbGVjdG9yc0Zyb21PYmplY3QoKWAsIHRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWZ1bCBpblxuICogZGV0ZXJtaW5pbmcgdGhlIFwiaWRlbnRpdHlcIiBvZiB0aGUgcHJvcHMgcGFzc2VkIHRvIGEgY29tcG9uZW50LlxuICovXG5cblxuZnVuY3Rpb24gZ2V0RGF0YUlEc0Zyb21PYmplY3QoZnJhZ21lbnRzLCBvYmplY3QpIHtcbiAgdmFyIGlkcyA9IHt9O1xuXG4gIGZvciAodmFyIF9rZXkyIGluIGZyYWdtZW50cykge1xuICAgIGlmIChmcmFnbWVudHMuaGFzT3duUHJvcGVydHkoX2tleTIpKSB7XG4gICAgICB2YXIgZnJhZ21lbnQgPSBmcmFnbWVudHNbX2tleTJdO1xuICAgICAgdmFyIGl0ZW0gPSBvYmplY3RbX2tleTJdO1xuICAgICAgaWRzW19rZXkyXSA9IGdldERhdGFJRHNGcm9tRnJhZ21lbnQoZnJhZ21lbnQsIGl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpZHM7XG59XG5cbmZ1bmN0aW9uIGdldERhdGFJRHNGcm9tRnJhZ21lbnQoZnJhZ21lbnQsIGl0ZW0pIHtcbiAgaWYgKGl0ZW0gPT0gbnVsbCkge1xuICAgIHJldHVybiBpdGVtO1xuICB9IGVsc2UgaWYgKGZyYWdtZW50Lm1ldGFkYXRhICYmIGZyYWdtZW50Lm1ldGFkYXRhLnBsdXJhbCA9PT0gdHJ1ZSkge1xuICAgICFBcnJheS5pc0FycmF5KGl0ZW0pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5TZWxlY3RvcjogRXhwZWN0ZWQgdmFsdWUgZm9yIGZyYWdtZW50IGAlc2AgdG8gYmUgYW4gYXJyYXksIGdvdCBgJXNgLiAnICsgJ1JlbW92ZSBgQHJlbGF5KHBsdXJhbDogdHJ1ZSlgIGZyb20gZnJhZ21lbnQgYCVzYCB0byBhbGxvdyB0aGUgcHJvcCB0byBiZSBhbiBvYmplY3QuJywgZnJhZ21lbnQubmFtZSwgSlNPTi5zdHJpbmdpZnkoaXRlbSksIGZyYWdtZW50Lm5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZ2V0RGF0YUlEcyhmcmFnbWVudCwgaXRlbSk7XG4gIH0gZWxzZSB7XG4gICAgISFBcnJheS5pc0FycmF5KGl0ZW0pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5GcmFnbWVudFNwZWNSZXNvbHZlcjogRXhwZWN0ZWQgdmFsdWUgZm9yIGZyYWdtZW50IGAlc2AgdG8gYmUgYW4gb2JqZWN0LCBnb3QgYCVzYC4gJyArICdBZGQgYEByZWxheShwbHVyYWw6IHRydWUpYCB0byBmcmFnbWVudCBgJXNgIHRvIGFsbG93IHRoZSBwcm9wIHRvIGJlIGFuIGFycmF5IG9mIGl0ZW1zLicsIGZyYWdtZW50Lm5hbWUsIEpTT04uc3RyaW5naWZ5KGl0ZW0pLCBmcmFnbWVudC5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGdldERhdGFJRChmcmFnbWVudCwgaXRlbSk7XG4gIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cblxuXG5mdW5jdGlvbiBnZXREYXRhSURzKGZyYWdtZW50LCBpdGVtcykge1xuICB2YXIgaWRzID0gbnVsbDtcbiAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIHZhciBpZCA9IGl0ZW0gIT0gbnVsbCA/IGdldERhdGFJRChmcmFnbWVudCwgaXRlbSkgOiBudWxsO1xuXG4gICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgIGlkcyA9IGlkcyB8fCBbXTtcbiAgICAgIGlkcy5wdXNoKGlkKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaWRzO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldERhdGFJRChmcmFnbWVudCwgaXRlbSkge1xuICAhKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KGl0ZW0pKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuU2VsZWN0b3I6IEV4cGVjdGVkIHZhbHVlIGZvciBmcmFnbWVudCBgJXNgIHRvIGJlIGFuIG9iamVjdCwgZ290ICcgKyAnYCVzYC4nLCBmcmFnbWVudC5uYW1lLCBKU09OLnN0cmluZ2lmeShpdGVtKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZGF0YUlEID0gaXRlbVtJRF9LRVldO1xuXG4gIGlmICh0eXBlb2YgZGF0YUlEID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBkYXRhSUQ7XG4gIH1cblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXlNb2Rlcm5TZWxlY3RvcjogRXhwZWN0ZWQgb2JqZWN0IHRvIGNvbnRhaW4gZGF0YSBmb3IgZnJhZ21lbnQgYCVzYCwgZ290ICcgKyAnYCVzYC4gTWFrZSBzdXJlIHRoYXQgdGhlIHBhcmVudCBvcGVyYXRpb24vZnJhZ21lbnQgaW5jbHVkZWQgZnJhZ21lbnQgJyArICdgLi4uJXNgIHdpdGhvdXQgYEByZWxheShtYXNrOiBmYWxzZSlgLCBvciBgbnVsbGAgaXMgcGFzc2VkIGFzIHRoZSBmcmFnbWVudCAnICsgXCJyZWZlcmVuY2UgZm9yIGAlc2AgaWYgaXQncyBjb25kaXRvbmFsbHkgaW5jbHVkZWQgYW5kIHRoZSBjb25kaXRpb24gaXNuJ3QgbWV0LlwiLCBmcmFnbWVudC5uYW1lLCBKU09OLnN0cmluZ2lmeShpdGVtKSwgZnJhZ21lbnQubmFtZSwgZnJhZ21lbnQubmFtZSkgOiB2b2lkIDA7XG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogR2l2ZW4gYSBtYXBwaW5nIG9mIGtleXMgLT4gcmVzdWx0cyBhbmQgYSBtYXBwaW5nIG9mIGtleXMgLT4gZnJhZ21lbnRzLFxuICogZXh0cmFjdHMgdGhlIG1lcmdlZCB2YXJpYWJsZXMgdGhhdCB3b3VsZCBiZSBpbiBzY29wZSBmb3IgdGhvc2VcbiAqIGZyYWdtZW50cy9yZXN1bHRzLlxuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWZ1bCBpbiBkZXRlcm1pbmcgd2hhdCB2YXJhaWJsZXMgd2VyZSB1c2VkIHRvIGZldGNoIHRoZSBkYXRhXG4gKiBmb3IgYSBSZWxheSBjb250YWluZXIsIGZvciBleGFtcGxlLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0VmFyaWFibGVzRnJvbU9iamVjdChmcmFnbWVudHMsIG9iamVjdCkge1xuICB2YXIgdmFyaWFibGVzID0ge307XG5cbiAgZm9yICh2YXIgX2tleTMgaW4gZnJhZ21lbnRzKSB7XG4gICAgaWYgKGZyYWdtZW50cy5oYXNPd25Qcm9wZXJ0eShfa2V5MykpIHtcbiAgICAgIHZhciBmcmFnbWVudCA9IGZyYWdtZW50c1tfa2V5M107XG4gICAgICB2YXIgaXRlbSA9IG9iamVjdFtfa2V5M107XG4gICAgICB2YXIgaXRlbVZhcmlhYmxlcyA9IGdldFZhcmlhYmxlc0Zyb21GcmFnbWVudChmcmFnbWVudCwgaXRlbSk7XG4gICAgICBPYmplY3QuYXNzaWduKHZhcmlhYmxlcywgaXRlbVZhcmlhYmxlcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhcmlhYmxlcztcbn1cblxuZnVuY3Rpb24gZ2V0VmFyaWFibGVzRnJvbUZyYWdtZW50KGZyYWdtZW50LCBpdGVtKSB7XG4gIHZhciBfZnJhZ21lbnQkbWV0YWRhdGE7XG5cbiAgaWYgKGl0ZW0gPT0gbnVsbCkge1xuICAgIHJldHVybiB7fTtcbiAgfSBlbHNlIGlmICgoKF9mcmFnbWVudCRtZXRhZGF0YSA9IGZyYWdtZW50Lm1ldGFkYXRhKSA9PT0gbnVsbCB8fCBfZnJhZ21lbnQkbWV0YWRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mcmFnbWVudCRtZXRhZGF0YS5wbHVyYWwpID09PSB0cnVlKSB7XG4gICAgIUFycmF5LmlzQXJyYXkoaXRlbSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVyblNlbGVjdG9yOiBFeHBlY3RlZCB2YWx1ZSBmb3IgZnJhZ21lbnQgYCVzYCB0byBiZSBhbiBhcnJheSwgZ290IGAlc2AuICcgKyAnUmVtb3ZlIGBAcmVsYXkocGx1cmFsOiB0cnVlKWAgZnJvbSBmcmFnbWVudCBgJXNgIHRvIGFsbG93IHRoZSBwcm9wIHRvIGJlIGFuIG9iamVjdC4nLCBmcmFnbWVudC5uYW1lLCBKU09OLnN0cmluZ2lmeShpdGVtKSwgZnJhZ21lbnQubmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBnZXRWYXJpYWJsZXNGcm9tUGx1cmFsRnJhZ21lbnQoZnJhZ21lbnQsIGl0ZW0pO1xuICB9IGVsc2Uge1xuICAgICEhQXJyYXkuaXNBcnJheShpdGVtKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuRnJhZ21lbnRTcGVjUmVzb2x2ZXI6IEV4cGVjdGVkIHZhbHVlIGZvciBmcmFnbWVudCBgJXNgIHRvIGJlIGFuIG9iamVjdCwgZ290IGAlc2AuICcgKyAnQWRkIGBAcmVsYXkocGx1cmFsOiB0cnVlKWAgdG8gZnJhZ21lbnQgYCVzYCB0byBhbGxvdyB0aGUgcHJvcCB0byBiZSBhbiBhcnJheSBvZiBpdGVtcy4nLCBmcmFnbWVudC5uYW1lLCBKU09OLnN0cmluZ2lmeShpdGVtKSwgZnJhZ21lbnQubmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBnZXRWYXJpYWJsZXNGcm9tU2luZ3VsYXJGcmFnbWVudChmcmFnbWVudCwgaXRlbSkgfHwge307XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VmFyaWFibGVzRnJvbVNpbmd1bGFyRnJhZ21lbnQoZnJhZ21lbnQsIGl0ZW0pIHtcbiAgdmFyIHNlbGVjdG9yID0gZ2V0U2luZ3VsYXJTZWxlY3RvcihmcmFnbWVudCwgaXRlbSk7XG5cbiAgaWYgKCFzZWxlY3Rvcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHNlbGVjdG9yLnZhcmlhYmxlcztcbn1cblxuZnVuY3Rpb24gZ2V0VmFyaWFibGVzRnJvbVBsdXJhbEZyYWdtZW50KGZyYWdtZW50LCBpdGVtcykge1xuICB2YXIgdmFyaWFibGVzID0ge307XG4gIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpaSkge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICB2YXIgaXRlbVZhcmlhYmxlcyA9IGdldFZhcmlhYmxlc0Zyb21TaW5ndWxhckZyYWdtZW50KGZyYWdtZW50LCB2YWx1ZSk7XG5cbiAgICAgIGlmIChpdGVtVmFyaWFibGVzICE9IG51bGwpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih2YXJpYWJsZXMsIGl0ZW1WYXJpYWJsZXMpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB2YXJpYWJsZXM7XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBEZXRlcm1pbmUgaWYgdHdvIHNlbGVjdG9ycyBhcmUgZXF1YWwgKHJlcHJlc2VudCB0aGUgc2FtZSBzZWxlY3Rpb24pLiBOb3RlXG4gKiB0aGF0IHRoaXMgZnVuY3Rpb24gcmV0dXJucyBgZmFsc2VgIHdoZW4gdGhlIHR3byBxdWVyaWVzL2ZyYWdtZW50cyBhcmVcbiAqIGRpZmZlcmVudCBvYmplY3RzLCBldmVuIGlmIHRoZXkgc2VsZWN0IHRoZSBzYW1lIGZpZWxkcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGFyZUVxdWFsU2VsZWN0b3JzKHRoaXNTZWxlY3RvciwgdGhhdFNlbGVjdG9yKSB7XG4gIHJldHVybiB0aGlzU2VsZWN0b3Iub3duZXIgPT09IHRoYXRTZWxlY3Rvci5vd25lciAmJiB0aGlzU2VsZWN0b3IuZGF0YUlEID09PSB0aGF0U2VsZWN0b3IuZGF0YUlEICYmIHRoaXNTZWxlY3Rvci5ub2RlID09PSB0aGF0U2VsZWN0b3Iubm9kZSAmJiBhcmVFcXVhbCh0aGlzU2VsZWN0b3IudmFyaWFibGVzLCB0aGF0U2VsZWN0b3IudmFyaWFibGVzKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhZGVyU2VsZWN0b3IoZnJhZ21lbnQsIGRhdGFJRCwgdmFyaWFibGVzLCByZXF1ZXN0KSB7XG4gIHZhciBpc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcbiAgcmV0dXJuIHtcbiAgICBraW5kOiAnU2luZ3VsYXJSZWFkZXJTZWxlY3RvcicsXG4gICAgZGF0YUlEOiBkYXRhSUQsXG4gICAgaXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudDogaXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudCxcbiAgICBub2RlOiBmcmFnbWVudCxcbiAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyxcbiAgICBvd25lcjogcmVxdWVzdFxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOb3JtYWxpemF0aW9uU2VsZWN0b3Iobm9kZSwgZGF0YUlELCB2YXJpYWJsZXMpIHtcbiAgcmV0dXJuIHtcbiAgICBkYXRhSUQ6IGRhdGFJRCxcbiAgICBub2RlOiBub2RlLFxuICAgIHZhcmlhYmxlczogdmFyaWFibGVzXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhcmVFcXVhbFNlbGVjdG9yczogYXJlRXF1YWxTZWxlY3RvcnMsXG4gIGNyZWF0ZVJlYWRlclNlbGVjdG9yOiBjcmVhdGVSZWFkZXJTZWxlY3RvcixcbiAgY3JlYXRlTm9ybWFsaXphdGlvblNlbGVjdG9yOiBjcmVhdGVOb3JtYWxpemF0aW9uU2VsZWN0b3IsXG4gIGdldERhdGFJRHNGcm9tRnJhZ21lbnQ6IGdldERhdGFJRHNGcm9tRnJhZ21lbnQsXG4gIGdldERhdGFJRHNGcm9tT2JqZWN0OiBnZXREYXRhSURzRnJvbU9iamVjdCxcbiAgZ2V0U2luZ3VsYXJTZWxlY3RvcjogZ2V0U2luZ3VsYXJTZWxlY3RvcixcbiAgZ2V0UGx1cmFsU2VsZWN0b3I6IGdldFBsdXJhbFNlbGVjdG9yLFxuICBnZXRTZWxlY3RvcjogZ2V0U2VsZWN0b3IsXG4gIGdldFNlbGVjdG9yc0Zyb21PYmplY3Q6IGdldFNlbGVjdG9yc0Zyb21PYmplY3QsXG4gIGdldFZhcmlhYmxlc0Zyb21TaW5ndWxhckZyYWdtZW50OiBnZXRWYXJpYWJsZXNGcm9tU2luZ3VsYXJGcmFnbWVudCxcbiAgZ2V0VmFyaWFibGVzRnJvbVBsdXJhbEZyYWdtZW50OiBnZXRWYXJpYWJsZXNGcm9tUGx1cmFsRnJhZ21lbnQsXG4gIGdldFZhcmlhYmxlc0Zyb21GcmFnbWVudDogZ2V0VmFyaWFibGVzRnJvbUZyYWdtZW50LFxuICBnZXRWYXJpYWJsZXNGcm9tT2JqZWN0OiBnZXRWYXJpYWJsZXNGcm9tT2JqZWN0XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlclwiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBEYXRhQ2hlY2tlciA9IHJlcXVpcmUoJy4vRGF0YUNoZWNrZXInKTtcblxudmFyIFJlbGF5RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUZlYXR1cmVGbGFncycpO1xuXG52YXIgUmVsYXlNb2Rlcm5SZWNvcmQgPSByZXF1aXJlKCcuL1JlbGF5TW9kZXJuUmVjb3JkJyk7XG5cbnZhciBSZWxheU9wdGltaXN0aWNSZWNvcmRTb3VyY2UgPSByZXF1aXJlKCcuL1JlbGF5T3B0aW1pc3RpY1JlY29yZFNvdXJjZScpO1xuXG52YXIgUmVsYXlSZWFkZXIgPSByZXF1aXJlKCcuL1JlbGF5UmVhZGVyJyk7XG5cbnZhciBSZWxheVJlZmVyZW5jZU1hcmtlciA9IHJlcXVpcmUoJy4vUmVsYXlSZWZlcmVuY2VNYXJrZXInKTtcblxudmFyIFJlbGF5U3RvcmVSZWFjdEZsaWdodFV0aWxzID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlUmVhY3RGbGlnaHRVdGlscycpO1xuXG52YXIgUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnMgPSByZXF1aXJlKCcuL1JlbGF5U3RvcmVTdWJzY3JpcHRpb25zJyk7XG5cbnZhciBSZWxheVN0b3JlU3Vic2NyaXB0aW9uc1VzaW5nTWFwQnlJRCA9IHJlcXVpcmUoJy4vUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnNVc2luZ01hcEJ5SUQnKTtcblxudmFyIFJlbGF5U3RvcmVVdGlscyA9IHJlcXVpcmUoJy4vUmVsYXlTdG9yZVV0aWxzJyk7XG5cbnZhciBkZWVwRnJlZXplID0gcmVxdWlyZSgnLi4vdXRpbC9kZWVwRnJlZXplJyk7XG5cbnZhciBkZWZhdWx0R2V0RGF0YUlEID0gcmVxdWlyZSgnLi9kZWZhdWx0R2V0RGF0YUlEJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHJlc29sdmVJbW1lZGlhdGUgPSByZXF1aXJlKCcuLi91dGlsL3Jlc29sdmVJbW1lZGlhdGUnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlVXRpbHMnKSxcbiAgICBST09UX0lEID0gX3JlcXVpcmUuUk9PVF9JRCxcbiAgICBST09UX1RZUEUgPSBfcmVxdWlyZS5ST09UX1RZUEU7XG5cbnZhciBERUZBVUxUX1JFTEVBU0VfQlVGRkVSX1NJWkUgPSAxMDtcbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBgU3RvcmVgIGludGVyZmFjZSBkZWZpbmVkIGluIGBSZWxheVN0b3JlVHlwZXNgLlxuICpcbiAqIE5vdGUgdGhhdCBhIFN0b3JlIHRha2VzIG93bmVyc2hpcCBvZiBhbGwgcmVjb3JkcyBwcm92aWRlZCB0byBpdDogb3RoZXJcbiAqIG9iamVjdHMgbWF5IGNvbnRpbnVlIHRvIGhvbGQgYSByZWZlcmVuY2UgdG8gc3VjaCByZWNvcmRzIGJ1dCBtYXkgbm90IG11dGF0ZVxuICogdGhlbS4gVGhlIHN0YXRpYyBSZWxheSBjb3JlIGlzIGFyY2hpdGVjdGVkIHRvIGF2b2lkIG11dGF0aW5nIHJlY29yZHMgdGhhdCBtYXkgaGF2ZSBiZWVuXG4gKiBwYXNzZWQgdG8gYSBzdG9yZTogb3BlcmF0aW9ucyB0aGF0IG11dGF0ZSByZWNvcmRzIHdpbGwgZWl0aGVyIGNyZWF0ZSBmcmVzaFxuICogcmVjb3JkcyBvciBjbG9uZSBleGlzdGluZyByZWNvcmRzIGFuZCBtb2RpZnkgdGhlIGNsb25lcy4gUmVjb3JkIGltbXV0YWJpbGl0eVxuICogaXMgYWxzbyBlbmZvcmNlZCBpbiBkZXZlbG9wbWVudCBtb2RlIGJ5IGZyZWV6aW5nIGFsbCByZWNvcmRzIHBhc3NlZCB0byBhIHN0b3JlLlxuICovXG5cbnZhciBSZWxheU1vZGVyblN0b3JlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVsYXlNb2Rlcm5TdG9yZShzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIF9vcHRpb25zJGdjUmVsZWFzZUJ1ZiwgX29wdGlvbnMkZ2NTY2hlZHVsZXIsIF9vcHRpb25zJGdldERhdGFJRCwgX29wdGlvbnMkbG9nLCBfb3B0aW9ucyRvcGVyYXRpb25Mb2E7XG5cbiAgICAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRoaXMsIFwiX2djU3RlcFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuX2djUnVuKSB7XG4gICAgICAgIGlmIChfdGhpcy5fZ2NSdW4ubmV4dCgpLmRvbmUpIHtcbiAgICAgICAgICBfdGhpcy5fZ2NSdW4gPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9nY1NjaGVkdWxlcihfdGhpcy5fZ2NTdGVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gUHJldmVudCBtdXRhdGlvbiBvZiBhIHJlY29yZCBmcm9tIG91dHNpZGUgdGhlIHN0b3JlLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHZhciBzdG9yZUlEcyA9IHNvdXJjZS5nZXRSZWNvcmRJRHMoKTtcblxuICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHN0b3JlSURzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICB2YXIgcmVjb3JkID0gc291cmNlLmdldChzdG9yZUlEc1tpaV0pO1xuXG4gICAgICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgICBSZWxheU1vZGVyblJlY29yZC5mcmVlemUocmVjb3JkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2N1cnJlbnRXcml0ZUVwb2NoID0gMDtcbiAgICB0aGlzLl9nY0hvbGRDb3VudGVyID0gMDtcbiAgICB0aGlzLl9nY1JlbGVhc2VCdWZmZXJTaXplID0gKF9vcHRpb25zJGdjUmVsZWFzZUJ1ZiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5nY1JlbGVhc2VCdWZmZXJTaXplKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRnY1JlbGVhc2VCdWYgIT09IHZvaWQgMCA/IF9vcHRpb25zJGdjUmVsZWFzZUJ1ZiA6IERFRkFVTFRfUkVMRUFTRV9CVUZGRVJfU0laRTtcbiAgICB0aGlzLl9nY1J1biA9IG51bGw7XG4gICAgdGhpcy5fZ2NTY2hlZHVsZXIgPSAoX29wdGlvbnMkZ2NTY2hlZHVsZXIgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZ2NTY2hlZHVsZXIpICE9PSBudWxsICYmIF9vcHRpb25zJGdjU2NoZWR1bGVyICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRnY1NjaGVkdWxlciA6IHJlc29sdmVJbW1lZGlhdGU7XG4gICAgdGhpcy5fZ2V0RGF0YUlEID0gKF9vcHRpb25zJGdldERhdGFJRCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5nZXREYXRhSUQpICE9PSBudWxsICYmIF9vcHRpb25zJGdldERhdGFJRCAhPT0gdm9pZCAwID8gX29wdGlvbnMkZ2V0RGF0YUlEIDogZGVmYXVsdEdldERhdGFJRDtcbiAgICB0aGlzLl9nbG9iYWxJbnZhbGlkYXRpb25FcG9jaCA9IG51bGw7XG4gICAgdGhpcy5faW52YWxpZGF0aW9uU3Vic2NyaXB0aW9ucyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLl9pbnZhbGlkYXRlZFJlY29yZElEcyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLl9fbG9nID0gKF9vcHRpb25zJGxvZyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5sb2cpICE9PSBudWxsICYmIF9vcHRpb25zJGxvZyAhPT0gdm9pZCAwID8gX29wdGlvbnMkbG9nIDogbnVsbDtcbiAgICB0aGlzLl9xdWVyeUNhY2hlRXhwaXJhdGlvblRpbWUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucXVlcnlDYWNoZUV4cGlyYXRpb25UaW1lO1xuICAgIHRoaXMuX29wZXJhdGlvbkxvYWRlciA9IChfb3B0aW9ucyRvcGVyYXRpb25Mb2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub3BlcmF0aW9uTG9hZGVyKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRvcGVyYXRpb25Mb2EgIT09IHZvaWQgMCA/IF9vcHRpb25zJG9wZXJhdGlvbkxvYSA6IG51bGw7XG4gICAgdGhpcy5fb3B0aW1pc3RpY1NvdXJjZSA9IG51bGw7XG4gICAgdGhpcy5fcmVjb3JkU291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX3JlbGVhc2VCdWZmZXIgPSBbXTtcbiAgICB0aGlzLl9yb290cyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9zaG91bGRTY2hlZHVsZUdDID0gZmFsc2U7XG4gICAgdGhpcy5fc3RvcmVTdWJzY3JpcHRpb25zID0gUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX1NUT1JFX1NVQlNDUklQVElPTlNfUkVGQUNUT1IgPT09IHRydWUgPyBuZXcgUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnNVc2luZ01hcEJ5SUQob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvZykgOiBuZXcgUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnMob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvZyk7XG4gICAgdGhpcy5fdXBkYXRlZFJlY29yZElEcyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLl9zaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50cyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50cztcbiAgICBpbml0aWFsaXplUmVjb3JkU291cmNlKHRoaXMuX3JlY29yZFNvdXJjZSk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVsYXlNb2Rlcm5TdG9yZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFNvdXJjZSA9IGZ1bmN0aW9uIGdldFNvdXJjZSgpIHtcbiAgICB2YXIgX3RoaXMkX29wdGltaXN0aWNTb3VyO1xuXG4gICAgcmV0dXJuIChfdGhpcyRfb3B0aW1pc3RpY1NvdXIgPSB0aGlzLl9vcHRpbWlzdGljU291cmNlKSAhPT0gbnVsbCAmJiBfdGhpcyRfb3B0aW1pc3RpY1NvdXIgIT09IHZvaWQgMCA/IF90aGlzJF9vcHRpbWlzdGljU291ciA6IHRoaXMuX3JlY29yZFNvdXJjZTtcbiAgfTtcblxuICBfcHJvdG8uY2hlY2sgPSBmdW5jdGlvbiBjaGVjayhvcGVyYXRpb24sIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkX29wdGltaXN0aWNTb3VyMiwgX29wdGlvbnMkdGFyZ2V0LCBfb3B0aW9ucyRoYW5kbGVycztcblxuICAgIHZhciBzZWxlY3RvciA9IG9wZXJhdGlvbi5yb290O1xuICAgIHZhciBzb3VyY2UgPSAoX3RoaXMkX29wdGltaXN0aWNTb3VyMiA9IHRoaXMuX29wdGltaXN0aWNTb3VyY2UpICE9PSBudWxsICYmIF90aGlzJF9vcHRpbWlzdGljU291cjIgIT09IHZvaWQgMCA/IF90aGlzJF9vcHRpbWlzdGljU291cjIgOiB0aGlzLl9yZWNvcmRTb3VyY2U7XG4gICAgdmFyIGdsb2JhbEludmFsaWRhdGlvbkVwb2NoID0gdGhpcy5fZ2xvYmFsSW52YWxpZGF0aW9uRXBvY2g7XG5cbiAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy5fcm9vdHMuZ2V0KG9wZXJhdGlvbi5yZXF1ZXN0LmlkZW50aWZpZXIpO1xuXG4gICAgdmFyIG9wZXJhdGlvbkxhc3RXcml0dGVuQXQgPSByb290RW50cnkgIT0gbnVsbCA/IHJvb3RFbnRyeS5lcG9jaCA6IG51bGw7IC8vIENoZWNrIGlmIHN0b3JlIGhhcyBiZWVuIGdsb2JhbGx5IGludmFsaWRhdGVkXG5cbiAgICBpZiAoZ2xvYmFsSW52YWxpZGF0aW9uRXBvY2ggIT0gbnVsbCkge1xuICAgICAgLy8gSWYgc28sIGNoZWNrIGlmIHRoZSBvcGVyYXRpb24gd2UncmUgY2hlY2tpbmcgd2FzIGxhc3Qgd3JpdHRlblxuICAgICAgLy8gYmVmb3JlIG9yIGFmdGVyIGludmFsaWRhdGlvbiBvY2N1cmVkLlxuICAgICAgaWYgKG9wZXJhdGlvbkxhc3RXcml0dGVuQXQgPT0gbnVsbCB8fCBvcGVyYXRpb25MYXN0V3JpdHRlbkF0IDw9IGdsb2JhbEludmFsaWRhdGlvbkVwb2NoKSB7XG4gICAgICAgIC8vIElmIHRoZSBvcGVyYXRpb24gd2FzIHdyaXR0ZW4gL2JlZm9yZS8gZ2xvYmFsIGludmFsaWRhdGlvbiBvY2N1cnJlZCxcbiAgICAgICAgLy8gb3IgaWYgdGhpcyBvcGVyYXRpb24gaGFzIG5ldmVyIGJlZW4gd3JpdHRlbiB0byB0aGUgc3RvcmUgYmVmb3JlLFxuICAgICAgICAvLyB3ZSB3aWxsIGNvbnNpZGVyIHRoZSBkYXRhIGZvciB0aGlzIG9wZXJhdGlvbiB0byBiZSBzdGFsZVxuICAgICAgICAvLyAoaS5lLiBub3QgcmVzb2x2YWJsZSBmcm9tIHRoZSBzdG9yZSkuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhdHVzOiAnc3RhbGUnXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldCA9IChfb3B0aW9ucyR0YXJnZXQgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudGFyZ2V0KSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR0YXJnZXQgIT09IHZvaWQgMCA/IF9vcHRpb25zJHRhcmdldCA6IHNvdXJjZTtcbiAgICB2YXIgaGFuZGxlcnMgPSAoX29wdGlvbnMkaGFuZGxlcnMgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGFuZGxlcnMpICE9PSBudWxsICYmIF9vcHRpb25zJGhhbmRsZXJzICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRoYW5kbGVycyA6IFtdO1xuICAgIHZhciBvcGVyYXRpb25BdmFpbGFiaWxpdHkgPSBEYXRhQ2hlY2tlci5jaGVjayhzb3VyY2UsIHRhcmdldCwgc2VsZWN0b3IsIGhhbmRsZXJzLCB0aGlzLl9vcGVyYXRpb25Mb2FkZXIsIHRoaXMuX2dldERhdGFJRCwgdGhpcy5fc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMpO1xuICAgIHJldHVybiBnZXRBdmFpbGFiaWxpdHlTdGF0dXMob3BlcmF0aW9uQXZhaWxhYmlsaXR5LCBvcGVyYXRpb25MYXN0V3JpdHRlbkF0LCByb290RW50cnkgPT09IG51bGwgfHwgcm9vdEVudHJ5ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByb290RW50cnkuZmV0Y2hUaW1lLCB0aGlzLl9xdWVyeUNhY2hlRXhwaXJhdGlvblRpbWUpO1xuICB9O1xuXG4gIF9wcm90by5yZXRhaW4gPSBmdW5jdGlvbiByZXRhaW4ob3BlcmF0aW9uKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgaWQgPSBvcGVyYXRpb24ucmVxdWVzdC5pZGVudGlmaWVyO1xuICAgIHZhciBkaXNwb3NlZCA9IGZhbHNlO1xuXG4gICAgdmFyIGRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgLy8gRW5zdXJlIGVhY2ggcmV0YWluIGNhbiBvbmx5IGRpc3Bvc2Ugb25jZVxuICAgICAgaWYgKGRpc3Bvc2VkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGlzcG9zZWQgPSB0cnVlOyAvLyBGb3IgRmxvdzogZ3VhcmQgYWdhaW5zdCB0aGUgZW50cnkgc29tZWhvdyBub3QgZXhpc3RpbmdcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IF90aGlzMi5fcm9vdHMuZ2V0KGlkKTtcblxuICAgICAgaWYgKHJvb3RFbnRyeSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRGVjcmVtZW50IHRoZSByZWYgY291bnQ6IGlmIGl0IGJlY29tZXMgemVybyBpdCBpcyBlbGlnaWJsZVxuICAgICAgLy8gZm9yIHJlbGVhc2UuXG5cblxuICAgICAgcm9vdEVudHJ5LnJlZkNvdW50LS07XG5cbiAgICAgIGlmIChyb290RW50cnkucmVmQ291bnQgPT09IDApIHtcbiAgICAgICAgdmFyIF9xdWVyeUNhY2hlRXhwaXJhdGlvblRpbWUgPSBfdGhpczIuX3F1ZXJ5Q2FjaGVFeHBpcmF0aW9uVGltZTtcblxuICAgICAgICB2YXIgcm9vdEVudHJ5SXNTdGFsZSA9IHJvb3RFbnRyeS5mZXRjaFRpbWUgIT0gbnVsbCAmJiBfcXVlcnlDYWNoZUV4cGlyYXRpb25UaW1lICE9IG51bGwgJiYgcm9vdEVudHJ5LmZldGNoVGltZSA8PSBEYXRlLm5vdygpIC0gX3F1ZXJ5Q2FjaGVFeHBpcmF0aW9uVGltZTtcblxuICAgICAgICBpZiAocm9vdEVudHJ5SXNTdGFsZSkge1xuICAgICAgICAgIF90aGlzMi5fcm9vdHNbXCJkZWxldGVcIl0oaWQpO1xuXG4gICAgICAgICAgX3RoaXMyLnNjaGVkdWxlR0MoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczIuX3JlbGVhc2VCdWZmZXIucHVzaChpZCk7IC8vIElmIHRoZSByZWxlYXNlIGJ1ZmZlciBpcyBub3cgb3Zlci1mdWxsLCByZW1vdmUgdGhlIGxlYXN0LXJlY2VudGx5XG4gICAgICAgICAgLy8gYWRkZWQgZW50cnkgYW5kIHNjaGVkdWxlIGEgR0MuIE5vdGUgdGhhdCBhbGwgaXRlbXMgaW4gdGhlIHJlbGVhc2VcbiAgICAgICAgICAvLyBidWZmZXIgaGF2ZSBhIHJlZkNvdW50IG9mIDAuXG5cblxuICAgICAgICAgIGlmIChfdGhpczIuX3JlbGVhc2VCdWZmZXIubGVuZ3RoID4gX3RoaXMyLl9nY1JlbGVhc2VCdWZmZXJTaXplKSB7XG4gICAgICAgICAgICB2YXIgX2lkID0gX3RoaXMyLl9yZWxlYXNlQnVmZmVyLnNoaWZ0KCk7XG5cbiAgICAgICAgICAgIF90aGlzMi5fcm9vdHNbXCJkZWxldGVcIl0oX2lkKTtcblxuICAgICAgICAgICAgX3RoaXMyLnNjaGVkdWxlR0MoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMuX3Jvb3RzLmdldChpZCk7XG5cbiAgICBpZiAocm9vdEVudHJ5ICE9IG51bGwpIHtcbiAgICAgIGlmIChyb290RW50cnkucmVmQ291bnQgPT09IDApIHtcbiAgICAgICAgLy8gVGhpcyBlbnRyeSBzaG91bGQgYmUgaW4gdGhlIHJlbGVhc2UgYnVmZmVyLCBidXQgaXQgbm8gbG9uZ2VyIGJlbG9uZ3NcbiAgICAgICAgLy8gdGhlcmUgc2luY2UgaXQncyByZXRhaW5lZC4gUmVtb3ZlIGl0IHRvIG1haW50YWluIHRoZSBpbnZhcmlhbnQgdGhhdFxuICAgICAgICAvLyBhbGwgcmVsZWFzZSBidWZmZXIgZW50cmllcyBoYXZlIGEgcmVmQ291bnQgb2YgMC5cbiAgICAgICAgdGhpcy5fcmVsZWFzZUJ1ZmZlciA9IHRoaXMuX3JlbGVhc2VCdWZmZXIuZmlsdGVyKGZ1bmN0aW9uIChfaWQpIHtcbiAgICAgICAgICByZXR1cm4gX2lkICE9PSBpZDtcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIElmIHdlJ3ZlIHByZXZpb3VzbHkgcmV0YWluZWQgdGhpcyBvcGVyYXRpb24sIGluY3JlbWVudCB0aGUgcmVmQ291bnRcblxuXG4gICAgICByb290RW50cnkucmVmQ291bnQgKz0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbnRyeSBmb3IgdGhlIG9wZXJhdGlvblxuICAgICAgdGhpcy5fcm9vdHMuc2V0KGlkLCB7XG4gICAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgICAgICByZWZDb3VudDogMSxcbiAgICAgICAgZXBvY2g6IG51bGwsXG4gICAgICAgIGZldGNoVGltZTogbnVsbFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3Bvc2U6IGRpc3Bvc2VcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5sb29rdXAgPSBmdW5jdGlvbiBsb29rdXAoc2VsZWN0b3IpIHtcbiAgICB2YXIgc291cmNlID0gdGhpcy5nZXRTb3VyY2UoKTtcbiAgICB2YXIgc25hcHNob3QgPSBSZWxheVJlYWRlci5yZWFkKHNvdXJjZSwgc2VsZWN0b3IpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgZGVlcEZyZWV6ZShzbmFwc2hvdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNuYXBzaG90O1xuICB9IC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGEgbGlzdCBvZiB1cGRhdGVkIG93bmVycyBmcm9tIHRoZSBzdWJzY3JpcHRpb25zXG4gIDtcblxuICBfcHJvdG8ubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5KHNvdXJjZU9wZXJhdGlvbiwgaW52YWxpZGF0ZVN0b3JlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgbG9nID0gdGhpcy5fX2xvZztcblxuICAgIGlmIChsb2cgIT0gbnVsbCkge1xuICAgICAgbG9nKHtcbiAgICAgICAgbmFtZTogJ3N0b3JlLm5vdGlmeS5zdGFydCcsXG4gICAgICAgIHNvdXJjZU9wZXJhdGlvbjogc291cmNlT3BlcmF0aW9uXG4gICAgICB9KTtcbiAgICB9IC8vIEluY3JlbWVudCB0aGUgY3VycmVudCB3cml0ZSB3aGVuIG5vdGlmeWluZyBhZnRlciBleGVjdXRpbmdcbiAgICAvLyBhIHNldCBvZiBjaGFuZ2VzIHRvIHRoZSBzdG9yZS5cblxuXG4gICAgdGhpcy5fY3VycmVudFdyaXRlRXBvY2grKztcblxuICAgIGlmIChpbnZhbGlkYXRlU3RvcmUgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuX2dsb2JhbEludmFsaWRhdGlvbkVwb2NoID0gdGhpcy5fY3VycmVudFdyaXRlRXBvY2g7XG4gICAgfVxuXG4gICAgdmFyIHNvdXJjZSA9IHRoaXMuZ2V0U291cmNlKCk7XG4gICAgdmFyIHVwZGF0ZWRPd25lcnMgPSBbXTtcblxuICAgIHRoaXMuX3N0b3JlU3Vic2NyaXB0aW9ucy51cGRhdGVTdWJzY3JpcHRpb25zKHNvdXJjZSwgdGhpcy5fdXBkYXRlZFJlY29yZElEcywgdXBkYXRlZE93bmVycywgc291cmNlT3BlcmF0aW9uKTtcblxuICAgIHRoaXMuX2ludmFsaWRhdGlvblN1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICBfdGhpczMuX3VwZGF0ZUludmFsaWRhdGlvblN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24sIGludmFsaWRhdGVTdG9yZSA9PT0gdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpZiAobG9nICE9IG51bGwpIHtcbiAgICAgIGxvZyh7XG4gICAgICAgIG5hbWU6ICdzdG9yZS5ub3RpZnkuY29tcGxldGUnLFxuICAgICAgICBzb3VyY2VPcGVyYXRpb246IHNvdXJjZU9wZXJhdGlvbixcbiAgICAgICAgdXBkYXRlZFJlY29yZElEczogdGhpcy5fdXBkYXRlZFJlY29yZElEcyxcbiAgICAgICAgaW52YWxpZGF0ZWRSZWNvcmRJRHM6IHRoaXMuX2ludmFsaWRhdGVkUmVjb3JkSURzXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVkUmVjb3JkSURzLmNsZWFyKCk7XG5cbiAgICB0aGlzLl9pbnZhbGlkYXRlZFJlY29yZElEcy5jbGVhcigpOyAvLyBJZiBhIHNvdXJjZSBvcGVyYXRpb24gd2FzIHByb3ZpZGVkIChpbmRpY2F0aW5nIHRoZSBvcGVyYXRpb25cbiAgICAvLyB0aGF0IHByb2R1Y2VkIHRoaXMgdXBkYXRlIHRvIHRoZSBzdG9yZSksIHJlY29yZCB0aGUgY3VycmVudCBlcG9jaFxuICAgIC8vIGF0IHdoaWNoIHRoaXMgb3BlcmF0aW9uIHdhcyB3cml0dGVuLlxuXG5cbiAgICBpZiAoc291cmNlT3BlcmF0aW9uICE9IG51bGwpIHtcbiAgICAgIC8vIFdlIG9ubHkgdHJhY2sgdGhlIGVwb2NoIGF0IHdoaWNoIHRoZSBvcGVyYXRpb24gd2FzIHdyaXR0ZW4gaWZcbiAgICAgIC8vIGl0IHdhcyBwcmV2aW91c2x5IHJldGFpbmVkLCB0byBrZWVwIHRoZSBzaXplIG9mIG91ciBvcGVyYXRpb25cbiAgICAgIC8vIGVwb2NoIG1hcCBib3VuZGVkLiBJZiBhIHF1ZXJ5IHdhc24ndCByZXRhaW5lZCwgd2UgYXNzdW1lIGl0IGNhblxuICAgICAgLy8gbWF5IGJlIGRlbGV0ZWQgYXQgYW55IG1vbWVudCBhbmQgdGh1cyBpcyBub3QgcmVsZXZhbnQgZm9yIHVzIHRvIHRyYWNrXG4gICAgICAvLyBmb3IgdGhlIHB1cnBvc2VzIG9mIGludmFsaWRhdGlvbi5cbiAgICAgIHZhciBpZCA9IHNvdXJjZU9wZXJhdGlvbi5yZXF1ZXN0LmlkZW50aWZpZXI7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLl9yb290cy5nZXQoaWQpO1xuXG4gICAgICBpZiAocm9vdEVudHJ5ICE9IG51bGwpIHtcbiAgICAgICAgcm9vdEVudHJ5LmVwb2NoID0gdGhpcy5fY3VycmVudFdyaXRlRXBvY2g7XG4gICAgICAgIHJvb3RFbnRyeS5mZXRjaFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgfSBlbHNlIGlmIChzb3VyY2VPcGVyYXRpb24ucmVxdWVzdC5ub2RlLnBhcmFtcy5vcGVyYXRpb25LaW5kID09PSAncXVlcnknICYmIHRoaXMuX2djUmVsZWFzZUJ1ZmZlclNpemUgPiAwICYmIHRoaXMuX3JlbGVhc2VCdWZmZXIubGVuZ3RoIDwgdGhpcy5fZ2NSZWxlYXNlQnVmZmVyU2l6ZSkge1xuICAgICAgICAvLyBUaGUgb3BlcmF0aW9uIGlzbid0IHJldGFpbmVkIGJ1dCB0aGVyZSBpcyBzcGFjZSBpbiB0aGUgcmVsZWFzZSBidWZmZXI6XG4gICAgICAgIC8vIHRlbXBvcmFyaWx5IHRyYWNrIHRoaXMgb3BlcmF0aW9uIGluIGNhc2UgdGhlIGRhdGEgY2FuIGJlIHJldXNlZCBzb29uLlxuICAgICAgICB2YXIgdGVtcG9yYXJ5Um9vdEVudHJ5ID0ge1xuICAgICAgICAgIG9wZXJhdGlvbjogc291cmNlT3BlcmF0aW9uLFxuICAgICAgICAgIHJlZkNvdW50OiAwLFxuICAgICAgICAgIGVwb2NoOiB0aGlzLl9jdXJyZW50V3JpdGVFcG9jaCxcbiAgICAgICAgICBmZXRjaFRpbWU6IERhdGUubm93KClcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9yZWxlYXNlQnVmZmVyLnB1c2goaWQpO1xuXG4gICAgICAgIHRoaXMuX3Jvb3RzLnNldChpZCwgdGVtcG9yYXJ5Um9vdEVudHJ5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlZE93bmVycztcbiAgfTtcblxuICBfcHJvdG8ucHVibGlzaCA9IGZ1bmN0aW9uIHB1Ymxpc2goc291cmNlLCBpZHNNYXJrZWRGb3JJbnZhbGlkYXRpb24pIHtcbiAgICB2YXIgX3RoaXMkX29wdGltaXN0aWNTb3VyMztcblxuICAgIHZhciB0YXJnZXQgPSAoX3RoaXMkX29wdGltaXN0aWNTb3VyMyA9IHRoaXMuX29wdGltaXN0aWNTb3VyY2UpICE9PSBudWxsICYmIF90aGlzJF9vcHRpbWlzdGljU291cjMgIT09IHZvaWQgMCA/IF90aGlzJF9vcHRpbWlzdGljU291cjMgOiB0aGlzLl9yZWNvcmRTb3VyY2U7XG4gICAgdXBkYXRlVGFyZ2V0RnJvbVNvdXJjZSh0YXJnZXQsIHNvdXJjZSwgLy8gV2UgaW5jcmVtZW50IHRoZSBjdXJyZW50IGVwb2NoIGF0IHRoZSBlbmQgb2YgdGhlIHNldCBvZiB1cGRhdGVzLFxuICAgIC8vIGluIG5vdGlmeSgpLiBIZXJlLCB3ZSBwYXNzIHdoYXQgd2lsbCBiZSB0aGUgaW5jcmVtZW50ZWQgdmFsdWUgb2ZcbiAgICAvLyB0aGUgZXBvY2ggdG8gdXNlIHRvIHdyaXRlIHRvIGludmFsaWRhdGVkIHJlY29yZHMuXG4gICAgdGhpcy5fY3VycmVudFdyaXRlRXBvY2ggKyAxLCBpZHNNYXJrZWRGb3JJbnZhbGlkYXRpb24sIHRoaXMuX3VwZGF0ZWRSZWNvcmRJRHMsIHRoaXMuX2ludmFsaWRhdGVkUmVjb3JkSURzKTsgLy8gTk9URTogbG9nICphZnRlciogcHJvY2Vzc2luZyB0aGUgc291cmNlIHNvIHRoYXQgZXZlbiBpZiBhIGJhZCBsb2cgZnVuY3Rpb25cbiAgICAvLyBtdXRhdGVzIHRoZSBzb3VyY2UsIGl0IGRvZXNuJ3QgYWZmZWN0IFJlbGF5IHByb2Nlc3Npbmcgb2YgaXQuXG5cbiAgICB2YXIgbG9nID0gdGhpcy5fX2xvZztcblxuICAgIGlmIChsb2cgIT0gbnVsbCkge1xuICAgICAgbG9nKHtcbiAgICAgICAgbmFtZTogJ3N0b3JlLnB1Ymxpc2gnLFxuICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgb3B0aW1pc3RpYzogdGFyZ2V0ID09PSB0aGlzLl9vcHRpbWlzdGljU291cmNlXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShzbmFwc2hvdCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5fc3RvcmVTdWJzY3JpcHRpb25zLnN1YnNjcmliZShzbmFwc2hvdCwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5ob2xkR0MgPSBmdW5jdGlvbiBob2xkR0MoKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5fZ2NSdW4pIHtcbiAgICAgIHRoaXMuX2djUnVuID0gbnVsbDtcbiAgICAgIHRoaXMuX3Nob3VsZFNjaGVkdWxlR0MgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX2djSG9sZENvdW50ZXIrKztcblxuICAgIHZhciBkaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIGlmIChfdGhpczQuX2djSG9sZENvdW50ZXIgPiAwKSB7XG4gICAgICAgIF90aGlzNC5fZ2NIb2xkQ291bnRlci0tO1xuXG4gICAgICAgIGlmIChfdGhpczQuX2djSG9sZENvdW50ZXIgPT09IDAgJiYgX3RoaXM0Ll9zaG91bGRTY2hlZHVsZUdDKSB7XG4gICAgICAgICAgX3RoaXM0LnNjaGVkdWxlR0MoKTtcblxuICAgICAgICAgIF90aGlzNC5fc2hvdWxkU2NoZWR1bGVHQyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICBkaXNwb3NlOiBkaXNwb3NlXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8udG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiAnUmVsYXlNb2Rlcm5TdG9yZSgpJztcbiAgfSAvLyBJbnRlcm5hbCBBUElcbiAgO1xuXG4gIF9wcm90by5fX2dldFVwZGF0ZWRSZWNvcmRJRHMgPSBmdW5jdGlvbiBfX2dldFVwZGF0ZWRSZWNvcmRJRHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZWRSZWNvcmRJRHM7XG4gIH07XG5cbiAgX3Byb3RvLmxvb2t1cEludmFsaWRhdGlvblN0YXRlID0gZnVuY3Rpb24gbG9va3VwSW52YWxpZGF0aW9uU3RhdGUoZGF0YUlEcykge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgdmFyIGludmFsaWRhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgZGF0YUlEcy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhSUQpIHtcbiAgICAgIHZhciBfUmVsYXlNb2Rlcm5SZWNvcmQkZ2U7XG5cbiAgICAgIHZhciByZWNvcmQgPSBfdGhpczUuZ2V0U291cmNlKCkuZ2V0KGRhdGFJRCk7XG5cbiAgICAgIGludmFsaWRhdGlvbnMuc2V0KGRhdGFJRCwgKF9SZWxheU1vZGVyblJlY29yZCRnZSA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldEludmFsaWRhdGlvbkVwb2NoKHJlY29yZCkpICE9PSBudWxsICYmIF9SZWxheU1vZGVyblJlY29yZCRnZSAhPT0gdm9pZCAwID8gX1JlbGF5TW9kZXJuUmVjb3JkJGdlIDogbnVsbCk7XG4gICAgfSk7XG4gICAgaW52YWxpZGF0aW9ucy5zZXQoJ2dsb2JhbCcsIHRoaXMuX2dsb2JhbEludmFsaWRhdGlvbkVwb2NoKTtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YUlEczogZGF0YUlEcyxcbiAgICAgIGludmFsaWRhdGlvbnM6IGludmFsaWRhdGlvbnNcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5jaGVja0ludmFsaWRhdGlvblN0YXRlID0gZnVuY3Rpb24gY2hlY2tJbnZhbGlkYXRpb25TdGF0ZShwcmV2SW52YWxpZGF0aW9uU3RhdGUpIHtcbiAgICB2YXIgbGF0ZXN0SW52YWxpZGF0aW9uU3RhdGUgPSB0aGlzLmxvb2t1cEludmFsaWRhdGlvblN0YXRlKHByZXZJbnZhbGlkYXRpb25TdGF0ZS5kYXRhSURzKTtcbiAgICB2YXIgY3VycmVudEludmFsaWRhdGlvbnMgPSBsYXRlc3RJbnZhbGlkYXRpb25TdGF0ZS5pbnZhbGlkYXRpb25zO1xuICAgIHZhciBwcmV2SW52YWxpZGF0aW9ucyA9IHByZXZJbnZhbGlkYXRpb25TdGF0ZS5pbnZhbGlkYXRpb25zOyAvLyBDaGVjayBpZiBnbG9iYWwgaW52YWxpZGF0aW9uIGhhcyBjaGFuZ2VkXG5cbiAgICBpZiAoY3VycmVudEludmFsaWRhdGlvbnMuZ2V0KCdnbG9iYWwnKSAhPT0gcHJldkludmFsaWRhdGlvbnMuZ2V0KCdnbG9iYWwnKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSAvLyBDaGVjayBpZiB0aGUgaW52YWxpZGF0aW9uIHN0YXRlIGZvciBhbnkgb2YgdGhlIGlkcyBoYXMgY2hhbmdlZC5cblxuXG4gICAgdmFyIF9pdGVyYXRvciA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShwcmV2SW52YWxpZGF0aW9uU3RhdGUuZGF0YUlEcyksXG4gICAgICAgIF9zdGVwO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBkYXRhSUQgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICBpZiAoY3VycmVudEludmFsaWRhdGlvbnMuZ2V0KGRhdGFJRCkgIT09IHByZXZJbnZhbGlkYXRpb25zLmdldChkYXRhSUQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by5zdWJzY3JpYmVUb0ludmFsaWRhdGlvblN0YXRlID0gZnVuY3Rpb24gc3Vic2NyaWJlVG9JbnZhbGlkYXRpb25TdGF0ZShpbnZhbGlkYXRpb25TdGF0ZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIHZhciBzdWJzY3JpcHRpb24gPSB7XG4gICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICBpbnZhbGlkYXRpb25TdGF0ZTogaW52YWxpZGF0aW9uU3RhdGVcbiAgICB9O1xuXG4gICAgdmFyIGRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgX3RoaXM2Ll9pbnZhbGlkYXRpb25TdWJzY3JpcHRpb25zW1wiZGVsZXRlXCJdKHN1YnNjcmlwdGlvbik7XG4gICAgfTtcblxuICAgIHRoaXMuX2ludmFsaWRhdGlvblN1YnNjcmlwdGlvbnMuYWRkKHN1YnNjcmlwdGlvbik7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGlzcG9zZTogZGlzcG9zZVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLl91cGRhdGVJbnZhbGlkYXRpb25TdWJzY3JpcHRpb24gPSBmdW5jdGlvbiBfdXBkYXRlSW52YWxpZGF0aW9uU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbiwgaW52YWxpZGF0ZWRTdG9yZSkge1xuICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgdmFyIGNhbGxiYWNrID0gc3Vic2NyaXB0aW9uLmNhbGxiYWNrLFxuICAgICAgICBpbnZhbGlkYXRpb25TdGF0ZSA9IHN1YnNjcmlwdGlvbi5pbnZhbGlkYXRpb25TdGF0ZTtcbiAgICB2YXIgZGF0YUlEcyA9IGludmFsaWRhdGlvblN0YXRlLmRhdGFJRHM7XG4gICAgdmFyIGlzU3Vic2NyaWJlZFRvSW52YWxpZGF0ZWRJRHMgPSBpbnZhbGlkYXRlZFN0b3JlIHx8IGRhdGFJRHMuc29tZShmdW5jdGlvbiAoZGF0YUlEKSB7XG4gICAgICByZXR1cm4gX3RoaXM3Ll9pbnZhbGlkYXRlZFJlY29yZElEcy5oYXMoZGF0YUlEKTtcbiAgICB9KTtcblxuICAgIGlmICghaXNTdWJzY3JpYmVkVG9JbnZhbGlkYXRlZElEcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLnNuYXBzaG90ID0gZnVuY3Rpb24gc25hcHNob3QoKSB7XG4gICAgISh0aGlzLl9vcHRpbWlzdGljU291cmNlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5TdG9yZTogVW5leHBlY3RlZCBjYWxsIHRvIHNuYXBzaG90KCkgd2hpbGUgYSBwcmV2aW91cyAnICsgJ3NuYXBzaG90IGV4aXN0cy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGxvZyA9IHRoaXMuX19sb2c7XG5cbiAgICBpZiAobG9nICE9IG51bGwpIHtcbiAgICAgIGxvZyh7XG4gICAgICAgIG5hbWU6ICdzdG9yZS5zbmFwc2hvdCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuX3N0b3JlU3Vic2NyaXB0aW9ucy5zbmFwc2hvdFN1YnNjcmlwdGlvbnModGhpcy5nZXRTb3VyY2UoKSk7XG5cbiAgICBpZiAodGhpcy5fZ2NSdW4pIHtcbiAgICAgIHRoaXMuX2djUnVuID0gbnVsbDtcbiAgICAgIHRoaXMuX3Nob3VsZFNjaGVkdWxlR0MgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX29wdGltaXN0aWNTb3VyY2UgPSBSZWxheU9wdGltaXN0aWNSZWNvcmRTb3VyY2UuY3JlYXRlKHRoaXMuZ2V0U291cmNlKCkpO1xuICB9O1xuXG4gIF9wcm90by5yZXN0b3JlID0gZnVuY3Rpb24gcmVzdG9yZSgpIHtcbiAgICAhKHRoaXMuX29wdGltaXN0aWNTb3VyY2UgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVyblN0b3JlOiBVbmV4cGVjdGVkIGNhbGwgdG8gcmVzdG9yZSgpLCBleHBlY3RlZCBhIHNuYXBzaG90ICcgKyAndG8gZXhpc3QgKG1ha2Ugc3VyZSB0byBjYWxsIHNuYXBzaG90KCkpLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgbG9nID0gdGhpcy5fX2xvZztcblxuICAgIGlmIChsb2cgIT0gbnVsbCkge1xuICAgICAgbG9nKHtcbiAgICAgICAgbmFtZTogJ3N0b3JlLnJlc3RvcmUnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLl9vcHRpbWlzdGljU291cmNlID0gbnVsbDtcblxuICAgIGlmICh0aGlzLl9zaG91bGRTY2hlZHVsZUdDKSB7XG4gICAgICB0aGlzLnNjaGVkdWxlR0MoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdG9yZVN1YnNjcmlwdGlvbnMucmVzdG9yZVN1YnNjcmlwdGlvbnMoKTtcbiAgfTtcblxuICBfcHJvdG8uc2NoZWR1bGVHQyA9IGZ1bmN0aW9uIHNjaGVkdWxlR0MoKSB7XG4gICAgaWYgKHRoaXMuX2djSG9sZENvdW50ZXIgPiAwKSB7XG4gICAgICB0aGlzLl9zaG91bGRTY2hlZHVsZUdDID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZ2NSdW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9nY1J1biA9IHRoaXMuX2NvbGxlY3QoKTtcblxuICAgIHRoaXMuX2djU2NoZWR1bGVyKHRoaXMuX2djU3RlcCk7XG4gIH1cbiAgLyoqXG4gICAqIFJ1biBhIGZ1bGwgR0Mgc3luY2hyb25vdXNseS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uX19nYyA9IGZ1bmN0aW9uIF9fZ2MoKSB7XG4gICAgLy8gRG9uJ3QgcnVuIEdDIHdoaWxlIHRoZXJlIGFyZSBvcHRpbWlzdGljIHVwZGF0ZXMgYXBwbGllZFxuICAgIGlmICh0aGlzLl9vcHRpbWlzdGljU291cmNlICE9IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZ2NSdW4gPSB0aGlzLl9jb2xsZWN0KCk7XG5cbiAgICB3aGlsZSAoIWdjUnVuLm5leHQoKS5kb25lKSB7fVxuICB9O1xuXG4gIF9wcm90by5fY29sbGVjdCA9IGZ1bmN0aW9uKiBfY29sbGVjdCgpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1sYWJlbHMgKi9cbiAgICB0b3A6IHdoaWxlICh0cnVlKSB7XG4gICAgICB2YXIgc3RhcnRFcG9jaCA9IHRoaXMuX2N1cnJlbnRXcml0ZUVwb2NoO1xuICAgICAgdmFyIHJlZmVyZW5jZXMgPSBuZXcgU2V0KCk7IC8vIE1hcmsgYWxsIHJlY29yZHMgdGhhdCBhcmUgdHJhdmVyc2FibGUgZnJvbSBhIHJvb3RcblxuICAgICAgdmFyIF9pdGVyYXRvcjIgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkodGhpcy5fcm9vdHMudmFsdWVzKCkpLFxuICAgICAgICAgIF9zdGVwMjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgb3BlcmF0aW9uID0gX3N0ZXAyLnZhbHVlLm9wZXJhdGlvbjtcbiAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBvcGVyYXRpb24ucm9vdDtcbiAgICAgICAgICBSZWxheVJlZmVyZW5jZU1hcmtlci5tYXJrKHRoaXMuX3JlY29yZFNvdXJjZSwgc2VsZWN0b3IsIHJlZmVyZW5jZXMsIHRoaXMuX29wZXJhdGlvbkxvYWRlciwgdGhpcy5fc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMpOyAvLyBZaWVsZCBmb3Igb3RoZXIgd29yayBhZnRlciBlYWNoIG9wZXJhdGlvblxuXG4gICAgICAgICAgeWllbGQ7IC8vIElmIHRoZSBzdG9yZSB3YXMgdXBkYXRlZCwgcmVzdGFydFxuXG4gICAgICAgICAgaWYgKHN0YXJ0RXBvY2ggIT09IHRoaXMuX2N1cnJlbnRXcml0ZUVwb2NoKSB7XG4gICAgICAgICAgICBjb250aW51ZSB0b3A7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yMi5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IyLmYoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxvZyA9IHRoaXMuX19sb2c7XG5cbiAgICAgIGlmIChsb2cgIT0gbnVsbCkge1xuICAgICAgICBsb2coe1xuICAgICAgICAgIG5hbWU6ICdzdG9yZS5nYycsXG4gICAgICAgICAgcmVmZXJlbmNlczogcmVmZXJlbmNlc1xuICAgICAgICB9KTtcbiAgICAgIH0gLy8gU3dlZXAgcmVjb3JkcyB3aXRob3V0IHJlZmVyZW5jZXNcblxuXG4gICAgICBpZiAocmVmZXJlbmNlcy5zaXplID09PSAwKSB7XG4gICAgICAgIC8vIFNob3J0LWNpcmN1aXQgaWYgKm5vdGhpbmcqIGlzIHJlZmVyZW5jZWRcbiAgICAgICAgdGhpcy5fcmVjb3JkU291cmNlLmNsZWFyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFdmljdCBhbnkgdW5yZWZlcmVuY2VkIG5vZGVzXG4gICAgICAgIHZhciBzdG9yZUlEcyA9IHRoaXMuX3JlY29yZFNvdXJjZS5nZXRSZWNvcmRJRHMoKTtcblxuICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgc3RvcmVJRHMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgICAgdmFyIGRhdGFJRCA9IHN0b3JlSURzW2lpXTtcblxuICAgICAgICAgIGlmICghcmVmZXJlbmNlcy5oYXMoZGF0YUlEKSkge1xuICAgICAgICAgICAgdGhpcy5fcmVjb3JkU291cmNlLnJlbW92ZShkYXRhSUQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBSZWxheU1vZGVyblN0b3JlO1xufSgpO1xuXG5mdW5jdGlvbiBpbml0aWFsaXplUmVjb3JkU291cmNlKHRhcmdldCkge1xuICBpZiAoIXRhcmdldC5oYXMoUk9PVF9JRCkpIHtcbiAgICB2YXIgcm9vdFJlY29yZCA9IFJlbGF5TW9kZXJuUmVjb3JkLmNyZWF0ZShST09UX0lELCBST09UX1RZUEUpO1xuICAgIHRhcmdldC5zZXQoUk9PVF9JRCwgcm9vdFJlY29yZCk7XG4gIH1cbn1cbi8qKlxuICogVXBkYXRlcyB0aGUgdGFyZ2V0IHdpdGggaW5mb3JtYXRpb24gZnJvbSBzb3VyY2UsIGFsc28gdXBkYXRpbmcgYSBtYXBwaW5nIG9mXG4gKiB3aGljaCByZWNvcmRzIGluIHRoZSB0YXJnZXQgd2VyZSBjaGFuZ2VkIGFzIGEgcmVzdWx0LlxuICogQWRkaXRpb25hbGx5LCB3aWxsIG1hcmsgcmVjb3JkcyBhcyBpbnZhbGlkYXRlZCBhdCB0aGUgY3VycmVudCB3cml0ZSBlcG9jaFxuICogZ2l2ZW4gdGhlIHNldCBvZiByZWNvcmQgaWRzIG1hcmtlZCBhcyBzdGFsZSBpbiB0aGlzIHVwZGF0ZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVwZGF0ZVRhcmdldEZyb21Tb3VyY2UodGFyZ2V0LCBzb3VyY2UsIGN1cnJlbnRXcml0ZUVwb2NoLCBpZHNNYXJrZWRGb3JJbnZhbGlkYXRpb24sIHVwZGF0ZWRSZWNvcmRJRHMsIGludmFsaWRhdGVkUmVjb3JkSURzKSB7XG4gIC8vIEZpcnN0LCB1cGRhdGUgYW55IHJlY29yZHMgdGhhdCB3ZXJlIG1hcmtlZCBmb3IgaW52YWxpZGF0aW9uLlxuICAvLyBGb3IgZWFjaCBwcm92aWRlZCBkYXRhSUQgdGhhdCB3YXMgaW52YWxpZGF0ZWQsIHdlIHdyaXRlIHRoZVxuICAvLyBJTlZBTElEQVRFRF9BVF9LRVkgb24gdGhlIHJlY29yZCwgaW5kaWNhdGluZ1xuICAvLyB0aGUgZXBvY2ggYXQgd2hpY2ggdGhlIHJlY29yZCB3YXMgaW52YWxpZGF0ZWQuXG4gIGlmIChpZHNNYXJrZWRGb3JJbnZhbGlkYXRpb24pIHtcbiAgICBpZHNNYXJrZWRGb3JJbnZhbGlkYXRpb24uZm9yRWFjaChmdW5jdGlvbiAoZGF0YUlEKSB7XG4gICAgICB2YXIgdGFyZ2V0UmVjb3JkID0gdGFyZ2V0LmdldChkYXRhSUQpO1xuICAgICAgdmFyIHNvdXJjZVJlY29yZCA9IHNvdXJjZS5nZXQoZGF0YUlEKTsgLy8gSWYgcmVjb3JkIHdhcyBkZWxldGVkIGR1cmluZyB0aGUgdXBkYXRlIChhbmQgYWxzbyBpbnZhbGlkYXRlZCksXG4gICAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIGNvdW50IGl0IGFzIGFuIGludmFsaWRhdGVkIGlkXG5cbiAgICAgIGlmIChzb3VyY2VSZWNvcmQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV4dFJlY29yZDtcblxuICAgICAgaWYgKHRhcmdldFJlY29yZCAhPSBudWxsKSB7XG4gICAgICAgIC8vIElmIHRoZSB0YXJnZXQgcmVjb3JkIGV4aXN0cywgdXNlIGl0IHRvIHNldCB0aGUgZXBvY2hcbiAgICAgICAgLy8gYXQgd2hpY2ggaXQgd2FzIGludmFsaWRhdGVkLiBUaGlzIHJlY29yZCB3aWxsIGJlIHVwZGF0ZWQgd2l0aFxuICAgICAgICAvLyBhbnkgY2hhbmdlcyBmcm9tIHNvdXJjZSBpbiB0aGUgc2VjdGlvbiBiZWxvd1xuICAgICAgICAvLyB3aGVyZSB3ZSB1cGRhdGUgdGhlIHRhcmdldCByZWNvcmRzIGJhc2VkIG9uIHRoZSBzb3VyY2UuXG4gICAgICAgIG5leHRSZWNvcmQgPSBSZWxheU1vZGVyblJlY29yZC5jbG9uZSh0YXJnZXRSZWNvcmQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlIHRhcmdldCByZWNvcmQgZG9lc24ndCBleGlzdCwgaXQgbWVhbnMgdGhhdCBhIG5ldyByZWNvcmRcbiAgICAgICAgLy8gaW4gdGhlIHNvdXJjZSB3YXMgY3JlYXRlZCAoYW5kIGFsc28gaW52YWxpZGF0ZWQpLCBzbyB3ZSB1c2UgdGhhdFxuICAgICAgICAvLyByZWNvcmQgdG8gc2V0IHRoZSBlcG9jaCBhdCB3aGljaCBpdCB3YXMgaW52YWxpZGF0ZWQuIFRoaXMgcmVjb3JkXG4gICAgICAgIC8vIHdpbGwgYmUgdXBkYXRlZCB3aXRoIGFueSBjaGFuZ2VzIGZyb20gc291cmNlIGluIHRoZSBzZWN0aW9uIGJlbG93XG4gICAgICAgIC8vIHdoZXJlIHdlIHVwZGF0ZSB0aGUgdGFyZ2V0IHJlY29yZHMgYmFzZWQgb24gdGhlIHNvdXJjZS5cbiAgICAgICAgbmV4dFJlY29yZCA9IHNvdXJjZVJlY29yZCAhPSBudWxsID8gUmVsYXlNb2Rlcm5SZWNvcmQuY2xvbmUoc291cmNlUmVjb3JkKSA6IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICghbmV4dFJlY29yZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIFJlbGF5TW9kZXJuUmVjb3JkLnNldFZhbHVlKG5leHRSZWNvcmQsIFJlbGF5U3RvcmVVdGlscy5JTlZBTElEQVRFRF9BVF9LRVksIGN1cnJlbnRXcml0ZUVwb2NoKTtcbiAgICAgIGludmFsaWRhdGVkUmVjb3JkSURzLmFkZChkYXRhSUQpOyAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXVxuXG4gICAgICB0YXJnZXQuc2V0KGRhdGFJRCwgbmV4dFJlY29yZCk7XG4gICAgfSk7XG4gIH0gLy8gVXBkYXRlIHRoZSB0YXJnZXQgYmFzZWQgb24gdGhlIGNoYW5nZXMgcHJlc2VudCBpbiBzb3VyY2VcblxuXG4gIHZhciBkYXRhSURzID0gc291cmNlLmdldFJlY29yZElEcygpO1xuXG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCBkYXRhSURzLmxlbmd0aDsgaWkrKykge1xuICAgIHZhciBkYXRhSUQgPSBkYXRhSURzW2lpXTtcbiAgICB2YXIgc291cmNlUmVjb3JkID0gc291cmNlLmdldChkYXRhSUQpO1xuICAgIHZhciB0YXJnZXRSZWNvcmQgPSB0YXJnZXQuZ2V0KGRhdGFJRCk7IC8vIFByZXZlbnQgbXV0YXRpb24gb2YgYSByZWNvcmQgZnJvbSBvdXRzaWRlIHRoZSBzdG9yZS5cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmIChzb3VyY2VSZWNvcmQpIHtcbiAgICAgICAgUmVsYXlNb2Rlcm5SZWNvcmQuZnJlZXplKHNvdXJjZVJlY29yZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNvdXJjZVJlY29yZCAmJiB0YXJnZXRSZWNvcmQpIHtcbiAgICAgIC8vIFJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VzIGFyZSBsYXp5IGFuZCBvbmx5IG1hdGVyaWFsaXplIHdoZW4gcmVhZFJvb3RcbiAgICAgIC8vIGlzIGNhbGxlZCB3aGVuIHdlIHJlYWQgdGhlIGZpZWxkLCBzbyBpZiB0aGUgcmVjb3JkIGlzIGEgRmxpZ2h0IGZpZWxkXG4gICAgICAvLyB3ZSBhbHdheXMgdXNlIHRoZSBuZXcgcmVjb3JkJ3MgZGF0YSByZWdhcmRsZXNzIG9mIHdoZXRoZXJcbiAgICAgIC8vIGl0IGFjdHVhbGx5IGNoYW5nZWQuIExldCBSZWFjdCB0YWtlIGNhcmUgb2YgcmVjb25jaWxpYXRpb24gaW5zdGVhZC5cbiAgICAgIHZhciBuZXh0UmVjb3JkID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0VHlwZSh0YXJnZXRSZWNvcmQpID09PSBSZWxheVN0b3JlUmVhY3RGbGlnaHRVdGlscy5SRUFDVF9GTElHSFRfVFlQRV9OQU1FID8gc291cmNlUmVjb3JkIDogUmVsYXlNb2Rlcm5SZWNvcmQudXBkYXRlKHRhcmdldFJlY29yZCwgc291cmNlUmVjb3JkKTtcblxuICAgICAgaWYgKG5leHRSZWNvcmQgIT09IHRhcmdldFJlY29yZCkge1xuICAgICAgICAvLyBQcmV2ZW50IG11dGF0aW9uIG9mIGEgcmVjb3JkIGZyb20gb3V0c2lkZSB0aGUgc3RvcmUuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICBSZWxheU1vZGVyblJlY29yZC5mcmVlemUobmV4dFJlY29yZCk7XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVkUmVjb3JkSURzLmFkZChkYXRhSUQpO1xuICAgICAgICB0YXJnZXQuc2V0KGRhdGFJRCwgbmV4dFJlY29yZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzb3VyY2VSZWNvcmQgPT09IG51bGwpIHtcbiAgICAgIHRhcmdldFtcImRlbGV0ZVwiXShkYXRhSUQpO1xuXG4gICAgICBpZiAodGFyZ2V0UmVjb3JkICE9PSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZWRSZWNvcmRJRHMuYWRkKGRhdGFJRCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzb3VyY2VSZWNvcmQpIHtcbiAgICAgIHRhcmdldC5zZXQoZGF0YUlELCBzb3VyY2VSZWNvcmQpO1xuICAgICAgdXBkYXRlZFJlY29yZElEcy5hZGQoZGF0YUlEKTtcbiAgICB9IC8vIGRvbid0IGFkZCBleHBsaWNpdCB1bmRlZmluZWRcblxuICB9XG59XG4vKipcbiAqIFJldHVybnMgYW4gT3BlcmF0aW9uQXZhaWxhYmlsaXR5IGdpdmVuIHRoZSBBdmFpbGFiaWxpdHkgcmV0dXJuZWRcbiAqIGJ5IGNoZWNraW5nIGFuIG9wZXJhdGlvbiwgYW5kIHdoZW4gdGhhdCBvcGVyYXRpb24gd2FzIGxhc3Qgd3JpdHRlbiB0byB0aGUgc3RvcmUuXG4gKiBTcGVjaWZpY2FsbHksIHRoZSBwcm92aWRlZCBBdmFpbGFiaWxpdHkgb2YgYW4gb3BlcmF0aW9uIHdpbGwgY29udGFpbiB0aGVcbiAqIHZhbHVlIG9mIHdoZW4gYSByZWNvcmQgcmVmZXJlbmNlZCBieSB0aGUgb3BlcmF0aW9uIHdhcyBtb3N0IHJlY2VudGx5XG4gKiBpbnZhbGlkYXRlZDsgZ2l2ZW4gdGhhdCB2YWx1ZSwgYW5kIGdpdmVuIHdoZW4gdGhpcyBvcGVyYXRpb24gd2FzIGxhc3RcbiAqIHdyaXR0ZW4gdG8gdGhlIHN0b3JlLCB0aGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHRoZSBvdmVyYWxsXG4gKiBPcGVyYXRpb25BdmFpbGFiaWxpdHkgZm9yIHRoZSBvcGVyYXRpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRBdmFpbGFiaWxpdHlTdGF0dXMob3BlcmF0aW9uQXZhaWxhYmlsaXR5LCBvcGVyYXRpb25MYXN0V3JpdHRlbkF0LCBvcGVyYXRpb25GZXRjaFRpbWUsIHF1ZXJ5Q2FjaGVFeHBpcmF0aW9uVGltZSkge1xuICB2YXIgbW9zdFJlY2VudGx5SW52YWxpZGF0ZWRBdCA9IG9wZXJhdGlvbkF2YWlsYWJpbGl0eS5tb3N0UmVjZW50bHlJbnZhbGlkYXRlZEF0LFxuICAgICAgc3RhdHVzID0gb3BlcmF0aW9uQXZhaWxhYmlsaXR5LnN0YXR1cztcblxuICBpZiAodHlwZW9mIG1vc3RSZWNlbnRseUludmFsaWRhdGVkQXQgPT09ICdudW1iZXInKSB7XG4gICAgLy8gSWYgc29tZSByZWNvcmQgcmVmZXJlbmNlZCBieSB0aGlzIG9wZXJhdGlvbiBpcyBzdGFsZSwgdGhlbiB0aGUgb3BlcmF0aW9uIGl0c2VsZiBpcyBzdGFsZVxuICAgIC8vIGlmIGVpdGhlciB0aGUgb3BlcmF0aW9uIGl0c2VsZiB3YXMgbmV2ZXIgd3JpdHRlbiAqb3IqIHRoZSBvcGVyYXRpb24gd2FzIGxhc3Qgd3JpdHRlblxuICAgIC8vIGJlZm9yZSB0aGUgbW9zdCByZWNlbnQgaW52YWxpZGF0aW9uIG9mIGl0cyByZWFjaGFibGUgcmVjb3Jkcy5cbiAgICBpZiAob3BlcmF0aW9uTGFzdFdyaXR0ZW5BdCA9PSBudWxsIHx8IG1vc3RSZWNlbnRseUludmFsaWRhdGVkQXQgPiBvcGVyYXRpb25MYXN0V3JpdHRlbkF0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6ICdzdGFsZSdcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXR1cyA9PT0gJ21pc3NpbmcnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogJ21pc3NpbmcnXG4gICAgfTtcbiAgfVxuXG4gIGlmIChvcGVyYXRpb25GZXRjaFRpbWUgIT0gbnVsbCAmJiBxdWVyeUNhY2hlRXhwaXJhdGlvblRpbWUgIT0gbnVsbCkge1xuICAgIHZhciBpc1N0YWxlID0gb3BlcmF0aW9uRmV0Y2hUaW1lIDw9IERhdGUubm93KCkgLSBxdWVyeUNhY2hlRXhwaXJhdGlvblRpbWU7XG5cbiAgICBpZiAoaXNTdGFsZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiAnc3RhbGUnXG4gICAgICB9O1xuICAgIH1cbiAgfSAvLyBUaGVyZSB3ZXJlIG5vIGludmFsaWRhdGlvbnMgb2YgYW55IHJlYWNoYWJsZSByZWNvcmRzICpvciogdGhlIG9wZXJhdGlvbiBpcyBrbm93biB0byBoYXZlXG4gIC8vIGJlZW4gZmV0Y2hlZCBhZnRlciB0aGUgbW9zdCByZWNlbnQgcmVjb3JkIGludmFsaWRhdGlvbi5cblxuXG4gIHJldHVybiB7XG4gICAgc3RhdHVzOiAnYXZhaWxhYmxlJyxcbiAgICBmZXRjaFRpbWU6IG9wZXJhdGlvbkZldGNoVGltZSAhPT0gbnVsbCAmJiBvcGVyYXRpb25GZXRjaFRpbWUgIT09IHZvaWQgMCA/IG9wZXJhdGlvbkZldGNoVGltZSA6IG51bGxcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheU1vZGVyblN0b3JlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlclwiKSk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIFJlbGF5T3BlcmF0aW9uVHJhY2tlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlbGF5T3BlcmF0aW9uVHJhY2tlcigpIHtcbiAgICB0aGlzLl9vd25lcnNUb1BlbmRpbmdPcGVyYXRpb25zSWRlbnRpZmllciA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9wZW5kaW5nT3BlcmF0aW9uc1RvT3duZXJzSWRlbnRpZmllciA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9vd25lcnNJZGVudGlmaWVyVG9Qcm9taXNlID0gbmV3IE1hcCgpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIG1hcCBvZiBjdXJyZW50IHByb2Nlc3Npbmcgb3BlcmF0aW9ucyB3aXRoIHRoZSBzZXQgb2ZcbiAgICogYWZmZWN0ZWQgb3duZXJzIGFuZCBub3RpZnkgc3Vic2NyaWJlcnNcbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUmVsYXlPcGVyYXRpb25UcmFja2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKHBlbmRpbmdPcGVyYXRpb24sIGFmZmVjdGVkT3duZXJzKSB7XG4gICAgaWYgKGFmZmVjdGVkT3duZXJzLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcGVuZGluZ09wZXJhdGlvbklkZW50aWZpZXIgPSBwZW5kaW5nT3BlcmF0aW9uLmlkZW50aWZpZXI7XG4gICAgdmFyIG5ld2x5QWZmZWN0ZWRPd25lcnNJZGVudGlmaWVyID0gbmV3IFNldCgpO1xuXG4gICAgdmFyIF9pdGVyYXRvciA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShhZmZlY3RlZE93bmVycyksXG4gICAgICAgIF9zdGVwO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBvd25lciA9IF9zdGVwLnZhbHVlO1xuICAgICAgICB2YXIgb3duZXJJZGVudGlmaWVyID0gb3duZXIuaWRlbnRpZmllcjtcblxuICAgICAgICB2YXIgcGVuZGluZ09wZXJhdGlvbnNBZmZlY3RpbmdPd25lciA9IHRoaXMuX293bmVyc1RvUGVuZGluZ09wZXJhdGlvbnNJZGVudGlmaWVyLmdldChvd25lcklkZW50aWZpZXIpO1xuXG4gICAgICAgIGlmIChwZW5kaW5nT3BlcmF0aW9uc0FmZmVjdGluZ093bmVyICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UgdGhlIGBvd25lcklkZW50aWZpZXJgIGFscmVhZHkgYWZmZWN0ZWQgYnkgc29tZSBvcGVyYXRpb25zXG4gICAgICAgICAgLy8gV2UganVzdCBuZWVkIHRvIGRldGVjdCwgaXMgaXQgdGhlIHNhbWUgb3BlcmF0aW9uIHRoYXQgd2UgYWxyZWFkeVxuICAgICAgICAgIC8vIGhhdmUgaW4gdGhlIGxpc3QsIG9yIGl0J3MgYSBuZXcgb3BlcmF0aW9uXG4gICAgICAgICAgaWYgKCFwZW5kaW5nT3BlcmF0aW9uc0FmZmVjdGluZ093bmVyLmhhcyhwZW5kaW5nT3BlcmF0aW9uSWRlbnRpZmllcikpIHtcbiAgICAgICAgICAgIHBlbmRpbmdPcGVyYXRpb25zQWZmZWN0aW5nT3duZXIuYWRkKHBlbmRpbmdPcGVyYXRpb25JZGVudGlmaWVyKTtcbiAgICAgICAgICAgIG5ld2x5QWZmZWN0ZWRPd25lcnNJZGVudGlmaWVyLmFkZChvd25lcklkZW50aWZpZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGEgbmV3IGBvd25lcklkZW50aWZpZXJgIHRoYXQgaXMgYWZmZWN0ZWQgYnkgdGhlIG9wZXJhdGlvblxuICAgICAgICAgIHRoaXMuX293bmVyc1RvUGVuZGluZ09wZXJhdGlvbnNJZGVudGlmaWVyLnNldChvd25lcklkZW50aWZpZXIsIG5ldyBTZXQoW3BlbmRpbmdPcGVyYXRpb25JZGVudGlmaWVyXSkpO1xuXG4gICAgICAgICAgbmV3bHlBZmZlY3RlZE93bmVyc0lkZW50aWZpZXIuYWRkKG93bmVySWRlbnRpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gTm8gbmV3IG93bmVycyB3ZXJlIGFmZmVjdGVkIGJ5IHRoaXMgb3BlcmF0aW9uLCB3ZSBtYXkgc3RvcCBoZXJlXG5cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgfVxuXG4gICAgaWYgKG5ld2x5QWZmZWN0ZWRPd25lcnNJZGVudGlmaWVyLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEJ1dCwgaWYgc29tZSBvd25lcnMgd2VyZSBhZmZlY3RlZCB3ZSBuZWVkIHRvIGFkZCB0aGVtIHRvXG4gICAgLy8gdGhlIGBfcGVuZGluZ09wZXJhdGlvbnNUb093bmVyc0lkZW50aWZpZXJgIHNldFxuXG5cbiAgICB2YXIgb3duZXJzQWZmZWN0ZWRCeU9wZXJhdGlvbklkZW50aWZpZXIgPSB0aGlzLl9wZW5kaW5nT3BlcmF0aW9uc1RvT3duZXJzSWRlbnRpZmllci5nZXQocGVuZGluZ09wZXJhdGlvbklkZW50aWZpZXIpIHx8IG5ldyBTZXQoKTtcblxuICAgIHZhciBfaXRlcmF0b3IyID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKG5ld2x5QWZmZWN0ZWRPd25lcnNJZGVudGlmaWVyKSxcbiAgICAgICAgX3N0ZXAyO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBfb3duZXJJZGVudGlmaWVyID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgIHRoaXMuX3Jlc29sdmVPd25lclJlc29sdmVycyhfb3duZXJJZGVudGlmaWVyKTtcblxuICAgICAgICBvd25lcnNBZmZlY3RlZEJ5T3BlcmF0aW9uSWRlbnRpZmllci5hZGQoX293bmVySWRlbnRpZmllcik7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IyLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yMi5mKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fcGVuZGluZ09wZXJhdGlvbnNUb093bmVyc0lkZW50aWZpZXIuc2V0KHBlbmRpbmdPcGVyYXRpb25JZGVudGlmaWVyLCBvd25lcnNBZmZlY3RlZEJ5T3BlcmF0aW9uSWRlbnRpZmllcik7XG4gIH1cbiAgLyoqXG4gICAqIE9uY2UgcGVuZGluZyBvcGVyYXRpb24gaXMgY29tcGxldGVkIHdlIG5lZWQgdG8gcmVtb3ZlIGl0XG4gICAqIGZyb20gYWxsIHRyYWNraW5nIG1hcHNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZShwZW5kaW5nT3BlcmF0aW9uKSB7XG4gICAgdmFyIHBlbmRpbmdPcGVyYXRpb25JZGVudGlmaWVyID0gcGVuZGluZ09wZXJhdGlvbi5pZGVudGlmaWVyO1xuXG4gICAgdmFyIGFmZmVjdGVkT3duZXJzSWRlbnRpZmllciA9IHRoaXMuX3BlbmRpbmdPcGVyYXRpb25zVG9Pd25lcnNJZGVudGlmaWVyLmdldChwZW5kaW5nT3BlcmF0aW9uSWRlbnRpZmllcik7XG5cbiAgICBpZiAoYWZmZWN0ZWRPd25lcnNJZGVudGlmaWVyID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFRoZXNlIHdlcmUgdGhlIG93bmVycyBhZmZlY3RlZCBvbmx5IGJ5IGBwZW5kaW5nT3BlcmF0aW9uSWRlbnRpZmllcmBcblxuXG4gICAgdmFyIGNvbXBsZXRlZE93bmVyc0lkZW50aWZpZXIgPSBuZXcgU2V0KCk7IC8vIFRoZXNlIHdlcmUgdGhlIG93bmVycyBhZmZlY3RlZCBieSBgcGVuZGluZ09wZXJhdGlvbklkZW50aWZpZXJgXG4gICAgLy8gYW5kIHNvbWUgb3RoZXIgb3BlcmF0aW9uc1xuXG4gICAgdmFyIHVwZGF0ZWRPd25lcnNJZGVudGlmaWVyID0gbmV3IFNldCgpO1xuXG4gICAgdmFyIF9pdGVyYXRvcjMgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkoYWZmZWN0ZWRPd25lcnNJZGVudGlmaWVyKSxcbiAgICAgICAgX3N0ZXAzO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBvd25lcklkZW50aWZpZXIgPSBfc3RlcDMudmFsdWU7XG5cbiAgICAgICAgdmFyIHBlbmRpbmdPcGVyYXRpb25zQWZmZWN0aW5nT3duZXIgPSB0aGlzLl9vd25lcnNUb1BlbmRpbmdPcGVyYXRpb25zSWRlbnRpZmllci5nZXQob3duZXJJZGVudGlmaWVyKTtcblxuICAgICAgICBpZiAoIXBlbmRpbmdPcGVyYXRpb25zQWZmZWN0aW5nT3duZXIpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBlbmRpbmdPcGVyYXRpb25zQWZmZWN0aW5nT3duZXJbXCJkZWxldGVcIl0ocGVuZGluZ09wZXJhdGlvbklkZW50aWZpZXIpO1xuXG4gICAgICAgIGlmIChwZW5kaW5nT3BlcmF0aW9uc0FmZmVjdGluZ093bmVyLnNpemUgPiAwKSB7XG4gICAgICAgICAgdXBkYXRlZE93bmVyc0lkZW50aWZpZXIuYWRkKG93bmVySWRlbnRpZmllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tcGxldGVkT3duZXJzSWRlbnRpZmllci5hZGQob3duZXJJZGVudGlmaWVyKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBDb21wbGV0ZSBzdWJzY3JpcHRpb25zIGZvciBhbGwgb3duZXJzLCBhZmZlY3RlZCBieSBgcGVuZGluZ09wZXJhdGlvbklkZW50aWZpZXJgXG5cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvcjMuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IzLmYoKTtcbiAgICB9XG5cbiAgICB2YXIgX2l0ZXJhdG9yNCA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShjb21wbGV0ZWRPd25lcnNJZGVudGlmaWVyKSxcbiAgICAgICAgX3N0ZXA0O1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yNC5zKCk7ICEoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBfb3duZXJJZGVudGlmaWVyMiA9IF9zdGVwNC52YWx1ZTtcblxuICAgICAgICB0aGlzLl9yZXNvbHZlT3duZXJSZXNvbHZlcnMoX293bmVySWRlbnRpZmllcjIpO1xuXG4gICAgICAgIHRoaXMuX293bmVyc1RvUGVuZGluZ09wZXJhdGlvbnNJZGVudGlmaWVyW1wiZGVsZXRlXCJdKF9vd25lcklkZW50aWZpZXIyKTtcbiAgICAgIH0gLy8gVXBkYXRlIGFsbCBvd25lcklkZW50aWZpZXIgdGhhdCB3ZXJlIHVwZGF0ZWQgYnkgYHBlbmRpbmdPcGVyYXRpb25JZGVudGlmaWVyYCBidXQgc3RpbGxcbiAgICAgIC8vIGFyZSBhZmZlY3RlZCBieSBvdGhlciBvcGVyYXRpb25zXG5cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvcjQuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3I0LmYoKTtcbiAgICB9XG5cbiAgICB2YXIgX2l0ZXJhdG9yNSA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKSh1cGRhdGVkT3duZXJzSWRlbnRpZmllciksXG4gICAgICAgIF9zdGVwNTtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjUucygpOyAhKF9zdGVwNSA9IF9pdGVyYXRvcjUubigpKS5kb25lOykge1xuICAgICAgICB2YXIgX293bmVySWRlbnRpZmllcjMgPSBfc3RlcDUudmFsdWU7XG5cbiAgICAgICAgdGhpcy5fcmVzb2x2ZU93bmVyUmVzb2x2ZXJzKF9vd25lcklkZW50aWZpZXIzKTtcbiAgICAgIH0gLy8gRmluYWxseSwgcmVtb3ZlIHBlbmRpbmcgb3BlcmF0aW9uIGlkZW50aWZpZXJcblxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yNS5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvcjUuZigpO1xuICAgIH1cblxuICAgIHRoaXMuX3BlbmRpbmdPcGVyYXRpb25zVG9Pd25lcnNJZGVudGlmaWVyW1wiZGVsZXRlXCJdKHBlbmRpbmdPcGVyYXRpb25JZGVudGlmaWVyKTtcbiAgfTtcblxuICBfcHJvdG8uX3Jlc29sdmVPd25lclJlc29sdmVycyA9IGZ1bmN0aW9uIF9yZXNvbHZlT3duZXJSZXNvbHZlcnMob3duZXJJZGVudGlmaWVyKSB7XG4gICAgdmFyIHByb21pc2VFbnRyeSA9IHRoaXMuX293bmVyc0lkZW50aWZpZXJUb1Byb21pc2UuZ2V0KG93bmVySWRlbnRpZmllcik7XG5cbiAgICBpZiAocHJvbWlzZUVudHJ5ICE9IG51bGwpIHtcbiAgICAgIHByb21pc2VFbnRyeS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fb3duZXJzSWRlbnRpZmllclRvUHJvbWlzZVtcImRlbGV0ZVwiXShvd25lcklkZW50aWZpZXIpO1xuICB9O1xuXG4gIF9wcm90by5nZXRQcm9taXNlRm9yUGVuZGluZ09wZXJhdGlvbnNBZmZlY3RpbmdPd25lciA9IGZ1bmN0aW9uIGdldFByb21pc2VGb3JQZW5kaW5nT3BlcmF0aW9uc0FmZmVjdGluZ093bmVyKG93bmVyKSB7XG4gICAgdmFyIG93bmVySWRlbnRpZmllciA9IG93bmVyLmlkZW50aWZpZXI7XG5cbiAgICBpZiAoIXRoaXMuX293bmVyc1RvUGVuZGluZ09wZXJhdGlvbnNJZGVudGlmaWVyLmhhcyhvd25lcklkZW50aWZpZXIpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgY2FjaGVkUHJvbWlzZUVudHJ5ID0gdGhpcy5fb3duZXJzSWRlbnRpZmllclRvUHJvbWlzZS5nZXQob3duZXJJZGVudGlmaWVyKTtcblxuICAgIGlmIChjYWNoZWRQcm9taXNlRW50cnkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNhY2hlZFByb21pc2VFbnRyeS5wcm9taXNlO1xuICAgIH1cblxuICAgIHZhciByZXNvbHZlO1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHIpIHtcbiAgICAgIHJlc29sdmUgPSByO1xuICAgIH0pO1xuICAgICEocmVzb2x2ZSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5T3BlcmF0aW9uVHJhY2tlcjogRXhwZWN0ZWQgcmVzb2x2ZXIgdG8gYmUgZGVmaW5lZC4gSWYgeW91JyArICdhcmUgc2VlaW5nIHRoaXMsIGl0IGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWxheS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICB0aGlzLl9vd25lcnNJZGVudGlmaWVyVG9Qcm9taXNlLnNldChvd25lcklkZW50aWZpZXIsIHtcbiAgICAgIHByb21pc2U6IHByb21pc2UsXG4gICAgICByZXNvbHZlOiByZXNvbHZlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICByZXR1cm4gUmVsYXlPcGVyYXRpb25UcmFja2VyO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5T3BlcmF0aW9uVHJhY2tlcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBSZWxheVJlY29yZFNvdXJjZSA9IHJlcXVpcmUoJy4vUmVsYXlSZWNvcmRTb3VyY2UnKTtcblxudmFyIFVOUFVCTElTSF9SRUNPUkRfU0VOVElORUwgPSBPYmplY3QuZnJlZXplKHtcbiAgX19VTlBVQkxJU0hfUkVDT1JEX1NFTlRJTkVMOiB0cnVlXG59KTtcbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2YgTXV0YWJsZVJlY29yZFNvdXJjZSB0aGF0IHJlcHJlc2VudHMgYSBiYXNlIFJlY29yZFNvdXJjZVxuICogd2l0aCBvcHRpbWlzdGljIHVwZGF0ZXMgc3RhY2tlZCBvbiB0b3A6IHJlY29yZHMgd2l0aCBvcHRpbWlzdGljIHVwZGF0ZXNcbiAqIHNoYWRvdyB0aGUgYmFzZSB2ZXJzaW9uIG9mIHRoZSByZWNvcmQgcmF0aGVyIHRoYW4gdXBkYXRpbmcvcmVwbGFjaW5nIHRoZW0uXG4gKi9cblxudmFyIFJlbGF5T3B0aW1pc3RpY1JlY29yZFNvdXJjZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlbGF5T3B0aW1pc3RpY1JlY29yZFNvdXJjZShiYXNlKSB7XG4gICAgdGhpcy5fYmFzZSA9IGJhc2U7XG4gICAgdGhpcy5fc2luayA9IFJlbGF5UmVjb3JkU291cmNlLmNyZWF0ZSgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlbGF5T3B0aW1pc3RpY1JlY29yZFNvdXJjZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhcyA9IGZ1bmN0aW9uIGhhcyhkYXRhSUQpIHtcbiAgICBpZiAodGhpcy5fc2luay5oYXMoZGF0YUlEKSkge1xuICAgICAgdmFyIHNpbmtSZWNvcmQgPSB0aGlzLl9zaW5rLmdldChkYXRhSUQpO1xuXG4gICAgICByZXR1cm4gc2lua1JlY29yZCAhPT0gVU5QVUJMSVNIX1JFQ09SRF9TRU5USU5FTDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX2Jhc2UuaGFzKGRhdGFJRCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoZGF0YUlEKSB7XG4gICAgaWYgKHRoaXMuX3NpbmsuaGFzKGRhdGFJRCkpIHtcbiAgICAgIHZhciBzaW5rUmVjb3JkID0gdGhpcy5fc2luay5nZXQoZGF0YUlEKTtcblxuICAgICAgaWYgKHNpbmtSZWNvcmQgPT09IFVOUFVCTElTSF9SRUNPUkRfU0VOVElORUwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzaW5rUmVjb3JkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5fYmFzZS5nZXQoZGF0YUlEKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldFN0YXR1cyA9IGZ1bmN0aW9uIGdldFN0YXR1cyhkYXRhSUQpIHtcbiAgICB2YXIgcmVjb3JkID0gdGhpcy5nZXQoZGF0YUlEKTtcblxuICAgIGlmIChyZWNvcmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuICdVTktOT1dOJztcbiAgICB9IGVsc2UgaWYgKHJlY29yZCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuICdOT05FWElTVEVOVCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnRVhJU1RFTlQnO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLl9iYXNlID0gUmVsYXlSZWNvcmRTb3VyY2UuY3JlYXRlKCk7XG5cbiAgICB0aGlzLl9zaW5rLmNsZWFyKCk7XG4gIH07XG5cbiAgX3Byb3RvW1wiZGVsZXRlXCJdID0gZnVuY3Rpb24gX2RlbGV0ZShkYXRhSUQpIHtcbiAgICB0aGlzLl9zaW5rW1wiZGVsZXRlXCJdKGRhdGFJRCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShkYXRhSUQpIHtcbiAgICB0aGlzLl9zaW5rLnNldChkYXRhSUQsIFVOUFVCTElTSF9SRUNPUkRfU0VOVElORUwpO1xuICB9O1xuXG4gIF9wcm90by5zZXQgPSBmdW5jdGlvbiBzZXQoZGF0YUlELCByZWNvcmQpIHtcbiAgICB0aGlzLl9zaW5rLnNldChkYXRhSUQsIHJlY29yZCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFJlY29yZElEcyA9IGZ1bmN0aW9uIGdldFJlY29yZElEcygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy50b0pTT04oKSk7XG4gIH07XG5cbiAgX3Byb3RvLnNpemUgPSBmdW5jdGlvbiBzaXplKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnRvSlNPTigpKS5sZW5ndGg7XG4gIH07XG5cbiAgX3Byb3RvLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIG1lcmdlZCA9ICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCB0aGlzLl9iYXNlLnRvSlNPTigpKTtcblxuICAgIHRoaXMuX3NpbmsuZ2V0UmVjb3JkSURzKCkuZm9yRWFjaChmdW5jdGlvbiAoZGF0YUlEKSB7XG4gICAgICB2YXIgcmVjb3JkID0gX3RoaXMuZ2V0KGRhdGFJRCk7XG5cbiAgICAgIGlmIChyZWNvcmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWxldGUgbWVyZ2VkW2RhdGFJRF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXJnZWRbZGF0YUlEXSA9IHJlY29yZDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtZXJnZWQ7XG4gIH07XG5cbiAgcmV0dXJuIFJlbGF5T3B0aW1pc3RpY1JlY29yZFNvdXJjZTtcbn0oKTtcblxuZnVuY3Rpb24gY3JlYXRlKGJhc2UpIHtcbiAgcmV0dXJuIG5ldyBSZWxheU9wdGltaXN0aWNSZWNvcmRTb3VyY2UoYmFzZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IGNyZWF0ZVxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9nbG9iYWwkRXJyb3JVdGlscyRhcCwgX2dsb2JhbCRFcnJvclV0aWxzO1xuXG52YXIgUmVsYXlSZWFkZXIgPSByZXF1aXJlKCcuL1JlbGF5UmVhZGVyJyk7XG5cbnZhciBSZWxheVJlY29yZFNvdXJjZSA9IHJlcXVpcmUoJy4vUmVsYXlSZWNvcmRTb3VyY2UnKTtcblxudmFyIFJlbGF5UmVjb3JkU291cmNlTXV0YXRvciA9IHJlcXVpcmUoJy4uL211dGF0aW9ucy9SZWxheVJlY29yZFNvdXJjZU11dGF0b3InKTtcblxudmFyIFJlbGF5UmVjb3JkU291cmNlUHJveHkgPSByZXF1aXJlKCcuLi9tdXRhdGlvbnMvUmVsYXlSZWNvcmRTb3VyY2VQcm94eScpO1xuXG52YXIgUmVsYXlSZWNvcmRTb3VyY2VTZWxlY3RvclByb3h5ID0gcmVxdWlyZSgnLi4vbXV0YXRpb25zL1JlbGF5UmVjb3JkU291cmNlU2VsZWN0b3JQcm94eScpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBhcHBseVdpdGhHdWFyZCA9IChfZ2xvYmFsJEVycm9yVXRpbHMkYXAgPSAoX2dsb2JhbCRFcnJvclV0aWxzID0gZ2xvYmFsLkVycm9yVXRpbHMpID09PSBudWxsIHx8IF9nbG9iYWwkRXJyb3JVdGlscyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2dsb2JhbCRFcnJvclV0aWxzLmFwcGx5V2l0aEd1YXJkKSAhPT0gbnVsbCAmJiBfZ2xvYmFsJEVycm9yVXRpbHMkYXAgIT09IHZvaWQgMCA/IF9nbG9iYWwkRXJyb3JVdGlscyRhcCA6IGZ1bmN0aW9uIChjYWxsYmFjaywgY29udGV4dCwgYXJncywgb25FcnJvciwgbmFtZSkge1xuICByZXR1cm4gY2FsbGJhY2suYXBwbHkoY29udGV4dCwgYXJncyk7XG59O1xuLyoqXG4gKiBDb29yZGluYXRlcyB0aGUgY29uY3VycmVudCBtb2RpZmljYXRpb24gb2YgYSBgU3RvcmVgIGR1ZSB0byBvcHRpbWlzdGljIGFuZFxuICogbm9uLXJldmVydGFibGUgY2xpZW50IHVwZGF0ZXMgYW5kIHNlcnZlciBwYXlsb2FkczpcbiAqIC0gQXBwbGllcyBvcHRpbWlzdGljIHVwZGF0ZXMuXG4gKiAtIFJldmVydHMgb3B0aW1pc3RpYyB1cGRhdGVzLCByZWJhc2luZyBhbnkgc3Vic2VxdWVudCB1cGRhdGVzLlxuICogLSBDb21taXRzIGNsaWVudCB1cGRhdGVzICh0eXBpY2FsbHkgZm9yIGNsaWVudCBzY2hlbWEgZXh0ZW5zaW9ucykuXG4gKiAtIENvbW1pdHMgc2VydmVyIHVwZGF0ZXM6XG4gKiAgIC0gTm9ybWFsaXplcyBxdWVyeS9tdXRhdGlvbi9zdWJzY3JpcHRpb24gcmVzcG9uc2VzLlxuICogICAtIEV4ZWN1dGVzIGhhbmRsZXJzIGZvciBcImhhbmRsZVwiIGZpZWxkcy5cbiAqICAgLSBSZXZlcnRzIGFuZCByZWFwcGxpZXMgcGVuZGluZyBvcHRpbWlzdGljIHVwZGF0ZXMuXG4gKi9cblxudmFyIFJlbGF5UHVibGlzaFF1ZXVlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLy8gVHJ1ZSBpZiB0aGUgbmV4dCBgcnVuKClgIHNob3VsZCBhcHBseSB0aGUgYmFja3VwIGFuZCByZXJ1biBhbGwgb3B0aW1pc3RpY1xuICAvLyB1cGRhdGVzIHBlcmZvcm1pbmcgYSByZWJhc2UuXG4gIC8vIFBheWxvYWRzIHRvIGFwcGx5IG9yIFNvdXJjZXMgdG8gcHVibGlzaCB0byB0aGUgc3RvcmUgd2l0aCB0aGUgbmV4dCBgcnVuKClgLlxuICAvLyBPcHRpbWlzdGljIHVwZGF0ZXJzIHRvIGFkZCB3aXRoIHRoZSBuZXh0IGBydW4oKWAuXG4gIC8vIE9wdGltaXN0aWMgdXBkYXRlcnMgdGhhdCBhcmUgYWxyZWFkeSBhZGRlZCBhbmQgbWlnaHQgYmUgcmVydW4gaW4gb3JkZXIgdG9cbiAgLy8gcmViYXNlIHRoZW0uXG4gIC8vIEdhcmJhZ2UgY29sbGVjdGlvbiBob2xkLCBzaG91bGQgcmVydW4gZ2Mgb24gZGlzcG9zZVxuICBmdW5jdGlvbiBSZWxheVB1Ymxpc2hRdWV1ZShzdG9yZSwgaGFuZGxlclByb3ZpZGVyLCBnZXREYXRhSUQpIHtcbiAgICB0aGlzLl9oYXNTdG9yZVNuYXBzaG90ID0gZmFsc2U7XG4gICAgdGhpcy5faGFuZGxlclByb3ZpZGVyID0gaGFuZGxlclByb3ZpZGVyIHx8IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ0JhY2t1cFJlYmFzZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdEYXRhID0gbmV3IFNldCgpO1xuICAgIHRoaXMuX3BlbmRpbmdPcHRpbWlzdGljVXBkYXRlcyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLl9zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMuX2FwcGxpZWRPcHRpbWlzdGljVXBkYXRlcyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLl9nY0hvbGQgPSBudWxsO1xuICAgIHRoaXMuX2dldERhdGFJRCA9IGdldERhdGFJRDtcbiAgfVxuICAvKipcbiAgICogU2NoZWR1bGUgYXBwbHlpbmcgYW4gb3B0aW1pc3RpYyB1cGRhdGVzIG9uIHRoZSBuZXh0IGBydW4oKWAuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFJlbGF5UHVibGlzaFF1ZXVlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXBwbHlVcGRhdGUgPSBmdW5jdGlvbiBhcHBseVVwZGF0ZSh1cGRhdGVyKSB7XG4gICAgISghdGhpcy5fYXBwbGllZE9wdGltaXN0aWNVcGRhdGVzLmhhcyh1cGRhdGVyKSAmJiAhdGhpcy5fcGVuZGluZ09wdGltaXN0aWNVcGRhdGVzLmhhcyh1cGRhdGVyKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVB1Ymxpc2hRdWV1ZTogQ2Fubm90IGFwcGx5IHRoZSBzYW1lIHVwZGF0ZSBmdW5jdGlvbiBtb3JlIHRoYW4gJyArICdvbmNlIGNvbmN1cnJlbnRseS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICB0aGlzLl9wZW5kaW5nT3B0aW1pc3RpY1VwZGF0ZXMuYWRkKHVwZGF0ZXIpO1xuICB9XG4gIC8qKlxuICAgKiBTY2hlZHVsZSByZXZlcnRpbmcgYW4gb3B0aW1pc3RpYyB1cGRhdGVzIG9uIHRoZSBuZXh0IGBydW4oKWAuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJldmVydFVwZGF0ZSA9IGZ1bmN0aW9uIHJldmVydFVwZGF0ZSh1cGRhdGVyKSB7XG4gICAgaWYgKHRoaXMuX3BlbmRpbmdPcHRpbWlzdGljVXBkYXRlcy5oYXModXBkYXRlcikpIHtcbiAgICAgIC8vIFJldmVydGVkIGJlZm9yZSBpdCB3YXMgYXBwbGllZFxuICAgICAgdGhpcy5fcGVuZGluZ09wdGltaXN0aWNVcGRhdGVzW1wiZGVsZXRlXCJdKHVwZGF0ZXIpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fYXBwbGllZE9wdGltaXN0aWNVcGRhdGVzLmhhcyh1cGRhdGVyKSkge1xuICAgICAgdGhpcy5fcGVuZGluZ0JhY2t1cFJlYmFzZSA9IHRydWU7XG5cbiAgICAgIHRoaXMuX2FwcGxpZWRPcHRpbWlzdGljVXBkYXRlc1tcImRlbGV0ZVwiXSh1cGRhdGVyKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNjaGVkdWxlIGEgcmV2ZXJ0IG9mIGFsbCBvcHRpbWlzdGljIHVwZGF0ZXMgb24gdGhlIG5leHQgYHJ1bigpYC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmV2ZXJ0QWxsID0gZnVuY3Rpb24gcmV2ZXJ0QWxsKCkge1xuICAgIHRoaXMuX3BlbmRpbmdCYWNrdXBSZWJhc2UgPSB0cnVlO1xuXG4gICAgdGhpcy5fcGVuZGluZ09wdGltaXN0aWNVcGRhdGVzLmNsZWFyKCk7XG5cbiAgICB0aGlzLl9hcHBsaWVkT3B0aW1pc3RpY1VwZGF0ZXMuY2xlYXIoKTtcbiAgfVxuICAvKipcbiAgICogU2NoZWR1bGUgYXBwbHlpbmcgYSBwYXlsb2FkIHRvIHRoZSBzdG9yZSBvbiB0aGUgbmV4dCBgcnVuKClgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb21taXRQYXlsb2FkID0gZnVuY3Rpb24gY29tbWl0UGF5bG9hZChvcGVyYXRpb24sIHBheWxvYWQsIHVwZGF0ZXIpIHtcbiAgICB0aGlzLl9wZW5kaW5nQmFja3VwUmViYXNlID0gdHJ1ZTtcblxuICAgIHRoaXMuX3BlbmRpbmdEYXRhLmFkZCh7XG4gICAgICBraW5kOiAncGF5bG9hZCcsXG4gICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICB1cGRhdGVyOiB1cGRhdGVyXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFNjaGVkdWxlIGFuIHVwZGF0ZXIgdG8gbXV0YXRlIHRoZSBzdG9yZSBvbiB0aGUgbmV4dCBgcnVuKClgIHR5cGljYWxseSB0b1xuICAgKiB1cGRhdGUgY2xpZW50IHNjaGVtYSBmaWVsZHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNvbW1pdFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbW1pdFVwZGF0ZSh1cGRhdGVyKSB7XG4gICAgdGhpcy5fcGVuZGluZ0JhY2t1cFJlYmFzZSA9IHRydWU7XG5cbiAgICB0aGlzLl9wZW5kaW5nRGF0YS5hZGQoe1xuICAgICAga2luZDogJ3VwZGF0ZXInLFxuICAgICAgdXBkYXRlcjogdXBkYXRlclxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBTY2hlZHVsZSBhIHB1Ymxpc2ggdG8gdGhlIHN0b3JlIGZyb20gdGhlIHByb3ZpZGVkIHNvdXJjZSBvbiB0aGUgbmV4dFxuICAgKiBgcnVuKClgLiBBcyBhbiBleGFtcGxlLCB0byB1cGRhdGUgdGhlIHN0b3JlIHdpdGggc3Vic3RpdHV0ZWQgZmllbGRzIHRoYXRcbiAgICogYXJlIG1pc3NpbmcgaW4gdGhlIHN0b3JlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb21taXRTb3VyY2UgPSBmdW5jdGlvbiBjb21taXRTb3VyY2Uoc291cmNlKSB7XG4gICAgdGhpcy5fcGVuZGluZ0JhY2t1cFJlYmFzZSA9IHRydWU7XG5cbiAgICB0aGlzLl9wZW5kaW5nRGF0YS5hZGQoe1xuICAgICAga2luZDogJ3NvdXJjZScsXG4gICAgICBzb3VyY2U6IHNvdXJjZVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBFeGVjdXRlIGFsbCBxdWV1ZWQgdXAgb3BlcmF0aW9ucyBmcm9tIHRoZSBvdGhlciBwdWJsaWMgbWV0aG9kcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucnVuID0gZnVuY3Rpb24gcnVuKHNvdXJjZU9wZXJhdGlvbikge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodGhpcy5faXNSdW5uaW5nICE9PSB0cnVlLCAnQSBzdG9yZSB1cGRhdGUgd2FzIGRldGVjdGVkIHdpdGhpbiBhbm90aGVyIHN0b3JlIHVwZGF0ZS4gUGxlYXNlICcgKyBcIm1ha2Ugc3VyZSBuZXcgc3RvcmUgdXBkYXRlcyBhcmVuJ3QgYmVpbmcgZXhlY3V0ZWQgd2l0aGluIGFuIFwiICsgJ3VwZGF0ZXIgZnVuY3Rpb24gZm9yIGEgZGlmZmVyZW50IHVwZGF0ZS4nKSA6IHZvaWQgMDtcbiAgICAgIHRoaXMuX2lzUnVubmluZyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdCYWNrdXBSZWJhc2UpIHtcbiAgICAgIGlmICh0aGlzLl9oYXNTdG9yZVNuYXBzaG90KSB7XG4gICAgICAgIHRoaXMuX3N0b3JlLnJlc3RvcmUoKTtcblxuICAgICAgICB0aGlzLl9oYXNTdG9yZVNuYXBzaG90ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGludmFsaWRhdGVkU3RvcmUgPSB0aGlzLl9jb21taXREYXRhKCk7XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ09wdGltaXN0aWNVcGRhdGVzLnNpemUgfHwgdGhpcy5fcGVuZGluZ0JhY2t1cFJlYmFzZSAmJiB0aGlzLl9hcHBsaWVkT3B0aW1pc3RpY1VwZGF0ZXMuc2l6ZSkge1xuICAgICAgaWYgKCF0aGlzLl9oYXNTdG9yZVNuYXBzaG90KSB7XG4gICAgICAgIHRoaXMuX3N0b3JlLnNuYXBzaG90KCk7XG5cbiAgICAgICAgdGhpcy5faGFzU3RvcmVTbmFwc2hvdCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2FwcGx5VXBkYXRlcygpO1xuICAgIH1cblxuICAgIHRoaXMuX3BlbmRpbmdCYWNrdXBSZWJhc2UgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLl9hcHBsaWVkT3B0aW1pc3RpY1VwZGF0ZXMuc2l6ZSA+IDApIHtcbiAgICAgIGlmICghdGhpcy5fZ2NIb2xkKSB7XG4gICAgICAgIHRoaXMuX2djSG9sZCA9IHRoaXMuX3N0b3JlLmhvbGRHQygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5fZ2NIb2xkKSB7XG4gICAgICAgIHRoaXMuX2djSG9sZC5kaXNwb3NlKCk7XG5cbiAgICAgICAgdGhpcy5fZ2NIb2xkID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICB0aGlzLl9pc1J1bm5pbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RvcmUubm90aWZ5KHNvdXJjZU9wZXJhdGlvbiwgaW52YWxpZGF0ZWRTdG9yZSk7XG4gIH1cbiAgLyoqXG4gICAqIF9wdWJsaXNoU291cmNlRnJvbVBheWxvYWQgd2lsbCByZXR1cm4gYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlXG4gICAqIHB1Ymxpc2ggY2F1c2VkIHRoZSBzdG9yZSB0byBiZSBnbG9iYWxseSBpbnZhbGlkYXRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uX3B1Ymxpc2hTb3VyY2VGcm9tUGF5bG9hZCA9IGZ1bmN0aW9uIF9wdWJsaXNoU291cmNlRnJvbVBheWxvYWQocGVuZGluZ1BheWxvYWQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHBheWxvYWQgPSBwZW5kaW5nUGF5bG9hZC5wYXlsb2FkLFxuICAgICAgICBvcGVyYXRpb24gPSBwZW5kaW5nUGF5bG9hZC5vcGVyYXRpb24sXG4gICAgICAgIHVwZGF0ZXIgPSBwZW5kaW5nUGF5bG9hZC51cGRhdGVyO1xuICAgIHZhciBzb3VyY2UgPSBwYXlsb2FkLnNvdXJjZSxcbiAgICAgICAgZmllbGRQYXlsb2FkcyA9IHBheWxvYWQuZmllbGRQYXlsb2FkcztcbiAgICB2YXIgbXV0YXRvciA9IG5ldyBSZWxheVJlY29yZFNvdXJjZU11dGF0b3IodGhpcy5fc3RvcmUuZ2V0U291cmNlKCksIHNvdXJjZSk7XG4gICAgdmFyIHJlY29yZFNvdXJjZVByb3h5ID0gbmV3IFJlbGF5UmVjb3JkU291cmNlUHJveHkobXV0YXRvciwgdGhpcy5fZ2V0RGF0YUlEKTtcblxuICAgIGlmIChmaWVsZFBheWxvYWRzICYmIGZpZWxkUGF5bG9hZHMubGVuZ3RoKSB7XG4gICAgICBmaWVsZFBheWxvYWRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkUGF5bG9hZCkge1xuICAgICAgICB2YXIgaGFuZGxlciA9IF90aGlzLl9oYW5kbGVyUHJvdmlkZXIgJiYgX3RoaXMuX2hhbmRsZXJQcm92aWRlcihmaWVsZFBheWxvYWQuaGFuZGxlKTtcblxuICAgICAgICAhaGFuZGxlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuRW52aXJvbm1lbnQ6IEV4cGVjdGVkIGEgaGFuZGxlciB0byBiZSBwcm92aWRlZCBmb3IgJyArICdoYW5kbGUgYCVzYC4nLCBmaWVsZFBheWxvYWQuaGFuZGxlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIGhhbmRsZXIudXBkYXRlKHJlY29yZFNvdXJjZVByb3h5LCBmaWVsZFBheWxvYWQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHVwZGF0ZXIpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IG9wZXJhdGlvbi5mcmFnbWVudDtcbiAgICAgICEoc2VsZWN0b3IgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkVudmlyb25tZW50OiBFeHBlY3RlZCBhIHNlbGVjdG9yIHRvIGJlIHByb3ZpZGVkIHdpdGggdXBkYXRlciBmdW5jdGlvbi4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgcmVjb3JkU291cmNlU2VsZWN0b3JQcm94eSA9IG5ldyBSZWxheVJlY29yZFNvdXJjZVNlbGVjdG9yUHJveHkobXV0YXRvciwgcmVjb3JkU291cmNlUHJveHksIHNlbGVjdG9yKTtcbiAgICAgIHZhciBzZWxlY3RvckRhdGEgPSBsb29rdXBTZWxlY3Rvcihzb3VyY2UsIHNlbGVjdG9yKTtcbiAgICAgIHVwZGF0ZXIocmVjb3JkU291cmNlU2VsZWN0b3JQcm94eSwgc2VsZWN0b3JEYXRhKTtcbiAgICB9XG5cbiAgICB2YXIgaWRzTWFya2VkRm9ySW52YWxpZGF0aW9uID0gcmVjb3JkU291cmNlUHJveHkuZ2V0SURzTWFya2VkRm9ySW52YWxpZGF0aW9uKCk7XG5cbiAgICB0aGlzLl9zdG9yZS5wdWJsaXNoKHNvdXJjZSwgaWRzTWFya2VkRm9ySW52YWxpZGF0aW9uKTtcblxuICAgIHJldHVybiByZWNvcmRTb3VyY2VQcm94eS5pc1N0b3JlTWFya2VkRm9ySW52YWxpZGF0aW9uKCk7XG4gIH1cbiAgLyoqXG4gICAqIF9jb21taXREYXRhIHdpbGwgcmV0dXJuIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIGFueSBvZlxuICAgKiB0aGUgcGVuZGluZyBjb21taXRzIGNhdXNlZCB0aGUgc3RvcmUgdG8gYmUgZ2xvYmFsbHkgaW52YWxpZGF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9jb21taXREYXRhID0gZnVuY3Rpb24gX2NvbW1pdERhdGEoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAoIXRoaXMuX3BlbmRpbmdEYXRhLnNpemUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgaW52YWxpZGF0ZWRTdG9yZSA9IGZhbHNlO1xuXG4gICAgdGhpcy5fcGVuZGluZ0RhdGEuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgaWYgKGRhdGEua2luZCA9PT0gJ3BheWxvYWQnKSB7XG4gICAgICAgIHZhciBwYXlsb2FkSW52YWxpZGF0ZWRTdG9yZSA9IF90aGlzMi5fcHVibGlzaFNvdXJjZUZyb21QYXlsb2FkKGRhdGEpO1xuXG4gICAgICAgIGludmFsaWRhdGVkU3RvcmUgPSBpbnZhbGlkYXRlZFN0b3JlIHx8IHBheWxvYWRJbnZhbGlkYXRlZFN0b3JlO1xuICAgICAgfSBlbHNlIGlmIChkYXRhLmtpbmQgPT09ICdzb3VyY2UnKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBkYXRhLnNvdXJjZTtcblxuICAgICAgICBfdGhpczIuX3N0b3JlLnB1Ymxpc2goc291cmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB1cGRhdGVyID0gZGF0YS51cGRhdGVyO1xuICAgICAgICB2YXIgc2luayA9IFJlbGF5UmVjb3JkU291cmNlLmNyZWF0ZSgpO1xuICAgICAgICB2YXIgbXV0YXRvciA9IG5ldyBSZWxheVJlY29yZFNvdXJjZU11dGF0b3IoX3RoaXMyLl9zdG9yZS5nZXRTb3VyY2UoKSwgc2luayk7XG4gICAgICAgIHZhciByZWNvcmRTb3VyY2VQcm94eSA9IG5ldyBSZWxheVJlY29yZFNvdXJjZVByb3h5KG11dGF0b3IsIF90aGlzMi5fZ2V0RGF0YUlEKTtcbiAgICAgICAgYXBwbHlXaXRoR3VhcmQodXBkYXRlciwgbnVsbCwgW3JlY29yZFNvdXJjZVByb3h5XSwgbnVsbCwgJ1JlbGF5UHVibGlzaFF1ZXVlOmNvbW1pdERhdGEnKTtcbiAgICAgICAgaW52YWxpZGF0ZWRTdG9yZSA9IGludmFsaWRhdGVkU3RvcmUgfHwgcmVjb3JkU291cmNlUHJveHkuaXNTdG9yZU1hcmtlZEZvckludmFsaWRhdGlvbigpO1xuICAgICAgICB2YXIgaWRzTWFya2VkRm9ySW52YWxpZGF0aW9uID0gcmVjb3JkU291cmNlUHJveHkuZ2V0SURzTWFya2VkRm9ySW52YWxpZGF0aW9uKCk7XG5cbiAgICAgICAgX3RoaXMyLl9zdG9yZS5wdWJsaXNoKHNpbmssIGlkc01hcmtlZEZvckludmFsaWRhdGlvbik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLl9wZW5kaW5nRGF0YS5jbGVhcigpO1xuXG4gICAgcmV0dXJuIGludmFsaWRhdGVkU3RvcmU7XG4gIH1cbiAgLyoqXG4gICAqIE5vdGUgdGhhdCB1bmxpa2UgX2NvbW1pdERhdGEsIF9hcHBseVVwZGF0ZXMgd2lsbCBOT1QgcmV0dXJuIGEgYm9vbGVhblxuICAgKiBpbmRpY2F0aW5nIGlmIHRoZSBzdG9yZSB3YXMgZ2xvYmFsbHkgaW52YWxpZGF0ZWQsIHNpbmNlIGludmFsaWRhdGluZyB0aGVcbiAgICogc3RvcmUgZHVyaW5nIGFuIG9wdGltaXN0aWMgdXBkYXRlIGlzIGEgbm8tb3AuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9hcHBseVVwZGF0ZXMgPSBmdW5jdGlvbiBfYXBwbHlVcGRhdGVzKCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIHNpbmsgPSBSZWxheVJlY29yZFNvdXJjZS5jcmVhdGUoKTtcbiAgICB2YXIgbXV0YXRvciA9IG5ldyBSZWxheVJlY29yZFNvdXJjZU11dGF0b3IodGhpcy5fc3RvcmUuZ2V0U291cmNlKCksIHNpbmspO1xuICAgIHZhciByZWNvcmRTb3VyY2VQcm94eSA9IG5ldyBSZWxheVJlY29yZFNvdXJjZVByb3h5KG11dGF0b3IsIHRoaXMuX2dldERhdGFJRCwgdGhpcy5faGFuZGxlclByb3ZpZGVyKTtcblxuICAgIHZhciBwcm9jZXNzVXBkYXRlID0gZnVuY3Rpb24gcHJvY2Vzc1VwZGF0ZShvcHRpbWlzdGljVXBkYXRlKSB7XG4gICAgICBpZiAob3B0aW1pc3RpY1VwZGF0ZS5zdG9yZVVwZGF0ZXIpIHtcbiAgICAgICAgdmFyIHN0b3JlVXBkYXRlciA9IG9wdGltaXN0aWNVcGRhdGUuc3RvcmVVcGRhdGVyO1xuICAgICAgICBhcHBseVdpdGhHdWFyZChzdG9yZVVwZGF0ZXIsIG51bGwsIFtyZWNvcmRTb3VyY2VQcm94eV0sIG51bGwsICdSZWxheVB1Ymxpc2hRdWV1ZTphcHBseVVwZGF0ZXMnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBvcGVyYXRpb24gPSBvcHRpbWlzdGljVXBkYXRlLm9wZXJhdGlvbixcbiAgICAgICAgICAgIHBheWxvYWQgPSBvcHRpbWlzdGljVXBkYXRlLnBheWxvYWQsXG4gICAgICAgICAgICB1cGRhdGVyID0gb3B0aW1pc3RpY1VwZGF0ZS51cGRhdGVyO1xuICAgICAgICB2YXIgc291cmNlID0gcGF5bG9hZC5zb3VyY2UsXG4gICAgICAgICAgICBmaWVsZFBheWxvYWRzID0gcGF5bG9hZC5maWVsZFBheWxvYWRzO1xuICAgICAgICB2YXIgcmVjb3JkU291cmNlU2VsZWN0b3JQcm94eSA9IG5ldyBSZWxheVJlY29yZFNvdXJjZVNlbGVjdG9yUHJveHkobXV0YXRvciwgcmVjb3JkU291cmNlUHJveHksIG9wZXJhdGlvbi5mcmFnbWVudCk7XG4gICAgICAgIHZhciBzZWxlY3RvckRhdGE7XG5cbiAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgIHJlY29yZFNvdXJjZVByb3h5LnB1Ymxpc2hTb3VyY2Uoc291cmNlLCBmaWVsZFBheWxvYWRzKTtcbiAgICAgICAgICBzZWxlY3RvckRhdGEgPSBsb29rdXBTZWxlY3Rvcihzb3VyY2UsIG9wZXJhdGlvbi5mcmFnbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXBkYXRlcikge1xuICAgICAgICAgIGFwcGx5V2l0aEd1YXJkKHVwZGF0ZXIsIG51bGwsIFtyZWNvcmRTb3VyY2VTZWxlY3RvclByb3h5LCBzZWxlY3RvckRhdGFdLCBudWxsLCAnUmVsYXlQdWJsaXNoUXVldWU6YXBwbHlVcGRhdGVzJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9OyAvLyByZXJ1biBhbGwgdXBkYXRlcnMgaW4gY2FzZSB3ZSBhcmUgcnVubmluZyBhIHJlYmFzZVxuXG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0JhY2t1cFJlYmFzZSAmJiB0aGlzLl9hcHBsaWVkT3B0aW1pc3RpY1VwZGF0ZXMuc2l6ZSkge1xuICAgICAgdGhpcy5fYXBwbGllZE9wdGltaXN0aWNVcGRhdGVzLmZvckVhY2gocHJvY2Vzc1VwZGF0ZSk7XG4gICAgfSAvLyBhcHBseSBhbnkgbmV3IHVwZGF0ZXJzXG5cblxuICAgIGlmICh0aGlzLl9wZW5kaW5nT3B0aW1pc3RpY1VwZGF0ZXMuc2l6ZSkge1xuICAgICAgdGhpcy5fcGVuZGluZ09wdGltaXN0aWNVcGRhdGVzLmZvckVhY2goZnVuY3Rpb24gKG9wdGltaXN0aWNVcGRhdGUpIHtcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZShvcHRpbWlzdGljVXBkYXRlKTtcblxuICAgICAgICBfdGhpczMuX2FwcGxpZWRPcHRpbWlzdGljVXBkYXRlcy5hZGQob3B0aW1pc3RpY1VwZGF0ZSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fcGVuZGluZ09wdGltaXN0aWNVcGRhdGVzLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fc3RvcmUucHVibGlzaChzaW5rKTtcbiAgfTtcblxuICByZXR1cm4gUmVsYXlQdWJsaXNoUXVldWU7XG59KCk7XG5cbmZ1bmN0aW9uIGxvb2t1cFNlbGVjdG9yKHNvdXJjZSwgc2VsZWN0b3IpIHtcbiAgdmFyIHNlbGVjdG9yRGF0YSA9IFJlbGF5UmVhZGVyLnJlYWQoc291cmNlLCBzZWxlY3RvcikuZGF0YTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFyIGRlZXBGcmVlemUgPSByZXF1aXJlKCcuLi91dGlsL2RlZXBGcmVlemUnKTtcblxuICAgIGlmIChzZWxlY3RvckRhdGEpIHtcbiAgICAgIGRlZXBGcmVlemUoc2VsZWN0b3JEYXRhKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VsZWN0b3JEYXRhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5UHVibGlzaFF1ZXVlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIFJlbGF5RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUZlYXR1cmVGbGFncycpO1xuXG52YXIgUmVsYXlNb2Rlcm5SZWNvcmQgPSByZXF1aXJlKCcuL1JlbGF5TW9kZXJuUmVjb3JkJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUNvbmNyZXRlTm9kZScpLFxuICAgIENMSUVOVF9FWFRFTlNJT04gPSBfcmVxdWlyZS5DTElFTlRfRVhURU5TSU9OLFxuICAgIENPTkRJVElPTiA9IF9yZXF1aXJlLkNPTkRJVElPTixcbiAgICBERUZFUiA9IF9yZXF1aXJlLkRFRkVSLFxuICAgIEZMSUdIVF9GSUVMRCA9IF9yZXF1aXJlLkZMSUdIVF9GSUVMRCxcbiAgICBGUkFHTUVOVF9TUFJFQUQgPSBfcmVxdWlyZS5GUkFHTUVOVF9TUFJFQUQsXG4gICAgSU5MSU5FX0RBVEFfRlJBR01FTlRfU1BSRUFEID0gX3JlcXVpcmUuSU5MSU5FX0RBVEFfRlJBR01FTlRfU1BSRUFELFxuICAgIElOTElORV9GUkFHTUVOVCA9IF9yZXF1aXJlLklOTElORV9GUkFHTUVOVCxcbiAgICBMSU5LRURfRklFTEQgPSBfcmVxdWlyZS5MSU5LRURfRklFTEQsXG4gICAgTU9EVUxFX0lNUE9SVCA9IF9yZXF1aXJlLk1PRFVMRV9JTVBPUlQsXG4gICAgUkVRVUlSRURfRklFTEQgPSBfcmVxdWlyZS5SRVFVSVJFRF9GSUVMRCxcbiAgICBSRUxBWV9SRVNPTFZFUiA9IF9yZXF1aXJlLlJFTEFZX1JFU09MVkVSLFxuICAgIFNDQUxBUl9GSUVMRCA9IF9yZXF1aXJlLlNDQUxBUl9GSUVMRCxcbiAgICBTVFJFQU0gPSBfcmVxdWlyZS5TVFJFQU07XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuL1JlbGF5U3RvcmVSZWFjdEZsaWdodFV0aWxzJyksXG4gICAgZ2V0UmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZSA9IF9yZXF1aXJlMi5nZXRSZWFjdEZsaWdodENsaWVudFJlc3BvbnNlO1xuXG52YXIgX3JlcXVpcmUzID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlVXRpbHMnKSxcbiAgICBGUkFHTUVOVFNfS0VZID0gX3JlcXVpcmUzLkZSQUdNRU5UU19LRVksXG4gICAgRlJBR01FTlRfT1dORVJfS0VZID0gX3JlcXVpcmUzLkZSQUdNRU5UX09XTkVSX0tFWSxcbiAgICBGUkFHTUVOVF9QUk9QX05BTUVfS0VZID0gX3JlcXVpcmUzLkZSQUdNRU5UX1BST1BfTkFNRV9LRVksXG4gICAgSURfS0VZID0gX3JlcXVpcmUzLklEX0tFWSxcbiAgICBJU19XSVRISU5fVU5NQVRDSEVEX1RZUEVfUkVGSU5FTUVOVCA9IF9yZXF1aXJlMy5JU19XSVRISU5fVU5NQVRDSEVEX1RZUEVfUkVGSU5FTUVOVCxcbiAgICBNT0RVTEVfQ09NUE9ORU5UX0tFWSA9IF9yZXF1aXJlMy5NT0RVTEVfQ09NUE9ORU5UX0tFWSxcbiAgICBST09UX0lEID0gX3JlcXVpcmUzLlJPT1RfSUQsXG4gICAgZ2V0QXJndW1lbnRWYWx1ZXMgPSBfcmVxdWlyZTMuZ2V0QXJndW1lbnRWYWx1ZXMsXG4gICAgZ2V0U3RvcmFnZUtleSA9IF9yZXF1aXJlMy5nZXRTdG9yYWdlS2V5LFxuICAgIGdldE1vZHVsZUNvbXBvbmVudEtleSA9IF9yZXF1aXJlMy5nZXRNb2R1bGVDb21wb25lbnRLZXk7XG5cbnZhciBfcmVxdWlyZTQgPSByZXF1aXJlKCcuL1Jlc29sdmVyRnJhZ21lbnRzJyksXG4gICAgd2l0aFJlc29sdmVyQ29udGV4dCA9IF9yZXF1aXJlNC53aXRoUmVzb2x2ZXJDb250ZXh0O1xuXG52YXIgX3JlcXVpcmU1ID0gcmVxdWlyZSgnLi9UeXBlSUQnKSxcbiAgICBnZW5lcmF0ZVR5cGVJRCA9IF9yZXF1aXJlNS5nZW5lcmF0ZVR5cGVJRDtcblxuZnVuY3Rpb24gcmVhZChyZWNvcmRTb3VyY2UsIHNlbGVjdG9yKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgUmVsYXlSZWFkZXIocmVjb3JkU291cmNlLCBzZWxlY3Rvcik7XG4gIHJldHVybiByZWFkZXIucmVhZCgpO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxudmFyIFJlbGF5UmVhZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVsYXlSZWFkZXIocmVjb3JkU291cmNlLCBzZWxlY3Rvcikge1xuICAgIHRoaXMuX2lzTWlzc2luZ0RhdGEgPSBmYWxzZTtcbiAgICB0aGlzLl9pc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50ID0gZmFsc2U7XG4gICAgdGhpcy5fbWlzc2luZ1JlcXVpcmVkRmllbGRzID0gbnVsbDtcbiAgICB0aGlzLl9vd25lciA9IHNlbGVjdG9yLm93bmVyO1xuICAgIHRoaXMuX3JlY29yZFNvdXJjZSA9IHJlY29yZFNvdXJjZTtcbiAgICB0aGlzLl9zZWVuUmVjb3JkcyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgIHRoaXMuX3ZhcmlhYmxlcyA9IHNlbGVjdG9yLnZhcmlhYmxlcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZWxheVJlYWRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlYWQgPSBmdW5jdGlvbiByZWFkKCkge1xuICAgIHZhciBfdGhpcyRfc2VsZWN0b3IgPSB0aGlzLl9zZWxlY3RvcixcbiAgICAgICAgbm9kZSA9IF90aGlzJF9zZWxlY3Rvci5ub2RlLFxuICAgICAgICBkYXRhSUQgPSBfdGhpcyRfc2VsZWN0b3IuZGF0YUlELFxuICAgICAgICBpc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50ID0gX3RoaXMkX3NlbGVjdG9yLmlzV2l0aGluVW5tYXRjaGVkVHlwZVJlZmluZW1lbnQ7XG4gICAgdmFyIGFic3RyYWN0S2V5ID0gbm9kZS5hYnN0cmFjdEtleTtcblxuICAgIHZhciByZWNvcmQgPSB0aGlzLl9yZWNvcmRTb3VyY2UuZ2V0KGRhdGFJRCk7IC8vIFJlbGF5IGhpc3RvcmljYWxseSBhbGxvd2VkIGNoaWxkIGZyYWdtZW50cyB0byBiZSByZWFkIGV2ZW4gaWYgdGhlIHJvb3Qgb2JqZWN0XG4gICAgLy8gZGlkIG5vdCBtYXRjaCB0aGUgdHlwZSBvZiB0aGUgZnJhZ21lbnQ6IGVpdGhlciB0aGUgcm9vdCBvYmplY3QgaGFzIGEgZGlmZmVyZW50XG4gICAgLy8gY29uY3JldGUgdHlwZSB0aGFuIHRoZSBmcmFnbWVudCAoZm9yIGNvbmNyZXRlIGZyYWdtZW50cykgb3IgdGhlIHJvb3Qgb2JqZWN0IGRvZXNcbiAgICAvLyBub3QgY29uZm9ybSB0byB0aGUgaW50ZXJmYWNlL3VuaW9uIGZvciBhYnN0cmFjdCBmcmFnbWVudHMuXG4gICAgLy8gRm9yIHN1c3BlbnNlIHB1cnBvc2VzLCBob3dldmVyLCB3ZSB3YW50IHRvIGFjY3VyYXRlbHkgY29tcHV0ZSB3aGV0aGVyIGFueSBkYXRhXG4gICAgLy8gaXMgbWlzc2luZzogYnV0IGlmIHRoZSBmcmFnbWVudCB0eXBlIGRvZXNuJ3QgbWF0Y2ggKG9yIGEgcGFyZW50IHR5cGUgZGlkbid0XG4gICAgLy8gbWF0Y2gpLCB0aGVuIG5vIGRhdGEgaXMgZXhwZWN0ZWQgdG8gYmUgcHJlc2VudC5cbiAgICAvLyBCeSBkZWZhdWx0IGRhdGEgaXMgZXhwZWN0ZWQgdG8gYmUgcHJlc2VudCB1bmxlc3MgdGhpcyBzZWxlY3RvciB3YXMgcmVhZCBvdXRcbiAgICAvLyBmcm9tIHdpdGhpbiBhIG5vbi1tYXRjaGluZyB0eXBlIHJlZmluZW1lbnQgaW4gYSBwYXJlbnQgZnJhZ21lbnQ6XG5cblxuICAgIHZhciBpc0RhdGFFeHBlY3RlZFRvQmVQcmVzZW50ID0gIWlzV2l0aGluVW5tYXRjaGVkVHlwZVJlZmluZW1lbnQ7IC8vIElmIHRoaXMgaXMgYSBjb25jcmV0ZSBmcmFnbWVudCBhbmQgdGhlIGNvbmNyZXRlIHR5cGUgb2YgdGhlIHJlY29yZCBkb2VzIG5vdFxuICAgIC8vIG1hdGNoLCB0aGVuIG5vIGRhdGEgaXMgZXhwZWN0ZWQgdG8gYmUgcHJlc2VudC5cblxuICAgIGlmIChpc0RhdGFFeHBlY3RlZFRvQmVQcmVzZW50ICYmIGFic3RyYWN0S2V5ID09IG51bGwgJiYgcmVjb3JkICE9IG51bGwpIHtcbiAgICAgIHZhciByZWNvcmRUeXBlID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0VHlwZShyZWNvcmQpO1xuXG4gICAgICBpZiAocmVjb3JkVHlwZSAhPT0gbm9kZS50eXBlICYmIGRhdGFJRCAhPT0gUk9PVF9JRCkge1xuICAgICAgICBpc0RhdGFFeHBlY3RlZFRvQmVQcmVzZW50ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSAvLyBJZiB0aGlzIGlzIGFuIGFic3RyYWN0IGZyYWdtZW50IChhbmQgdGhlIHByZWNpc2UgcmVmaW5lbWVudCBHSyBpcyBlbmFibGVkKVxuICAgIC8vIHRoZW4gZGF0YSBpcyBvbmx5IGV4cGVjdGVkIHRvIGJlIHByZXNlbnQgaWYgdGhlIHJlY29yZCB0eXBlIGlzIGtub3duIHRvXG4gICAgLy8gaW1wbGVtZW50IHRoZSBpbnRlcmZhY2UuIElmIHdlIGFyZW4ndCBzdXJlIHdoZXRoZXIgdGhlIHJlY29yZCBpbXBsZW1lbnRzXG4gICAgLy8gdGhlIGludGVyZmFjZSwgdGhhdCBpdHNlbGYgY29uc3RpdHV0ZXMgXCJleHBlY3RlZFwiIGRhdGEgYmVpbmcgbWlzc2luZy5cblxuXG4gICAgaWYgKGlzRGF0YUV4cGVjdGVkVG9CZVByZXNlbnQgJiYgYWJzdHJhY3RLZXkgIT0gbnVsbCAmJiByZWNvcmQgIT0gbnVsbCAmJiBSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUFJFQ0lTRV9UWVBFX1JFRklORU1FTlQpIHtcbiAgICAgIHZhciBfcmVjb3JkVHlwZSA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFR5cGUocmVjb3JkKTtcblxuICAgICAgdmFyIHR5cGVJRCA9IGdlbmVyYXRlVHlwZUlEKF9yZWNvcmRUeXBlKTtcblxuICAgICAgdmFyIHR5cGVSZWNvcmQgPSB0aGlzLl9yZWNvcmRTb3VyY2UuZ2V0KHR5cGVJRCk7XG5cbiAgICAgIHZhciBpbXBsZW1lbnRzSW50ZXJmYWNlID0gdHlwZVJlY29yZCAhPSBudWxsID8gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0VmFsdWUodHlwZVJlY29yZCwgYWJzdHJhY3RLZXkpIDogbnVsbDtcblxuICAgICAgaWYgKGltcGxlbWVudHNJbnRlcmZhY2UgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIFR5cGUga25vd24gdG8gbm90IGltcGxlbWVudCB0aGUgaW50ZXJmYWNlXG4gICAgICAgIGlzRGF0YUV4cGVjdGVkVG9CZVByZXNlbnQgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoaW1wbGVtZW50c0ludGVyZmFjZSA9PSBudWxsKSB7XG4gICAgICAgIC8vIERvbid0IGtub3cgaWYgdGhlIHR5cGUgaW1wbGVtZW50cyB0aGUgaW50ZXJmYWNlIG9yIG5vdFxuICAgICAgICB0aGlzLl9pc01pc3NpbmdEYXRhID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50ID0gIWlzRGF0YUV4cGVjdGVkVG9CZVByZXNlbnQ7XG5cbiAgICB2YXIgZGF0YSA9IHRoaXMuX3RyYXZlcnNlKG5vZGUsIGRhdGFJRCwgbnVsbCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIGlzTWlzc2luZ0RhdGE6IHRoaXMuX2lzTWlzc2luZ0RhdGEgJiYgaXNEYXRhRXhwZWN0ZWRUb0JlUHJlc2VudCxcbiAgICAgIHNlZW5SZWNvcmRzOiB0aGlzLl9zZWVuUmVjb3JkcyxcbiAgICAgIHNlbGVjdG9yOiB0aGlzLl9zZWxlY3RvcixcbiAgICAgIG1pc3NpbmdSZXF1aXJlZEZpZWxkczogdGhpcy5fbWlzc2luZ1JlcXVpcmVkRmllbGRzXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uX3RyYXZlcnNlID0gZnVuY3Rpb24gX3RyYXZlcnNlKG5vZGUsIGRhdGFJRCwgcHJldkRhdGEpIHtcbiAgICB2YXIgcmVjb3JkID0gdGhpcy5fcmVjb3JkU291cmNlLmdldChkYXRhSUQpO1xuXG4gICAgdGhpcy5fc2VlblJlY29yZHMuYWRkKGRhdGFJRCk7XG5cbiAgICBpZiAocmVjb3JkID09IG51bGwpIHtcbiAgICAgIGlmIChyZWNvcmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9pc01pc3NpbmdEYXRhID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHByZXZEYXRhIHx8IHt9O1xuXG4gICAgdmFyIGhhZFJlcXVpcmVkRGF0YSA9IHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhub2RlLnNlbGVjdGlvbnMsIHJlY29yZCwgZGF0YSk7XG5cbiAgICByZXR1cm4gaGFkUmVxdWlyZWREYXRhID8gZGF0YSA6IG51bGw7XG4gIH07XG5cbiAgX3Byb3RvLl9nZXRWYXJpYWJsZVZhbHVlID0gZnVuY3Rpb24gX2dldFZhcmlhYmxlVmFsdWUobmFtZSkge1xuICAgICF0aGlzLl92YXJpYWJsZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlYWRlcigpOiBVbmRlZmluZWQgdmFyaWFibGUgYCVzYC4nLCBuYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7IC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuXG4gICAgcmV0dXJuIHRoaXMuX3ZhcmlhYmxlc1tuYW1lXTtcbiAgfTtcblxuICBfcHJvdG8uX21heWJlUmVwb3J0VW5leHBlY3RlZE51bGwgPSBmdW5jdGlvbiBfbWF5YmVSZXBvcnRVbmV4cGVjdGVkTnVsbChmaWVsZFBhdGgsIGFjdGlvbiwgcmVjb3JkKSB7XG4gICAgdmFyIF90aGlzJF9taXNzaW5nUmVxdWlyZTtcblxuICAgIGlmICgoKF90aGlzJF9taXNzaW5nUmVxdWlyZSA9IHRoaXMuX21pc3NpbmdSZXF1aXJlZEZpZWxkcykgPT09IG51bGwgfHwgX3RoaXMkX21pc3NpbmdSZXF1aXJlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRfbWlzc2luZ1JlcXVpcmUuYWN0aW9uKSA9PT0gJ1RIUk9XJykge1xuICAgICAgLy8gQ2hhaW5lZCBAcmVxdWlyZWQgZGlyZWN0aXZlcyBtYXkgY2F1c2UgYSBwYXJlbnQgYEByZXF1aXJlZChhY3Rpb246XG4gICAgICAvLyBUSFJPVylgIGZpZWxkIHRvIGJlY29tZSBudWxsLCBzbyB0aGUgZmlyc3QgbWlzc2luZyBmaWVsZCB3ZVxuICAgICAgLy8gZW5jb3VudGVyIGlzIGxpa2VseSB0byBiZSB0aGUgcm9vdCBjYXVzZSBvZiB0aGUgZXJyb3IuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG93bmVyID0gdGhpcy5fc2VsZWN0b3Iubm9kZS5uYW1lO1xuXG4gICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgIGNhc2UgJ1RIUk9XJzpcbiAgICAgICAgdGhpcy5fbWlzc2luZ1JlcXVpcmVkRmllbGRzID0ge1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGZpZWxkOiB7XG4gICAgICAgICAgICBwYXRoOiBmaWVsZFBhdGgsXG4gICAgICAgICAgICBvd25lcjogb3duZXJcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSAnTE9HJzpcbiAgICAgICAgaWYgKHRoaXMuX21pc3NpbmdSZXF1aXJlZEZpZWxkcyA9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fbWlzc2luZ1JlcXVpcmVkRmllbGRzID0ge1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBmaWVsZHM6IFtdXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX21pc3NpbmdSZXF1aXJlZEZpZWxkcy5maWVsZHMucHVzaCh7XG4gICAgICAgICAgcGF0aDogZmllbGRQYXRoLFxuICAgICAgICAgIG93bmVyOiBvd25lclxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFjdGlvbjtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl90cmF2ZXJzZVNlbGVjdGlvbnMgPSBmdW5jdGlvbiBfdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbnMsIHJlY29yZCwgZGF0YSlcbiAgLyogaGFkIGFsbCBleHBlY3RlZCBkYXRhICovXG4gIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWxlY3Rpb24gPSBzZWxlY3Rpb25zW2ldO1xuXG4gICAgICBzd2l0Y2ggKHNlbGVjdGlvbi5raW5kKSB7XG4gICAgICAgIGNhc2UgUkVRVUlSRURfRklFTEQ6XG4gICAgICAgICAgIVJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9SRVFVSVJFRF9ESVJFQ1RJVkVTID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWFkZXIoKTogRW5jb3VudGVyZWQgYSBgQHJlcXVpcmVkYCBkaXJlY3RpdmUgYXQgcGF0aCBcIiVzXCIgaW4gYCVzYCB3aXRob3V0IHRoZSBgRU5BQkxFX1JFUVVJUkVEX0RJUkVDVElWRVNgIGZlYXR1cmUgZmxhZyBlbmFibGVkLicsIHNlbGVjdGlvbi5wYXRoLCB0aGlzLl9zZWxlY3Rvci5ub2RlLm5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgICAgICAgIHZhciBmaWVsZFZhbHVlID0gdGhpcy5fcmVhZFJlcXVpcmVkRmllbGQoc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgaWYgKGZpZWxkVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHNlbGVjdGlvbi5hY3Rpb247XG5cbiAgICAgICAgICAgIGlmIChhY3Rpb24gIT09ICdOT05FJykge1xuICAgICAgICAgICAgICB0aGlzLl9tYXliZVJlcG9ydFVuZXhwZWN0ZWROdWxsKHNlbGVjdGlvbi5wYXRoLCBhY3Rpb24sIHJlY29yZCk7XG4gICAgICAgICAgICB9IC8vIFdlIGFyZSBnb2luZyB0byB0aHJvdywgb3Igb3VyIHBhcmVudCBpcyBnb2luZyB0byBnZXQgbnVsbGVkIG91dC5cbiAgICAgICAgICAgIC8vIEVpdGhlciB3YXksIHNpYmxpbmcgdmFsdWVzIGFyZSBnb2luZyB0byBiZSBpZ25vcmVkLCBzbyB3ZSBjYW5cbiAgICAgICAgICAgIC8vIGJhaWwgZWFybHkgaGVyZSBhcyBhbiBvcHRpbWl6YXRpb24uXG5cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgU0NBTEFSX0ZJRUxEOlxuICAgICAgICAgIHRoaXMuX3JlYWRTY2FsYXIoc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBMSU5LRURfRklFTEQ6XG4gICAgICAgICAgaWYgKHNlbGVjdGlvbi5wbHVyYWwpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlYWRQbHVyYWxMaW5rKHNlbGVjdGlvbiwgcmVjb3JkLCBkYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVhZExpbmsoc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ09ORElUSU9OOlxuICAgICAgICAgIHZhciBjb25kaXRpb25WYWx1ZSA9IHRoaXMuX2dldFZhcmlhYmxlVmFsdWUoc2VsZWN0aW9uLmNvbmRpdGlvbik7XG5cbiAgICAgICAgICBpZiAoY29uZGl0aW9uVmFsdWUgPT09IHNlbGVjdGlvbi5wYXNzaW5nVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBoYXNFeHBlY3RlZERhdGEgPSB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLnNlbGVjdGlvbnMsIHJlY29yZCwgZGF0YSk7XG5cbiAgICAgICAgICAgIGlmICghaGFzRXhwZWN0ZWREYXRhKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIElOTElORV9GUkFHTUVOVDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgYWJzdHJhY3RLZXkgPSBzZWxlY3Rpb24uYWJzdHJhY3RLZXk7XG5cbiAgICAgICAgICAgIGlmIChhYnN0cmFjdEtleSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgIC8vIGNvbmNyZXRlIHR5cGUgcmVmaW5lbWVudDogb25seSByZWFkIGRhdGEgaWYgdGhlIHR5cGUgZXhhY3RseSBtYXRjaGVzXG4gICAgICAgICAgICAgIHZhciB0eXBlTmFtZSA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFR5cGUocmVjb3JkKTtcblxuICAgICAgICAgICAgICBpZiAodHlwZU5hbWUgIT0gbnVsbCAmJiB0eXBlTmFtZSA9PT0gc2VsZWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2hhc0V4cGVjdGVkRGF0YSA9IHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uc2VsZWN0aW9ucywgcmVjb3JkLCBkYXRhKTtcblxuICAgICAgICAgICAgICAgIGlmICghX2hhc0V4cGVjdGVkRGF0YSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUFJFQ0lTRV9UWVBFX1JFRklORU1FTlQpIHtcbiAgICAgICAgICAgICAgLy8gU2ltaWxhciB0byB0aGUgbG9naWMgaW4gcmVhZCgpOiBkYXRhIGlzIG9ubHkgZXhwZWN0ZWQgdG8gYmUgcHJlc2VudFxuICAgICAgICAgICAgICAvLyBpZiB0aGUgcmVjb3JkIGlzIGtub3duIHRvIGNvbmZvcm0gdG8gdGhlIGludGVyZmFjZS4gSWYgd2UgZG9uJ3Qga25vd1xuICAgICAgICAgICAgICAvLyB3aGV0aGVyIHRoZSB0eXBlIGNvbmZvcm1zIG9yIG5vdCwgdGhhdCBjb25zdGl0dXRlcyBtaXNzaW5nIGRhdGEuXG4gICAgICAgICAgICAgIC8vIHN0b3JlIGZsYWdzIHRvIHJlc2V0IGFmdGVyIHJlYWRpbmdcbiAgICAgICAgICAgICAgdmFyIHBhcmVudElzTWlzc2luZ0RhdGEgPSB0aGlzLl9pc01pc3NpbmdEYXRhO1xuICAgICAgICAgICAgICB2YXIgcGFyZW50SXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudCA9IHRoaXMuX2lzV2l0aGluVW5tYXRjaGVkVHlwZVJlZmluZW1lbnQ7XG5cbiAgICAgICAgICAgICAgdmFyIF90eXBlTmFtZSA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFR5cGUocmVjb3JkKTtcblxuICAgICAgICAgICAgICB2YXIgdHlwZUlEID0gZ2VuZXJhdGVUeXBlSUQoX3R5cGVOYW1lKTtcblxuICAgICAgICAgICAgICB2YXIgdHlwZVJlY29yZCA9IHRoaXMuX3JlY29yZFNvdXJjZS5nZXQodHlwZUlEKTtcblxuICAgICAgICAgICAgICB2YXIgaW1wbGVtZW50c0ludGVyZmFjZSA9IHR5cGVSZWNvcmQgIT0gbnVsbCA/IFJlbGF5TW9kZXJuUmVjb3JkLmdldFZhbHVlKHR5cGVSZWNvcmQsIGFic3RyYWN0S2V5KSA6IG51bGw7XG4gICAgICAgICAgICAgIHRoaXMuX2lzV2l0aGluVW5tYXRjaGVkVHlwZVJlZmluZW1lbnQgPSBwYXJlbnRJc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50IHx8IGltcGxlbWVudHNJbnRlcmZhY2UgPT09IGZhbHNlO1xuXG4gICAgICAgICAgICAgIHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uc2VsZWN0aW9ucywgcmVjb3JkLCBkYXRhKTtcblxuICAgICAgICAgICAgICB0aGlzLl9pc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50ID0gcGFyZW50SXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudDtcblxuICAgICAgICAgICAgICBpZiAoaW1wbGVtZW50c0ludGVyZmFjZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAvLyBUeXBlIGtub3duIHRvIG5vdCBpbXBsZW1lbnQgdGhlIGludGVyZmFjZSwgbm8gZGF0YSBleHBlY3RlZFxuICAgICAgICAgICAgICAgIHRoaXMuX2lzTWlzc2luZ0RhdGEgPSBwYXJlbnRJc01pc3NpbmdEYXRhO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGltcGxlbWVudHNJbnRlcmZhY2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIERvbid0IGtub3cgaWYgdGhlIHR5cGUgaW1wbGVtZW50cyB0aGUgaW50ZXJmYWNlIG9yIG5vdFxuICAgICAgICAgICAgICAgIHRoaXMuX2lzTWlzc2luZ0RhdGEgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBsZWdhY3kgYmVoYXZpb3IgZm9yIGFic3RyYWN0IHJlZmluZW1lbnRzOiBhbHdheXMgcmVhZCBldmVuXG4gICAgICAgICAgICAgIC8vIGlmIHRoZSB0eXBlIGRvZXNuJ3QgY29uZm9ybSBhbmQgZG9uJ3QgcmVzZXQgaXNNaXNzaW5nRGF0YVxuICAgICAgICAgICAgICB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLnNlbGVjdGlvbnMsIHJlY29yZCwgZGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIFJFTEFZX1JFU09MVkVSOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmICghUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX1JFTEFZX1JFU09MVkVSUykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlbGF5IFJlc29sdmVyIGZpZWxkcyBhcmUgbm90IHlldCBzdXBwb3J0ZWQuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3JlYWRSZXNvbHZlckZpZWxkKHNlbGVjdGlvbiwgcmVjb3JkLCBkYXRhKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgRlJBR01FTlRfU1BSRUFEOlxuICAgICAgICAgIHRoaXMuX2NyZWF0ZUZyYWdtZW50UG9pbnRlcihzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIE1PRFVMRV9JTVBPUlQ6XG4gICAgICAgICAgdGhpcy5fcmVhZE1vZHVsZUltcG9ydChzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIElOTElORV9EQVRBX0ZSQUdNRU5UX1NQUkVBRDpcbiAgICAgICAgICB0aGlzLl9jcmVhdGVJbmxpbmVEYXRhT3JSZXNvbHZlckZyYWdtZW50UG9pbnRlcihzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIERFRkVSOlxuICAgICAgICBjYXNlIENMSUVOVF9FWFRFTlNJT046XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIGlzTWlzc2luZ0RhdGEgPSB0aGlzLl9pc01pc3NpbmdEYXRhO1xuXG4gICAgICAgICAgICB2YXIgX2hhc0V4cGVjdGVkRGF0YTIgPSB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLnNlbGVjdGlvbnMsIHJlY29yZCwgZGF0YSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2lzTWlzc2luZ0RhdGEgPSBpc01pc3NpbmdEYXRhO1xuXG4gICAgICAgICAgICBpZiAoIV9oYXNFeHBlY3RlZERhdGEyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgU1RSRUFNOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBfaGFzRXhwZWN0ZWREYXRhMyA9IHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uc2VsZWN0aW9ucywgcmVjb3JkLCBkYXRhKTtcblxuICAgICAgICAgICAgaWYgKCFfaGFzRXhwZWN0ZWREYXRhMykge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIEZMSUdIVF9GSUVMRDpcbiAgICAgICAgICBpZiAoUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX1JFQUNUX0ZMSUdIVF9DT01QT05FTlRfRklFTEQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlYWRGbGlnaHRGaWVsZChzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmxpZ2h0IGZpZWxkcyBhcmUgbm90IHlldCBzdXBwb3J0ZWQuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBzZWxlY3Rpb247XG4gICAgICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWFkZXIoKTogVW5leHBlY3RlZCBhc3Qga2luZCBgJXNgLicsIHNlbGVjdGlvbi5raW5kKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLl9yZWFkUmVxdWlyZWRGaWVsZCA9IGZ1bmN0aW9uIF9yZWFkUmVxdWlyZWRGaWVsZChzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSkge1xuICAgIHN3aXRjaCAoc2VsZWN0aW9uLmZpZWxkLmtpbmQpIHtcbiAgICAgIGNhc2UgU0NBTEFSX0ZJRUxEOlxuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZFNjYWxhcihzZWxlY3Rpb24uZmllbGQsIHJlY29yZCwgZGF0YSk7XG5cbiAgICAgIGNhc2UgTElOS0VEX0ZJRUxEOlxuICAgICAgICBpZiAoc2VsZWN0aW9uLmZpZWxkLnBsdXJhbCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkUGx1cmFsTGluayhzZWxlY3Rpb24uZmllbGQsIHJlY29yZCwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWRMaW5rKHNlbGVjdGlvbi5maWVsZCwgcmVjb3JkLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzZWxlY3Rpb24uZmllbGQua2luZDtcbiAgICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWFkZXIoKTogVW5leHBlY3RlZCBhc3Qga2luZCBgJXNgLicsIHNlbGVjdGlvbi5raW5kKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fcmVhZFJlc29sdmVyRmllbGQgPSBmdW5jdGlvbiBfcmVhZFJlc29sdmVyRmllbGQoc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIG5hbWUgPSBzZWxlY3Rpb24ubmFtZSxcbiAgICAgICAgYWxpYXMgPSBzZWxlY3Rpb24uYWxpYXMsXG4gICAgICAgIHJlc29sdmVyTW9kdWxlID0gc2VsZWN0aW9uLnJlc29sdmVyTW9kdWxlLFxuICAgICAgICBmcmFnbWVudCA9IHNlbGVjdGlvbi5mcmFnbWVudDtcbiAgICB2YXIga2V5ID0ge1xuICAgICAgX19pZDogUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0RGF0YUlEKHJlY29yZCksXG4gICAgICBfX2ZyYWdtZW50T3duZXI6IHRoaXMuX293bmVyLFxuICAgICAgX19mcmFnbWVudHM6ICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIGZyYWdtZW50Lm5hbWUsIHt9KVxuICAgIH07XG4gICAgdmFyIHJlc29sdmVyQ29udGV4dCA9IHtcbiAgICAgIGdldERhdGFGb3JSZXNvbHZlckZyYWdtZW50OiBmdW5jdGlvbiBnZXREYXRhRm9yUmVzb2x2ZXJGcmFnbWVudChzaW5ndWxhclJlYWRlclNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBfcmVzb2x2ZXJGcmFnbWVudERhdGE7XG5cbiAgICAgICAgdmFyIHJlc29sdmVyRnJhZ21lbnREYXRhID0ge307XG5cbiAgICAgICAgX3RoaXMuX2NyZWF0ZUlubGluZURhdGFPclJlc29sdmVyRnJhZ21lbnRQb2ludGVyKHNpbmd1bGFyUmVhZGVyU2VsZWN0b3Iubm9kZSwgcmVjb3JkLCByZXNvbHZlckZyYWdtZW50RGF0YSk7XG5cbiAgICAgICAgdmFyIGFuc3dlciA9IChfcmVzb2x2ZXJGcmFnbWVudERhdGEgPSByZXNvbHZlckZyYWdtZW50RGF0YVtGUkFHTUVOVFNfS0VZXSkgPT09IG51bGwgfHwgX3Jlc29sdmVyRnJhZ21lbnREYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcmVzb2x2ZXJGcmFnbWVudERhdGFbZnJhZ21lbnQubmFtZV07XG4gICAgICAgICEodHlwZW9mIGFuc3dlciA9PT0gJ29iamVjdCcgJiYgYW5zd2VyICE9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJFeHBlY3RlZCByZWFkZXIgZGF0YSB0byBjb250YWluIGEgX19mcmFnbWVudHMgcHJvcGVydHkgd2l0aCBhIHByb3BlcnR5IGZvciB0aGUgZnJhZ21lbnQgbmFtZWQgXCIuY29uY2F0KGZyYWdtZW50Lm5hbWUsIFwiLCBidXQgaXQgaXMgbWlzc2luZy5cIikpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIGFuc3dlcjtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZXNvbHZlclJlc3VsdCA9IHdpdGhSZXNvbHZlckNvbnRleHQocmVzb2x2ZXJDb250ZXh0LCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSAtIHJlc29sdmVyIG1vZHVsZSdzIHR5cGUgc2lnbmF0dXJlIGlzIGEgbGllXG4gICAgICAgIHJlc29sdmVyTW9kdWxlKGtleSlcbiAgICAgICk7XG4gICAgfSk7XG4gICAgZGF0YVthbGlhcyAhPT0gbnVsbCAmJiBhbGlhcyAhPT0gdm9pZCAwID8gYWxpYXMgOiBuYW1lXSA9IHJlc29sdmVyUmVzdWx0O1xuICAgIHJldHVybiByZXNvbHZlclJlc3VsdDtcbiAgfTtcblxuICBfcHJvdG8uX3JlYWRGbGlnaHRGaWVsZCA9IGZ1bmN0aW9uIF9yZWFkRmxpZ2h0RmllbGQoZmllbGQsIHJlY29yZCwgZGF0YSkge1xuICAgIHZhciBfZmllbGQkYWxpYXM7XG5cbiAgICB2YXIgYXBwbGljYXRpb25OYW1lID0gKF9maWVsZCRhbGlhcyA9IGZpZWxkLmFsaWFzKSAhPT0gbnVsbCAmJiBfZmllbGQkYWxpYXMgIT09IHZvaWQgMCA/IF9maWVsZCRhbGlhcyA6IGZpZWxkLm5hbWU7XG4gICAgdmFyIHN0b3JhZ2VLZXkgPSBnZXRTdG9yYWdlS2V5KGZpZWxkLCB0aGlzLl92YXJpYWJsZXMpO1xuICAgIHZhciByZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkSUQgPSBSZWxheU1vZGVyblJlY29yZC5nZXRMaW5rZWRSZWNvcmRJRChyZWNvcmQsIHN0b3JhZ2VLZXkpO1xuXG4gICAgaWYgKHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmRJRCA9PSBudWxsKSB7XG4gICAgICBkYXRhW2FwcGxpY2F0aW9uTmFtZV0gPSByZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkSUQ7XG5cbiAgICAgIGlmIChyZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkSUQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9pc01pc3NpbmdEYXRhID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmRJRDtcbiAgICB9XG5cbiAgICB2YXIgcmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZCA9IHRoaXMuX3JlY29yZFNvdXJjZS5nZXQocmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZElEKTtcblxuICAgIHRoaXMuX3NlZW5SZWNvcmRzLmFkZChyZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkSUQpO1xuXG4gICAgaWYgKHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmQgPT0gbnVsbCkge1xuICAgICAgZGF0YVthcHBsaWNhdGlvbk5hbWVdID0gcmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZDtcblxuICAgICAgaWYgKHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9pc01pc3NpbmdEYXRhID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmQ7XG4gICAgfVxuXG4gICAgdmFyIGNsaWVudFJlc3BvbnNlID0gZ2V0UmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZShyZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkKTtcbiAgICBkYXRhW2FwcGxpY2F0aW9uTmFtZV0gPSBjbGllbnRSZXNwb25zZTtcbiAgICByZXR1cm4gY2xpZW50UmVzcG9uc2U7XG4gIH07XG5cbiAgX3Byb3RvLl9yZWFkU2NhbGFyID0gZnVuY3Rpb24gX3JlYWRTY2FsYXIoZmllbGQsIHJlY29yZCwgZGF0YSkge1xuICAgIHZhciBfZmllbGQkYWxpYXMyO1xuXG4gICAgdmFyIGFwcGxpY2F0aW9uTmFtZSA9IChfZmllbGQkYWxpYXMyID0gZmllbGQuYWxpYXMpICE9PSBudWxsICYmIF9maWVsZCRhbGlhczIgIT09IHZvaWQgMCA/IF9maWVsZCRhbGlhczIgOiBmaWVsZC5uYW1lO1xuICAgIHZhciBzdG9yYWdlS2V5ID0gZ2V0U3RvcmFnZUtleShmaWVsZCwgdGhpcy5fdmFyaWFibGVzKTtcbiAgICB2YXIgdmFsdWUgPSBSZWxheU1vZGVyblJlY29yZC5nZXRWYWx1ZShyZWNvcmQsIHN0b3JhZ2VLZXkpO1xuXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX2lzTWlzc2luZ0RhdGEgPSB0cnVlO1xuICAgIH1cblxuICAgIGRhdGFbYXBwbGljYXRpb25OYW1lXSA9IHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBfcHJvdG8uX3JlYWRMaW5rID0gZnVuY3Rpb24gX3JlYWRMaW5rKGZpZWxkLCByZWNvcmQsIGRhdGEpIHtcbiAgICB2YXIgX2ZpZWxkJGFsaWFzMztcblxuICAgIHZhciBhcHBsaWNhdGlvbk5hbWUgPSAoX2ZpZWxkJGFsaWFzMyA9IGZpZWxkLmFsaWFzKSAhPT0gbnVsbCAmJiBfZmllbGQkYWxpYXMzICE9PSB2b2lkIDAgPyBfZmllbGQkYWxpYXMzIDogZmllbGQubmFtZTtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0b3JhZ2VLZXkoZmllbGQsIHRoaXMuX3ZhcmlhYmxlcyk7XG4gICAgdmFyIGxpbmtlZElEID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0TGlua2VkUmVjb3JkSUQocmVjb3JkLCBzdG9yYWdlS2V5KTtcblxuICAgIGlmIChsaW5rZWRJRCA9PSBudWxsKSB7XG4gICAgICBkYXRhW2FwcGxpY2F0aW9uTmFtZV0gPSBsaW5rZWRJRDtcblxuICAgICAgaWYgKGxpbmtlZElEID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5faXNNaXNzaW5nRGF0YSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaW5rZWRJRDtcbiAgICB9XG5cbiAgICB2YXIgcHJldkRhdGEgPSBkYXRhW2FwcGxpY2F0aW9uTmFtZV07XG4gICAgIShwcmV2RGF0YSA9PSBudWxsIHx8IHR5cGVvZiBwcmV2RGF0YSA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWFkZXIoKTogRXhwZWN0ZWQgZGF0YSBmb3IgZmllbGQgYCVzYCBvbiByZWNvcmQgYCVzYCAnICsgJ3RvIGJlIGFuIG9iamVjdCwgZ290IGAlc2AuJywgYXBwbGljYXRpb25OYW1lLCBSZWxheU1vZGVyblJlY29yZC5nZXREYXRhSUQocmVjb3JkKSwgcHJldkRhdGEpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdmFyaWFuY2VdXG5cbiAgICB2YXIgdmFsdWUgPSB0aGlzLl90cmF2ZXJzZShmaWVsZCwgbGlua2VkSUQsIHByZXZEYXRhKTtcblxuICAgIGRhdGFbYXBwbGljYXRpb25OYW1lXSA9IHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBfcHJvdG8uX3JlYWRQbHVyYWxMaW5rID0gZnVuY3Rpb24gX3JlYWRQbHVyYWxMaW5rKGZpZWxkLCByZWNvcmQsIGRhdGEpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfZmllbGQkYWxpYXM0O1xuXG4gICAgdmFyIGFwcGxpY2F0aW9uTmFtZSA9IChfZmllbGQkYWxpYXM0ID0gZmllbGQuYWxpYXMpICE9PSBudWxsICYmIF9maWVsZCRhbGlhczQgIT09IHZvaWQgMCA/IF9maWVsZCRhbGlhczQgOiBmaWVsZC5uYW1lO1xuICAgIHZhciBzdG9yYWdlS2V5ID0gZ2V0U3RvcmFnZUtleShmaWVsZCwgdGhpcy5fdmFyaWFibGVzKTtcbiAgICB2YXIgbGlua2VkSURzID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0TGlua2VkUmVjb3JkSURzKHJlY29yZCwgc3RvcmFnZUtleSk7XG5cbiAgICBpZiAobGlua2VkSURzID09IG51bGwpIHtcbiAgICAgIGRhdGFbYXBwbGljYXRpb25OYW1lXSA9IGxpbmtlZElEcztcblxuICAgICAgaWYgKGxpbmtlZElEcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX2lzTWlzc2luZ0RhdGEgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlua2VkSURzO1xuICAgIH1cblxuICAgIHZhciBwcmV2RGF0YSA9IGRhdGFbYXBwbGljYXRpb25OYW1lXTtcbiAgICAhKHByZXZEYXRhID09IG51bGwgfHwgQXJyYXkuaXNBcnJheShwcmV2RGF0YSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWFkZXIoKTogRXhwZWN0ZWQgZGF0YSBmb3IgZmllbGQgYCVzYCBvbiByZWNvcmQgYCVzYCAnICsgJ3RvIGJlIGFuIGFycmF5LCBnb3QgYCVzYC4nLCBhcHBsaWNhdGlvbk5hbWUsIFJlbGF5TW9kZXJuUmVjb3JkLmdldERhdGFJRChyZWNvcmQpLCBwcmV2RGF0YSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBsaW5rZWRBcnJheSA9IHByZXZEYXRhIHx8IFtdO1xuICAgIGxpbmtlZElEcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5rZWRJRCwgbmV4dEluZGV4KSB7XG4gICAgICBpZiAobGlua2VkSUQgPT0gbnVsbCkge1xuICAgICAgICBpZiAobGlua2VkSUQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIF90aGlzMi5faXNNaXNzaW5nRGF0YSA9IHRydWU7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cblxuICAgICAgICBsaW5rZWRBcnJheVtuZXh0SW5kZXhdID0gbGlua2VkSUQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJdGVtID0gbGlua2VkQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICEocHJldkl0ZW0gPT0gbnVsbCB8fCB0eXBlb2YgcHJldkl0ZW0gPT09ICdvYmplY3QnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVhZGVyKCk6IEV4cGVjdGVkIGRhdGEgZm9yIGZpZWxkIGAlc2Agb24gcmVjb3JkIGAlc2AgJyArICd0byBiZSBhbiBvYmplY3QsIGdvdCBgJXNgLicsIGFwcGxpY2F0aW9uTmFtZSwgUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0RGF0YUlEKHJlY29yZCksIHByZXZJdGVtKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7IC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdmFyaWFuY2VdXG5cbiAgICAgIGxpbmtlZEFycmF5W25leHRJbmRleF0gPSBfdGhpczIuX3RyYXZlcnNlKGZpZWxkLCBsaW5rZWRJRCwgcHJldkl0ZW0pO1xuICAgIH0pO1xuICAgIGRhdGFbYXBwbGljYXRpb25OYW1lXSA9IGxpbmtlZEFycmF5O1xuICAgIHJldHVybiBsaW5rZWRBcnJheTtcbiAgfVxuICAvKipcbiAgICogUmVhZHMgYSBSZWFkZXJNb2R1bGVJbXBvcnQsIHdoaWNoIHdhcyBnZW5lcmF0ZWQgZnJvbSB1c2luZyB0aGUgQG1vZHVsZVxuICAgKiBkaXJlY3RpdmUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9yZWFkTW9kdWxlSW1wb3J0ID0gZnVuY3Rpb24gX3JlYWRNb2R1bGVJbXBvcnQobW9kdWxlSW1wb3J0LCByZWNvcmQsIGRhdGEpIHtcbiAgICAvLyBEZXRlcm1pbmUgdGhlIGNvbXBvbmVudCBtb2R1bGUgZnJvbSB0aGUgc3RvcmU6IGlmIHRoZSBmaWVsZCBpcyBtaXNzaW5nXG4gICAgLy8gaXQgbWVhbnMgd2UgZG9uJ3Qga25vdyB3aGF0IGNvbXBvbmVudCB0byByZW5kZXIgdGhlIG1hdGNoIHdpdGguXG4gICAgdmFyIGNvbXBvbmVudEtleSA9IGdldE1vZHVsZUNvbXBvbmVudEtleShtb2R1bGVJbXBvcnQuZG9jdW1lbnROYW1lKTtcbiAgICB2YXIgY29tcG9uZW50ID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0VmFsdWUocmVjb3JkLCBjb21wb25lbnRLZXkpO1xuXG4gICAgaWYgKGNvbXBvbmVudCA9PSBudWxsKSB7XG4gICAgICBpZiAoY29tcG9uZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5faXNNaXNzaW5nRGF0YSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIE90aGVyd2lzZSwgcmVhZCB0aGUgZnJhZ21lbnQgYW5kIG1vZHVsZSBhc3NvY2lhdGVkIHRvIHRoZSBjb25jcmV0ZVxuICAgIC8vIHR5cGUsIGFuZCBwdXQgdGhhdCBkYXRhIHdpdGggdGhlIHJlc3VsdDpcbiAgICAvLyAtIEZvciB0aGUgbWF0Y2hlZCBmcmFnbWVudCwgY3JlYXRlIHRoZSByZWxldmFudCBmcmFnbWVudCBwb2ludGVyIGFuZCBhZGRcbiAgICAvLyAgIHRoZSBleHBlY3RlZCBmcmFnbWVudFByb3BOYW1lXG4gICAgLy8gLSBGb3IgdGhlIG1hdGNoZWQgbW9kdWxlLCBjcmVhdGUgYSByZWZlcmVuY2UgdG8gdGhlIG1vZHVsZVxuXG5cbiAgICB0aGlzLl9jcmVhdGVGcmFnbWVudFBvaW50ZXIoe1xuICAgICAga2luZDogJ0ZyYWdtZW50U3ByZWFkJyxcbiAgICAgIG5hbWU6IG1vZHVsZUltcG9ydC5mcmFnbWVudE5hbWUsXG4gICAgICBhcmdzOiBudWxsXG4gICAgfSwgcmVjb3JkLCBkYXRhKTtcblxuICAgIGRhdGFbRlJBR01FTlRfUFJPUF9OQU1FX0tFWV0gPSBtb2R1bGVJbXBvcnQuZnJhZ21lbnRQcm9wTmFtZTtcbiAgICBkYXRhW01PRFVMRV9DT01QT05FTlRfS0VZXSA9IGNvbXBvbmVudDtcbiAgfTtcblxuICBfcHJvdG8uX2NyZWF0ZUZyYWdtZW50UG9pbnRlciA9IGZ1bmN0aW9uIF9jcmVhdGVGcmFnbWVudFBvaW50ZXIoZnJhZ21lbnRTcHJlYWQsIHJlY29yZCwgZGF0YSkge1xuICAgIHZhciBmcmFnbWVudFBvaW50ZXJzID0gZGF0YVtGUkFHTUVOVFNfS0VZXTtcblxuICAgIGlmIChmcmFnbWVudFBvaW50ZXJzID09IG51bGwpIHtcbiAgICAgIGZyYWdtZW50UG9pbnRlcnMgPSBkYXRhW0ZSQUdNRU5UU19LRVldID0ge307XG4gICAgfVxuXG4gICAgISh0eXBlb2YgZnJhZ21lbnRQb2ludGVycyA9PT0gJ29iamVjdCcgJiYgZnJhZ21lbnRQb2ludGVycyAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVhZGVyOiBFeHBlY3RlZCBmcmFnbWVudCBzcHJlYWQgZGF0YSB0byBiZSBhbiBvYmplY3QsIGdvdCBgJXNgLicsIGZyYWdtZW50UG9pbnRlcnMpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmIChkYXRhW0lEX0tFWV0gPT0gbnVsbCkge1xuICAgICAgZGF0YVtJRF9LRVldID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0RGF0YUlEKHJlY29yZCk7XG4gICAgfSAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV0gLSB3cml0aW5nIGludG8gcmVhZC1vbmx5IGZpZWxkXG5cblxuICAgIGZyYWdtZW50UG9pbnRlcnNbZnJhZ21lbnRTcHJlYWQubmFtZV0gPSBmcmFnbWVudFNwcmVhZC5hcmdzID8gZ2V0QXJndW1lbnRWYWx1ZXMoZnJhZ21lbnRTcHJlYWQuYXJncywgdGhpcy5fdmFyaWFibGVzKSA6IHt9O1xuICAgIGRhdGFbRlJBR01FTlRfT1dORVJfS0VZXSA9IHRoaXMuX293bmVyO1xuXG4gICAgaWYgKFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9QUkVDSVNFX1RZUEVfUkVGSU5FTUVOVCkge1xuICAgICAgZGF0YVtJU19XSVRISU5fVU5NQVRDSEVEX1RZUEVfUkVGSU5FTUVOVF0gPSB0aGlzLl9pc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50O1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX2NyZWF0ZUlubGluZURhdGFPclJlc29sdmVyRnJhZ21lbnRQb2ludGVyID0gZnVuY3Rpb24gX2NyZWF0ZUlubGluZURhdGFPclJlc29sdmVyRnJhZ21lbnRQb2ludGVyKGZyYWdtZW50U3ByZWFkT3JGcmFnbWVudCwgcmVjb3JkLCBkYXRhKSB7XG4gICAgdmFyIGZyYWdtZW50UG9pbnRlcnMgPSBkYXRhW0ZSQUdNRU5UU19LRVldO1xuXG4gICAgaWYgKGZyYWdtZW50UG9pbnRlcnMgPT0gbnVsbCkge1xuICAgICAgZnJhZ21lbnRQb2ludGVycyA9IGRhdGFbRlJBR01FTlRTX0tFWV0gPSB7fTtcbiAgICB9XG5cbiAgICAhKHR5cGVvZiBmcmFnbWVudFBvaW50ZXJzID09PSAnb2JqZWN0JyAmJiBmcmFnbWVudFBvaW50ZXJzICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWFkZXI6IEV4cGVjdGVkIGZyYWdtZW50IHNwcmVhZCBkYXRhIHRvIGJlIGFuIG9iamVjdCwgZ290IGAlc2AuJywgZnJhZ21lbnRQb2ludGVycykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgaWYgKGRhdGFbSURfS0VZXSA9PSBudWxsKSB7XG4gICAgICBkYXRhW0lEX0tFWV0gPSBSZWxheU1vZGVyblJlY29yZC5nZXREYXRhSUQocmVjb3JkKTtcbiAgICB9XG5cbiAgICB2YXIgaW5saW5lRGF0YSA9IHt9O1xuXG4gICAgdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKGZyYWdtZW50U3ByZWFkT3JGcmFnbWVudC5zZWxlY3Rpb25zLCByZWNvcmQsIGlubGluZURhdGEpOyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV0gLSB3cml0aW5nIGludG8gcmVhZC1vbmx5IGZpZWxkXG5cblxuICAgIGZyYWdtZW50UG9pbnRlcnNbZnJhZ21lbnRTcHJlYWRPckZyYWdtZW50Lm5hbWVdID0gaW5saW5lRGF0YTtcbiAgfTtcblxuICByZXR1cm4gUmVsYXlSZWFkZXI7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZWFkOiByZWFkXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVsYXlSZWNvcmRTb3VyY2VNYXBJbXBsID0gcmVxdWlyZSgnLi9SZWxheVJlY29yZFNvdXJjZU1hcEltcGwnKTtcblxudmFyIFJlbGF5UmVjb3JkU291cmNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVsYXlSZWNvcmRTb3VyY2UocmVjb3Jkcykge1xuICAgIHJldHVybiBSZWxheVJlY29yZFNvdXJjZS5jcmVhdGUocmVjb3Jkcyk7XG4gIH1cblxuICBSZWxheVJlY29yZFNvdXJjZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocmVjb3Jkcykge1xuICAgIHJldHVybiBuZXcgUmVsYXlSZWNvcmRTb3VyY2VNYXBJbXBsKHJlY29yZHMpO1xuICB9O1xuXG4gIHJldHVybiBSZWxheVJlY29yZFNvdXJjZTtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheVJlY29yZFNvdXJjZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJcIikpO1xuXG52YXIgUmVsYXlSZWNvcmRTdGF0ZSA9IHJlcXVpcmUoJy4vUmVsYXlSZWNvcmRTdGF0ZScpO1xuXG52YXIgRVhJU1RFTlQgPSBSZWxheVJlY29yZFN0YXRlLkVYSVNURU5ULFxuICAgIE5PTkVYSVNURU5UID0gUmVsYXlSZWNvcmRTdGF0ZS5OT05FWElTVEVOVCxcbiAgICBVTktOT1dOID0gUmVsYXlSZWNvcmRTdGF0ZS5VTktOT1dOO1xuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgYE11dGFibGVSZWNvcmRTb3VyY2VgIGludGVyZmFjZSAoZGVmaW5lZCBpblxuICogYFJlbGF5U3RvcmVUeXBlc2ApIHRoYXQgaG9sZHMgYWxsIHJlY29yZHMgaW4gbWVtb3J5IChKUyBNYXApLlxuICovXG5cbnZhciBSZWxheU1hcFJlY29yZFNvdXJjZU1hcEltcGwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWxheU1hcFJlY29yZFNvdXJjZU1hcEltcGwocmVjb3Jkcykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl9yZWNvcmRzID0gbmV3IE1hcCgpO1xuXG4gICAgaWYgKHJlY29yZHMgIT0gbnVsbCkge1xuICAgICAgT2JqZWN0LmtleXMocmVjb3JkcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF90aGlzLl9yZWNvcmRzLnNldChrZXksIHJlY29yZHNba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVsYXlNYXBSZWNvcmRTb3VyY2VNYXBJbXBsLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLl9yZWNvcmRzID0gbmV3IE1hcCgpO1xuICB9O1xuXG4gIF9wcm90b1tcImRlbGV0ZVwiXSA9IGZ1bmN0aW9uIF9kZWxldGUoZGF0YUlEKSB7XG4gICAgdGhpcy5fcmVjb3Jkcy5zZXQoZGF0YUlELCBudWxsKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KGRhdGFJRCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNvcmRzLmdldChkYXRhSUQpO1xuICB9O1xuXG4gIF9wcm90by5nZXRSZWNvcmRJRHMgPSBmdW5jdGlvbiBnZXRSZWNvcmRJRHMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5fcmVjb3Jkcy5rZXlzKCkpO1xuICB9O1xuXG4gIF9wcm90by5nZXRTdGF0dXMgPSBmdW5jdGlvbiBnZXRTdGF0dXMoZGF0YUlEKSB7XG4gICAgaWYgKCF0aGlzLl9yZWNvcmRzLmhhcyhkYXRhSUQpKSB7XG4gICAgICByZXR1cm4gVU5LTk9XTjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcmVjb3Jkcy5nZXQoZGF0YUlEKSA9PSBudWxsID8gTk9ORVhJU1RFTlQgOiBFWElTVEVOVDtcbiAgfTtcblxuICBfcHJvdG8uaGFzID0gZnVuY3Rpb24gaGFzKGRhdGFJRCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNvcmRzLmhhcyhkYXRhSUQpO1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoZGF0YUlEKSB7XG4gICAgdGhpcy5fcmVjb3Jkc1tcImRlbGV0ZVwiXShkYXRhSUQpO1xuICB9O1xuXG4gIF9wcm90by5zZXQgPSBmdW5jdGlvbiBzZXQoZGF0YUlELCByZWNvcmQpIHtcbiAgICB0aGlzLl9yZWNvcmRzLnNldChkYXRhSUQsIHJlY29yZCk7XG4gIH07XG5cbiAgX3Byb3RvLnNpemUgPSBmdW5jdGlvbiBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWNvcmRzLnNpemU7XG4gIH07XG5cbiAgX3Byb3RvLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICB2YXIgb2JqID0ge307XG5cbiAgICB2YXIgX2l0ZXJhdG9yID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKHRoaXMuX3JlY29yZHMpLFxuICAgICAgICBfc3RlcDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICB2YXIgX3N0ZXAkdmFsdWUgPSBfc3RlcC52YWx1ZSxcbiAgICAgICAgICAgIGtleSA9IF9zdGVwJHZhbHVlWzBdLFxuICAgICAgICAgICAgdmFsdWUgPSBfc3RlcCR2YWx1ZVsxXTtcbiAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICByZXR1cm4gUmVsYXlNYXBSZWNvcmRTb3VyY2VNYXBJbXBsO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5TWFwUmVjb3JkU291cmNlTWFwSW1wbDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlbGF5UmVjb3JkU3RhdGUgPSB7XG4gIC8qKlxuICAgKiBSZWNvcmQgZXhpc3RzIChlaXRoZXIgZmV0Y2hlZCBmcm9tIHRoZSBzZXJ2ZXIgb3IgcHJvZHVjZWQgYnkgYSBsb2NhbCxcbiAgICogb3B0aW1pc3RpYyB1cGRhdGUpLlxuICAgKi9cbiAgRVhJU1RFTlQ6ICdFWElTVEVOVCcsXG5cbiAgLyoqXG4gICAqIFJlY29yZCBpcyBrbm93biBub3QgdG8gZXhpc3QgKGVpdGhlciBhcyB0aGUgcmVzdWx0IG9mIGEgbXV0YXRpb24sIG9yXG4gICAqIGJlY2F1c2UgdGhlIHNlcnZlciByZXR1cm5lZCBgbnVsbGAgd2hlbiBxdWVyaWVkIGZvciB0aGUgcmVjb3JkKS5cbiAgICovXG4gIE5PTkVYSVNURU5UOiAnTk9ORVhJU1RFTlQnLFxuXG4gIC8qKlxuICAgKiBSZWNvcmQgU3RhdGUgaXMgdW5rbm93biBiZWNhdXNlIGl0IGhhcyBub3QgeWV0IGJlZW4gZmV0Y2hlZCBmcm9tIHRoZVxuICAgKiBzZXJ2ZXIuXG4gICAqL1xuICBVTktOT1dOOiAnVU5LTk9XTidcbn07XG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5UmVjb3JkU3RhdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyXCIpKTtcblxudmFyIFJlbGF5Q29uY3JldGVOb2RlID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUNvbmNyZXRlTm9kZScpO1xuXG52YXIgUmVsYXlGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuLi91dGlsL1JlbGF5RmVhdHVyZUZsYWdzJyk7XG5cbnZhciBSZWxheU1vZGVyblJlY29yZCA9IHJlcXVpcmUoJy4vUmVsYXlNb2Rlcm5SZWNvcmQnKTtcblxudmFyIFJlbGF5U3RvcmVSZWFjdEZsaWdodFV0aWxzID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlUmVhY3RGbGlnaHRVdGlscycpO1xuXG52YXIgUmVsYXlTdG9yZVV0aWxzID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlVXRpbHMnKTtcblxudmFyIGNsb25lUmVsYXlIYW5kbGVTb3VyY2VGaWVsZCA9IHJlcXVpcmUoJy4vY2xvbmVSZWxheUhhbmRsZVNvdXJjZUZpZWxkJyk7XG5cbnZhciBnZXRPcGVyYXRpb24gPSByZXF1aXJlKCcuLi91dGlsL2dldE9wZXJhdGlvbicpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vVHlwZUlEJyksXG4gICAgZ2VuZXJhdGVUeXBlSUQgPSBfcmVxdWlyZS5nZW5lcmF0ZVR5cGVJRDtcblxudmFyIENPTkRJVElPTiA9IFJlbGF5Q29uY3JldGVOb2RlLkNPTkRJVElPTixcbiAgICBDTElFTlRfQ09NUE9ORU5UID0gUmVsYXlDb25jcmV0ZU5vZGUuQ0xJRU5UX0NPTVBPTkVOVCxcbiAgICBDTElFTlRfRVhURU5TSU9OID0gUmVsYXlDb25jcmV0ZU5vZGUuQ0xJRU5UX0VYVEVOU0lPTixcbiAgICBERUZFUiA9IFJlbGF5Q29uY3JldGVOb2RlLkRFRkVSLFxuICAgIEZMSUdIVF9GSUVMRCA9IFJlbGF5Q29uY3JldGVOb2RlLkZMSUdIVF9GSUVMRCxcbiAgICBGUkFHTUVOVF9TUFJFQUQgPSBSZWxheUNvbmNyZXRlTm9kZS5GUkFHTUVOVF9TUFJFQUQsXG4gICAgSU5MSU5FX0ZSQUdNRU5UID0gUmVsYXlDb25jcmV0ZU5vZGUuSU5MSU5FX0ZSQUdNRU5ULFxuICAgIExJTktFRF9GSUVMRCA9IFJlbGF5Q29uY3JldGVOb2RlLkxJTktFRF9GSUVMRCxcbiAgICBNT0RVTEVfSU1QT1JUID0gUmVsYXlDb25jcmV0ZU5vZGUuTU9EVUxFX0lNUE9SVCxcbiAgICBMSU5LRURfSEFORExFID0gUmVsYXlDb25jcmV0ZU5vZGUuTElOS0VEX0hBTkRMRSxcbiAgICBTQ0FMQVJfRklFTEQgPSBSZWxheUNvbmNyZXRlTm9kZS5TQ0FMQVJfRklFTEQsXG4gICAgU0NBTEFSX0hBTkRMRSA9IFJlbGF5Q29uY3JldGVOb2RlLlNDQUxBUl9IQU5ETEUsXG4gICAgU1RSRUFNID0gUmVsYXlDb25jcmV0ZU5vZGUuU1RSRUFNLFxuICAgIFRZUEVfRElTQ1JJTUlOQVRPUiA9IFJlbGF5Q29uY3JldGVOb2RlLlRZUEVfRElTQ1JJTUlOQVRPUjtcbnZhciBST09UX0lEID0gUmVsYXlTdG9yZVV0aWxzLlJPT1RfSUQsXG4gICAgZ2V0U3RvcmFnZUtleSA9IFJlbGF5U3RvcmVVdGlscy5nZXRTdG9yYWdlS2V5LFxuICAgIGdldE1vZHVsZU9wZXJhdGlvbktleSA9IFJlbGF5U3RvcmVVdGlscy5nZXRNb2R1bGVPcGVyYXRpb25LZXk7XG5cbmZ1bmN0aW9uIG1hcmsocmVjb3JkU291cmNlLCBzZWxlY3RvciwgcmVmZXJlbmNlcywgb3BlcmF0aW9uTG9hZGVyLCBzaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50cykge1xuICB2YXIgZGF0YUlEID0gc2VsZWN0b3IuZGF0YUlELFxuICAgICAgbm9kZSA9IHNlbGVjdG9yLm5vZGUsXG4gICAgICB2YXJpYWJsZXMgPSBzZWxlY3Rvci52YXJpYWJsZXM7XG4gIHZhciBtYXJrZXIgPSBuZXcgUmVsYXlSZWZlcmVuY2VNYXJrZXIocmVjb3JkU291cmNlLCB2YXJpYWJsZXMsIHJlZmVyZW5jZXMsIG9wZXJhdGlvbkxvYWRlciwgc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMpO1xuICBtYXJrZXIubWFyayhub2RlLCBkYXRhSUQpO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxudmFyIFJlbGF5UmVmZXJlbmNlTWFya2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVsYXlSZWZlcmVuY2VNYXJrZXIocmVjb3JkU291cmNlLCB2YXJpYWJsZXMsIHJlZmVyZW5jZXMsIG9wZXJhdGlvbkxvYWRlciwgc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMpIHtcbiAgICB0aGlzLl9vcGVyYXRpb25Mb2FkZXIgPSBvcGVyYXRpb25Mb2FkZXIgIT09IG51bGwgJiYgb3BlcmF0aW9uTG9hZGVyICE9PSB2b2lkIDAgPyBvcGVyYXRpb25Mb2FkZXIgOiBudWxsO1xuICAgIHRoaXMuX29wZXJhdGlvbk5hbWUgPSBudWxsO1xuICAgIHRoaXMuX3JlY29yZFNvdXJjZSA9IHJlY29yZFNvdXJjZTtcbiAgICB0aGlzLl9yZWZlcmVuY2VzID0gcmVmZXJlbmNlcztcbiAgICB0aGlzLl92YXJpYWJsZXMgPSB2YXJpYWJsZXM7XG4gICAgdGhpcy5fc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMgPSBzaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50cztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZWxheVJlZmVyZW5jZU1hcmtlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm1hcmsgPSBmdW5jdGlvbiBtYXJrKG5vZGUsIGRhdGFJRCkge1xuICAgIGlmIChub2RlLmtpbmQgPT09ICdPcGVyYXRpb24nIHx8IG5vZGUua2luZCA9PT0gJ1NwbGl0T3BlcmF0aW9uJykge1xuICAgICAgdGhpcy5fb3BlcmF0aW9uTmFtZSA9IG5vZGUubmFtZTtcbiAgICB9XG5cbiAgICB0aGlzLl90cmF2ZXJzZShub2RlLCBkYXRhSUQpO1xuICB9O1xuXG4gIF9wcm90by5fdHJhdmVyc2UgPSBmdW5jdGlvbiBfdHJhdmVyc2Uobm9kZSwgZGF0YUlEKSB7XG4gICAgdGhpcy5fcmVmZXJlbmNlcy5hZGQoZGF0YUlEKTtcblxuICAgIHZhciByZWNvcmQgPSB0aGlzLl9yZWNvcmRTb3VyY2UuZ2V0KGRhdGFJRCk7XG5cbiAgICBpZiAocmVjb3JkID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMobm9kZS5zZWxlY3Rpb25zLCByZWNvcmQpO1xuICB9O1xuXG4gIF9wcm90by5fZ2V0VmFyaWFibGVWYWx1ZSA9IGZ1bmN0aW9uIF9nZXRWYXJpYWJsZVZhbHVlKG5hbWUpIHtcbiAgICAhdGhpcy5fdmFyaWFibGVzLmhhc093blByb3BlcnR5KG5hbWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWZlcmVuY2VNYXJrZXIoKTogVW5kZWZpbmVkIHZhcmlhYmxlIGAlc2AuJywgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cblxuICAgIHJldHVybiB0aGlzLl92YXJpYWJsZXNbbmFtZV07XG4gIH07XG5cbiAgX3Byb3RvLl90cmF2ZXJzZVNlbGVjdGlvbnMgPSBmdW5jdGlvbiBfdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbnMsIHJlY29yZCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBzZWxlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tZmFsbHRocm91Z2ggKi9cbiAgICAgIHN3aXRjaCAoc2VsZWN0aW9uLmtpbmQpIHtcbiAgICAgICAgY2FzZSBMSU5LRURfRklFTEQ6XG4gICAgICAgICAgaWYgKHNlbGVjdGlvbi5wbHVyYWwpIHtcbiAgICAgICAgICAgIF90aGlzLl90cmF2ZXJzZVBsdXJhbExpbmsoc2VsZWN0aW9uLCByZWNvcmQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5fdHJhdmVyc2VMaW5rKHNlbGVjdGlvbiwgcmVjb3JkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIENPTkRJVElPTjpcbiAgICAgICAgICB2YXIgY29uZGl0aW9uVmFsdWUgPSBfdGhpcy5fZ2V0VmFyaWFibGVWYWx1ZShzZWxlY3Rpb24uY29uZGl0aW9uKTtcblxuICAgICAgICAgIGlmIChjb25kaXRpb25WYWx1ZSA9PT0gc2VsZWN0aW9uLnBhc3NpbmdWYWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uc2VsZWN0aW9ucywgcmVjb3JkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIElOTElORV9GUkFHTUVOVDpcbiAgICAgICAgICBpZiAoc2VsZWN0aW9uLmFic3RyYWN0S2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB0eXBlTmFtZSA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFR5cGUocmVjb3JkKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVOYW1lICE9IG51bGwgJiYgdHlwZU5hbWUgPT09IHNlbGVjdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgIF90aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLnNlbGVjdGlvbnMsIHJlY29yZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUFJFQ0lTRV9UWVBFX1JFRklORU1FTlQpIHtcbiAgICAgICAgICAgIHZhciBfdHlwZU5hbWUgPSBSZWxheU1vZGVyblJlY29yZC5nZXRUeXBlKHJlY29yZCk7XG5cbiAgICAgICAgICAgIHZhciB0eXBlSUQgPSBnZW5lcmF0ZVR5cGVJRChfdHlwZU5hbWUpO1xuXG4gICAgICAgICAgICBfdGhpcy5fcmVmZXJlbmNlcy5hZGQodHlwZUlEKTtcblxuICAgICAgICAgICAgX3RoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uc2VsZWN0aW9ucywgcmVjb3JkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uc2VsZWN0aW9ucywgcmVjb3JkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV1cblxuICAgICAgICBjYXNlIEZSQUdNRU5UX1NQUkVBRDpcbiAgICAgICAgICBfdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5mcmFnbWVudC5zZWxlY3Rpb25zLCByZWNvcmQpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBMSU5LRURfSEFORExFOlxuICAgICAgICAgIC8vIFRoZSBzZWxlY3Rpb25zIGZvciBhIFwiaGFuZGxlXCIgZmllbGQgYXJlIHRoZSBzYW1lIGFzIHRob3NlIG9mIHRoZVxuICAgICAgICAgIC8vIG9yaWdpbmFsIGxpbmtlZCBmaWVsZCB3aGVyZSB0aGUgaGFuZGxlIHdhcyBhcHBsaWVkLiBSZWZlcmVuY2UgbWFya2luZ1xuICAgICAgICAgIC8vIHRoZXJlZm9yZSByZXF1aXJlcyB0cmF2ZXJzaW5nIHRoZSBvcmlnaW5hbCBmaWVsZCBzZWxlY3Rpb25zIGFnYWluc3RcbiAgICAgICAgICAvLyB0aGUgc3ludGhlc2l6ZWQgY2xpZW50IGZpZWxkLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gVE9ETzogSW5zdGVhZCBvZiBmaW5kaW5nIHRoZSBzb3VyY2UgZmllbGQgaW4gYHNlbGVjdGlvbnNgLCBjaGFuZ2VcbiAgICAgICAgICAvLyB0aGUgY29uY3JldGUgc3RydWN0dXJlIHRvIGFsbG93IHNoYXJlZCBzdWJ0cmVlcywgYW5kIGhhdmUgdGhlIGxpbmtlZFxuICAgICAgICAgIC8vIGhhbmRsZSBkaXJlY3RseSByZWZlciB0byB0aGUgc2FtZSBzZWxlY3Rpb25zIGFzIHRoZSBMaW5rZWRGaWVsZCB0aGF0XG4gICAgICAgICAgLy8gaXQgd2FzIHNwbGl0IGZyb20uXG4gICAgICAgICAgdmFyIGhhbmRsZUZpZWxkID0gY2xvbmVSZWxheUhhbmRsZVNvdXJjZUZpZWxkKHNlbGVjdGlvbiwgc2VsZWN0aW9ucywgX3RoaXMuX3ZhcmlhYmxlcyk7XG5cbiAgICAgICAgICBpZiAoaGFuZGxlRmllbGQucGx1cmFsKSB7XG4gICAgICAgICAgICBfdGhpcy5fdHJhdmVyc2VQbHVyYWxMaW5rKGhhbmRsZUZpZWxkLCByZWNvcmQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5fdHJhdmVyc2VMaW5rKGhhbmRsZUZpZWxkLCByZWNvcmQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgREVGRVI6XG4gICAgICAgIGNhc2UgU1RSRUFNOlxuICAgICAgICAgIF90aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLnNlbGVjdGlvbnMsIHJlY29yZCk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFNDQUxBUl9GSUVMRDpcbiAgICAgICAgY2FzZSBTQ0FMQVJfSEFORExFOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgVFlQRV9ESVNDUklNSU5BVE9SOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUFJFQ0lTRV9UWVBFX1JFRklORU1FTlQpIHtcbiAgICAgICAgICAgICAgdmFyIF90eXBlTmFtZTIgPSBSZWxheU1vZGVyblJlY29yZC5nZXRUeXBlKHJlY29yZCk7XG5cbiAgICAgICAgICAgICAgdmFyIF90eXBlSUQgPSBnZW5lcmF0ZVR5cGVJRChfdHlwZU5hbWUyKTtcblxuICAgICAgICAgICAgICBfdGhpcy5fcmVmZXJlbmNlcy5hZGQoX3R5cGVJRCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIE1PRFVMRV9JTVBPUlQ6XG4gICAgICAgICAgX3RoaXMuX3RyYXZlcnNlTW9kdWxlSW1wb3J0KHNlbGVjdGlvbiwgcmVjb3JkKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ0xJRU5UX0VYVEVOU0lPTjpcbiAgICAgICAgICBfdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5zZWxlY3Rpb25zLCByZWNvcmQpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBGTElHSFRfRklFTEQ6XG4gICAgICAgICAgaWYgKFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9SRUFDVF9GTElHSFRfQ09NUE9ORU5UX0ZJRUxEKSB7XG4gICAgICAgICAgICBfdGhpcy5fdHJhdmVyc2VGbGlnaHRGaWVsZChzZWxlY3Rpb24sIHJlY29yZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmxpZ2h0IGZpZWxkcyBhcmUgbm90IHlldCBzdXBwb3J0ZWQuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDTElFTlRfQ09NUE9ORU5UOlxuICAgICAgICAgIGlmIChfdGhpcy5fc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5mcmFnbWVudC5zZWxlY3Rpb25zLCByZWNvcmQpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBzZWxlY3Rpb247XG4gICAgICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWZlcmVuY2VNYXJrZXI6IFVua25vd24gQVNUIG5vZGUgYCVzYC4nLCBzZWxlY3Rpb24pIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uX3RyYXZlcnNlTW9kdWxlSW1wb3J0ID0gZnVuY3Rpb24gX3RyYXZlcnNlTW9kdWxlSW1wb3J0KG1vZHVsZUltcG9ydCwgcmVjb3JkKSB7XG4gICAgdmFyIF90aGlzJF9vcGVyYXRpb25OYW1lO1xuXG4gICAgdmFyIG9wZXJhdGlvbkxvYWRlciA9IHRoaXMuX29wZXJhdGlvbkxvYWRlcjtcbiAgICAhKG9wZXJhdGlvbkxvYWRlciAhPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlZmVyZW5jZU1hcmtlcjogRXhwZWN0ZWQgYW4gb3BlcmF0aW9uTG9hZGVyIHRvIGJlIGNvbmZpZ3VyZWQgd2hlbiB1c2luZyBgQG1vZHVsZWAuICcgKyAnQ291bGQgbm90IGxvYWQgZnJhZ21lbnQgYCVzYCBpbiBvcGVyYXRpb24gYCVzYC4nLCBtb2R1bGVJbXBvcnQuZnJhZ21lbnROYW1lLCAoX3RoaXMkX29wZXJhdGlvbk5hbWUgPSB0aGlzLl9vcGVyYXRpb25OYW1lKSAhPT0gbnVsbCAmJiBfdGhpcyRfb3BlcmF0aW9uTmFtZSAhPT0gdm9pZCAwID8gX3RoaXMkX29wZXJhdGlvbk5hbWUgOiAnKHVua25vd24pJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBvcGVyYXRpb25LZXkgPSBnZXRNb2R1bGVPcGVyYXRpb25LZXkobW9kdWxlSW1wb3J0LmRvY3VtZW50TmFtZSk7XG4gICAgdmFyIG9wZXJhdGlvblJlZmVyZW5jZSA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFZhbHVlKHJlY29yZCwgb3BlcmF0aW9uS2V5KTtcblxuICAgIGlmIChvcGVyYXRpb25SZWZlcmVuY2UgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBub3JtYWxpemF0aW9uUm9vdE5vZGUgPSBvcGVyYXRpb25Mb2FkZXIuZ2V0KG9wZXJhdGlvblJlZmVyZW5jZSk7XG5cbiAgICBpZiAobm9ybWFsaXphdGlvblJvb3ROb2RlICE9IG51bGwpIHtcbiAgICAgIHZhciBzZWxlY3Rpb25zID0gZ2V0T3BlcmF0aW9uKG5vcm1hbGl6YXRpb25Sb290Tm9kZSkuc2VsZWN0aW9ucztcblxuICAgICAgdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbnMsIHJlY29yZCk7XG4gICAgfSAvLyBPdGhlcndpc2UsIGlmIHRoZSBvcGVyYXRpb24gaXMgbm90IGF2YWlsYWJsZSwgd2UgYXNzdW1lIHRoYXQgdGhlIGRhdGFcbiAgICAvLyBjYW5ub3QgaGF2ZSBiZWVuIHByb2Nlc3NlZCB5ZXQgYW5kIHRoZXJlZm9yZSBpc24ndCBpbiB0aGUgc3RvcmUgdG9cbiAgICAvLyBiZWdpbiB3aXRoLlxuXG4gIH07XG5cbiAgX3Byb3RvLl90cmF2ZXJzZUxpbmsgPSBmdW5jdGlvbiBfdHJhdmVyc2VMaW5rKGZpZWxkLCByZWNvcmQpIHtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0b3JhZ2VLZXkoZmllbGQsIHRoaXMuX3ZhcmlhYmxlcyk7XG4gICAgdmFyIGxpbmtlZElEID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0TGlua2VkUmVjb3JkSUQocmVjb3JkLCBzdG9yYWdlS2V5KTtcblxuICAgIGlmIChsaW5rZWRJRCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fdHJhdmVyc2UoZmllbGQsIGxpbmtlZElEKTtcbiAgfTtcblxuICBfcHJvdG8uX3RyYXZlcnNlUGx1cmFsTGluayA9IGZ1bmN0aW9uIF90cmF2ZXJzZVBsdXJhbExpbmsoZmllbGQsIHJlY29yZCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHN0b3JhZ2VLZXkgPSBnZXRTdG9yYWdlS2V5KGZpZWxkLCB0aGlzLl92YXJpYWJsZXMpO1xuICAgIHZhciBsaW5rZWRJRHMgPSBSZWxheU1vZGVyblJlY29yZC5nZXRMaW5rZWRSZWNvcmRJRHMocmVjb3JkLCBzdG9yYWdlS2V5KTtcblxuICAgIGlmIChsaW5rZWRJRHMgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxpbmtlZElEcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5rZWRJRCkge1xuICAgICAgaWYgKGxpbmtlZElEICE9IG51bGwpIHtcbiAgICAgICAgX3RoaXMyLl90cmF2ZXJzZShmaWVsZCwgbGlua2VkSUQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5fdHJhdmVyc2VGbGlnaHRGaWVsZCA9IGZ1bmN0aW9uIF90cmF2ZXJzZUZsaWdodEZpZWxkKGZpZWxkLCByZWNvcmQpIHtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0b3JhZ2VLZXkoZmllbGQsIHRoaXMuX3ZhcmlhYmxlcyk7XG4gICAgdmFyIGxpbmtlZElEID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0TGlua2VkUmVjb3JkSUQocmVjb3JkLCBzdG9yYWdlS2V5KTtcblxuICAgIGlmIChsaW5rZWRJRCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fcmVmZXJlbmNlcy5hZGQobGlua2VkSUQpO1xuXG4gICAgdmFyIHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmQgPSB0aGlzLl9yZWNvcmRTb3VyY2UuZ2V0KGxpbmtlZElEKTtcblxuICAgIGlmIChyZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcmVhY2hhYmxlRXhlY3V0YWJsZURlZmluaXRpb25zID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0VmFsdWUocmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZCwgUmVsYXlTdG9yZVJlYWN0RmxpZ2h0VXRpbHMuUkVBQ1RfRkxJR0hUX0VYRUNVVEFCTEVfREVGSU5JVElPTlNfU1RPUkFHRV9LRVkpO1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHJlYWNoYWJsZUV4ZWN1dGFibGVEZWZpbml0aW9ucykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3BlcmF0aW9uTG9hZGVyID0gdGhpcy5fb3BlcmF0aW9uTG9hZGVyO1xuICAgICEob3BlcmF0aW9uTG9hZGVyICE9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0RhdGFDaGVja2VyOiBFeHBlY3RlZCBhbiBvcGVyYXRpb25Mb2FkZXIgdG8gYmUgY29uZmlndXJlZCB3aGVuIHVzaW5nICcgKyAnUmVhY3QgRmxpZ2h0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyBJbiBGbGlnaHQsIHRoZSB2YXJpYWJsZXMgdGhhdCBhcmUgaW4gc2NvcGUgZm9yIHJlYWNoYWJsZSBleGVjdXRhYmxlXG4gICAgLy8gZGVmaW5pdGlvbnMgYXJlbid0IHRoZSBzYW1lIGFzIHdoYXQncyBpbiBzY29wZSBmb3IgdGhlIG91dGVyIHF1ZXJ5LlxuXG4gICAgdmFyIHByZXZWYXJpYWJsZXMgPSB0aGlzLl92YXJpYWJsZXM7IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdXG5cbiAgICB2YXIgX2l0ZXJhdG9yID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKHJlYWNoYWJsZUV4ZWN1dGFibGVEZWZpbml0aW9ucyksXG4gICAgICAgIF9zdGVwO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBkZWZpbml0aW9uID0gX3N0ZXAudmFsdWU7XG4gICAgICAgIHRoaXMuX3ZhcmlhYmxlcyA9IGRlZmluaXRpb24udmFyaWFibGVzO1xuICAgICAgICB2YXIgb3BlcmF0aW9uUmVmZXJlbmNlID0gZGVmaW5pdGlvbi5tb2R1bGU7XG4gICAgICAgIHZhciBub3JtYWxpemF0aW9uUm9vdE5vZGUgPSBvcGVyYXRpb25Mb2FkZXIuZ2V0KG9wZXJhdGlvblJlZmVyZW5jZSk7XG5cbiAgICAgICAgaWYgKG5vcm1hbGl6YXRpb25Sb290Tm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgdmFyIG9wZXJhdGlvbiA9IGdldE9wZXJhdGlvbihub3JtYWxpemF0aW9uUm9vdE5vZGUpO1xuXG4gICAgICAgICAgdGhpcy5fdHJhdmVyc2Uob3BlcmF0aW9uLCBST09UX0lEKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICB9XG5cbiAgICB0aGlzLl92YXJpYWJsZXMgPSBwcmV2VmFyaWFibGVzO1xuICB9O1xuXG4gIHJldHVybiBSZWxheVJlZmVyZW5jZU1hcmtlcjtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1hcms6IG1hcmtcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyXCIpKTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKTtcblxudmFyIFJlbGF5RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUZlYXR1cmVGbGFncycpO1xuXG52YXIgUmVsYXlNb2Rlcm5SZWNvcmQgPSByZXF1aXJlKCcuL1JlbGF5TW9kZXJuUmVjb3JkJyk7XG5cbnZhciBhcmVFcXVhbCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9hcmVFcXVhbFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi91dGlsL1JlbGF5Q29uY3JldGVOb2RlJyksXG4gICAgQ09ORElUSU9OID0gX3JlcXVpcmUuQ09ORElUSU9OLFxuICAgIENMSUVOVF9DT01QT05FTlQgPSBfcmVxdWlyZS5DTElFTlRfQ09NUE9ORU5ULFxuICAgIENMSUVOVF9FWFRFTlNJT04gPSBfcmVxdWlyZS5DTElFTlRfRVhURU5TSU9OLFxuICAgIERFRkVSID0gX3JlcXVpcmUuREVGRVIsXG4gICAgRkxJR0hUX0ZJRUxEID0gX3JlcXVpcmUuRkxJR0hUX0ZJRUxELFxuICAgIEZSQUdNRU5UX1NQUkVBRCA9IF9yZXF1aXJlLkZSQUdNRU5UX1NQUkVBRCxcbiAgICBJTkxJTkVfRlJBR01FTlQgPSBfcmVxdWlyZS5JTkxJTkVfRlJBR01FTlQsXG4gICAgTElOS0VEX0ZJRUxEID0gX3JlcXVpcmUuTElOS0VEX0ZJRUxELFxuICAgIExJTktFRF9IQU5ETEUgPSBfcmVxdWlyZS5MSU5LRURfSEFORExFLFxuICAgIE1PRFVMRV9JTVBPUlQgPSBfcmVxdWlyZS5NT0RVTEVfSU1QT1JULFxuICAgIFNDQUxBUl9GSUVMRCA9IF9yZXF1aXJlLlNDQUxBUl9GSUVMRCxcbiAgICBTQ0FMQVJfSEFORExFID0gX3JlcXVpcmUuU0NBTEFSX0hBTkRMRSxcbiAgICBTVFJFQU0gPSBfcmVxdWlyZS5TVFJFQU0sXG4gICAgVFlQRV9ESVNDUklNSU5BVE9SID0gX3JlcXVpcmUuVFlQRV9ESVNDUklNSU5BVE9SO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9DbGllbnRJRCcpLFxuICAgIGdlbmVyYXRlQ2xpZW50SUQgPSBfcmVxdWlyZTIuZ2VuZXJhdGVDbGllbnRJRCxcbiAgICBpc0NsaWVudElEID0gX3JlcXVpcmUyLmlzQ2xpZW50SUQ7XG5cbnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKCcuL1JlbGF5TW9kZXJuU2VsZWN0b3InKSxcbiAgICBjcmVhdGVOb3JtYWxpemF0aW9uU2VsZWN0b3IgPSBfcmVxdWlyZTMuY3JlYXRlTm9ybWFsaXphdGlvblNlbGVjdG9yO1xuXG52YXIgX3JlcXVpcmU0ID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlUmVhY3RGbGlnaHRVdGlscycpLFxuICAgIHJlZmluZVRvUmVhY3RGbGlnaHRQYXlsb2FkRGF0YSA9IF9yZXF1aXJlNC5yZWZpbmVUb1JlYWN0RmxpZ2h0UGF5bG9hZERhdGEsXG4gICAgUkVBQ1RfRkxJR0hUX0VYRUNVVEFCTEVfREVGSU5JVElPTlNfU1RPUkFHRV9LRVkgPSBfcmVxdWlyZTQuUkVBQ1RfRkxJR0hUX0VYRUNVVEFCTEVfREVGSU5JVElPTlNfU1RPUkFHRV9LRVksXG4gICAgUkVBQ1RfRkxJR0hUX1RSRUVfU1RPUkFHRV9LRVkgPSBfcmVxdWlyZTQuUkVBQ1RfRkxJR0hUX1RSRUVfU1RPUkFHRV9LRVksXG4gICAgUkVBQ1RfRkxJR0hUX1RZUEVfTkFNRSA9IF9yZXF1aXJlNC5SRUFDVF9GTElHSFRfVFlQRV9OQU1FO1xuXG52YXIgX3JlcXVpcmU1ID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlVXRpbHMnKSxcbiAgICBnZXRBcmd1bWVudFZhbHVlcyA9IF9yZXF1aXJlNS5nZXRBcmd1bWVudFZhbHVlcyxcbiAgICBnZXRIYW5kbGVTdG9yYWdlS2V5ID0gX3JlcXVpcmU1LmdldEhhbmRsZVN0b3JhZ2VLZXksXG4gICAgZ2V0TW9kdWxlQ29tcG9uZW50S2V5ID0gX3JlcXVpcmU1LmdldE1vZHVsZUNvbXBvbmVudEtleSxcbiAgICBnZXRNb2R1bGVPcGVyYXRpb25LZXkgPSBfcmVxdWlyZTUuZ2V0TW9kdWxlT3BlcmF0aW9uS2V5LFxuICAgIGdldFN0b3JhZ2VLZXkgPSBfcmVxdWlyZTUuZ2V0U3RvcmFnZUtleSxcbiAgICBUWVBFTkFNRV9LRVkgPSBfcmVxdWlyZTUuVFlQRU5BTUVfS0VZLFxuICAgIFJPT1RfSUQgPSBfcmVxdWlyZTUuUk9PVF9JRCxcbiAgICBST09UX1RZUEUgPSBfcmVxdWlyZTUuUk9PVF9UWVBFO1xuXG52YXIgX3JlcXVpcmU2ID0gcmVxdWlyZSgnLi9UeXBlSUQnKSxcbiAgICBnZW5lcmF0ZVR5cGVJRCA9IF9yZXF1aXJlNi5nZW5lcmF0ZVR5cGVJRCxcbiAgICBUWVBFX1NDSEVNQV9UWVBFID0gX3JlcXVpcmU2LlRZUEVfU0NIRU1BX1RZUEU7XG5cbi8qKlxuICogTm9ybWFsaXplcyB0aGUgcmVzdWx0cyBvZiBhIHF1ZXJ5IGFuZCBzdGFuZGFyZCBHcmFwaFFMIHJlc3BvbnNlLCB3cml0aW5nIHRoZVxuICogbm9ybWFsaXplZCByZWNvcmRzL2ZpZWxkcyBpbnRvIHRoZSBnaXZlbiBNdXRhYmxlUmVjb3JkU291cmNlLlxuICovXG5mdW5jdGlvbiBub3JtYWxpemUocmVjb3JkU291cmNlLCBzZWxlY3RvciwgcmVzcG9uc2UsIG9wdGlvbnMpIHtcbiAgdmFyIGRhdGFJRCA9IHNlbGVjdG9yLmRhdGFJRCxcbiAgICAgIG5vZGUgPSBzZWxlY3Rvci5ub2RlLFxuICAgICAgdmFyaWFibGVzID0gc2VsZWN0b3IudmFyaWFibGVzO1xuICB2YXIgbm9ybWFsaXplciA9IG5ldyBSZWxheVJlc3BvbnNlTm9ybWFsaXplcihyZWNvcmRTb3VyY2UsIHZhcmlhYmxlcywgb3B0aW9ucyk7XG4gIHJldHVybiBub3JtYWxpemVyLm5vcm1hbGl6ZVJlc3BvbnNlKG5vZGUsIGRhdGFJRCwgcmVzcG9uc2UpO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEhlbHBlciBmb3IgaGFuZGxpbmcgcGF5bG9hZHMuXG4gKi9cblxuXG52YXIgUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWxheVJlc3BvbnNlTm9ybWFsaXplcihyZWNvcmRTb3VyY2UsIHZhcmlhYmxlcywgb3B0aW9ucykge1xuICAgIHRoaXMuX2dldERhdGFJZCA9IG9wdGlvbnMuZ2V0RGF0YUlEO1xuICAgIHRoaXMuX2hhbmRsZUZpZWxkUGF5bG9hZHMgPSBbXTtcbiAgICB0aGlzLl90cmVhdE1pc3NpbmdGaWVsZHNBc051bGwgPSBvcHRpb25zLnRyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbDtcbiAgICB0aGlzLl9pbmNyZW1lbnRhbFBsYWNlaG9sZGVycyA9IFtdO1xuICAgIHRoaXMuX2lzQ2xpZW50RXh0ZW5zaW9uID0gZmFsc2U7XG4gICAgdGhpcy5faXNVbm1hdGNoZWRBYnN0cmFjdFR5cGUgPSBmYWxzZTtcbiAgICB0aGlzLl9tb2R1bGVJbXBvcnRQYXlsb2FkcyA9IFtdO1xuICAgIHRoaXMuX3BhdGggPSBvcHRpb25zLnBhdGggPyAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKG9wdGlvbnMucGF0aCkgOiBbXTtcbiAgICB0aGlzLl9yZWNvcmRTb3VyY2UgPSByZWNvcmRTb3VyY2U7XG4gICAgdGhpcy5fdmFyaWFibGVzID0gdmFyaWFibGVzO1xuICAgIHRoaXMuX3JlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplciA9IG9wdGlvbnMucmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyO1xuICAgIHRoaXMuX3JlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyID0gb3B0aW9ucy5yZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcjtcbiAgICB0aGlzLl9zaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50cyA9IG9wdGlvbnMuc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5ub3JtYWxpemVSZXNwb25zZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVJlc3BvbnNlKG5vZGUsIGRhdGFJRCwgZGF0YSkge1xuICAgIHZhciByZWNvcmQgPSB0aGlzLl9yZWNvcmRTb3VyY2UuZ2V0KGRhdGFJRCk7XG5cbiAgICAhcmVjb3JkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXIoKTogRXhwZWN0ZWQgcm9vdCByZWNvcmQgYCVzYCB0byBleGlzdC4nLCBkYXRhSUQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhub2RlLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yczogbnVsbCxcbiAgICAgIGZpZWxkUGF5bG9hZHM6IHRoaXMuX2hhbmRsZUZpZWxkUGF5bG9hZHMsXG4gICAgICBpbmNyZW1lbnRhbFBsYWNlaG9sZGVyczogdGhpcy5faW5jcmVtZW50YWxQbGFjZWhvbGRlcnMsXG4gICAgICBtb2R1bGVJbXBvcnRQYXlsb2FkczogdGhpcy5fbW9kdWxlSW1wb3J0UGF5bG9hZHMsXG4gICAgICBzb3VyY2U6IHRoaXMuX3JlY29yZFNvdXJjZSxcbiAgICAgIGlzRmluYWw6IGZhbHNlXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uX2dldFZhcmlhYmxlVmFsdWUgPSBmdW5jdGlvbiBfZ2V0VmFyaWFibGVWYWx1ZShuYW1lKSB7XG4gICAgIXRoaXMuX3ZhcmlhYmxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyKCk6IFVuZGVmaW5lZCB2YXJpYWJsZSBgJXNgLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cbiAgICByZXR1cm4gdGhpcy5fdmFyaWFibGVzW25hbWVdO1xuICB9O1xuXG4gIF9wcm90by5fZ2V0UmVjb3JkVHlwZSA9IGZ1bmN0aW9uIF9nZXRSZWNvcmRUeXBlKGRhdGEpIHtcbiAgICB2YXIgdHlwZU5hbWUgPSBkYXRhW1RZUEVOQU1FX0tFWV07XG4gICAgISh0eXBlTmFtZSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyKCk6IEV4cGVjdGVkIGEgdHlwZW5hbWUgZm9yIHJlY29yZCBgJXNgLicsIEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDIpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIHR5cGVOYW1lO1xuICB9O1xuXG4gIF9wcm90by5fdHJhdmVyc2VTZWxlY3Rpb25zID0gZnVuY3Rpb24gX3RyYXZlcnNlU2VsZWN0aW9ucyhub2RlLCByZWNvcmQsIGRhdGEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUuc2VsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlbGVjdGlvbiA9IG5vZGUuc2VsZWN0aW9uc1tpXTtcblxuICAgICAgc3dpdGNoIChzZWxlY3Rpb24ua2luZCkge1xuICAgICAgICBjYXNlIFNDQUxBUl9GSUVMRDpcbiAgICAgICAgY2FzZSBMSU5LRURfRklFTEQ6XG4gICAgICAgICAgdGhpcy5fbm9ybWFsaXplRmllbGQobm9kZSwgc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDT05ESVRJT046XG4gICAgICAgICAgdmFyIGNvbmRpdGlvblZhbHVlID0gdGhpcy5fZ2V0VmFyaWFibGVWYWx1ZShzZWxlY3Rpb24uY29uZGl0aW9uKTtcblxuICAgICAgICAgIGlmIChjb25kaXRpb25WYWx1ZSA9PT0gc2VsZWN0aW9uLnBhc3NpbmdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbiwgcmVjb3JkLCBkYXRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEZSQUdNRU5UX1NQUkVBRDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLmZyYWdtZW50LCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBJTkxJTkVfRlJBR01FTlQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIGFic3RyYWN0S2V5ID0gc2VsZWN0aW9uLmFic3RyYWN0S2V5O1xuXG4gICAgICAgICAgICBpZiAoYWJzdHJhY3RLZXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YXIgX3R5cGVOYW1lID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0VHlwZShyZWNvcmQpO1xuXG4gICAgICAgICAgICAgIGlmIChfdHlwZU5hbWUgPT09IHNlbGVjdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbiwgcmVjb3JkLCBkYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUFJFQ0lTRV9UWVBFX1JFRklORU1FTlQpIHtcbiAgICAgICAgICAgICAgdmFyIGltcGxlbWVudHNJbnRlcmZhY2UgPSBkYXRhLmhhc093blByb3BlcnR5KGFic3RyYWN0S2V5KTtcblxuICAgICAgICAgICAgICB2YXIgX3R5cGVOYW1lMiA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFR5cGUocmVjb3JkKTtcblxuICAgICAgICAgICAgICB2YXIgdHlwZUlEID0gZ2VuZXJhdGVUeXBlSUQoX3R5cGVOYW1lMik7XG5cbiAgICAgICAgICAgICAgdmFyIHR5cGVSZWNvcmQgPSB0aGlzLl9yZWNvcmRTb3VyY2UuZ2V0KHR5cGVJRCk7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVSZWNvcmQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHR5cGVSZWNvcmQgPSBSZWxheU1vZGVyblJlY29yZC5jcmVhdGUodHlwZUlELCBUWVBFX1NDSEVNQV9UWVBFKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3JlY29yZFNvdXJjZS5zZXQodHlwZUlELCB0eXBlUmVjb3JkKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIFJlbGF5TW9kZXJuUmVjb3JkLnNldFZhbHVlKHR5cGVSZWNvcmQsIGFic3RyYWN0S2V5LCBpbXBsZW1lbnRzSW50ZXJmYWNlKTtcblxuICAgICAgICAgICAgICBpZiAoaW1wbGVtZW50c0ludGVyZmFjZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGxlZ2FjeSBiZWhhdmlvciBmb3IgYWJzdHJhY3QgcmVmaW5lbWVudHM6IGFsd2F5cyBub3JtYWxpemUgZXZlblxuICAgICAgICAgICAgICAvLyBpZiB0aGUgdHlwZSBkb2Vzbid0IGNvbmZvcm0sIGJ1dCB0cmFjayBpZiB0aGUgdHlwZSBtYXRjaGVzIG9yIG5vdFxuICAgICAgICAgICAgICAvLyBmb3IgZGV0ZXJtaW5pbmcgd2hldGhlciByZXNwb25zZSBmaWVsZHMgYXJlIGV4cGVjdGVkIHRvIGJlIHByZXNlbnRcbiAgICAgICAgICAgICAgdmFyIF9pbXBsZW1lbnRzSW50ZXJmYWNlID0gZGF0YS5oYXNPd25Qcm9wZXJ0eShhYnN0cmFjdEtleSk7XG5cbiAgICAgICAgICAgICAgdmFyIHBhcmVudElzVW5tYXRjaGVkQWJzdHJhY3RUeXBlID0gdGhpcy5faXNVbm1hdGNoZWRBYnN0cmFjdFR5cGU7XG4gICAgICAgICAgICAgIHRoaXMuX2lzVW5tYXRjaGVkQWJzdHJhY3RUeXBlID0gdGhpcy5faXNVbm1hdGNoZWRBYnN0cmFjdFR5cGUgfHwgIV9pbXBsZW1lbnRzSW50ZXJmYWNlO1xuXG4gICAgICAgICAgICAgIHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSk7XG5cbiAgICAgICAgICAgICAgdGhpcy5faXNVbm1hdGNoZWRBYnN0cmFjdFR5cGUgPSBwYXJlbnRJc1VubWF0Y2hlZEFic3RyYWN0VHlwZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgVFlQRV9ESVNDUklNSU5BVE9SOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUFJFQ0lTRV9UWVBFX1JFRklORU1FTlQpIHtcbiAgICAgICAgICAgICAgdmFyIF9hYnN0cmFjdEtleSA9IHNlbGVjdGlvbi5hYnN0cmFjdEtleTtcblxuICAgICAgICAgICAgICB2YXIgX2ltcGxlbWVudHNJbnRlcmZhY2UyID0gZGF0YS5oYXNPd25Qcm9wZXJ0eShfYWJzdHJhY3RLZXkpO1xuXG4gICAgICAgICAgICAgIHZhciBfdHlwZU5hbWUzID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0VHlwZShyZWNvcmQpO1xuXG4gICAgICAgICAgICAgIHZhciBfdHlwZUlEID0gZ2VuZXJhdGVUeXBlSUQoX3R5cGVOYW1lMyk7XG5cbiAgICAgICAgICAgICAgdmFyIF90eXBlUmVjb3JkID0gdGhpcy5fcmVjb3JkU291cmNlLmdldChfdHlwZUlEKTtcblxuICAgICAgICAgICAgICBpZiAoX3R5cGVSZWNvcmQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIF90eXBlUmVjb3JkID0gUmVsYXlNb2Rlcm5SZWNvcmQuY3JlYXRlKF90eXBlSUQsIFRZUEVfU0NIRU1BX1RZUEUpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVjb3JkU291cmNlLnNldChfdHlwZUlELCBfdHlwZVJlY29yZCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBSZWxheU1vZGVyblJlY29yZC5zZXRWYWx1ZShfdHlwZVJlY29yZCwgX2Fic3RyYWN0S2V5LCBfaW1wbGVtZW50c0ludGVyZmFjZTIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBMSU5LRURfSEFORExFOlxuICAgICAgICBjYXNlIFNDQUxBUl9IQU5ETEU6XG4gICAgICAgICAgdmFyIGFyZ3MgPSBzZWxlY3Rpb24uYXJncyA/IGdldEFyZ3VtZW50VmFsdWVzKHNlbGVjdGlvbi5hcmdzLCB0aGlzLl92YXJpYWJsZXMpIDoge307XG4gICAgICAgICAgdmFyIGZpZWxkS2V5ID0gZ2V0U3RvcmFnZUtleShzZWxlY3Rpb24sIHRoaXMuX3ZhcmlhYmxlcyk7XG4gICAgICAgICAgdmFyIGhhbmRsZUtleSA9IGdldEhhbmRsZVN0b3JhZ2VLZXkoc2VsZWN0aW9uLCB0aGlzLl92YXJpYWJsZXMpO1xuXG4gICAgICAgICAgdGhpcy5faGFuZGxlRmllbGRQYXlsb2Fkcy5wdXNoKHtcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICBkYXRhSUQ6IFJlbGF5TW9kZXJuUmVjb3JkLmdldERhdGFJRChyZWNvcmQpLFxuICAgICAgICAgICAgZmllbGRLZXk6IGZpZWxkS2V5LFxuICAgICAgICAgICAgaGFuZGxlOiBzZWxlY3Rpb24uaGFuZGxlLFxuICAgICAgICAgICAgaGFuZGxlS2V5OiBoYW5kbGVLZXksXG4gICAgICAgICAgICBoYW5kbGVBcmdzOiBzZWxlY3Rpb24uaGFuZGxlQXJncyA/IGdldEFyZ3VtZW50VmFsdWVzKHNlbGVjdGlvbi5oYW5kbGVBcmdzLCB0aGlzLl92YXJpYWJsZXMpIDoge31cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTU9EVUxFX0lNUE9SVDpcbiAgICAgICAgICB0aGlzLl9ub3JtYWxpemVNb2R1bGVJbXBvcnQobm9kZSwgc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBERUZFUjpcbiAgICAgICAgICB0aGlzLl9ub3JtYWxpemVEZWZlcihzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFNUUkVBTTpcbiAgICAgICAgICB0aGlzLl9ub3JtYWxpemVTdHJlYW0oc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDTElFTlRfRVhURU5TSU9OOlxuICAgICAgICAgIHZhciBpc0NsaWVudEV4dGVuc2lvbiA9IHRoaXMuX2lzQ2xpZW50RXh0ZW5zaW9uO1xuICAgICAgICAgIHRoaXMuX2lzQ2xpZW50RXh0ZW5zaW9uID0gdHJ1ZTtcblxuICAgICAgICAgIHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSk7XG5cbiAgICAgICAgICB0aGlzLl9pc0NsaWVudEV4dGVuc2lvbiA9IGlzQ2xpZW50RXh0ZW5zaW9uO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ0xJRU5UX0NPTVBPTkVOVDpcbiAgICAgICAgICBpZiAodGhpcy5fc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLmZyYWdtZW50LCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBGTElHSFRfRklFTEQ6XG4gICAgICAgICAgaWYgKFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9SRUFDVF9GTElHSFRfQ09NUE9ORU5UX0ZJRUxEKSB7XG4gICAgICAgICAgICB0aGlzLl9ub3JtYWxpemVGbGlnaHRGaWVsZChub2RlLCBzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmxpZ2h0IGZpZWxkcyBhcmUgbm90IHlldCBzdXBwb3J0ZWQuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBzZWxlY3Rpb247XG4gICAgICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXIoKTogVW5leHBlY3RlZCBhc3Qga2luZCBgJXNgLicsIHNlbGVjdGlvbi5raW5kKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fbm9ybWFsaXplRGVmZXIgPSBmdW5jdGlvbiBfbm9ybWFsaXplRGVmZXIoZGVmZXIsIHJlY29yZCwgZGF0YSkge1xuICAgIHZhciBpc0RlZmVycmVkID0gZGVmZXJbXCJpZlwiXSA9PT0gbnVsbCB8fCB0aGlzLl9nZXRWYXJpYWJsZVZhbHVlKGRlZmVyW1wiaWZcIl0pO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh0eXBlb2YgaXNEZWZlcnJlZCA9PT0gJ2Jvb2xlYW4nLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IEV4cGVjdGVkIHZhbHVlIGZvciBAZGVmZXIgYGlmYCBhcmd1bWVudCB0byAnICsgJ2JlIGEgYm9vbGVhbiwgZ290IGAlc2AuJywgaXNEZWZlcnJlZCkgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgaWYgKGlzRGVmZXJyZWQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBJZiBkZWZlciBpcyBkaXNhYmxlZCB0aGVyZSB3aWxsIGJlIG5vIGFkZGl0aW9uYWwgcmVzcG9uc2UgY2h1bms6XG4gICAgICAvLyBub3JtYWxpemUgdGhlIGRhdGEgYWxyZWFkeSBwcmVzZW50LlxuICAgICAgdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKGRlZmVyLCByZWNvcmQsIGRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UgZGF0YSAqZm9yIHRoaXMgc2VsZWN0aW9uKiBzaG91bGQgbm90IGJlIHByZXNlbnQ6IGVucXVldWVcbiAgICAgIC8vIG1ldGFkYXRhIHRvIHByb2Nlc3MgdGhlIHN1YnNlcXVlbnQgcmVzcG9uc2UgY2h1bmsuXG4gICAgICB0aGlzLl9pbmNyZW1lbnRhbFBsYWNlaG9sZGVycy5wdXNoKHtcbiAgICAgICAga2luZDogJ2RlZmVyJyxcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgbGFiZWw6IGRlZmVyLmxhYmVsLFxuICAgICAgICBwYXRoOiAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKHRoaXMuX3BhdGgpLFxuICAgICAgICBzZWxlY3RvcjogY3JlYXRlTm9ybWFsaXphdGlvblNlbGVjdG9yKGRlZmVyLCBSZWxheU1vZGVyblJlY29yZC5nZXREYXRhSUQocmVjb3JkKSwgdGhpcy5fdmFyaWFibGVzKSxcbiAgICAgICAgdHlwZU5hbWU6IFJlbGF5TW9kZXJuUmVjb3JkLmdldFR5cGUocmVjb3JkKVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fbm9ybWFsaXplU3RyZWFtID0gZnVuY3Rpb24gX25vcm1hbGl6ZVN0cmVhbShzdHJlYW0sIHJlY29yZCwgZGF0YSkge1xuICAgIC8vIEFsd2F5cyBub3JtYWxpemUgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHN0cmVhbWluZyBpcyBlbmFibGVkIG9yIG5vdCxcbiAgICAvLyB0aGlzIHBvcHVsYXRlcyB0aGUgaW5pdGlhbCBhcnJheSB2YWx1ZSAoaW5jbHVkaW5nIGFueSBpdGVtcyB3aGVuXG4gICAgLy8gaW5pdGlhbF9jb3VudCA+IDApLlxuICAgIHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzdHJlYW0sIHJlY29yZCwgZGF0YSk7XG5cbiAgICB2YXIgaXNTdHJlYW1lZCA9IHN0cmVhbVtcImlmXCJdID09PSBudWxsIHx8IHRoaXMuX2dldFZhcmlhYmxlVmFsdWUoc3RyZWFtW1wiaWZcIl0pO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh0eXBlb2YgaXNTdHJlYW1lZCA9PT0gJ2Jvb2xlYW4nLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IEV4cGVjdGVkIHZhbHVlIGZvciBAc3RyZWFtIGBpZmAgYXJndW1lbnQgJyArICd0byBiZSBhIGJvb2xlYW4sIGdvdCBgJXNgLicsIGlzU3RyZWFtZWQpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIGlmIChpc1N0cmVhbWVkID09PSB0cnVlKSB7XG4gICAgICAvLyBJZiBzdHJlYW1pbmcgaXMgZW5hYmxlZCwgKmFsc28qIGVtaXQgbWV0YWRhdGEgdG8gcHJvY2VzcyBhbnlcbiAgICAgIC8vIHJlc3BvbnNlIGNodW5rcyB0aGF0IG1heSBiZSBkZWxpdmVyZWQuXG4gICAgICB0aGlzLl9pbmNyZW1lbnRhbFBsYWNlaG9sZGVycy5wdXNoKHtcbiAgICAgICAga2luZDogJ3N0cmVhbScsXG4gICAgICAgIGxhYmVsOiBzdHJlYW0ubGFiZWwsXG4gICAgICAgIHBhdGg6ICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkodGhpcy5fcGF0aCksXG4gICAgICAgIHBhcmVudElEOiBSZWxheU1vZGVyblJlY29yZC5nZXREYXRhSUQocmVjb3JkKSxcbiAgICAgICAgbm9kZTogc3RyZWFtLFxuICAgICAgICB2YXJpYWJsZXM6IHRoaXMuX3ZhcmlhYmxlc1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fbm9ybWFsaXplTW9kdWxlSW1wb3J0ID0gZnVuY3Rpb24gX25vcm1hbGl6ZU1vZHVsZUltcG9ydChwYXJlbnQsIG1vZHVsZUltcG9ydCwgcmVjb3JkLCBkYXRhKSB7XG4gICAgISh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgZGF0YSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlc3BvbnNlTm9ybWFsaXplcjogRXhwZWN0ZWQgZGF0YSBmb3IgQG1vZHVsZSB0byBiZSBhbiBvYmplY3QuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciB0eXBlTmFtZSA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFR5cGUocmVjb3JkKTtcbiAgICB2YXIgY29tcG9uZW50S2V5ID0gZ2V0TW9kdWxlQ29tcG9uZW50S2V5KG1vZHVsZUltcG9ydC5kb2N1bWVudE5hbWUpO1xuICAgIHZhciBjb21wb25lbnRSZWZlcmVuY2UgPSBkYXRhW2NvbXBvbmVudEtleV07XG4gICAgUmVsYXlNb2Rlcm5SZWNvcmQuc2V0VmFsdWUocmVjb3JkLCBjb21wb25lbnRLZXksIGNvbXBvbmVudFJlZmVyZW5jZSAhPT0gbnVsbCAmJiBjb21wb25lbnRSZWZlcmVuY2UgIT09IHZvaWQgMCA/IGNvbXBvbmVudFJlZmVyZW5jZSA6IG51bGwpO1xuICAgIHZhciBvcGVyYXRpb25LZXkgPSBnZXRNb2R1bGVPcGVyYXRpb25LZXkobW9kdWxlSW1wb3J0LmRvY3VtZW50TmFtZSk7XG4gICAgdmFyIG9wZXJhdGlvblJlZmVyZW5jZSA9IGRhdGFbb3BlcmF0aW9uS2V5XTtcbiAgICBSZWxheU1vZGVyblJlY29yZC5zZXRWYWx1ZShyZWNvcmQsIG9wZXJhdGlvbktleSwgb3BlcmF0aW9uUmVmZXJlbmNlICE9PSBudWxsICYmIG9wZXJhdGlvblJlZmVyZW5jZSAhPT0gdm9pZCAwID8gb3BlcmF0aW9uUmVmZXJlbmNlIDogbnVsbCk7XG5cbiAgICBpZiAob3BlcmF0aW9uUmVmZXJlbmNlICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX21vZHVsZUltcG9ydFBheWxvYWRzLnB1c2goe1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBkYXRhSUQ6IFJlbGF5TW9kZXJuUmVjb3JkLmdldERhdGFJRChyZWNvcmQpLFxuICAgICAgICBvcGVyYXRpb25SZWZlcmVuY2U6IG9wZXJhdGlvblJlZmVyZW5jZSxcbiAgICAgICAgcGF0aDogKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKSh0aGlzLl9wYXRoKSxcbiAgICAgICAgdHlwZU5hbWU6IHR5cGVOYW1lLFxuICAgICAgICB2YXJpYWJsZXM6IHRoaXMuX3ZhcmlhYmxlc1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fbm9ybWFsaXplRmllbGQgPSBmdW5jdGlvbiBfbm9ybWFsaXplRmllbGQocGFyZW50LCBzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSkge1xuICAgICEodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmIGRhdGEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnd3JpdGVGaWVsZCgpOiBFeHBlY3RlZCBkYXRhIGZvciBmaWVsZCBgJXNgIHRvIGJlIGFuIG9iamVjdC4nLCBzZWxlY3Rpb24ubmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciByZXNwb25zZUtleSA9IHNlbGVjdGlvbi5hbGlhcyB8fCBzZWxlY3Rpb24ubmFtZTtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0b3JhZ2VLZXkoc2VsZWN0aW9uLCB0aGlzLl92YXJpYWJsZXMpO1xuICAgIHZhciBmaWVsZFZhbHVlID0gZGF0YVtyZXNwb25zZUtleV07XG5cbiAgICBpZiAoZmllbGRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICBpZiAoZmllbGRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIEZpZWxkcyBtYXkgYmUgbWlzc2luZyBpbiB0aGUgcmVzcG9uc2UgaW4gdHdvIG1haW4gY2FzZXM6XG4gICAgICAgIC8vIC0gSW5zaWRlIGEgY2xpZW50IGV4dGVuc2lvbjogdGhlIHNlcnZlciB3aWxsIG5vdCBnZW5lcmFsbHkgcmV0dXJuXG4gICAgICAgIC8vICAgdmFsdWVzIGZvciB0aGVzZSBmaWVsZHMsIGJ1dCBhIGxvY2FsIHVwZGF0ZSBtYXkgcHJvdmlkZSB0aGVtLlxuICAgICAgICAvLyAtIEluc2lkZSBhbiBhYnN0cmFjdCB0eXBlIHJlZmluZW1lbnQgd2hlcmUgdGhlIGNvbmNyZXRlIHR5cGUgZG9lc1xuICAgICAgICAvLyAgIG5vdCBjb25mb3JtIHRvIHRoZSBpbnRlcmZhY2UvdW5pb24uXG4gICAgICAgIC8vIEhvd2V2ZXIgYW4gb3RoZXJ3aXNlLXJlcXVpcmVkIGZpZWxkIG1heSBhbHNvIGJlIG1pc3NpbmcgaWYgdGhlIHNlcnZlclxuICAgICAgICAvLyBpcyBjb25maWd1cmVkIHRvIHNraXAgZmllbGRzIHdpdGggYG51bGxgIHZhbHVlcywgaW4gd2hpY2ggY2FzZSB0aGVcbiAgICAgICAgLy8gY2xpZW50IGlzIGFzc3VtZWQgdG8gYmUgY29ycmVjdGx5IGNvbmZpZ3VyZWQgd2l0aFxuICAgICAgICAvLyB0cmVhdE1pc3NpbmdGaWVsZHNBc051bGw9dHJ1ZS5cbiAgICAgICAgdmFyIGlzT3B0aW9uYWxGaWVsZCA9IHRoaXMuX2lzQ2xpZW50RXh0ZW5zaW9uIHx8IHRoaXMuX2lzVW5tYXRjaGVkQWJzdHJhY3RUeXBlO1xuXG4gICAgICAgIGlmIChpc09wdGlvbmFsRmllbGQpIHtcbiAgICAgICAgICAvLyBGaWVsZCBub3QgZXhwZWN0ZWQgdG8gZXhpc3QgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZSBzZXJ2ZXIgaXMgcHJ1bmluZyBudWxsXG4gICAgICAgICAgLy8gZmllbGRzIG9yIG5vdC5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX3RyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCkge1xuICAgICAgICAgIC8vIE5vdCBvcHRpb25hbCBhbmQgdGhlIHNlcnZlciBpcyBub3QgcHJ1bmluZyBudWxsIGZpZWxkczogZmllbGQgaXMgZXhwZWN0ZWRcbiAgICAgICAgICAvLyB0byBiZSBwcmVzZW50XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyOiBQYXlsb2FkIGRpZCBub3QgY29udGFpbiBhIHZhbHVlICcgKyAnZm9yIGZpZWxkIGAlczogJXNgLiBDaGVjayB0aGF0IHlvdSBhcmUgcGFyc2luZyB3aXRoIHRoZSBzYW1lICcgKyAncXVlcnkgdGhhdCB3YXMgdXNlZCB0byBmZXRjaCB0aGUgcGF5bG9hZC4nLCByZXNwb25zZUtleSwgc3RvcmFnZUtleSkgOiB2b2lkIDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgaWYgKHNlbGVjdGlvbi5raW5kID09PSBTQ0FMQVJfRklFTEQpIHtcbiAgICAgICAgICB0aGlzLl92YWxpZGF0ZUNvbmZsaWN0aW5nRmllbGRzV2l0aElkZW50aWNhbElkKHJlY29yZCwgc3RvcmFnZUtleSwgZmllbGRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgUmVsYXlNb2Rlcm5SZWNvcmQuc2V0VmFsdWUocmVjb3JkLCBzdG9yYWdlS2V5LCBudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0aW9uLmtpbmQgPT09IFNDQUxBUl9GSUVMRCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICB0aGlzLl92YWxpZGF0ZUNvbmZsaWN0aW5nRmllbGRzV2l0aElkZW50aWNhbElkKHJlY29yZCwgc3RvcmFnZUtleSwgZmllbGRWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIFJlbGF5TW9kZXJuUmVjb3JkLnNldFZhbHVlKHJlY29yZCwgc3RvcmFnZUtleSwgZmllbGRWYWx1ZSk7XG4gICAgfSBlbHNlIGlmIChzZWxlY3Rpb24ua2luZCA9PT0gTElOS0VEX0ZJRUxEKSB7XG4gICAgICB0aGlzLl9wYXRoLnB1c2gocmVzcG9uc2VLZXkpO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uLnBsdXJhbCkge1xuICAgICAgICB0aGlzLl9ub3JtYWxpemVQbHVyYWxMaW5rKHNlbGVjdGlvbiwgcmVjb3JkLCBzdG9yYWdlS2V5LCBmaWVsZFZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX25vcm1hbGl6ZUxpbmsoc2VsZWN0aW9uLCByZWNvcmQsIHN0b3JhZ2VLZXksIGZpZWxkVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wYXRoLnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3Rpb247XG4gICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlc3BvbnNlTm9ybWFsaXplcigpOiBVbmV4cGVjdGVkIGFzdCBraW5kIGAlc2AgZHVyaW5nIG5vcm1hbGl6YXRpb24uJywgc2VsZWN0aW9uLmtpbmQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9ub3JtYWxpemVGbGlnaHRGaWVsZCA9IGZ1bmN0aW9uIF9ub3JtYWxpemVGbGlnaHRGaWVsZChwYXJlbnQsIHNlbGVjdGlvbiwgcmVjb3JkLCBkYXRhKSB7XG4gICAgdmFyIHJlc3BvbnNlS2V5ID0gc2VsZWN0aW9uLmFsaWFzIHx8IHNlbGVjdGlvbi5uYW1lO1xuICAgIHZhciBzdG9yYWdlS2V5ID0gZ2V0U3RvcmFnZUtleShzZWxlY3Rpb24sIHRoaXMuX3ZhcmlhYmxlcyk7XG4gICAgdmFyIGZpZWxkVmFsdWUgPSBkYXRhW3Jlc3BvbnNlS2V5XTtcblxuICAgIGlmIChmaWVsZFZhbHVlID09IG51bGwpIHtcbiAgICAgIGlmIChmaWVsZFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gRmxpZ2h0IGZpZWxkIG1heSBiZSBtaXNzaW5nIGluIHRoZSByZXNwb25zZSBpZjpcbiAgICAgICAgLy8gLSBJdCBpcyBpbnNpZGUgYW4gYWJzdHJhY3QgdHlwZSByZWZpbmVtZW50IHdoZXJlIHRoZSBjb25jcmV0ZSB0eXBlIGRvZXNcbiAgICAgICAgLy8gICBub3QgY29uZm9ybSB0byB0aGUgaW50ZXJmYWNlL3VuaW9uLlxuICAgICAgICAvLyBIb3dldmVyIGFuIG90aGVyd2lzZS1yZXF1aXJlZCBmaWVsZCBtYXkgYWxzbyBiZSBtaXNzaW5nIGlmIHRoZSBzZXJ2ZXJcbiAgICAgICAgLy8gaXMgY29uZmlndXJlZCB0byBza2lwIGZpZWxkcyB3aXRoIGBudWxsYCB2YWx1ZXMsIGluIHdoaWNoIGNhc2UgdGhlXG4gICAgICAgIC8vIGNsaWVudCBpcyBhc3N1bWVkIHRvIGJlIGNvcnJlY3RseSBjb25maWd1cmVkIHdpdGhcbiAgICAgICAgLy8gdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsPXRydWUuXG4gICAgICAgIGlmICh0aGlzLl9pc1VubWF0Y2hlZEFic3RyYWN0VHlwZSkge1xuICAgICAgICAgIC8vIEZpZWxkIG5vdCBleHBlY3RlZCB0byBleGlzdCByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIHNlcnZlciBpcyBwcnVuaW5nIG51bGxcbiAgICAgICAgICAvLyBmaWVsZHMgb3Igbm90LlxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsKSB7XG4gICAgICAgICAgLy8gTm90IG9wdGlvbmFsIGFuZCB0aGUgc2VydmVyIGlzIG5vdCBwcnVuaW5nIG51bGwgZmllbGRzOiBmaWVsZCBpcyBleHBlY3RlZFxuICAgICAgICAgIC8vIHRvIGJlIHByZXNlbnRcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IFBheWxvYWQgZGlkIG5vdCBjb250YWluIGEgdmFsdWUgJyArICdmb3IgZmllbGQgYCVzOiAlc2AuIENoZWNrIHRoYXQgeW91IGFyZSBwYXJzaW5nIHdpdGggdGhlIHNhbWUgJyArICdxdWVyeSB0aGF0IHdhcyB1c2VkIHRvIGZldGNoIHRoZSBwYXlsb2FkLicsIHJlc3BvbnNlS2V5LCBzdG9yYWdlS2V5KSA6IHZvaWQgMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgUmVsYXlNb2Rlcm5SZWNvcmQuc2V0VmFsdWUocmVjb3JkLCBzdG9yYWdlS2V5LCBudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcmVhY3RGbGlnaHRQYXlsb2FkID0gcmVmaW5lVG9SZWFjdEZsaWdodFBheWxvYWREYXRhKGZpZWxkVmFsdWUpO1xuICAgIHZhciByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIgPSB0aGlzLl9yZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXI7XG4gICAgIShyZWFjdEZsaWdodFBheWxvYWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlc3BvbnNlTm9ybWFsaXplcjogRXhwZWN0ZWQgUmVhY3QgRmxpZ2h0IHBheWxvYWQgZGF0YSB0byBiZSBhbiAnICsgJ29iamVjdCB3aXRoIGBzdGF0dXNgLCB0cmVlYCwgYHF1ZXJpZXNgIGFuZCBgZXJyb3JzYCBwcm9wZXJ0aWVzLCBnb3QgJyArICdgJXNgLicsIGZpZWxkVmFsdWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKHR5cGVvZiByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIgPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IEV4cGVjdGVkIHJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplciB0byAnICsgJ2JlIGEgZnVuY3Rpb24sIGdvdCBgJXNgLicsIHJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgaWYgKHJlYWN0RmxpZ2h0UGF5bG9hZC5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9yZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLl9yZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcihyZWFjdEZsaWdodFBheWxvYWQuc3RhdHVzLCByZWFjdEZsaWdodFBheWxvYWQuZXJyb3JzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdSZWxheVJlc3BvbnNlTm9ybWFsaXplcjogUmVjZWl2ZWQgc2VydmVyIGVycm9ycyBmb3IgZmllbGQgYCVzYC5cXG5cXG4nICsgJyVzXFxuJXMnLCByZXNwb25zZUtleSwgcmVhY3RGbGlnaHRQYXlsb2FkLmVycm9yc1swXS5tZXNzYWdlLCByZWFjdEZsaWdodFBheWxvYWQuZXJyb3JzWzBdLnN0YWNrKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVhY3RGbGlnaHRJRCA9IGdlbmVyYXRlQ2xpZW50SUQoUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0RGF0YUlEKHJlY29yZCksIGdldFN0b3JhZ2VLZXkoc2VsZWN0aW9uLCB0aGlzLl92YXJpYWJsZXMpKTtcblxuICAgIHZhciByZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkID0gdGhpcy5fcmVjb3JkU291cmNlLmdldChyZWFjdEZsaWdodElEKTtcblxuICAgIGlmIChyZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkID09IG51bGwpIHtcbiAgICAgIHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmQgPSBSZWxheU1vZGVyblJlY29yZC5jcmVhdGUocmVhY3RGbGlnaHRJRCwgUkVBQ1RfRkxJR0hUX1RZUEVfTkFNRSk7XG5cbiAgICAgIHRoaXMuX3JlY29yZFNvdXJjZS5zZXQocmVhY3RGbGlnaHRJRCwgcmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZCk7XG4gICAgfVxuXG4gICAgaWYgKHJlYWN0RmxpZ2h0UGF5bG9hZC50cmVlID09IG51bGwpIHtcbiAgICAgIC8vIFRoaXMgdHlwaWNhbGx5IGluZGljYXRlcyB0aGF0IGEgZmF0YWwgc2VydmVyIGVycm9yIHByZXZlbnRlZCByb3dzIGZyb21cbiAgICAgIC8vIGJlaW5nIHdyaXR0ZW4uIFdoZW4gdGhpcyBvY2N1cnMsIHdlIHNob3VsZCBub3QgY29udGludWUgbm9ybWFsaXphdGlvbiBvZlxuICAgICAgLy8gdGhlIEZsaWdodCBmaWVsZCBiZWNhdXNlIHRoZSByb3cgcmVzcG9uc2UgaXMgbWFsZm9ybWVkLlxuICAgICAgLy9cbiAgICAgIC8vIFJlY2VpdmluZyBlbXB0eSByb3dzIGlzIE9LIGJlY2F1c2UgaXQgY2FuIGluZGljYXRlIHRoZSBzdGFydCBvZiBhIHN0cmVhbS5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdSZWxheVJlc3BvbnNlTm9ybWFsaXplcjogRXhwZWN0ZWQgYHRyZWVgIG5vdCB0byBiZSBudWxsLiBUaGlzICcgKyAndHlwaWNhbGx5IGluZGljYXRlcyB0aGF0IGEgZmF0YWwgc2VydmVyIGVycm9yIHByZXZlbnRlZCBhbnkgU2VydmVyICcgKyAnQ29tcG9uZW50IHJvd3MgZnJvbSBiZWluZyB3cml0dGVuLicpIDogdm9pZCAwOyAvLyBXZSBjcmVhdGUgdGhlIGZsaWdodCByZWNvcmQgd2l0aCBhIG51bGwgdmFsdWUgZm9yIHRoZSB0cmVlXG4gICAgICAvLyBhbmQgZW1wdHkgcmVhY2hhYmxlIGRlZmluaXRpb25zXG5cbiAgICAgIFJlbGF5TW9kZXJuUmVjb3JkLnNldFZhbHVlKHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmQsIFJFQUNUX0ZMSUdIVF9UUkVFX1NUT1JBR0VfS0VZLCBudWxsKTtcbiAgICAgIFJlbGF5TW9kZXJuUmVjb3JkLnNldFZhbHVlKHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmQsIFJFQUNUX0ZMSUdIVF9FWEVDVVRBQkxFX0RFRklOSVRJT05TX1NUT1JBR0VfS0VZLCBbXSk7XG4gICAgICBSZWxheU1vZGVyblJlY29yZC5zZXRMaW5rZWRSZWNvcmRJRChyZWNvcmQsIHN0b3JhZ2VLZXksIHJlYWN0RmxpZ2h0SUQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gV2Ugc3RvcmUgdGhlIGRlc2VyaWFsaXplZCByZWFjdEZsaWdodENsaWVudFJlc3BvbnNlIGluIGEgc2VwYXJhdGVcbiAgICAvLyByZWNvcmQgYW5kIGxpbmsgaXQgdG8gdGhlIHBhcmVudCByZWNvcmQuIFRoaXMgaXMgc28gd2UgY2FuIEdDIHRoZSBGbGlnaHRcbiAgICAvLyB0cmVlIGxhdGVyIGV2ZW4gaWYgdGhlIHBhcmVudCByZWNvcmQgaXMgc3RpbGwgcmVhY2hhYmxlLlxuXG5cbiAgICB2YXIgcmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZSA9IHJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcihyZWFjdEZsaWdodFBheWxvYWQudHJlZSk7XG4gICAgUmVsYXlNb2Rlcm5SZWNvcmQuc2V0VmFsdWUocmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZCwgUkVBQ1RfRkxJR0hUX1RSRUVfU1RPUkFHRV9LRVksIHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2UpO1xuICAgIHZhciByZWFjaGFibGVFeGVjdXRhYmxlRGVmaW5pdGlvbnMgPSBbXTtcblxuICAgIHZhciBfaXRlcmF0b3IgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkocmVhY3RGbGlnaHRQYXlsb2FkLnF1ZXJpZXMpLFxuICAgICAgICBfc3RlcDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICB2YXIgcXVlcnkgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICBpZiAocXVlcnkucmVzcG9uc2UuZGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fbW9kdWxlSW1wb3J0UGF5bG9hZHMucHVzaCh7XG4gICAgICAgICAgICBkYXRhOiBxdWVyeS5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgICAgZGF0YUlEOiBST09UX0lELFxuICAgICAgICAgICAgb3BlcmF0aW9uUmVmZXJlbmNlOiBxdWVyeS5tb2R1bGUsXG4gICAgICAgICAgICBwYXRoOiBbXSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBST09UX1RZUEUsXG4gICAgICAgICAgICB2YXJpYWJsZXM6IHF1ZXJ5LnZhcmlhYmxlc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVhY2hhYmxlRXhlY3V0YWJsZURlZmluaXRpb25zLnB1c2goe1xuICAgICAgICAgIG1vZHVsZTogcXVlcnkubW9kdWxlLFxuICAgICAgICAgIHZhcmlhYmxlczogcXVlcnkudmFyaWFibGVzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICB9XG5cbiAgICB2YXIgX2l0ZXJhdG9yMiA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShyZWFjdEZsaWdodFBheWxvYWQuZnJhZ21lbnRzKSxcbiAgICAgICAgX3N0ZXAyO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBmcmFnbWVudCA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICBpZiAoZnJhZ21lbnQucmVzcG9uc2UuZGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fbW9kdWxlSW1wb3J0UGF5bG9hZHMucHVzaCh7XG4gICAgICAgICAgICBkYXRhOiBmcmFnbWVudC5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgICAgZGF0YUlEOiBmcmFnbWVudC5fX2lkLFxuICAgICAgICAgICAgb3BlcmF0aW9uUmVmZXJlbmNlOiBmcmFnbWVudC5tb2R1bGUsXG4gICAgICAgICAgICBwYXRoOiBbXSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBmcmFnbWVudC5fX3R5cGVuYW1lLFxuICAgICAgICAgICAgdmFyaWFibGVzOiBmcmFnbWVudC52YXJpYWJsZXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlYWNoYWJsZUV4ZWN1dGFibGVEZWZpbml0aW9ucy5wdXNoKHtcbiAgICAgICAgICBtb2R1bGU6IGZyYWdtZW50Lm1vZHVsZSxcbiAgICAgICAgICB2YXJpYWJsZXM6IGZyYWdtZW50LnZhcmlhYmxlc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IyLmYoKTtcbiAgICB9XG5cbiAgICBSZWxheU1vZGVyblJlY29yZC5zZXRWYWx1ZShyZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkLCBSRUFDVF9GTElHSFRfRVhFQ1VUQUJMRV9ERUZJTklUSU9OU19TVE9SQUdFX0tFWSwgcmVhY2hhYmxlRXhlY3V0YWJsZURlZmluaXRpb25zKTtcbiAgICBSZWxheU1vZGVyblJlY29yZC5zZXRMaW5rZWRSZWNvcmRJRChyZWNvcmQsIHN0b3JhZ2VLZXksIHJlYWN0RmxpZ2h0SUQpO1xuICB9O1xuXG4gIF9wcm90by5fbm9ybWFsaXplTGluayA9IGZ1bmN0aW9uIF9ub3JtYWxpemVMaW5rKGZpZWxkLCByZWNvcmQsIHN0b3JhZ2VLZXksIGZpZWxkVmFsdWUpIHtcbiAgICB2YXIgX2ZpZWxkJGNvbmNyZXRlVHlwZTtcblxuICAgICEodHlwZW9mIGZpZWxkVmFsdWUgPT09ICdvYmplY3QnICYmIGZpZWxkVmFsdWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IEV4cGVjdGVkIGRhdGEgZm9yIGZpZWxkIGAlc2AgdG8gYmUgYW4gb2JqZWN0LicsIHN0b3JhZ2VLZXkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgbmV4dElEID0gdGhpcy5fZ2V0RGF0YUlkKCAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS12YXJpYW5jZV1cbiAgICBmaWVsZFZhbHVlLCAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS12YXJpYW5jZV1cbiAgICAoX2ZpZWxkJGNvbmNyZXRlVHlwZSA9IGZpZWxkLmNvbmNyZXRlVHlwZSkgIT09IG51bGwgJiYgX2ZpZWxkJGNvbmNyZXRlVHlwZSAhPT0gdm9pZCAwID8gX2ZpZWxkJGNvbmNyZXRlVHlwZSA6IHRoaXMuX2dldFJlY29yZFR5cGUoZmllbGRWYWx1ZSkpIHx8IC8vIFJldXNlIHByZXZpb3VzbHkgZ2VuZXJhdGVkIGNsaWVudCBJRHNcbiAgICBSZWxheU1vZGVyblJlY29yZC5nZXRMaW5rZWRSZWNvcmRJRChyZWNvcmQsIHN0b3JhZ2VLZXkpIHx8IGdlbmVyYXRlQ2xpZW50SUQoUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0RGF0YUlEKHJlY29yZCksIHN0b3JhZ2VLZXkpO1xuICAgICEodHlwZW9mIG5leHRJRCA9PT0gJ3N0cmluZycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IEV4cGVjdGVkIGlkIG9uIGZpZWxkIGAlc2AgdG8gYmUgYSBzdHJpbmcuJywgc3RvcmFnZUtleSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgdGhpcy5fdmFsaWRhdGVDb25mbGljdGluZ0xpbmtlZEZpZWxkc1dpdGhJZGVudGljYWxJZChyZWNvcmQsIFJlbGF5TW9kZXJuUmVjb3JkLmdldExpbmtlZFJlY29yZElEKHJlY29yZCwgc3RvcmFnZUtleSksIG5leHRJRCwgc3RvcmFnZUtleSk7XG4gICAgfVxuXG4gICAgUmVsYXlNb2Rlcm5SZWNvcmQuc2V0TGlua2VkUmVjb3JkSUQocmVjb3JkLCBzdG9yYWdlS2V5LCBuZXh0SUQpO1xuXG4gICAgdmFyIG5leHRSZWNvcmQgPSB0aGlzLl9yZWNvcmRTb3VyY2UuZ2V0KG5leHRJRCk7XG5cbiAgICBpZiAoIW5leHRSZWNvcmQpIHtcbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXZhcmlhbmNlXVxuICAgICAgdmFyIF90eXBlTmFtZTQgPSBmaWVsZC5jb25jcmV0ZVR5cGUgfHwgdGhpcy5fZ2V0UmVjb3JkVHlwZShmaWVsZFZhbHVlKTtcblxuICAgICAgbmV4dFJlY29yZCA9IFJlbGF5TW9kZXJuUmVjb3JkLmNyZWF0ZShuZXh0SUQsIF90eXBlTmFtZTQpO1xuXG4gICAgICB0aGlzLl9yZWNvcmRTb3VyY2Uuc2V0KG5leHRJRCwgbmV4dFJlY29yZCk7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHRoaXMuX3ZhbGlkYXRlUmVjb3JkVHlwZShuZXh0UmVjb3JkLCBmaWVsZCwgZmllbGRWYWx1ZSk7XG4gICAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS12YXJpYW5jZV1cblxuXG4gICAgdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKGZpZWxkLCBuZXh0UmVjb3JkLCBmaWVsZFZhbHVlKTtcbiAgfTtcblxuICBfcHJvdG8uX25vcm1hbGl6ZVBsdXJhbExpbmsgPSBmdW5jdGlvbiBfbm9ybWFsaXplUGx1cmFsTGluayhmaWVsZCwgcmVjb3JkLCBzdG9yYWdlS2V5LCBmaWVsZFZhbHVlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICFBcnJheS5pc0FycmF5KGZpZWxkVmFsdWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IEV4cGVjdGVkIGRhdGEgZm9yIGZpZWxkIGAlc2AgdG8gYmUgYW4gYXJyYXkgJyArICdvZiBvYmplY3RzLicsIHN0b3JhZ2VLZXkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgcHJldklEcyA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldExpbmtlZFJlY29yZElEcyhyZWNvcmQsIHN0b3JhZ2VLZXkpO1xuICAgIHZhciBuZXh0SURzID0gW107XG4gICAgZmllbGRWYWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBuZXh0SW5kZXgpIHtcbiAgICAgIHZhciBfZmllbGQkY29uY3JldGVUeXBlMjtcblxuICAgICAgLy8gdmFsaWRhdGUgcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKGl0ZW0gPT0gbnVsbCkge1xuICAgICAgICBuZXh0SURzLnB1c2goaXRlbSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuX3BhdGgucHVzaChTdHJpbmcobmV4dEluZGV4KSk7XG5cbiAgICAgICEodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyOiBFeHBlY3RlZCBlbGVtZW50cyBmb3IgZmllbGQgYCVzYCB0byBiZSAnICsgJ29iamVjdHMuJywgc3RvcmFnZUtleSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIG5leHRJRCA9IF90aGlzLl9nZXREYXRhSWQoIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXZhcmlhbmNlXVxuICAgICAgaXRlbSwgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdmFyaWFuY2VdXG4gICAgICAoX2ZpZWxkJGNvbmNyZXRlVHlwZTIgPSBmaWVsZC5jb25jcmV0ZVR5cGUpICE9PSBudWxsICYmIF9maWVsZCRjb25jcmV0ZVR5cGUyICE9PSB2b2lkIDAgPyBfZmllbGQkY29uY3JldGVUeXBlMiA6IF90aGlzLl9nZXRSZWNvcmRUeXBlKGl0ZW0pKSB8fCBwcmV2SURzICYmIHByZXZJRHNbbmV4dEluZGV4XSB8fCAvLyBSZXVzZSBwcmV2aW91c2x5IGdlbmVyYXRlZCBjbGllbnQgSURzOlxuICAgICAgZ2VuZXJhdGVDbGllbnRJRChSZWxheU1vZGVyblJlY29yZC5nZXREYXRhSUQocmVjb3JkKSwgc3RvcmFnZUtleSwgbmV4dEluZGV4KTtcbiAgICAgICEodHlwZW9mIG5leHRJRCA9PT0gJ3N0cmluZycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IEV4cGVjdGVkIGlkIG9mIGVsZW1lbnRzIG9mIGZpZWxkIGAlc2AgdG8gJyArICdiZSBzdHJpbmdzLicsIHN0b3JhZ2VLZXkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIG5leHRJRHMucHVzaChuZXh0SUQpO1xuXG4gICAgICB2YXIgbmV4dFJlY29yZCA9IF90aGlzLl9yZWNvcmRTb3VyY2UuZ2V0KG5leHRJRCk7XG5cbiAgICAgIGlmICghbmV4dFJlY29yZCkge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS12YXJpYW5jZV1cbiAgICAgICAgdmFyIF90eXBlTmFtZTUgPSBmaWVsZC5jb25jcmV0ZVR5cGUgfHwgX3RoaXMuX2dldFJlY29yZFR5cGUoaXRlbSk7XG5cbiAgICAgICAgbmV4dFJlY29yZCA9IFJlbGF5TW9kZXJuUmVjb3JkLmNyZWF0ZShuZXh0SUQsIF90eXBlTmFtZTUpO1xuXG4gICAgICAgIF90aGlzLl9yZWNvcmRTb3VyY2Uuc2V0KG5leHRJRCwgbmV4dFJlY29yZCk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBfdGhpcy5fdmFsaWRhdGVSZWNvcmRUeXBlKG5leHRSZWNvcmQsIGZpZWxkLCBpdGVtKTtcbiAgICAgIH0gLy8gTk9URTogdGhlIGNoZWNrIHRvIHN0cmlwIF9fREVWX18gY29kZSBvbmx5IHdvcmtzIGZvciBzaW1wbGVcbiAgICAgIC8vIGBpZiAoX19ERVZfXylgXG5cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpZiAocHJldklEcykge1xuICAgICAgICAgIF90aGlzLl92YWxpZGF0ZUNvbmZsaWN0aW5nTGlua2VkRmllbGRzV2l0aElkZW50aWNhbElkKHJlY29yZCwgcHJldklEc1tuZXh0SW5kZXhdLCBuZXh0SUQsIHN0b3JhZ2VLZXkpO1xuICAgICAgICB9XG4gICAgICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXZhcmlhbmNlXVxuXG5cbiAgICAgIF90aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoZmllbGQsIG5leHRSZWNvcmQsIGl0ZW0pO1xuXG4gICAgICBfdGhpcy5fcGF0aC5wb3AoKTtcbiAgICB9KTtcbiAgICBSZWxheU1vZGVyblJlY29yZC5zZXRMaW5rZWRSZWNvcmRJRHMocmVjb3JkLCBzdG9yYWdlS2V5LCBuZXh0SURzKTtcbiAgfVxuICAvKipcbiAgICogV2FybnMgaWYgdGhlIHR5cGUgb2YgdGhlIHJlY29yZCBkb2VzIG5vdCBtYXRjaCB0aGUgdHlwZSBvZiB0aGUgZmllbGQvcGF5bG9hZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uX3ZhbGlkYXRlUmVjb3JkVHlwZSA9IGZ1bmN0aW9uIF92YWxpZGF0ZVJlY29yZFR5cGUocmVjb3JkLCBmaWVsZCwgcGF5bG9hZCkge1xuICAgIHZhciBfZmllbGQkY29uY3JldGVUeXBlMztcblxuICAgIHZhciB0eXBlTmFtZSA9IChfZmllbGQkY29uY3JldGVUeXBlMyA9IGZpZWxkLmNvbmNyZXRlVHlwZSkgIT09IG51bGwgJiYgX2ZpZWxkJGNvbmNyZXRlVHlwZTMgIT09IHZvaWQgMCA/IF9maWVsZCRjb25jcmV0ZVR5cGUzIDogdGhpcy5fZ2V0UmVjb3JkVHlwZShwYXlsb2FkKTtcbiAgICB2YXIgZGF0YUlEID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0RGF0YUlEKHJlY29yZCk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhpc0NsaWVudElEKGRhdGFJRCkgJiYgZGF0YUlEICE9PSBST09UX0lEIHx8IFJlbGF5TW9kZXJuUmVjb3JkLmdldFR5cGUocmVjb3JkKSA9PT0gdHlwZU5hbWUsICdSZWxheVJlc3BvbnNlTm9ybWFsaXplcjogSW52YWxpZCByZWNvcmQgYCVzYC4gRXhwZWN0ZWQgJXMgdG8gYmUgJyArICdjb25zaXN0ZW50LCBidXQgdGhlIHJlY29yZCB3YXMgYXNzaWduZWQgY29uZmxpY3RpbmcgdHlwZXMgYCVzYCAnICsgJ2FuZCBgJXNgLiBUaGUgR3JhcGhRTCBzZXJ2ZXIgbGlrZWx5IHZpb2xhdGVkIHRoZSBnbG9iYWxseSB1bmlxdWUgJyArICdpZCByZXF1aXJlbWVudCBieSByZXR1cm5pbmcgdGhlIHNhbWUgaWQgZm9yIGRpZmZlcmVudCBvYmplY3RzLicsIGRhdGFJRCwgVFlQRU5BTUVfS0VZLCBSZWxheU1vZGVyblJlY29yZC5nZXRUeXBlKHJlY29yZCksIHR5cGVOYW1lKSA6IHZvaWQgMDtcbiAgfVxuICAvKipcbiAgICogV2FybnMgaWYgYSBzaW5nbGUgcmVzcG9uc2UgY29udGFpbnMgY29uZmxpY3RpbmcgZmllbGRzIHdpdGggdGhlIHNhbWUgaWRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uX3ZhbGlkYXRlQ29uZmxpY3RpbmdGaWVsZHNXaXRoSWRlbnRpY2FsSWQgPSBmdW5jdGlvbiBfdmFsaWRhdGVDb25mbGljdGluZ0ZpZWxkc1dpdGhJZGVudGljYWxJZChyZWNvcmQsIHN0b3JhZ2VLZXksIGZpZWxkVmFsdWUpIHtcbiAgICAvLyBOT1RFOiBPbmx5IGNhbGwgdGhpcyBmdW5jdGlvbiBpbiBERVZcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICB2YXIgZGF0YUlEID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0RGF0YUlEKHJlY29yZCk7XG4gICAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFZhbHVlKHJlY29yZCwgc3RvcmFnZUtleSk7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0b3JhZ2VLZXkgPT09IFRZUEVOQU1FX0tFWSB8fCBwcmV2aW91c1ZhbHVlID09PSB1bmRlZmluZWQgfHwgYXJlRXF1YWwocHJldmlvdXNWYWx1ZSwgZmllbGRWYWx1ZSksICdSZWxheVJlc3BvbnNlTm9ybWFsaXplcjogSW52YWxpZCByZWNvcmQuIFRoZSByZWNvcmQgY29udGFpbnMgdHdvICcgKyAnaW5zdGFuY2VzIG9mIHRoZSBzYW1lIGlkOiBgJXNgIHdpdGggY29uZmxpY3RpbmcgZmllbGQsICVzIGFuZCBpdHMgdmFsdWVzOiAlcyBhbmQgJXMuICcgKyAnSWYgdHdvIGZpZWxkcyBhcmUgZGlmZmVyZW50IGJ1dCBzaGFyZSAnICsgJ3RoZSBzYW1lIGlkLCBvbmUgZmllbGQgd2lsbCBvdmVyd3JpdGUgdGhlIG90aGVyLicsIGRhdGFJRCwgc3RvcmFnZUtleSwgcHJldmlvdXNWYWx1ZSwgZmllbGRWYWx1ZSkgOiB2b2lkIDA7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBXYXJucyBpZiBhIHNpbmdsZSByZXNwb25zZSBjb250YWlucyBjb25mbGljdGluZyBmaWVsZHMgd2l0aCB0aGUgc2FtZSBpZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fdmFsaWRhdGVDb25mbGljdGluZ0xpbmtlZEZpZWxkc1dpdGhJZGVudGljYWxJZCA9IGZ1bmN0aW9uIF92YWxpZGF0ZUNvbmZsaWN0aW5nTGlua2VkRmllbGRzV2l0aElkZW50aWNhbElkKHJlY29yZCwgcHJldklELCBuZXh0SUQsIHN0b3JhZ2VLZXkpIHtcbiAgICAvLyBOT1RFOiBPbmx5IGNhbGwgdGhpcyBmdW5jdGlvbiBpbiBERVZcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZJRCA9PT0gdW5kZWZpbmVkIHx8IHByZXZJRCA9PT0gbmV4dElELCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IEludmFsaWQgcmVjb3JkLiBUaGUgcmVjb3JkIGNvbnRhaW5zICcgKyAncmVmZXJlbmNlcyB0byB0aGUgY29uZmxpY3RpbmcgZmllbGQsICVzIGFuZCBpdHMgaWQgdmFsdWVzOiAlcyBhbmQgJXMuICcgKyAnV2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCB0aGUgcmVjb3JkIHRoZSBmaWVsZCBwb2ludHMgJyArICd0byByZW1haW5zIGNvbnNpc3RlbnQgb3Igb25lIGZpZWxkIHdpbGwgb3ZlcndyaXRlIHRoZSBvdGhlci4nLCBzdG9yYWdlS2V5LCBwcmV2SUQsIG5leHRJRCkgOiB2b2lkIDA7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBSZWxheVJlc3BvbnNlTm9ybWFsaXplcjtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG5vcm1hbGl6ZTogbm9ybWFsaXplXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vUmVsYXlNb2Rlcm5SZWNvcmQnKSxcbiAgICBnZXRUeXBlID0gX3JlcXVpcmUuZ2V0VHlwZTtcblxuLy8gUmVhY2hhYmxlIChjbGllbnQpIGV4ZWN1dGFibGUgZGVmaW5pdGlvbnMgZW5jb3VudGVyZWQgd2hpbGUgc2VydmVyIGNvbXBvbmVudFxuLy8gcmVuZGVyaW5nXG52YXIgUkVBQ1RfRkxJR0hUX0VYRUNVVEFCTEVfREVGSU5JVElPTlNfU1RPUkFHRV9LRVkgPSAnZXhlY3V0YWJsZURlZmluaXRpb25zJztcbnZhciBSRUFDVF9GTElHSFRfVFJFRV9TVE9SQUdFX0tFWSA9ICd0cmVlJztcbnZhciBSRUFDVF9GTElHSFRfVFlQRV9OQU1FID0gJ1JlYWN0RmxpZ2h0Q29tcG9uZW50JztcblxuZnVuY3Rpb24gcmVmaW5lVG9SZWFjdEZsaWdodFBheWxvYWREYXRhKHBheWxvYWQpIHtcbiAgaWYgKHBheWxvYWQgPT0gbnVsbCB8fCB0eXBlb2YgcGF5bG9hZCAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHBheWxvYWQuc3RhdHVzICE9PSAnc3RyaW5nJyB8fCAhQXJyYXkuaXNBcnJheShwYXlsb2FkLnRyZWUpICYmIHBheWxvYWQudHJlZSAhPT0gbnVsbCB8fCAhQXJyYXkuaXNBcnJheShwYXlsb2FkLnF1ZXJpZXMpIHx8ICFBcnJheS5pc0FycmF5KHBheWxvYWQuZnJhZ21lbnRzKSB8fCAhQXJyYXkuaXNBcnJheShwYXlsb2FkLmVycm9ycykpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwYXlsb2FkO1xufVxuXG5mdW5jdGlvbiBnZXRSZWFjdEZsaWdodENsaWVudFJlc3BvbnNlKHJlY29yZCkge1xuICAhKGdldFR5cGUocmVjb3JkKSA9PT0gUkVBQ1RfRkxJR0hUX1RZUEVfTkFNRSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdnZXRSZWFjdEZsaWdodENsaWVudFJlc3BvbnNlKCk6IEV4cGVjdGVkIGEgUmVhY3RGbGlnaHRDb21wb25lbnRSZWNvcmQsICcgKyAnZ290ICVzLicsIHJlY29yZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgcmVzcG9uc2UgPSByZWNvcmRbUkVBQ1RfRkxJR0hUX1RSRUVfU1RPUkFHRV9LRVldO1xuXG4gIGlmIChyZXNwb25zZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBSRUFDVF9GTElHSFRfRVhFQ1VUQUJMRV9ERUZJTklUSU9OU19TVE9SQUdFX0tFWTogUkVBQ1RfRkxJR0hUX0VYRUNVVEFCTEVfREVGSU5JVElPTlNfU1RPUkFHRV9LRVksXG4gIFJFQUNUX0ZMSUdIVF9UUkVFX1NUT1JBR0VfS0VZOiBSRUFDVF9GTElHSFRfVFJFRV9TVE9SQUdFX0tFWSxcbiAgUkVBQ1RfRkxJR0hUX1RZUEVfTkFNRTogUkVBQ1RfRkxJR0hUX1RZUEVfTkFNRSxcbiAgZ2V0UmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZTogZ2V0UmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZSxcbiAgcmVmaW5lVG9SZWFjdEZsaWdodFBheWxvYWREYXRhOiByZWZpbmVUb1JlYWN0RmxpZ2h0UGF5bG9hZERhdGFcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWxheUZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4uL3V0aWwvUmVsYXlGZWF0dXJlRmxhZ3MnKTtcblxudmFyIFJlbGF5UmVhZGVyID0gcmVxdWlyZSgnLi9SZWxheVJlYWRlcicpO1xuXG52YXIgZGVlcEZyZWV6ZSA9IHJlcXVpcmUoJy4uL3V0aWwvZGVlcEZyZWV6ZScpO1xuXG52YXIgaGFzT3ZlcmxhcHBpbmdJRHMgPSByZXF1aXJlKCcuL2hhc092ZXJsYXBwaW5nSURzJyk7XG5cbnZhciByZWN5Y2xlTm9kZXNJbnRvID0gcmVxdWlyZSgnLi4vdXRpbC9yZWN5Y2xlTm9kZXNJbnRvJyk7XG5cbnZhciBSZWxheVN0b3JlU3Vic2NyaXB0aW9ucyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlbGF5U3RvcmVTdWJzY3JpcHRpb25zKGxvZykge1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5fX2xvZyA9IGxvZztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZWxheVN0b3JlU3Vic2NyaXB0aW9ucy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShzbmFwc2hvdCwgY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcbiAgICAgIGJhY2t1cDogbnVsbCxcbiAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgIHNuYXBzaG90OiBzbmFwc2hvdCxcbiAgICAgIHN0YWxlOiBmYWxzZVxuICAgIH07XG5cbiAgICB2YXIgZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1tcImRlbGV0ZVwiXShzdWJzY3JpcHRpb24pO1xuICAgIH07XG5cbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zLmFkZChzdWJzY3JpcHRpb24pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3Bvc2U6IGRpc3Bvc2VcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5zbmFwc2hvdFN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiBzbmFwc2hvdFN1YnNjcmlwdGlvbnMoc291cmNlKSB7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgIC8vIEJhY2t1cCBvY2N1cnMgYWZ0ZXIgd3JpdGluZyBhIG5ldyBcImZpbmFsXCIgcGF5bG9hZChzKSBhbmQgYmVmb3JlIChyZSlhcHBseWluZ1xuICAgICAgLy8gb3B0aW1pc3RpYyBjaGFuZ2VzLiBFYWNoIHN1YnNjcmlwdGlvbidzIGBzbmFwc2hvdGAgcmVwcmVzZW50cyB3aGF0IHdhcyAqbGFzdFxuICAgICAgLy8gcHVibGlzaGVkIHRvIHRoZSBzdWJzY3JpYmVyKiwgd2hpY2ggbm90YWJseSBtYXkgaW5jbHVkZSBwcmV2aW91cyBvcHRpbWlzdGljXG4gICAgICAvLyB1cGRhdGVzLiBUaGVyZWZvcmUgYSBzdWJzY3JpcHRpb24gY2FuIGJlIGluIGFueSBvZiB0aGUgZm9sbG93aW5nIHN0YXRlczpcbiAgICAgIC8vIC0gc3RhbGU9dHJ1ZTogVGhpcyBzdWJzY3JpcHRpb24gd2FzIHJlc3RvcmVkIHRvIGEgZGlmZmVyZW50IHZhbHVlIHRoYW5cbiAgICAgIC8vICAgYHNuYXBzaG90YC4gVGhhdCBtZWFucyB0aGlzIHN1YnNjcmlwdGlvbiBoYXMgY2hhbmdlcyByZWxhdGl2ZSB0byBpdHMgYmFzZSxcbiAgICAgIC8vICAgYnV0IGl0cyBiYXNlIGhhcyBjaGFuZ2VkICh3ZSBqdXN0IGFwcGxpZWQgYSBmaW5hbCBwYXlsb2FkKTogcmVjb21wdXRlXG4gICAgICAvLyAgIGEgYmFja3VwIHNvIHRoYXQgd2UgY2FuIGxhdGVyIHJlc3RvcmUgdG8gdGhlIHN0YXRlIHRoZSBzdWJzY3JpcHRpb25cbiAgICAgIC8vICAgc2hvdWxkIGJlIGluLlxuICAgICAgLy8gLSBzdGFsZT1mYWxzZTogVGhpcyBzdWJzY3JpcHRpb24gd2FzIHJlc3RvcmVkIHRvIHRoZSBzYW1lIHZhbHVlIGFzXG4gICAgICAvLyAgIGBzbmFwc2hvdGAuIFRoYXQgbWVhbnMgdGhpcyBzdWJzY3JpcHRpb24gZG9lcyAqbm90KiBoYXZlIGNoYW5nZXMgcmVsYXRpdmVcbiAgICAgIC8vICAgdG8gaXRzIGJhc2UsIHNvIHRoZSBjdXJyZW50IGBzbmFwc2hvdGAgaXMgdmFsaWQgdG8gdXNlIGFzIGEgYmFja3VwLlxuICAgICAgaWYgKCFzdWJzY3JpcHRpb24uc3RhbGUpIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uLmJhY2t1cCA9IHN1YnNjcmlwdGlvbi5zbmFwc2hvdDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc25hcHNob3QgPSBzdWJzY3JpcHRpb24uc25hcHNob3Q7XG4gICAgICB2YXIgYmFja3VwID0gUmVsYXlSZWFkZXIucmVhZChzb3VyY2UsIHNuYXBzaG90LnNlbGVjdG9yKTtcbiAgICAgIHZhciBuZXh0RGF0YSA9IHJlY3ljbGVOb2Rlc0ludG8oc25hcHNob3QuZGF0YSwgYmFja3VwLmRhdGEpO1xuICAgICAgYmFja3VwLmRhdGEgPSBuZXh0RGF0YTsgLy8gYmFja3VwIG93bnMgdGhlIHNuYXBzaG90IGFuZCBjYW4gc2FmZWx5IG11dGF0ZVxuXG4gICAgICBzdWJzY3JpcHRpb24uYmFja3VwID0gYmFja3VwO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5yZXN0b3JlU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIHJlc3RvcmVTdWJzY3JpcHRpb25zKCkge1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICB2YXIgYmFja3VwID0gc3Vic2NyaXB0aW9uLmJhY2t1cDtcbiAgICAgIHN1YnNjcmlwdGlvbi5iYWNrdXAgPSBudWxsO1xuXG4gICAgICBpZiAoYmFja3VwKSB7XG4gICAgICAgIGlmIChiYWNrdXAuZGF0YSAhPT0gc3Vic2NyaXB0aW9uLnNuYXBzaG90LmRhdGEpIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb24uc3RhbGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaXB0aW9uLnNuYXBzaG90ID0ge1xuICAgICAgICAgIGRhdGE6IHN1YnNjcmlwdGlvbi5zbmFwc2hvdC5kYXRhLFxuICAgICAgICAgIGlzTWlzc2luZ0RhdGE6IGJhY2t1cC5pc01pc3NpbmdEYXRhLFxuICAgICAgICAgIHNlZW5SZWNvcmRzOiBiYWNrdXAuc2VlblJlY29yZHMsXG4gICAgICAgICAgc2VsZWN0b3I6IGJhY2t1cC5zZWxlY3RvcixcbiAgICAgICAgICBtaXNzaW5nUmVxdWlyZWRGaWVsZHM6IGJhY2t1cC5taXNzaW5nUmVxdWlyZWRGaWVsZHNcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5zdGFsZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiB1cGRhdGVTdWJzY3JpcHRpb25zKHNvdXJjZSwgdXBkYXRlZFJlY29yZElEcywgdXBkYXRlZE93bmVycywgc291cmNlT3BlcmF0aW9uKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgaGFzVXBkYXRlZFJlY29yZHMgPSB1cGRhdGVkUmVjb3JkSURzLnNpemUgIT09IDA7XG5cbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgdmFyIG93bmVyID0gX3RoaXMyLl91cGRhdGVTdWJzY3JpcHRpb24oc291cmNlLCBzdWJzY3JpcHRpb24sIHVwZGF0ZWRSZWNvcmRJRHMsIGhhc1VwZGF0ZWRSZWNvcmRzLCBzb3VyY2VPcGVyYXRpb24pO1xuXG4gICAgICBpZiAob3duZXIgIT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVkT3duZXJzLnB1c2gob3duZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBOb3RpZmllcyB0aGUgY2FsbGJhY2sgZm9yIHRoZSBzdWJzY3JpcHRpb24gaWYgdGhlIGRhdGEgZm9yIHRoZSBhc3NvY2lhdGVkXG4gICAqIHNuYXBzaG90IGhhcyBjaGFuZ2VkLlxuICAgKiBBZGRpdGlvbmFsbHksIHVwZGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBzbmFwc2hvdCB3aXRoIHRoZSBsYXRlc3Qgc25hcHNob3QsXG4gICAqIGFuZCBtYXJrcyBpdCBhcyBub3Qgc3RhbGUuXG4gICAqIFJldHVybnMgdGhlIG93bmVyIChSZXF1ZXN0RGVzY3JpcHRvcikgaWYgdGhlIHN1YnNjcmlwdGlvbiB3YXMgYWZmZWN0ZWQgYnkgdGhlXG4gICAqIGxhdGVzdCB1cGRhdGUsIG9yIG51bGwgaWYgaXQgd2FzIG5vdCBhZmZlY3RlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uX3VwZGF0ZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIF91cGRhdGVTdWJzY3JpcHRpb24oc291cmNlLCBzdWJzY3JpcHRpb24sIHVwZGF0ZWRSZWNvcmRJRHMsIGhhc1VwZGF0ZWRSZWNvcmRzLCBzb3VyY2VPcGVyYXRpb24pIHtcbiAgICB2YXIgYmFja3VwID0gc3Vic2NyaXB0aW9uLmJhY2t1cCxcbiAgICAgICAgY2FsbGJhY2sgPSBzdWJzY3JpcHRpb24uY2FsbGJhY2ssXG4gICAgICAgIHNuYXBzaG90ID0gc3Vic2NyaXB0aW9uLnNuYXBzaG90LFxuICAgICAgICBzdGFsZSA9IHN1YnNjcmlwdGlvbi5zdGFsZTtcbiAgICB2YXIgaGFzT3ZlcmxhcHBpbmdVcGRhdGVzID0gaGFzVXBkYXRlZFJlY29yZHMgJiYgaGFzT3ZlcmxhcHBpbmdJRHMoc25hcHNob3Quc2VlblJlY29yZHMsIHVwZGF0ZWRSZWNvcmRJRHMpO1xuXG4gICAgaWYgKCFzdGFsZSAmJiAhaGFzT3ZlcmxhcHBpbmdVcGRhdGVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRTbmFwc2hvdCA9IGhhc092ZXJsYXBwaW5nVXBkYXRlcyB8fCAhYmFja3VwID8gUmVsYXlSZWFkZXIucmVhZChzb3VyY2UsIHNuYXBzaG90LnNlbGVjdG9yKSA6IGJhY2t1cDtcbiAgICB2YXIgbmV4dERhdGEgPSByZWN5Y2xlTm9kZXNJbnRvKHNuYXBzaG90LmRhdGEsIG5leHRTbmFwc2hvdC5kYXRhKTtcbiAgICBuZXh0U25hcHNob3QgPSB7XG4gICAgICBkYXRhOiBuZXh0RGF0YSxcbiAgICAgIGlzTWlzc2luZ0RhdGE6IG5leHRTbmFwc2hvdC5pc01pc3NpbmdEYXRhLFxuICAgICAgc2VlblJlY29yZHM6IG5leHRTbmFwc2hvdC5zZWVuUmVjb3JkcyxcbiAgICAgIHNlbGVjdG9yOiBuZXh0U25hcHNob3Quc2VsZWN0b3IsXG4gICAgICBtaXNzaW5nUmVxdWlyZWRGaWVsZHM6IG5leHRTbmFwc2hvdC5taXNzaW5nUmVxdWlyZWRGaWVsZHNcbiAgICB9O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgZGVlcEZyZWV6ZShuZXh0U25hcHNob3QpO1xuICAgIH1cblxuICAgIHN1YnNjcmlwdGlvbi5zbmFwc2hvdCA9IG5leHRTbmFwc2hvdDtcbiAgICBzdWJzY3JpcHRpb24uc3RhbGUgPSBmYWxzZTtcblxuICAgIGlmIChuZXh0U25hcHNob3QuZGF0YSAhPT0gc25hcHNob3QuZGF0YSkge1xuICAgICAgaWYgKHRoaXMuX19sb2cgJiYgUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX05PVElGWV9TVUJTQ1JJUFRJT04pIHtcbiAgICAgICAgdGhpcy5fX2xvZyh7XG4gICAgICAgICAgbmFtZTogJ3N0b3JlLm5vdGlmeS5zdWJzY3JpcHRpb24nLFxuICAgICAgICAgIHNvdXJjZU9wZXJhdGlvbjogc291cmNlT3BlcmF0aW9uLFxuICAgICAgICAgIHNuYXBzaG90OiBzbmFwc2hvdCxcbiAgICAgICAgICBuZXh0U25hcHNob3Q6IG5leHRTbmFwc2hvdFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sobmV4dFNuYXBzaG90KTtcbiAgICAgIHJldHVybiBzbmFwc2hvdC5zZWxlY3Rvci5vd25lcjtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlbGF5U3RvcmVTdWJzY3JpcHRpb25zO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5U3RvcmVTdWJzY3JpcHRpb25zOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlclwiKSk7XG5cbnZhciBSZWxheUZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4uL3V0aWwvUmVsYXlGZWF0dXJlRmxhZ3MnKTtcblxudmFyIFJlbGF5UmVhZGVyID0gcmVxdWlyZSgnLi9SZWxheVJlYWRlcicpO1xuXG52YXIgZGVlcEZyZWV6ZSA9IHJlcXVpcmUoJy4uL3V0aWwvZGVlcEZyZWV6ZScpO1xuXG52YXIgcmVjeWNsZU5vZGVzSW50byA9IHJlcXVpcmUoJy4uL3V0aWwvcmVjeWNsZU5vZGVzSW50bycpO1xuXG52YXIgUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnNVc2luZ01hcEJ5SUQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWxheVN0b3JlU3Vic2NyaXB0aW9uc1VzaW5nTWFwQnlJRChsb2cpIHtcbiAgICB0aGlzLl9ub3RpZmllZFJldmlzaW9uID0gMDtcbiAgICB0aGlzLl9zbmFwc2hvdFJldmlzaW9uID0gMDtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zQnlEYXRhSWQgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fc3RhbGVTdWJzY3JpcHRpb25zID0gbmV3IFNldCgpO1xuICAgIHRoaXMuX19sb2cgPSBsb2c7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnNVc2luZ01hcEJ5SUQucHJvdG90eXBlO1xuXG4gIF9wcm90by5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoc25hcHNob3QsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBzdWJzY3JpcHRpb24gPSB7XG4gICAgICBiYWNrdXA6IG51bGwsXG4gICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICBub3RpZmllZFJldmlzaW9uOiB0aGlzLl9ub3RpZmllZFJldmlzaW9uLFxuICAgICAgc25hcHNob3RSZXZpc2lvbjogdGhpcy5fc25hcHNob3RSZXZpc2lvbixcbiAgICAgIHNuYXBzaG90OiBzbmFwc2hvdFxuICAgIH07XG5cbiAgICB2YXIgZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICB2YXIgX2l0ZXJhdG9yID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKHNuYXBzaG90LnNlZW5SZWNvcmRzKSxcbiAgICAgICAgICBfc3RlcDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgZGF0YUlkID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uc0ZvckRhdGFJZCA9IF90aGlzLl9zdWJzY3JpcHRpb25zQnlEYXRhSWQuZ2V0KGRhdGFJZCk7XG5cbiAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uc0ZvckRhdGFJZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zRm9yRGF0YUlkW1wiZGVsZXRlXCJdKHN1YnNjcmlwdGlvbik7XG5cbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25zRm9yRGF0YUlkLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNCeURhdGFJZFtcImRlbGV0ZVwiXShkYXRhSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IuZigpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgX2l0ZXJhdG9yMiA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShzbmFwc2hvdC5zZWVuUmVjb3JkcyksXG4gICAgICAgIF9zdGVwMjtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge1xuICAgICAgICB2YXIgZGF0YUlkID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zRm9yRGF0YUlkID0gdGhpcy5fc3Vic2NyaXB0aW9uc0J5RGF0YUlkLmdldChkYXRhSWQpO1xuXG4gICAgICAgIGlmIChzdWJzY3JpcHRpb25zRm9yRGF0YUlkICE9IG51bGwpIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb25zRm9yRGF0YUlkLmFkZChzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNCeURhdGFJZC5zZXQoZGF0YUlkLCBuZXcgU2V0KFtzdWJzY3JpcHRpb25dKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IyLmYoKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGlzcG9zZTogZGlzcG9zZVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnNuYXBzaG90U3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIHNuYXBzaG90U3Vic2NyaXB0aW9ucyhzb3VyY2UpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHRoaXMuX3NuYXBzaG90UmV2aXNpb24rKztcblxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNCeURhdGFJZC5mb3JFYWNoKGZ1bmN0aW9uIChzdWJzY3JpcHRpb25zKSB7XG4gICAgICBzdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLnNuYXBzaG90UmV2aXNpb24gPT09IF90aGlzMi5fc25hcHNob3RSZXZpc2lvbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmlwdGlvbi5zbmFwc2hvdFJldmlzaW9uID0gX3RoaXMyLl9zbmFwc2hvdFJldmlzaW9uOyAvLyBCYWNrdXAgb2NjdXJzIGFmdGVyIHdyaXRpbmcgYSBuZXcgXCJmaW5hbFwiIHBheWxvYWQocykgYW5kIGJlZm9yZSAocmUpYXBwbHlpbmdcbiAgICAgICAgLy8gb3B0aW1pc3RpYyBjaGFuZ2VzLiBFYWNoIHN1YnNjcmlwdGlvbidzIGBzbmFwc2hvdGAgcmVwcmVzZW50cyB3aGF0IHdhcyAqbGFzdFxuICAgICAgICAvLyBwdWJsaXNoZWQgdG8gdGhlIHN1YnNjcmliZXIqLCB3aGljaCBub3RhYmx5IG1heSBpbmNsdWRlIHByZXZpb3VzIG9wdGltaXN0aWNcbiAgICAgICAgLy8gdXBkYXRlcy4gVGhlcmVmb3JlIGEgc3Vic2NyaXB0aW9uIGNhbiBiZSBpbiBhbnkgb2YgdGhlIGZvbGxvd2luZyBzdGF0ZXM6XG4gICAgICAgIC8vIC0gc3RhbGU9dHJ1ZTogVGhpcyBzdWJzY3JpcHRpb24gd2FzIHJlc3RvcmVkIHRvIGEgZGlmZmVyZW50IHZhbHVlIHRoYW5cbiAgICAgICAgLy8gICBgc25hcHNob3RgLiBUaGF0IG1lYW5zIHRoaXMgc3Vic2NyaXB0aW9uIGhhcyBjaGFuZ2VzIHJlbGF0aXZlIHRvIGl0cyBiYXNlLFxuICAgICAgICAvLyAgIGJ1dCBpdHMgYmFzZSBoYXMgY2hhbmdlZCAod2UganVzdCBhcHBsaWVkIGEgZmluYWwgcGF5bG9hZCk6IHJlY29tcHV0ZVxuICAgICAgICAvLyAgIGEgYmFja3VwIHNvIHRoYXQgd2UgY2FuIGxhdGVyIHJlc3RvcmUgdG8gdGhlIHN0YXRlIHRoZSBzdWJzY3JpcHRpb25cbiAgICAgICAgLy8gICBzaG91bGQgYmUgaW4uXG4gICAgICAgIC8vIC0gc3RhbGU9ZmFsc2U6IFRoaXMgc3Vic2NyaXB0aW9uIHdhcyByZXN0b3JlZCB0byB0aGUgc2FtZSB2YWx1ZSB0aGFuXG4gICAgICAgIC8vICAgYHNuYXBzaG90YC4gVGhhdCBtZWFucyB0aGlzIHN1YnNjcmlwdGlvbiBkb2VzICpub3QqIGhhdmUgY2hhbmdlcyByZWxhdGl2ZVxuICAgICAgICAvLyAgIHRvIGl0cyBiYXNlLCBzbyB0aGUgY3VycmVudCBgc25hcHNob3RgIGlzIHZhbGlkIHRvIHVzZSBhcyBhIGJhY2t1cC5cblxuICAgICAgICBpZiAoIV90aGlzMi5fc3RhbGVTdWJzY3JpcHRpb25zLmhhcyhzdWJzY3JpcHRpb24pKSB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLmJhY2t1cCA9IHN1YnNjcmlwdGlvbi5zbmFwc2hvdDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc25hcHNob3QgPSBzdWJzY3JpcHRpb24uc25hcHNob3Q7XG4gICAgICAgIHZhciBiYWNrdXAgPSBSZWxheVJlYWRlci5yZWFkKHNvdXJjZSwgc25hcHNob3Quc2VsZWN0b3IpO1xuICAgICAgICB2YXIgbmV4dERhdGEgPSByZWN5Y2xlTm9kZXNJbnRvKHNuYXBzaG90LmRhdGEsIGJhY2t1cC5kYXRhKTtcbiAgICAgICAgYmFja3VwLmRhdGEgPSBuZXh0RGF0YTsgLy8gYmFja3VwIG93bnMgdGhlIHNuYXBzaG90IGFuZCBjYW4gc2FmZWx5IG11dGF0ZVxuXG4gICAgICAgIHN1YnNjcmlwdGlvbi5iYWNrdXAgPSBiYWNrdXA7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdG9yZVN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiByZXN0b3JlU3Vic2NyaXB0aW9ucygpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHRoaXMuX3NuYXBzaG90UmV2aXNpb24rKztcblxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNCeURhdGFJZC5mb3JFYWNoKGZ1bmN0aW9uIChzdWJzY3JpcHRpb25zKSB7XG4gICAgICBzdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLnNuYXBzaG90UmV2aXNpb24gPT09IF90aGlzMy5fc25hcHNob3RSZXZpc2lvbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmlwdGlvbi5zbmFwc2hvdFJldmlzaW9uID0gX3RoaXMzLl9zbmFwc2hvdFJldmlzaW9uO1xuICAgICAgICB2YXIgYmFja3VwID0gc3Vic2NyaXB0aW9uLmJhY2t1cDtcbiAgICAgICAgc3Vic2NyaXB0aW9uLmJhY2t1cCA9IG51bGw7XG5cbiAgICAgICAgaWYgKGJhY2t1cCkge1xuICAgICAgICAgIGlmIChiYWNrdXAuZGF0YSAhPT0gc3Vic2NyaXB0aW9uLnNuYXBzaG90LmRhdGEpIHtcbiAgICAgICAgICAgIF90aGlzMy5fc3RhbGVTdWJzY3JpcHRpb25zLmFkZChzdWJzY3JpcHRpb24pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBwcmV2U2VlblJlY29yZHMgPSBzdWJzY3JpcHRpb24uc25hcHNob3Quc2VlblJlY29yZHM7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLnNuYXBzaG90ID0ge1xuICAgICAgICAgICAgZGF0YTogc3Vic2NyaXB0aW9uLnNuYXBzaG90LmRhdGEsXG4gICAgICAgICAgICBpc01pc3NpbmdEYXRhOiBiYWNrdXAuaXNNaXNzaW5nRGF0YSxcbiAgICAgICAgICAgIHNlZW5SZWNvcmRzOiBiYWNrdXAuc2VlblJlY29yZHMsXG4gICAgICAgICAgICBzZWxlY3RvcjogYmFja3VwLnNlbGVjdG9yLFxuICAgICAgICAgICAgbWlzc2luZ1JlcXVpcmVkRmllbGRzOiBiYWNrdXAubWlzc2luZ1JlcXVpcmVkRmllbGRzXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIF90aGlzMy5fdXBkYXRlU3Vic2NyaXB0aW9uc01hcChzdWJzY3JpcHRpb24sIHByZXZTZWVuUmVjb3Jkcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMzLl9zdGFsZVN1YnNjcmlwdGlvbnMuYWRkKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gdXBkYXRlU3Vic2NyaXB0aW9ucyhzb3VyY2UsIHVwZGF0ZWRSZWNvcmRJRHMsIHVwZGF0ZWRPd25lcnMsIHNvdXJjZU9wZXJhdGlvbikge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdGhpcy5fbm90aWZpZWRSZXZpc2lvbisrO1xuICAgIHVwZGF0ZWRSZWNvcmRJRHMuZm9yRWFjaChmdW5jdGlvbiAodXBkYXRlZFJlY29yZElkKSB7XG4gICAgICB2YXIgc3ViY3JpcHRpb25zRm9yRGF0YUlkID0gX3RoaXM0Ll9zdWJzY3JpcHRpb25zQnlEYXRhSWQuZ2V0KHVwZGF0ZWRSZWNvcmRJZCk7XG5cbiAgICAgIGlmIChzdWJjcmlwdGlvbnNGb3JEYXRhSWQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN1YmNyaXB0aW9uc0ZvckRhdGFJZC5mb3JFYWNoKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbi5ub3RpZmllZFJldmlzaW9uID09PSBfdGhpczQuX25vdGlmaWVkUmV2aXNpb24pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3duZXIgPSBfdGhpczQuX3VwZGF0ZVN1YnNjcmlwdGlvbihzb3VyY2UsIHN1YnNjcmlwdGlvbiwgZmFsc2UsIHNvdXJjZU9wZXJhdGlvbik7XG5cbiAgICAgICAgaWYgKG93bmVyICE9IG51bGwpIHtcbiAgICAgICAgICB1cGRhdGVkT3duZXJzLnB1c2gob3duZXIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3N0YWxlU3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgIGlmIChzdWJzY3JpcHRpb24ubm90aWZpZWRSZXZpc2lvbiA9PT0gX3RoaXM0Ll9ub3RpZmllZFJldmlzaW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG93bmVyID0gX3RoaXM0Ll91cGRhdGVTdWJzY3JpcHRpb24oc291cmNlLCBzdWJzY3JpcHRpb24sIHRydWUsIHNvdXJjZU9wZXJhdGlvbik7XG5cbiAgICAgIGlmIChvd25lciAhPSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZWRPd25lcnMucHVzaChvd25lcik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLl9zdGFsZVN1YnNjcmlwdGlvbnMuY2xlYXIoKTtcbiAgfVxuICAvKipcbiAgICogTm90aWZpZXMgdGhlIGNhbGxiYWNrIGZvciB0aGUgc3Vic2NyaXB0aW9uIGlmIHRoZSBkYXRhIGZvciB0aGUgYXNzb2NpYXRlZFxuICAgKiBzbmFwc2hvdCBoYXMgY2hhbmdlZC5cbiAgICogQWRkaXRpb25hbGx5LCB1cGRhdGVzIHRoZSBzdWJzY3JpcHRpb24gc25hcHNob3Qgd2l0aCB0aGUgbGF0ZXN0IHNuYXBzaG90LFxuICAgKiBhbWFya3MgaXQgYXMgbm90IHN0YWxlLCBhbmQgdXBkYXRlcyB0aGUgc3Vic2NyaXB0aW9uIHRyYWNraW5nIGZvciBhbnlcbiAgICogYW55IG5ldyBpZHMgb2JzZXJ2ZWQgaW4gdGhlIGxhdGVzdCBkYXRhIHNuYXBzaG90LlxuICAgKiBSZXR1cm5zIHRoZSBvd25lciAoUmVxdWVzdERlc2NyaXB0b3IpIGlmIHRoZSBzdWJzY3JpcHRpb24gd2FzIGFmZmVjdGVkIGJ5IHRoZVxuICAgKiBsYXRlc3QgdXBkYXRlLCBvciBudWxsIGlmIGl0IHdhcyBub3QgYWZmZWN0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl91cGRhdGVTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiBfdXBkYXRlU3Vic2NyaXB0aW9uKHNvdXJjZSwgc3Vic2NyaXB0aW9uLCBzdGFsZSwgc291cmNlT3BlcmF0aW9uKSB7XG4gICAgdmFyIGJhY2t1cCA9IHN1YnNjcmlwdGlvbi5iYWNrdXAsXG4gICAgICAgIGNhbGxiYWNrID0gc3Vic2NyaXB0aW9uLmNhbGxiYWNrLFxuICAgICAgICBzbmFwc2hvdCA9IHN1YnNjcmlwdGlvbi5zbmFwc2hvdDtcbiAgICB2YXIgbmV4dFNuYXBzaG90ID0gc3RhbGUgJiYgYmFja3VwICE9IG51bGwgPyBiYWNrdXAgOiBSZWxheVJlYWRlci5yZWFkKHNvdXJjZSwgc25hcHNob3Quc2VsZWN0b3IpO1xuICAgIHZhciBuZXh0RGF0YSA9IHJlY3ljbGVOb2Rlc0ludG8oc25hcHNob3QuZGF0YSwgbmV4dFNuYXBzaG90LmRhdGEpO1xuICAgIG5leHRTbmFwc2hvdCA9IHtcbiAgICAgIGRhdGE6IG5leHREYXRhLFxuICAgICAgaXNNaXNzaW5nRGF0YTogbmV4dFNuYXBzaG90LmlzTWlzc2luZ0RhdGEsXG4gICAgICBzZWVuUmVjb3JkczogbmV4dFNuYXBzaG90LnNlZW5SZWNvcmRzLFxuICAgICAgc2VsZWN0b3I6IG5leHRTbmFwc2hvdC5zZWxlY3RvcixcbiAgICAgIG1pc3NpbmdSZXF1aXJlZEZpZWxkczogbmV4dFNuYXBzaG90Lm1pc3NpbmdSZXF1aXJlZEZpZWxkc1xuICAgIH07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBkZWVwRnJlZXplKG5leHRTbmFwc2hvdCk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZTZWVuUmVjb3JkcyA9IHN1YnNjcmlwdGlvbi5zbmFwc2hvdC5zZWVuUmVjb3JkcztcbiAgICBzdWJzY3JpcHRpb24uc25hcHNob3QgPSBuZXh0U25hcHNob3Q7XG4gICAgc3Vic2NyaXB0aW9uLm5vdGlmaWVkUmV2aXNpb24gPSB0aGlzLl9ub3RpZmllZFJldmlzaW9uO1xuXG4gICAgdGhpcy5fdXBkYXRlU3Vic2NyaXB0aW9uc01hcChzdWJzY3JpcHRpb24sIHByZXZTZWVuUmVjb3Jkcyk7XG5cbiAgICBpZiAobmV4dFNuYXBzaG90LmRhdGEgIT09IHNuYXBzaG90LmRhdGEpIHtcbiAgICAgIGlmICh0aGlzLl9fbG9nICYmIFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9OT1RJRllfU1VCU0NSSVBUSU9OKSB7XG4gICAgICAgIHRoaXMuX19sb2coe1xuICAgICAgICAgIG5hbWU6ICdzdG9yZS5ub3RpZnkuc3Vic2NyaXB0aW9uJyxcbiAgICAgICAgICBzb3VyY2VPcGVyYXRpb246IHNvdXJjZU9wZXJhdGlvbixcbiAgICAgICAgICBzbmFwc2hvdDogc25hcHNob3QsXG4gICAgICAgICAgbmV4dFNuYXBzaG90OiBuZXh0U25hcHNob3RcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKG5leHRTbmFwc2hvdCk7XG4gICAgICByZXR1cm4gc25hcHNob3Quc2VsZWN0b3Iub3duZXI7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBNYXAgdGhhdCB0cmFja3Mgc3Vic2NyaXB0aW9ucyBieSBpZC5cbiAgICogR2l2ZW4gYW4gdXBkYXRlZCBzdWJzY3JpcHRpb24gYW5kIHRoZSByZWNvcmRzIHRoYXQgd2hlcmUgc2VlblxuICAgKiBvbiB0aGUgcHJldmlvdXMgc3Vic2NyaXB0aW9uIHNuYXBzaG90LCB1cGRhdGVzIG91ciB0cmFja2luZ1xuICAgKiB0byB0cmFjayB0aGUgc3Vic2NyaXB0aW9uIGZvciB0aGUgbmV3bHkgYW5kIG5vIGxvbmdlciBzZWVuIGlkcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uX3VwZGF0ZVN1YnNjcmlwdGlvbnNNYXAgPSBmdW5jdGlvbiBfdXBkYXRlU3Vic2NyaXB0aW9uc01hcChzdWJzY3JpcHRpb24sIHByZXZTZWVuUmVjb3Jkcykge1xuICAgIHZhciBfaXRlcmF0b3IzID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKHByZXZTZWVuUmVjb3JkcyksXG4gICAgICAgIF9zdGVwMztcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykge1xuICAgICAgICB2YXIgZGF0YUlkID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zRm9yRGF0YUlkID0gdGhpcy5fc3Vic2NyaXB0aW9uc0J5RGF0YUlkLmdldChkYXRhSWQpO1xuXG4gICAgICAgIGlmIChzdWJzY3JpcHRpb25zRm9yRGF0YUlkICE9IG51bGwpIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb25zRm9yRGF0YUlkW1wiZGVsZXRlXCJdKHN1YnNjcmlwdGlvbik7XG5cbiAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uc0ZvckRhdGFJZC5zaXplID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zQnlEYXRhSWRbXCJkZWxldGVcIl0oZGF0YUlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvcjMuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IzLmYoKTtcbiAgICB9XG5cbiAgICB2YXIgX2l0ZXJhdG9yNCA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShzdWJzY3JpcHRpb24uc25hcHNob3Quc2VlblJlY29yZHMpLFxuICAgICAgICBfc3RlcDQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIF9kYXRhSWQgPSBfc3RlcDQudmFsdWU7XG5cbiAgICAgICAgdmFyIF9zdWJzY3JpcHRpb25zRm9yRGF0YUlkID0gdGhpcy5fc3Vic2NyaXB0aW9uc0J5RGF0YUlkLmdldChfZGF0YUlkKTtcblxuICAgICAgICBpZiAoX3N1YnNjcmlwdGlvbnNGb3JEYXRhSWQgIT0gbnVsbCkge1xuICAgICAgICAgIF9zdWJzY3JpcHRpb25zRm9yRGF0YUlkLmFkZChzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNCeURhdGFJZC5zZXQoX2RhdGFJZCwgbmV3IFNldChbc3Vic2NyaXB0aW9uXSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3I0LmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yNC5mKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBSZWxheVN0b3JlU3Vic2NyaXB0aW9uc1VzaW5nTWFwQnlJRDtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheVN0b3JlU3Vic2NyaXB0aW9uc1VzaW5nTWFwQnlJRDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiKSk7XG5cbnZhciBSZWxheUNvbmNyZXRlTm9kZSA9IHJlcXVpcmUoJy4uL3V0aWwvUmVsYXlDb25jcmV0ZU5vZGUnKTtcblxudmFyIGdldFJlbGF5SGFuZGxlS2V5ID0gcmVxdWlyZSgnLi4vdXRpbC9nZXRSZWxheUhhbmRsZUtleScpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBzdGFibGVDb3B5ID0gcmVxdWlyZSgnLi4vdXRpbC9zdGFibGVDb3B5Jyk7XG5cbnZhciBWQVJJQUJMRSA9IFJlbGF5Q29uY3JldGVOb2RlLlZBUklBQkxFLFxuICAgIExJVEVSQUwgPSBSZWxheUNvbmNyZXRlTm9kZS5MSVRFUkFMLFxuICAgIE9CSkVDVF9WQUxVRSA9IFJlbGF5Q29uY3JldGVOb2RlLk9CSkVDVF9WQUxVRSxcbiAgICBMSVNUX1ZBTFVFID0gUmVsYXlDb25jcmV0ZU5vZGUuTElTVF9WQUxVRTtcbnZhciBNT0RVTEVfQ09NUE9ORU5UX0tFWV9QUkVGSVggPSAnX19tb2R1bGVfY29tcG9uZW50Xyc7XG52YXIgTU9EVUxFX09QRVJBVElPTl9LRVlfUFJFRklYID0gJ19fbW9kdWxlX29wZXJhdGlvbl8nO1xuXG5mdW5jdGlvbiBnZXRBcmd1bWVudFZhbHVlKGFyZywgdmFyaWFibGVzKSB7XG4gIGlmIChhcmcua2luZCA9PT0gVkFSSUFCTEUpIHtcbiAgICAvLyBWYXJpYWJsZXMgYXJlIHByb3ZpZGVkIGF0IHJ1bnRpbWUgYW5kIGFyZSBub3QgZ3VhcmFudGVlZCB0byBiZSBzdGFibGUuXG4gICAgcmV0dXJuIGdldFN0YWJsZVZhcmlhYmxlVmFsdWUoYXJnLnZhcmlhYmxlTmFtZSwgdmFyaWFibGVzKTtcbiAgfSBlbHNlIGlmIChhcmcua2luZCA9PT0gTElURVJBTCkge1xuICAgIC8vIFRoZSBSZWxheSBjb21waWxlciBnZW5lcmF0ZXMgc3RhYmxlIENvbmNyZXRlQXJndW1lbnQgdmFsdWVzLlxuICAgIHJldHVybiBhcmcudmFsdWU7XG4gIH0gZWxzZSBpZiAoYXJnLmtpbmQgPT09IE9CSkVDVF9WQUxVRSkge1xuICAgIHZhciB2YWx1ZSA9IHt9O1xuICAgIGFyZy5maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHZhbHVlW2ZpZWxkLm5hbWVdID0gZ2V0QXJndW1lbnRWYWx1ZShmaWVsZCwgdmFyaWFibGVzKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0gZWxzZSBpZiAoYXJnLmtpbmQgPT09IExJU1RfVkFMVUUpIHtcbiAgICB2YXIgX3ZhbHVlID0gW107XG4gICAgYXJnLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIGl0ZW0gIT0gbnVsbCA/IF92YWx1ZS5wdXNoKGdldEFyZ3VtZW50VmFsdWUoaXRlbSwgdmFyaWFibGVzKSkgOiBudWxsO1xuICAgIH0pO1xuICAgIHJldHVybiBfdmFsdWU7XG4gIH1cbn1cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWVzIG9mIGZpZWxkL2ZyYWdtZW50IGFyZ3VtZW50cyBhcyBhbiBvYmplY3Qga2V5ZWQgYnkgYXJndW1lbnRcbiAqIG5hbWVzLiBHdWFyYW50ZWVkIHRvIHJldHVybiBhIHJlc3VsdCB3aXRoIHN0YWJsZSBvcmRlcmVkIG5lc3RlZCB2YWx1ZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRBcmd1bWVudFZhbHVlcyhhcmdzLCB2YXJpYWJsZXMpIHtcbiAgdmFyIHZhbHVlcyA9IHt9O1xuICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGFyZykge1xuICAgIHZhbHVlc1thcmcubmFtZV0gPSBnZXRBcmd1bWVudFZhbHVlKGFyZywgdmFyaWFibGVzKTtcbiAgfSk7XG4gIHJldHVybiB2YWx1ZXM7XG59XG4vKipcbiAqIEdpdmVuIGEgaGFuZGxlIGZpZWxkIGFuZCB2YXJpYWJsZSB2YWx1ZXMsIHJldHVybnMgYSBrZXkgdGhhdCBjYW4gYmUgdXNlZCB0b1xuICogdW5pcXVlbHkgaWRlbnRpZnkgdGhlIGNvbWJpbmF0aW9uIG9mIHRoZSBoYW5kbGUgbmFtZSBhbmQgYXJndW1lbnQgdmFsdWVzLlxuICpcbiAqIE5vdGU6IHRoZSB3b3JkIFwic3RvcmFnZVwiIGhlcmUgcmVmZXJzIHRvIHRoZSBmYWN0IHRoaXMga2V5IGlzIHByaW1hcmlseSB1c2VkXG4gKiB3aGVuIHdyaXRpbmcgdGhlIHJlc3VsdHMgb2YgYSBrZXkgaW4gYSBub3JtYWxpemVkIGdyYXBoIG9yIFwic3RvcmVcIi4gVGhpc1xuICogbmFtZSB3YXMgdXNlZCBpbiBwcmV2aW91cyBpbXBsZW1lbnRhdGlvbnMgb2YgUmVsYXkgaW50ZXJuYWxzIGFuZCBpcyBhbHNvXG4gKiB1c2VkIGhlcmUgZm9yIGNvbnNpc3RlbmN5LlxuICovXG5cblxuZnVuY3Rpb24gZ2V0SGFuZGxlU3RvcmFnZUtleShoYW5kbGVGaWVsZCwgdmFyaWFibGVzKSB7XG4gIHZhciBkeW5hbWljS2V5ID0gaGFuZGxlRmllbGQuZHluYW1pY0tleSxcbiAgICAgIGhhbmRsZSA9IGhhbmRsZUZpZWxkLmhhbmRsZSxcbiAgICAgIGtleSA9IGhhbmRsZUZpZWxkLmtleSxcbiAgICAgIG5hbWUgPSBoYW5kbGVGaWVsZC5uYW1lLFxuICAgICAgYXJncyA9IGhhbmRsZUZpZWxkLmFyZ3MsXG4gICAgICBmaWx0ZXJzID0gaGFuZGxlRmllbGQuZmlsdGVycztcbiAgdmFyIGhhbmRsZU5hbWUgPSBnZXRSZWxheUhhbmRsZUtleShoYW5kbGUsIGtleSwgbmFtZSk7XG4gIHZhciBmaWx0ZXJBcmdzID0gbnVsbDtcblxuICBpZiAoYXJncyAmJiBmaWx0ZXJzICYmIGFyZ3MubGVuZ3RoICE9PSAwICYmIGZpbHRlcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgZmlsdGVyQXJncyA9IGFyZ3MuZmlsdGVyKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBmaWx0ZXJzLmluZGV4T2YoYXJnLm5hbWUpID4gLTE7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoZHluYW1pY0tleSkge1xuICAgIC8vIFwiU29ydFwiIHRoZSBhcmd1bWVudHMgYnkgYXJndW1lbnQgbmFtZTogdGhpcyBpcyBkb25lIGJ5IHRoZSBjb21waWxlciBmb3JcbiAgICAvLyB1c2VyLXN1cHBsaWVkIGFyZ3VtZW50cyBidXQgdGhlIGR5bmFtaWMgYXJndW1lbnQgbXVzdCBhbHNvIGJlIGluIHNvcnRlZFxuICAgIC8vIG9yZGVyLiAgTm90ZSB0aGF0IGR5bmFtaWMga2V5IGFyZ3VtZW50IG5hbWUgaXMgZG91YmxlLXVuZGVyc2NvcmUtXG4gICAgLy8gLXByZWZpeGVkLCBhbmQgYSBkb3VibGUtdW5kZXJzY29yZSBwcmVmaXggaXMgZGlzYWxsb3dlZCBmb3IgdXNlci1zdXBwbGllZFxuICAgIC8vIGFyZ3VtZW50IG5hbWVzLCBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gYWN0dWFsbHkgc29ydC5cbiAgICBmaWx0ZXJBcmdzID0gZmlsdGVyQXJncyAhPSBudWxsID8gW2R5bmFtaWNLZXldLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKGZpbHRlckFyZ3MpKSA6IFtkeW5hbWljS2V5XTtcbiAgfVxuXG4gIGlmIChmaWx0ZXJBcmdzID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGhhbmRsZU5hbWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZvcm1hdFN0b3JhZ2VLZXkoaGFuZGxlTmFtZSwgZ2V0QXJndW1lbnRWYWx1ZXMoZmlsdGVyQXJncywgdmFyaWFibGVzKSk7XG4gIH1cbn1cbi8qKlxuICogR2l2ZW4gYSBmaWVsZCBhbmQgdmFyaWFibGUgdmFsdWVzLCByZXR1cm5zIGEga2V5IHRoYXQgY2FuIGJlIHVzZWQgdG9cbiAqIHVuaXF1ZWx5IGlkZW50aWZ5IHRoZSBjb21iaW5hdGlvbiBvZiB0aGUgZmllbGQgbmFtZSBhbmQgYXJndW1lbnQgdmFsdWVzLlxuICpcbiAqIE5vdGU6IHRoZSB3b3JkIFwic3RvcmFnZVwiIGhlcmUgcmVmZXJzIHRvIHRoZSBmYWN0IHRoaXMga2V5IGlzIHByaW1hcmlseSB1c2VkXG4gKiB3aGVuIHdyaXRpbmcgdGhlIHJlc3VsdHMgb2YgYSBrZXkgaW4gYSBub3JtYWxpemVkIGdyYXBoIG9yIFwic3RvcmVcIi4gVGhpc1xuICogbmFtZSB3YXMgdXNlZCBpbiBwcmV2aW91cyBpbXBsZW1lbnRhdGlvbnMgb2YgUmVsYXkgaW50ZXJuYWxzIGFuZCBpcyBhbHNvXG4gKiB1c2VkIGhlcmUgZm9yIGNvbnNpc3RlbmN5LlxuICovXG5cblxuZnVuY3Rpb24gZ2V0U3RvcmFnZUtleShmaWVsZCwgdmFyaWFibGVzKSB7XG4gIGlmIChmaWVsZC5zdG9yYWdlS2V5KSB7XG4gICAgLy8gVE9ETyBUMjM2NjM2NjQ6IEhhbmRsZSBub2RlcyBkbyBub3QgeWV0IGRlZmluZSBhIHN0YXRpYyBzdG9yYWdlS2V5LlxuICAgIHJldHVybiBmaWVsZC5zdG9yYWdlS2V5O1xuICB9XG5cbiAgdmFyIGFyZ3MgPSBmaWVsZC5hcmdzLFxuICAgICAgbmFtZSA9IGZpZWxkLm5hbWU7XG4gIHJldHVybiBhcmdzICYmIGFyZ3MubGVuZ3RoICE9PSAwID8gZm9ybWF0U3RvcmFnZUtleShuYW1lLCBnZXRBcmd1bWVudFZhbHVlcyhhcmdzLCB2YXJpYWJsZXMpKSA6IG5hbWU7XG59XG4vKipcbiAqIEdpdmVuIGEgYG5hbWVgIChlZy4gXCJmb29cIikgYW5kIGFuIG9iamVjdCByZXByZXNlbnRpbmcgYXJndW1lbnQgdmFsdWVzXG4gKiAoZWcuIGB7b3JiZXJCeTogXCJuYW1lXCIsIGZpcnN0OiAxMH1gKSByZXR1cm5zIGEgdW5pcXVlIHN0b3JhZ2Uga2V5XG4gKiAoaWUuIGBmb297XCJmaXJzdFwiOjEwLFwib3JkZXJCeVwiOlwibmFtZVwifWApLlxuICpcbiAqIFRoaXMgZGlmZmVycyBmcm9tIGdldFN0b3JhZ2VLZXkgd2hpY2ggcmVxdWlyZXMgYSBDb25jcmV0ZU5vZGUgd2hlcmUgYXJndW1lbnRzXG4gKiBhcmUgYXNzdW1lZCB0byBhbHJlYWR5IGJlIHNvcnRlZCBpbnRvIGEgc3RhYmxlIG9yZGVyLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0U3RhYmxlU3RvcmFnZUtleShuYW1lLCBhcmdzKSB7XG4gIHJldHVybiBmb3JtYXRTdG9yYWdlS2V5KG5hbWUsIHN0YWJsZUNvcHkoYXJncykpO1xufVxuLyoqXG4gKiBHaXZlbiBhIG5hbWUgYW5kIGFyZ3VtZW50IHZhbHVlcywgZm9ybWF0IGEgc3RvcmFnZSBrZXkuXG4gKlxuICogQXJndW1lbnRzIGFuZCB0aGUgdmFsdWVzIHdpdGhpbiB0aGVtIGFyZSBleHBlY3RlZCB0byBiZSBvcmRlcmVkIGluIGEgc3RhYmxlXG4gKiBhbHBoYWJldGljYWwgb3JkZXJpbmcuXG4gKi9cblxuXG5mdW5jdGlvbiBmb3JtYXRTdG9yYWdlS2V5KG5hbWUsIGFyZ1ZhbHVlcykge1xuICBpZiAoIWFyZ1ZhbHVlcykge1xuICAgIHJldHVybiBuYW1lO1xuICB9XG5cbiAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gIGZvciAodmFyIGFyZ05hbWUgaW4gYXJnVmFsdWVzKSB7XG4gICAgaWYgKGFyZ1ZhbHVlcy5oYXNPd25Qcm9wZXJ0eShhcmdOYW1lKSkge1xuICAgICAgdmFyIHZhbHVlID0gYXJnVmFsdWVzW2FyZ05hbWVdO1xuXG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICB2YXIgX0pTT04kc3RyaW5naWZ5O1xuXG4gICAgICAgIHZhbHVlcy5wdXNoKGFyZ05hbWUgKyAnOicgKyAoKF9KU09OJHN0cmluZ2lmeSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKSkgIT09IG51bGwgJiYgX0pTT04kc3RyaW5naWZ5ICE9PSB2b2lkIDAgPyBfSlNPTiRzdHJpbmdpZnkgOiAndW5kZWZpbmVkJykpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWx1ZXMubGVuZ3RoID09PSAwID8gbmFtZSA6IG5hbWUgKyBcIihcIi5jb25jYXQodmFsdWVzLmpvaW4oJywnKSwgXCIpXCIpO1xufVxuLyoqXG4gKiBHaXZlbiBWYXJpYWJsZXMgYW5kIGEgdmFyaWFibGUgbmFtZSwgcmV0dXJuIGEgdmFyaWFibGUgdmFsdWUgd2l0aFxuICogYWxsIHZhbHVlcyBpbiBhIHN0YWJsZSBvcmRlci5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFN0YWJsZVZhcmlhYmxlVmFsdWUobmFtZSwgdmFyaWFibGVzKSB7XG4gICF2YXJpYWJsZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdnZXRWYXJpYWJsZVZhbHVlKCk6IFVuZGVmaW5lZCB2YXJpYWJsZSBgJXNgLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cbiAgcmV0dXJuIHN0YWJsZUNvcHkodmFyaWFibGVzW25hbWVdKTtcbn1cblxuZnVuY3Rpb24gZ2V0TW9kdWxlQ29tcG9uZW50S2V5KGRvY3VtZW50TmFtZSkge1xuICByZXR1cm4gXCJcIi5jb25jYXQoTU9EVUxFX0NPTVBPTkVOVF9LRVlfUFJFRklYKS5jb25jYXQoZG9jdW1lbnROYW1lKTtcbn1cblxuZnVuY3Rpb24gZ2V0TW9kdWxlT3BlcmF0aW9uS2V5KGRvY3VtZW50TmFtZSkge1xuICByZXR1cm4gXCJcIi5jb25jYXQoTU9EVUxFX09QRVJBVElPTl9LRVlfUFJFRklYKS5jb25jYXQoZG9jdW1lbnROYW1lKTtcbn1cbi8qKlxuICogQ29uc3RhbnRzIHNoYXJlZCBieSBhbGwgaW1wbGVtZW50YXRpb25zIG9mIFJlY29yZFNvdXJjZS9NdXRhYmxlUmVjb3JkU291cmNlL2V0Yy5cbiAqL1xuXG5cbnZhciBSZWxheVN0b3JlVXRpbHMgPSB7XG4gIEZSQUdNRU5UU19LRVk6ICdfX2ZyYWdtZW50cycsXG4gIEZSQUdNRU5UX09XTkVSX0tFWTogJ19fZnJhZ21lbnRPd25lcicsXG4gIEZSQUdNRU5UX1BST1BfTkFNRV9LRVk6ICdfX2ZyYWdtZW50UHJvcE5hbWUnLFxuICBNT0RVTEVfQ09NUE9ORU5UX0tFWTogJ19fbW9kdWxlX2NvbXBvbmVudCcsXG4gIC8vIGFsaWFzIHJldHVybmVkIGJ5IFJlYWRlclxuICBJRF9LRVk6ICdfX2lkJyxcbiAgUkVGX0tFWTogJ19fcmVmJyxcbiAgUkVGU19LRVk6ICdfX3JlZnMnLFxuICBST09UX0lEOiAnY2xpZW50OnJvb3QnLFxuICBST09UX1RZUEU6ICdfX1Jvb3QnLFxuICBUWVBFTkFNRV9LRVk6ICdfX3R5cGVuYW1lJyxcbiAgSU5WQUxJREFURURfQVRfS0VZOiAnX19pbnZhbGlkYXRlZF9hdCcsXG4gIElTX1dJVEhJTl9VTk1BVENIRURfVFlQRV9SRUZJTkVNRU5UOiAnX19pc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50JyxcbiAgZm9ybWF0U3RvcmFnZUtleTogZm9ybWF0U3RvcmFnZUtleSxcbiAgZ2V0QXJndW1lbnRWYWx1ZTogZ2V0QXJndW1lbnRWYWx1ZSxcbiAgZ2V0QXJndW1lbnRWYWx1ZXM6IGdldEFyZ3VtZW50VmFsdWVzLFxuICBnZXRIYW5kbGVTdG9yYWdlS2V5OiBnZXRIYW5kbGVTdG9yYWdlS2V5LFxuICBnZXRTdG9yYWdlS2V5OiBnZXRTdG9yYWdlS2V5LFxuICBnZXRTdGFibGVTdG9yYWdlS2V5OiBnZXRTdGFibGVTdG9yYWdlS2V5LFxuICBnZXRNb2R1bGVDb21wb25lbnRLZXk6IGdldE1vZHVsZUNvbXBvbmVudEtleSxcbiAgZ2V0TW9kdWxlT3BlcmF0aW9uS2V5OiBnZXRNb2R1bGVPcGVyYXRpb25LZXlcbn07XG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5U3RvcmVVdGlsczsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi9xdWVyeS9HcmFwaFFMVGFnJyksXG4gICAgZ2V0RnJhZ21lbnQgPSBfcmVxdWlyZS5nZXRGcmFnbWVudDtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vUmVsYXlNb2Rlcm5TZWxlY3RvcicpLFxuICAgIGdldFNlbGVjdG9yID0gX3JlcXVpcmUyLmdldFNlbGVjdG9yO1xuXG52YXIgY29udGV4dFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHdpdGhSZXNvbHZlckNvbnRleHQoY29udGV4dCwgY2IpIHtcbiAgY29udGV4dFN0YWNrLnB1c2goY29udGV4dCk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gY2IoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjb250ZXh0U3RhY2sucG9wKCk7XG4gIH1cbn0gLy8gTk9URTogdGhlc2UgZGVjbGFyYXRpb25zIGFyZSBjb3BpZWQgZnJvbSAndXNlRnJhZ21lbnQnOyBpdCB3b3VsZCBiZSBnb29kXG4vLyB0byBmaWd1cmUgb3V0IGhvdyB0byBzaGFyZSB0aGUgc2FtZSB0eXBlIHNpZ25hdHVyZSBiZXR3ZWVuIHRoZSB0d28gZnVuY3Rpb25zLlxuLy8gVGhlIGRlY2xhcmF0aW9ucyBlbnN1cmUgdGhhdCB0aGUgdHlwZSBvZiB0aGUgcmV0dXJuZWQgZGF0YSBpczpcbi8vICAgLSBub24tbnVsbGFibGUgaWYgdGhlIHByb3ZpZGVkIHJlZiB0eXBlIGlzIG5vbi1udWxsYWJsZVxuLy8gICAtIG51bGxhYmxlIGlmIHRoZSBwcm92aWRlZCByZWYgdHlwZSBpcyBudWxsYWJsZVxuLy8gICAtIGFycmF5IG9mIG5vbi1udWxsYWJsZSBpZiB0aGUgcHJpdm9pZGVkIHJlZiB0eXBlIGlzIGFuIGFycmF5IG9mXG4vLyAgICAgbm9uLW51bGxhYmxlIHJlZnNcbi8vICAgLSBhcnJheSBvZiBudWxsYWJsZSBpZiB0aGUgcHJpdm9pZGVkIHJlZiB0eXBlIGlzIGFuIGFycmF5IG9mIG51bGxhYmxlIHJlZnNcblxuXG5mdW5jdGlvbiByZWFkRnJhZ21lbnQoZnJhZ21lbnRJbnB1dCwgZnJhZ21lbnRSZWYpIHtcbiAgaWYgKCFjb250ZXh0U3RhY2subGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdyZWFkRnJhZ21lbnQgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IGZyb20gd2l0aGluIGEgUmVsYXkgUmVzb2x2ZXIgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY29udGV4dCA9IGNvbnRleHRTdGFja1tjb250ZXh0U3RhY2subGVuZ3RoIC0gMV07XG4gIHZhciBmcmFnbWVudE5vZGUgPSBnZXRGcmFnbWVudChmcmFnbWVudElucHV0KTtcbiAgdmFyIGZyYWdtZW50U2VsZWN0b3IgPSBnZXRTZWxlY3RvcihmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmKTtcbiAgIShmcmFnbWVudFNlbGVjdG9yICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkV4cGVjdGVkIGEgc2VsZWN0b3IgZm9yIHRoZSBmcmFnbWVudCBvZiB0aGUgcmVzb2x2ZXIgXCIuY29uY2F0KGZyYWdtZW50Tm9kZS5uYW1lLCBcIiwgYnV0IGdvdCBudWxsLlwiKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhKGZyYWdtZW50U2VsZWN0b3Iua2luZCA9PT0gJ1Npbmd1bGFyUmVhZGVyU2VsZWN0b3InKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJFeHBlY3RlZCBhIHNpbmd1bGFyIHJlYWRlciBzZWxlY3RvciBmb3IgdGhlIGZyYWdtZW50IG9mIHRoZSByZXNvbHZlciBcIi5jb25jYXQoZnJhZ21lbnROb2RlLm5hbWUsIFwiLCBidXQgaXQgd2FzIHBsdXJhbC5cIikpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGNvbnRleHQuZ2V0RGF0YUZvclJlc29sdmVyRnJhZ21lbnQoZnJhZ21lbnRTZWxlY3Rvcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZWFkRnJhZ21lbnQ6IHJlYWRGcmFnbWVudCxcbiAgd2l0aFJlc29sdmVyQ29udGV4dDogd2l0aFJlc29sdmVyQ29udGV4dFxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFBSRUZJWCA9ICdjbGllbnQ6X190eXBlOic7XG52YXIgVFlQRV9TQ0hFTUFfVFlQRSA9ICdfX1R5cGVTY2hlbWEnO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVR5cGVJRCh0eXBlTmFtZSkge1xuICByZXR1cm4gUFJFRklYICsgdHlwZU5hbWU7XG59XG5cbmZ1bmN0aW9uIGlzVHlwZUlEKGlkKSB7XG4gIHJldHVybiBpZC5pbmRleE9mKFBSRUZJWCkgPT09IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZW5lcmF0ZVR5cGVJRDogZ2VuZXJhdGVUeXBlSUQsXG4gIGlzVHlwZUlEOiBpc1R5cGVJRCxcbiAgVFlQRV9TQ0hFTUFfVFlQRTogVFlQRV9TQ0hFTUFfVFlQRVxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9DbGllbnRJRCcpLFxuICAgIGdlbmVyYXRlQ2xpZW50SUQgPSBfcmVxdWlyZS5nZW5lcmF0ZUNsaWVudElEO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlVXRpbHMnKSxcbiAgICBST09UX0lEID0gX3JlcXVpcmUyLlJPT1RfSUQ7XG5cbnZhciBWSUVXRVJfSUQgPSBnZW5lcmF0ZUNsaWVudElEKFJPT1RfSUQsICd2aWV3ZXInKTtcbnZhciBWSUVXRVJfVFlQRSA9ICdWaWV3ZXInO1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFZJRVdFUl9JRDogVklFV0VSX0lELFxuICBWSUVXRVJfVFlQRTogVklFV0VSX1RZUEVcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhcmVFcXVhbCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9hcmVFcXVhbFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi91dGlsL1JlbGF5Q29uY3JldGVOb2RlJyksXG4gICAgTElOS0VEX0ZJRUxEID0gX3JlcXVpcmUuTElOS0VEX0ZJRUxEO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlVXRpbHMnKSxcbiAgICBnZXRIYW5kbGVTdG9yYWdlS2V5ID0gX3JlcXVpcmUyLmdldEhhbmRsZVN0b3JhZ2VLZXk7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIHN1cHBsaWVkIGBoYW5kbGVGaWVsZGAgYnkgZmluZGluZyB0aGUgb3JpZ2luYWwgbGlua2VkXG4gKiBmaWVsZCAob24gd2hpY2ggdGhlIGhhbmRsZSB3YXMgZGVjbGFyZWQpIGFtb25nIHRoZSBzaWJsaW5nIGBzZWxlY3Rpb25zYCwgYW5kXG4gKiBjb3B5aW5nIGl0cyBzZWxlY3Rpb25zIGludG8gdGhlIGNsb25lLlxuICovXG5mdW5jdGlvbiBjbG9uZVJlbGF5SGFuZGxlU291cmNlRmllbGQoaGFuZGxlRmllbGQsIHNlbGVjdGlvbnMsIHZhcmlhYmxlcykge1xuICB2YXIgc291cmNlRmllbGQgPSBzZWxlY3Rpb25zLmZpbmQoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgIHJldHVybiBzb3VyY2Uua2luZCA9PT0gTElOS0VEX0ZJRUxEICYmIHNvdXJjZS5uYW1lID09PSBoYW5kbGVGaWVsZC5uYW1lICYmIHNvdXJjZS5hbGlhcyA9PT0gaGFuZGxlRmllbGQuYWxpYXMgJiYgYXJlRXF1YWwoc291cmNlLmFyZ3MsIGhhbmRsZUZpZWxkLmFyZ3MpO1xuICB9KTtcbiAgIShzb3VyY2VGaWVsZCAmJiBzb3VyY2VGaWVsZC5raW5kID09PSBMSU5LRURfRklFTEQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnY2xvbmVSZWxheUhhbmRsZVNvdXJjZUZpZWxkOiBFeHBlY3RlZCBhIGNvcnJlc3BvbmRpbmcgc291cmNlIGZpZWxkIGZvciAnICsgJ2hhbmRsZSBgJXNgLicsIGhhbmRsZUZpZWxkLmhhbmRsZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgaGFuZGxlS2V5ID0gZ2V0SGFuZGxlU3RvcmFnZUtleShoYW5kbGVGaWVsZCwgdmFyaWFibGVzKTtcbiAgcmV0dXJuIHtcbiAgICBraW5kOiAnTGlua2VkRmllbGQnLFxuICAgIGFsaWFzOiBzb3VyY2VGaWVsZC5hbGlhcyxcbiAgICBuYW1lOiBoYW5kbGVLZXksXG4gICAgc3RvcmFnZUtleTogaGFuZGxlS2V5LFxuICAgIGFyZ3M6IG51bGwsXG4gICAgY29uY3JldGVUeXBlOiBzb3VyY2VGaWVsZC5jb25jcmV0ZVR5cGUsXG4gICAgcGx1cmFsOiBzb3VyY2VGaWVsZC5wbHVyYWwsXG4gICAgc2VsZWN0aW9uczogc291cmNlRmllbGQuc2VsZWN0aW9uc1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lUmVsYXlIYW5kbGVTb3VyY2VGaWVsZDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGFyZUVxdWFsID0gcmVxdWlyZShcImZianMvbGliL2FyZUVxdWFsXCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3V0aWwvUmVsYXlDb25jcmV0ZU5vZGUnKSxcbiAgICBTQ0FMQVJfRklFTEQgPSBfcmVxdWlyZS5TQ0FMQVJfRklFTEQ7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuL1JlbGF5U3RvcmVVdGlscycpLFxuICAgIGdldEhhbmRsZVN0b3JhZ2VLZXkgPSBfcmVxdWlyZTIuZ2V0SGFuZGxlU3RvcmFnZUtleTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgc3VwcGxpZWQgYGhhbmRsZUZpZWxkYCBieSBmaW5kaW5nIHRoZSBvcmlnaW5hbCBzY2FsYXJcbiAqIGZpZWxkIChvbiB3aGljaCB0aGUgaGFuZGxlIHdhcyBkZWNsYXJlZCkgYW1vbmcgdGhlIHNpYmxpbmcgYHNlbGVjdGlvbnNgLlxuICovXG5mdW5jdGlvbiBjbG9uZVJlbGF5U2NhbGFySGFuZGxlU291cmNlRmllbGQoaGFuZGxlRmllbGQsIHNlbGVjdGlvbnMsIHZhcmlhYmxlcykge1xuICB2YXIgc291cmNlRmllbGQgPSBzZWxlY3Rpb25zLmZpbmQoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgIHJldHVybiBzb3VyY2Uua2luZCA9PT0gU0NBTEFSX0ZJRUxEICYmIHNvdXJjZS5uYW1lID09PSBoYW5kbGVGaWVsZC5uYW1lICYmIHNvdXJjZS5hbGlhcyA9PT0gaGFuZGxlRmllbGQuYWxpYXMgJiYgYXJlRXF1YWwoc291cmNlLmFyZ3MsIGhhbmRsZUZpZWxkLmFyZ3MpO1xuICB9KTtcbiAgIShzb3VyY2VGaWVsZCAmJiBzb3VyY2VGaWVsZC5raW5kID09PSBTQ0FMQVJfRklFTEQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnY2xvbmVSZWxheVNjYWxhckhhbmRsZVNvdXJjZUZpZWxkOiBFeHBlY3RlZCBhIGNvcnJlc3BvbmRpbmcgc291cmNlIGZpZWxkIGZvciAnICsgJ2hhbmRsZSBgJXNgLicsIGhhbmRsZUZpZWxkLmhhbmRsZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgaGFuZGxlS2V5ID0gZ2V0SGFuZGxlU3RvcmFnZUtleShoYW5kbGVGaWVsZCwgdmFyaWFibGVzKTtcbiAgcmV0dXJuIHtcbiAgICBraW5kOiAnU2NhbGFyRmllbGQnLFxuICAgIGFsaWFzOiBzb3VyY2VGaWVsZC5hbGlhcyxcbiAgICBuYW1lOiBoYW5kbGVLZXksXG4gICAgc3RvcmFnZUtleTogaGFuZGxlS2V5LFxuICAgIGFyZ3M6IG51bGxcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVJlbGF5U2NhbGFySGFuZGxlU291cmNlRmllbGQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWxheU1vZGVybkZyYWdtZW50U3BlY1Jlc29sdmVyID0gcmVxdWlyZSgnLi9SZWxheU1vZGVybkZyYWdtZW50U3BlY1Jlc29sdmVyJyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyKGNvbnRleHQsIGNvbnRhaW5lck5hbWUsIGZyYWdtZW50cywgcHJvcHMsIHJvb3RJc1F1ZXJ5UmVuZGVyZXIsIGNhbGxiYWNrKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgZnJhZ21lbnROYW1lcyA9IE9iamVjdC5rZXlzKGZyYWdtZW50cyk7XG4gICAgZnJhZ21lbnROYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnbWVudE5hbWUpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1tmcmFnbWVudE5hbWVdO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9wVmFsdWUgIT09IHVuZGVmaW5lZCwgJ2NyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyOiBFeHBlY3RlZCBwcm9wIGAlc2AgdG8gYmUgc3VwcGxpZWQgdG8gYCVzYCwgYnV0ICcgKyAnZ290IGB1bmRlZmluZWRgLiBQYXNzIGFuIGV4cGxpY2l0IGBudWxsYCBpZiB0aGlzIGlzIGludGVudGlvbmFsLicsIGZyYWdtZW50TmFtZSwgY29udGFpbmVyTmFtZSkgOiB2b2lkIDA7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlbGF5TW9kZXJuRnJhZ21lbnRTcGVjUmVzb2x2ZXIoY29udGV4dCwgZnJhZ21lbnRzLCBwcm9wcywgY2FsbGJhY2ssIHJvb3RJc1F1ZXJ5UmVuZGVyZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciByZWxheUNvbnRleHQ7XG52YXIgZmlyc3RSZWFjdDtcblxuZnVuY3Rpb24gY3JlYXRlUmVsYXlDb250ZXh0KHJlYWN0KSB7XG4gIGlmICghcmVsYXlDb250ZXh0KSB7XG4gICAgcmVsYXlDb250ZXh0ID0gcmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHJlbGF5Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdSZWxheUNvbnRleHQnO1xuICAgIH1cblxuICAgIGZpcnN0UmVhY3QgPSByZWFjdDtcbiAgfVxuXG4gICEocmVhY3QgPT09IGZpcnN0UmVhY3QpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnW2NyZWF0ZVJlbGF5Q29udGV4dF06IFlvdSBwYXNzaW5nIGEgZGlmZmVyZW50IGluc3RhbmNlIG9mIFJlYWN0JywgcmVhY3QudmVyc2lvbikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcmVsYXlDb250ZXh0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJlbGF5Q29udGV4dDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9WaWV3ZXJQYXR0ZXJuJyksXG4gICAgVklFV0VSX0lEID0gX3JlcXVpcmUuVklFV0VSX0lELFxuICAgIFZJRVdFUl9UWVBFID0gX3JlcXVpcmUuVklFV0VSX1RZUEU7XG5cbmZ1bmN0aW9uIGRlZmF1bHRHZXREYXRhSUQoZmllbGRWYWx1ZSwgdHlwZU5hbWUpIHtcbiAgaWYgKHR5cGVOYW1lID09PSBWSUVXRVJfVFlQRSkge1xuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIHJldHVybiBmaWVsZFZhbHVlLmlkID09IG51bGwgPyBWSUVXRVJfSUQgOiBmaWVsZFZhbHVlLmlkO1xuICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG5cbiAgcmV0dXJuIGZpZWxkVmFsdWUuaWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdEdldERhdGFJRDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0UmVxdWlyZWRGaWVsZExvZ2dlciA9IGZ1bmN0aW9uIGRlZmF1bHRSZXF1aXJlZEZpZWxkTG9nZ2VyKGV2ZW50KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgZXZlbnQua2luZCA9PT0gJ21pc3NpbmdfZmllbGQubG9nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignUmVsYXkgRW52aXJvbm1lbnQgQ29uZmlndXJhdGlvbiBFcnJvciAoZGV2IG9ubHkpOiBgQHJlcXVpcmVkKGFjdGlvbjogTE9HKWAgcmVxdWlyZXMgdGhhdCB0aGUgUmVsYXkgRW52aXJvbm1lbnQgYmUgY29uZmlndXJlZCB3aXRoIGEgYHJlcXVpcmVkRmllbGRMb2dnZXJgLicpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRSZXF1aXJlZEZpZWxkTG9nZ2VyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgSVRFUkFUT1JfS0VZID0gU3ltYm9sLml0ZXJhdG9yO1xuXG5mdW5jdGlvbiBoYXNPdmVybGFwcGluZ0lEcyhzZWVuUmVjb3JkcywgdXBkYXRlZFJlY29yZElEcykge1xuICAvLyAkRmxvd0ZpeE1lOiBTZXQgaXMgYW4gaXRlcmFibGUgdHlwZSwgYWNjZXNzaW5nIGl0cyBpdGVyYXRvciBpcyBhbGxvd2VkLlxuICB2YXIgaXRlcmF0b3IgPSBzZWVuUmVjb3Jkc1tJVEVSQVRPUl9LRVldKCk7XG4gIHZhciBuZXh0ID0gaXRlcmF0b3IubmV4dCgpO1xuXG4gIHdoaWxlICghbmV4dC5kb25lKSB7XG4gICAgdmFyIGtleSA9IG5leHQudmFsdWU7XG5cbiAgICBpZiAodXBkYXRlZFJlY29yZElEcy5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNPdmVybGFwcGluZ0lEczsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0Jztcbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgZ2l2ZW4gdmFsdWUgaXMgYW4gb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgYEVudmlyb25tZW50YFxuICogaW50ZXJmYWNlIGRlZmluZWQgaW4gYFJlbGF5U3RvcmVUeXBlc2AuXG4gKlxuICogVXNlIGEgc2lnaWwgZm9yIGRldGVjdGlvbiB0byBhdm9pZCBhIHJlYWxtLXNwZWNpZmljIGluc3RhbmNlb2YgY2hlY2ssIGFuZCB0b1xuICogYWlkIGluIG1vZHVsZSB0cmVlLXNoYWtpbmcgdG8gYXZvaWQgcmVxdWlyaW5nIGFsbCBvZiBSZWxheVJ1bnRpbWUganVzdCB0b1xuICogZGV0ZWN0IGl0cyBlbnZpcm9ubWVudC5cbiAqL1xuXG5mdW5jdGlvbiBpc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQoZW52aXJvbm1lbnQpIHtcbiAgcmV0dXJuIEJvb2xlYW4oZW52aXJvbm1lbnQgJiYgZW52aXJvbm1lbnRbJ0BAUmVsYXlNb2Rlcm5FbnZpcm9ubWVudCddKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vcXVlcnkvR3JhcGhRTFRhZycpLFxuICAgIGdldElubGluZURhdGFGcmFnbWVudCA9IF9yZXF1aXJlLmdldElubGluZURhdGFGcmFnbWVudDtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vUmVsYXlTdG9yZVV0aWxzJyksXG4gICAgRlJBR01FTlRTX0tFWSA9IF9yZXF1aXJlMi5GUkFHTUVOVFNfS0VZO1xuXG5mdW5jdGlvbiByZWFkSW5saW5lRGF0YShmcmFnbWVudCwgZnJhZ21lbnRSZWYpIHtcbiAgdmFyIF9mcmFnbWVudFJlZiRGUkFHTUVOVDtcblxuICB2YXIgaW5saW5lRGF0YUZyYWdtZW50ID0gZ2V0SW5saW5lRGF0YUZyYWdtZW50KGZyYWdtZW50KTtcblxuICBpZiAoZnJhZ21lbnRSZWYgPT0gbnVsbCkge1xuICAgIHJldHVybiBmcmFnbWVudFJlZjtcbiAgfVxuXG4gICEodHlwZW9mIGZyYWdtZW50UmVmID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdyZWFkSW5saW5lRGF0YSgpOiBFeHBlY3RlZCBhbiBvYmplY3QsIGdvdCBgJXNgLicsIHR5cGVvZiBmcmFnbWVudFJlZikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG5cbiAgdmFyIGlubGluZURhdGEgPSAoX2ZyYWdtZW50UmVmJEZSQUdNRU5UID0gZnJhZ21lbnRSZWZbRlJBR01FTlRTX0tFWV0pID09PSBudWxsIHx8IF9mcmFnbWVudFJlZiRGUkFHTUVOVCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZyYWdtZW50UmVmJEZSQUdNRU5UW2lubGluZURhdGFGcmFnbWVudC5uYW1lXTtcbiAgIShpbmxpbmVEYXRhICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAncmVhZElubGluZURhdGEoKTogRXhwZWN0ZWQgZnJhZ21lbnQgYCVzYCB0byBiZSBzcHJlYWQgaW4gdGhlIHBhcmVudCAnICsgJ2ZyYWdtZW50LicsIGlubGluZURhdGFGcmFnbWVudC5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBpbmxpbmVEYXRhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYWRJbmxpbmVEYXRhOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVsYXlEZWNsYXJhdGl2ZU11dGF0aW9uQ29uZmlnID0gcmVxdWlyZSgnLi4vbXV0YXRpb25zL1JlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZycpO1xuXG52YXIgUmVsYXlGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuLi91dGlsL1JlbGF5RmVhdHVyZUZsYWdzJyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3F1ZXJ5L0dyYXBoUUxUYWcnKSxcbiAgICBnZXRSZXF1ZXN0ID0gX3JlcXVpcmUuZ2V0UmVxdWVzdDtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4uL3N0b3JlL0NsaWVudElEJyksXG4gICAgZ2VuZXJhdGVVbmlxdWVDbGllbnRJRCA9IF9yZXF1aXJlMi5nZW5lcmF0ZVVuaXF1ZUNsaWVudElEO1xuXG52YXIgX3JlcXVpcmUzID0gcmVxdWlyZSgnLi4vc3RvcmUvUmVsYXlNb2Rlcm5PcGVyYXRpb25EZXNjcmlwdG9yJyksXG4gICAgY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvciA9IF9yZXF1aXJlMy5jcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yO1xuXG52YXIgX3JlcXVpcmU0ID0gcmVxdWlyZSgnLi4vc3RvcmUvUmVsYXlNb2Rlcm5TZWxlY3RvcicpLFxuICAgIGNyZWF0ZVJlYWRlclNlbGVjdG9yID0gX3JlcXVpcmU0LmNyZWF0ZVJlYWRlclNlbGVjdG9yO1xuXG5mdW5jdGlvbiByZXF1ZXN0U3Vic2NyaXB0aW9uKGVudmlyb25tZW50LCBjb25maWcpIHtcbiAgdmFyIHN1YnNjcmlwdGlvbiA9IGdldFJlcXVlc3QoY29uZmlnLnN1YnNjcmlwdGlvbik7XG5cbiAgaWYgKHN1YnNjcmlwdGlvbi5wYXJhbXMub3BlcmF0aW9uS2luZCAhPT0gJ3N1YnNjcmlwdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlcXVlc3RTdWJzY3JpcHRpb246IE11c3QgdXNlIFN1YnNjcmlwdGlvbiBvcGVyYXRpb24nKTtcbiAgfVxuXG4gIHZhciBjb25maWdzID0gY29uZmlnLmNvbmZpZ3MsXG4gICAgICBvbkNvbXBsZXRlZCA9IGNvbmZpZy5vbkNvbXBsZXRlZCxcbiAgICAgIG9uRXJyb3IgPSBjb25maWcub25FcnJvcixcbiAgICAgIG9uTmV4dCA9IGNvbmZpZy5vbk5leHQsXG4gICAgICB2YXJpYWJsZXMgPSBjb25maWcudmFyaWFibGVzLFxuICAgICAgY2FjaGVDb25maWcgPSBjb25maWcuY2FjaGVDb25maWc7XG4gIHZhciBvcGVyYXRpb24gPSBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yKHN1YnNjcmlwdGlvbiwgdmFyaWFibGVzLCBjYWNoZUNvbmZpZywgUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX1VOSVFVRV9TVUJTQ1JJUFRJT05fUk9PVCA/IGdlbmVyYXRlVW5pcXVlQ2xpZW50SUQoKSA6IHVuZGVmaW5lZCk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIShjb25maWcudXBkYXRlciAmJiBjb25maWdzKSwgJ3JlcXVlc3RTdWJzY3JpcHRpb246IEV4cGVjdGVkIG9ubHkgb25lIG9mIGB1cGRhdGVyYCBhbmQgYGNvbmZpZ3NgIHRvIGJlIHByb3ZpZGVkJykgOiB2b2lkIDA7XG5cbiAgdmFyIF9yZWYgPSBjb25maWdzID8gUmVsYXlEZWNsYXJhdGl2ZU11dGF0aW9uQ29uZmlnLmNvbnZlcnQoY29uZmlncywgc3Vic2NyaXB0aW9uLCBudWxsXG4gIC8qIG9wdGltaXN0aWNVcGRhdGVyICovXG4gICwgY29uZmlnLnVwZGF0ZXIpIDogY29uZmlnLFxuICAgICAgdXBkYXRlciA9IF9yZWYudXBkYXRlcjtcblxuICB2YXIgc3ViID0gZW52aXJvbm1lbnQuZXhlY3V0ZSh7XG4gICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgdXBkYXRlcjogdXBkYXRlclxuICB9KS5tYXAoZnVuY3Rpb24gKHJlc3BvbnNlcykge1xuICAgIHZhciBzZWxlY3RvciA9IG9wZXJhdGlvbi5mcmFnbWVudDtcblxuICAgIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfVU5JUVVFX1NVQlNDUklQVElPTl9ST09UKSB7XG4gICAgICB2YXIgbmV4dElEO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXNwb25zZXMpKSB7XG4gICAgICAgIHZhciBfcmVzcG9uc2VzJCwgX3Jlc3BvbnNlcyQkZXh0ZW5zaW9uO1xuXG4gICAgICAgIG5leHRJRCA9IChfcmVzcG9uc2VzJCA9IHJlc3BvbnNlc1swXSkgPT09IG51bGwgfHwgX3Jlc3BvbnNlcyQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfcmVzcG9uc2VzJCRleHRlbnNpb24gPSBfcmVzcG9uc2VzJC5leHRlbnNpb25zKSA9PT0gbnVsbCB8fCBfcmVzcG9uc2VzJCRleHRlbnNpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yZXNwb25zZXMkJGV4dGVuc2lvbi5fX3JlbGF5X3N1YnNjcmlwdGlvbl9yb290X2lkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9yZXNwb25zZXMkZXh0ZW5zaW9ucztcblxuICAgICAgICBuZXh0SUQgPSAoX3Jlc3BvbnNlcyRleHRlbnNpb25zID0gcmVzcG9uc2VzLmV4dGVuc2lvbnMpID09PSBudWxsIHx8IF9yZXNwb25zZXMkZXh0ZW5zaW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3Jlc3BvbnNlcyRleHRlbnNpb25zLl9fcmVsYXlfc3Vic2NyaXB0aW9uX3Jvb3RfaWQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dElEID09PSAnc3RyaW5nJykge1xuICAgICAgICBzZWxlY3RvciA9IGNyZWF0ZVJlYWRlclNlbGVjdG9yKHNlbGVjdG9yLm5vZGUsIG5leHRJRCwgc2VsZWN0b3IudmFyaWFibGVzLCBzZWxlY3Rvci5vd25lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSBlbnZpcm9ubWVudC5sb29rdXAoc2VsZWN0b3IpLmRhdGE7IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdXG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfSkuc3Vic2NyaWJlKHtcbiAgICBuZXh0OiBvbk5leHQsXG4gICAgZXJyb3I6IG9uRXJyb3IsXG4gICAgY29tcGxldGU6IG9uQ29tcGxldGVkXG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGRpc3Bvc2U6IHN1Yi51bnN1YnNjcmliZVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVlc3RTdWJzY3JpcHRpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGNvbW1vbiBHcmFwaFFMIHJlcXVlc3QgdGhhdCBjYW4gYmUgZXhlY3V0ZWQsIGFuIGBvcGVyYXRpb25gXG4gKiBjb250YWluaW5nIGluZm9ybWF0aW9uIHRvIG5vcm1hbGl6ZSB0aGUgcmVzdWx0cywgYW5kIGEgYGZyYWdtZW50YCBkZXJpdmVkXG4gKiBmcm9tIHRoYXQgb3BlcmF0aW9uIHRvIHJlYWQgdGhlIHJlc3BvbnNlIGRhdGEgKG1hc2tpbmcgZGF0YSBmcm9tIGNoaWxkXG4gKiBmcmFnbWVudHMpLlxuICovXG5cbi8qKlxuICogQ29udGFpbnMgdGhlIHBhcmFtZXRlcnMgcmVxdWlyZWQgZm9yIGV4ZWN1dGluZyBhIEdyYXBoUUwgcmVxdWVzdC5cbiAqIFRoZSBvcGVyYXRpb24gY2FuIGVpdGhlciBiZSBwcm92aWRlZCBhcyBhIHBlcnNpc3RlZCBgaWRgIG9yIGB0ZXh0YC4gSWYgZ2l2ZW5cbiAqIGluIGB0ZXh0YCBmb3JtYXQsIGEgYGNhY2hlSURgIGFzIGEgaGFzaCBvZiB0aGUgdGV4dCBzaG91bGQgYmUgc2V0IHRvIGJlIHVzZWRcbiAqIGZvciBsb2NhbCBjYWNoaW5nLlxuICovXG52YXIgUmVsYXlDb25jcmV0ZU5vZGUgPSB7XG4gIENPTkRJVElPTjogJ0NvbmRpdGlvbicsXG4gIENMSUVOVF9DT01QT05FTlQ6ICdDbGllbnRDb21wb25lbnQnLFxuICBDTElFTlRfRVhURU5TSU9OOiAnQ2xpZW50RXh0ZW5zaW9uJyxcbiAgREVGRVI6ICdEZWZlcicsXG4gIENPTk5FQ1RJT046ICdDb25uZWN0aW9uJyxcbiAgRkxJR0hUX0ZJRUxEOiAnRmxpZ2h0RmllbGQnLFxuICBGUkFHTUVOVDogJ0ZyYWdtZW50JyxcbiAgRlJBR01FTlRfU1BSRUFEOiAnRnJhZ21lbnRTcHJlYWQnLFxuICBJTkxJTkVfREFUQV9GUkFHTUVOVF9TUFJFQUQ6ICdJbmxpbmVEYXRhRnJhZ21lbnRTcHJlYWQnLFxuICBJTkxJTkVfREFUQV9GUkFHTUVOVDogJ0lubGluZURhdGFGcmFnbWVudCcsXG4gIElOTElORV9GUkFHTUVOVDogJ0lubGluZUZyYWdtZW50JyxcbiAgTElOS0VEX0ZJRUxEOiAnTGlua2VkRmllbGQnLFxuICBMSU5LRURfSEFORExFOiAnTGlua2VkSGFuZGxlJyxcbiAgTElURVJBTDogJ0xpdGVyYWwnLFxuICBMSVNUX1ZBTFVFOiAnTGlzdFZhbHVlJyxcbiAgTE9DQUxfQVJHVU1FTlQ6ICdMb2NhbEFyZ3VtZW50JyxcbiAgTU9EVUxFX0lNUE9SVDogJ01vZHVsZUltcG9ydCcsXG4gIFJFTEFZX1JFU09MVkVSOiAnUmVsYXlSZXNvbHZlcicsXG4gIFJFUVVJUkVEX0ZJRUxEOiAnUmVxdWlyZWRGaWVsZCcsXG4gIE9CSkVDVF9WQUxVRTogJ09iamVjdFZhbHVlJyxcbiAgT1BFUkFUSU9OOiAnT3BlcmF0aW9uJyxcbiAgUkVRVUVTVDogJ1JlcXVlc3QnLFxuICBST09UX0FSR1VNRU5UOiAnUm9vdEFyZ3VtZW50JyxcbiAgU0NBTEFSX0ZJRUxEOiAnU2NhbGFyRmllbGQnLFxuICBTQ0FMQVJfSEFORExFOiAnU2NhbGFySGFuZGxlJyxcbiAgU1BMSVRfT1BFUkFUSU9OOiAnU3BsaXRPcGVyYXRpb24nLFxuICBTVFJFQU06ICdTdHJlYW0nLFxuICBUWVBFX0RJU0NSSU1JTkFUT1I6ICdUeXBlRGlzY3JpbWluYXRvcicsXG4gIFZBUklBQkxFOiAnVmFyaWFibGUnXG59O1xubW9kdWxlLmV4cG9ydHMgPSBSZWxheUNvbmNyZXRlTm9kZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIERFRkFVTFRfSEFORExFX0tFWTogJydcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRXJyb3IodHlwZSwgbmFtZSwgbWVzc2FnZUZvcm1hdCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWVzc2FnZVBhcmFtcyA9IG5ldyBBcnJheShfbGVuID4gMyA/IF9sZW4gLSAzIDogMCksIF9rZXkgPSAzOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWVzc2FnZVBhcmFtc1tfa2V5IC0gM10gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VGb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBTdHJpbmcobWVzc2FnZVBhcmFtc1tpbmRleCsrXSk7XG4gIH0pO1xuICB2YXIgZXJyID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB2YXIgZXJyb3IgPSBPYmplY3QuYXNzaWduKGVyciwge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgbWVzc2FnZUZvcm1hdDogbWVzc2FnZUZvcm1hdCxcbiAgICBtZXNzYWdlUGFyYW1zOiBtZXNzYWdlUGFyYW1zLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgdGFhbE9wY29kZXM6IFsyLCAyXSAvLyBza2lwIGZyYW1lIChjb2RlPTIpIHR3aWNlXG5cbiAgfSk7IC8vIEluIFY4LCBFcnJvciBvYmplY3RzIGtlZXAgdGhlIGNsb3N1cmUgc2NvcGUgY2hhaW4gYWxpdmUgdW50aWwgdGhlXG4gIC8vIGVyci5zdGFjayBwcm9wZXJ0eSBpcyBhY2Nlc3NlZC5cblxuICBpZiAoZXJyb3Iuc3RhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIElFIHNldHMgdGhlIHN0YWNrIG9ubHkgaWYgZXJyb3IgaXMgdGhyb3duXG4gICAgdHJ5IHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0gY2F0Y2ggKF91bnVzZWQpIHt9XG4gIH1cblxuICByZXR1cm4gZXJyb3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCBtZXNzYWdlRm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBtZXNzYWdlUGFyYW1zID0gbmV3IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIG1lc3NhZ2VQYXJhbXNbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZUVycm9yLmFwcGx5KHZvaWQgMCwgWydlcnJvcicsIG5hbWUsIG1lc3NhZ2VGb3JtYXRdLmNvbmNhdChtZXNzYWdlUGFyYW1zKSk7XG4gIH0sXG4gIGNyZWF0ZVdhcm5pbmc6IGZ1bmN0aW9uIGNyZWF0ZVdhcm5pbmcobmFtZSwgbWVzc2FnZUZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgbWVzc2FnZVBhcmFtcyA9IG5ldyBBcnJheShfbGVuMyA+IDIgPyBfbGVuMyAtIDIgOiAwKSwgX2tleTMgPSAyOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICBtZXNzYWdlUGFyYW1zW19rZXkzIC0gMl0gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVFcnJvci5hcHBseSh2b2lkIDAsIFsnd2FybicsIG5hbWUsIG1lc3NhZ2VGb3JtYXRdLmNvbmNhdChtZXNzYWdlUGFyYW1zKSk7XG4gIH1cbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWxheUZlYXR1cmVGbGFncyA9IHtcbiAgRU5BQkxFX1ZBUklBQkxFX0NPTk5FQ1RJT05fS0VZOiBmYWxzZSxcbiAgRU5BQkxFX1BBUlRJQUxfUkVOREVSSU5HX0RFRkFVTFQ6IHRydWUsXG4gIEVOQUJMRV9SRUxBWV9DT05UQUlORVJTX1NVU1BFTlNFOiB0cnVlLFxuICBFTkFCTEVfUFJFQ0lTRV9UWVBFX1JFRklORU1FTlQ6IGZhbHNlLFxuICBFTkFCTEVfUkVBQ1RfRkxJR0hUX0NPTVBPTkVOVF9GSUVMRDogZmFsc2UsXG4gIEVOQUJMRV9SRVFVSVJFRF9ESVJFQ1RJVkVTOiBmYWxzZSxcbiAgRU5BQkxFX1JFTEFZX1JFU09MVkVSUzogZmFsc2UsXG4gIEVOQUJMRV9HRVRGUkFHTUVOVElERU5USUZJRVJfT1BUSU1JWkFUSU9OOiBmYWxzZSxcbiAgRU5BQkxFX0ZSSUVORExZX1FVRVJZX05BTUVfR1FMX1VSTDogZmFsc2UsXG4gIEVOQUJMRV9TVE9SRV9TVUJTQ1JJUFRJT05TX1JFRkFDVE9SOiBmYWxzZSxcbiAgRU5BQkxFX0xPQURfUVVFUllfUkVRVUVTVF9ERURVUElORzogdHJ1ZSxcbiAgRU5BQkxFX0RPX05PVF9XUkFQX0xJVkVfUVVFUlk6IGZhbHNlLFxuICBFTkFCTEVfTk9USUZZX1NVQlNDUklQVElPTjogZmFsc2UsXG4gIEVOQUJMRV9VTklRVUVfU1VCU0NSSVBUSU9OX1JPT1Q6IGZhbHNlLFxuICBFTkFCTEVfQkFUQ0hFRF9TVE9SRV9VUERBVEVTOiBmYWxzZVxufTtcbm1vZHVsZS5leHBvcnRzID0gUmVsYXlGZWF0dXJlRmxhZ3M7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwcm9maWxlSGFuZGxlcnNCeU5hbWUgPSB7fTtcbnZhciBkZWZhdWx0UHJvZmlsZXIgPSB7XG4gIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7fVxufTtcbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIEluc3RydW1lbnRzIG1ldGhvZHMgdG8gYWxsb3cgcHJvZmlsaW5nIHZhcmlvdXMgcGFydHMgb2YgUmVsYXkuIFByb2ZpbGluZyBjb2RlXG4gKiBpbiBSZWxheSBjb25zaXN0cyBvZiB0aHJlZSBzdGVwczpcbiAqXG4gKiAgLSBJbnN0cnVtZW50IHRoZSBmdW5jdGlvbiB0byBiZSBwcm9maWxlZC5cbiAqICAtIEF0dGFjaCBoYW5kbGVycyB0byB0aGUgaW5zdHJ1bWVudGVkIGZ1bmN0aW9uLlxuICogIC0gUnVuIHRoZSBjb2RlIHdoaWNoIHRyaWdnZXJzIHRoZSBoYW5kbGVycy5cbiAqXG4gKiBIYW5kbGVycyBhdHRhY2hlZCB0byBpbnN0cnVtZW50ZWQgbWV0aG9kcyBhcmUgY2FsbGVkIHdpdGggYW4gaW5zdHJ1bWVudGF0aW9uXG4gKiBuYW1lIGFuZCBhIGNhbGxiYWNrIHRoYXQgbXVzdCBiZSBzeW5jaHJvbm91c2x5IGV4ZWN1dGVkOlxuICpcbiAqICAgaW5zdHJ1bWVudGVkTWV0aG9kLmF0dGFjaEhhbmRsZXIoZnVuY3Rpb24obmFtZSwgY2FsbGJhY2spIHtcbiAqICAgICBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICogICAgIGNhbGxiYWNrKCk7XG4gKiAgICAgY29uc29sZS5sb2coJ0R1cmF0aW9uJywgcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydCk7XG4gKiAgIH0pO1xuICpcbiAqIEhhbmRsZXJzIGZvciBwcm9maWxlcyBhcmUgY2FsbGJhY2tzIHRoYXQgcmV0dXJuIGEgc3RvcCBtZXRob2Q6XG4gKlxuICogICBSZWxheVByb2ZpbGVyLmF0dGFjaFByb2ZpbGVIYW5kbGVyKCdwcm9maWxlTmFtZScsIChuYW1lLCBzdGF0ZSkgPT4ge1xuICogICAgIGNvbnN0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gKiAgICAgcmV0dXJuIGZ1bmN0aW9uIHN0b3AobmFtZSwgc3RhdGUpIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKGBEdXJhdGlvbiAoJHtuYW1lfSlgLCBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0KTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICovXG5cbnZhciBSZWxheVByb2ZpbGVyID0ge1xuICAvKipcbiAgICogSW5zdHJ1bWVudHMgcHJvZmlsaW5nIGZvciBhcmJpdHJhcmlseSBhc3luY2hyb25vdXMgY29kZSBieSBhIG5hbWUuXG4gICAqXG4gICAqICAgY29uc3QgdGltZXJQcm9maWxlciA9IFJlbGF5UHJvZmlsZXIucHJvZmlsZSgndGltZW91dCcpO1xuICAgKiAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAqICAgICB0aW1lclByb2ZpbGVyLnN0b3AoKTtcbiAgICogICB9LCAxMDAwKTtcbiAgICpcbiAgICogICBSZWxheVByb2ZpbGVyLmF0dGFjaFByb2ZpbGVIYW5kbGVyKCd0aW1lb3V0JywgLi4uKTtcbiAgICpcbiAgICogQXJiaXRyYXJ5IHN0YXRlIGNhbiBhbHNvIGJlIHBhc3NlZCBpbnRvIGBwcm9maWxlYCBhcyBhIHNlY29uZCBhcmd1bWVudC4gVGhlXG4gICAqIGF0dGFjaGVkIHByb2ZpbGUgaGFuZGxlcnMgd2lsbCByZWNlaXZlIHRoaXMgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgICovXG4gIHByb2ZpbGU6IGZ1bmN0aW9uIHByb2ZpbGUobmFtZSwgc3RhdGUpIHtcbiAgICB2YXIgaGFuZGxlcnMgPSBwcm9maWxlSGFuZGxlcnNCeU5hbWVbbmFtZV07XG5cbiAgICBpZiAoaGFuZGxlcnMgJiYgaGFuZGxlcnMubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHN0b3BIYW5kbGVycyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpaSA9IGhhbmRsZXJzLmxlbmd0aCAtIDE7IGlpID49IDA7IGlpLS0pIHtcbiAgICAgICAgdmFyIHN0b3BIYW5kbGVyID0gaGFuZGxlcnNbaWldKG5hbWUsIHN0YXRlKTtcbiAgICAgICAgc3RvcEhhbmRsZXJzLnVuc2hpZnQoc3RvcEhhbmRsZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKGVycm9yKSB7XG4gICAgICAgICAgc3RvcEhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKHN0b3BIYW5kbGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RvcEhhbmRsZXIoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBkZWZhdWx0UHJvZmlsZXI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEF0dGFjaGVzIGEgaGFuZGxlciB0byBwcm9maWxlcyB3aXRoIHRoZSBzdXBwbGllZCBuYW1lLlxuICAgKi9cbiAgYXR0YWNoUHJvZmlsZUhhbmRsZXI6IGZ1bmN0aW9uIGF0dGFjaFByb2ZpbGVIYW5kbGVyKG5hbWUsIGhhbmRsZXIpIHtcbiAgICBpZiAoIXByb2ZpbGVIYW5kbGVyc0J5TmFtZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgcHJvZmlsZUhhbmRsZXJzQnlOYW1lW25hbWVdID0gW107XG4gICAgfVxuXG4gICAgcHJvZmlsZUhhbmRsZXJzQnlOYW1lW25hbWVdLnB1c2goaGFuZGxlcik7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERldGFjaGVzIGEgaGFuZGxlciBhdHRhY2hlZCB2aWEgYGF0dGFjaFByb2ZpbGVIYW5kbGVyYC5cbiAgICovXG4gIGRldGFjaFByb2ZpbGVIYW5kbGVyOiBmdW5jdGlvbiBkZXRhY2hQcm9maWxlSGFuZGxlcihuYW1lLCBoYW5kbGVyKSB7XG4gICAgaWYgKHByb2ZpbGVIYW5kbGVyc0J5TmFtZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgcmVtb3ZlRnJvbUFycmF5KHByb2ZpbGVIYW5kbGVyc0J5TmFtZVtuYW1lXSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiByZW1vdmVGcm9tQXJyYXkoYXJyYXksIGVsZW1lbnQpIHtcbiAgdmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZihlbGVtZW50KTtcblxuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5UHJvZmlsZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgUmVsYXlPYnNlcnZhYmxlID0gcmVxdWlyZSgnLi4vbmV0d29yay9SZWxheU9ic2VydmFibGUnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIGEgYFJlcGxheVN1YmplY3RgIGZvciBSZWxheSBPYnNlcnZhYmxlcy5cbiAqXG4gKiBSZWNvcmRzIGV2ZW50cyBwcm92aWRlZCBhbmQgc3luY2hyb25vdXNseSBwbGF5cyB0aGVtIGJhY2sgdG8gbmV3IHN1YnNjcmliZXJzLFxuICogYXMgd2VsbCBhcyBmb3J3YXJkaW5nIG5ldyBhc3luY2hyb25vdXMgZXZlbnRzLlxuICovXG52YXIgUmVsYXlSZXBsYXlTdWJqZWN0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVsYXlSZXBsYXlTdWJqZWN0KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRoaXMsIFwiX2NvbXBsZXRlXCIsIGZhbHNlKTtcbiAgICAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRoaXMsIFwiX2V2ZW50c1wiLCBbXSk7XG4gICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh0aGlzLCBcIl9zaW5rc1wiLCBuZXcgU2V0KCkpO1xuICAgICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkodGhpcywgXCJfc3Vic2NyaXB0aW9uXCIsIG51bGwpO1xuICAgIHRoaXMuX29ic2VydmFibGUgPSBSZWxheU9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICBfdGhpcy5fc2lua3MuYWRkKHNpbmspO1xuXG4gICAgICB2YXIgZXZlbnRzID0gX3RoaXMuX2V2ZW50cztcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHNpbmsuY2xvc2VkKSB7XG4gICAgICAgICAgLy8gQmFpbCBpZiBhbiBldmVudCBtYWRlIHRoZSBvYnNlcnZlciB1bnN1YnNjcmliZS5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBldmVudCA9IGV2ZW50c1tpXTtcblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmtpbmQpIHtcbiAgICAgICAgICBjYXNlICdjb21wbGV0ZSc6XG4gICAgICAgICAgICBzaW5rLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgICAgIHNpbmsuZXJyb3IoZXZlbnQuZXJyb3IpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICduZXh0JzpcbiAgICAgICAgICAgIHNpbmsubmV4dChldmVudC5kYXRhKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGV2ZW50LmtpbmQ7XG4gICAgICAgICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlcGxheVN1YmplY3Q6IFVua25vd24gZXZlbnQga2luZCBgJXNgLicsIGV2ZW50LmtpbmQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5fc2lua3NbXCJkZWxldGVcIl0oc2luayk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlbGF5UmVwbGF5U3ViamVjdC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgaWYgKHRoaXMuX2NvbXBsZXRlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fY29tcGxldGUgPSB0cnVlO1xuXG4gICAgdGhpcy5fZXZlbnRzLnB1c2goe1xuICAgICAga2luZDogJ2NvbXBsZXRlJ1xuICAgIH0pO1xuXG4gICAgdGhpcy5fc2lua3MuZm9yRWFjaChmdW5jdGlvbiAoc2luaykge1xuICAgICAgcmV0dXJuIHNpbmsuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZXJyb3IgPSBmdW5jdGlvbiBlcnJvcihfZXJyb3IpIHtcbiAgICBpZiAodGhpcy5fY29tcGxldGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9jb21wbGV0ZSA9IHRydWU7XG5cbiAgICB0aGlzLl9ldmVudHMucHVzaCh7XG4gICAgICBraW5kOiAnZXJyb3InLFxuICAgICAgZXJyb3I6IF9lcnJvclxuICAgIH0pO1xuXG4gICAgdGhpcy5fc2lua3MuZm9yRWFjaChmdW5jdGlvbiAoc2luaykge1xuICAgICAgcmV0dXJuIHNpbmsuZXJyb3IoX2Vycm9yKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubmV4dCA9IGZ1bmN0aW9uIG5leHQoZGF0YSkge1xuICAgIGlmICh0aGlzLl9jb21wbGV0ZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2V2ZW50cy5wdXNoKHtcbiAgICAgIGtpbmQ6ICduZXh0JyxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KTtcblxuICAgIHRoaXMuX3NpbmtzLmZvckVhY2goZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgIHJldHVybiBzaW5rLm5leHQoZGF0YSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbiA9IHRoaXMuX29ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uO1xuICB9O1xuXG4gIF9wcm90by51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuXG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0T2JzZXJ2ZXJDb3VudCA9IGZ1bmN0aW9uIGdldE9ic2VydmVyQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NpbmtzLnNpemU7XG4gIH07XG5cbiAgcmV0dXJuIFJlbGF5UmVwbGF5U3ViamVjdDtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheVJlcGxheVN1YmplY3Q7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vc3RvcmUvUmVsYXlTdG9yZVV0aWxzJyksXG4gICAgZ2V0TW9kdWxlQ29tcG9uZW50S2V5ID0gX3JlcXVpcmUuZ2V0TW9kdWxlQ29tcG9uZW50S2V5LFxuICAgIGdldE1vZHVsZU9wZXJhdGlvbktleSA9IF9yZXF1aXJlLmdldE1vZHVsZU9wZXJhdGlvbktleTtcblxuZnVuY3Rpb24gY3JlYXRlUGF5bG9hZEZvcjNERmllbGQobmFtZSwgb3BlcmF0aW9uLCBjb21wb25lbnQsIHJlc3BvbnNlKSB7XG4gIHZhciBkYXRhID0gKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIHJlc3BvbnNlKTtcbiAgZGF0YVtnZXRNb2R1bGVDb21wb25lbnRLZXkobmFtZSldID0gY29tcG9uZW50O1xuICBkYXRhW2dldE1vZHVsZU9wZXJhdGlvbktleShuYW1lKV0gPSBvcGVyYXRpb247XG4gIHJldHVybiBkYXRhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVBheWxvYWRGb3IzREZpZWxkOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBSZWN1cnNpdmVseSBcImRlZXBcIiBmcmVlemVzIHRoZSBzdXBwbGllZCBvYmplY3QuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCBhbmQgZm9yIGNvbnNpc3RlbmN5IHdpdGggdGhlIGJlaGF2aW9yIG9mIGBPYmplY3QuZnJlZXplYCxcbiAqIHJldHVybnMgdGhlIG5vdy1mcm96ZW4gb3JpZ2luYWwgb2JqZWN0LlxuICovXG5cbmZ1bmN0aW9uIGRlZXBGcmVlemUob2JqZWN0KSB7XG4gIE9iamVjdC5mcmVlemUob2JqZWN0KTtcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqZWN0KS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgdmFyIHByb3BlcnR5ID0gb2JqZWN0W25hbWVdO1xuXG4gICAgaWYgKHByb3BlcnR5ICYmIHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ29iamVjdCcgJiYgIU9iamVjdC5pc0Zyb3plbihwcm9wZXJ0eSkpIHtcbiAgICAgIGRlZXBGcmVlemUocHJvcGVydHkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVlcEZyZWV6ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGlkID0gMTAwMDAwO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUlEKCkge1xuICByZXR1cm4gaWQrKztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZW5lcmF0ZUlEOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlbGF5RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi9SZWxheUZlYXR1cmVGbGFncycpO1xuXG52YXIgaXNFbXB0eU9iamVjdCA9IHJlcXVpcmUoJy4vaXNFbXB0eU9iamVjdCcpO1xuXG52YXIgc3RhYmxlQ29weSA9IHJlcXVpcmUoJy4vc3RhYmxlQ29weScpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi9zdG9yZS9SZWxheU1vZGVyblNlbGVjdG9yJyksXG4gICAgZ2V0RGF0YUlEc0Zyb21GcmFnbWVudCA9IF9yZXF1aXJlLmdldERhdGFJRHNGcm9tRnJhZ21lbnQsXG4gICAgZ2V0VmFyaWFibGVzRnJvbUZyYWdtZW50ID0gX3JlcXVpcmUuZ2V0VmFyaWFibGVzRnJvbUZyYWdtZW50LFxuICAgIGdldFNlbGVjdG9yID0gX3JlcXVpcmUuZ2V0U2VsZWN0b3I7XG5cbmZ1bmN0aW9uIGdldEZyYWdtZW50SWRlbnRpZmllcihmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmKSB7XG4gIHZhciBzZWxlY3RvciA9IGdldFNlbGVjdG9yKGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWYpO1xuICB2YXIgZnJhZ21lbnRPd25lcklkZW50aWZpZXIgPSBzZWxlY3RvciA9PSBudWxsID8gJ251bGwnIDogc2VsZWN0b3Iua2luZCA9PT0gJ1Npbmd1bGFyUmVhZGVyU2VsZWN0b3InID8gc2VsZWN0b3Iub3duZXIuaWRlbnRpZmllciA6ICdbJyArIHNlbGVjdG9yLnNlbGVjdG9ycy5tYXAoZnVuY3Rpb24gKHNlbCkge1xuICAgIHJldHVybiBzZWwub3duZXIuaWRlbnRpZmllcjtcbiAgfSkuam9pbignLCcpICsgJ10nO1xuICB2YXIgZnJhZ21lbnRWYXJpYWJsZXMgPSBnZXRWYXJpYWJsZXNGcm9tRnJhZ21lbnQoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZik7XG4gIHZhciBkYXRhSURzID0gZ2V0RGF0YUlEc0Zyb21GcmFnbWVudChmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmKTtcblxuICBpZiAoUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX0dFVEZSQUdNRU5USURFTlRJRklFUl9PUFRJTUlaQVRJT04pIHtcbiAgICByZXR1cm4gZnJhZ21lbnRPd25lcklkZW50aWZpZXIgKyAnLycgKyBmcmFnbWVudE5vZGUubmFtZSArICcvJyArIChmcmFnbWVudFZhcmlhYmxlcyA9PSBudWxsIHx8IGlzRW1wdHlPYmplY3QoZnJhZ21lbnRWYXJpYWJsZXMpID8gJ3t9JyA6IEpTT04uc3RyaW5naWZ5KHN0YWJsZUNvcHkoZnJhZ21lbnRWYXJpYWJsZXMpKSkgKyAnLycgKyAodHlwZW9mIGRhdGFJRHMgPT09ICd1bmRlZmluZWQnID8gJ21pc3NpbmcnIDogZGF0YUlEcyA9PSBudWxsID8gJ251bGwnIDogQXJyYXkuaXNBcnJheShkYXRhSURzKSA/ICdbJyArIGRhdGFJRHMuam9pbignLCcpICsgJ10nIDogZGF0YUlEcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIF9KU09OJHN0cmluZ2lmeTtcblxuICAgIHJldHVybiBmcmFnbWVudE93bmVySWRlbnRpZmllciArICcvJyArIGZyYWdtZW50Tm9kZS5uYW1lICsgJy8nICsgSlNPTi5zdHJpbmdpZnkoc3RhYmxlQ29weShmcmFnbWVudFZhcmlhYmxlcykpICsgJy8nICsgKChfSlNPTiRzdHJpbmdpZnkgPSBKU09OLnN0cmluZ2lmeShkYXRhSURzKSkgIT09IG51bGwgJiYgX0pTT04kc3RyaW5naWZ5ICE9PSB2b2lkIDAgPyBfSlNPTiRzdHJpbmdpZnkgOiAnbWlzc2luZycpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RnJhZ21lbnRJZGVudGlmaWVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9SZWxheUNvbmNyZXRlTm9kZScpLFxuICAgIFJFUVVFU1QgPSBfcmVxdWlyZS5SRVFVRVNULFxuICAgIFNQTElUX09QRVJBVElPTiA9IF9yZXF1aXJlLlNQTElUX09QRVJBVElPTjtcblxuLyoqXG4gKiBPcGVyYXRpb25Mb2FkZXJzIGNhbiByZXR1cm4gZWl0aGVyIGEgTm9ybWFsaXphdGlvblNwbGl0T3BlcmF0aW9uIG9yXG4gKiBDb25jcmV0ZVJlcXVlc3QuXG4gKi9cbmZ1bmN0aW9uIGdldE9wZXJhdGlvbihub2RlKSB7XG4gIHN3aXRjaCAobm9kZS5raW5kKSB7XG4gICAgY2FzZSBSRVFVRVNUOlxuICAgICAgcmV0dXJuIG5vZGUub3BlcmF0aW9uO1xuXG4gICAgY2FzZSBTUExJVF9PUEVSQVRJT046XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBub2RlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0T3BlcmF0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vUmVsYXlEZWZhdWx0SGFuZGxlS2V5JyksXG4gICAgREVGQVVMVF9IQU5ETEVfS0VZID0gX3JlcXVpcmUuREVGQVVMVF9IQU5ETEVfS0VZO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBIZWxwZXIgdG8gY3JlYXRlIGEgdW5pcXVlIG5hbWUgZm9yIGEgaGFuZGxlIGZpZWxkIGJhc2VkIG9uIHRoZSBoYW5kbGUgbmFtZSwgaGFuZGxlIGtleSBhbmRcbiAqIHNvdXJjZSBmaWVsZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFJlbGF5SGFuZGxlS2V5KGhhbmRsZU5hbWUsIGtleSwgZmllbGROYW1lKSB7XG4gIGlmIChrZXkgJiYga2V5ICE9PSBERUZBVUxUX0hBTkRMRV9LRVkpIHtcbiAgICByZXR1cm4gXCJfX1wiLmNvbmNhdChrZXksIFwiX1wiKS5jb25jYXQoaGFuZGxlTmFtZSk7XG4gIH1cblxuICAhKGZpZWxkTmFtZSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2dldFJlbGF5SGFuZGxlS2V5OiBFeHBlY3RlZCBlaXRoZXIgYGZpZWxkTmFtZWAgb3IgYGtleWAgaW4gYGhhbmRsZWAgdG8gYmUgcHJvdmlkZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBcIl9fXCIuY29uY2F0KGZpZWxkTmFtZSwgXCJfXCIpLmNvbmNhdChoYW5kbGVOYW1lKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSZWxheUhhbmRsZUtleTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgc3RhYmxlQ29weSA9IHJlcXVpcmUoJy4vc3RhYmxlQ29weScpO1xuXG4vKipcbiAqIFJldHVybnMgYSBzdGFibGUgaWRlbnRpZmllciBmb3IgdGhlIGdpdmVuIHBhaXIgb2YgYFJlcXVlc3RQYXJhbWV0ZXJzYCArXG4gKiB2YXJpYWJsZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFJlcXVlc3RJZGVudGlmaWVyKHBhcmFtZXRlcnMsIHZhcmlhYmxlcykge1xuICB2YXIgcmVxdWVzdElEID0gcGFyYW1ldGVycy5jYWNoZUlEICE9IG51bGwgPyBwYXJhbWV0ZXJzLmNhY2hlSUQgOiBwYXJhbWV0ZXJzLmlkO1xuICAhKHJlcXVlc3RJRCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2dldFJlcXVlc3RJZGVudGlmaWVyOiBFeHBlY3RlZCByZXF1ZXN0IGAlc2AgdG8gaGF2ZSBlaXRoZXIgYSAnICsgJ3ZhbGlkIGBpZGAgb3IgYGNhY2hlSURgIHByb3BlcnR5JywgcGFyYW1ldGVycy5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByZXF1ZXN0SUQgKyBKU09OLnN0cmluZ2lmeShzdGFibGVDb3B5KHZhcmlhYmxlcykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJlcXVlc3RJZGVudGlmaWVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzRW1wdHlPYmplY3Qob2JqKSB7XG4gIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBfa2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRW1wdHlPYmplY3Q7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZShwKSB7XG4gIHJldHVybiAhIXAgJiYgdHlwZW9mIHAudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1Byb21pc2U7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG4vKipcbiAqIEEgZmFzdCB0ZXN0IHRvIGRldGVybWluZSBpZiB0d28gdmFsdWVzIGFyZSBlcXVhbCBzY2FsYXJzOlxuICogLSBjb21wYXJlcyBzY2FsYXJzIHN1Y2ggYXMgYm9vbGVhbnMsIHN0cmluZ3MsIG51bWJlcnMgYnkgdmFsdWVcbiAqIC0gY29tcGFyZXMgZnVuY3Rpb25zIGJ5IGlkZW50aXR5XG4gKiAtIHJldHVybnMgZmFsc2UgZm9yIGNvbXBsZXggdmFsdWVzLCBzaW5jZSB0aGVzZSBjYW5ub3QgYmUgY2hlYXBseSB0ZXN0ZWQgZm9yXG4gKiAgIGVxdWFsaXR5ICh1c2UgYGFyZUVxdWFsc2AgaW5zdGVhZClcbiAqL1xuXG5mdW5jdGlvbiBpc1NjYWxhckFuZEVxdWFsKHZhbHVlQSwgdmFsdWVCKSB7XG4gIHJldHVybiB2YWx1ZUEgPT09IHZhbHVlQiAmJiAodmFsdWVBID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZUEgIT09ICdvYmplY3QnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1NjYWxhckFuZEVxdWFsOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzV2Vha1NldERlZmluZWQgPSB0eXBlb2YgV2Vha1NldCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaGFzV2Vha01hcERlZmluZWQgPSB0eXBlb2YgV2Vha01hcCAhPT0gJ3VuZGVmaW5lZCc7XG4vKipcbiAqIFJlY3ljbGVzIHN1YnRyZWVzIGZyb20gYHByZXZEYXRhYCBieSByZXBsYWNpbmcgZXF1YWwgc3VidHJlZXMgaW4gYG5leHREYXRhYC5cbiAqL1xuXG5mdW5jdGlvbiByZWN5Y2xlTm9kZXNJbnRvKHByZXZEYXRhLCBuZXh0RGF0YSkge1xuICBpZiAocHJldkRhdGEgPT09IG5leHREYXRhIHx8IHR5cGVvZiBwcmV2RGF0YSAhPT0gJ29iamVjdCcgfHwgcHJldkRhdGEgaW5zdGFuY2VvZiBTZXQgfHwgcHJldkRhdGEgaW5zdGFuY2VvZiBNYXAgfHwgaGFzV2Vha1NldERlZmluZWQgJiYgcHJldkRhdGEgaW5zdGFuY2VvZiBXZWFrU2V0IHx8IGhhc1dlYWtNYXBEZWZpbmVkICYmIHByZXZEYXRhIGluc3RhbmNlb2YgV2Vha01hcCB8fCAhcHJldkRhdGEgfHwgdHlwZW9mIG5leHREYXRhICE9PSAnb2JqZWN0JyB8fCBuZXh0RGF0YSBpbnN0YW5jZW9mIFNldCB8fCBuZXh0RGF0YSBpbnN0YW5jZW9mIE1hcCB8fCBoYXNXZWFrU2V0RGVmaW5lZCAmJiBuZXh0RGF0YSBpbnN0YW5jZW9mIFdlYWtTZXQgfHwgaGFzV2Vha01hcERlZmluZWQgJiYgbmV4dERhdGEgaW5zdGFuY2VvZiBXZWFrTWFwIHx8ICFuZXh0RGF0YSkge1xuICAgIHJldHVybiBuZXh0RGF0YTtcbiAgfVxuXG4gIHZhciBjYW5SZWN5Y2xlID0gZmFsc2U7IC8vIEFzc2lnbiBsb2NhbCB2YXJpYWJsZXMgdG8gcHJlc2VydmUgRmxvdyB0eXBlIHJlZmluZW1lbnQuXG5cbiAgdmFyIHByZXZBcnJheSA9IEFycmF5LmlzQXJyYXkocHJldkRhdGEpID8gcHJldkRhdGEgOiBudWxsO1xuICB2YXIgbmV4dEFycmF5ID0gQXJyYXkuaXNBcnJheShuZXh0RGF0YSkgPyBuZXh0RGF0YSA6IG51bGw7XG5cbiAgaWYgKHByZXZBcnJheSAmJiBuZXh0QXJyYXkpIHtcbiAgICBjYW5SZWN5Y2xlID0gbmV4dEFycmF5LnJlZHVjZShmdW5jdGlvbiAod2FzRXF1YWwsIG5leHRJdGVtLCBpaSkge1xuICAgICAgdmFyIHByZXZWYWx1ZSA9IHByZXZBcnJheVtpaV07XG4gICAgICB2YXIgbmV4dFZhbHVlID0gcmVjeWNsZU5vZGVzSW50byhwcmV2VmFsdWUsIG5leHRJdGVtKTtcblxuICAgICAgaWYgKG5leHRWYWx1ZSAhPT0gbmV4dEFycmF5W2lpXSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgaWYgKCFPYmplY3QuaXNGcm96ZW4obmV4dEFycmF5KSkge1xuICAgICAgICAgICAgbmV4dEFycmF5W2lpXSA9IG5leHRWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dEFycmF5W2lpXSA9IG5leHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gd2FzRXF1YWwgJiYgbmV4dFZhbHVlID09PSBwcmV2QXJyYXlbaWldO1xuICAgIH0sIHRydWUpICYmIHByZXZBcnJheS5sZW5ndGggPT09IG5leHRBcnJheS5sZW5ndGg7XG4gIH0gZWxzZSBpZiAoIXByZXZBcnJheSAmJiAhbmV4dEFycmF5KSB7XG4gICAgLy8gQXNzaWduIGxvY2FsIHZhcmlhYmxlcyB0byBwcmVzZXJ2ZSBGbG93IHR5cGUgcmVmaW5lbWVudC5cbiAgICB2YXIgcHJldk9iamVjdCA9IHByZXZEYXRhO1xuICAgIHZhciBuZXh0T2JqZWN0ID0gbmV4dERhdGE7XG4gICAgdmFyIHByZXZLZXlzID0gT2JqZWN0LmtleXMocHJldk9iamVjdCk7XG4gICAgdmFyIG5leHRLZXlzID0gT2JqZWN0LmtleXMobmV4dE9iamVjdCk7XG4gICAgY2FuUmVjeWNsZSA9IG5leHRLZXlzLnJlZHVjZShmdW5jdGlvbiAod2FzRXF1YWwsIGtleSkge1xuICAgICAgdmFyIHByZXZWYWx1ZSA9IHByZXZPYmplY3Rba2V5XTtcbiAgICAgIHZhciBuZXh0VmFsdWUgPSByZWN5Y2xlTm9kZXNJbnRvKHByZXZWYWx1ZSwgbmV4dE9iamVjdFtrZXldKTtcblxuICAgICAgaWYgKG5leHRWYWx1ZSAhPT0gbmV4dE9iamVjdFtrZXldKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICBpZiAoIU9iamVjdC5pc0Zyb3plbihuZXh0T2JqZWN0KSkge1xuICAgICAgICAgICAgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG4gICAgICAgICAgICBuZXh0T2JqZWN0W2tleV0gPSBuZXh0VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuICAgICAgICAgIG5leHRPYmplY3Rba2V5XSA9IG5leHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gd2FzRXF1YWwgJiYgbmV4dFZhbHVlID09PSBwcmV2T2JqZWN0W2tleV07XG4gICAgfSwgdHJ1ZSkgJiYgcHJldktleXMubGVuZ3RoID09PSBuZXh0S2V5cy5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gY2FuUmVjeWNsZSA/IHByZXZEYXRhIDogbmV4dERhdGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVjeWNsZU5vZGVzSW50bzsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiByZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHMoZW52aXJvbm1lbnQsIG1pc3NpbmdSZXF1aXJlZEZpZWxkcykge1xuICBzd2l0Y2ggKG1pc3NpbmdSZXF1aXJlZEZpZWxkcy5hY3Rpb24pIHtcbiAgICBjYXNlICdUSFJPVyc6XG4gICAgICB7XG4gICAgICAgIHZhciBfbWlzc2luZ1JlcXVpcmVkRmllbGQgPSBtaXNzaW5nUmVxdWlyZWRGaWVsZHMuZmllbGQsXG4gICAgICAgICAgICBwYXRoID0gX21pc3NpbmdSZXF1aXJlZEZpZWxkLnBhdGgsXG4gICAgICAgICAgICBvd25lciA9IF9taXNzaW5nUmVxdWlyZWRGaWVsZC5vd25lcjsgLy8gVGhpcyBnaXZlcyB0aGUgY29uc3VtZXIgdGhlIGNoYW5jZSB0byB0aHJvdyB0aGVpciBvd24gZXJyb3IgaWYgdGhleSBzbyB3aXNoLlxuXG4gICAgICAgIGVudmlyb25tZW50LnJlcXVpcmVkRmllbGRMb2dnZXIoe1xuICAgICAgICAgIGtpbmQ6ICdtaXNzaW5nX2ZpZWxkLnRocm93JyxcbiAgICAgICAgICBvd25lcjogb3duZXIsXG4gICAgICAgICAgZmllbGRQYXRoOiBwYXRoXG4gICAgICAgIH0pO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWxheTogTWlzc2luZyBAcmVxdWlyZWQgdmFsdWUgYXQgcGF0aCAnXCIuY29uY2F0KHBhdGgsIFwiJyBpbiAnXCIpLmNvbmNhdChvd25lciwgXCInLlwiKSk7XG4gICAgICB9XG5cbiAgICBjYXNlICdMT0cnOlxuICAgICAgbWlzc2luZ1JlcXVpcmVkRmllbGRzLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBwYXRoID0gX3JlZi5wYXRoLFxuICAgICAgICAgICAgb3duZXIgPSBfcmVmLm93bmVyO1xuICAgICAgICBlbnZpcm9ubWVudC5yZXF1aXJlZEZpZWxkTG9nZ2VyKHtcbiAgICAgICAgICBraW5kOiAnbWlzc2luZ19maWVsZC5sb2cnLFxuICAgICAgICAgIG93bmVyOiBvd25lcixcbiAgICAgICAgICBmaWVsZFBhdGg6IHBhdGhcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgbWlzc2luZ1JlcXVpcmVkRmllbGRzLmFjdGlvbjtcbiAgICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcG9ydE1pc3NpbmdSZXF1aXJlZEZpZWxkczsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIHJlc29sdmVkUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuLyoqXG4gKiBBbiBhbHRlcm5hdGl2ZSB0byBzZXRJbW1lZGlhdGUgYmFzZWQgb24gUHJvbWlzZS5cbiAqL1xuXG5mdW5jdGlvbiByZXNvbHZlSW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gIHJlc29sdmVkUHJvbWlzZS50aGVuKGNhbGxiYWNrKVtcImNhdGNoXCJdKHRocm93TmV4dCk7XG59XG5cbmZ1bmN0aW9uIHRocm93TmV4dChlcnJvcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSwgMCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzb2x2ZUltbWVkaWF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0Jztcbi8qKlxuICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhlIHByb3ZpZGVkIHZhbHVlLCBlbnN1cmluZyBhbnkgbmVzdGVkIG9iamVjdHMgaGF2ZSB0aGVpclxuICoga2V5cyBzb3J0ZWQgc3VjaCB0aGF0IGVxdWl2YWxlbnQgdmFsdWVzIHdvdWxkIGhhdmUgaWRlbnRpY2FsIEpTT04uc3RyaW5naWZ5XG4gKiByZXN1bHRzLlxuICovXG5cbmZ1bmN0aW9uIHN0YWJsZUNvcHkodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLm1hcChzdGFibGVDb3B5KTtcbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpLnNvcnQoKTtcbiAgdmFyIHN0YWJsZSA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHN0YWJsZVtrZXlzW2ldXSA9IHN0YWJsZUNvcHkodmFsdWVba2V5c1tpXV0pO1xuICB9XG5cbiAgcmV0dXJuIHN0YWJsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFibGVDb3B5OyIsImZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlMaWtlVG9BcnJheTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJ2YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIik7XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRob3V0SG9sZXM7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwidmFyIHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIik7XG5cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7XG4gIHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdO1xuXG4gIGlmICghaXQpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGlmIChpdCkgbyA9IGl0O1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgczogRixcbiAgICAgICAgbjogZnVuY3Rpb24gbigpIHtcbiAgICAgICAgICBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBvW2krK11cbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBlOiBmdW5jdGlvbiBlKF9lKSB7XG4gICAgICAgICAgdGhyb3cgX2U7XG4gICAgICAgIH0sXG4gICAgICAgIGY6IEZcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xuICB9XG5cbiAgdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLFxuICAgICAgZGlkRXJyID0gZmFsc2UsXG4gICAgICBlcnI7XG4gIHJldHVybiB7XG4gICAgczogZnVuY3Rpb24gcygpIHtcbiAgICAgIGl0ID0gaXQuY2FsbChvKTtcbiAgICB9LFxuICAgIG46IGZ1bmN0aW9uIG4oKSB7XG4gICAgICB2YXIgc3RlcCA9IGl0Lm5leHQoKTtcbiAgICAgIG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7XG4gICAgICByZXR1cm4gc3RlcDtcbiAgICB9LFxuICAgIGU6IGZ1bmN0aW9uIGUoX2UyKSB7XG4gICAgICBkaWRFcnIgPSB0cnVlO1xuICAgICAgZXJyID0gX2UyO1xuICAgIH0sXG4gICAgZjogZnVuY3Rpb24gZigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFtcInJldHVyblwiXSAhPSBudWxsKSBpdFtcInJldHVyblwiXSgpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGRpZEVycikgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVNwcmVhZDtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi9kZWZpbmVQcm9wZXJ0eS5qc1wiKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuXG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSB7XG4gICAgICBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RTcHJlYWQyO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzLmpzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5LmpzXCIpO1xuXG52YXIgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiKTtcblxudmFyIG5vbkl0ZXJhYmxlU3ByZWFkID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVTcHJlYWQuanNcIik7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJ2YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIik7XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5O1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4yMC4yXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX1cbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciB0PW51bGwsdT1udWxsLHc9ZnVuY3Rpb24oKXtpZihudWxsIT09dCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0KCEwLGEpO3Q9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHcsMCksYjt9fTtmPWZ1bmN0aW9uKGEpe251bGwhPT10P3NldFRpbWVvdXQoZiwwLGEpOih0PWEsc2V0VGltZW91dCh3LDApKX07Zz1mdW5jdGlvbihhLGIpe3U9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2s9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgeD13aW5kb3cuc2V0VGltZW91dCx5PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgej1cbndpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB6JiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKX12YXIgQT0hMSxCPW51bGwsQz0tMSxEPTUsRT0wO2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49XG5FfTtrPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpEPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgRj1uZXcgTWVzc2FnZUNoYW5uZWwsRz1GLnBvcnQyO0YucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7aWYobnVsbCE9PUIpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7RT1hK0Q7dHJ5e0IoITAsYSk/Ry5wb3N0TWVzc2FnZShudWxsKTooQT0hMSxCPW51bGwpfWNhdGNoKGIpe3Rocm93IEcucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQT0hMX07Zj1mdW5jdGlvbihhKXtCPWE7QXx8KEE9ITAsRy5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtDPVxueChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eShDKTtDPS0xfX1mdW5jdGlvbiBIKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEkoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEooYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIEsoYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SShuLGMpKXZvaWQgMCE9PXImJjA+SShyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SShyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSShhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTD1bXSxNPVtdLE49MSxPPW51bGwsUD0zLFE9ITEsUj0hMSxTPSExO1xuZnVuY3Rpb24gVChhKXtmb3IodmFyIGI9SihNKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKUsoTSk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlLKE0pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSChMLGIpO2Vsc2UgYnJlYWs7Yj1KKE0pfX1mdW5jdGlvbiBVKGEpe1M9ITE7VChhKTtpZighUilpZihudWxsIT09SihMKSlSPSEwLGYoVik7ZWxzZXt2YXIgYj1KKE0pO251bGwhPT1iJiZnKFUsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gVihhLGIpe1I9ITE7UyYmKFM9ITEsaCgpKTtRPSEwO3ZhciBjPVA7dHJ5e1QoYik7Zm9yKE89SihMKTtudWxsIT09TyYmKCEoTy5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQoKSk7KXt2YXIgZD1PLmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXtPLmNhbGxiYWNrPW51bGw7UD1PLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChPLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/Ty5jYWxsYmFjaz1lOk89PT1KKEwpJiZLKEwpO1QoYil9ZWxzZSBLKEwpO089SihMKX1pZihudWxsIT09Tyl2YXIgbT0hMDtlbHNle3ZhciBuPUooTSk7bnVsbCE9PW4mJmcoVSxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7Tz1udWxsLFA9YyxRPSExfX12YXIgVz1rO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1J8fFF8fChSPSEwLGYoVikpfTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gSihMKX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1XO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6TisrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsSChNLGEpLG51bGw9PT1KKEwpJiZhPT09SihNKSYmKFM/aCgpOlM9ITAsZyhVLGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxIKEwsYSksUnx8UXx8KFI9ITAsZihWKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQge1xuICBFbnZpcm9ubWVudCwgTmV0d29yaywgUmVjb3JkU291cmNlLCBTdG9yZSxcbn0gZnJvbSAncmVsYXktcnVudGltZSc7XG5cbmNvbnN0IGZldGNoR3JhcGhRTCA9IGFzeW5jIChxdWVyeTogYW55LCB2YXJpYWJsZXM6IGFueSkgPT4ge1xuICBjb25zdCBTRVJWRVJfRU5EX1BPSU5UID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9ncmFwaHFsJztcblxuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goU0VSVkVSX0VORF9QT0lOVCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgcXVlcnksIHZhcmlhYmxlcyB9KSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS53YXJuKGVycik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmNvbnN0IGZldGNoUmVsYXkgPSAocGFyYW1zOiBhbnksIHZhcmlhYmxlczogYW55KSA9PiBmZXRjaEdyYXBoUUwocGFyYW1zLnRleHQsIHZhcmlhYmxlcyk7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBFbnZpcm9ubWVudCh7XG4gIG5ldHdvcms6IE5ldHdvcmsuY3JlYXRlKGZldGNoUmVsYXkpLFxuICBzdG9yZTogbmV3IFN0b3JlKG5ldyBSZWNvcmRTb3VyY2UoKSksXG59KTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW52YXJpYW50O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIHBhdGgudG9Mb3dlckNhc2UoKS5pbmRleE9mKHByZWZpeC50b0xvd2VyQ2FzZSgpKSA9PT0gMCAmJiAnLz8jJy5pbmRleE9mKHBhdGguY2hhckF0KHByZWZpeC5sZW5ndGgpKSAhPT0gLTE7XG59XG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuXG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG5cbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbjtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKSA6IHZvaWQgMDtcbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJykgOiB2b2lkIDA7XG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5mdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cblxuZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZm9yY2VSZWZyZXNoID0gX3Byb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQkMSA9ICdoYXNoY2hhbmdlJztcbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG5mdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XG4gIHZhciBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpICsgJyMnICsgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IF9wcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB2b2lkIDAgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsJCQxKGEsIGIpIHtcbiAgICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2g7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbCQkMShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH0gLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG5cblxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHZhciBiYXNlVGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgIHZhciBocmVmID0gJyc7XG5cbiAgICBpZiAoYmFzZVRhZyAmJiBiYXNlVGFnLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB7XG4gICAgICBocmVmID0gc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHJlZiArICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKSA6IHZvaWQgMDtcbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKSA6IHZvaWQgMDtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gX3Byb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHZvaWQgMCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IF9wcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG5cbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5leHBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgcGFyc2VQYXRoLCBjcmVhdGVQYXRoIH07XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB7fTtcblxuZnVuY3Rpb24gZ2V0VW5pcXVlSWQoKSB7XG4gIHZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuICByZXR1cm4gY29tbW9uanNHbG9iYWxba2V5XSA9IChjb21tb25qc0dsb2JhbFtrZXldIHx8IDApICsgMTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ2V0VW5pcXVlSWQoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgaGlzdG9yeUNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyLUhpc3RvcnlcIik7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCQxID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBjb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dCQxKFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCh0aGlzLnN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5zdGF0aWNDb250ZXh0XG4gICAgICB9XG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhpc3RvcnlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWV0aG9kID0gY29udGV4dC5oaXN0b3J5LmJsb2NrO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0LnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG5cbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICAgIGtleTogcHJldkxvY2F0aW9uLmtleVxuICAgICAgICB9KSkpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG86IHRvXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIGNhY2hlTGltaXQkMSA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQkMSA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoJDEocGF0aCwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgcGF0aENhY2hlID0gY2FjaGUkMVtjYWNoZUtleV0gfHwgKGNhY2hlJDFbY2FjaGVLZXldID0ge30pO1xuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIGtleXM6IGtleXNcbiAgfTtcblxuICBpZiAoY2FjaGVDb3VudCQxIDwgY2FjaGVMaW1pdCQxKSB7XG4gICAgcGF0aENhY2hlW3BhdGhdID0gcmVzdWx0O1xuICAgIGNhY2hlQ291bnQkMSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoLlxuICovXG5cblxuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiBvcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG4gIHZhciBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcbiAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgcGF0aCkge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICB2YXIgdmFsdWUgPSBjaGlsZHJlbihwcm9wcyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFsdWUgIT09IHVuZGVmaW5lZCwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzXG4gICAgICB9LCBwcm9wcy5tYXRjaCA/IGNoaWxkcmVuID8gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IGNoaWxkcmVuIDogY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgcGF0aCkgOiBtYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgaGlzdG9yeUNvbnRleHQgYXMgX19IaXN0b3J5Q29udGV4dCwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIHJlc29sdmVUb0xvY2F0aW9uID0gZnVuY3Rpb24gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcImZ1bmN0aW9uXCIgPyB0byhjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xudmFyIG5vcm1hbGl6ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xuXG52YXIgZm9yd2FyZFJlZlNoaW0gPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiA9IGZvcndhcmRSZWZTaGltO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG52YXIgTGlua0FuY2hvciA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgbmF2aWdhdGUgPSBfcmVmLm5hdmlnYXRlLFxuICAgICAgX29uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaW5uZXJSZWZcIiwgXCJuYXZpZ2F0ZVwiLCBcIm9uQ2xpY2tcIl0pO1xuXG4gIHZhciB0YXJnZXQgPSByZXN0LnRhcmdldDtcblxuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfb25DbGljaykgX29uQ2xpY2soZXZlbnQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhyb3cgZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBuYXZpZ2F0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gIH0gZWxzZSB7XG4gICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gIH1cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudCAqL1xuXG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmtBbmNob3IuZGlzcGxheU5hbWUgPSBcIkxpbmtBbmNob3JcIjtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmMiRjb21wb25lbnQgPSBfcmVmMi5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcmVmMiRjb21wb25lbnQgPT09IHZvaWQgMCA/IExpbmtBbmNob3IgOiBfcmVmMiRjb21wb25lbnQsXG4gICAgICByZXBsYWNlID0gX3JlZjIucmVwbGFjZSxcbiAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYyLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjb21wb25lbnRcIiwgXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeTtcbiAgICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKSwgY29udGV4dC5sb2NhdGlvbik7XG4gICAgdmFyIGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBuYXZpZ2F0ZTogZnVuY3Rpb24gbmF2aWdhdGUoKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHJlcGxhY2UgPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9XG4gICAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgdG9UeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKTtcbiAgdmFyIHJlZlR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuYW55XG4gIH0pXSk7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbiAgTGluay5wcm9wVHlwZXMgPSB7XG4gICAgaW5uZXJSZWY6IHJlZlR5cGUsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiB0b1R5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgZm9yd2FyZFJlZlNoaW0kMSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiQxID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmJDEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiQxID0gZm9yd2FyZFJlZlNoaW0kMTtcbn1cblxuZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc25hbWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGNsYXNzbmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaTtcbiAgfSkuam9pbihcIiBcIik7XG59XG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5cblxudmFyIE5hdkxpbmsgPSBmb3J3YXJkUmVmJDEoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZiRhcmlhQ3VycmVudCA9IF9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWYkYXJpYUN1cnJlbnQgPT09IHZvaWQgMCA/IFwicGFnZVwiIDogX3JlZiRhcmlhQ3VycmVudCxcbiAgICAgIF9yZWYkYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9PT0gdm9pZCAwID8gXCJhY3RpdmVcIiA6IF9yZWYkYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgaXNBY3RpdmVQcm9wID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGxvY2F0aW9uUHJvcCA9IF9yZWYubG9jYXRpb24sXG4gICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgc3R5bGVQcm9wID0gX3JlZi5zdHlsZSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImV4YWN0XCIsIFwiaXNBY3RpdmVcIiwgXCJsb2NhdGlvblwiLCBcInNlbnNpdGl2ZVwiLCBcInN0cmljdFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZVByb3AsIGFjdGl2ZUNsYXNzTmFtZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlUHJvcCwge30sIGFjdGl2ZVN0eWxlKSA6IHN0eWxlUHJvcDtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGwsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRvOiB0b0xvY2F0aW9uXG4gICAgfSwgcmVzdCk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0kMSAhPT0gZm9yd2FyZFJlZiQxKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKTtcbiAgTmF2TGluay5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgTGluay5wcm9wVHlwZXMsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFR5cGUsXG4gICAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICB9KTtcbn1cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLWRvbS5qcy5tYXBcbiIsImV4cG9ydCBjb25zdCBBUFBfRE9NQUlOID0gcHJvY2Vzcy5lbnYuQVBQX0RPTUFJTiB8fCAnaHR0cHM6Ly9neWltMTIzMC5naXRodWIuaW8vdGVzdGNpY2QvJztcblxuLy8gVE9ETzogUmVtb3ZlXG5leHBvcnQgZGVmYXVsdCBBUFBfRE9NQUlOO1xuIiwiaW1wb3J0IFJlYWN0LCB7IE1vdXNlRXZlbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEFQUF9ET01BSU4gfSBmcm9tICcuLi8uLi9jb25zdGFudHMvZG9tYWluJztcblxuY29uc3QgR2l0SHViT0F1dGhBbmNob3I6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCBDTElFTlRfSUQgPSBwcm9jZXNzLmVudi5HSVRIVUJfT0FVVEhfQ0xJRU5UX0lEO1xuICBjb25zdCBPQVVUSF9SRURJUkVDVF9VUkwgPSBgJHtBUFBfRE9NQUlOfS9vYXV0aGA7XG4gIGNvbnN0IE9BVVRIX0xPR0lOX1VSTCA9IGBodHRwczovL2dpdGh1Yi5jb20vbG9naW4vb2F1dGgvYXV0aG9yaXplP2NsaWVudF9pZD0ke0NMSUVOVF9JRH0mcmVkaXJlY3RfdXJpPSR7T0FVVEhfUkVESVJFQ1RfVVJMfWA7XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2tMb2dpbiA9IChlOiBNb3VzZUV2ZW50PEhUTUxBbmNob3JFbGVtZW50PikgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIHdpbmRvdy5vcGVuKE9BVVRIX0xPR0lOX1VSTCk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8YSBocmVmPXtPQVVUSF9MT0dJTl9VUkx9IG9uQ2xpY2s9e2hhbmRsZUNsaWNrTG9naW59PkxvZ2luPC9hPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgR2l0SHViT0F1dGhBbmNob3I7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgR2l0SHViT0F1dGhBbmNob3IgZnJvbSAnLi4vY29tcG9uZW50cy9Mb2dpbi9HaXRIdWJPQXV0aEFuY2hvcic7XG5cbmltcG9ydCBBUFBfRE9NQUlOIGZyb20gJy4uL2NvbnN0YW50cy9kb21haW4nO1xuXG5jb25zdCBMb2dpblBhZ2U6IFJlYWN0LkZDID0gKCkgPT4ge1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZVBvc3RNZXNzYWdlID0gKGV2ZW50OiBNZXNzYWdlRXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5vcmlnaW4gIT09IEFQUF9ET01BSU4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGFjY2Vzc1Rva2VuIH0gPSBldmVudC5kYXRhO1xuXG4gICAgICBpZiAoYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2FjY2Vzc1Rva2VuJywgYWNjZXNzVG9rZW4pO1xuICAgICAgfVxuXG4gICAgICAvLyBUb2RvOiDstpTtm4Qg65SU7J6Q7J24IOyZhOujjOuQmOuptCDsl6zquLDshJwg7LaU6rCA7KCB7J24IOyymOumrFxuICAgIH07XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGhhbmRsZVBvc3RNZXNzYWdlLCBmYWxzZSk7XG4gICAgcmV0dXJuICgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgaGFuZGxlUG9zdE1lc3NhZ2UsIGZhbHNlKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiA8R2l0SHViT0F1dGhBbmNob3IgLz47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2dpblBhZ2U7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUXVlcnlSZW5kZXJlciwgZ3JhcGhxbCB9IGZyb20gJ3JlYWN0LXJlbGF5JztcbmltcG9ydCB7IHVzZUxvY2F0aW9uIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmltcG9ydCBFbnZpcm9ubWVudCBmcm9tICcuLi9ncmFwaHFsJztcbmltcG9ydCB7IExvZ2luQ2FsbGJhY2tQYWdlUXVlcnkgfSBmcm9tICcuLi9fX2dlbmVyYXRlZF9fL0xvZ2luQ2FsbGJhY2tQYWdlUXVlcnkuZ3JhcGhxbCc7XG5cbmltcG9ydCBBUFBfRE9NQUlOIGZyb20gJy4uL2NvbnN0YW50cy9kb21haW4nO1xuXG5jb25zdCBMb2dpbkNhbGxiYWNrUGFnZTogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IHsgc2VhcmNoIH0gPSB1c2VMb2NhdGlvbigpO1xuXG4gIGNvbnN0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKTtcbiAgY29uc3QgY29kZSA9IHNlYXJjaFBhcmFtcy5nZXQoJ2NvZGUnKSB8fCAnJztcblxuICByZXR1cm4gKFxuICAgIDxRdWVyeVJlbmRlcmVyPExvZ2luQ2FsbGJhY2tQYWdlUXVlcnk+XG4gICAgICBlbnZpcm9ubWVudD17RW52aXJvbm1lbnR9XG4gICAgICBxdWVyeT17Z3JhcGhxbGBcbiAgICAgICAgbXV0YXRpb24gTG9naW5DYWxsYmFja1BhZ2VRdWVyeSgkY29kZTogU3RyaW5nISkge1xuICAgICAgICAgIGxvZ2luKGNvZGU6ICRjb2RlKSB7XG4gICAgICAgICAgICBhY2Nlc3NUb2tlblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYH1cbiAgICAgIHZhcmlhYmxlcz17eyBjb2RlIH19XG4gICAgICByZW5kZXI9eyh7IGVycm9yLCBwcm9wcyB9KSA9PiB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiAn66Gc6re47J247JeQIOyLpO2MqO2WiOyKteuLiOuLpC4nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwcm9wcykge1xuICAgICAgICAgIHJldHVybiAn66Gc6re47J247J2EIO2VmOuKlCDspJHsnoXri4jri6QuLi4nO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBhY2Nlc3NUb2tlbiB9ID0gcHJvcHMubG9naW47XG5cbiAgICAgICAgcmV0dXJuIDxMb2dpblJlc3VsdCBhY2Nlc3NUb2tlbj17YWNjZXNzVG9rZW59IC8+O1xuICAgICAgfX1cbiAgICAvPlxuICApO1xufTtcblxuY29uc3QgTG9naW5SZXN1bHQ6IFJlYWN0LkZDPHsgYWNjZXNzVG9rZW46IHN0cmluZyB8IG51bGwgfT4gPSAoeyBhY2Nlc3NUb2tlbiB9KSA9PiB7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2luZG93Lm9wZW5lcj8ucG9zdE1lc3NhZ2UoeyBhY2Nlc3NUb2tlbiB9LCBBUFBfRE9NQUlOKTtcbiAgICB3aW5kb3cuY2xvc2UoKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTG9naW5DYWxsYmFja1BhZ2U7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlRnJhZ21lbnRDb250YWluZXIsIGdyYXBocWwgfSBmcm9tICdyZWFjdC1yZWxheSc7XG5cbmltcG9ydCB7IFF1ZXN0aW9uX3F1ZXN0aW9uIH0gZnJvbSAnX19nZW5lcmF0ZWRfXy9RdWVzdGlvbl9xdWVzdGlvbi5ncmFwaHFsJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcXVlc3Rpb246IFF1ZXN0aW9uX3F1ZXN0aW9uXG59XG5cbmNvbnN0IFF1ZXN0aW9uOiBSZWFjdC5GQzxQcm9wcz4gPSAoeyBxdWVzdGlvbiB9KSA9PiAoXG4gIDxzZWN0aW9uPlxuICAgIDxoMj5cbiAgICAgIOusuOygnCAjXG4gICAgICB7cXVlc3Rpb24uaWR9XG4gICAgPC9oMj5cbiAgICA8cD5cbiAgICAgIOygnOuqqTpcbiAgICAgIHtxdWVzdGlvbi50aXRsZX1cbiAgICA8L3A+XG4gICAgPHA+XG4gICAgICDrgrTsmqk6XG4gICAgICB7cXVlc3Rpb24uY29udGVudH1cbiAgICA8L3A+XG4gIDwvc2VjdGlvbj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyKFF1ZXN0aW9uLCB7XG4gIHF1ZXN0aW9uOiBncmFwaHFsYFxuICAgIGZyYWdtZW50IFF1ZXN0aW9uX3F1ZXN0aW9uIG9uIFF1ZXN0aW9ue1xuICAgICAgaWRcbiAgICAgIHRpdGxlXG4gICAgICBjb250ZW50XG4gICAgfVxuICBgLFxufSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUXVlcnlSZW5kZXJlciwgZ3JhcGhxbCB9IGZyb20gJ3JlYWN0LXJlbGF5JztcblxuaW1wb3J0IEVudmlyb25tZW50IGZyb20gJy4uL2dyYXBocWwnO1xuaW1wb3J0IHsgRXhhbXBsZVBhZ2VRdWVyeSB9IGZyb20gJy4uL19fZ2VuZXJhdGVkX18vRXhhbXBsZVBhZ2VRdWVyeS5ncmFwaHFsJztcblxuaW1wb3J0IFF1ZXN0aW9uIGZyb20gJy4uL2NvbXBvbmVudHMvRXhhbXBsZS9RdWVzdGlvbic7XG5cbmltcG9ydCB3aXRoRXhhbXBsZSBmcm9tICcuLi9ob2NzL3dpdGhFeGFtcGxlJztcblxuY29uc3QgRXhhbXBsZVBhZ2U6IFJlYWN0LkZDID0gKCkgPT4gKFxuICA8UXVlcnlSZW5kZXJlcjxFeGFtcGxlUGFnZVF1ZXJ5PlxuICAgIGVudmlyb25tZW50PXtFbnZpcm9ubWVudH1cbiAgICBxdWVyeT17Z3JhcGhxbGBcbiAgICAgIHF1ZXJ5IEV4YW1wbGVQYWdlUXVlcnkge1xuICAgICAgICBhbGxRdWVzdGlvbnMge1xuICAgICAgICAgIGlkXG4gICAgICAgICAgLi4uUXVlc3Rpb25fcXVlc3Rpb25cbiAgICAgICAgfVxuICAgICAgfVxuICAgIGB9XG4gICAgdmFyaWFibGVzPXt7fX1cbiAgICByZW5kZXI9eyh7IGVycm9yLCBwcm9wcyB9KSA9PiB7XG4gICAgICBpZiAoIXByb3BzKSB7XG4gICAgICAgIHJldHVybiA8ZGl2Pi4uLuuhnOuUqeykkTwvZGl2PjtcbiAgICAgIH1cblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiA8ZGl2Pi4uLuyXkOufrOuwnOyDnTwvZGl2PjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICB7cHJvcHMuYWxsUXVlc3Rpb25zLm1hcCgocXVlc3Rpb24pID0+IDxRdWVzdGlvbiBxdWVzdGlvbj17cXVlc3Rpb259IC8+KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH19XG4gIC8+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoRXhhbXBsZShFeGFtcGxlUGFnZSk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50VHlwZSB9IGZyb20gJ3JlYWN0JztcblxuY29uc3Qgd2l0aEV4YW1wbGUgPSAoQ29tcDogQ29tcG9uZW50VHlwZSkgPT4ge1xuICBjb25zdCBXaXRoRXhhbXBsZSA9ICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnZXhhbXBsZSBIT0MgY2FsbGVkJyk7XG5cbiAgICByZXR1cm4gPENvbXAgLz47XG4gIH07XG5cbiAgcmV0dXJuIFdpdGhFeGFtcGxlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aEV4YW1wbGU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgQnJvd3NlclJvdXRlciwgU3dpdGNoLCBSb3V0ZSxcbn0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmltcG9ydCBMb2dpblBhZ2UgZnJvbSAnLi9wYWdlL0xvZ2luUGFnZSc7XG5pbXBvcnQgTG9naW5DYWxsYmFja1BhZ2UgZnJvbSAnLi9wYWdlL0xvZ2luQ2FsbGJhY2tQYWdlJztcbmltcG9ydCBFeGFtcGxlUGFnZSBmcm9tICcuL3BhZ2UvRXhhbXBsZVBhZ2UnO1xuXG5jb25zdCBBcHA6IFJlYWN0LkZDID0gKCkgPT4gKFxuICA8QnJvd3NlclJvdXRlcj5cbiAgICA8U3dpdGNoPlxuICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCIgY29tcG9uZW50PXtFeGFtcGxlUGFnZX0gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPVwiL2xvZ2luXCIgY29tcG9uZW50PXtMb2dpblBhZ2V9IC8+XG4gICAgICA8Um91dGUgcGF0aD1cIi9vYXV0aFwiIGNvbXBvbmVudD17TG9naW5DYWxsYmFja1BhZ2V9IC8+XG4gICAgPC9Td2l0Y2g+XG4gIDwvQnJvd3NlclJvdXRlcj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IFJlbGF5RW52aXJvbm1lbnRQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlbGF5JztcblxuaW1wb3J0IEVudmlyb25tZW50IGZyb20gJy4vZ3JhcGhxbCc7XG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJztcblxuY29uc3Qgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcm9vdCcpO1xuXG5SZWFjdERPTS5yZW5kZXIoXG4gIDxSZWxheUVudmlyb25tZW50UHJvdmlkZXIgZW52aXJvbm1lbnQ9e0Vudmlyb25tZW50fT5cbiAgICA8QXBwIC8+XG4gIDwvUmVsYXlFbnZpcm9ubWVudFByb3ZpZGVyPixcbiAgcm9vdEVsZW1lbnQsXG4pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==