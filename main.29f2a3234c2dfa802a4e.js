/*! For license information please see main.29f2a3234c2dfa802a4e.js.LICENSE.txt */
(()=>{var e={5128:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const r={fragment:{argumentDefinitions:a=[{defaultValue:null,kind:"LocalArgument",name:"userId"}],kind:"Fragment",metadata:null,name:"BookmarksPageQuery",selections:[{alias:null,args:i=[{kind:"Variable",name:"userId",variableName:"userId"}],concreteType:"Bookmark",kind:"LinkedField",name:"bookmarks",plural:!0,selections:[o={alias:null,args:null,kind:"ScalarField",name:"id",storageKey:null},{alias:null,args:null,concreteType:"Question",kind:"LinkedField",name:"question",plural:!1,selections:[l={alias:null,args:null,kind:"ScalarField",name:"content",storageKey:null}],storageKey:null}],storageKey:null}],type:"Query",abstractKey:null},kind:"Request",operation:{argumentDefinitions:a,kind:"Operation",name:"BookmarksPageQuery",selections:[{alias:null,args:i,concreteType:"Bookmark",kind:"LinkedField",name:"bookmarks",plural:!0,selections:[o,{alias:null,args:null,concreteType:"Question",kind:"LinkedField",name:"question",plural:!1,selections:[l,o],storageKey:null}],storageKey:null}]},params:{cacheID:"3ea8f4b9cadab8e4957f67ffbbfb1331",id:null,metadata:{},name:"BookmarksPageQuery",operationKind:"query",text:"query BookmarksPageQuery(\n  $userId: Int!\n) {\n  bookmarks(userId: $userId) {\n    id\n    question {\n      content\n      id\n    }\n  }\n}\n"}};var a,i,o,l;r.hash="3a723c2ea8ee9bf5938cac6631d6fdc3";const s=r},3649:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});const r={fragment:{argumentDefinitions:a=[{defaultValue:null,kind:"LocalArgument",name:"questionId"}],kind:"Fragment",metadata:null,name:"CommentPageQuery",selections:[{alias:null,args:i=[{kind:"Variable",name:"questionId",variableName:"questionId"}],concreteType:"Comment",kind:"LinkedField",name:"comments",plural:!0,selections:[o={alias:null,args:null,kind:"ScalarField",name:"id",storageKey:null},{args:null,kind:"FragmentSpread",name:"Comment_comment"}],storageKey:null}],type:"Query",abstractKey:null},kind:"Request",operation:{argumentDefinitions:a,kind:"Operation",name:"CommentPageQuery",selections:[{alias:null,args:i,concreteType:"Comment",kind:"LinkedField",name:"comments",plural:!0,selections:[o,{alias:null,args:null,kind:"ScalarField",name:"questionId",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"createdAt",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"userEmail",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"content",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"like",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"dislike",storageKey:null}],storageKey:null}]},params:{cacheID:"fc19f9c69153daf7c7a0e43ea120a9c1",id:null,metadata:{},name:"CommentPageQuery",operationKind:"query",text:"query CommentPageQuery(\n  $questionId: Int\n) {\n  comments(questionId: $questionId) {\n    id\n    ...Comment_comment\n  }\n}\n\nfragment Comment_comment on Comment {\n  id\n  questionId\n  createdAt\n  userEmail\n  content\n  like\n  dislike\n}\n"}};var a,i,o;r.hash="c39e177f53e921e85d53b896dc6a48df";const l=r},3563:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r={argumentDefinitions:[],kind:"Fragment",metadata:null,name:"Comment_comment",selections:[{alias:null,args:null,kind:"ScalarField",name:"id",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"questionId",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"createdAt",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"userEmail",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"content",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"like",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"dislike",storageKey:null}],type:"Comment",abstractKey:null,hash:"4301a78d987bed21533649b2d9e5338e"}},8071:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});const r={fragment:{argumentDefinitions:[],kind:"Fragment",metadata:null,name:"ExamplePageQuery",selections:[{alias:null,args:null,concreteType:"Question",kind:"LinkedField",name:"allQuestions",plural:!0,selections:[a={alias:null,args:null,kind:"ScalarField",name:"id",storageKey:null},{args:null,kind:"FragmentSpread",name:"Question_question"}],storageKey:null}],type:"Query",abstractKey:null},kind:"Request",operation:{argumentDefinitions:[],kind:"Operation",name:"ExamplePageQuery",selections:[{alias:null,args:null,concreteType:"Question",kind:"LinkedField",name:"allQuestions",plural:!0,selections:[a,{alias:null,args:null,kind:"ScalarField",name:"title",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"content",storageKey:null}],storageKey:null}]},params:{cacheID:"231ec4c6ac4274a006852806db2eb6bb",id:null,metadata:{},name:"ExamplePageQuery",operationKind:"query",text:"query ExamplePageQuery {\n  allQuestions {\n    id\n    ...Question_question\n  }\n}\n\nfragment Question_question on Question {\n  id\n  title\n  content\n}\n"}};var a;r.hash="40221d1bac5950061c4a438b459c73ec";const i=r},6692:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const r={fragment:{argumentDefinitions:a=[{defaultValue:null,kind:"LocalArgument",name:"code"}],kind:"Fragment",metadata:null,name:"LoginCallbackPageQuery",selections:i=[{alias:null,args:[{kind:"Variable",name:"code",variableName:"code"}],concreteType:"Auth",kind:"LinkedField",name:"login",plural:!1,selections:[{alias:null,args:null,kind:"ScalarField",name:"accessToken",storageKey:null}],storageKey:null}],type:"Mutation",abstractKey:null},kind:"Request",operation:{argumentDefinitions:a,kind:"Operation",name:"LoginCallbackPageQuery",selections:i},params:{cacheID:"f8791495f018ef63405ec5504ae97e4c",id:null,metadata:{},name:"LoginCallbackPageQuery",operationKind:"mutation",text:"mutation LoginCallbackPageQuery(\n  $code: String!\n) {\n  login(code: $code) {\n    accessToken\n  }\n}\n"}};var a,i;r.hash="19394340f21984253560b6eb69a8e1a4";const o=r},4653:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r={argumentDefinitions:[],kind:"Fragment",metadata:null,name:"Question_question",selections:[{alias:null,args:null,kind:"ScalarField",name:"id",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"title",storageKey:null},{alias:null,args:null,kind:"ScalarField",name:"content",storageKey:null}],type:"Question",abstractKey:null,hash:"373c5847c637e5ae0dc6da744ba8dd13"}},1305:e=>{"use strict";var t=[],n=[];function r(e,t,n,a){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var i=Object.prototype.toString,o=i.call(e);if(o!=i.call(t))return!1;switch(o){case"[object String]":return e==String(t);case"[object Number]":return!isNaN(e)&&!isNaN(t)&&e==Number(t);case"[object Date]":case"[object Boolean]":return+e==+t;case"[object RegExp]":return e.source==t.source&&e.global==t.global&&e.multiline==t.multiline&&e.ignoreCase==t.ignoreCase}for(var l=n.length;l--;)if(n[l]==e)return a[l]==t;n.push(e),a.push(t);var s=0;if("[object Array]"===o){if((s=e.length)!==t.length)return!1;for(;s--;)if(!r(e[s],t[s],n,a))return!1}else{if(e.constructor!==t.constructor)return!1;if(e.hasOwnProperty("valueOf")&&t.hasOwnProperty("valueOf"))return e.valueOf()==t.valueOf();var u=Object.keys(e);if(u.length!=Object.keys(t).length)return!1;for(var c=0;c<u.length;c++)if(!r(e[u[c]],t[u[c]],n,a))return!1}return n.pop(),a.pop(),!0}e.exports=function(e,a){var i=t.length?t.pop():[],o=n.length?n.pop():[],l=r(e,a,i,o);return i.length=0,o.length=0,t.push(i),n.push(o),l}},139:e=>{"use strict";function t(e){return function(){return e}}var n=function(){};n.thatReturns=t,n.thatReturnsFalse=t(!1),n.thatReturnsTrue=t(!0),n.thatReturnsNull=t(null),n.thatReturnsThis=function(){return this},n.thatReturnsArgument=function(e){return e},e.exports=n},3620:(e,t,n)=>{"use strict";var r=n(139);e.exports=r},8679:(e,t,n)=>{"use strict";var r=n(9864),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},o={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?o:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=o;var u=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var a=p(n);a&&a!==h&&e(t,a,r)}var o=c(n);f&&(o=o.concat(f(n)));for(var l=s(t),v=s(n),m=0;m<o.length;++m){var g=o[m];if(!(i[g]||r&&r[g]||v&&v[g]||l&&l[g])){var _=d(n,g);try{u(t,g,_)}catch(e){}}}}return t}},1143:e=>{"use strict";e.exports=function(e,t,n,r,a,i,o,l){if(!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,a,i,o,l],c=0;(s=new Error(t.replace(/%s/g,(function(){return u[c++]})))).name="Invariant Violation"}throw s.framesToPop=1,s}}},5826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var o,l,s=a(e),u=1;u<arguments.length;u++){for(var c in o=Object(arguments[u]))n.call(o,c)&&(s[c]=o[c]);if(t){l=t(o);for(var f=0;f<l.length;f++)r.call(o,l[f])&&(s[l[f]]=o[l[f]])}}return s}},2703:(e,t,n)=>{"use strict";var r=n(414);function a(){}function i(){}i.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,i,o){if(o!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:a};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),a=n(7418),i=n(3840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(o(227));var l=new Set,s={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},v={};function m(e,t,n,r,a,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=o}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var _=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0===a.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!p.call(v,e)||!p.call(h,e)&&(d.test(e)?v[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(_,y);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(_,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(_,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var E=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=60103,k=60106,R=60107,w=60108,I=60114,C=60109,P=60110,D=60112,x=60113,O=60120,T=60115,F=60116,N=60121,A=60128,L=60129,M=60130,U=60131;if("function"==typeof Symbol&&Symbol.for){var q=Symbol.for;S=q("react.element"),k=q("react.portal"),R=q("react.fragment"),w=q("react.strict_mode"),I=q("react.profiler"),C=q("react.provider"),P=q("react.context"),D=q("react.forward_ref"),x=q("react.suspense"),O=q("react.suspense_list"),T=q("react.memo"),F=q("react.lazy"),N=q("react.block"),q("react.scope"),A=q("react.opaque.id"),L=q("react.debug_trace_mode"),M=q("react.offscreen"),U=q("react.legacy_hidden")}var z,j="function"==typeof Symbol&&Symbol.iterator;function V(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=j&&e[j]||e["@@iterator"])?e:null}function Q(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var K=!1;function B(e,t){if(!e||K)return"";K=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),i=r.stack.split("\n"),o=a.length-1,l=i.length-1;1<=o&&0<=l&&a[o]!==i[l];)l--;for(;1<=o&&0<=l;o--,l--)if(a[o]!==i[l]){if(1!==o||1!==l)do{if(o--,0>--l||a[o]!==i[l])return"\n"+a[o].replace(" at new "," at ")}while(1<=o&&0<=l);break}}}finally{K=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?Q(e):""}function H(e){switch(e.tag){case 5:return Q(e.type);case 16:return Q("Lazy");case 13:return Q("Suspense");case 19:return Q("SuspenseList");case 0:case 2:case 15:return B(e.type,!1);case 11:return B(e.type.render,!1);case 22:return B(e.type._render,!1);case 1:return B(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case R:return"Fragment";case k:return"Portal";case I:return"Profiler";case w:return"StrictMode";case x:return"Suspense";case O:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case D:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case T:return W(e.type);case N:return W(e._render);case F:t=e._payload,e=e._init;try{return W(e(t))}catch(e){}}return null}function Y(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function G(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function $(e){e._valueTracker||(e._valueTracker=function(e){var t=G(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=G(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Y(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Y(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&ae(e,t.type,Y(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ae(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function oe(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Y(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function se(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Y(n)}}function ue(e,t){var n=Y(t.value),r=Y(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,ve,me=(ve=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var _e={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ye=["Webkit","ms","Moz","O"];function be(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||_e.hasOwnProperty(e)&&_e[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=be(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(_e).forEach((function(e){ye.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),_e[t]=_e[e]}))}));var Se=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(Se[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function Re(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ie=null,Ce=null,Pe=null;function De(e){if(e=Zr(e)){if("function"!=typeof Ie)throw Error(o(280));var t=e.stateNode;t&&(t=ta(t),Ie(e.stateNode,e.type,t))}}function xe(e){Ce?Pe?Pe.push(e):Pe=[e]:Ce=e}function Oe(){if(Ce){var e=Ce,t=Pe;if(Pe=Ce=null,De(e),t)for(e=0;e<t.length;e++)De(t[e])}}function Te(e,t){return e(t)}function Fe(e,t,n,r,a){return e(t,n,r,a)}function Ne(){}var Ae=Te,Le=!1,Me=!1;function Ue(){null===Ce&&null===Pe||(Ne(),Oe())}function qe(e,t){var n=e.stateNode;if(null===n)return null;var r=ta(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var ze=!1;if(f)try{var je={};Object.defineProperty(je,"passive",{get:function(){ze=!0}}),window.addEventListener("test",je,je),window.removeEventListener("test",je,je)}catch(ve){ze=!1}function Ve(e,t,n,r,a,i,o,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Qe=!1,Ke=null,Be=!1,He=null,We={onError:function(e){Qe=!0,Ke=e}};function Ye(e,t,n,r,a,i,o,l,s){Qe=!1,Ke=null,Ve.apply(We,arguments)}function Ge(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function $e(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ge(e)!==e)throw Error(o(188))}function Je(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return Xe(a),e;if(i===r)return Xe(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,s=a.child;s;){if(s===n){l=!0,n=a,r=i;break}if(s===r){l=!0,r=a,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=a;break}if(s===r){l=!0,r=i,n=a;break}s=s.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,at=!1,it=[],ot=null,lt=null,st=null,ut=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,a){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:a,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":ot=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":st=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function vt(e,t,n,r,a,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,a,i),null!==t&&null!==(t=Zr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function mt(e){var t=Jr(e.target);if(null!==t){var n=Ge(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=$e(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function _t(e,t,n){gt(e)&&n.delete(t)}function yt(){for(at=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==ot&&gt(ot)&&(ot=null),null!==lt&&gt(lt)&&(lt=null),null!==st&&gt(st)&&(st=null),ut.forEach(_t),ct.forEach(_t)}function bt(e,t){e.blockedOn===t&&(e.blockedOn=null,at||(at=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,yt)))}function Et(e){function t(t){return bt(t,e)}if(0<it.length){bt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ot&&bt(ot,e),null!==lt&&bt(lt,e),null!==st&&bt(st,e),ut.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)mt(n),null===n.blockedOn&&ft.shift()}function St(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:St("Animation","AnimationEnd"),animationiteration:St("Animation","AnimationIteration"),animationstart:St("Animation","AnimationStart"),transitionend:St("Transition","TransitionEnd")},Rt={},wt={};function It(e){if(Rt[e])return Rt[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in wt)return Rt[e]=n[t];return e}f&&(wt=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Ct=It("animationend"),Pt=It("animationiteration"),Dt=It("animationstart"),xt=It("transitionend"),Ot=new Map,Tt=new Map,Ft=["abort","abort",Ct,"animationEnd",Pt,"animationIteration",Dt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",xt,"transitionEnd","waiting","waiting"];function Nt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1];a="on"+(a[0].toUpperCase()+a.slice(1)),Tt.set(r,t),Ot.set(r,a),u(a,[r])}}(0,i.unstable_now)();var At=8;function Lt(e){if(0!=(1&e))return At=15,1;if(0!=(2&e))return At=14,2;if(0!=(4&e))return At=13,4;var t=24&e;return 0!==t?(At=12,t):0!=(32&e)?(At=11,32):0!=(t=192&e)?(At=10,t):0!=(256&e)?(At=9,256):0!=(t=3584&e)?(At=8,t):0!=(4096&e)?(At=7,4096):0!=(t=4186112&e)?(At=6,t):0!=(t=62914560&e)?(At=5,t):67108864&e?(At=4,67108864):0!=(134217728&e)?(At=3,134217728):0!=(t=805306368&e)?(At=2,t):0!=(1073741824&e)?(At=1,1073741824):(At=8,e)}function Mt(e,t){var n=e.pendingLanes;if(0===n)return At=0;var r=0,a=0,i=e.expiredLanes,o=e.suspendedLanes,l=e.pingedLanes;if(0!==i)r=i,a=At=15;else if(0!=(i=134217727&n)){var s=i&~o;0!==s?(r=Lt(s),a=At):0!=(l&=i)&&(r=Lt(l),a=At)}else 0!=(i=n&~o)?(r=Lt(i),a=At):0!==l&&(r=Lt(l),a=At);if(0===r)return 0;if(r=n&((0>(r=31-Qt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&o)){if(Lt(t),a<=At)return t;At=a}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-Qt(t)),r|=e[n],t&=~a;return r}function Ut(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function qt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=zt(24&~t))?qt(10,t):e;case 10:return 0===(e=zt(192&~t))?qt(8,t):e;case 8:return 0===(e=zt(3584&~t))&&0===(e=zt(4186112&~t))&&(e=512),e;case 2:return 0===(t=zt(805306368&~t))&&(t=268435456),t}throw Error(o(358,e))}function zt(e){return e&-e}function jt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Vt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Qt(t)]=n}var Qt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Kt(e)/Bt|0)|0},Kt=Math.log,Bt=Math.LN2,Ht=i.unstable_UserBlockingPriority,Wt=i.unstable_runWithPriority,Yt=!0;function Gt(e,t,n,r){Le||Ne();var a=Xt,i=Le;Le=!0;try{Fe(a,e,t,n,r)}finally{(Le=i)||Ue()}}function $t(e,t,n,r){Wt(Ht,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){var a;if(Yt)if((a=0==(4&t))&&0<it.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Jt(e,t,n,r);if(null===i)a&&ht(e,r);else{if(a){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,a){switch(t){case"focusin":return ot=vt(ot,e,t,n,r,a),!0;case"dragenter":return lt=vt(lt,e,t,n,r,a),!0;case"mouseover":return st=vt(st,e,t,n,r,a),!0;case"pointerover":var i=a.pointerId;return ut.set(i,vt(ut.get(i)||null,e,t,n,r,a)),!0;case"gotpointercapture":return i=a.pointerId,ct.set(i,vt(ct.get(i)||null,e,t,n,r,a)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Or(e,t,r,null,n)}}}function Jt(e,t,n,r){var a=we(r);if(null!==(a=Jr(a))){var i=Ge(a);if(null===i)a=null;else{var o=i.tag;if(13===o){if(null!==(a=$e(i)))return a;a=null}else if(3===o){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;a=null}else i!==a&&(a=null)}}return Or(e,t,r,a,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,a="value"in Zt?Zt.value:Zt.textContent,i=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[i-t];t++);return tn=a.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function an(){return!0}function on(){return!1}function ln(e){function t(t,n,r,a,i){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(a):a[o]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?an:on,this.isPropagationStopped=on,this}return a(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=an)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=an)},persist:function(){},isPersistent:an}),t}var sn,un,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=a({},fn,{view:0,detail:0}),hn=ln(pn),vn=a({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:In,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(sn=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=sn=0,cn=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:un}}),mn=ln(vn),gn=ln(a({},vn,{dataTransfer:0})),_n=ln(a({},pn,{relatedTarget:0})),yn=ln(a({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=ln(a({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),En=ln(a({},fn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Rn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function wn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Rn[e])&&!!t[e]}function In(){return wn}var Cn=ln(a({},pn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:In,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Pn=ln(a({},vn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Dn=ln(a({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:In})),xn=ln(a({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),On=ln(a({},vn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Tn=[9,13,27,32],Fn=f&&"CompositionEvent"in window,Nn=null;f&&"documentMode"in document&&(Nn=document.documentMode);var An=f&&"TextEvent"in window&&!Nn,Ln=f&&(!Fn||Nn&&8<Nn&&11>=Nn),Mn=String.fromCharCode(32),Un=!1;function qn(e,t){switch(e){case"keyup":return-1!==Tn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var jn=!1,Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function Kn(e,t,n,r){xe(r),0<(t=Fr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Bn=null,Hn=null;function Wn(e){wr(e,0)}function Yn(e){if(X(ea(e)))return e}function Gn(e,t){if("change"===e)return t}var $n=!1;if(f){var Xn;if(f){var Jn="oninput"in document;if(!Jn){var Zn=document.createElement("div");Zn.setAttribute("oninput","return;"),Jn="function"==typeof Zn.oninput}Xn=Jn}else Xn=!1;$n=Xn&&(!document.documentMode||9<document.documentMode)}function er(){Bn&&(Bn.detachEvent("onpropertychange",tr),Hn=Bn=null)}function tr(e){if("value"===e.propertyName&&Yn(Hn)){var t=[];if(Kn(t,Hn,e,we(e)),e=Wn,Le)e(t);else{Le=!0;try{Te(e,t)}finally{Le=!1,Ue()}}}}function nr(e,t,n){"focusin"===e?(er(),Hn=n,(Bn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Hn)}function ar(e,t){if("click"===e)return Yn(t)}function ir(e,t){if("input"===e||"change"===e)return Yn(t)}var or="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},lr=Object.prototype.hasOwnProperty;function sr(e,t){if(or(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!lr.call(t,n[r])||!or(e[n[r]],t[n[r]]))return!1;return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,vr=null,mr=null,gr=null,_r=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;_r||null==vr||vr!==J(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&sr(gr,r)||(gr=r,0<(r=Fr(mr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}Nt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Nt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Nt(Ft,2);for(var br="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Er=0;Er<br.length;Er++)Tt.set(br[Er],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Sr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Sr));function Rr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,s,u){if(Ye.apply(this,arguments),Qe){if(!Qe)throw Error(o(198));var c=Ke;Qe=!1,Ke=null,Be||(Be=!0,He=c)}}(r,t,void 0,e),e.currentTarget=null}function wr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var o=r.length-1;0<=o;o--){var l=r[o],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==i&&a.isPropagationStopped())break e;Rr(a,l,u),i=s}else for(o=0;o<r.length;o++){if(s=(l=r[o]).instance,u=l.currentTarget,l=l.listener,s!==i&&a.isPropagationStopped())break e;Rr(a,l,u),i=s}}}if(Be)throw e=He,Be=!1,He=null,e}function Ir(e,t){var n=na(t),r=e+"__bubble";n.has(r)||(xr(t,e,2,!1),n.add(r))}var Cr="_reactListening"+Math.random().toString(36).slice(2);function Pr(e){e[Cr]||(e[Cr]=!0,l.forEach((function(t){kr.has(t)||Dr(t,!1,e,null),Dr(t,!0,e,null)})))}function Dr(e,t,n,r){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&kr.has(e)){if("scroll"!==e)return;a|=2,i=r}var o=na(i),l=e+"__"+(t?"capture":"bubble");o.has(l)||(t&&(a|=4),xr(i,e,a,t),o.add(l))}function xr(e,t,n,r){var a=Tt.get(t);switch(void 0===a?2:a){case 0:a=Gt;break;case 1:a=$t;break;default:a=Xt}n=a.bind(null,t,n,e),a=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Or(e,t,n,r,a){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===o)for(o=r.return;null!==o;){var s=o.tag;if((3===s||4===s)&&((s=o.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;o=o.return}for(;null!==l;){if(null===(o=Jr(l)))return;if(5===(s=o.tag)||6===s){r=i=o;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(Me)return e();Me=!0;try{Ae(e,t,n)}finally{Me=!1,Ue()}}((function(){var r=i,a=we(n),o=[];e:{var l=Ot.get(e);if(void 0!==l){var s=dn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":s=Cn;break;case"focusin":u="focus",s=_n;break;case"focusout":u="blur",s=_n;break;case"beforeblur":case"afterblur":s=_n;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Dn;break;case Ct:case Pt:case Dt:s=yn;break;case xt:s=xn;break;case"scroll":s=hn;break;case"wheel":s=On;break;case"copy":case"cut":case"paste":s=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Pn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var v=(p=h).stateNode;if(5===p.tag&&null!==v&&(p=v,null!==d&&null!=(v=qe(h,d))&&c.push(Tr(h,v,p))),f)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,a),o.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!Jr(u)&&!u[$r])&&(s||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?Jr(u):null)&&(u!==(f=Ge(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=mn,v="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,v="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==s?l:ea(s),p=null==u?l:ea(u),(l=new c(v,h+"leave",s,n,a)).target=f,l.relatedTarget=p,v=null,Jr(a)===r&&((c=new c(d,h+"enter",u,n,a)).target=p,c.relatedTarget=f,v=c),f=v,s&&u)e:{for(d=u,h=0,p=c=s;p;p=Nr(p))h++;for(p=0,v=d;v;v=Nr(v))p++;for(;0<h-p;)c=Nr(c),h--;for(;0<p-h;)d=Nr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Nr(c),d=Nr(d)}c=null}else c=null;null!==s&&Ar(o,l,s,c,!1),null!==u&&null!==f&&Ar(o,f,u,c,!0)}if("select"===(s=(l=r?ea(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var m=Gn;else if(Qn(l))if($n)m=ir;else{m=rr;var g=nr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(m=ar);switch(m&&(m=m(e,r))?Kn(o,m,n,a):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&ae(l,"number",l.value)),g=r?ea(r):window,e){case"focusin":(Qn(g)||"true"===g.contentEditable)&&(vr=g,mr=r,gr=null);break;case"focusout":gr=mr=vr=null;break;case"mousedown":_r=!0;break;case"contextmenu":case"mouseup":case"dragend":_r=!1,yr(o,n,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":yr(o,n,a)}var _;if(Fn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else jn?qn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Ln&&"ko"!==n.locale&&(jn||"onCompositionStart"!==y?"onCompositionEnd"===y&&jn&&(_=nn()):(en="value"in(Zt=a)?Zt.value:Zt.textContent,jn=!0)),0<(g=Fr(r,y)).length&&(y=new En(y,e,null,n,a),o.push({event:y,listeners:g}),(_||null!==(_=zn(n)))&&(y.data=_))),(_=An?function(e,t){switch(e){case"compositionend":return zn(t);case"keypress":return 32!==t.which?null:(Un=!0,Mn);case"textInput":return(e=t.data)===Mn&&Un?null:e;default:return null}}(e,n):function(e,t){if(jn)return"compositionend"===e||!Fn&&qn(e,t)?(e=nn(),tn=en=Zt=null,jn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Fr(r,"onBeforeInput")).length&&(a=new En("onBeforeInput","beforeinput",null,n,a),o.push({event:a,listeners:r}),a.data=_)}wr(o,t)}))}function Tr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Fr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,i=a.stateNode;5===a.tag&&null!==i&&(a=i,null!=(i=qe(e,n))&&r.unshift(Tr(e,i,a)),null!=(i=qe(e,t))&&r.push(Tr(e,i,a))),e=e.return}return r}function Nr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Ar(e,t,n,r,a){for(var i=t._reactName,o=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,a?null!=(s=qe(n,i))&&o.unshift(Tr(n,s,l)):a||null!=(s=qe(n,i))&&o.push(Tr(n,s,l))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}function Lr(){}var Mr=null,Ur=null;function qr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function zr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var jr="function"==typeof setTimeout?setTimeout:void 0,Vr="function"==typeof clearTimeout?clearTimeout:void 0;function Qr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Kr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Br(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Hr=0,Wr=Math.random().toString(36).slice(2),Yr="__reactFiber$"+Wr,Gr="__reactProps$"+Wr,$r="__reactContainer$"+Wr,Xr="__reactEvents$"+Wr;function Jr(e){var t=e[Yr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[$r]||n[Yr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Br(e);null!==e;){if(n=e[Yr])return n;e=Br(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Yr]||e[$r])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ea(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function ta(e){return e[Gr]||null}function na(e){var t=e[Xr];return void 0===t&&(t=e[Xr]=new Set),t}var ra=[],aa=-1;function ia(e){return{current:e}}function oa(e){0>aa||(e.current=ra[aa],ra[aa]=null,aa--)}function la(e,t){aa++,ra[aa]=e.current,e.current=t}var sa={},ua=ia(sa),ca=ia(!1),fa=sa;function da(e,t){var n=e.type.contextTypes;if(!n)return sa;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in n)i[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function pa(e){return null!=e.childContextTypes}function ha(){oa(ca),oa(ua)}function va(e,t,n){if(ua.current!==sa)throw Error(o(168));la(ua,t),la(ca,n)}function ma(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(o(108,W(t)||"Unknown",i));return a({},n,r)}function ga(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||sa,fa=ua.current,la(ua,e),la(ca,ca.current),!0}function _a(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=ma(e,t,fa),r.__reactInternalMemoizedMergedChildContext=e,oa(ca),oa(ua),la(ua,e)):oa(ca),la(ca,n)}var ya=null,ba=null,Ea=i.unstable_runWithPriority,Sa=i.unstable_scheduleCallback,ka=i.unstable_cancelCallback,Ra=i.unstable_shouldYield,wa=i.unstable_requestPaint,Ia=i.unstable_now,Ca=i.unstable_getCurrentPriorityLevel,Pa=i.unstable_ImmediatePriority,Da=i.unstable_UserBlockingPriority,xa=i.unstable_NormalPriority,Oa=i.unstable_LowPriority,Ta=i.unstable_IdlePriority,Fa={},Na=void 0!==wa?wa:function(){},Aa=null,La=null,Ma=!1,Ua=Ia(),qa=1e4>Ua?Ia:function(){return Ia()-Ua};function za(){switch(Ca()){case Pa:return 99;case Da:return 98;case xa:return 97;case Oa:return 96;case Ta:return 95;default:throw Error(o(332))}}function ja(e){switch(e){case 99:return Pa;case 98:return Da;case 97:return xa;case 96:return Oa;case 95:return Ta;default:throw Error(o(332))}}function Va(e,t){return e=ja(e),Ea(e,t)}function Qa(e,t,n){return e=ja(e),Sa(e,t,n)}function Ka(){if(null!==La){var e=La;La=null,ka(e)}Ba()}function Ba(){if(!Ma&&null!==Aa){Ma=!0;var e=0;try{var t=Aa;Va(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Aa=null}catch(t){throw null!==Aa&&(Aa=Aa.slice(e+1)),Sa(Pa,Ka),t}finally{Ma=!1}}}var Ha=E.ReactCurrentBatchConfig;function Wa(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ya=ia(null),Ga=null,$a=null,Xa=null;function Ja(){Xa=$a=Ga=null}function Za(e){var t=Ya.current;oa(Ya),e.type._context._currentValue=t}function ei(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ti(e,t){Ga=e,Xa=$a=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Fo=!0),e.firstContext=null)}function ni(e,t){if(Xa!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Xa=e,t=1073741823),t={context:e,observedBits:t,next:null},null===$a){if(null===Ga)throw Error(o(308));$a=t,Ga.dependencies={lanes:0,firstContext:t,responders:null}}else $a=$a.next=t;return e._currentValue}var ri=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ii(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function oi(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function li(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function si(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?a=i=o:i=i.next=o,n=n.next}while(null!==n);null===i?a=i=t:i=i.next=t}else a=i=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ui(e,t,n,r){var i=e.updateQueue;ri=!1;var o=i.firstBaseUpdate,l=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var u=s,c=u.next;u.next=null,null===l?o=c:l.next=c,l=u;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=u)}}if(null!==o){for(d=i.baseState,l=0,f=c=u=null;;){s=o.lane;var p=o.eventTime;if((r&s)===s){null!==f&&(f=f.next={eventTime:p,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var h=e,v=o;switch(s=t,p=n,v.tag){case 1:if("function"==typeof(h=v.payload)){d=h.call(p,d,s);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(s="function"==typeof(h=v.payload)?h.call(p,d,s):h))break e;d=a({},d,s);break e;case 2:ri=!0}}null!==o.callback&&(e.flags|=32,null===(s=i.effects)?i.effects=[o]:s.push(o))}else p={eventTime:p,lane:s,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===f?(c=f=p,u=d):f=f.next=p,l|=s;if(null===(o=o.next)){if(null===(s=i.shared.pending))break;o=s.next,s.next=null,i.lastBaseUpdate=s,i.shared.pending=null}}null===f&&(u=d),i.baseState=u,i.firstBaseUpdate=c,i.lastBaseUpdate=f,Al|=l,e.lanes=l,e.memoizedState=d}}function ci(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var fi=(new r.Component).refs;function di(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pi={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=os(),a=ls(e),i=oi(r,a);i.payload=t,null!=n&&(i.callback=n),li(e,i),ss(e,a,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=os(),a=ls(e),i=oi(r,a);i.tag=1,i.payload=t,null!=n&&(i.callback=n),li(e,i),ss(e,a,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=os(),r=ls(e),a=oi(n,r);a.tag=2,null!=t&&(a.callback=t),li(e,a),ss(e,r,n)}};function hi(e,t,n,r,a,i,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,o):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(a,i))}function vi(e,t,n){var r=!1,a=sa,i=t.contextType;return"object"==typeof i&&null!==i?i=ni(i):(a=pa(t)?fa:ua.current,i=(r=null!=(r=t.contextTypes))?da(e,a):sa),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=i),t}function mi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pi.enqueueReplaceState(t,t.state,null)}function gi(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=fi,ai(e);var i=t.contextType;"object"==typeof i&&null!==i?a.context=ni(i):(i=pa(t)?fa:ua.current,a.context=da(e,i)),ui(e,n,a,r),a.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(di(e,t,i,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&pi.enqueueReplaceState(a,a.state,null),ui(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var _i=Array.isArray;function yi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===fi&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function bi(e,t){if("textarea"!==e.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ei(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=zs(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Ks(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=yi(e,t,n),r.return=e,r):((r=js(n.type,n.key,n.props,null,e.mode,r)).ref=yi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Bs(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Vs(n,e.mode,r,i)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ks(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=js(t.type,t.key,t.props,null,e.mode,n)).ref=yi(e,null,t),n.return=e,n;case k:return(t=Bs(t,e.mode,n)).return=e,t}if(_i(t)||V(t))return(t=Vs(t,e.mode,n,null)).return=e,t;bi(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===a?n.type===R?f(e,t,n.props.children,r,a):u(e,t,n,r):null;case k:return n.key===a?c(e,t,n,r):null}if(_i(n)||V(n))return null!==a?null:f(e,t,n,r,null);bi(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return e=e.get(null===r.key?n:r.key)||null,r.type===R?f(t,e,r.props.children,a,r.key):u(t,e,r,a);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(_i(r)||V(r))return f(t,e=e.get(n)||null,r,a,null);bi(t,r)}return null}function v(a,o,l,s){for(var u=null,c=null,f=o,v=o=0,m=null;null!==f&&v<l.length;v++){f.index>v?(m=f,f=null):m=f.sibling;var g=p(a,f,l[v],s);if(null===g){null===f&&(f=m);break}e&&f&&null===g.alternate&&t(a,f),o=i(g,o,v),null===c?u=g:c.sibling=g,c=g,f=m}if(v===l.length)return n(a,f),u;if(null===f){for(;v<l.length;v++)null!==(f=d(a,l[v],s))&&(o=i(f,o,v),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(a,f);v<l.length;v++)null!==(m=h(f,a,v,l[v],s))&&(e&&null!==m.alternate&&f.delete(null===m.key?v:m.key),o=i(m,o,v),null===c?u=m:c.sibling=m,c=m);return e&&f.forEach((function(e){return t(a,e)})),u}function m(a,l,s,u){var c=V(s);if("function"!=typeof c)throw Error(o(150));if(null==(s=c.call(s)))throw Error(o(151));for(var f=c=null,v=l,m=l=0,g=null,_=s.next();null!==v&&!_.done;m++,_=s.next()){v.index>m?(g=v,v=null):g=v.sibling;var y=p(a,v,_.value,u);if(null===y){null===v&&(v=g);break}e&&v&&null===y.alternate&&t(a,v),l=i(y,l,m),null===f?c=y:f.sibling=y,f=y,v=g}if(_.done)return n(a,v),c;if(null===v){for(;!_.done;m++,_=s.next())null!==(_=d(a,_.value,u))&&(l=i(_,l,m),null===f?c=_:f.sibling=_,f=_);return c}for(v=r(a,v);!_.done;m++,_=s.next())null!==(_=h(v,a,m,_.value,u))&&(e&&null!==_.alternate&&v.delete(null===_.key?m:_.key),l=i(_,l,m),null===f?c=_:f.sibling=_,f=_);return e&&v.forEach((function(e){return t(a,e)})),c}return function(e,r,i,s){var u="object"==typeof i&&null!==i&&i.type===R&&null===i.key;u&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case S:e:{for(c=i.key,u=r;null!==u;){if(u.key===c){switch(u.tag){case 7:if(i.type===R){n(e,u.sibling),(r=a(u,i.props.children)).return=e,e=r;break e}break;default:if(u.elementType===i.type){n(e,u.sibling),(r=a(u,i.props)).ref=yi(e,u,i),r.return=e,e=r;break e}}n(e,u);break}t(e,u),u=u.sibling}i.type===R?((r=Vs(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=js(i.type,i.key,i.props,null,e.mode,s)).ref=yi(e,r,i),s.return=e,e=s)}return l(e);case k:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=a(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Bs(i,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,i)).return=e,e=r):(n(e,r),(r=Ks(i,e.mode,s)).return=e,e=r),l(e);if(_i(i))return v(e,r,i,s);if(V(i))return m(e,r,i,s);if(c&&bi(e,i),void 0===i&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(o(152,W(e.type)||"Component"))}return n(e,r)}}var Si=Ei(!0),ki=Ei(!1),Ri={},wi=ia(Ri),Ii=ia(Ri),Ci=ia(Ri);function Pi(e){if(e===Ri)throw Error(o(174));return e}function Di(e,t){switch(la(Ci,t),la(Ii,e),la(wi,Ri),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}oa(wi),la(wi,t)}function xi(){oa(wi),oa(Ii),oa(Ci)}function Oi(e){Pi(Ci.current);var t=Pi(wi.current),n=pe(t,e.type);t!==n&&(la(Ii,e),la(wi,n))}function Ti(e){Ii.current===e&&(oa(wi),oa(Ii))}var Fi=ia(0);function Ni(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ai=null,Li=null,Mi=!1;function Ui(e,t){var n=Us(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function qi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function zi(e){if(Mi){var t=Li;if(t){var n=t;if(!qi(e,t)){if(!(t=Kr(n.nextSibling))||!qi(e,t))return e.flags=-1025&e.flags|2,Mi=!1,void(Ai=e);Ui(Ai,n)}Ai=e,Li=Kr(t.firstChild)}else e.flags=-1025&e.flags|2,Mi=!1,Ai=e}}function ji(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ai=e}function Vi(e){if(e!==Ai)return!1;if(!Mi)return ji(e),Mi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!zr(t,e.memoizedProps))for(t=Li;t;)Ui(e,t),t=Kr(t.nextSibling);if(ji(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Li=Kr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Li=null}}else Li=Ai?Kr(e.stateNode.nextSibling):null;return!0}function Qi(){Li=Ai=null,Mi=!1}var Ki=[];function Bi(){for(var e=0;e<Ki.length;e++)Ki[e]._workInProgressVersionPrimary=null;Ki.length=0}var Hi=E.ReactCurrentDispatcher,Wi=E.ReactCurrentBatchConfig,Yi=0,Gi=null,$i=null,Xi=null,Ji=!1,Zi=!1;function eo(){throw Error(o(321))}function to(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!or(e[n],t[n]))return!1;return!0}function no(e,t,n,r,a,i){if(Yi=i,Gi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Hi.current=null===e||null===e.memoizedState?Do:xo,e=n(r,a),Zi){i=0;do{if(Zi=!1,!(25>i))throw Error(o(301));i+=1,Xi=$i=null,t.updateQueue=null,Hi.current=Oo,e=n(r,a)}while(Zi)}if(Hi.current=Po,t=null!==$i&&null!==$i.next,Yi=0,Xi=$i=Gi=null,Ji=!1,t)throw Error(o(300));return e}function ro(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Xi?Gi.memoizedState=Xi=e:Xi=Xi.next=e,Xi}function ao(){if(null===$i){var e=Gi.alternate;e=null!==e?e.memoizedState:null}else e=$i.next;var t=null===Xi?Gi.memoizedState:Xi.next;if(null!==t)Xi=t,$i=e;else{if(null===e)throw Error(o(310));e={memoizedState:($i=e).memoizedState,baseState:$i.baseState,baseQueue:$i.baseQueue,queue:$i.queue,next:null},null===Xi?Gi.memoizedState=Xi=e:Xi=Xi.next=e}return Xi}function io(e,t){return"function"==typeof t?t(e):t}function oo(e){var t=ao(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=$i,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var s=l=i=null,u=a;do{var c=u.lane;if((Yi&c)===c)null!==s&&(s=s.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var f={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===s?(l=s=f,i=r):s=s.next=f,Gi.lanes|=c,Al|=c}u=u.next}while(null!==u&&u!==a);null===s?i=r:s.next=l,or(r,t.memoizedState)||(Fo=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function lo(e){var t=ao(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);or(i,t.memoizedState)||(Fo=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function so(e,t,n){var r=t._getVersion;r=r(t._source);var a=t._workInProgressVersionPrimary;if(null!==a?e=a===r:(e=e.mutableReadLanes,(e=(Yi&e)===e)&&(t._workInProgressVersionPrimary=r,Ki.push(t))),e)return n(t._source);throw Ki.push(t),Error(o(350))}function uo(e,t,n,r){var a=Cl;if(null===a)throw Error(o(349));var i=t._getVersion,l=i(t._source),s=Hi.current,u=s.useState((function(){return so(a,t,n)})),c=u[1],f=u[0];u=Xi;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,v=d.source;d=d.subscribe;var m=Gi;return e.memoizedState={refs:p,source:t,subscribe:r},s.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!or(l,e)){e=n(t._source),or(f,e)||(c(e),e=ls(m),a.mutableReadLanes|=e&a.pendingLanes),e=a.mutableReadLanes,a.entangledLanes|=e;for(var r=a.entanglements,o=e;0<o;){var s=31-Qt(o),u=1<<s;r[s]|=e,o&=~u}}}),[n,t,r]),s.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=ls(m);a.mutableReadLanes|=r&a.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),or(h,n)&&or(v,t)&&or(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:io,lastRenderedState:f}).dispatch=c=Co.bind(null,Gi,e),u.queue=e,u.baseQueue=null,f=so(a,t,n),u.memoizedState=u.baseState=f),f}function co(e,t,n){return uo(ao(),e,t,n)}function fo(e){var t=ro();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:io,lastRenderedState:e}).dispatch=Co.bind(null,Gi,e),[t.memoizedState,e]}function po(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Gi.updateQueue)?(t={lastEffect:null},Gi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ho(e){return e={current:e},ro().memoizedState=e}function vo(){return ao().memoizedState}function mo(e,t,n,r){var a=ro();Gi.flags|=e,a.memoizedState=po(1|t,n,void 0,void 0===r?null:r)}function go(e,t,n,r){var a=ao();r=void 0===r?null:r;var i=void 0;if(null!==$i){var o=$i.memoizedState;if(i=o.destroy,null!==r&&to(r,o.deps))return void po(t,n,i,r)}Gi.flags|=e,a.memoizedState=po(1|t,n,i,r)}function _o(e,t){return mo(516,4,e,t)}function yo(e,t){return go(516,4,e,t)}function bo(e,t){return go(4,2,e,t)}function Eo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function So(e,t,n){return n=null!=n?n.concat([e]):null,go(4,2,Eo.bind(null,t,e),n)}function ko(){}function Ro(e,t){var n=ao();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&to(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function wo(e,t){var n=ao();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&to(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Io(e,t){var n=za();Va(98>n?98:n,(function(){e(!0)})),Va(97<n?97:n,(function(){var n=Wi.transition;Wi.transition=1;try{e(!1),t()}finally{Wi.transition=n}}))}function Co(e,t,n){var r=os(),a=ls(e),i={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},o=t.pending;if(null===o?i.next=i:(i.next=o.next,o.next=i),t.pending=i,o=e.alternate,e===Gi||null!==o&&o===Gi)Zi=Ji=!0;else{if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var l=t.lastRenderedState,s=o(l,n);if(i.eagerReducer=o,i.eagerState=s,or(s,l))return}catch(e){}ss(e,a,r)}}var Po={readContext:ni,useCallback:eo,useContext:eo,useEffect:eo,useImperativeHandle:eo,useLayoutEffect:eo,useMemo:eo,useReducer:eo,useRef:eo,useState:eo,useDebugValue:eo,useDeferredValue:eo,useTransition:eo,useMutableSource:eo,useOpaqueIdentifier:eo,unstable_isNewReconciler:!1},Do={readContext:ni,useCallback:function(e,t){return ro().memoizedState=[e,void 0===t?null:t],e},useContext:ni,useEffect:_o,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,mo(4,2,Eo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return mo(4,2,e,t)},useMemo:function(e,t){var n=ro();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ro();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Co.bind(null,Gi,e),[r.memoizedState,e]},useRef:ho,useState:fo,useDebugValue:ko,useDeferredValue:function(e){var t=fo(e),n=t[0],r=t[1];return _o((function(){var t=Wi.transition;Wi.transition=1;try{r(e)}finally{Wi.transition=t}}),[e]),n},useTransition:function(){var e=fo(!1),t=e[0];return ho(e=Io.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ro();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},uo(r,e,t,n)},useOpaqueIdentifier:function(){if(Mi){var e=!1,t=function(e){return{$$typeof:A,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Hr++).toString(36))),Error(o(355))})),n=fo(t)[1];return 0==(2&Gi.mode)&&(Gi.flags|=516,po(5,(function(){n("r:"+(Hr++).toString(36))}),void 0,null)),t}return fo(t="r:"+(Hr++).toString(36)),t},unstable_isNewReconciler:!1},xo={readContext:ni,useCallback:Ro,useContext:ni,useEffect:yo,useImperativeHandle:So,useLayoutEffect:bo,useMemo:wo,useReducer:oo,useRef:vo,useState:function(){return oo(io)},useDebugValue:ko,useDeferredValue:function(e){var t=oo(io),n=t[0],r=t[1];return yo((function(){var t=Wi.transition;Wi.transition=1;try{r(e)}finally{Wi.transition=t}}),[e]),n},useTransition:function(){var e=oo(io)[0];return[vo().current,e]},useMutableSource:co,useOpaqueIdentifier:function(){return oo(io)[0]},unstable_isNewReconciler:!1},Oo={readContext:ni,useCallback:Ro,useContext:ni,useEffect:yo,useImperativeHandle:So,useLayoutEffect:bo,useMemo:wo,useReducer:lo,useRef:vo,useState:function(){return lo(io)},useDebugValue:ko,useDeferredValue:function(e){var t=lo(io),n=t[0],r=t[1];return yo((function(){var t=Wi.transition;Wi.transition=1;try{r(e)}finally{Wi.transition=t}}),[e]),n},useTransition:function(){var e=lo(io)[0];return[vo().current,e]},useMutableSource:co,useOpaqueIdentifier:function(){return lo(io)[0]},unstable_isNewReconciler:!1},To=E.ReactCurrentOwner,Fo=!1;function No(e,t,n,r){t.child=null===e?ki(t,null,n,r):Si(t,e.child,n,r)}function Ao(e,t,n,r,a){n=n.render;var i=t.ref;return ti(t,a),r=no(e,t,n,r,i,a),null===e||Fo?(t.flags|=1,No(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,Zo(e,t,a))}function Lo(e,t,n,r,a,i){if(null===e){var o=n.type;return"function"!=typeof o||qs(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=js(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Mo(e,t,o,r,a,i))}return o=e.child,0==(a&i)&&(a=o.memoizedProps,(n=null!==(n=n.compare)?n:sr)(a,r)&&e.ref===t.ref)?Zo(e,t,i):(t.flags|=1,(e=zs(o,r)).ref=t.ref,e.return=t,t.child=e)}function Mo(e,t,n,r,a,i){if(null!==e&&sr(e.memoizedProps,r)&&e.ref===t.ref){if(Fo=!1,0==(i&a))return t.lanes=e.lanes,Zo(e,t,i);0!=(16384&e.flags)&&(Fo=!0)}return zo(e,t,n,r,i)}function Uo(e,t,n){var r=t.pendingProps,a=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},ms(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ms(0,e),null;t.memoizedState={baseLanes:0},ms(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,ms(0,r);return No(e,t,a,n),t.child}function qo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function zo(e,t,n,r,a){var i=pa(n)?fa:ua.current;return i=da(t,i),ti(t,a),n=no(e,t,n,r,i,a),null===e||Fo?(t.flags|=1,No(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,Zo(e,t,a))}function jo(e,t,n,r,a){if(pa(n)){var i=!0;ga(t)}else i=!1;if(ti(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),vi(t,n,r),gi(t,n,r,a),r=!0;else if(null===e){var o=t.stateNode,l=t.memoizedProps;o.props=l;var s=o.context,u=n.contextType;u="object"==typeof u&&null!==u?ni(u):da(t,u=pa(n)?fa:ua.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;f||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==r||s!==u)&&mi(t,o,r,u),ri=!1;var d=t.memoizedState;o.state=d,ui(t,r,o,a),s=t.memoizedState,l!==r||d!==s||ca.current||ri?("function"==typeof c&&(di(t,n,c,r),s=t.memoizedState),(l=ri||hi(t,n,l,r,d,s,u))?(f||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4)):("function"==typeof o.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=s),o.props=r,o.state=s,o.context=u,r=l):("function"==typeof o.componentDidMount&&(t.flags|=4),r=!1)}else{o=t.stateNode,ii(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:Wa(t.type,l),o.props=u,f=t.pendingProps,d=o.context,s="object"==typeof(s=n.contextType)&&null!==s?ni(s):da(t,s=pa(n)?fa:ua.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==f||d!==s)&&mi(t,o,r,s),ri=!1,d=t.memoizedState,o.state=d,ui(t,r,o,a);var h=t.memoizedState;l!==f||d!==h||ca.current||ri?("function"==typeof p&&(di(t,n,p,r),h=t.memoizedState),(u=ri||hi(t,n,u,r,d,h,s))?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,h,s),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),o.props=r,o.state=h,o.context=s,r=u):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Vo(e,t,n,r,i,a)}function Vo(e,t,n,r,a,i){qo(e,t);var o=0!=(64&t.flags);if(!r&&!o)return a&&_a(t,n,!1),Zo(e,t,i);r=t.stateNode,To.current=t;var l=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&o?(t.child=Si(t,e.child,null,i),t.child=Si(t,null,l,i)):No(e,t,l,i),t.memoizedState=r.state,a&&_a(t,n,!0),t.child}function Qo(e){var t=e.stateNode;t.pendingContext?va(0,t.pendingContext,t.pendingContext!==t.context):t.context&&va(0,t.context,!1),Di(e,t.containerInfo)}var Ko,Bo,Ho,Wo={dehydrated:null,retryLane:0};function Yo(e,t,n){var r,a=t.pendingProps,i=Fi.current,o=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(o=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),la(Fi,1&i),null===e?(void 0!==a.fallback&&zi(t),e=a.children,i=a.fallback,o?(e=Go(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Wo,e):"number"==typeof a.unstable_expectedLoadTime?(e=Go(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Wo,t.lanes=33554432,e):((n=Qs({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,o?(a=function(e,t,n,r,a){var i=t.mode,o=e.child;e=o.sibling;var l={mode:"hidden",children:n};return 0==(2&i)&&t.child!==o?((n=t.child).childLanes=0,n.pendingProps=l,null!==(o=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=o,o.nextEffect=null):t.firstEffect=t.lastEffect=null):n=zs(o,l),null!==e?r=zs(e,r):(r=Vs(r,i,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,a.children,a.fallback,n),o=t.child,i=e.child.memoizedState,o.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},o.childLanes=e.childLanes&~n,t.memoizedState=Wo,a):(n=function(e,t,n,r){var a=e.child;return e=a.sibling,n=zs(a,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,a.children,n),t.memoizedState=null,n))}function Go(e,t,n,r){var a=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&a)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Qs(t,a,0,null),n=Vs(n,a,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function $o(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ei(e.return,t)}function Xo(e,t,n,r,a,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a,o.lastEffect=i)}function Jo(e,t,n){var r=t.pendingProps,a=r.revealOrder,i=r.tail;if(No(e,t,r.children,n),0!=(2&(r=Fi.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&$o(e,n);else if(19===e.tag)$o(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(la(Fi,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Ni(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Xo(t,!1,a,n,i,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Ni(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Xo(t,!0,n,null,i,t.lastEffect);break;case"together":Xo(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Zo(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Al|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=zs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function el(e,t){if(!Mi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tl(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return pa(t.type)&&ha(),null;case 3:return xi(),oa(ca),oa(ua),Bi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Vi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ti(t);var i=Pi(Ci.current);if(n=t.type,null!==e&&null!=t.stateNode)Bo(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(o(166));return null}if(e=Pi(wi.current),Vi(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Yr]=t,r[Gr]=l,n){case"dialog":Ir("cancel",r),Ir("close",r);break;case"iframe":case"object":case"embed":Ir("load",r);break;case"video":case"audio":for(e=0;e<Sr.length;e++)Ir(Sr[e],r);break;case"source":Ir("error",r);break;case"img":case"image":case"link":Ir("error",r),Ir("load",r);break;case"details":Ir("toggle",r);break;case"input":ee(r,l),Ir("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Ir("invalid",r);break;case"textarea":se(r,l),Ir("invalid",r)}for(var u in ke(n,l),e=null,l)l.hasOwnProperty(u)&&(i=l[u],"children"===u?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):s.hasOwnProperty(u)&&null!=i&&"onScroll"===u&&Ir("scroll",r));switch(n){case"input":$(r),re(r,l,!0);break;case"textarea":$(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Lr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Yr]=t,e[Gr]=r,Ko(e,t),t.stateNode=e,u=Re(n,r),n){case"dialog":Ir("cancel",e),Ir("close",e),i=r;break;case"iframe":case"object":case"embed":Ir("load",e),i=r;break;case"video":case"audio":for(i=0;i<Sr.length;i++)Ir(Sr[i],e);i=r;break;case"source":Ir("error",e),i=r;break;case"img":case"image":case"link":Ir("error",e),Ir("load",e),i=r;break;case"details":Ir("toggle",e),i=r;break;case"input":ee(e,r),i=Z(e,r),Ir("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=a({},r,{value:void 0}),Ir("invalid",e);break;case"textarea":se(e,r),i=le(e,r),Ir("invalid",e);break;default:i=r}ke(n,i);var c=i;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?Ee(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&me(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(s.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Ir("scroll",e):null!=f&&b(e,l,f,u))}switch(n){case"input":$(e),re(e,r,!1);break;case"textarea":$(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Y(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?oe(e,!!r.multiple,l,!1):null!=r.defaultValue&&oe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Lr)}qr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ho(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));n=Pi(Ci.current),Pi(wi.current),Vi(t)?(r=t.stateNode,n=t.memoizedProps,r[Yr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Yr]=t,t.stateNode=r)}return null;case 13:return oa(Fi),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Vi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Fi.current)?0===Tl&&(Tl=3):(0!==Tl&&3!==Tl||(Tl=4),null===Cl||0==(134217727&Al)&&0==(134217727&Ll)||ds(Cl,Dl))),(r||n)&&(t.flags|=4),null);case 4:return xi(),null===e&&Pr(t.stateNode.containerInfo),null;case 10:return Za(t),null;case 17:return pa(t.type)&&ha(),null;case 19:if(oa(Fi),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(u=r.rendering))if(l)el(r,!1);else{if(0!==Tl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=Ni(e))){for(t.flags|=64,el(r,!1),null!==(l=u.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return la(Fi,1&Fi.current|2),t.child}e=e.sibling}null!==r.tail&&qa()>zl&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Ni(u))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),el(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Mi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*qa()-r.renderingStartTime>zl&&1073741824!==n&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=qa(),n.sibling=null,t=Fi.current,la(Fi,l?1&t|2:1&t),n):null;case 23:case 24:return gs(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(o(156,t.tag))}function nl(e){switch(e.tag){case 1:pa(e.type)&&ha();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(xi(),oa(ca),oa(ua),Bi(),0!=(64&(t=e.flags)))throw Error(o(285));return e.flags=-4097&t|64,e;case 5:return Ti(e),null;case 13:return oa(Fi),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return oa(Fi),null;case 4:return xi(),null;case 10:return Za(e),null;case 23:case 24:return gs(),null;default:return null}}function rl(e,t){try{var n="",r=t;do{n+=H(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function al(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ko=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Bo=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Pi(wi.current);var o,l=null;switch(n){case"input":i=Z(e,i),r=Z(e,r),l=[];break;case"option":i=ie(e,i),r=ie(e,r),l=[];break;case"select":i=a({},i,{value:void 0}),r=a({},r,{value:void 0}),l=[];break;case"textarea":i=le(e,i),r=le(e,r),l=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Lr)}for(f in ke(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var u=i[f];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(s.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(u=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&c!==u&&(null!=c||null!=u))if("style"===f)if(u){for(o in u)!u.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in c)c.hasOwnProperty(o)&&u[o]!==c[o]&&(n||(n={}),n[o]=c[o])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(s.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Ir("scroll",e),l||u===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===A?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Ho=function(e,t,n,r){n!==r&&(t.flags|=4)};var il="function"==typeof WeakMap?WeakMap:Map;function ol(e,t,n){(n=oi(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Kl||(Kl=!0,Bl=r),al(0,t)},n}function ll(e,t,n){(n=oi(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return al(0,t),r(a)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Hl?Hl=new Set([this]):Hl.add(this),al(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var sl="function"==typeof WeakSet?WeakSet:Set;function ul(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ns(e,t)}else t.current=null}function cl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Wa(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Qr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(o(163))}function fl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var a=e;r=a.next,0!=(4&(a=a.tag))&&0!=(1&a)&&(Os(n,e),xs(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Wa(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ci(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ci(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&qr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Et(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(o(163))}function dl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var a=n.memoizedProps.style;a=null!=a&&a.hasOwnProperty("display")?a.display:null,r.style.display=be("display",a)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function pl(e,t){if(ba&&"function"==typeof ba.onCommitFiberUnmount)try{ba.onCommitFiberUnmount(ya,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,a=r.destroy;if(r=r.tag,void 0!==a)if(0!=(4&r))Os(t,n);else{r=t;try{a()}catch(e){Ns(r,e)}}n=n.next}while(n!==e)}break;case 1:if(ul(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ns(t,e)}break;case 5:ul(t);break;case 4:yl(e,t)}}function hl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function vl(e){return 5===e.tag||3===e.tag||4===e.tag}function ml(e){e:{for(var t=e.return;null!==t;){if(vl(t))break e;t=t.return}throw Error(o(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(o(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?gl(e,n,t):_l(e,n,t)}function gl(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Lr));else if(4!==r&&null!==(e=e.child))for(gl(e,t,n),e=e.sibling;null!==e;)gl(e,t,n),e=e.sibling}function _l(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(_l(e,t,n),e=e.sibling;null!==e;)_l(e,t,n),e=e.sibling}function yl(e,t){for(var n,r,a=t,i=!1;;){if(!i){i=a.return;e:for(;;){if(null===i)throw Error(o(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===a.tag||6===a.tag){e:for(var l=e,s=a,u=s;;)if(pl(l,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===s)break e;for(;null===u.sibling;){if(null===u.return||u.return===s)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(l=n,s=a.stateNode,8===l.nodeType?l.parentNode.removeChild(s):l.removeChild(s)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(pl(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(i=!1)}a.sibling.return=a.return,a=a.sibling}}function bl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var a=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Gr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Re(e,a),t=Re(e,r),a=0;a<i.length;a+=2){var l=i[a],s=i[a+1];"style"===l?Ee(n,s):"dangerouslySetInnerHTML"===l?me(n,s):"children"===l?ge(n,s):b(n,l,s,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?oe(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?oe(n,!!r.multiple,r.defaultValue,!0):oe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(o(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,Et(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(ql=qa(),dl(t.child,!0)),void El(t);case 19:return void El(t);case 17:return;case 23:case 24:return void dl(t,null!==t.memoizedState)}throw Error(o(163))}function El(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new sl),t.forEach((function(t){var r=Ls.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Sl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var kl=Math.ceil,Rl=E.ReactCurrentDispatcher,wl=E.ReactCurrentOwner,Il=0,Cl=null,Pl=null,Dl=0,xl=0,Ol=ia(0),Tl=0,Fl=null,Nl=0,Al=0,Ll=0,Ml=0,Ul=null,ql=0,zl=1/0;function jl(){zl=qa()+500}var Vl,Ql=null,Kl=!1,Bl=null,Hl=null,Wl=!1,Yl=null,Gl=90,$l=[],Xl=[],Jl=null,Zl=0,es=null,ts=-1,ns=0,rs=0,as=null,is=!1;function os(){return 0!=(48&Il)?qa():-1!==ts?ts:ts=qa()}function ls(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===za()?1:2;if(0===ns&&(ns=Nl),0!==Ha.transition){0!==rs&&(rs=null!==Ul?Ul.pendingLanes:0),e=ns;var t=4186112&~rs;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=za(),e=qt(0!=(4&Il)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),ns)}function ss(e,t,n){if(50<Zl)throw Zl=0,es=null,Error(o(185));if(null===(e=us(e,t)))return null;Vt(e,t,n),e===Cl&&(Ll|=t,4===Tl&&ds(e,Dl));var r=za();1===t?0!=(8&Il)&&0==(48&Il)?ps(e):(cs(e,n),0===Il&&(jl(),Ka())):(0==(4&Il)||98!==r&&99!==r||(null===Jl?Jl=new Set([e]):Jl.add(e)),cs(e,n)),Ul=e}function us(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cs(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,a=e.pingedLanes,i=e.expirationTimes,l=e.pendingLanes;0<l;){var s=31-Qt(l),u=1<<s,c=i[s];if(-1===c){if(0==(u&r)||0!=(u&a)){c=t,Lt(u);var f=At;i[s]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);l&=~u}if(r=Mt(e,e===Cl?Dl:0),t=At,0===r)null!==n&&(n!==Fa&&ka(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Fa&&ka(n)}15===t?(n=ps.bind(null,e),null===Aa?(Aa=[n],La=Sa(Pa,Ba)):Aa.push(n),n=Fa):n=14===t?Qa(99,ps.bind(null,e)):Qa(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(o(358,e))}}(t),fs.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function fs(e){if(ts=-1,rs=ns=0,0!=(48&Il))throw Error(o(327));var t=e.callbackNode;if(Ds()&&e.callbackNode!==t)return null;var n=Mt(e,e===Cl?Dl:0);if(0===n)return null;var r=n,a=Il;Il|=16;var i=bs();for(Cl===e&&Dl===r||(jl(),_s(e,r));;)try{ks();break}catch(t){ys(e,t)}if(Ja(),Rl.current=i,Il=a,null!==Pl?r=0:(Cl=null,Dl=0,r=Tl),0!=(Nl&Ll))_s(e,0);else if(0!==r){if(2===r&&(Il|=64,e.hydrate&&(e.hydrate=!1,Qr(e.containerInfo)),0!==(n=Ut(e))&&(r=Es(e,n))),1===r)throw t=Fl,_s(e,0),ds(e,n),cs(e,qa()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(o(345));case 2:Is(e);break;case 3:if(ds(e,n),(62914560&n)===n&&10<(r=ql+500-qa())){if(0!==Mt(e,0))break;if(((a=e.suspendedLanes)&n)!==n){os(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=jr(Is.bind(null,e),r);break}Is(e);break;case 4:if(ds(e,n),(4186112&n)===n)break;for(r=e.eventTimes,a=-1;0<n;){var l=31-Qt(n);i=1<<l,(l=r[l])>a&&(a=l),n&=~i}if(n=a,10<(n=(120>(n=qa()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*kl(n/1960))-n)){e.timeoutHandle=jr(Is.bind(null,e),n);break}Is(e);break;case 5:Is(e);break;default:throw Error(o(329))}}return cs(e,qa()),e.callbackNode===t?fs.bind(null,e):null}function ds(e,t){for(t&=~Ml,t&=~Ll,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Qt(t),r=1<<n;e[n]=-1,t&=~r}}function ps(e){if(0!=(48&Il))throw Error(o(327));if(Ds(),e===Cl&&0!=(e.expiredLanes&Dl)){var t=Dl,n=Es(e,t);0!=(Nl&Ll)&&(n=Es(e,t=Mt(e,t)))}else n=Es(e,t=Mt(e,0));if(0!==e.tag&&2===n&&(Il|=64,e.hydrate&&(e.hydrate=!1,Qr(e.containerInfo)),0!==(t=Ut(e))&&(n=Es(e,t))),1===n)throw n=Fl,_s(e,0),ds(e,t),cs(e,qa()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Is(e),cs(e,qa()),null}function hs(e,t){var n=Il;Il|=1;try{return e(t)}finally{0===(Il=n)&&(jl(),Ka())}}function vs(e,t){var n=Il;Il&=-2,Il|=8;try{return e(t)}finally{0===(Il=n)&&(jl(),Ka())}}function ms(e,t){la(Ol,xl),xl|=t,Nl|=t}function gs(){xl=Ol.current,oa(Ol)}function _s(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Vr(n)),null!==Pl)for(n=Pl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ha();break;case 3:xi(),oa(ca),oa(ua),Bi();break;case 5:Ti(r);break;case 4:xi();break;case 13:case 19:oa(Fi);break;case 10:Za(r);break;case 23:case 24:gs()}n=n.return}Cl=e,Pl=zs(e.current,null),Dl=xl=Nl=t,Tl=0,Fl=null,Ml=Ll=Al=0}function ys(e,t){for(;;){var n=Pl;try{if(Ja(),Hi.current=Po,Ji){for(var r=Gi.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}Ji=!1}if(Yi=0,Xi=$i=Gi=null,Zi=!1,wl.current=null,null===n||null===n.return){Tl=1,Fl=t,Pl=null;break}e:{var i=e,o=n.return,l=n,s=t;if(t=Dl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&Fi.current),d=o;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var v=d.memoizedProps;p=void 0!==v.fallback&&(!0!==v.unstable_avoidThisFallback||!f)}}if(p){var m=d.updateQueue;if(null===m){var g=new Set;g.add(u),d.updateQueue=g}else m.add(u);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var _=oi(-1,1);_.tag=2,li(l,_)}l.lanes|=1;break e}s=void 0,l=t;var y=i.pingCache;if(null===y?(y=i.pingCache=new il,s=new Set,y.set(u,s)):void 0===(s=y.get(u))&&(s=new Set,y.set(u,s)),!s.has(l)){s.add(l);var b=As.bind(null,i,u,l);u.then(b,b)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);s=Error((W(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Tl&&(Tl=2),s=rl(s,l),d=o;do{switch(d.tag){case 3:i=s,d.flags|=4096,t&=-t,d.lanes|=t,si(d,ol(0,i,t));break e;case 1:i=s;var E=d.type,S=d.stateNode;if(0==(64&d.flags)&&("function"==typeof E.getDerivedStateFromError||null!==S&&"function"==typeof S.componentDidCatch&&(null===Hl||!Hl.has(S)))){d.flags|=4096,t&=-t,d.lanes|=t,si(d,ll(d,i,t));break e}}d=d.return}while(null!==d)}ws(n)}catch(e){t=e,Pl===n&&null!==n&&(Pl=n=n.return);continue}break}}function bs(){var e=Rl.current;return Rl.current=Po,null===e?Po:e}function Es(e,t){var n=Il;Il|=16;var r=bs();for(Cl===e&&Dl===t||_s(e,t);;)try{Ss();break}catch(t){ys(e,t)}if(Ja(),Il=n,Rl.current=r,null!==Pl)throw Error(o(261));return Cl=null,Dl=0,Tl}function Ss(){for(;null!==Pl;)Rs(Pl)}function ks(){for(;null!==Pl&&!Ra();)Rs(Pl)}function Rs(e){var t=Vl(e.alternate,e,xl);e.memoizedProps=e.pendingProps,null===t?ws(e):Pl=t,wl.current=null}function ws(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=tl(n,t,xl)))return void(Pl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&xl)||0==(4&n.mode)){for(var r=0,a=n.child;null!==a;)r|=a.lanes|a.childLanes,a=a.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=nl(t)))return n.flags&=2047,void(Pl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Pl=t);Pl=t=e}while(null!==t);0===Tl&&(Tl=5)}function Is(e){var t=za();return Va(99,Cs.bind(null,e,t)),null}function Cs(e,t){do{Ds()}while(null!==Yl);if(0!=(48&Il))throw Error(o(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null;var r=n.lanes|n.childLanes,a=r,i=e.pendingLanes&~a;e.pendingLanes=a,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=a,e.mutableReadLanes&=a,e.entangledLanes&=a,a=e.entanglements;for(var l=e.eventTimes,s=e.expirationTimes;0<i;){var u=31-Qt(i),c=1<<u;a[u]=0,l[u]=-1,s[u]=-1,i&=~c}if(null!==Jl&&0==(24&r)&&Jl.has(e)&&Jl.delete(e),e===Cl&&(Pl=Cl=null,Dl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(a=Il,Il|=32,wl.current=null,Mr=Yt,pr(l=dr())){if("selectionStart"in l)s={start:l.selectionStart,end:l.selectionEnd};else e:if(s=(s=l.ownerDocument)&&s.defaultView||window,(c=s.getSelection&&s.getSelection())&&0!==c.rangeCount){s=c.anchorNode,i=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{s.nodeType,u.nodeType}catch(e){s=null;break e}var f=0,d=-1,p=-1,h=0,v=0,m=l,g=null;t:for(;;){for(var _;m!==s||0!==i&&3!==m.nodeType||(d=f+i),m!==u||0!==c&&3!==m.nodeType||(p=f+c),3===m.nodeType&&(f+=m.nodeValue.length),null!==(_=m.firstChild);)g=m,m=_;for(;;){if(m===l)break t;if(g===s&&++h===i&&(d=f),g===u&&++v===c&&(p=f),null!==(_=m.nextSibling))break;g=(m=g).parentNode}m=_}s=-1===d||-1===p?null:{start:d,end:p}}else s=null;s=s||{start:0,end:0}}else s=null;Ur={focusedElem:l,selectionRange:s},Yt=!1,as=null,is=!1,Ql=r;do{try{Ps()}catch(e){if(null===Ql)throw Error(o(330));Ns(Ql,e),Ql=Ql.nextEffect}}while(null!==Ql);as=null,Ql=r;do{try{for(l=e;null!==Ql;){var y=Ql.flags;if(16&y&&ge(Ql.stateNode,""),128&y){var b=Ql.alternate;if(null!==b){var E=b.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&y){case 2:ml(Ql),Ql.flags&=-3;break;case 6:ml(Ql),Ql.flags&=-3,bl(Ql.alternate,Ql);break;case 1024:Ql.flags&=-1025;break;case 1028:Ql.flags&=-1025,bl(Ql.alternate,Ql);break;case 4:bl(Ql.alternate,Ql);break;case 8:yl(l,s=Ql);var S=s.alternate;hl(s),null!==S&&hl(S)}Ql=Ql.nextEffect}}catch(e){if(null===Ql)throw Error(o(330));Ns(Ql,e),Ql=Ql.nextEffect}}while(null!==Ql);if(E=Ur,b=dr(),y=E.focusedElem,l=E.selectionRange,b!==y&&y&&y.ownerDocument&&fr(y.ownerDocument.documentElement,y)){null!==l&&pr(y)&&(b=l.start,void 0===(E=l.end)&&(E=b),"selectionStart"in y?(y.selectionStart=b,y.selectionEnd=Math.min(E,y.value.length)):(E=(b=y.ownerDocument||document)&&b.defaultView||window).getSelection&&(E=E.getSelection(),s=y.textContent.length,S=Math.min(l.start,s),l=void 0===l.end?S:Math.min(l.end,s),!E.extend&&S>l&&(s=l,l=S,S=s),s=cr(y,S),i=cr(y,l),s&&i&&(1!==E.rangeCount||E.anchorNode!==s.node||E.anchorOffset!==s.offset||E.focusNode!==i.node||E.focusOffset!==i.offset)&&((b=b.createRange()).setStart(s.node,s.offset),E.removeAllRanges(),S>l?(E.addRange(b),E.extend(i.node,i.offset)):(b.setEnd(i.node,i.offset),E.addRange(b))))),b=[];for(E=y;E=E.parentNode;)1===E.nodeType&&b.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof y.focus&&y.focus(),y=0;y<b.length;y++)(E=b[y]).element.scrollLeft=E.left,E.element.scrollTop=E.top}Yt=!!Mr,Ur=Mr=null,e.current=n,Ql=r;do{try{for(y=e;null!==Ql;){var k=Ql.flags;if(36&k&&fl(y,Ql.alternate,Ql),128&k){b=void 0;var R=Ql.ref;if(null!==R){var w=Ql.stateNode;switch(Ql.tag){case 5:b=w;break;default:b=w}"function"==typeof R?R(b):R.current=b}}Ql=Ql.nextEffect}}catch(e){if(null===Ql)throw Error(o(330));Ns(Ql,e),Ql=Ql.nextEffect}}while(null!==Ql);Ql=null,Na(),Il=a}else e.current=n;if(Wl)Wl=!1,Yl=e,Gl=t;else for(Ql=r;null!==Ql;)t=Ql.nextEffect,Ql.nextEffect=null,8&Ql.flags&&((k=Ql).sibling=null,k.stateNode=null),Ql=t;if(0===(r=e.pendingLanes)&&(Hl=null),1===r?e===es?Zl++:(Zl=0,es=e):Zl=0,n=n.stateNode,ba&&"function"==typeof ba.onCommitFiberRoot)try{ba.onCommitFiberRoot(ya,n,void 0,64==(64&n.current.flags))}catch(e){}if(cs(e,qa()),Kl)throw Kl=!1,e=Bl,Bl=null,e;return 0!=(8&Il)||Ka(),null}function Ps(){for(;null!==Ql;){var e=Ql.alternate;is||null===as||(0!=(8&Ql.flags)?Ze(Ql,as)&&(is=!0):13===Ql.tag&&Sl(e,Ql)&&Ze(Ql,as)&&(is=!0));var t=Ql.flags;0!=(256&t)&&cl(e,Ql),0==(512&t)||Wl||(Wl=!0,Qa(97,(function(){return Ds(),null}))),Ql=Ql.nextEffect}}function Ds(){if(90!==Gl){var e=97<Gl?97:Gl;return Gl=90,Va(e,Ts)}return!1}function xs(e,t){$l.push(t,e),Wl||(Wl=!0,Qa(97,(function(){return Ds(),null})))}function Os(e,t){Xl.push(t,e),Wl||(Wl=!0,Qa(97,(function(){return Ds(),null})))}function Ts(){if(null===Yl)return!1;var e=Yl;if(Yl=null,0!=(48&Il))throw Error(o(331));var t=Il;Il|=32;var n=Xl;Xl=[];for(var r=0;r<n.length;r+=2){var a=n[r],i=n[r+1],l=a.destroy;if(a.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===i)throw Error(o(330));Ns(i,e)}}for(n=$l,$l=[],r=0;r<n.length;r+=2){a=n[r],i=n[r+1];try{var s=a.create;a.destroy=s()}catch(e){if(null===i)throw Error(o(330));Ns(i,e)}}for(s=e.current.firstEffect;null!==s;)e=s.nextEffect,s.nextEffect=null,8&s.flags&&(s.sibling=null,s.stateNode=null),s=e;return Il=t,Ka(),!0}function Fs(e,t,n){li(e,t=ol(0,t=rl(n,t),1)),t=os(),null!==(e=us(e,1))&&(Vt(e,1,t),cs(e,t))}function Ns(e,t){if(3===e.tag)Fs(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Fs(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r))){var a=ll(n,e=rl(t,e),1);if(li(n,a),a=os(),null!==(n=us(n,1)))Vt(n,1,a),cs(n,a);else if("function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function As(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=os(),e.pingedLanes|=e.suspendedLanes&n,Cl===e&&(Dl&n)===n&&(4===Tl||3===Tl&&(62914560&Dl)===Dl&&500>qa()-ql?_s(e,0):Ml|=n),cs(e,t)}function Ls(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===za()?1:2:(0===ns&&(ns=Nl),0===(t=zt(62914560&~ns))&&(t=4194304))),n=os(),null!==(e=us(e,t))&&(Vt(e,t,n),cs(e,n))}function Ms(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Us(e,t,n,r){return new Ms(e,t,n,r)}function qs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zs(e,t){var n=e.alternate;return null===n?((n=Us(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function js(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)qs(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case R:return Vs(n.children,a,i,t);case L:l=8,a|=16;break;case w:l=8,a|=1;break;case I:return(e=Us(12,n,t,8|a)).elementType=I,e.type=I,e.lanes=i,e;case x:return(e=Us(13,n,t,a)).type=x,e.elementType=x,e.lanes=i,e;case O:return(e=Us(19,n,t,a)).elementType=O,e.lanes=i,e;case M:return Qs(n,a,i,t);case U:return(e=Us(24,n,t,a)).elementType=U,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:l=10;break e;case P:l=9;break e;case D:l=11;break e;case T:l=14;break e;case F:l=16,r=null;break e;case N:l=22;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Us(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Vs(e,t,n,r){return(e=Us(7,e,r,t)).lanes=n,e}function Qs(e,t,n,r){return(e=Us(23,e,r,t)).elementType=M,e.lanes=n,e}function Ks(e,t,n){return(e=Us(6,e,null,t)).lanes=n,e}function Bs(e,t,n){return(t=Us(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Hs(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=jt(0),this.expirationTimes=jt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=jt(0),this.mutableSourceEagerHydrationData=null}function Ws(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ys(e,t,n,r){var a=t.current,i=os(),l=ls(a);e:if(n){t:{if(Ge(n=n._reactInternals)!==n||1!==n.tag)throw Error(o(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(pa(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(o(171))}if(1===n.tag){var u=n.type;if(pa(u)){n=ma(n,u,s);break e}}n=s}else n=sa;return null===t.context?t.context=n:t.pendingContext=n,(t=oi(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),li(a,t),ss(a,l,i),l}function Gs(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function $s(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Xs(e,t){$s(e,t),(e=e.alternate)&&$s(e,t)}function Js(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Hs(e,t,null!=n&&!0===n.hydrate),t=Us(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ai(t),e[$r]=n.current,Pr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var a=(t=r[e])._getVersion;a=a(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a)}this._internalRoot=n}function Zs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function eu(e,t,n,r,a){var i=n._reactRootContainer;if(i){var o=i._internalRoot;if("function"==typeof a){var l=a;a=function(){var e=Gs(o);l.call(e)}}Ys(t,o,e,a)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Js(e,0,t?{hydrate:!0}:void 0)}(n,r),o=i._internalRoot,"function"==typeof a){var s=a;a=function(){var e=Gs(o);s.call(e)}}vs((function(){Ys(t,o,e,a)}))}return Gs(o)}function tu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zs(t))throw Error(o(200));return Ws(e,t,null,n)}Vl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ca.current)Fo=!0;else{if(0==(n&r)){switch(Fo=!1,t.tag){case 3:Qo(t),Qi();break;case 5:Oi(t);break;case 1:pa(t.type)&&ga(t);break;case 4:Di(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var a=t.type._context;la(Ya,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Yo(e,t,n):(la(Fi,1&Fi.current),null!==(t=Zo(e,t,n))?t.sibling:null);la(Fi,1&Fi.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Jo(e,t,n);t.flags|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),la(Fi,Fi.current),r)break;return null;case 23:case 24:return t.lanes=0,Uo(e,t,n)}return Zo(e,t,n)}Fo=0!=(16384&e.flags)}else Fo=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=da(t,ua.current),ti(t,n),a=no(null,t,r,e,a,n),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,pa(r)){var i=!0;ga(t)}else i=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,ai(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&di(t,r,l,e),a.updater=pi,t.stateNode=a,a._reactInternals=t,gi(t,r,e,n),t=Vo(null,t,r,!0,i,n)}else t.tag=0,No(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(i=a._init)(a._payload),t.type=a,i=t.tag=function(e){if("function"==typeof e)return qs(e)?1:0;if(null!=e){if((e=e.$$typeof)===D)return 11;if(e===T)return 14}return 2}(a),e=Wa(a,e),i){case 0:t=zo(null,t,a,e,n);break e;case 1:t=jo(null,t,a,e,n);break e;case 11:t=Ao(null,t,a,e,n);break e;case 14:t=Lo(null,t,a,Wa(a.type,e),r,n);break e}throw Error(o(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,zo(e,t,r,a=t.elementType===r?a:Wa(r,a),n);case 1:return r=t.type,a=t.pendingProps,jo(e,t,r,a=t.elementType===r?a:Wa(r,a),n);case 3:if(Qo(t),r=t.updateQueue,null===e||null===r)throw Error(o(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,ii(e,t),ui(t,r,null,n),(r=t.memoizedState.element)===a)Qi(),t=Zo(e,t,n);else{if((i=(a=t.stateNode).hydrate)&&(Li=Kr(t.stateNode.containerInfo.firstChild),Ai=t,i=Mi=!0),i){if(null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)(i=e[a])._workInProgressVersionPrimary=e[a+1],Ki.push(i);for(n=ki(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else No(e,t,r,n),Qi();t=t.child}return t;case 5:return Oi(t),null===e&&zi(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,zr(r,a)?l=null:null!==i&&zr(r,i)&&(t.flags|=16),qo(e,t),No(e,t,l,n),t.child;case 6:return null===e&&zi(t),null;case 13:return Yo(e,t,n);case 4:return Di(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Si(t,null,r,n):No(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Ao(e,t,r,a=t.elementType===r?a:Wa(r,a),n);case 7:return No(e,t,t.pendingProps,n),t.child;case 8:case 12:return No(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,l=t.memoizedProps,i=a.value;var s=t.type._context;if(la(Ya,s._currentValue),s._currentValue=i,null!==l)if(s=l.value,0==(i=or(s,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(l.children===a.children&&!ca.current){t=Zo(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){l=s.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===s.tag&&((c=oi(-1,n&-n)).tag=2,li(s,c)),s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),ei(s.return,n),u.lanes|=n;break}c=c.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}No(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(i=t.pendingProps).children,ti(t,n),r=r(a=ni(a,i.unstable_observedBits)),t.flags|=1,No(e,t,r,n),t.child;case 14:return i=Wa(a=t.type,t.pendingProps),Lo(e,t,a,i=Wa(a.type,i),r,n);case 15:return Mo(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Wa(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,pa(r)?(e=!0,ga(t)):e=!1,ti(t,n),vi(t,r,a),gi(t,r,a,n),Vo(null,t,r,!0,e,n);case 19:return Jo(e,t,n);case 23:case 24:return Uo(e,t,n)}throw Error(o(156,t.tag))},Js.prototype.render=function(e){Ys(e,this._internalRoot,null,null)},Js.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ys(null,e,null,(function(){t[$r]=null}))},et=function(e){13===e.tag&&(ss(e,4,os()),Xs(e,4))},tt=function(e){13===e.tag&&(ss(e,67108864,os()),Xs(e,67108864))},nt=function(e){if(13===e.tag){var t=os(),n=ls(e);ss(e,n,t),Xs(e,n)}},rt=function(e,t){return t()},Ie=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ta(r);if(!a)throw Error(o(90));X(r),ne(r,a)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&oe(e,!!n.multiple,t,!1)}},Te=hs,Fe=function(e,t,n,r,a){var i=Il;Il|=4;try{return Va(98,e.bind(null,t,n,r,a))}finally{0===(Il=i)&&(jl(),Ka())}},Ne=function(){0==(49&Il)&&(function(){if(null!==Jl){var e=Jl;Jl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cs(e,qa())}))}Ka()}(),Ds())},Ae=function(e,t){var n=Il;Il|=2;try{return e(t)}finally{0===(Il=n)&&(jl(),Ka())}};var nu={Events:[Zr,ea,ta,xe,Oe,Ds,{current:!1}]},ru={findFiberByHostInstance:Jr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},au={bundleType:ru.bundleType,version:ru.version,rendererPackageName:ru.rendererPackageName,rendererConfig:ru.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:ru.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var iu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!iu.isDisabled&&iu.supportsFiber)try{ya=iu.inject(au),ba=iu}catch(ve){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nu,t.createPortal=tu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw Error(o(268,Object.keys(e)))}return null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Il;if(0!=(48&n))return e(t);Il|=1;try{if(e)return Va(99,e.bind(null,t))}finally{Il=n,Ka()}},t.hydrate=function(e,t,n){if(!Zs(t))throw Error(o(200));return eu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Zs(t))throw Error(o(200));return eu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zs(e))throw Error(o(40));return!!e._reactRootContainer&&(vs((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[$r]=null}))})),!0)},t.unstable_batchedUpdates=hs,t.unstable_createPortal=function(e,t){return tu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zs(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return eu(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,o=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,v=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,_=n?Symbol.for("react.fundamental"):60117,y=n?Symbol.for("react.responder"):60118,b=n?Symbol.for("react.scope"):60119;function E(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case l:case o:case p:return e;default:switch(e=e&&e.$$typeof){case u:case d:case m:case v:case s:return e;default:return t}}case a:return t}}}function S(e){return E(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=m,t.Memo=v,t.Portal=a,t.Profiler=l,t.StrictMode=o,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||E(e)===c},t.isConcurrentMode=S,t.isContextConsumer=function(e){return E(e)===u},t.isContextProvider=function(e){return E(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return E(e)===d},t.isFragment=function(e){return E(e)===i},t.isLazy=function(e){return E(e)===m},t.isMemo=function(e){return E(e)===v},t.isPortal=function(e){return E(e)===a},t.isProfiler=function(e){return E(e)===l},t.isStrictMode=function(e){return E(e)===o},t.isSuspense=function(e){return E(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===l||e===o||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===v||e.$$typeof===s||e.$$typeof===u||e.$$typeof===d||e.$$typeof===_||e.$$typeof===y||e.$$typeof===b||e.$$typeof===g)},t.typeOf=E},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},6849:(e,t,n)=>{e.exports=n(1291)},7912:(e,t,n)=>{e.exports=n(921)},2578:(e,t,n)=>{e.exports=n(534)},7994:e=>{"use strict";function t(e){return e.displayName||e.name||"Component"}e.exports={getComponentName:t,getContainerName:function(e){return"Relay("+t(e)+")"}}},1291:(e,t,n)=>{"use strict";var r=n(7294),a=n(4311).__internal.createRelayContext;e.exports=a(r)},5536:(e,t,n)=>{"use strict";var r=n(4914),a=r(n(4942)),i=r(n(5998)),o=r(n(2904)),l=r(n(1991)),s=r(n(4172)),u=n(7294),c=n(1305),f=n(3549),d=(n(3885),n(7994).getContainerName),p=n(6196).assertRelayContext,h=n(4311),v=h.createFragmentSpecResolver,m=h.getDataIDsFromObject,g=h.isScalarAndEqual;function _(e,t){var n,r,f=d(e);return r=n=function(n){function r(e){var r,a;a=n.call(this,e)||this,(0,s.default)((0,o.default)(a),"_handleFragmentDataUpdate",(function(){var e=a.state.resolver;a.setState((function(t){return e===t.resolver?{data:t.resolver.resolve(),relayProp:y(t.relayProp.environment)}:null}))}));var i=p(e.__relayContext),l=null!==(r=e.__rootIsQueryRenderer)&&void 0!==r&&r,u=v(i,f,t,e,l);return a.state={data:u.resolve(),prevProps:e,prevPropsContext:i,relayProp:y(i.environment),resolver:u},a}(0,l.default)(r,n),r.getDerivedStateFromProps=function(e,n){var r,a=n.prevProps,i=p(e.__relayContext),o=null!==(r=e.__rootIsQueryRenderer)&&void 0!==r&&r,l=m(t,a),s=m(t,e),u=n.resolver;if(n.prevPropsContext.environment!==i.environment||!c(l,s))return{data:(u=v(i,f,t,e,o)).resolve(),prevPropsContext:i,prevProps:e,relayProp:y(i.environment),resolver:u};u.setProps(e);var d=u.resolve();return d!==n.data?{data:d,prevProps:e,prevPropsContext:i,relayProp:y(i.environment)}:null};var d=r.prototype;return d.componentDidMount=function(){this._subscribeToNewResolver(),this._rerenderIfStoreHasChanged()},d.componentDidUpdate=function(e,t){this.state.resolver!==t.resolver&&(t.resolver.dispose(),this._subscribeToNewResolver()),this._rerenderIfStoreHasChanged()},d.componentWillUnmount=function(){this.state.resolver.dispose()},d.shouldComponentUpdate=function(e,n){if(n.data!==this.state.data)return!0;for(var r=Object.keys(e),a=0;a<r.length;a++){var i=r[a];if("__relayContext"===i){if(n.prevPropsContext.environment!==this.state.prevPropsContext.environment)return!0}else if(!t.hasOwnProperty(i)&&!g(e[i],this.props[i]))return!0}return!1},d._rerenderIfStoreHasChanged=function(){var e=this.state,t=e.data,n=e.resolver.resolve();t!==n&&this.setState({data:n})},d._subscribeToNewResolver=function(){this.state.resolver.setCallback(this._handleFragmentDataUpdate)},d.render=function(){var t=this.props,n=t.componentRef,r=(t.__relayContext,t.__rootIsQueryRenderer,(0,i.default)(t,["componentRef","__relayContext","__rootIsQueryRenderer"]));return u.createElement(e,(0,a.default)((0,a.default)((0,a.default)({},r),this.state.data),{},{ref:n,relay:this.state.relayProp}))},r}(u.Component),(0,s.default)(n,"displayName",f),r}function y(e){return{environment:e}}e.exports={createContainer:function(e,t){return f(e,t,_)}}},7102:(e,t,n)=>{"use strict";var r=n(7294),a=n(1291),i=n(2037),o=r.useLayoutEffect,l=r.useState,s=r.useRef,u=r.useMemo,c=n(4311),f=c.createOperationDescriptor,d=(c.deepFreeze,c.getRequest),p=n(1305),h={rootIsQueryRenderer:!0};e.exports=function(e){var t,n,c=e.environment,v=e.query,m=e.variables,g=e.render,_=(t=m,n=r.useRef(t),p(n.current,t)||(n.current=t),n.current),y=u((function(){var e=d(v);return f(e,_)}),[v,_]),b=u((function(){return{environment:c}}),[c]),E=s(null),S=l(null)[1],k=s(null),R=u((function(){c.check(y);var e=c.lookup(y.fragment);E.current=e.data;var t=c.retain(y),n=c.subscribe(e,(function(e){E.current=e.data,S(E.current)})),r=!1;return k.current&&k.current(),k.current=function(){r||(r=!0,k.current=null,t.dispose(),n.dispose())},e}),[c,y]);return o((function(){var e=k.current;return function(){e&&e()}}),[R]),r.createElement(a.Provider,{value:b},r.createElement(i.Provider,{value:h},g({props:E.current})))}},3843:(e,t,n)=>{"use strict";var r=n(4914),a=r(n(1611)),i=r(n(5998)),o=r(n(2904)),l=r(n(1991)),s=r(n(4172)),u=r(n(4942)),c=n(7294),f=n(1291),d=n(7082),p=n(1305),h=n(3549),v=n(3885),m=n(1143),g=(n(3620),n(7994)),_=g.getComponentName,y=g.getContainerName,b=n(6196).assertRelayContext,E=n(4311),S=E.ConnectionInterface,k=E.Observable,R=E.createFragmentSpecResolver,w=E.createOperationDescriptor,I=E.getDataIDsFromObject,C=E.getRequest,P=(E.getSelector,E.getVariablesFromObject),D=E.isScalarAndEqual,x="forward";function O(e){return"function"==typeof e?{error:e,complete:e,unsubscribe:function(t){"function"==typeof e&&e()}}:e||{}}e.exports={createContainer:function(e,t,n){return h(e,t,(function(e,t){return function(e,t,n){_(e);var r,h,g=y(e),E=function(e){var t=null,n=!1;for(var r in e){var a=e[r],i=a.metadata&&a.metadata.connection;void 0!==a.metadata&&(n=!0),i&&(1!==i.length&&m(!1),t&&m(!1),t=(0,u.default)((0,u.default)({},i[0]),{},{fragmentName:r}))}return n&&null===t&&m(!1),t||{}}(t),T=n.getConnectionFromProps||function(e){var t=e.path;return t||m(!1),function(n){for(var r=n[e.fragmentName],a=0;a<t.length;a++){if(!r||"object"!=typeof r)return null;r=r[t[a]]}return r}}(E),F=n.direction||E.direction;F||m(!1);var N=n.getFragmentVariables||function(e){var t=e.count;return t||m(!1),function(e,n){return(0,u.default)((0,u.default)({},e),{},(0,s.default)({},t,n))}}(E);return h=r=function(r){function h(e){var n,a;a=r.call(this,e)||this,(0,s.default)((0,o.default)(a),"_handleFragmentDataUpdate",(function(){a.setState({data:a._resolver.resolve()})})),(0,s.default)((0,o.default)(a),"_hasMore",(function(){var e=a._getConnectionData();return!!(e&&e.hasMore&&e.cursor)})),(0,s.default)((0,o.default)(a),"_isLoading",(function(){return!!a._refetchSubscription})),(0,s.default)((0,o.default)(a),"_refetchConnection",(function(e,t,n){if(!a._canFetchPage("refetchConnection"))return{dispose:function(){}};a._refetchVariables=n;var r={count:e,cursor:null,totalCount:e};return{dispose:a._fetchPage(r,O(t),{force:!0}).unsubscribe}})),(0,s.default)((0,o.default)(a),"_loadMore",(function(e,t,n){if(!a._canFetchPage("loadMore"))return{dispose:function(){}};var r=O(t),i=a._getConnectionData();if(!i)return k.create((function(e){return e.complete()})).subscribe(r),null;var o=i.edgeCount+e;if(n&&n.force)return a._refetchConnection(o,t);var l=S.get(),s=(l.END_CURSOR,l.START_CURSOR,{count:e,cursor:i.cursor,totalCount:o});return{dispose:a._fetchPage(s,r,n).unsubscribe}}));var i=b(e.__relayContext),l=null!==(n=e.__rootIsQueryRenderer)&&void 0!==n&&n;return a._isARequestInFlight=!1,a._refetchSubscription=null,a._refetchVariables=null,a._resolver=R(i,g,t,e,l,a._handleFragmentDataUpdate),a.state={data:a._resolver.resolve(),prevContext:i,contextForChildren:i,relayProp:a._buildRelayProp(i)},a._isUnmounted=!1,a._hasFetched=!1,a}(0,l.default)(h,r);var _=h.prototype;return _.componentDidMount=function(){this._isUnmounted=!1},_.UNSAFE_componentWillReceiveProps=function(e){var n,r=b(e.__relayContext),a=null!==(n=e.__rootIsQueryRenderer)&&void 0!==n&&n,i=I(t,this.props),o=I(t,e),l=v(t,this.props),s=v(t,e);r.environment===this.state.prevContext.environment&&p(l,s)&&p(i,o)?this._hasFetched||this._resolver.setProps(e):(this._cleanup(),this._resolver=R(r,g,t,e,a,this._handleFragmentDataUpdate),this.setState({prevContext:r,contextForChildren:r,relayProp:this._buildRelayProp(r)}));var u=this._resolver.resolve();u!==this.state.data&&this.setState({data:u})},_.componentWillUnmount=function(){this._isUnmounted=!0,this._cleanup()},_.shouldComponentUpdate=function(e,n){if(n.data!==this.state.data||n.relayProp!==this.state.relayProp)return!0;for(var r=Object.keys(e),a=0;a<r.length;a++){var i=r[a];if("__relayContext"===i){if(n.prevContext.environment!==this.state.prevContext.environment)return!0}else if(!t.hasOwnProperty(i)&&!D(e[i],this.props[i]))return!0}return!1},_._buildRelayProp=function(e){return{hasMore:this._hasMore,isLoading:this._isLoading,loadMore:this._loadMore,refetchConnection:this._refetchConnection,environment:e.environment}},_._getConnectionData=function(){var e=this.props,t=(e.componentRef,(0,i.default)(e,["componentRef"])),n=(0,u.default)((0,u.default)({},t),this.state.data),r=T(n);if(null==r)return null;var a=S.get(),o=a.EDGES,l=a.PAGE_INFO,s=a.HAS_NEXT_PAGE,c=a.HAS_PREV_PAGE,f=a.END_CURSOR,d=a.START_CURSOR;"object"!=typeof r&&m(!1);var p=r[o],h=r[l];if(null==p||null==h)return null;Array.isArray(p)||m(!1),"object"!=typeof h&&m(!1);var v=F===x?h[s]:h[c],g=F===x?h[f]:h[d];return"boolean"!=typeof v||0!==p.length&&void 0===g?null:{cursor:g,edgeCount:p.length,hasMore:v}},_._getQueryFetcher=function(){return this._queryFetcher||(this._queryFetcher=new d),this._queryFetcher},_._canFetchPage=function(e){return!this._isUnmounted},_._fetchPage=function(e,r,a){var o,l=this,s=b(this.props.__relayContext).environment,c=this.props,f=(c.componentRef,c.__relayContext,c.__rootIsQueryRenderer,(0,i.default)(c,["componentRef","__relayContext","__rootIsQueryRenderer"])),d=(0,u.default)((0,u.default)({},f),this.state.data),h=v(t,f);o=P(t,f),o=(0,u.default)((0,u.default)((0,u.default)({},h),o),this._refetchVariables);var g=n.getVariables(d,{count:e.count,cursor:e.cursor},o);("object"!=typeof g||null===g)&&m(!1),g=(0,u.default)((0,u.default)({},g),this._refetchVariables),o=(0,u.default)((0,u.default)({},g),o);var _=a?{force:!!a.force}:void 0;null!=_&&null!=(null==a?void 0:a.metadata)&&(_.metadata=null==a?void 0:a.metadata);var y=C(n.query),E=w(y,g,_),S=null;this._refetchSubscription&&this._refetchSubscription.unsubscribe(),this._hasFetched=!0;var R=function(){l._refetchSubscription===S&&(l._refetchSubscription=null,l._isARequestInFlight=!1)};return this._isARequestInFlight=!0,S=this._getQueryFetcher().execute({environment:s,operation:E,preservePreviousReferences:!0}).mergeMap((function(t){return k.create((function(t){!function(t,n){var r=l._resolver.resolve();l._resolver.setVariables(N(o,e.totalCount),E.request.node);var a=l._resolver.resolve();p(r,a)?n():l.setState({data:a,contextForChildren:{environment:l.props.__relayContext.environment}},n)}(0,(function(){t.next(),t.complete()}))}))})).do({error:R,complete:R,unsubscribe:R}).subscribe(r||{}),this._refetchSubscription=this._isARequestInFlight?S:null,S},_._cleanup=function(){this._resolver.dispose(),this._refetchVariables=null,this._hasFetched=!1,this._refetchSubscription&&(this._refetchSubscription.unsubscribe(),this._refetchSubscription=null,this._isARequestInFlight=!1),this._queryFetcher&&this._queryFetcher.dispose()},_.render=function(){var t=this.props,n=t.componentRef,r=(t.__relayContext,t.__rootIsQueryRenderer,(0,i.default)(t,["componentRef","__relayContext","__rootIsQueryRenderer"]));return c.createElement(f.Provider,{value:this.state.contextForChildren},c.createElement(e,(0,a.default)({},r,this.state.data,{ref:n,relay:this.state.relayProp})))},h}(c.Component),(0,s.default)(r,"displayName",g),h}(e,t,n)}))}}},7082:(e,t,n)=>{"use strict";var r=n(4914)(n(4172)),a=n(1143),i=n(4311),o=i.createOperationDescriptor,l=i.isRelayModernEnvironment,s=i.__internal.fetchQuery,u=function(){function e(e){(0,r.default)(this,"_selectionReferences",[]),(0,r.default)(this,"_callOnDataChangeWhenSet",!1),null!=e&&(this._cacheSelectionReference=e.cacheSelectionReference,this._selectionReferences=e.selectionReferences)}var t=e.prototype;return t.getSelectionReferences=function(){return{cacheSelectionReference:this._cacheSelectionReference,selectionReferences:this._selectionReferences}},t.lookupInStore=function(e,t,n){return"store-and-network"!==n&&"store-or-network"!==n||"available"!==e.check(t).status?null:(this._retainCachedOperation(e,t),e.lookup(t.fragment))},t.execute=function(e){var t=this,n=e.environment,r=e.operation,a=e.preservePreviousReferences,i=void 0!==a&&a,o=n.retain(r),u=function(){t._selectionReferences=t._selectionReferences.concat(o)},c=function(){i||t.disposeSelectionReferences(),t._selectionReferences=t._selectionReferences.concat(o)},f=function(){t._selectionReferences=t._selectionReferences.concat(o)};return l(n)?s(n,r).do({error:u,complete:c,unsubscribe:f}):n.execute({operation:r}).do({error:u,complete:c,unsubscribe:f})},t.setOnDataChange=function(e){this._fetchOptions||a(!1),"function"==typeof e&&(this._fetchOptions.onDataChangeCallbacks=this._fetchOptions.onDataChangeCallbacks||[],this._fetchOptions.onDataChangeCallbacks.push(e),this._callOnDataChangeWhenSet&&(null!=this._error?e({error:this._error}):null!=this._snapshot&&e({snapshot:this._snapshot})))},t.fetch=function(e,t){var n,r=this,a=e.environment,i=e.operation,l=e.onDataChange,s=!1;this.disposeRequest();var u=this._fetchOptions&&this._fetchOptions.onDataChangeCallbacks;this._fetchOptions={environment:a,onDataChangeCallbacks:u||[],operation:i},l&&-1===this._fetchOptions.onDataChangeCallbacks.indexOf(l)&&this._fetchOptions.onDataChangeCallbacks.push(l);var c=t?o(i.request.node,i.request.variables,t):i,f=this.execute({environment:a,operation:c}).finally((function(){r._pendingRequest=null})).subscribe({next:function(){r._callOnDataChangeWhenSet=!0,r._error=null,r._onQueryDataAvailable({notifyFirstResult:s})},error:function(e){r._callOnDataChangeWhenSet=!0,r._error=e,r._snapshot=null;var t=r._fetchOptions&&r._fetchOptions.onDataChangeCallbacks;s?t&&t.forEach((function(t){t({error:e})})):n=e}});if(this._pendingRequest={dispose:function(){f.unsubscribe()}},s=!0,n)throw n;return this._snapshot},t.retry=function(e){return this._fetchOptions||a(!1),this.fetch({environment:this._fetchOptions.environment,operation:this._fetchOptions.operation,onDataChange:null},e)},t.dispose=function(){this.disposeRequest(),this.disposeSelectionReferences()},t.disposeRequest=function(){this._error=null,this._snapshot=null,this._pendingRequest&&this._pendingRequest.dispose(),this._rootSubscription&&(this._rootSubscription.dispose(),this._rootSubscription=null)},t._retainCachedOperation=function(e,t){this._disposeCacheSelectionReference(),this._cacheSelectionReference=e.retain(t)},t._disposeCacheSelectionReference=function(){this._cacheSelectionReference&&this._cacheSelectionReference.dispose(),this._cacheSelectionReference=null},t.disposeSelectionReferences=function(){this._disposeCacheSelectionReference(),this._selectionReferences.forEach((function(e){return e.dispose()})),this._selectionReferences=[]},t._onQueryDataAvailable=function(e){var t=this,n=e.notifyFirstResult;this._fetchOptions||a(!1);var r=this._fetchOptions,i=r.environment,o=r.onDataChangeCallbacks,l=r.operation;if(!this._snapshot&&(this._snapshot=i.lookup(l.fragment),this._rootSubscription=i.subscribe(this._snapshot,(function(e){if(null!=t._fetchOptions){var n=t._fetchOptions.onDataChangeCallbacks;Array.isArray(n)&&n.forEach((function(t){return t({snapshot:e})}))}})),this._snapshot&&n&&Array.isArray(o))){var s=this._snapshot;o.forEach((function(e){return e({snapshot:s})}))}},e}();e.exports=u},7943:(e,t,n)=>{"use strict";var r=n(4914),a=r(n(4942)),i=r(n(1991)),o=n(7294),l=n(1291),s=n(7082),u=n(2037),c=n(1305),f=n(4311),d=f.createOperationDescriptor,p=(f.deepFreeze,f.getRequest),h={},v={rootIsQueryRenderer:!0},m=function(e){function t(t){var n;n=e.call(this,t)||this;var r,i,o={handleDataChange:null,handleRetryAfterError:null};if(t.query){var l=t.query;i=_(p(l).params,t.variables),r=h[i]?h[i].queryFetcher:new s}else r=new s;return n.state=(0,a.default)({prevPropsEnvironment:t.environment,prevPropsVariables:t.variables,prevQuery:t.query,queryFetcher:r,retryCallbacks:o},y(t,r,o,i)),n}(0,i.default)(t,e),t.getDerivedStateFromProps=function(e,t){if(t.prevQuery!==e.query||t.prevPropsEnvironment!==e.environment||!c(t.prevPropsVariables,e.variables)){var n,r=e.query,i=t.queryFetcher.getSelectionReferences();if(t.queryFetcher.disposeRequest(),r){var o=_(p(r).params,e.variables);n=h[o]?h[o].queryFetcher:new s(i)}else n=new s(i);return(0,a.default)({prevQuery:e.query,prevPropsEnvironment:e.environment,prevPropsVariables:e.variables,queryFetcher:n},y(e,n,t.retryCallbacks))}return null};var n=t.prototype;return n.componentDidMount=function(){var e=this,t=this.state,n=t.retryCallbacks,r=t.queryFetcher,a=t.requestCacheKey;a&&delete h[a],n.handleDataChange=function(t){var n=null==t.error?null:t.error,r=null==t.snapshot?null:t.snapshot;e.setState((function(e){var t=e.requestCacheKey;return t&&delete h[t],r===e.snapshot&&n===e.error?null:{renderProps:g(n,r,e.queryFetcher,e.retryCallbacks),snapshot:r,requestCacheKey:null}}))},n.handleRetryAfterError=function(t){return e.setState((function(e){var t=e.requestCacheKey;return t&&delete h[t],{renderProps:{error:null,props:null,retry:null},requestCacheKey:null}}))},this.props.query&&r.setOnDataChange(n.handleDataChange)},n.componentDidUpdate=function(){var e=this.state.requestCacheKey;e&&(delete h[e],delete this.state.requestCacheKey)},n.componentWillUnmount=function(){this.state.queryFetcher.dispose()},n.shouldComponentUpdate=function(e,t){return e.render!==this.props.render||t.renderProps!==this.state.renderProps},n.render=function(){var e=this.state,t=e.renderProps,n=e.relayContext;return o.createElement(l.Provider,{value:n},o.createElement(u.Provider,{value:v},this.props.render(t)))},t}(o.Component);function g(e,t,n,r){return{error:e||null,props:t?t.data:null,retry:function(t){var a=n.retry(t);a&&"function"==typeof r.handleDataChange?r.handleDataChange({snapshot:a}):e&&"function"==typeof r.handleRetryAfterError&&r.handleRetryAfterError(e)}}}function _(e,t){return JSON.stringify({id:e.cacheID?e.cacheID:e.id,variables:t})}function y(e,t,n,r){var a=e.environment,i=e.query,o=e.variables,l=e.cacheConfig,s=a;if(!i)return t.dispose(),{error:null,relayContext:{environment:s},renderProps:{error:null,props:{},retry:null},requestCacheKey:null};var u=p(i),c=d(u,o,l),f={environment:s};if("string"==typeof r&&h[r]){var v=h[r].snapshot;return v?{error:null,relayContext:f,renderProps:g(null,v,t,n),snapshot:v,requestCacheKey:r}:{error:null,relayContext:f,renderProps:{error:null,props:null,retry:null},snapshot:null,requestCacheKey:r}}try{var m=t.lookupInStore(s,c,e.fetchPolicy),y=t.fetch({environment:s,onDataChange:n.handleDataChange,operation:c})||m;return r=r||_(u.params,e.variables),h[r]={queryFetcher:t,snapshot:y},y?{error:null,relayContext:f,renderProps:g(null,y,t,n),snapshot:y,requestCacheKey:r}:{error:null,relayContext:f,renderProps:{error:null,props:null,retry:null},snapshot:null,requestCacheKey:r}}catch(e){return{error:e,relayContext:f,renderProps:g(e,null,t,n),snapshot:null,requestCacheKey:r}}}e.exports=m},2037:(e,t,n)=>{"use strict";var r=n(7294);e.exports=r.createContext({rootIsQueryRenderer:!1})},7474:(e,t,n)=>{"use strict";var r=n(4914),a=r(n(1611)),i=r(n(5998)),o=r(n(4942)),l=r(n(2904)),s=r(n(1991)),u=r(n(4172)),c=n(7294),f=n(1291),d=n(7082),p=n(1305),h=n(3549),v=n(3885),m=(n(3620),n(7994).getContainerName),g=n(6196).assertRelayContext,_=n(4311),y=_.Observable,b=_.createFragmentSpecResolver,E=_.createOperationDescriptor,S=_.getDataIDsFromObject,k=_.getRequest,R=(_.getSelector,_.getVariablesFromObject),w=_.isScalarAndEqual;function I(e,t){return{environment:e,refetch:t}}e.exports={createContainer:function(e,t,n){return h(e,t,(function(e,t){return function(e,t,n){var r,h,_=m(e);return h=r=function(r){function h(e){var a,i;i=r.call(this,e)||this,(0,u.default)((0,l.default)(i),"_handleFragmentDataUpdate",(function(){var e=i.state.resolver;i.setState((function(t){return e===t.resolver?{data:t.resolver.resolve()}:null}))})),(0,u.default)((0,l.default)(i),"_refetch",(function(e,r,a,l){if(i._isUnmounted)return{dispose:function(){}};var s=g(i.props.__relayContext).environment,u=v(t,i.props),c="function"==typeof e?e(i._getFragmentVariables()):e;c=(0,o.default)((0,o.default)({},u),c);var f=r?(0,o.default)((0,o.default)({},c),r):c,d=l?{force:!!l.force}:void 0;null!=d&&null!=(null==l?void 0:l.metadata)&&(d.metadata=null==l?void 0:l.metadata);var p,h="function"==typeof a?{next:a,error:a}:a||{},m=k(n),_=E(m,c,d);return i.state.localVariables=c,i._refetchSubscription&&i._refetchSubscription.unsubscribe(),null!=i._getQueryFetcher().lookupInStore(s,_,null==l?void 0:l.fetchPolicy)?(i.state.resolver.setVariables(f,_.request.node),i.setState((function(e){return{data:e.resolver.resolve(),contextForChildren:{environment:i.props.__relayContext.environment}}}),(function(){h.next&&h.next(),h.complete&&h.complete()})),{dispose:function(){}}):(i._getQueryFetcher().execute({environment:s,operation:_,preservePreviousReferences:!0}).mergeMap((function(e){return i.state.resolver.setVariables(f,_.request.node),y.create((function(e){return i.setState((function(e){return{data:e.resolver.resolve(),contextForChildren:{environment:i.props.__relayContext.environment}}}),(function(){e.next(),e.complete()}))}))})).finally((function(){i._refetchSubscription===p&&(i._refetchSubscription=null)})).subscribe((0,o.default)((0,o.default)({},h),{},{start:function(e){i._refetchSubscription=p=e,h.start&&h.start(e)}})),{dispose:function(){p&&p.unsubscribe()}})}));var s=g(e.__relayContext),c=null!==(a=e.__rootIsQueryRenderer)&&void 0!==a&&a;i._refetchSubscription=null;var f=b(s,_,t,e,c);return i.state={data:f.resolve(),localVariables:null,prevProps:e,prevPropsContext:s,contextForChildren:s,relayProp:I(s.environment,i._refetch),resolver:f},i._isUnmounted=!1,i}(0,s.default)(h,r);var m=h.prototype;return m.componentDidMount=function(){this._isUnmounted=!1,this._subscribeToNewResolver()},m.componentDidUpdate=function(e,t){this.state.resolver!==t.resolver&&(t.resolver.dispose(),this._queryFetcher&&this._queryFetcher.dispose(),this._refetchSubscription&&this._refetchSubscription.unsubscribe(),this._subscribeToNewResolver())},h.getDerivedStateFromProps=function(e,n){var r,a=n.prevProps,i=g(e.__relayContext),o=null!==(r=e.__rootIsQueryRenderer)&&void 0!==r&&r,l=S(t,a),s=S(t,e),u=v(t,a),c=v(t,e),f=n.resolver;if(n.prevPropsContext.environment!==i.environment||!p(u,c)||!p(l,s))return{data:(f=b(i,_,t,e,o)).resolve(),localVariables:null,prevProps:e,prevPropsContext:i,contextForChildren:i,relayProp:I(i.environment,n.relayProp.refetch),resolver:f};n.localVariables||f.setProps(e);var d=f.resolve();return d!==n.data?{data:d,prevProps:e}:null},m.componentWillUnmount=function(){this._isUnmounted=!0,this.state.resolver.dispose(),this._queryFetcher&&this._queryFetcher.dispose(),this._refetchSubscription&&this._refetchSubscription.unsubscribe()},m.shouldComponentUpdate=function(e,n){if(n.data!==this.state.data||n.relayProp!==this.state.relayProp)return!0;for(var r=Object.keys(e),a=0;a<r.length;a++){var i=r[a];if("__relayContext"===i){if(this.state.prevPropsContext.environment!==n.prevPropsContext.environment)return!0}else if(!t.hasOwnProperty(i)&&!w(e[i],this.props[i]))return!0}return!1},m._subscribeToNewResolver=function(){var e=this.state,t=e.data,n=e.resolver;n.setCallback(this._handleFragmentDataUpdate);var r=n.resolve();t!==r&&this.setState({data:r})},m._getFragmentVariables=function(){return R(t,this.props)},m._getQueryFetcher=function(){return this._queryFetcher||(this._queryFetcher=new d),this._queryFetcher},m.render=function(){var t=this.props,n=t.componentRef,r=(t.__relayContext,t.__rootIsQueryRenderer,(0,i.default)(t,["componentRef","__relayContext","__rootIsQueryRenderer"])),o=this.state,l=o.relayProp,s=o.contextForChildren;return c.createElement(f.Provider,{value:s},c.createElement(e,(0,a.default)({},r,this.state.data,{ref:n,relay:l})))},h}(c.Component),(0,u.default)(r,"displayName",_),h}(e,t,n)}))}}},6196:(e,t,n)=>{"use strict";var r=n(1143),a=n(4107);function i(e){return"object"==typeof e&&null!==e&&!Array.isArray(e)&&a(e.environment)}e.exports={assertRelayContext:function(e){return i(e)||r(!1),e},isRelayContext:i}},5310:(e,t,n)=>{"use strict";var r=n(1143);e.exports=function(e,t){for(var n in t&&"object"==typeof t||r(!1),t)if(t.hasOwnProperty(n)){var a=t[n];(!a||"object"!=typeof a&&"function"!=typeof a)&&r(!1)}}},3549:(e,t,n)=>{"use strict";var r=n(4914)(n(1611)),a=n(7294),i=n(1291),o=n(2037),l=n(5310),s=n(1143),u=n(4625),c=n(7994),f=c.getComponentName,d=c.getContainerName,p=n(4311).getFragment;e.exports=function(e,t,n){var c=d(e);l(f(e),t);var h={};for(var v in t)h[v]=p(t[v]);var m=n(e,h);function g(e,t){var n,l=u(i);null==l&&s(!1);var c=u(o);return a.createElement(m,(0,r.default)({},e,{__relayContext:l,__rootIsQueryRenderer:null!==(n=null==c?void 0:c.rootIsQueryRenderer)&&void 0!==n&&n,componentRef:e.componentRef||t}))}return m.displayName=c,g.displayName=c,a.forwardRef(g)}},3885:(e,t,n)=>{"use strict";var r=n(4914)(n(4942)),a=n(4311).getSelector;e.exports=function(e,t){var n={};return Object.keys(e).forEach((function(i){var o,l,s,u=e[i],c=t[i],f=a(u,c),d=null!=f&&"PluralReaderSelector"===f.kind?null!==(o=null===(l=f.selectors[0])||void 0===l?void 0:l.owner.variables)&&void 0!==o?o:{}:null!==(s=null==f?void 0:f.owner.variables)&&void 0!==s?s:{};n=(0,r.default)((0,r.default)({},n),d)})),n}},921:(e,t,n)=>{"use strict";var r=n(3916),a=n(8613),i=n(4311),o=n(4473),l=n(8264),s=n(9444),u=n(9703),c=n(3498),f=n(2064),d=n(9776),p=n(2530),h=n(179),v=n(8924),m=n(1102),g=n(8747),_=n(9204).loadQuery;e.exports={ConnectionHandler:i.ConnectionHandler,applyOptimisticMutation:i.applyOptimisticMutation,commitLocalUpdate:i.commitLocalUpdate,commitMutation:i.commitMutation,graphql:i.graphql,readInlineData:i.readInlineData,requestSubscription:i.requestSubscription,EntryPointContainer:r,RelayEnvironmentProvider:a,fetchQuery:i.fetchQuery,loadQuery:_,loadEntryPoint:o,useFragment:s,useLazyLoadQuery:u,useEntryPointLoader:l,useQueryLoader:p,useMutation:c,usePaginationFragment:f,usePreloadedQuery:d,useRefetchableFragment:h,useRelayEnvironment:v,useSubscribeToInvalidationState:m,useSubscription:g}},534:(e,t,n)=>{"use strict";var r=n(3916),a=n(1291),i=n(5536),o=n(7102),l=n(3843),s=n(7943),u=n(7474),c=n(8613),f=n(4311),d=n(4473),p=n(8264),h=n(9444),v=n(9703),m=n(3498),g=n(2064),_=n(9776),y=n(2530),b=n(179),E=n(8924),S=n(1102),k=n(8747),R=n(9204).loadQuery;e.exports={ConnectionHandler:f.ConnectionHandler,QueryRenderer:s,LocalQueryRenderer:o,MutationTypes:f.MutationTypes,RangeOperations:f.RangeOperations,ReactRelayContext:a,applyOptimisticMutation:f.applyOptimisticMutation,commitLocalUpdate:f.commitLocalUpdate,commitMutation:f.commitMutation,createFragmentContainer:i.createContainer,createPaginationContainer:l.createContainer,createRefetchContainer:u.createContainer,fetchQuery_DEPRECATED:f.fetchQuery_DEPRECATED,graphql:f.graphql,readInlineData:f.readInlineData,requestSubscription:f.requestSubscription,EntryPointContainer:r,RelayEnvironmentProvider:c,fetchQuery:f.fetchQuery,loadQuery:R,loadEntryPoint:d,useFragment:h,useLazyLoadQuery:v,useEntryPointLoader:p,useQueryLoader:y,useMutation:m,usePaginationFragment:g,usePreloadedQuery:_,useRefetchableFragment:b,useRelayEnvironment:E,useSubscribeToInvalidationState:S,useSubscription:k}},4107:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&null!==e&&"function"==typeof e.check&&"function"==typeof e.lookup&&"function"==typeof e.retain&&"function"==typeof e.execute&&"function"==typeof e.subscribe}},4625:(e,t,n)=>{"use strict";var r=n(7294).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,a=r.ReactCurrentDispatcher,i=r.ReactCurrentOwner;e.exports=function(e){return(null!=a?a.current:i.currentDispatcher).readContext(e)}},3916:(e,t,n)=>{"use strict";var r=n(7580),a=n(7294),i=n(8924),o=(n(3620),n(7294)),l=o.useContext,s=o.useEffect;e.exports=function(e){var t=e.entryPointReference,n=e.props,o=t.getComponent,u=t.queries,c=t.entryPoints,f=t.extraProps,d=t.rootModuleID,p=o(),h=l(r),v=i();return s((function(){v.__log({name:"entrypoint.root.consume",profilerContext:h,rootModuleID:d})}),[v,h,d]),a.createElement(p,{entryPoints:c,extraProps:f,props:n,queries:u})}},7339:(e,t,n)=>{"use strict";var r=n(4914),a=r(n(4942)),i=r(n(6489)),o=n(4339),l=n(1143),s=n(4311),u=s.__internal.getPromiseForActiveRequest,c=s.getFragmentIdentifier,f=s.getSelector,d=s.isPromise,p=s.recycleNodesInto,h=s.reportMissingRequiredFields,v="function"==typeof WeakMap,m=Object.freeze([]);function g(e,t){return Array.isArray(t)?{cacheKey:e,snapshot:t,data:t.map((function(e){return e.data}))}:{cacheKey:e,snapshot:t,data:t.data}}var _=function(){function e(e){this._environment=e,this._cache=o.create(1e6)}var t=e.prototype;return t.read=function(e,t,n,r){return this.readWithIdentifier(e,t,c(e,t),n,r)},t.readWithIdentifier=function(e,t,n,r,a){var i,o=this._environment;if(null==t)return{cacheKey:n,data:null,snapshot:null};if(!0===(null==e||null===(i=e.metadata)||void 0===i?void 0:i.plural)&&(Array.isArray(t)||l(!1),0===t.length))return{cacheKey:n,data:m,snapshot:m};var s=this._cache.get(n);if(null!=s){if(d(s))throw s;if(s.snapshot)return this._reportMissingRequiredFieldsInSnapshot(s.snapshot),s}var u=f(e,t);null==u&&l(!1);var c="PluralReaderSelector"===u.kind?u.selectors.map((function(e){return o.lookup(e)})):o.lookup(u),p="PluralReaderSelector"===u.kind?u.selectors[0].owner:u.owner;if(!function(e){return Array.isArray(e)?e.some((function(e){return e.isMissingData})):e.isMissingData}(c)){this._reportMissingRequiredFieldsInSnapshot(c);var h=g(n,c);return this._cache.set(n,h),h}var v=this._getAndSavePromiseForFragmentRequestInFlight(n,e,p);if(null!=v)throw v;return this._reportMissingRequiredFieldsInSnapshot(c),g(n,c)},t._reportMissingRequiredFieldsInSnapshot=function(e){var t=this;Array.isArray(e)?e.forEach((function(e){null!=e.missingRequiredFields&&h(t._environment,e.missingRequiredFields)})):null!=e.missingRequiredFields&&h(this._environment,e.missingRequiredFields)},t.readSpec=function(e,t,n){var r={};for(var a in e)r[a]=this.read(e[a],t[a],n,a);return r},t.subscribe=function(e,t){var n=this,r=this._environment,a=e.cacheKey,i=e.snapshot;if(!i)return{dispose:function(){}};var o=this.checkMissedUpdates(e),s=o[0],u=o[1];s&&t();var c=[];return Array.isArray(i)?(Array.isArray(u)||l(!1),u.forEach((function(e,i){c.push(r.subscribe(e,(function(e){n._updatePluralSnapshot(a,u,e,i),t()})))}))):((null==u||Array.isArray(u))&&l(!1),c.push(r.subscribe(u,(function(e){n._cache.set(a,g(a,e)),t()})))),{dispose:function(){c.map((function(e){return e.dispose()})),n._cache.delete(a)}}},t.subscribeSpec=function(e,t){var n=this,r=Object.keys(e).map((function(r){return n.subscribe(e[r],t)}));return{dispose:function(){r.forEach((function(e){e.dispose()}))}}},t.checkMissedUpdates=function(e){var t=this._environment,n=e.cacheKey,r=e.snapshot;if(!r)return[!1,null];var i=!1;if(Array.isArray(r)){var o=[];return r.forEach((function(e,n){var r=t.lookup(e.selector),l=e.data,s=r.data,u=p(l,s);u!==l&&(r=(0,a.default)((0,a.default)({},r),{},{data:u}),i=!0),o[n]=r})),i&&this._cache.set(n,g(n,o)),[i,o]}var l=t.lookup(r.selector),s=r.data,u=l.data,c=p(s,u);return l={data:c,isMissingData:l.isMissingData,seenRecords:l.seenRecords,selector:l.selector,missingRequiredFields:l.missingRequiredFields},c!==s&&(this._cache.set(n,g(n,l)),i=!0),[i,l]},t.checkMissedUpdatesSpec=function(e){var t=this;return Object.keys(e).some((function(n){return t.checkMissedUpdates(e[n])[0]}))},t._getAndSavePromiseForFragmentRequestInFlight=function(e,t,n){var r,a=this,i=this._environment,o=null!==(r=u(i,n))&&void 0!==r?r:function(e,t){return e.getOperationTracker().getPromiseForPendingOperationsAffectingOwner(t)}(i,n);if(!o)return null;var l=o.then((function(){a._cache.delete(e)})).catch((function(t){a._cache.delete(e)}));this._cache.set(e,l);var s=n.node.params.name,c=t.name,f=s===c?"Relay(".concat(s,")"):"Relay(".concat(s,":").concat(c,")");return l.displayName=f,l},t._updatePluralSnapshot=function(e,t,n,r){var a=this._cache.get(e);if(d(a))y(n.selector.node.name);else{var o=null==a?void 0:a.snapshot;if(!o||Array.isArray(o)){var l=o?(0,i.default)(o):(0,i.default)(t);l[r]=n,this._cache.set(e,g(e,l))}else y(n.selector.node.name)}},e}();function y(e){l(!1)}function b(e){return new _(e)}var E=v?new WeakMap:new Map;e.exports={createFragmentResource:b,getFragmentResourceForEnvironment:function(e){var t=E.get(e);if(t)return t;var n=b(e);return E.set(e,n),n}}},4339:(e,t,n)=>{"use strict";var r=n(1143),a=function(){function e(e){this._capacity=e,this._capacity>0||r(!1),this._map=new Map}var t=e.prototype;return t.set=function(e,t){if(this._map.delete(e),this._map.set(e,t),this._map.size>this._capacity){var n=this._map.keys().next();n.done||this._map.delete(n.value)}},t.get=function(e){var t=this._map.get(e);return null!=t&&(this._map.delete(e),this._map.set(e,t)),t},t.has=function(e){return this._map.has(e)},t.delete=function(e){this._map.delete(e)},t.size=function(){return this._map.size},t.capacity=function(){return this._capacity-this._map.size},t.clear=function(){this._map.clear()},e}();e.exports={create:function(e){return new a(e)}}},7580:(e,t,n)=>{"use strict";var r=n(7294).createContext({wrapPrepareQueryResource:function(e){return e()}});e.exports=r},9598:(e,t,n)=>{"use strict";var r=n(4914),a=r(n(4942)),i=r(n(4172)),o=n(4339),l=n(1143),s=n(4311).isPromise,u="store-or-network",c="function"==typeof WeakMap;function f(e,t,n,r,a){var i=null!=n?n:u,o=null!=r?r:e.UNSTABLE_getDefaultRenderPolicy(),l="".concat(i,"-").concat(o,"-").concat(t.request.identifier);return null!=a?"".concat(l,"-").concat(a):l}function d(e,t){var n={__id:e.fragment.dataID,__fragments:(0,i.default)({},e.fragment.node.name,e.request.variables),__fragmentOwner:e.request};return{cacheIdentifier:t,fragmentNode:e.request.node.fragment,fragmentRef:n,operation:e}}var p=2e5;function h(e,t,n,r,a){var i=n,o=0,s=null,u=null,c=r,f=function(e){return 1==++o&&(s=e.retain(t)),{dispose:function(){0===(o=Math.max(0,o-1))&&(null==s&&l(!1),s.dispose(),s=null),a(d)}}},d={cacheIdentifier:e,id:p++,getValue:function(){return i},setValue:function(e){i=e},getRetainCount:function(){return o},getNetworkSubscription:function(){return c},setNetworkSubscription:function(e){null!=c&&c.unsubscribe(),c=e},temporaryRetain:function(e){if(e.isServer())return{dispose:function(){}};var t=f(e),n=null,r=function(){clearTimeout(n),n=null,u=null,t.dispose(),o<=0&&null!=c&&c.unsubscribe()};return n=setTimeout(r,3e5),null!=u&&u(),u=r,{dispose:function(){u&&u()}}},permanentRetain:function(e){var t=f(e);return null!=u&&(u(),u=null),{dispose:function(){t.dispose(),o<=0&&null!=c&&c.unsubscribe()}}}};return d}var v=function(){function e(e){var t=this;(0,i.default)(this,"_clearCacheEntry",(function(e){e.getRetainCount()<=0&&t._cache.delete(e.cacheIdentifier)})),this._environment=e,this._cache=o.create(1e3)}var t=e.prototype;return t.prepare=function(e,t,n,r,a,i,o){var l=f(this._environment,e,n,r,i);return this.prepareWithIdentifier(l,e,t,n,r,a,o)},t.prepareWithIdentifier=function(e,t,n,r,i,o,l){var c=this._environment,f=null!=r?r:u,d=null!=i?i:c.UNSTABLE_getDefaultRenderPolicy(),p=this._cache.get(e),h=null;null==p&&(p=this._fetchAndSaveQuery(e,t,n,f,d,l,(0,a.default)((0,a.default)({},o),{},{unsubscribe:function(e){null!=h&&h.dispose();var t=null==o?void 0:o.unsubscribe;t&&t(e)}}))),h=p.temporaryRetain(c);var v=p.getValue();if(s(v)||v instanceof Error)throw v;return v},t.retain=function(e,t){var n=this._environment,r=e.cacheIdentifier,a=e.operation,i=this._getOrCreateCacheEntry(r,a,e,null),o=i.permanentRetain(n);return n.__log({name:"queryresource.retain",profilerContext:t,resourceID:i.id}),{dispose:function(){o.dispose()}}},t.TESTS_ONLY__getCacheEntry=function(e,t,n,r){var a=f(this._environment,e,t,n,r);return this._cache.get(a)},t._getOrCreateCacheEntry=function(e,t,n,r){var a=this._cache.get(e);return null==a&&(a=h(e,t,n,r,this._clearCacheEntry),this._cache.set(e,a)),a},t._fetchAndSaveQuery=function(e,t,n,r,a,i,o){var s,u,c=this,f=this._environment,p=f.check(t),v=p.status,m="available"===v,g=m||"partial"===a&&"stale"!==v,_=function(){};switch(r){case"store-only":s=!1,u=!0;break;case"store-or-network":s=!m,u=g;break;case"store-and-network":s=!0,u=g;break;case"network-only":default:s=!0,u=!1}if(u){var y=d(t,e),b=h(e,t,y,null,this._clearCacheEntry);this._cache.set(e,b)}if(s){var E,S=d(t,e);n.subscribe({start:function(t){E=t;var n=c._cache.get(e);n&&n.setNetworkSubscription(E);var r=null==o?void 0:o.start;r&&r(t)},next:function(){var n=f.lookup(t.fragment);c._getOrCreateCacheEntry(e,t,S,E).setValue(S),_();var r=null==o?void 0:o.next;r&&r(n)},error:function(n){var r=c._getOrCreateCacheEntry(e,t,n,E);r.setValue(n),_(),E=null,r.setNetworkSubscription(null);var a=null==o?void 0:o.error;a&&a(n)},complete:function(){_(),E=null;var t=c._cache.get(e);t&&t.setNetworkSubscription(null);var n=null==o?void 0:o.complete;n&&n()},unsubscribe:null==o?void 0:o.unsubscribe});var k=this._cache.get(e);if(!k){var R=new Promise((function(e){_=e}));R.displayName="Relay("+t.fragment.node.name+")",k=h(e,t,R,E,this._clearCacheEntry),this._cache.set(e,k)}}else{var w=null==o?void 0:o.complete;w&&w()}var I=this._cache.get(e);return null==I&&l(!1),f.__log({name:"queryresource.fetch",resourceID:I.id,operation:t,profilerContext:i,fetchPolicy:r,renderPolicy:a,queryAvailability:p,shouldFetch:s}),I},e}();function m(e){return new v(e)}var g=c?new WeakMap:new Map;e.exports={createQueryResource:m,getQueryResourceForEnvironment:function(e){var t=g.get(e);if(t)return t;var n=m(e);return g.set(e,n),n},getQueryCacheIdentifier:f}},8613:(e,t,n)=>{"use strict";var r=n(7294),a=n(6849),i=r.useMemo;e.exports=function(e){var t=e.children,n=e.environment,o=i((function(){return{environment:n}}),[n]);return r.createElement(a.Provider,{value:o},t)}},9530:(e,t,n)=>{"use strict";var r=n(7430),a=n(1143);e.exports=function(e,t){var n,i,o=r(e,t),l=o.refetchableRequest,s=o.refetchMetadata,u=s.connection;null==u&&a(!1);var c=u.path,f=(null!==(n=null===(i=e.metadata)||void 0===i?void 0:i.connection)&&void 0!==n?n:[])[0];null==f&&a(!1);var d=s.identifierField;return null!=d&&"string"!=typeof d&&a(!1),{connectionPathInFragmentData:c,identifierField:d,paginationRequest:l,paginationMetadata:u,stream:!0===f.stream}}},5179:(e,t,n)=>{"use strict";var r=n(4914),a=r(n(4172)),i=r(n(4942)),o=n(1143);n(3620),e.exports=function(e,t,n,r,l,s){var u,c=s.backward,f=s.forward;if("backward"===e){var d;(null==c||null==c.count||null==c.cursor)&&o(!1);var p=(0,i.default)((0,i.default)((0,i.default)({},r),l),{},(d={},(0,a.default)(d,c.cursor,n),(0,a.default)(d,c.count,t),d));return f&&f.cursor&&(p[f.cursor]=null),f&&f.count&&(p[f.count]=null),p}(null==f||null==f.count||null==f.cursor)&&o(!1);var h=(0,i.default)((0,i.default)((0,i.default)({},r),l),{},(u={},(0,a.default)(u,f.cursor,n),(0,a.default)(u,f.count,t),u));return c&&c.cursor&&(h[c.cursor]=null),c&&c.count&&(h[c.count]=null),h}},7430:(e,t,n)=>{"use strict";var r=n(1143);e.exports=function(e,t){var n,a;!0===(null===(n=e.metadata)||void 0===n?void 0:n.plural)&&r(!1);var i=null===(a=e.metadata)||void 0===a?void 0:a.refetch;null==i&&r(!1);var o=i.operation.default?i.operation.default:i.operation,l=i.fragmentPathInResult;"string"==typeof o&&r(!1);var s=i.identifierField;return null!=s&&"string"!=typeof s&&r(!1),{fragmentRefPathInResponse:l,identifierField:s,refetchableRequest:o,refetchMetadata:i}}},3975:(e,t,n)=>{"use strict";var r=n(4914)(n(2646)),a=n(1143);e.exports=function(e,t){var n,i=e,o=(0,r.default)(t);try{for(o.s();!(n=o.n()).done;){var l=n.value;if(null==i)return null;"number"==typeof l?(Array.isArray(i)||a(!1),i=i[l]):(("object"!=typeof i||Array.isArray(i))&&a(!1),i=i[l])}}catch(e){o.e(e)}finally{o.f()}return i}},4473:(e,t,n)=>{"use strict";var r=n(9204).loadQuery;e.exports=function e(t,n,a){var i=null;null==n.root.getModuleIfRequired()&&(i=n.root.load());var o=n.getPreloadProps(a),l=o.queries,s=o.entryPoints,u=o.extraProps,c={},f={};null!=l&&Object.keys(l).forEach((function(e){var n=l[e],a=n.environmentProviderOptions,i=n.options,o=n.parameters,s=n.variables,u=t.getEnvironment(a);c[e]=r(u,o,s,{fetchPolicy:null==i?void 0:i.fetchPolicy,networkCacheConfig:null==i?void 0:i.networkCacheConfig,__nameForWarning:"loadEntryPoint"},a)})),null!=s&&Object.keys(s).forEach((function(n){var r=s[n];if(null!=r){var a=r.entryPoint,i=r.entryPointParams;f[n]=e(t,a,i)}}));var d=!1;return{dispose:function(){d||(null!=c&&Object.values(c).forEach((function(e){(0,e.dispose)()})),null!=f&&Object.values(f).forEach((function(e){(0,e.dispose)()})),d=!0)},entryPoints:f,extraProps:null!=u?u:null,getComponent:function(){var e,t=n.root.getModuleIfRequired();if(null==t)throw i=null!==(e=i)&&void 0!==e?e:n.root.load();return t},get isDisposed(){return d},queries:c,rootModuleID:n.root.getModuleId()}}},9204:(e,t,n)=>{"use strict";var r=n(4914)(n(4942)),a=n(7294),i=n(1143),o=(n(3620),n(4311)),l=o.PreloadableQueryRegistry,s=o.ReplaySubject,u=o.createOperationDescriptor,c=o.getRequest,f=o.getRequestIdentifier,d=o.Observable,p=o.RelayFeatureFlags,h=o.__internal.fetchQueryDeduped,v=null,m=100001;e.exports={loadQuery:function(e,t,n,o,v){var g,_,y;null===(g=a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED)||void 0===g||null===(_=g.ReactCurrentDispatcher)||void 0===_||_.current,m++;var b,E,S,k,R,w,I=null!==(y=null==o?void 0:o.fetchPolicy)&&void 0!==y?y:"store-or-network",C=(0,r.default)((0,r.default)({},null==o?void 0:o.networkCacheConfig),{},{force:!0}),P=!1,D=function(t,n){return P=!0,e.executeWithSource({operation:t,source:n})},x=new s,O=d.create((function(e){return x.subscribe(e)})),T=null,F=!1,N=function(t){var r;F=!0;var a=new s;if(!0===p.ENABLE_LOAD_QUERY_REQUEST_DEDUPING){var i="raw-network-request-"+f(t,n);r=h(e,i,(function(){return e.getNetwork().execute(t,n,C)}))}else r=e.getNetwork().execute(t,n,C);var o=r.subscribe({error:function(e){T=e,a.error(e)},next:function(e){a.next(e)},complete:function(){a.complete()}}).unsubscribe;return E=o,d.create((function(e){var t=a.subscribe(e);return function(){t.unsubscribe(),E()}}))},A=function(t,n){!0===p.ENABLE_LOAD_QUERY_REQUEST_DEDUPING&&(F=!0);var r=h(e,t.request.identifier,n).subscribe({error:function(e){x.error(e)},next:function(e){x.next(e)},complete:function(){x.complete()}});S=r.unsubscribe},L=function(t){var r=u(t,n,C);b=e.retain(r),"store-only"!==I&&("store-or-network"!==I||"available"!==e.check(r).status)&&A(r,(function(){var e=N(t.params);return D(r,e)}))};if("PreloadableConcreteRequest"===t.kind){null===(w=(k=t.params).id)&&i(!1);var M=l.get(w);if(null!=M)L(M);else{var U="store-only"===I?null:N(k),q=l.onLoad(w,(function(t){R();var r=u(t,n,C);b=e.retain(r),null!=U&&A(r,(function(){return D(r,U)}))}));R=q.dispose}}else{var z=c(t);w=null!=(k=z.params).cacheID?k.cacheID:k.id,L(z)}var j=!1;return{kind:"PreloadedQuery",environment:e,environmentProviderOptions:v,dispose:function(){j||(P?S&&S():E&&E(),b&&b.dispose(),R&&R(),j=!0)},fetchKey:m,id:w,get isDisposed(){return j},get networkError(){return T},name:k.name,networkCacheConfig:C,fetchPolicy:I,source:F?O:void 0,variables:n}},useTrackLoadQueryInRender:function(){var e,t;null===v&&(v=null===(e=a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED)||void 0===e||null===(t=e.ReactCurrentDispatcher)||void 0===t?void 0:t.current)}}},8264:(e,t,n)=>{"use strict";var r=n(4914)(n(2646)),a=n(4473),i=n(1829),o=n(9204).useTrackLoadQueryInRender,l=n(7294),s=l.useCallback,u=l.useEffect,c=l.useRef,f=l.useState,d={kind:"NullEntryPointReference"};e.exports=function(e,t,n){var l,p,h,v;o();var m=null!==(l=null==n||null===(p=n.TEST_ONLY__initialEntryPointData)||void 0===p?void 0:p.entryPointReference)&&void 0!==l?l:d,g=null!==(h=null==n||null===(v=n.TEST_ONLY__initialEntryPointData)||void 0===v?void 0:v.entryPointParams)&&void 0!==h?h:null,_=i(),y=c(new Set([m])),b=f(m),E=b[0],S=b[1],k=f(g),R=k[0],w=k[1],I=s((function(){if(_.current){var e={kind:"NullEntryPointReference"};y.current.add(e),S(e)}}),[S,_]),C=s((function(n){if(_.current){var r=a(e,t,n);y.current.add(r),S(r),w(n)}}),[e,t,S,_]),P=c(!1);return u((function(){return function(){P.current=!0}}),[]),u((function(){if(!0===P.current)return P.current=!1,void("NullEntryPointReference"!==E.kind&&null!=R&&C(R));var e=y.current;if(_.current){var t,n=(0,r.default)(e);try{for(n.s();!(t=n.n()).done;){var a=t.value;if(a===E)break;e.delete(a),"NullEntryPointReference"!==a.kind&&a.dispose()}}catch(e){n.e(e)}finally{n.f()}}}),[E,R,C,_]),u((function(){return function(){var e,t=(0,r.default)(y.current);try{for(t.s();!(e=t.n()).done;){var n=e.value;"NullEntryPointReference"!==n.kind&&n.dispose()}}catch(e){t.e(e)}finally{t.f()}}}),[]),["NullEntryPointReference"===E.kind?null:E,C,I]}},5043:(e,t,n)=>{"use strict";var r=n(7294),a=r.useCallback,i=r.useEffect,o=r.useRef;e.exports=function(){var e=o(null),t=o(!1),n=a((function(){null!=e.current&&(e.current.unsubscribe(),e.current=null),t.current=!1}),[]),r=a((function(n){e.current=n,t.current=!0}),[]),l=a((function(){e.current=null,t.current=!1}),[]);return i((function(){return n}),[n]),{isFetchingRef:t,startFetch:r,disposeFetch:n,completeFetch:l}}},9444:(e,t,n)=>{"use strict";var r=n(4081),a=n(8977),i=n(9204).useTrackLoadQueryInRender,o=(n(7294).useDebugValue,n(4311).getFragment);e.exports=function(e,t){i();var n=o(e);return a(n,"first argument of useFragment()"),r(n,t,"useFragment()").data}},4081:(e,t,n)=>{"use strict";var r=n(8924),a=(n(3620),n(7339).getFragmentResourceForEnvironment),i=n(7294),o=i.useEffect,l=i.useRef,s=i.useState,u=n(4311).getFragmentIdentifier;e.exports=function(e,t,n){var i=r(),c=a(i),f=l(!1),d=s(0)[1],p=u(e,t),h=c.readWithIdentifier(e,t,p,n),v=l(!0);function m(){!1!==f.current&&!1!==v.current&&d((function(e){return e+1}))}return o((function(){f.current=!0;var e=c.subscribe(h,m);return function(){f.current=!1,e.dispose()}}),[i,p]),{data:h.data,disableStoreUpdates:function(){v.current=!1},enableStoreUpdates:function(){v.current=!0,c.checkMissedUpdates(h)[0]&&m()}}}},1829:(e,t,n)=>{"use strict";var r=n(7294),a=r.useEffect,i=r.useRef;e.exports=function(){var e=i(!0);return a((function(){return e.current=!0,function(){e.current=!1}}),[]),e}},1204:(e,t,n)=>{"use strict";var r=n(7294),a=n(1143),i=n(8924),o=n(4311),l=o.__internal.getObservableForActiveRequest,s=o.getSelector,u=r.useEffect,c=r.useState,f=r.useMemo;e.exports=function(e,t){var n=i(),r=f((function(){var r=s(e,t);return null==r?null:("SingularReaderSelector"!==r.kind&&a(!1),l(n,r.owner))}),[n,e,t]),o=c(null!=r),d=o[0],p=o[1];return u((function(){var e;if(p(null!=r),null!=r){var t=function(){p(!1)};e=r.subscribe({complete:t,error:t})}return function(){e&&e.unsubscribe()}}),[r]),d}},9703:(e,t,n)=>{"use strict";var r=n(9702),a=n(5315),i=n(8924),o=n(9204).useTrackLoadQueryInRender,l=n(4311).__internal.fetchQuery;e.exports=function(e,t,n){o();var s=i(),u=a(e,t,n&&n.networkCacheConfig?n.networkCacheConfig:{force:!0});return r({componentDisplayName:"useLazyLoadQuery()",fetchKey:null==n?void 0:n.fetchKey,fetchObservable:l(s,u),fetchPolicy:null==n?void 0:n.fetchPolicy,query:u,renderPolicy:null==n?void 0:n.UNSTABLE_renderPolicy})}},9702:(e,t,n)=>{"use strict";var r=n(7580),a=n(7294),i=n(5043),o=n(4081),l=n(8924),s=n(9598),u=s.getQueryResourceForEnvironment,c=s.getQueryCacheIdentifier,f=a.useContext,d=a.useEffect,p=a.useState,h=a.useRef;e.exports=function(e){var t=e.query,n=e.componentDisplayName,a=e.fetchObservable,s=e.fetchPolicy,v=e.fetchKey,m=e.renderPolicy,g=l(),_=f(r),y=u(g),b=p(0),E=b[0],S=b[1],k=i(),R=k.startFetch,w=k.completeFetch,I="".concat(E,"-").concat(null!=v?v:""),C=c(g,t,s,m,I),P=_.wrapPrepareQueryResource((function(){return y.prepareWithIdentifier(C,t,a,s,m,{start:R,complete:w,error:w},_)})),D=h(!1);d((function(){return function(){D.current=!0}}),[]),d((function(){if(!0===D.current)return D.current=!1,void S((function(e){return e+1}));var e=y.retain(P,_);return function(){e.dispose()}}),[g,C]);var x=P.fragmentNode,O=P.fragmentRef;return o(x,O,n).data}},2367:(e,t,n)=>{"use strict";var r=n(4914)(n(4942)),a=n(5179),i=n(3975),o=n(1143),l=n(5043),s=n(1829),u=n(1204),c=n(8924),f=(n(3620),n(7294)),d=f.useCallback,p=f.useEffect,h=f.useState,v=n(4311),m=v.ConnectionInterface,g=v.__internal.fetchQuery,_=v.createOperationDescriptor,y=v.getSelector;e.exports=function(e){var t=e.direction,n=e.fragmentNode,f=e.fragmentRef,v=e.fragmentIdentifier,b=e.fragmentData,E=e.connectionPathInFragmentData,S=e.paginationRequest,k=e.paginationMetadata,R=e.componentDisplayName,w=e.observer,I=e.onReset,C=e.identifierField,P=c(),D=l(),x=D.isFetchingRef,O=D.startFetch,T=D.disposeFetch,F=D.completeFetch,N=null!=C&&null!=b&&"object"==typeof b?b[C]:null,A=s(),L=h(P),M=L[0],U=L[1],q=h(v),z=q[0],j=q[1],V=u(n,f);(P!==M||v!==z)&&(T(),I(),U(P),j(v));var Q=function(e,t,n,r){var a,l,s=m.get(),u=s.EDGES,c=s.PAGE_INFO,f=s.HAS_NEXT_PAGE,d=s.HAS_PREV_PAGE,p=s.END_CURSOR,h=s.START_CURSOR,v=i(n,r);if(null==v)return{cursor:null,hasMore:!1};"object"!=typeof v&&o(!1);var g=v[u],_=v[c];if(null==g||null==_)return{cursor:null,hasMore:!1};Array.isArray(g)||o(!1),"object"!=typeof _&&o(!1);var y="forward"===e?null!==(a=_[p])&&void 0!==a?a:null:null!==(l=_[h])&&void 0!==l?l:null;return null!==y&&"string"!=typeof y&&o(!1),{cursor:y,hasMore:"forward"===e?null!=y&&!0===_[f]:null!=y&&!0===_[d]}}(t,0,b,E),K=Q.cursor,B=Q.hasMore;return p((function(){return function(){T()}}),[T]),[d((function(e,i){var l=null==i?void 0:i.onComplete;if(!0!==A.current)return{dispose:function(){}};var s=y(n,f);if(!0===x.current||null==b||V)return l&&l(null),{dispose:function(){}};(null==s||"PluralReaderSelector"===s.kind)&&o(!1);var u=s.owner.variables,c=s.variables,d=null==i?void 0:i.UNSTABLE_extraVariables,p=(0,r.default)((0,r.default)({},u),c),h=a(t,e,K,p,(0,r.default)({},d),k);null!=C&&(h.id=N);var v=_(S,h,{force:!0});return g(P,v).subscribe((0,r.default)((0,r.default)({},w),{},{start:function(e){O(e),w.start&&w.start(e)},complete:function(){F(),w.complete&&w.complete(),l&&l(null)},error:function(e){F(),w.error&&w.error(e),l&&l(e)}})),{dispose:T}}),[P,N,t,K,O,T,F,x,V,b,n.name,f,R]),B,T]}},5315:(e,t,n)=>{"use strict";var r=n(7294),a=n(2243),i=n(4311),o=i.createOperationDescriptor,l=i.getRequest,s=r.useMemo;e.exports=function(e,t,n){var r=a(t)[0],i=a(n||{})[0];return s((function(){return o(l(e),r,i)}),[e,r,i])}},2243:(e,t,n)=>{"use strict";var r=n(7294),a=n(1305),i=r.useMemo,o=r.useRef,l=r.useState;e.exports=function(e){var t,n,r=o(0),s=l(e),u=s[0],c=s[1];return a(e,u)||(r.current=(null!==(n=r.current)&&void 0!==n?n:0)+1,c(e)),[i((function(){return e}),[r.current]),null!==(t=r.current)&&void 0!==t?t:0]}},3498:(e,t,n)=>{"use strict";var r=n(4914)(n(4942)),a=n(7294),i=n(8924),o=n(4311).commitMutation,l=a.useState,s=a.useEffect,u=a.useRef,c=a.useCallback,f=n(1829);e.exports=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o,n=i(),a=f(),d=u(n),p=u(e),h=u(new Set),v=l(!1),m=v[0],g=v[1],_=c((function(t){d.current===n&&p.current===e&&(h.current.delete(t),a.current&&g(h.current.size>0))}),[n,a,e]);s((function(){d.current===n&&p.current===e||(h.current=new Set,a.current&&g(!1),d.current=n,p.current=e)}),[n,a,e]);var y=c((function(i){var o=t(n,(0,r.default)((0,r.default)({},i),{},{mutation:e,onCompleted:function(e,t){_(o),i.onCompleted&&i.onCompleted(e,t)},onError:function(e){_(o),i.onError&&i.onError(e)},onUnsubscribe:function(){_(o),i.onUnsubscribe&&i.onUnsubscribe()}}));return h.current.add(o),a.current&&g(!0),o}),[_,t,n,a,e]);return[y,m]}},2064:(e,t,n)=>{"use strict";var r=n(4914)(n(4942)),a=n(9530),i=n(2367),o=n(7659),l=n(8977),s=n(7294),u=s.useCallback,c=(s.useDebugValue,s.useState),f=n(4311),d=f.getFragment,p=f.getFragmentIdentifier;function h(e){var t=c(!1),n=t[0],a=t[1],o={start:function(){return a(!0)},complete:function(){return a(!1)},error:function(){return a(!1)}},l=i((0,r.default)((0,r.default)({},e),{},{observer:o,onReset:function(){return a(!1)}}));return[l[0],l[1],n,l[2]]}e.exports=function(e,t){var n=d(e);l(n,"first argument of usePaginationFragment()");var i="usePaginationFragment()",s=a(n,i),c=s.connectionPathInFragmentData,f=s.paginationRequest,v=s.paginationMetadata,m=s.identifierField,g=o(n,t,i),_=g.fragmentData,y=g.fragmentRef,b=g.refetch,E=p(n,y),S=h({componentDisplayName:i,connectionPathInFragmentData:c,direction:"backward",fragmentData:_,fragmentIdentifier:E,fragmentNode:n,fragmentRef:y,identifierField:m,paginationMetadata:v,paginationRequest:f}),k=S[0],R=S[1],w=S[2],I=S[3],C=h({componentDisplayName:i,connectionPathInFragmentData:c,direction:"forward",fragmentData:_,fragmentIdentifier:E,fragmentNode:n,fragmentRef:y,identifierField:m,paginationMetadata:v,paginationRequest:f}),P=C[0],D=C[1],x=C[2],O=C[3];return{data:_,loadNext:P,loadPrevious:k,hasNext:D,hasPrevious:R,isLoadingNext:x,isLoadingPrevious:w,refetch:u((function(e,t){return O(),I(),b(e,(0,r.default)((0,r.default)({},t),{},{__environment:void 0}))}),[O,I,b])}}},9776:(e,t,n)=>{"use strict";var r=n(1143),a=n(9702),i=n(5315),o=n(8924),l=(n(3620),n(9204).useTrackLoadQueryInRender),s=(n(7294).useDebugValue,n(4311).__internal),u=s.fetchQueryDeduped,c=s.fetchQuery;e.exports=function(e,t,n){l();var s,f=o(),d=t.fetchKey,p=t.fetchPolicy,h=t.source,v=t.variables,m=t.networkCacheConfig,g=i(e,v,m);if("PreloadedQuery_DEPRECATED"===t.kind)g.request.node.params.name!==t.name&&r(!1),s={componentDisplayName:"usePreloadedQuery()",fetchKey:d,fetchObservable:u(f,g.request.identifier,(function(){return f===t.environment&&null!=h?f.executeWithSource({operation:g,source:h}):f.execute({operation:g})})),fetchPolicy:p,query:g,renderPolicy:null==n?void 0:n.UNSTABLE_renderPolicy};else{var _=c(f,g);s={componentDisplayName:"usePreloadedQuery()",fetchObservable:null!=h&&f===t.environment?h.ifEmpty(_):(t.environment,_),fetchKey:d,fetchPolicy:p,query:g,renderPolicy:null==n?void 0:n.UNSTABLE_renderPolicy}}return a(s)}},2530:(e,t,n)=>{"use strict";var r=n(4914)(n(2646)),a=n(1829),i=n(8924),o=n(9204),l=o.loadQuery,s=o.useTrackLoadQueryInRender,u=n(7294),c=u.useCallback,f=u.useEffect,d=u.useRef,p=u.useState,h={kind:"NullQueryReference"};e.exports=function(e,t){var n=null!=t?t:h,o=i();s();var u=a(),v=d(new Set([n])),m=p((function(){return n})),g=m[0],_=m[1],y=p((function(){return n})),b=y[0],E=y[1];n!==b&&(v.current.add(n),E(n),_(n));var S=c((function(){u.current&&(v.current.add(h),_(h))}),[u]),k=c((function(t,n){var r=null!=n&&n.hasOwnProperty("__environment")?{fetchPolicy:n.fetchPolicy,networkCacheConfig:n.networkCacheConfig,__nameForWarning:n.__nameForWarning}:n;if(u.current){var a,i=l(null!==(a=null==n?void 0:n.__environment)&&void 0!==a?a:o,e,t,r);v.current.add(i),_(i)}}),[o,e,_,u]),R=d(!1);return f((function(){return function(){R.current=!0}}),[]),f((function(){if(!0===R.current)return R.current=!1,void("NullQueryReference"!==g.kind&&k(g.variables,{fetchPolicy:g.fetchPolicy,networkCacheConfig:g.networkCacheConfig}));var e=v.current;if(u.current){var t,n=(0,r.default)(e);try{for(n.s();!(t=n.n()).done;){var a=t.value;if(a===g)break;e.delete(a),"NullQueryReference"!==a.kind&&a.dispose&&a.dispose()}}catch(e){n.e(e)}finally{n.f()}}}),[g,u,k]),f((function(){return function(){var e,t=(0,r.default)(v.current);try{for(t.s();!(e=t.n()).done;){var n=e.value;"NullQueryReference"!==n.kind&&n.dispose&&n.dispose()}}catch(e){t.e(e)}finally{t.f()}}}),[]),["NullQueryReference"===g.kind?null:g,k,S]}},179:(e,t,n)=>{"use strict";var r=n(7659),a=n(8977),i=(n(7294).useDebugValue,n(4311).getFragment);e.exports=function(e,t){var n=i(e);a(n,"first argument of useRefetchableFragment()");var o=r(n,t,"useRefetchableFragment()");return[o.fragmentData,o.refetch]}},7659:(e,t,n)=>{"use strict";var r=n(4914)(n(4942)),a=n(7580),i=n(7430),o=n(3975),l=n(1143),s=n(4081),u=n(1829),c=n(2530),f=n(8924),d=(n(3620),n(7339).getFragmentResourceForEnvironment),p=n(9598).getQueryResourceForEnvironment,h=n(7294),v=h.useCallback,m=h.useContext,g=h.useReducer,_=n(4311),y=_.__internal.fetchQuery,b=_.createOperationDescriptor,E=_.getFragmentIdentifier,S=_.getSelector;function k(e,t){switch(t.type){case"refetch":var n;return(0,r.default)((0,r.default)({},e),{},{fetchPolicy:t.fetchPolicy,mirroredEnvironment:null!==(n=t.refetchEnvironment)&&void 0!==n?n:e.mirroredEnvironment,onComplete:t.onComplete,refetchEnvironment:t.refetchEnvironment,refetchQuery:t.refetchQuery,renderPolicy:t.renderPolicy});case"reset":return{fetchPolicy:void 0,mirroredEnvironment:t.environment,mirroredFragmentIdentifier:t.fragmentIdentifier,onComplete:void 0,refetchQuery:null,renderPolicy:void 0};default:throw t.type,new Error("useRefetchableFragmentNode: Unexpected action type")}}e.exports=function(e,t,n){var h=f(),_=i(e,n),R=_.refetchableRequest,w=_.fragmentRefPathInResponse,I=_.identifierField,C=E(e,t),P=g(k,{fetchPolicy:void 0,mirroredEnvironment:h,mirroredFragmentIdentifier:C,onComplete:void 0,refetchEnvironment:null,refetchQuery:null,renderPolicy:void 0}),D=P[0],x=P[1],O=D.fetchPolicy,T=D.mirroredEnvironment,F=D.mirroredFragmentIdentifier,N=D.onComplete,A=D.refetchEnvironment,L=D.refetchQuery,M=D.renderPolicy,U=null!=A?A:h,q=p(U),z=d(U),j=m(a),V=U!==T||C!==F,Q=c(R),K=Q[0],B=Q[1],H=Q[2],W=t;if(V)x({type:"reset",environment:U,fragmentIdentifier:C}),H();else if(null!=L&&null!=K){var Y=function(e){N&&N(null!=e?e:null)},G=null!=K.source?K.source:y(U,L),$=j.wrapPrepareQueryResource((function(){return q.prepare(L,G,O,M,{error:Y,complete:function(){Y()}},K.fetchKey,j)})),X=z.read($.fragmentNode,$.fragmentRef,n).data;null==X&&l(!1),W=o(X,w)}var J=s(e,W,n),Z=J.data,ee=J.disableStoreUpdates,te=J.enableStoreUpdates;return{fragmentData:Z,fragmentRef:W,refetch:function(e,t,n,a,i,o,l,s,c,f,d){var p=u(),h=null!=s&&null!=a&&"object"==typeof a?a[s]:null;return v((function(e,a){if(!0!==p.current)return{dispose:function(){}};var i,l,u=null==a?void 0:a.__environment,v=null==a?void 0:a.fetchPolicy,m=null==a?void 0:a.UNSTABLE_renderPolicy,g=null==a?void 0:a.onComplete,_=S(o,f);if(null==_)i={},l={};else if("PluralReaderSelector"===_.kind){var y,E,k,R;i=null!==(y=null===(E=_.selectors[0])||void 0===E?void 0:E.owner.variables)&&void 0!==y?y:{},l=null!==(k=null===(R=_.selectors[0])||void 0===R?void 0:R.variables)&&void 0!==k?k:{}}else i=_.owner.variables,l=_.variables;var w=(0,r.default)((0,r.default)((0,r.default)({},i),l),e);null==s||e.hasOwnProperty("id")||(w.id=h);var I=b(d,w,{force:!0});return c(I.request.variables,{fetchPolicy:v,__environment:u,__nameForWarning:"refetch"}),t({type:"refetch",fetchPolicy:v,onComplete:g,refetchEnvironment:u,refetchQuery:I,renderPolicy:m}),{dispose:n}}),[i,t,n,h])}(0,x,H,Z,C,e,0,I,B,t,R),disableStoreUpdates:ee,enableStoreUpdates:te}}},8924:(e,t,n)=>{"use strict";var r=n(6849),a=n(1143),i=n(7294).useContext;e.exports=function(){var e=i(r);return null==e&&a(!1),e.environment}},8977:(e,t,n)=>{"use strict";n(3620),n(7294).useRef,e.exports=function(e,t){}},1102:(e,t,n)=>{"use strict";var r=n(8924),a=n(7294),i=a.useEffect,o=a.useRef;e.exports=function(e,t){var n=r(),a=o(null),l=Array.from(e).sort().join("");return i((function(){var r=n.getStore(),i=r.lookupInvalidationState(e),o=r.subscribeToInvalidationState(i,t);return a.current=o,function(){return o.dispose()}}),[l,t,n]),{dispose:function(){null!=a.current&&a.current.dispose()}}}},8747:(e,t,n)=>{"use strict";var r=n(7294),a=n(8924),i=n(4311).requestSubscription;e.exports=function(e,t){var n=null!=t?t:i,o=a();r.useEffect((function(){return i(o,e).dispose}),[o,e,n])}},2746:e=>{e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r},e.exports.default=e.exports,e.exports.__esModule=!0},8586:(e,t,n)=>{var r=n(2746);e.exports=function(e){if(Array.isArray(e))return r(e)},e.exports.default=e.exports,e.exports.__esModule=!0},2904:e=>{e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},e.exports.default=e.exports,e.exports.__esModule=!0},2646:(e,t,n)=>{var r=n(3759);e.exports=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=r(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0,i=function(){};return{s:i,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return l=e.done,e},e:function(e){s=!0,o=e},f:function(){try{l||null==n.return||n.return()}finally{if(s)throw o}}}},e.exports.default=e.exports,e.exports.__esModule=!0},4172:e=>{e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},e.exports.default=e.exports,e.exports.__esModule=!0},1611:e=>{function t(){return e.exports=t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},e.exports.default=e.exports,e.exports.__esModule=!0,t.apply(this,arguments)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0},1991:(e,t,n)=>{var r=n(13);e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)},e.exports.default=e.exports,e.exports.__esModule=!0},4914:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.default=e.exports,e.exports.__esModule=!0},6325:e=>{e.exports=function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)},e.exports.default=e.exports,e.exports.__esModule=!0},5236:e=>{e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.default=e.exports,e.exports.__esModule=!0},4942:(e,t,n)=>{var r=n(4172);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}e.exports=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e},e.exports.default=e.exports,e.exports.__esModule=!0},5998:e=>{e.exports=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a},e.exports.default=e.exports,e.exports.__esModule=!0},13:e=>{function t(n,r){return e.exports=t=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},e.exports.default=e.exports,e.exports.__esModule=!0,t(n,r)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0},6489:(e,t,n)=>{var r=n(8586),a=n(6325),i=n(3759),o=n(5236);e.exports=function(e){return r(e)||a(e)||i(e)||o()},e.exports.default=e.exports,e.exports.__esModule=!0},3759:(e,t,n)=>{var r=n(2746);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}},e.exports.default=e.exports,e.exports.__esModule=!0},9658:(e,t,n)=>{var r=n(5826);e.exports=function e(t,n,a){return r(n)||(a=n||a,n=[]),a=a||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var a=[],i=0;i<t.length;i++)a.push(e(t[i],n,r).source);return c(new RegExp("(?:"+a.join("|")+")",f(r)),n)}(t,n,a):function(e,t,n){return d(i(e,n),t,n)}(t,n,a)},e.exports.parse=i,e.exports.compile=function(e,t){return l(i(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var a=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,o=0,l="",c=t&&t.delimiter||"/";null!=(n=a.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(o,p),o=p+f.length,d)l+=d[1];else{var h=e[o],v=n[2],m=n[3],g=n[4],_=n[5],y=n[6],b=n[7];l&&(r.push(l),l="");var E=null!=v&&null!=h&&h!==v,S="+"===y||"*"===y,k="?"===y||"*"===y,R=n[2]||c,w=g||_;r.push({name:m||i++,prefix:v||"",delimiter:R,optional:k,repeat:S,partial:E,asterisk:!!b,pattern:w?u(w):b?".*":"[^"+s(R)+"]+?"})}}return o<e.length&&(l+=e.substr(o)),l&&r.push(l),r}function o(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),a=0;a<e.length;a++)"object"==typeof e[a]&&(n[a]=new RegExp("^(?:"+e[a].pattern+")$",f(t)));return function(t,a){for(var i="",l=t||{},s=(a||{}).pretty?o:encodeURIComponent,u=0;u<e.length;u++){var c=e[u];if("string"!=typeof c){var f,d=l[c.name];if(null==d){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=s(d[p]),!n[u].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):s(d),!n[u].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function s(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,i=!1!==n.end,o="",l=0;l<e.length;l++){var u=e[l];if("string"==typeof u)o+=s(u);else{var d=s(u.prefix),p="(?:"+u.pattern+")";t.push(u),u.repeat&&(p+="(?:"+d+p+")*"),o+=p=u.optional?u.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=s(n.delimiter||"/"),v=o.slice(-h.length)===h;return a||(o=(v?o.slice(0,-h.length):o)+"(?:"+h+"(?=$))?"),o+=i?"$":a&&v?"":"(?="+h+"|$)",c(new RegExp("^"+o,f(n)),t)}},2408:(e,t,n)=>{"use strict";var r=n(7418),a=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var o=60109,l=60110,s=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;a=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),o=f("react.provider"),l=f("react.context"),s=f("react.forward_ref"),t.Suspense=f("react.suspense"),u=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function m(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function _(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=m.prototype;var y=_.prototype=new g;y.constructor=_,r(y,m.prototype),y.isPureReactComponent=!0;var b={current:null},E=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,i={},o=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(o=""+t.key),t)E.call(t,r)&&!S.hasOwnProperty(r)&&(i[r]=t[r]);var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===i[r]&&(i[r]=s[r]);return{$$typeof:a,type:e,key:o,ref:l,props:i,_owner:b.current}}function R(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var w=/\/+/g;function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,n,r,o){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case a:case i:s=!0}}if(s)return o=o(s=e),e=""===r?"."+I(s,0):r,Array.isArray(o)?(n="",null!=e&&(n=e.replace(w,"$&/")+"/"),C(o,t,n,"",(function(e){return e}))):null!=o&&(R(o)&&(o=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,n+(!o.key||s&&s.key===o.key?"":(""+o.key).replace(w,"$&/")+"/")+e)),t.push(o)),1;if(s=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+I(l=e[u],u);s+=C(l,t,n,c,o)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),u=0;!(l=e.next()).done;)s+=C(l=l.value,t,n,c=r+I(l,u++),o);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function P(e,t,n){if(null==e)return e;var r=[],a=0;return C(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function D(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var x={current:null};function O(){var e=x.current;if(null===e)throw Error(p(321));return e}var T={ReactCurrentDispatcher:x,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:b,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!R(e))throw Error(p(143));return e}},t.Component=m,t.PureComponent=_,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),o=e.key,l=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,s=b.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)E.call(t,c)&&!S.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){u=Array(c);for(var f=0;f<c;f++)u[f]=arguments[f+2];i.children=u}return{$$typeof:a,type:e.type,key:o,ref:l,props:i,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=R,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:D}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return O().useCallback(e,t)},t.useContext=function(e,t){return O().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return O().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return O().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return O().useLayoutEffect(e,t)},t.useMemo=function(e,t){return O().useMemo(e,t)},t.useReducer=function(e,t,n){return O().useReducer(e,t,n)},t.useRef=function(e){return O().useRef(e)},t.useState=function(e){return O().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},4311:(e,t,n)=>{e.exports=n(3151)},2158:(e,t,n)=>{"use strict";var r=n(1743),a=n(1093),i=n(1143);e.exports=function(e){switch(e){case"connection":return r;case"deleteRecord":return a.DeleteRecordHandler;case"deleteEdge":return a.DeleteEdgeHandler;case"appendEdge":return a.AppendEdgeHandler;case"prependEdge":return a.PrependEdgeHandler;case"appendNode":return a.AppendNodeHandler;case"prependNode":return a.PrependNodeHandler}i(!1)}},1743:(e,t,n)=>{"use strict";var r=n(3300),a=n(1126),i=n(1143),o=(n(3620),n(6063).generateClientID),l=n(1380).getStableStorageKey,s="connection",u="__connection_next_edge_index";function c(e,t,n){if(null==n)return n;var a=r.get().EDGES,l=t.getValue(u);"number"!=typeof l&&i(!1);var s=o(t.getDataID(),a,l),c=e.create(s,n.getType());return c.copyFieldsFrom(n),null==c.getValue("cursor")&&c.setValue(null,"cursor"),t.setValue(l+1,u),c}function f(e,t,n){for(var a=r.get().NODE,i=0;i<e.length;i++){var o=e[i];if(o){var l=o.getLinkedRecord(a),s=l&&l.getDataID();if(s){if(n.has(s))continue;n.add(s)}t.push(o)}}}e.exports={buildConnectionEdge:c,createEdge:function(e,t,n,a){var i=r.get().NODE,l=o(t.getDataID(),n.getDataID()),s=e.get(l);return s||(s=e.create(l,a)),s.setLinkedRecord(n,i),null==s.getValue("cursor")&&s.setValue(null,"cursor"),s},deleteNode:function(e,t){var n=r.get(),a=n.EDGES,i=n.NODE,o=e.getLinkedRecords(a);if(o){for(var l,s=0;s<o.length;s++){var u=o[s],c=u&&u.getLinkedRecord(i);null!=c&&c.getDataID()===t?void 0===l&&(l=o.slice(0,s)):void 0!==l&&l.push(u)}void 0!==l&&e.setLinkedRecords(l,a)}},getConnection:function(e,t,n){var r=a(s,t,null);return e.getLinkedRecord(r,n)},getConnectionID:function(e,t,n){var r=a(s,t,null),i=l(r,n);return o(e,i)},insertEdgeAfter:function(e,t,n){var a=r.get(),i=a.CURSOR,o=a.EDGES,l=e.getLinkedRecords(o);if(l){var s;if(null==n)s=l.concat(t);else{s=[];for(var u=!1,c=0;c<l.length;c++){var f=l[c];s.push(f),null!=f&&n===f.getValue(i)&&(s.push(t),u=!0)}u||s.push(t)}e.setLinkedRecords(s,o)}else e.setLinkedRecords([t],o)},insertEdgeBefore:function(e,t,n){var a=r.get(),i=a.CURSOR,o=a.EDGES,l=e.getLinkedRecords(o);if(l){var s;if(null==n)s=[t].concat(l);else{s=[];for(var u=!1,c=0;c<l.length;c++){var f=l[c];null!=f&&n===f.getValue(i)&&(s.push(t),u=!0),s.push(f)}u||s.unshift(t)}e.setLinkedRecords(s,o)}else e.setLinkedRecords([t],o)},update:function(e,t){var n=e.get(t.dataID);if(n){var a=r.get(),i=a.EDGES,l=a.END_CURSOR,s=a.HAS_NEXT_PAGE,d=a.HAS_PREV_PAGE,p=a.PAGE_INFO,h=a.PAGE_INFO_TYPE,v=a.START_CURSOR,m=n.getLinkedRecord(t.fieldKey),g=m&&m.getLinkedRecord(p);if(m){var _=o(n.getDataID(),t.handleKey),y=n.getLinkedRecord(t.handleKey),b=null!=y?y:e.get(_),E=b&&b.getLinkedRecord(p);if(b){null==y&&n.setLinkedRecord(b,t.handleKey);var S=b,k=m.getLinkedRecords(i);k&&(k=k.map((function(t){return c(e,S,t)})));var R=S.getLinkedRecords(i),w=S.getLinkedRecord(p);S.copyFieldsFrom(m),R&&S.setLinkedRecords(R,i),w&&S.setLinkedRecord(w,p);var I=[],C=t.args;if(R&&k)if(null!=C.after){if(!E||C.after!==E.getValue(l))return;var P=new Set;f(R,I,P),f(k,I,P)}else if(null!=C.before){if(!E||C.before!==E.getValue(v))return;var D=new Set;f(k,I,D),f(R,I,D)}else I=k;else I=k||R;if(null!=I&&I!==R&&S.setLinkedRecords(I,i),E&&g)if(null==C.after&&null==C.before)E.copyFieldsFrom(g);else if(null!=C.before||null==C.after&&C.last){E.setValue(!!g.getValue(d),d);var x=g.getValue(v);"string"==typeof x&&E.setValue(x,v)}else if(null!=C.after||null==C.before&&C.first){E.setValue(!!g.getValue(s),s);var O=g.getValue(l);"string"==typeof O&&E.setValue(O,l)}}else{var T=e.create(_,m.getType());T.setValue(0,u),T.copyFieldsFrom(m);var F=m.getLinkedRecords(i);F&&(F=F.map((function(t){return c(e,T,t)})),T.setLinkedRecords(F,i)),n.setLinkedRecord(T,t.handleKey),(E=e.create(o(T.getDataID(),p),h)).setValue(!1,s),E.setValue(!1,d),E.setValue(null,l),E.setValue(null,v),g&&E.copyFieldsFrom(g),T.setLinkedRecord(E,p)}}else n.setValue(null,t.handleKey)}}}},3300:e=>{"use strict";var t={after:!0,before:!0,find:!0,first:!0,last:!0,surrounds:!0},n={CLIENT_MUTATION_ID:"clientMutationId",CURSOR:"cursor",EDGES:"edges",END_CURSOR:"endCursor",HAS_NEXT_PAGE:"hasNextPage",HAS_PREV_PAGE:"hasPreviousPage",NODE:"node",PAGE_INFO_TYPE:"PageInfo",PAGE_INFO:"pageInfo",START_CURSOR:"startCursor"},r={inject:function(e){n=e},get:function(){return n},isConnectionCall:function(e){return t.hasOwnProperty(e.name)}};e.exports=r},1093:(e,t,n)=>{"use strict";var r=n(5847)(n(1735)),a=n(1743),i=n(3300),o=n(1143),l=(n(3620),{update:function(e,t){var n=e.get(t.dataID);if(null!=n){var r=n.getValue(t.fieldKey);"string"==typeof r?e.delete(r):Array.isArray(r)&&r.forEach((function(t){"string"==typeof t&&e.delete(t)}))}}}),s={update:function(e,t){var n=e.get(t.dataID);if(null!=n){var i=t.handleArgs.connections;null==i&&o(!1);var l=n.getValue(t.fieldKey);(Array.isArray(l)?l:[l]).forEach((function(t){if("string"==typeof t){var n,o=(0,r.default)(i);try{for(o.s();!(n=o.n()).done;){var l=n.value,s=e.get(l);null!=s&&a.deleteNode(s,t)}}catch(e){o.e(e)}finally{o.f()}}}))}}},u={update:p(a.insertEdgeAfter)},c={update:p(a.insertEdgeBefore)},f={update:h(a.insertEdgeAfter)},d={update:h(a.insertEdgeBefore)};function p(e){return function(t,n){var l,s=t.get(n.dataID);if(null!=s){var u,c,f=n.handleArgs.connections;null==f&&o(!1);try{u=s.getLinkedRecord(n.fieldKey,n.args)}catch(e){}if(!u)try{c=s.getLinkedRecords(n.fieldKey,n.args)}catch(e){}if(null!=u||null!=c){var d,p=i.get(),h=p.NODE,v=p.EDGES,m=null!==(l=c)&&void 0!==l?l:[u],g=(0,r.default)(m);try{var _=function(){var n=d.value;if(null==n)return"continue";var i=n.getLinkedRecord("node");if(!i)return"continue";var l,s=i.getDataID(),u=(0,r.default)(f);try{for(u.s();!(l=u.n()).done;){var c=l.value,p=t.get(c);if(null!=p&&!(null===(y=p.getLinkedRecords(v))||void 0===y?void 0:y.some((function(e){var t;return(null==e||null===(t=e.getLinkedRecord(h))||void 0===t?void 0:t.getDataID())===s})))){var m=a.buildConnectionEdge(t,p,n);null==m&&o(!1),e(p,m)}}}catch(e){u.e(e)}finally{u.f()}};for(g.s();!(d=g.n()).done;){var y;_()}}catch(e){g.e(e)}finally{g.f()}}}}}function h(e){return function(t,n){var l,s=t.get(n.dataID);if(null!=s){var u,c,f=n.handleArgs,d=f.connections,p=f.edgeTypeName;null==d&&o(!1),null==p&&o(!1);try{u=s.getLinkedRecord(n.fieldKey,n.args)}catch(e){}if(!u)try{c=s.getLinkedRecords(n.fieldKey,n.args)}catch(e){}if(null!=u||null!=c){var h,v=i.get(),m=v.NODE,g=v.EDGES,_=null!==(l=c)&&void 0!==l?l:[u],y=(0,r.default)(_);try{var b=function(){var n=h.value;if(null==n)return"continue";var i,l=n.getDataID(),s=(0,r.default)(d);try{for(s.s();!(i=s.n()).done;){var u=i.value,c=t.get(u);if(null!=c&&!(null===(E=c.getLinkedRecords(g))||void 0===E?void 0:E.some((function(e){var t;return(null==e||null===(t=e.getLinkedRecord(m))||void 0===t?void 0:t.getDataID())===l})))){var f=a.createEdge(t,c,n,p);null==f&&o(!1),e(c,f)}}}catch(e){s.e(e)}finally{s.f()}};for(y.s();!(h=y.n()).done;){var E;b()}}catch(e){y.e(e)}finally{y.f()}}}}}e.exports={AppendEdgeHandler:u,DeleteRecordHandler:l,PrependEdgeHandler:c,AppendNodeHandler:f,PrependNodeHandler:d,DeleteEdgeHandler:s}},3151:(e,t,n)=>{"use strict";var r=n(1743),a=n(3300),i=n(5557),o=n(1093),l=n(8080),s=n(132),u=n(8298),c=n(3385),f=n(9558),d=n(2158),p=n(2299),h=n(1230),v=n(4176),m=n(1071),g=n(8250),_=n(1447),y=n(1984),b=n(2893),E=n(5060),S=n(1152),k=n(1241),R=n(4973),w=n(8724),I=n(9480),C=n(1380),P=n(2691),D=n(869),x=n(5621),O=n(1069),T=n(221),F=n(8958),N=n(594),A=n(2232),L=n(8216),M=n(7106),U=n(1530),q=n(6956),z=n(1126),j=n(676),V=n(7188),Q=n(641),K=n(7669),B=n(1507),H=n(5578),W=n(8154),Y=n(5476),G=n(1411),$=n(6063),X=$.generateClientID,J=$.generateUniqueClientID,Z=$.isClientID;e.exports={Environment:v,Network:b,Observable:E,QueryResponseCache:R,RecordSource:w,Record:g,ReplaySubject:I,Store:y,areEqualSelectors:_.areEqualSelectors,createFragmentSpecResolver:T,createNormalizationSelector:_.createNormalizationSelector,createOperationDescriptor:m.createOperationDescriptor,createReaderSelector:_.createReaderSelector,createRequestDescriptor:m.createRequestDescriptor,getDataIDsFromFragment:_.getDataIDsFromFragment,getDataIDsFromObject:_.getDataIDsFromObject,getNode:i.getNode,getFragment:i.getFragment,getInlineDataFragment:i.getInlineDataFragment,getModuleComponentKey:C.getModuleComponentKey,getModuleOperationKey:C.getModuleOperationKey,getPaginationFragment:i.getPaginationFragment,getPluralSelector:_.getPluralSelector,getRefetchableFragment:i.getRefetchableFragment,getRequest:i.getRequest,getRequestIdentifier:j,getSelector:_.getSelector,getSelectorsFromObject:_.getSelectorsFromObject,getSingularSelector:_.getSingularSelector,getStorageKey:C.getStorageKey,getVariablesFromFragment:_.getVariablesFromFragment,getVariablesFromObject:_.getVariablesFromObject,getVariablesFromPluralFragment:_.getVariablesFromPluralFragment,getVariablesFromSingularFragment:_.getVariablesFromSingularFragment,reportMissingRequiredFields:W,graphql:i.graphql,isFragment:i.isFragment,isInlineDataFragment:i.isInlineDataFragment,isRequest:i.isRequest,readInlineData:B,MutationTypes:c.MutationTypes,RangeOperations:c.RangeOperations,DefaultHandlerProvider:d,ConnectionHandler:r,MutationHandlers:o,VIEWER_ID:P.VIEWER_ID,VIEWER_TYPE:P.VIEWER_TYPE,applyOptimisticMutation:D,commitLocalUpdate:x,commitMutation:O,fetchQuery:L,fetchQuery_DEPRECATED:U,isRelayModernEnvironment:Q,requestSubscription:Y,ConnectionInterface:a,PreloadableQueryRegistry:l,RelayProfiler:k,createPayloadFor3DField:F,RelayConcreteNode:s,RelayError:p,RelayFeatureFlags:h,DEFAULT_HANDLE_KEY:f.DEFAULT_HANDLE_KEY,FRAGMENTS_KEY:C.FRAGMENTS_KEY,FRAGMENT_OWNER_KEY:C.FRAGMENT_OWNER_KEY,ID_KEY:C.ID_KEY,REF_KEY:C.REF_KEY,REFS_KEY:C.REFS_KEY,ROOT_ID:C.ROOT_ID,ROOT_TYPE:C.ROOT_TYPE,TYPENAME_KEY:C.TYPENAME_KEY,deepFreeze:A,generateClientID:X,generateUniqueClientID:J,getRelayHandleKey:z,isClientID:Z,isPromise:V,isScalarAndEqual:K,recycleNodesInto:H,stableCopy:G,getFragmentIdentifier:q,__internal:{OperationTracker:S,createRelayContext:N,getOperationVariables:u.getOperationVariables,fetchQuery:M.fetchQuery,fetchQueryDeduped:M.fetchQueryDeduped,getPromiseForActiveRequest:M.getPromiseForActiveRequest,getObservableForActiveRequest:M.getObservableForActiveRequest}}},3385:(e,t,n)=>{"use strict";var r=n(5847)(n(1735)),a=n(1743),i=(n(3620),Object.freeze({RANGE_ADD:"RANGE_ADD",RANGE_DELETE:"RANGE_DELETE",NODE_DELETE:"NODE_DELETE"})),o=Object.freeze({APPEND:"append",PREPEND:"prepend"});function l(e){return e.fragment.selections&&e.fragment.selections.length>0&&"LinkedField"===e.fragment.selections[0].kind?e.fragment.selections[0].name:null}e.exports={MutationTypes:i,RangeOperations:o,convert:function(e,t,n,i){var o=n?[n]:[],s=i?[i]:[];return e.forEach((function(e){switch(e.type){case"NODE_DELETE":var n=function(e,t){var n=e.deletedIDFieldName,r=l(t);return r?function(e,t){var a=e.getRootField(r);if(a){var i=a.getValue(n);(Array.isArray(i)?i:[i]).forEach((function(t){t&&"string"==typeof t&&e.delete(t)}))}}:null}(e,t);n&&(o.push(n),s.push(n));break;case"RANGE_ADD":var i=function(e,t){var n=e.parentID,i=e.connectionInfo,o=e.edgeName;if(!n)return null;var s=l(t);return i&&s?function(e,t){var l=e.get(n);if(l){var u=e.getRootField(s);if(u){var c,f=u.getLinkedRecord(o),d=(0,r.default)(i);try{for(d.s();!(c=d.n()).done;){var p=c.value;if(f){var h=a.getConnection(l,p.key,p.filters);if(h){var v=a.buildConnectionEdge(e,h,f);if(v)switch(p.rangeBehavior){case"append":a.insertEdgeAfter(h,v);break;case"prepend":a.insertEdgeBefore(h,v)}}}}}catch(e){d.e(e)}finally{d.f()}}}}:null}(e,t);i&&(o.push(i),s.push(i));break;case"RANGE_DELETE":var u=function(e,t){var n=e.parentID,i=e.connectionKeys,o=e.pathToConnection,s=e.deletedIDFieldName;if(!n)return null;var u=l(t);return u?function(e,t){if(t){var l=[],c=t[u];if(c&&Array.isArray(s)){var f,d=(0,r.default)(s);try{for(d.s();!(f=d.n()).done;){var p=f.value;c&&"object"==typeof c&&(c=c[p])}}catch(e){d.e(e)}finally{d.f()}Array.isArray(c)?c.forEach((function(e){e&&e.id&&"object"==typeof e&&"string"==typeof e.id&&l.push(e.id)})):c&&c.id&&"string"==typeof c.id&&l.push(c.id)}else c&&"string"==typeof s&&"object"==typeof c&&("string"==typeof(c=c[s])?l.push(c):Array.isArray(c)&&c.forEach((function(e){"string"==typeof e&&l.push(e)})));!function(e,t,n,i,o){var l=i.get(e);if(l&&!(n.length<2)){for(var s=l,u=1;u<n.length-1;u++)s&&(s=s.getLinkedRecord(n[u]));if(t&&s){var c,f=(0,r.default)(t);try{var d=function(){var e=c.value,t=a.getConnection(s,e.key,e.filters);t&&o.forEach((function(e){a.deleteNode(t,e)}))};for(f.s();!(c=f.n()).done;)d()}catch(e){f.e(e)}finally{f.f()}}}}(n,i,o,e,l)}}:null}(e,t);u&&(o.push(u),s.push(u))}})),{optimisticUpdater:function(e,t){o.forEach((function(n){n(e,t)}))},updater:function(e,t){s.forEach((function(n){n(e,t)}))}}}}},1228:(e,t,n)=>{"use strict";var r=n(1143),a=n(6063).generateClientID,i=n(1380).getStableStorageKey,o=function(){function e(e,t,n){this._dataID=n,this._mutator=t,this._source=e}var t=e.prototype;return t.copyFieldsFrom=function(e){this._mutator.copyFields(e.getDataID(),this._dataID)},t.getDataID=function(){return this._dataID},t.getType=function(){var e=this._mutator.getType(this._dataID);return null==e&&r(!1),e},t.getValue=function(e,t){var n=i(e,t);return this._mutator.getValue(this._dataID,n)},t.setValue=function(e,t,n){l(e)||r(!1);var a=i(t,n);return this._mutator.setValue(this._dataID,a,e),this},t.getLinkedRecord=function(e,t){var n=i(e,t),r=this._mutator.getLinkedRecordID(this._dataID,n);return null!=r?this._source.get(r):r},t.setLinkedRecord=function(t,n,a){t instanceof e||r(!1);var o=i(n,a),l=t.getDataID();return this._mutator.setLinkedRecordID(this._dataID,o,l),this},t.getOrCreateLinkedRecord=function(e,t,n){var r=this.getLinkedRecord(e,n);if(!r){var o,l=i(e,n),s=a(this.getDataID(),l);r=null!==(o=this._source.get(s))&&void 0!==o?o:this._source.create(s,t),this.setLinkedRecord(r,e,n)}return r},t.getLinkedRecords=function(e,t){var n=this,r=i(e,t),a=this._mutator.getLinkedRecordIDs(this._dataID,r);return null==a?a:a.map((function(e){return null!=e?n._source.get(e):e}))},t.setLinkedRecords=function(e,t,n){Array.isArray(e)||r(!1);var a=i(t,n),o=e.map((function(e){return e&&e.getDataID()}));return this._mutator.setLinkedRecordIDs(this._dataID,a,o),this},t.invalidateRecord=function(){this._source.markIDForInvalidation(this._dataID)},e}();function l(e){return null==e||"object"!=typeof e||Array.isArray(e)&&e.every(l)}e.exports=o},1697:(e,t,n)=>{"use strict";var r=n(8250),a=n(1143),i=n(6528).EXISTENT,o=function(){function e(e,t){this.__sources=[t,e],this._base=e,this._sink=t}var t=e.prototype;return t.unstable_getRawRecordWithChanges=function(e){var t=this._base.get(e),n=this._sink.get(e);return void 0===n?null==t?t:r.clone(t):null===n?null:null!=t?r.update(t,n):r.clone(n)},t._getSinkRecord=function(e){var t=this._sink.get(e);if(!t){var n=this._base.get(e);n||a(!1),t=r.create(e,r.getType(n)),this._sink.set(e,t)}return t},t.copyFields=function(e,t){var n=this._sink.get(e),i=this._base.get(e);n||i||a(!1);var o=this._getSinkRecord(t);i&&r.copyFields(i,o),n&&r.copyFields(n,o)},t.copyFieldsFromRecord=function(e,t){var n=this._getSinkRecord(t);r.copyFields(e,n)},t.create=function(e,t){(this._base.getStatus(e)===i||this._sink.getStatus(e)===i)&&a(!1);var n=r.create(e,t);this._sink.set(e,n)},t.delete=function(e){this._sink.delete(e)},t.getStatus=function(e){return this._sink.has(e)?this._sink.getStatus(e):this._base.getStatus(e)},t.getType=function(e){for(var t=0;t<this.__sources.length;t++){var n=this.__sources[t].get(e);if(n)return r.getType(n);if(null===n)return null}},t.getValue=function(e,t){for(var n=0;n<this.__sources.length;n++){var a=this.__sources[n].get(e);if(a){var i=r.getValue(a,t);if(void 0!==i)return i}else if(null===a)return null}},t.setValue=function(e,t,n){var a=this._getSinkRecord(e);r.setValue(a,t,n)},t.getLinkedRecordID=function(e,t){for(var n=0;n<this.__sources.length;n++){var a=this.__sources[n].get(e);if(a){var i=r.getLinkedRecordID(a,t);if(void 0!==i)return i}else if(null===a)return null}},t.setLinkedRecordID=function(e,t,n){var a=this._getSinkRecord(e);r.setLinkedRecordID(a,t,n)},t.getLinkedRecordIDs=function(e,t){for(var n=0;n<this.__sources.length;n++){var a=this.__sources[n].get(e);if(a){var i=r.getLinkedRecordIDs(a,t);if(void 0!==i)return i}else if(null===a)return null}},t.setLinkedRecordIDs=function(e,t,n){var a=this._getSinkRecord(e);r.setLinkedRecordIDs(a,t,n)},e}();e.exports=o},7703:(e,t,n)=>{"use strict";var r=n(8250),a=n(1228),i=n(1143),o=n(6528),l=o.EXISTENT,s=o.NONEXISTENT,u=n(1380),c=u.ROOT_ID,f=u.ROOT_TYPE,d=function(){function e(e,t,n){this.__mutator=e,this._handlerProvider=n||null,this._proxies={},this._getDataID=t,this._invalidatedStore=!1,this._idsMarkedForInvalidation=new Set}var t=e.prototype;return t.publishSource=function(e,t){var n=this;e.getRecordIDs().forEach((function(t){var a=e.getStatus(t);if(a===l){var i=e.get(t);i&&(n.__mutator.getStatus(t)!==l&&n.create(t,r.getType(i)),n.__mutator.copyFieldsFromRecord(i,t))}else a===s&&n.delete(t)})),t&&t.length&&t.forEach((function(e){var t=n._handlerProvider&&n._handlerProvider(e.handle);t||i(!1),t.update(n,e)}))},t.create=function(e,t){this.__mutator.create(e,t),delete this._proxies[e];var n=this.get(e);return n||i(!1),n},t.delete=function(e){e===c&&i(!1),delete this._proxies[e],this.__mutator.delete(e)},t.get=function(e){if(!this._proxies.hasOwnProperty(e)){var t=this.__mutator.getStatus(e);this._proxies[e]=t===l?new a(this,this.__mutator,e):t===s?null:void 0}return this._proxies[e]},t.getRoot=function(){var e=this.get(c);return e||(e=this.create(c,f)),e&&e.getType()===f||i(!1),e},t.invalidateStore=function(){this._invalidatedStore=!0},t.isStoreMarkedForInvalidation=function(){return this._invalidatedStore},t.markIDForInvalidation=function(e){this._idsMarkedForInvalidation.add(e)},t.getIDsMarkedForInvalidation=function(){return this._idsMarkedForInvalidation},e}();e.exports=d},4596:(e,t,n)=>{"use strict";var r=n(1143),a=n(1380),i=a.getStorageKey,o=a.ROOT_TYPE,l=function(){function e(e,t,n){this.__mutator=e,this.__recordSource=t,this._readSelector=n}var t=e.prototype;return t.create=function(e,t){return this.__recordSource.create(e,t)},t.delete=function(e){this.__recordSource.delete(e)},t.get=function(e){return this.__recordSource.get(e)},t.getRoot=function(){return this.__recordSource.getRoot()},t.getOperationRoot=function(){var e=this.__recordSource.get(this._readSelector.dataID);return e||(e=this.__recordSource.create(this._readSelector.dataID,o)),e},t._getRootField=function(e,t,n){var a=e.node.selections.find((function(e){return"LinkedField"===e.kind&&e.name===t}));return a&&"LinkedField"===a.kind||r(!1),a.plural!==n&&r(!1),a},t.getRootField=function(e){var t=this._getRootField(this._readSelector,e,!1),n=i(t,this._readSelector.variables);return this.getOperationRoot().getLinkedRecord(n)},t.getPluralRootField=function(e){var t=this._getRootField(this._readSelector,e,!0),n=i(t,this._readSelector.variables);return this.getOperationRoot().getLinkedRecords(n)},t.invalidateStore=function(){this.__recordSource.invalidateStore()},e}();e.exports=l},869:(e,t,n)=>{"use strict";var r=n(3385),a=n(1143),i=n(641),o=n(5557).getRequest,l=n(1071).createOperationDescriptor;e.exports=function(e,t){i(e)||a(!1);var n=o(t.mutation);if("mutation"!==n.params.operationKind)throw new Error("commitMutation: Expected mutation operation");var s=t.optimisticUpdater,u=t.configs,c=t.optimisticResponse,f=t.variables,d=l(n,f);return u&&(s=r.convert(u,n,s).optimisticUpdater),e.applyMutation({operation:d,response:c,updater:s})}},5621:e=>{"use strict";e.exports=function(e,t){e.commitUpdate(t)}},1069:(e,t,n)=>{"use strict";var r=n(5847)(n(9381)),a=n(3385),i=n(1143),o=n(641),l=(n(9284),n(3620),n(5557).getRequest),s=n(6063).generateUniqueClientID,u=n(1071).createOperationDescriptor;e.exports=function(e,t){o(e)||i(!1);var n=l(t.mutation);if("mutation"!==n.params.operationKind)throw new Error("commitMutation: Expected mutation operation");if("Request"!==n.kind)throw new Error("commitMutation: Expected mutation to be of type request");var c=t.optimisticResponse,f=t.optimisticUpdater,d=t.updater,p=t.configs,h=t.cacheConfig,v=t.onError,m=t.onUnsubscribe,g=t.variables,_=t.uploadables,y=u(n,g,h,s());if("function"==typeof c&&(c=c()),p){var b=a.convert(p,n,f,d);f=b.optimisticUpdater,d=b.updater}var E=[];return{dispose:e.executeMutation({operation:y,optimisticResponse:c,optimisticUpdater:f,updater:d,uploadables:_}).subscribe({next:function(e){Array.isArray(e)?e.forEach((function(e){e.errors&&E.push.apply(E,(0,r.default)(e.errors))})):e.errors&&E.push.apply(E,(0,r.default)(e.errors))},complete:function(){var n=t.onCompleted;n&&n(e.lookup(y.fragment).data,0!==E.length?E:null)},error:v,unsubscribe:m}).unsubscribe}}},9284:(e,t,n)=>{"use strict";n(5847)(n(9471)),n(3620),Object.prototype.hasOwnProperty;var r=n(132);r.CONDITION,r.CLIENT_COMPONENT,r.CLIENT_EXTENSION,r.DEFER,r.FLIGHT_FIELD,r.FRAGMENT_SPREAD,r.INLINE_FRAGMENT,r.LINKED_FIELD,r.LINKED_HANDLE,r.MODULE_IMPORT,r.SCALAR_FIELD,r.SCALAR_HANDLE,r.STREAM,r.TYPE_DISCRIMINATOR,e.exports=function(){}},7192:(e,t,n)=>{"use strict";var r=n(5060);e.exports={convertFetch:function(e){return function(t,n,a,i,o){var l=e(t,n,a,i,o);return l instanceof Error?r.create((function(e){return e.error(l)})):r.from(l)}}}},2893:(e,t,n)=>{"use strict";var r=n(1143),a=n(7192).convertFetch;e.exports={create:function(e,t){var n=a(e);return{execute:function(e,a,i,o,l){if("subscription"===e.operationKind)return t||r(!1),o&&r(!1),t(e,a,i);var s=i.poll;return null!=s?(o&&r(!1),n(e,a,{force:!0}).poll(s)):n(e,a,i,o,l)}}}}},5060:(e,t,n)=>{"use strict";var r=n(7188),a=function(e,t){},i=function(){function e(e){this._source=e}e.create=function(t){return new e(t)},e.onUnhandledError=function(e){a=e},e.from=function(e){return function(e){return"object"==typeof e&&null!==e&&"function"==typeof e.subscribe}(e)?o(e):r(e)?l(e):s(e)};var t=e.prototype;return t.catch=function(t){var n=this;return e.create((function(e){var r;return n.subscribe({start:function(e){r=e},next:e.next,complete:e.complete,error:function(n){try{t(n).subscribe({start:function(e){r=e},next:e.next,complete:e.complete,error:e.error})}catch(t){e.error(t,!0)}}}),function(){return r.unsubscribe()}}))},t.concat=function(t){var n=this;return e.create((function(e){var r;return n.subscribe({start:function(e){r=e},next:e.next,error:e.error,complete:function(){r=t.subscribe(e)}}),function(){r&&r.unsubscribe()}}))},t.do=function(t){var n=this;return e.create((function(e){var r=function(n){return function(){try{t[n]&&t[n].apply(t,arguments)}catch(e){a(e,!0)}e[n]&&e[n].apply(e,arguments)}};return n.subscribe({start:r("start"),next:r("next"),error:r("error"),complete:r("complete"),unsubscribe:r("unsubscribe")})}))},t.finally=function(t){var n=this;return e.create((function(e){var r=n.subscribe(e);return function(){r.unsubscribe(),t()}}))},t.ifEmpty=function(t){var n=this;return e.create((function(e){var r=!1,a=n.subscribe({next:function(t){r=!0,e.next(t)},error:e.error,complete:function(){r?e.complete():a=t.subscribe(e)}});return function(){a.unsubscribe()}}))},t.subscribe=function(e){return function(e,t){var n,r=!1,i=function(e){return Object.defineProperty(e,"closed",{get:function(){return r}})};function o(){if(n){if(n.unsubscribe)n.unsubscribe();else try{n()}catch(e){a(e,!0)}n=void 0}}var l=i({unsubscribe:function(){if(!r){r=!0;try{t.unsubscribe&&t.unsubscribe(l)}catch(e){a(e,!0)}finally{o()}}}});try{t.start&&t.start(l)}catch(e){a(e,!0)}if(r)return l;var s=i({next:function(e){if(!r&&t.next)try{t.next(e)}catch(e){a(e,!0)}},error:function(e,n){if(r||!t.error)r=!0,a(e,n||!1),o();else{r=!0;try{t.error(e)}catch(e){a(e,!0)}finally{o()}}},complete:function(){if(!r){r=!0;try{t.complete&&t.complete()}catch(e){a(e,!0)}finally{o()}}}});try{n=e(s)}catch(e){s.error(e,!0)}return r&&o(),l}(this._source,e)},t.map=function(t){var n=this;return e.create((function(e){var r=n.subscribe({complete:e.complete,error:e.error,next:function(n){try{var r=t(n);e.next(r)}catch(t){e.error(t,!0)}}});return function(){r.unsubscribe()}}))},t.mergeMap=function(t){var n=this;return e.create((function(r){var a=[];function i(e){this._sub=e,a.push(e)}function o(){a.splice(a.indexOf(this._sub),1),0===a.length&&r.complete()}return n.subscribe({start:i,next:function(n){try{r.closed||e.from(t(n)).subscribe({start:i,next:r.next,error:r.error,complete:o})}catch(e){r.error(e,!0)}},error:r.error,complete:o}),function(){a.forEach((function(e){return e.unsubscribe()})),a.length=0}}))},t.poll=function(t){var n=this;return e.create((function(e){var r,a;return function i(){r=n.subscribe({next:e.next,error:e.error,complete:function(){a=setTimeout(i,t)}})}(),function(){clearTimeout(a),r.unsubscribe()}}))},t.toPromise=function(){var e=this;return new Promise((function(t,n){var r=!1;e.subscribe({next:function(e){r||(r=!0,t(e))},error:n,complete:t})}))},e}();function o(e){return e instanceof i?e:i.create((function(t){return e.subscribe(t)}))}function l(e){return i.create((function(t){e.then((function(e){t.next(e),t.complete()}),t.error)}))}function s(e){return i.create((function(t){t.next(e),t.complete()}))}e.exports=i},4973:(e,t,n)=>{"use strict";var r=n(5847)(n(9471)),a=n(1143),i=n(1411),o=function(){function e(e){var t=e.size,n=e.ttl;t>0||a(!1),n>0||a(!1),this._responses=new Map,this._size=t,this._ttl=n}var t=e.prototype;return t.clear=function(){this._responses.clear()},t.get=function(e,t){var n=this,a=l(e,t);this._responses.forEach((function(e,t){e.fetchTime+n._ttl>=Date.now()||n._responses.delete(t)}));var i=this._responses.get(a);return null!=i?(0,r.default)((0,r.default)({},i.payload),{},{extensions:(0,r.default)((0,r.default)({},i.payload.extensions),{},{cacheTimestamp:i.fetchTime})}):null},t.set=function(e,t,n){var r=Date.now(),a=l(e,t);if(this._responses.delete(a),this._responses.set(a,{fetchTime:r,payload:n}),this._responses.size>this._size){var i=this._responses.keys().next();i.done||this._responses.delete(i.value)}},e}();function l(e,t){return JSON.stringify(i({queryID:e,variables:t}))}e.exports=o},5557:(e,t,n)=>{"use strict";var r=n(132),a=n(1143);function i(e){var t=e;return"function"==typeof t?t=t():t.default&&(t=t.default),t}function o(e){var t=i(e);return"object"==typeof t&&null!==t&&t.kind===r.FRAGMENT}function l(e){var t=i(e);return"object"==typeof t&&null!==t&&t.kind===r.REQUEST}function s(e){var t=i(e);return"object"==typeof t&&null!==t&&t.kind===r.INLINE_DATA_FRAGMENT}function u(e){var t=i(e);return o(t)||a(!1),t}n(3620),e.exports={getFragment:u,getNode:i,getPaginationFragment:function(e){var t,n=u(e),r=null===(t=n.metadata)||void 0===t?void 0:t.refetch,a=null==r?void 0:r.connection;return null===r||"object"!=typeof r||null===a||"object"!=typeof a?null:n},getRefetchableFragment:function(e){var t,n=u(e),r=null===(t=n.metadata)||void 0===t?void 0:t.refetch;return null===r||"object"!=typeof r?null:n},getRequest:function(e){var t=i(e);return l(t)||a(!1),t},getInlineDataFragment:function(e){var t=i(e);return s(t)||a(!1),t},graphql:function(e){a(!1)},isFragment:o,isRequest:l,isInlineDataFragment:s}},8080:e=>{"use strict";var t=new(function(){function e(){this._preloadableQueries=new Map,this._callbacks=new Map}var t=e.prototype;return t.set=function(e,t){this._preloadableQueries.set(e,t);var n=this._callbacks.get(e);null!=n&&n.forEach((function(e){try{e(t)}catch(e){setTimeout((function(){throw e}),0)}}))},t.get=function(e){return this._preloadableQueries.get(e)},t.onLoad=function(e,t){var n,r=null!==(n=this._callbacks.get(e))&&void 0!==n?n:new Set;return r.add(t),this._callbacks.set(e,r),{dispose:function(){r.delete(t)}}},t.clear=function(){this._preloadableQueries.clear()},e}());e.exports=t},8216:(e,t,n)=>{"use strict";var r=n(5847)(n(9471)),a=n(5060),i=n(7106),o=n(1143),l=n(8154),s=n(1071).createOperationDescriptor,u=n(5557).getRequest;function c(e,t){return i.fetchQuery(e,t).map((function(){return e.lookup(t.fragment)}))}e.exports=function(e,t,n,i){var f,d=u(t);"query"!==d.params.operationKind&&o(!1);var p=(0,r.default)({force:!0},null==i?void 0:i.networkCacheConfig),h=s(d,n,p),v=null!==(f=null==i?void 0:i.fetchPolicy)&&void 0!==f?f:"network-only";function m(t){return null!=t.missingRequiredFields&&l(e,t.missingRequiredFields),t.data}switch(v){case"network-only":return c(e,h).map(m);case"store-or-network":return"available"===e.check(h).status?a.from(e.lookup(h.fragment)).map(m):c(e,h).map(m);default:throw new Error("fetchQuery: Invalid fetchPolicy "+v)}}},7106:(e,t,n)=>{"use strict";var r=n(5060),a=n(9480),i=n(1143),o="function"==typeof WeakMap?new WeakMap:new Map;function l(e,t,n){return r.create((function(o){var l=u(e),s=l.get(t);return s||n().finally((function(){return l.delete(t)})).subscribe({start:function(e){s={identifier:t,subject:new a,subjectForInFlightStatus:new a,subscription:e},l.set(t,s)},next:function(e){var n=c(l,t);n.subject.next(e),n.subjectForInFlightStatus.next(e)},error:function(e){var n=c(l,t);n.subject.error(e),n.subjectForInFlightStatus.error(e)},complete:function(){var e=c(l,t);e.subject.complete(),e.subjectForInFlightStatus.complete()},unsubscribe:function(e){var n=c(l,t);n.subject.unsubscribe(),n.subjectForInFlightStatus.unsubscribe()}}),null==s&&i(!1),function(e,t){return r.create((function(n){var r=t.subject.subscribe(n);return function(){r.unsubscribe();var n=e.get(t.identifier);if(n){var a=n.subscription;null!=a&&0===n.subject.getObserverCount()&&(a.unsubscribe(),e.delete(t.identifier))}}}))}(l,s).subscribe(o)}))}function s(e,t,n){return r.create((function(t){var r=n.subjectForInFlightStatus.subscribe({error:t.error,next:function(r){e.isRequestActive(n.identifier)?t.next():t.complete()},complete:t.complete,unsubscribe:t.complete});return function(){r.unsubscribe()}}))}function u(e){var t=o.get(e);if(null!=t)return t;var n=new Map;return o.set(e,n),n}function c(e,t){var n=e.get(t);return null==n&&i(!1),n}e.exports={fetchQuery:function(e,t){return l(e,t.request.identifier,(function(){return e.execute({operation:t})}))},fetchQueryDeduped:l,getPromiseForActiveRequest:function(e,t){var n=u(e).get(t.identifier);return n&&e.isRequestActive(n.identifier)?new Promise((function(t,r){var a=!1;s(e,0,n).subscribe({complete:t,error:r,next:function(e){a&&t(e)}}),a=!0})):null},getObservableForActiveRequest:function(e,t){var n=u(e).get(t.identifier);return n&&e.isRequestActive(n.identifier)?s(e,0,n):null}}},1530:(e,t,n)=>{"use strict";var r=n(1071).createOperationDescriptor,a=n(5557).getRequest;e.exports=function(e,t,n,i){var o=a(t);if("query"!==o.params.operationKind)throw new Error("fetchQuery: Expected query operation");var l=r(o,n,i);return e.execute({operation:l}).map((function(){return e.lookup(l.fragment).data})).toPromise()}},6063:e=>{"use strict";var t="client:",n=0;e.exports={generateClientID:function(e,n,r){var a=e+":"+n;return null!=r&&(a+=":"+r),0!==a.indexOf(t)&&(a=t+a),a},generateUniqueClientID:function(){return"".concat(t,"local:").concat(n++)},isClientID:function(e){return 0===e.indexOf(t)}}},1639:(e,t,n)=>{"use strict";var r=n(5847)(n(1735)),a=n(132),i=n(1230),o=n(8250),l=n(1697),s=n(7703),u=n(4447),c=n(1380),f=n(5486),d=n(3871),p=n(2576),h=n(1143),v=n(6063).isClientID,m=n(6528),g=m.EXISTENT,_=m.UNKNOWN,y=n(5309).generateTypeID,b=a.CONDITION,E=a.CLIENT_COMPONENT,S=a.CLIENT_EXTENSION,k=a.DEFER,R=a.FLIGHT_FIELD,w=a.FRAGMENT_SPREAD,I=a.INLINE_FRAGMENT,C=a.LINKED_FIELD,P=a.LINKED_HANDLE,D=a.MODULE_IMPORT,x=a.SCALAR_FIELD,O=a.SCALAR_HANDLE,T=a.STREAM,F=a.TYPE_DISCRIMINATOR,N=c.ROOT_ID,A=c.getModuleOperationKey,L=c.getStorageKey,M=c.getArgumentValues,U=function(){function e(e,t,n,r,a,i,o){var u=new l(e,t);this._mostRecentlyInvalidatedAt=null,this._handlers=r,this._mutator=u,this._operationLoader=null!=a?a:null,this._recordSourceProxy=new s(u,i),this._recordWasMissing=!1,this._source=e,this._variables=n,this._shouldProcessClientComponents=o}var t=e.prototype;return t.check=function(e,t){return this._traverse(e,t),!0===this._recordWasMissing?{status:"missing",mostRecentlyInvalidatedAt:this._mostRecentlyInvalidatedAt}:{status:"available",mostRecentlyInvalidatedAt:this._mostRecentlyInvalidatedAt}},t._getVariableValue=function(e){return this._variables.hasOwnProperty(e)||h(!1),this._variables[e]},t._handleMissing=function(){this._recordWasMissing=!0},t._getDataForHandlers=function(e,t){return{args:e.args?M(e.args,this._variables):{},record:this._source.get(t)}},t._handleMissingScalarField=function(e,t){if("id"!==e.name||null!=e.alias||!v(t)){var n,a=this._getDataForHandlers(e,t),i=a.args,o=a.record,l=(0,r.default)(this._handlers);try{for(l.s();!(n=l.n()).done;){var s=n.value;if("scalar"===s.kind){var u=s.handle(e,o,i,this._recordSourceProxy);if(void 0!==u)return u}}}catch(e){l.e(e)}finally{l.f()}this._handleMissing()}},t._handleMissingLinkField=function(e,t){var n,a=this._getDataForHandlers(e,t),i=a.args,o=a.record,l=(0,r.default)(this._handlers);try{for(l.s();!(n=l.n()).done;){var s=n.value;if("linked"===s.kind){var u=s.handle(e,o,i,this._recordSourceProxy);if(void 0!==u&&(null===u||this._mutator.getStatus(u)===g))return u}}}catch(e){l.e(e)}finally{l.f()}this._handleMissing()},t._handleMissingPluralLinkField=function(e,t){var n,a=this,i=this._getDataForHandlers(e,t),o=i.args,l=i.record,s=(0,r.default)(this._handlers);try{for(s.s();!(n=s.n()).done;){var u=n.value;if("pluralLinked"===u.kind){var c=u.handle(e,l,o,this._recordSourceProxy);if(null!=c){if(c.every((function(e){return null!=e&&a._mutator.getStatus(e)===g})))return c}else if(null===c)return null}}}catch(e){s.e(e)}finally{s.f()}this._handleMissing()},t._traverse=function(e,t){var n=this._mutator.getStatus(t);if(n===_&&this._handleMissing(),n===g){var r=this._source.get(t),a=o.getInvalidationEpoch(r);null!=a&&(this._mostRecentlyInvalidatedAt=null!=this._mostRecentlyInvalidatedAt?Math.max(this._mostRecentlyInvalidatedAt,a):a),this._traverseSelections(e.selections,t)}},t._traverseSelections=function(e,t){var n=this;e.forEach((function(r){switch(r.kind){case x:n._checkScalar(r,t);break;case C:r.plural?n._checkPluralLink(r,t):n._checkLink(r,t);break;case b:n._getVariableValue(r.condition)===r.passingValue&&n._traverseSelections(r.selections,t);break;case I:var a=r.abstractKey;if(null==a)n._mutator.getType(t)===r.type&&n._traverseSelections(r.selections,t);else if(i.ENABLE_PRECISE_TYPE_REFINEMENT){var o=n._mutator.getType(t);null==o&&h(!1);var l=y(o),s=n._mutator.getValue(l,a);!0===s?n._traverseSelections(r.selections,t):null==s&&n._handleMissing()}else n._traverseSelections(r.selections,t);break;case P:var u=f(r,e,n._variables);u.plural?n._checkPluralLink(u,t):n._checkLink(u,t);break;case O:var c=d(r,e,n._variables);n._checkScalar(c,t);break;case D:n._checkModuleImport(r,t);break;case k:case T:n._traverseSelections(r.selections,t);break;case w:n._traverseSelections(r.fragment.selections,t);break;case S:var p=n._recordWasMissing;n._traverseSelections(r.selections,t),n._recordWasMissing=p;break;case F:if(i.ENABLE_PRECISE_TYPE_REFINEMENT){var v=r.abstractKey,m=n._mutator.getType(t);null==m&&h(!1);var g=y(m);null==n._mutator.getValue(g,v)&&n._handleMissing()}break;case R:if(!i.ENABLE_REACT_FLIGHT_COMPONENT_FIELD)throw new Error("Flight fields are not yet supported.");n._checkFlightField(r,t);break;case E:if(!1===n._shouldProcessClientComponents)break;n._traverseSelections(r.fragment.selections,t);break;default:h(!1)}}))},t._checkModuleImport=function(e,t){var n=this._operationLoader;null===n&&h(!1);var r=A(e.documentName),a=this._mutator.getValue(t,r);if(null!=a){var i=n.get(a);if(null!=i){var o=p(i);this._traverse(o,t)}else this._handleMissing()}else void 0===a&&this._handleMissing()},t._checkScalar=function(e,t){var n=L(e,this._variables),r=this._mutator.getValue(t,n);void 0===r&&void 0!==(r=this._handleMissingScalarField(e,t))&&this._mutator.setValue(t,n,r)},t._checkLink=function(e,t){var n=L(e,this._variables),r=this._mutator.getLinkedRecordID(t,n);void 0===r&&(null!=(r=this._handleMissingLinkField(e,t))?this._mutator.setLinkedRecordID(t,n,r):null===r&&this._mutator.setValue(t,n,null)),null!=r&&this._traverse(e,r)},t._checkPluralLink=function(e,t){var n=this,r=L(e,this._variables),a=this._mutator.getLinkedRecordIDs(t,r);void 0===a&&(null!=(a=this._handleMissingPluralLinkField(e,t))?this._mutator.setLinkedRecordIDs(t,r,a):null===a&&this._mutator.setValue(t,r,null)),a&&a.forEach((function(t){null!=t&&n._traverse(e,t)}))},t._checkFlightField=function(e,t){var n=L(e,this._variables),a=this._mutator.getLinkedRecordID(t,n);if(null==a)return void 0===a?void this._handleMissing():void 0;var i=this._mutator.getValue(a,u.REACT_FLIGHT_TREE_STORAGE_KEY),o=this._mutator.getValue(a,u.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY);if(null!=i&&Array.isArray(o)){var l=this._operationLoader;null===l&&h(!1);var s,c=this._variables,f=(0,r.default)(o);try{for(f.s();!(s=f.n()).done;){var d=s.value;this._variables=d.variables;var v=l.get(d.module);if(null!=v){var m=p(v);this._traverseSelections(m.selections,N)}else this._handleMissing()}}catch(e){f.e(e)}finally{f.f()}this._variables=c}else this._handleMissing()},e}();e.exports={check:function(e,t,n,r,a,i,o){var l=n.dataID,s=n.node,u=n.variables;return new U(e,t,u,r,a,i,o).check(s,l)}}},3898:(e,t,n)=>{"use strict";var r=n(5847),a=r(n(9471)),i=r(n(1735)),o=r(n(9381)),l=n(2299),s=n(1230),u=n(8250),c=n(5060),f=n(8724),d=n(1147),p=n(2576),h=n(1143),v=n(1411),m=(n(3620),n(6063)),g=m.generateClientID,_=m.generateUniqueClientID,y=n(1447),b=y.createNormalizationSelector,E=y.createReaderSelector,S=n(1380),k=S.ROOT_TYPE,R=S.TYPENAME_KEY,w=S.getStorageKey,I=function(){function e(e){var t=this,n=e.operation,r=e.operationExecutions,a=e.operationLoader,i=e.optimisticConfig,o=e.publishQueue,l=e.scheduler,s=e.sink,u=e.source,c=e.store,f=e.updater,d=e.operationTracker,p=e.treatMissingFieldsAsNull,h=e.getDataID,v=e.isClientPayload,m=e.reactFlightPayloadDeserializer,g=e.reactFlightServerErrorHandler,_=e.shouldProcessClientComponents;this._getDataID=h,this._treatMissingFieldsAsNull=p,this._incrementalPayloadsPending=!1,this._incrementalResults=new Map,this._nextSubscriptionId=0,this._operation=n,this._operationExecutions=r,this._operationLoader=a,this._operationTracker=d,this._operationUpdateEpochs=new Map,this._optimisticUpdates=null,this._pendingModulePayloadsCount=0,this._publishQueue=o,this._scheduler=l,this._sink=s,this._source=new Map,this._state="started",this._store=c,this._subscriptions=new Map,this._updater=f,this._isClientPayload=!0===v,this._reactFlightPayloadDeserializer=m,this._reactFlightServerErrorHandler=g,this._isSubscriptionOperation="subscription"===this._operation.request.node.params.operationKind,this._shouldProcessClientComponents=_;var y=this._nextSubscriptionId++;u.subscribe({complete:function(){return t._complete(y)},error:function(e){return t._error(e)},next:function(e){try{t._next(y,e)}catch(e){s.error(e)}},start:function(e){return t._start(y,e)}}),null!=i&&this._processOptimisticResponse(null!=i.response?{data:i.response}:null,i.updater,!1)}var t=e.prototype;return t.cancel=function(){var e=this;if("completed"!==this._state){this._state="completed",this._operationExecutions.delete(this._operation.request.identifier),0!==this._subscriptions.size&&(this._subscriptions.forEach((function(e){return e.unsubscribe()})),this._subscriptions.clear());var t=this._optimisticUpdates;null!==t&&(this._optimisticUpdates=null,t.forEach((function(t){return e._publishQueue.revertUpdate(t)})),this._publishQueue.run()),this._incrementalResults.clear(),this._completeOperationTracker(),this._retainDisposable&&(this._retainDisposable.dispose(),this._retainDisposable=null)}},t._updateActiveState=function(){var e;switch(this._state){case"started":case"loading_incremental":e="active";break;case"completed":e="inactive";break;case"loading_final":e=this._pendingModulePayloadsCount>0?"active":"inactive";break;default:this._state,h(!1)}this._operationExecutions.set(this._operation.request.identifier,e)},t._schedule=function(e){var t=this,n=this._scheduler;if(null!=n){var r=this._nextSubscriptionId++;c.create((function(t){var r=n.schedule((function(){try{e(),t.complete()}catch(e){t.error(e)}}));return function(){return n.cancel(r)}})).subscribe({complete:function(){return t._complete(r)},error:function(e){return t._error(e)},start:function(e){return t._start(r,e)}})}else e()},t._complete=function(e){this._subscriptions.delete(e),0===this._subscriptions.size&&(this.cancel(),this._sink.complete())},t._error=function(e){this.cancel(),this._sink.error(e)},t._start=function(e,t){this._subscriptions.set(e,t),this._updateActiveState()},t._next=function(e,t){var n=this;this._schedule((function(){n._handleNext(t),n._maybeCompleteSubscriptionOperationTracking()}))},t._handleErrorResponse=function(e){var t=this,n=[];return e.forEach((function(e){if(null!==e.data||null==e.extensions||e.hasOwnProperty("errors")){if(null==e.data){var r=e.hasOwnProperty("errors")&&null!=e.errors?e.errors:null,a=r?r.map((function(e){return e.message})).join("\n"):"(No errors)",i=l.create("RelayNetwork","No data returned for operation `"+t._operation.request.node.params.name+"`, got error(s):\n"+a+"\n\nSee the error `source` property for more information.");throw i.source={errors:r,operation:t._operation.request.node,variables:t._operation.request.variables},i.stack,i}var o=e;n.push(o)}})),n},t._handleOptimisticResponses=function(e){var t;if(e.length>1)return e.some((function(e){var t;return!0===(null===(t=e.extensions)||void 0===t?void 0:t.isOptimistic)}))&&h(!1),!1;var n=e[0],r=!0===(null===(t=n.extensions)||void 0===t?void 0:t.isOptimistic);return r&&"started"!==this._state&&h(!1),!!r&&(this._processOptimisticResponse(n,null,this._treatMissingFieldsAsNull),this._sink.next(n),!0)},t._handleNext=function(e){if("completed"!==this._state){var t=Array.isArray(e)?e:[e],n=this._handleErrorResponse(t);if(0===n.length)return t.some((function(e){var t;return!0===(null===(t=e.extensions)||void 0===t?void 0:t.is_final)}))&&(this._state="loading_final",this._updateActiveState(),this._incrementalPayloadsPending=!1),void this._sink.next(e);if(!this._handleOptimisticResponses(n)){var r=function(e){var t=[],n=[];return e.forEach((function(e){if(null!=e.path||null!=e.label){var r=e.label,a=e.path;null!=r&&null!=a||h(!1),n.push({label:r,path:a,response:e})}else t.push(e)})),[t,n]}(n),a=r[0],i=r[1],o=a.length>0;if(o){var l=this._processResponses(a);if(!s.ENABLE_BATCHED_STORE_UPDATES){var u=this._publishQueue.run(this._operation);this._updateOperationTracker(u)}this._processPayloadFollowups(l),s.ENABLE_BATCHED_STORE_UPDATES||this._incrementalPayloadsPending&&!this._retainDisposable&&(this._retainDisposable=this._store.retain(this._operation))}if(i.length>0){var c=this._processIncrementalResponses(i);if(!s.ENABLE_BATCHED_STORE_UPDATES){var f=this._publishQueue.run();this._updateOperationTracker(f)}this._processPayloadFollowups(c)}if(this._isSubscriptionOperation&&s.ENABLE_UNIQUE_SUBSCRIPTION_ROOT&&(null==n[0].extensions?n[0].extensions={__relay_subscription_root_id:this._operation.fragment.dataID}:n[0].extensions.__relay_subscription_root_id=this._operation.fragment.dataID),s.ENABLE_BATCHED_STORE_UPDATES){var d=this._publishQueue.run(o?this._operation:void 0);o&&this._incrementalPayloadsPending&&!this._retainDisposable&&(this._retainDisposable=this._store.retain(this._operation)),this._updateOperationTracker(d)}this._sink.next(e)}}},t._processOptimisticResponse=function(e,t,n){var r=this;if(null!==this._optimisticUpdates&&h(!1),null!=e||null!=t){var a=[];if(e){var i=C(e,this._operation.root,k,{getDataID:this._getDataID,path:[],reactFlightPayloadDeserializer:this._reactFlightPayloadDeserializer,reactFlightServerErrorHandler:this._reactFlightServerErrorHandler,shouldProcessClientComponents:this._shouldProcessClientComponents,treatMissingFieldsAsNull:n});P(i),a.push({operation:this._operation,payload:i,updater:t}),this._processOptimisticFollowups(i,a)}else t&&a.push({operation:this._operation,payload:{errors:null,fieldPayloads:null,incrementalPlaceholders:null,moduleImportPayloads:null,source:f.create(),isFinal:!1},updater:t});this._optimisticUpdates=a,a.forEach((function(e){return r._publishQueue.applyUpdate(e)})),this._publishQueue.run()}},t._processOptimisticFollowups=function(e,t){if(e.moduleImportPayloads&&e.moduleImportPayloads.length){var n=e.moduleImportPayloads,r=this._operationLoader;r||h(!1);var a,l=(0,i.default)(n);try{for(l.s();!(a=l.n()).done;){var s=a.value,u=r.get(s.operationReference);if(null==u)this._processAsyncOptimisticModuleImport(r,s);else{var c=this._processOptimisticModuleImport(u,s);t.push.apply(t,(0,o.default)(c))}}}catch(e){l.e(e)}finally{l.f()}}},t._normalizeModuleImport=function(e,t){var n=b(t,e.dataID,e.variables);return C({data:e.data},n,e.typeName,{getDataID:this._getDataID,path:e.path,reactFlightPayloadDeserializer:this._reactFlightPayloadDeserializer,reactFlightServerErrorHandler:this._reactFlightServerErrorHandler,treatMissingFieldsAsNull:this._treatMissingFieldsAsNull,shouldProcessClientComponents:this._shouldProcessClientComponents})},t._processOptimisticModuleImport=function(e,t){var n=p(e),r=[],a=this._normalizeModuleImport(t,n);return P(a),r.push({operation:this._operation,payload:a,updater:null}),this._processOptimisticFollowups(a,r),r},t._processAsyncOptimisticModuleImport=function(e,t){var n=this;e.load(t.operationReference).then((function(e){if(null!=e&&"started"===n._state){var r,a=n._processOptimisticModuleImport(e,t);a.forEach((function(e){return n._publishQueue.applyUpdate(e)})),null==n._optimisticUpdates||((r=n._optimisticUpdates).push.apply(r,(0,o.default)(a)),n._publishQueue.run())}}))},t._processResponses=function(e){var t=this;return null!==this._optimisticUpdates&&(this._optimisticUpdates.forEach((function(e){return t._publishQueue.revertUpdate(e)})),this._optimisticUpdates=null),this._incrementalPayloadsPending=!1,this._incrementalResults.clear(),this._source.clear(),e.map((function(e){var n=C(e,t._operation.root,k,{getDataID:t._getDataID,path:[],reactFlightPayloadDeserializer:t._reactFlightPayloadDeserializer,reactFlightServerErrorHandler:t._reactFlightServerErrorHandler,treatMissingFieldsAsNull:t._treatMissingFieldsAsNull,shouldProcessClientComponents:t._shouldProcessClientComponents});return t._publishQueue.commitPayload(t._operation,n,t._updater),n}))},t._processPayloadFollowups=function(e){var t=this;"completed"!==this._state&&e.forEach((function(e){var n=e.incrementalPlaceholders,r=e.moduleImportPayloads,a=e.isFinal;if(t._state=a?"loading_final":"loading_incremental",t._updateActiveState(),a&&(t._incrementalPayloadsPending=!1),r&&0!==r.length){var i=t._operationLoader;i||h(!1),r.forEach((function(e){t._processModuleImportPayload(e,i)}))}if(n&&0!==n.length&&(t._incrementalPayloadsPending="loading_final"!==t._state,n.forEach((function(n){t._processIncrementalPlaceholder(e,n)})),t._isClientPayload||"loading_final"===t._state)){var o=[];if(n.forEach((function(e){"defer"===e.kind&&o.push(t._processDeferResponse(e.label,e.path,e,{data:e.data}))})),o.length>0){if(!s.ENABLE_BATCHED_STORE_UPDATES){var l=t._publishQueue.run();t._updateOperationTracker(l)}t._processPayloadFollowups(o)}}}))},t._maybeCompleteSubscriptionOperationTracking=function(){if(this._isSubscriptionOperation&&(0===this._pendingModulePayloadsCount&&!1===this._incrementalPayloadsPending&&this._completeOperationTracker(),s.ENABLE_UNIQUE_SUBSCRIPTION_ROOT)){var e=_();this._operation={request:this._operation.request,fragment:E(this._operation.fragment.node,e,this._operation.fragment.variables,this._operation.fragment.owner),root:b(this._operation.root.node,e,this._operation.root.variables)}}},t._processModuleImportPayload=function(e,t){var n=this,r=t.get(e.operationReference);if(null!=r){var a=p(r);this._handleModuleImportPayload(e,a),this._maybeCompleteSubscriptionOperationTracking()}else{var i=this._nextSubscriptionId++;this._pendingModulePayloadsCount++;var o=function(){n._pendingModulePayloadsCount--,n._maybeCompleteSubscriptionOperationTracking()};c.from(new Promise((function(n,r){t.load(e.operationReference).then(n,r)}))).map((function(t){null!=t&&n._schedule((function(){n._handleModuleImportPayload(e,p(t));var r=n._publishQueue.run();n._updateOperationTracker(r)}))})).subscribe({complete:function(){n._complete(i),o()},error:function(e){n._error(e),o()},start:function(e){return n._start(i,e)}})}},t._handleModuleImportPayload=function(e,t){var n=this._normalizeModuleImport(e,t);if(this._publishQueue.commitPayload(this._operation,n),!s.ENABLE_BATCHED_STORE_UPDATES){var r=this._publishQueue.run();this._updateOperationTracker(r)}this._processPayloadFollowups([n])},t._processIncrementalPlaceholder=function(e,t){var n,r=t.label,a=t.path.map(String).join("."),i=this._incrementalResults.get(r);null==i&&(i=new Map,this._incrementalResults.set(r,i));var o,l=i.get(a),c=null!=l&&"response"===l.kind?l.responses:null;i.set(a,{kind:"placeholder",placeholder:t}),"stream"===t.kind?o=t.parentID:"defer"===t.kind?o=t.selector.dataID:h(!1);var f,d,p=e.source.get(o),m=(null!==(n=e.fieldPayloads)&&void 0!==n?n:[]).filter((function(e){var t=g(e.dataID,e.fieldKey);return e.dataID===o||t===o}));null==p&&h(!1);var _=this._source.get(o);if(null!=_){f=u.update(_.record,p);var y=new Map,b=function(e){var t,n,r=(t=e,null!==(n=JSON.stringify(v(t)))&&void 0!==n?n:"");y.set(r,e)};_.fieldPayloads.forEach(b),m.forEach(b),d=Array.from(y.values())}else f=p,d=m;if(this._source.set(o,{record:f,fieldPayloads:d}),null!=c){var E=this._processIncrementalResponses(c);if(!s.ENABLE_BATCHED_STORE_UPDATES){var S=this._publishQueue.run();this._updateOperationTracker(S)}this._processPayloadFollowups(E)}},t._processIncrementalResponses=function(e){var t=this,n=[];return e.forEach((function(e){var r=e.label,a=e.path,i=e.response,o=t._incrementalResults.get(r);if(null==o&&(o=new Map,t._incrementalResults.set(r,o)),-1!==r.indexOf("$defer$")){var l=a.map(String).join("."),s=o.get(l);if(null==s)return s={kind:"response",responses:[e]},void o.set(l,s);if("response"===s.kind)return void s.responses.push(e);var u=s.placeholder;"defer"!==u.kind&&h(!1),n.push(t._processDeferResponse(r,a,u,i))}else{var c=a.slice(0,-2).map(String).join("."),f=o.get(c);if(null==f)return f={kind:"response",responses:[e]},void o.set(c,f);if("response"===f.kind)return void f.responses.push(e);var d=f.placeholder;"stream"!==d.kind&&h(!1),n.push(t._processStreamResponse(r,a,d,i))}})),n},t._processDeferResponse=function(e,t,n,r){var a=n.selector.dataID,i=C(r,n.selector,n.typeName,{getDataID:this._getDataID,path:n.path,reactFlightPayloadDeserializer:this._reactFlightPayloadDeserializer,reactFlightServerErrorHandler:this._reactFlightServerErrorHandler,treatMissingFieldsAsNull:this._treatMissingFieldsAsNull,shouldProcessClientComponents:this._shouldProcessClientComponents});this._publishQueue.commitPayload(this._operation,i);var o=this._source.get(a);null==o&&h(!1);var l=o.fieldPayloads;if(0!==l.length){var s,u={errors:null,fieldPayloads:l,incrementalPlaceholders:null,moduleImportPayloads:null,source:f.create(),isFinal:!0===(null===(s=r.extensions)||void 0===s?void 0:s.is_final)};this._publishQueue.commitPayload(this._operation,u)}return i},t._processStreamResponse=function(e,t,n,r){var a=n.parentID,i=n.node,l=n.variables,s=i.selections[0];(null==s||"LinkedField"!==s.kind||!0!==s.plural)&&h(!1);var u=this._normalizeStreamItem(r,a,s,l,t,n.path),c=u.fieldPayloads,d=u.itemID,p=u.itemIndex,v=u.prevIDs,m=u.relayPayload,g=u.storageKey;if(this._publishQueue.commitPayload(this._operation,m,(function(e){var t=e.get(a);if(null!=t){var n=t.getLinkedRecords(g);if(null!=n&&n.length===v.length&&!n.some((function(e,t){return v[t]!==(e&&e.getDataID())}))){var r=(0,o.default)(n);r[p]=e.get(d),t.setLinkedRecords(r,g)}}})),0!==c.length){var _={errors:null,fieldPayloads:c,incrementalPlaceholders:null,moduleImportPayloads:null,source:f.create(),isFinal:!1};this._publishQueue.commitPayload(this._operation,_)}return m},t._normalizeStreamItem=function(e,t,n,r,a,i){var l,s,c,f=e.data;"object"!=typeof f&&h(!1);var d=null!==(l=n.alias)&&void 0!==l?l:n.name,p=w(n,r),v=this._source.get(t);null==v&&h(!1);var m=v.record,_=v.fieldPayloads,y=u.getLinkedRecordIDs(m,p);null==y&&h(!1);var E=a[a.length-1],S=parseInt(E,10);S===E&&S>=0||h(!1);var k=null!==(s=n.concreteType)&&void 0!==s?s:f[R];"string"!=typeof k&&h(!1);var I=(null!==(c=this._getDataID(f,k))&&void 0!==c?c:y&&y[S])||g(t,p,S);"string"!=typeof I&&h(!1);var P=b(n,I,r),D=u.clone(m),x=(0,o.default)(y);return x[S]=I,u.setLinkedRecordIDs(D,p,x),this._source.set(t,{record:D,fieldPayloads:_}),{fieldPayloads:_,itemID:I,itemIndex:S,prevIDs:y,relayPayload:C(e,P,k,{getDataID:this._getDataID,path:[].concat((0,o.default)(i),[d,String(S)]),reactFlightPayloadDeserializer:this._reactFlightPayloadDeserializer,reactFlightServerErrorHandler:this._reactFlightServerErrorHandler,treatMissingFieldsAsNull:this._treatMissingFieldsAsNull,shouldProcessClientComponents:this._shouldProcessClientComponents}),storageKey:p}},t._updateOperationTracker=function(e){null!=e&&e.length>0&&this._operationTracker.update(this._operation.request,new Set(e))},t._completeOperationTracker=function(){this._operationTracker.complete(this._operation.request)},e}();function C(e,t,n,r){var i,o=e.data,l=e.errors,s=f.create(),c=u.create(t.dataID,n);s.set(t.dataID,c);var p=d.normalize(s,t,o,r);return(0,a.default)((0,a.default)({},p),{},{errors:l,isFinal:!0===(null===(i=e.extensions)||void 0===i?void 0:i.is_final)})}function P(e){var t=e.incrementalPlaceholders;null!=t&&0!==t.length&&h(!1)}e.exports={execute:function(e){return new I(e)}}},8298:(e,t,n)=>{"use strict";var r=n(5847)(n(9471)),a=n(1143);e.exports={getFragmentVariables:function(e,t,n){var i;return e.argumentDefinitions.forEach((function(e){if(!n.hasOwnProperty(e.name))switch(i=i||(0,r.default)({},n),e.kind){case"LocalArgument":i[e.name]=e.defaultValue;break;case"RootArgument":if(!t.hasOwnProperty(e.name)){i[e.name]=void 0;break}i[e.name]=t[e.name];break;default:a(!1)}})),i||n},getOperationVariables:function(e,t){var n={};return e.argumentDefinitions.forEach((function(e){var r=e.defaultValue;null!=t[e.name]&&(r=t[e.name]),n[e.name]=r})),n}}},4176:(e,t,n)=>{"use strict";var r=n(5847)(n(9471)),a=n(3898),i=n(2158),o=n(1230),l=n(5060),s=n(1152),u=n(3981),c=n(8724),f=n(1517),d=n(4062),p=n(7579),h=(n(1143),function(){function e(e){var t,r,a,l,c,p,h,m,g=this;this.configName=e.configName,this._treatMissingFieldsAsNull=!0===e.treatMissingFieldsAsNull;var _=e.operationLoader,y=e.reactFlightPayloadDeserializer,b=e.reactFlightServerErrorHandler;this.__log=null!==(t=e.log)&&void 0!==t?t:v,this.requiredFieldLogger=null!==(r=e.requiredFieldLogger)&&void 0!==r?r:d,this._defaultRenderPolicy=(null!==(a=e.UNSTABLE_defaultRenderPolicy)&&void 0!==a?a:!0===o.ENABLE_PARTIAL_RENDERING_DEFAULT)?"partial":"full",this._operationLoader=_,this._operationExecutions=new Map,this._network=this.__wrapNetworkWithLogObserver(e.network),this._getDataID=null!==(l=e.getDataID)&&void 0!==l?l:f,this._publishQueue=new u(e.store,null!==(c=e.handlerProvider)&&void 0!==c?c:i,this._getDataID),this._scheduler=null!==(p=e.scheduler)&&void 0!==p?p:null,this._store=e.store,this.options=e.options,this._isServer=null!==(h=e.isServer)&&void 0!==h&&h,this.__setNet=function(e){return g._network=g.__wrapNetworkWithLogObserver(e)};var E=void 0!==n.g?n.g:"undefined"!=typeof window?window:void 0,S=E&&E.__RELAY_DEVTOOLS_HOOK__;S&&S.registerEnvironment(this),this._missingFieldHandlers=e.missingFieldHandlers,this._operationTracker=null!==(m=e.operationTracker)&&void 0!==m?m:new s,this._reactFlightPayloadDeserializer=y,this._reactFlightServerErrorHandler=b,this._shouldProcessClientComponents=e.shouldProcessClientComponents}var t=e.prototype;return t.getStore=function(){return this._store},t.getNetwork=function(){return this._network},t.getOperationTracker=function(){return this._operationTracker},t.isRequestActive=function(e){return"active"===this._operationExecutions.get(e)},t.UNSTABLE_getDefaultRenderPolicy=function(){return this._defaultRenderPolicy},t.applyUpdate=function(e){var t=this;return this._scheduleUpdates((function(){t._publishQueue.applyUpdate(e),t._publishQueue.run()})),{dispose:function(){t._scheduleUpdates((function(){t._publishQueue.revertUpdate(e),t._publishQueue.run()}))}}},t.revertUpdate=function(e){var t=this;this._scheduleUpdates((function(){t._publishQueue.revertUpdate(e),t._publishQueue.run()}))},t.replaceUpdate=function(e,t){var n=this;this._scheduleUpdates((function(){n._publishQueue.revertUpdate(e),n._publishQueue.applyUpdate(t),n._publishQueue.run()}))},t.applyMutation=function(e){var t=this._execute({createSource:function(){return l.create((function(e){}))},isClientPayload:!1,operation:e.operation,optimisticConfig:e,updater:null}).subscribe({});return{dispose:function(){return t.unsubscribe()}}},t.check=function(e){return null==this._missingFieldHandlers||0===this._missingFieldHandlers.length?this._store.check(e):this._checkSelectorAndHandleMissingFields(e,this._missingFieldHandlers)},t.commitPayload=function(e,t){this._execute({createSource:function(){return l.from({data:t})},isClientPayload:!0,operation:e,optimisticConfig:null,updater:null}).subscribe({})},t.commitUpdate=function(e){var t=this;this._scheduleUpdates((function(){t._publishQueue.commitUpdate(e),t._publishQueue.run()}))},t.lookup=function(e){return this._store.lookup(e)},t.subscribe=function(e,t){return this._store.subscribe(e,t)},t.retain=function(e){return this._store.retain(e)},t.isServer=function(){return this._isServer},t._checkSelectorAndHandleMissingFields=function(e,t){var n=this,r=c.create(),a=this._store.check(e,{target:r,handlers:t});return r.size()>0&&this._scheduleUpdates((function(){n._publishQueue.commitSource(r),n._publishQueue.run()})),a},t._scheduleUpdates=function(e){var t=this._scheduler;null!=t?t.schedule(e):e()},t.execute=function(e){var t=this,n=e.operation,r=e.updater;return this._execute({createSource:function(){return t._network.execute(n.request.node.params,n.request.variables,n.request.cacheConfig||{},null)},isClientPayload:!1,operation:n,optimisticConfig:null,updater:r})},t.executeMutation=function(e){var t,n=this,a=e.operation,i=e.optimisticResponse,o=e.optimisticUpdater,l=e.updater,s=e.uploadables;return(i||o)&&(t={operation:a,response:i,updater:o}),this._execute({createSource:function(){return n._network.execute(a.request.node.params,a.request.variables,(0,r.default)((0,r.default)({},a.request.cacheConfig),{},{force:!0}),s)},isClientPayload:!1,operation:a,optimisticConfig:t,updater:l})},t.executeWithSource=function(e){var t=e.operation,n=e.source;return this._execute({createSource:function(){return n},isClientPayload:!1,operation:t,optimisticConfig:null,updater:null})},t.toJSON=function(){var e;return"RelayModernEnvironment(".concat(null!==(e=this.configName)&&void 0!==e?e:"",")")},t._execute=function(e){var t=this,n=e.createSource,r=e.isClientPayload,i=e.operation,o=e.optimisticConfig,s=e.updater;return l.create((function(e){var l=a.execute({getDataID:t._getDataID,isClientPayload:r,operation:i,operationExecutions:t._operationExecutions,operationLoader:t._operationLoader,operationTracker:t._operationTracker,optimisticConfig:o,publishQueue:t._publishQueue,reactFlightPayloadDeserializer:t._reactFlightPayloadDeserializer,reactFlightServerErrorHandler:t._reactFlightServerErrorHandler,scheduler:t._scheduler,shouldProcessClientComponents:t._shouldProcessClientComponents,sink:e,source:n(),store:t._store,treatMissingFieldsAsNull:t._treatMissingFieldsAsNull,updater:s});return function(){return l.cancel()}}))},t.__wrapNetworkWithLogObserver=function(e){var t=this;return{execute:function(n,r,a,i){var o=p(),l=t.__log,s={start:function(e){l({name:"network.start",transactionID:o,params:n,variables:r,cacheConfig:a})},next:function(e){l({name:"network.next",transactionID:o,response:e})},error:function(e){l({name:"network.error",transactionID:o,error:e})},complete:function(){l({name:"network.complete",transactionID:o})},unsubscribe:function(){l({name:"network.unsubscribe",transactionID:o})}};return e.execute(n,r,a,i,(function(e){l({name:"network.info",transactionID:o,info:e})})).do(s)}}},e}());function v(){}h.prototype["@@RelayModernEnvironment"]=!0,e.exports=h},8474:(e,t,n)=>{"use strict";var r=n(5847),a=r(n(9471)),i=r(n(8557)),o=n(1230),l=n(1305),s=n(1143),u=n(7669),c=n(8154),f=(n(3620),n(7106).getPromiseForActiveRequest),d=n(1071).createRequestDescriptor,p=n(1447),h=p.areEqualSelectors,v=p.createReaderSelector,m=p.getSelectorsFromObject,g=function(){function e(e,t,n,r,a){var o=this;(0,i.default)(this,"_onChange",(function(){o._stale=!0,"function"==typeof o._callback&&o._callback()})),this._callback=r,this._context=e,this._data={},this._fragments=t,this._props={},this._resolvers={},this._stale=!1,this._rootIsQueryRenderer=a,this.setProps(n)}var t=e.prototype;return t.dispose=function(){for(var e in this._resolvers)this._resolvers.hasOwnProperty(e)&&b(this._resolvers[e])},t.resolve=function(){if(this._stale){var e,t=this._data;for(var n in this._resolvers)if(this._resolvers.hasOwnProperty(n)){var r=this._resolvers[n],i=t[n];if(r){var o=r.resolve();(e||o!==i)&&((e=e||(0,a.default)({},t))[n]=o)}else{var l=this._props[n],s=void 0!==l?l:null;!e&&u(s,i)||((e=e||(0,a.default)({},t))[n]=s)}}this._data=e||t,this._stale=!1}return this._data},t.setCallback=function(e){this._callback=e},t.setProps=function(e){var t=m(this._fragments,e);for(var n in this._props={},t)if(t.hasOwnProperty(n)){var r=t[n],a=this._resolvers[n];null==r?(null!=a&&a.dispose(),a=null):"PluralReaderSelector"===r.kind?null==a?a=new y(this._context.environment,this._rootIsQueryRenderer,r,this._onChange):(a instanceof y||s(!1),a.setSelector(r)):null==a?a=new _(this._context.environment,this._rootIsQueryRenderer,r,this._onChange):(a instanceof _||s(!1),a.setSelector(r)),this._props[n]=e[n],this._resolvers[n]=a}this._stale=!0},t.setVariables=function(e,t){for(var n in this._resolvers)if(this._resolvers.hasOwnProperty(n)){var r=this._resolvers[n];r&&r.setVariables(e,t)}this._stale=!0},e}(),_=function(){function e(e,t,n,r){var a=this;(0,i.default)(this,"_onChange",(function(e){a._data=e.data,a._isMissingData=e.isMissingData,a._missingRequiredFields=e.missingRequiredFields,a._callback()}));var o=e.lookup(n);this._callback=r,this._data=o.data,this._isMissingData=o.isMissingData,this._missingRequiredFields=o.missingRequiredFields,this._environment=e,this._rootIsQueryRenderer=t,this._selector=n,this._subscription=e.subscribe(o,this._onChange)}var t=e.prototype;return t.dispose=function(){this._subscription&&(this._subscription.dispose(),this._subscription=null)},t.resolve=function(){if(!0===o.ENABLE_RELAY_CONTAINERS_SUSPENSE&&!0===this._isMissingData){var e,t=null!==(e=f(this._environment,this._selector.owner))&&void 0!==e?e:this._environment.getOperationTracker().getPromiseForPendingOperationsAffectingOwner(this._selector.owner);if(null!=t&&!this._rootIsQueryRenderer)throw t}return null!=this._missingRequiredFields&&c(this._environment,this._missingRequiredFields),this._data},t.setSelector=function(e){if(null==this._subscription||!h(e,this._selector)){this.dispose();var t=this._environment.lookup(e);this._data=t.data,this._isMissingData=t.isMissingData,this._missingRequiredFields=t.missingRequiredFields,this._selector=e,this._subscription=this._environment.subscribe(t,this._onChange)}},t.setVariables=function(e,t){if(!l(e,this._selector.variables)){var n=d(t,e),r=v(this._selector.node,this._selector.dataID,e,n);this.setSelector(r)}},e}(),y=function(){function e(e,t,n,r){var a=this;(0,i.default)(this,"_onChange",(function(e){a._stale=!0,a._callback()})),this._callback=r,this._data=[],this._environment=e,this._resolvers=[],this._stale=!0,this._rootIsQueryRenderer=t,this.setSelector(n)}var t=e.prototype;return t.dispose=function(){this._resolvers.forEach(b)},t.resolve=function(){if(this._stale){for(var e,t=this._data,n=0;n<this._resolvers.length;n++){var r=t[n],a=this._resolvers[n].resolve();(e||a!==r)&&(e=e||t.slice(0,n)).push(a)}e||this._resolvers.length===t.length||(e=t.slice(0,this._resolvers.length)),this._data=e||t,this._stale=!1}return this._data},t.setSelector=function(e){for(var t=e.selectors;this._resolvers.length>t.length;)this._resolvers.pop().dispose();for(var n=0;n<t.length;n++)n<this._resolvers.length?this._resolvers[n].setSelector(t[n]):this._resolvers[n]=new _(this._environment,this._rootIsQueryRenderer,t[n],this._onChange);this._stale=!0},t.setVariables=function(e,t){this._resolvers.forEach((function(n){return n.setVariables(e,t)})),this._stale=!0},e}();function b(e){e&&e.dispose()}e.exports=g},1071:(e,t,n)=>{"use strict";n(2232);var r=n(676),a=n(8298).getOperationVariables,i=n(1447),o=i.createNormalizationSelector,l=i.createReaderSelector,s=n(1380).ROOT_ID;function u(e,t,n){return{identifier:r(e.params,t),node:e,variables:t,cacheConfig:n}}e.exports={createOperationDescriptor:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:s,i=e.operation,c=a(i,t),f=u(e,c,n),d={fragment:l(e.fragment,r,c,f),request:f,root:o(i,r,c)};return d},createRequestDescriptor:u}},8250:(e,t,n)=>{"use strict";var r=n(5847)(n(9471)),a=n(1305),i=n(2232),o=n(1143),l=(n(3620),n(6063).isClientID,n(1380)),s=l.ID_KEY,u=l.REF_KEY,c=l.REFS_KEY,f=l.TYPENAME_KEY,d=l.INVALIDATED_AT_KEY;l.ROOT_ID,e.exports={clone:function(e){return(0,r.default)({},e)},copyFields:function(e,t){for(var n in e)e.hasOwnProperty(n)&&n!==s&&n!==f&&(t[n]=e[n])},create:function(e,t){var n={};return n[s]=e,n[f]=t,n},freeze:function(e){i(e)},getDataID:function(e){return e[s]},getInvalidationEpoch:function(e){if(null==e)return null;var t=e[d];return"number"!=typeof t?null:t},getLinkedRecordID:function(e,t){var n=e[t];return null==n?n:("object"==typeof n&&n&&"string"==typeof n[u]||o(!1),n[u])},getLinkedRecordIDs:function(e,t){var n=e[t];return null==n?n:("object"==typeof n&&Array.isArray(n[c])||o(!1),n[c])},getType:function(e){return e[f]},getValue:function(e,t){var n=e[t];return n&&"object"==typeof n&&(n.hasOwnProperty(u)||n.hasOwnProperty(c))&&o(!1),n},merge:function(e,t){return Object.assign({},e,t)},setValue:function(e,t,n){e[t]=n},setLinkedRecordID:function(e,t,n){var r={};r[u]=n,e[t]=r},setLinkedRecordIDs:function(e,t,n){var r={};r[c]=n,e[t]=r},update:function(e,t){for(var n=null,i=Object.keys(t),o=0;o<i.length;o++){var l=i[o];!n&&a(e[l],t[l])||((n=null!==n?n:(0,r.default)({},e))[l]=t[l])}return null!==n?n:e}}},1447:(e,t,n)=>{"use strict";var r=n(1305),a=n(1143),i=(n(3620),n(8298).getFragmentVariables),o=n(1380),l=o.FRAGMENT_OWNER_KEY,s=o.FRAGMENTS_KEY,u=o.ID_KEY,c=o.IS_WITHIN_UNMATCHED_TYPE_REFINEMENT;function f(e,t){("object"!=typeof t||null===t||Array.isArray(t))&&a(!1);var n=t[u],r=t[s],o=t[l],f=!0===t[c];if("string"==typeof n&&"object"==typeof r&&null!==r&&"object"==typeof r[e.name]&&null!==r[e.name]&&"object"==typeof o&&null!==o){var d=o,p=r[e.name];return y(e,n,i(e,d.variables,p),d,f)}return null}function d(e,t){var n=null;return t.forEach((function(t,r){var a=null!=t?f(e,t):null;null!=a&&(n=n||[]).push(a)})),null==n?null:{kind:"PluralReaderSelector",selectors:n}}function p(e,t){return null==t?t:e.metadata&&!0===e.metadata.plural?(Array.isArray(t)||a(!1),d(e,t)):(Array.isArray(t)&&a(!1),f(e,t))}function h(e,t){return null==t?t:e.metadata&&!0===e.metadata.plural?(Array.isArray(t)||a(!1),n=null,t.forEach((function(e){var t=null!=e?v(0,e):null;null!=t&&(n=n||[]).push(t)})),n):(Array.isArray(t)&&a(!1),v(0,t));var n}function v(e,t){("object"!=typeof t||null===t||Array.isArray(t))&&a(!1);var n=t[u];return"string"==typeof n?n:null}function m(e,t){var n;return null==t?{}:!0===(null===(n=e.metadata)||void 0===n?void 0:n.plural)?(Array.isArray(t)||a(!1),_(e,t)):(Array.isArray(t)&&a(!1),g(e,t)||{})}function g(e,t){var n=f(e,t);return n?n.variables:null}function _(e,t){var n={};return t.forEach((function(t,r){if(null!=t){var a=g(e,t);null!=a&&Object.assign(n,a)}})),n}function y(e,t,n,r){var a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];return{kind:"SingularReaderSelector",dataID:t,isWithinUnmatchedTypeRefinement:a,node:e,variables:n,owner:r}}e.exports={areEqualSelectors:function(e,t){return e.owner===t.owner&&e.dataID===t.dataID&&e.node===t.node&&r(e.variables,t.variables)},createReaderSelector:y,createNormalizationSelector:function(e,t,n){return{dataID:t,node:e,variables:n}},getDataIDsFromFragment:h,getDataIDsFromObject:function(e,t){var n={};for(var r in e)if(e.hasOwnProperty(r)){var a=e[r],i=t[r];n[r]=h(a,i)}return n},getSingularSelector:f,getPluralSelector:d,getSelector:p,getSelectorsFromObject:function(e,t){var n={};for(var r in e)if(e.hasOwnProperty(r)){var a=e[r],i=t[r];n[r]=p(a,i)}return n},getVariablesFromSingularFragment:g,getVariablesFromPluralFragment:_,getVariablesFromFragment:m,getVariablesFromObject:function(e,t){var n={};for(var r in e)if(e.hasOwnProperty(r)){var a=m(e[r],t[r]);Object.assign(n,a)}return n}}},1984:(e,t,n)=>{"use strict";var r=n(5847),a=r(n(1735)),i=r(n(8557)),o=n(1639),l=n(1230),s=n(8250),u=n(3754),c=n(4159),f=n(4023),d=n(4447),p=n(7706),h=n(4430),v=n(1380),m=(n(2232),n(1517)),g=n(1143),_=n(9468),y=n(1380),b=y.ROOT_ID,E=y.ROOT_TYPE,S=function(){function e(e,t){var n,r,a,o,u,c=this;(0,i.default)(this,"_gcStep",(function(){c._gcRun&&(c._gcRun.next().done?c._gcRun=null:c._gcScheduler(c._gcStep))})),this._currentWriteEpoch=0,this._gcHoldCounter=0,this._gcReleaseBufferSize=null!==(n=null==t?void 0:t.gcReleaseBufferSize)&&void 0!==n?n:10,this._gcRun=null,this._gcScheduler=null!==(r=null==t?void 0:t.gcScheduler)&&void 0!==r?r:_,this._getDataID=null!==(a=null==t?void 0:t.getDataID)&&void 0!==a?a:m,this._globalInvalidationEpoch=null,this._invalidationSubscriptions=new Set,this._invalidatedRecordIDs=new Set,this.__log=null!==(o=null==t?void 0:t.log)&&void 0!==o?o:null,this._queryCacheExpirationTime=null==t?void 0:t.queryCacheExpirationTime,this._operationLoader=null!==(u=null==t?void 0:t.operationLoader)&&void 0!==u?u:null,this._optimisticSource=null,this._recordSource=e,this._releaseBuffer=[],this._roots=new Map,this._shouldScheduleGC=!1,this._storeSubscriptions=!0===l.ENABLE_STORE_SUBSCRIPTIONS_REFACTOR?new h(null==t?void 0:t.log):new p(null==t?void 0:t.log),this._updatedRecordIDs=new Set,this._shouldProcessClientComponents=null==t?void 0:t.shouldProcessClientComponents,function(e){if(!e.has(b)){var t=s.create(b,E);e.set(b,t)}}(this._recordSource)}var t=e.prototype;return t.getSource=function(){var e;return null!==(e=this._optimisticSource)&&void 0!==e?e:this._recordSource},t.check=function(e,t){var n,r,a,i=e.root,l=null!==(n=this._optimisticSource)&&void 0!==n?n:this._recordSource,s=this._globalInvalidationEpoch,u=this._roots.get(e.request.identifier),c=null!=u?u.epoch:null;if(null!=s&&(null==c||c<=s))return{status:"stale"};var f=null!==(r=null==t?void 0:t.target)&&void 0!==r?r:l,d=null!==(a=null==t?void 0:t.handlers)&&void 0!==a?a:[];return function(e,t,n,r){var a=e.mostRecentlyInvalidatedAt,i=e.status;return"number"==typeof a&&(null==t||a>t)?{status:"stale"}:"missing"===i?{status:"missing"}:null!=n&&null!=r&&n<=Date.now()-r?{status:"stale"}:{status:"available",fetchTime:null!=n?n:null}}(o.check(l,f,i,d,this._operationLoader,this._getDataID,this._shouldProcessClientComponents),c,null==u?void 0:u.fetchTime,this._queryCacheExpirationTime)},t.retain=function(e){var t=this,n=e.request.identifier,r=!1,a=this._roots.get(n);return null!=a?(0===a.refCount&&(this._releaseBuffer=this._releaseBuffer.filter((function(e){return e!==n}))),a.refCount+=1):this._roots.set(n,{operation:e,refCount:1,epoch:null,fetchTime:null}),{dispose:function(){if(!r){r=!0;var e=t._roots.get(n);if(null!=e&&(e.refCount--,0===e.refCount)){var a=t._queryCacheExpirationTime;if(null!=e.fetchTime&&null!=a&&e.fetchTime<=Date.now()-a)t._roots.delete(n),t.scheduleGC();else if(t._releaseBuffer.push(n),t._releaseBuffer.length>t._gcReleaseBufferSize){var i=t._releaseBuffer.shift();t._roots.delete(i),t.scheduleGC()}}}}}},t.lookup=function(e){var t=this.getSource();return c.read(t,e)},t.notify=function(e,t){var n=this,r=this.__log;null!=r&&r({name:"store.notify.start",sourceOperation:e}),this._currentWriteEpoch++,!0===t&&(this._globalInvalidationEpoch=this._currentWriteEpoch);var a=this.getSource(),i=[];if(this._storeSubscriptions.updateSubscriptions(a,this._updatedRecordIDs,i,e),this._invalidationSubscriptions.forEach((function(e){n._updateInvalidationSubscription(e,!0===t)})),null!=r&&r({name:"store.notify.complete",sourceOperation:e,updatedRecordIDs:this._updatedRecordIDs,invalidatedRecordIDs:this._invalidatedRecordIDs}),this._updatedRecordIDs.clear(),this._invalidatedRecordIDs.clear(),null!=e){var o=e.request.identifier,l=this._roots.get(o);if(null!=l)l.epoch=this._currentWriteEpoch,l.fetchTime=Date.now();else if("query"===e.request.node.params.operationKind&&this._gcReleaseBufferSize>0&&this._releaseBuffer.length<this._gcReleaseBufferSize){var s={operation:e,refCount:0,epoch:this._currentWriteEpoch,fetchTime:Date.now()};this._releaseBuffer.push(o),this._roots.set(o,s)}}return i},t.publish=function(e,t){var n,r=null!==(n=this._optimisticSource)&&void 0!==n?n:this._recordSource;!function(e,t,n,r,a,i){r&&r.forEach((function(r){var a,o=e.get(r),l=t.get(r);null!==l&&(a=null!=o?s.clone(o):null!=l?s.clone(l):null)&&(s.setValue(a,v.INVALIDATED_AT_KEY,n),i.add(r),e.set(r,a))}));for(var o=t.getRecordIDs(),l=0;l<o.length;l++){var u=o[l],c=t.get(u),f=e.get(u);if(c&&f){var p=s.getType(f)===d.REACT_FLIGHT_TYPE_NAME?c:s.update(f,c);p!==f&&(a.add(u),e.set(u,p))}else null===c?(e.delete(u),null!==f&&a.add(u)):c&&(e.set(u,c),a.add(u))}}(r,e,this._currentWriteEpoch+1,t,this._updatedRecordIDs,this._invalidatedRecordIDs);var a=this.__log;null!=a&&a({name:"store.publish",source:e,optimistic:r===this._optimisticSource})},t.subscribe=function(e,t){return this._storeSubscriptions.subscribe(e,t)},t.holdGC=function(){var e=this;return this._gcRun&&(this._gcRun=null,this._shouldScheduleGC=!0),this._gcHoldCounter++,{dispose:function(){e._gcHoldCounter>0&&(e._gcHoldCounter--,0===e._gcHoldCounter&&e._shouldScheduleGC&&(e.scheduleGC(),e._shouldScheduleGC=!1))}}},t.toJSON=function(){return"RelayModernStore()"},t.__getUpdatedRecordIDs=function(){return this._updatedRecordIDs},t.lookupInvalidationState=function(e){var t=this,n=new Map;return e.forEach((function(e){var r,a=t.getSource().get(e);n.set(e,null!==(r=s.getInvalidationEpoch(a))&&void 0!==r?r:null)})),n.set("global",this._globalInvalidationEpoch),{dataIDs:e,invalidations:n}},t.checkInvalidationState=function(e){var t=this.lookupInvalidationState(e.dataIDs).invalidations,n=e.invalidations;if(t.get("global")!==n.get("global"))return!0;var r,i=(0,a.default)(e.dataIDs);try{for(i.s();!(r=i.n()).done;){var o=r.value;if(t.get(o)!==n.get(o))return!0}}catch(e){i.e(e)}finally{i.f()}return!1},t.subscribeToInvalidationState=function(e,t){var n=this,r={callback:t,invalidationState:e};return this._invalidationSubscriptions.add(r),{dispose:function(){n._invalidationSubscriptions.delete(r)}}},t._updateInvalidationSubscription=function(e,t){var n=this,r=e.callback,a=e.invalidationState.dataIDs;(t||a.some((function(e){return n._invalidatedRecordIDs.has(e)})))&&r()},t.snapshot=function(){null!=this._optimisticSource&&g(!1);var e=this.__log;null!=e&&e({name:"store.snapshot"}),this._storeSubscriptions.snapshotSubscriptions(this.getSource()),this._gcRun&&(this._gcRun=null,this._shouldScheduleGC=!0),this._optimisticSource=u.create(this.getSource())},t.restore=function(){null==this._optimisticSource&&g(!1);var e=this.__log;null!=e&&e({name:"store.restore"}),this._optimisticSource=null,this._shouldScheduleGC&&this.scheduleGC(),this._storeSubscriptions.restoreSubscriptions()},t.scheduleGC=function(){this._gcHoldCounter>0?this._shouldScheduleGC=!0:this._gcRun||(this._gcRun=this._collect(),this._gcScheduler(this._gcStep))},t.__gc=function(){if(null==this._optimisticSource)for(var e=this._collect();!e.next().done;);},t._collect=function*(){e:for(;;){var e,t=this._currentWriteEpoch,n=new Set,r=(0,a.default)(this._roots.values());try{for(r.s();!(e=r.n()).done;){var i=e.value.operation.root;if(f.mark(this._recordSource,i,n,this._operationLoader,this._shouldProcessClientComponents),yield,t!==this._currentWriteEpoch)continue e}}catch(e){r.e(e)}finally{r.f()}var o=this.__log;if(null!=o&&o({name:"store.gc",references:n}),0===n.size)this._recordSource.clear();else for(var l=this._recordSource.getRecordIDs(),s=0;s<l.length;s++){var u=l[s];n.has(u)||this._recordSource.remove(u)}return}},e}();e.exports=S},1152:(e,t,n)=>{"use strict";var r=n(5847)(n(1735)),a=n(1143),i=function(){function e(){this._ownersToPendingOperationsIdentifier=new Map,this._pendingOperationsToOwnersIdentifier=new Map,this._ownersIdentifierToPromise=new Map}var t=e.prototype;return t.update=function(e,t){if(0!==t.size){var n,a=e.identifier,i=new Set,o=(0,r.default)(t);try{for(o.s();!(n=o.n()).done;){var l=n.value.identifier,s=this._ownersToPendingOperationsIdentifier.get(l);null!=s?s.has(a)||(s.add(a),i.add(l)):(this._ownersToPendingOperationsIdentifier.set(l,new Set([a])),i.add(l))}}catch(e){o.e(e)}finally{o.f()}if(0!==i.size){var u,c=this._pendingOperationsToOwnersIdentifier.get(a)||new Set,f=(0,r.default)(i);try{for(f.s();!(u=f.n()).done;){var d=u.value;this._resolveOwnerResolvers(d),c.add(d)}}catch(e){f.e(e)}finally{f.f()}this._pendingOperationsToOwnersIdentifier.set(a,c)}}},t.complete=function(e){var t=e.identifier,n=this._pendingOperationsToOwnersIdentifier.get(t);if(null!=n){var a,i=new Set,o=new Set,l=(0,r.default)(n);try{for(l.s();!(a=l.n()).done;){var s=a.value,u=this._ownersToPendingOperationsIdentifier.get(s);u&&(u.delete(t),u.size>0?o.add(s):i.add(s))}}catch(e){l.e(e)}finally{l.f()}var c,f=(0,r.default)(i);try{for(f.s();!(c=f.n()).done;){var d=c.value;this._resolveOwnerResolvers(d),this._ownersToPendingOperationsIdentifier.delete(d)}}catch(e){f.e(e)}finally{f.f()}var p,h=(0,r.default)(o);try{for(h.s();!(p=h.n()).done;){var v=p.value;this._resolveOwnerResolvers(v)}}catch(e){h.e(e)}finally{h.f()}this._pendingOperationsToOwnersIdentifier.delete(t)}},t._resolveOwnerResolvers=function(e){var t=this._ownersIdentifierToPromise.get(e);null!=t&&t.resolve(),this._ownersIdentifierToPromise.delete(e)},t.getPromiseForPendingOperationsAffectingOwner=function(e){var t=e.identifier;if(!this._ownersToPendingOperationsIdentifier.has(t))return null;var n,r=this._ownersIdentifierToPromise.get(t);if(null!=r)return r.promise;var i=new Promise((function(e){n=e}));return null==n&&a(!1),this._ownersIdentifierToPromise.set(t,{promise:i,resolve:n}),i},e}();e.exports=i},3754:(e,t,n)=>{"use strict";var r=n(5847)(n(9471)),a=n(8724),i=Object.freeze({__UNPUBLISH_RECORD_SENTINEL:!0}),o=function(){function e(e){this._base=e,this._sink=a.create()}var t=e.prototype;return t.has=function(e){return this._sink.has(e)?this._sink.get(e)!==i:this._base.has(e)},t.get=function(e){if(this._sink.has(e)){var t=this._sink.get(e);return t===i?void 0:t}return this._base.get(e)},t.getStatus=function(e){var t=this.get(e);return void 0===t?"UNKNOWN":null===t?"NONEXISTENT":"EXISTENT"},t.clear=function(){this._base=a.create(),this._sink.clear()},t.delete=function(e){this._sink.delete(e)},t.remove=function(e){this._sink.set(e,i)},t.set=function(e,t){this._sink.set(e,t)},t.getRecordIDs=function(){return Object.keys(this.toJSON())},t.size=function(){return Object.keys(this.toJSON()).length},t.toJSON=function(){var e=this,t=(0,r.default)({},this._base.toJSON());return this._sink.getRecordIDs().forEach((function(n){var r=e.get(n);void 0===r?delete t[n]:t[n]=r})),t},e}();e.exports={create:function(e){return new o(e)}}},3981:(e,t,n)=>{"use strict";var r,a,i=n(4159),o=n(8724),l=n(1697),s=n(7703),u=n(4596),c=n(1143),f=(n(3620),null!==(r=null===(a=n.g.ErrorUtils)||void 0===a?void 0:a.applyWithGuard)&&void 0!==r?r:function(e,t,n,r,a){return e.apply(t,n)}),d=function(){function e(e,t,n){this._hasStoreSnapshot=!1,this._handlerProvider=t||null,this._pendingBackupRebase=!1,this._pendingData=new Set,this._pendingOptimisticUpdates=new Set,this._store=e,this._appliedOptimisticUpdates=new Set,this._gcHold=null,this._getDataID=n}var t=e.prototype;return t.applyUpdate=function(e){(this._appliedOptimisticUpdates.has(e)||this._pendingOptimisticUpdates.has(e))&&c(!1),this._pendingOptimisticUpdates.add(e)},t.revertUpdate=function(e){this._pendingOptimisticUpdates.has(e)?this._pendingOptimisticUpdates.delete(e):this._appliedOptimisticUpdates.has(e)&&(this._pendingBackupRebase=!0,this._appliedOptimisticUpdates.delete(e))},t.revertAll=function(){this._pendingBackupRebase=!0,this._pendingOptimisticUpdates.clear(),this._appliedOptimisticUpdates.clear()},t.commitPayload=function(e,t,n){this._pendingBackupRebase=!0,this._pendingData.add({kind:"payload",operation:e,payload:t,updater:n})},t.commitUpdate=function(e){this._pendingBackupRebase=!0,this._pendingData.add({kind:"updater",updater:e})},t.commitSource=function(e){this._pendingBackupRebase=!0,this._pendingData.add({kind:"source",source:e})},t.run=function(e){this._pendingBackupRebase&&this._hasStoreSnapshot&&(this._store.restore(),this._hasStoreSnapshot=!1);var t=this._commitData();return(this._pendingOptimisticUpdates.size||this._pendingBackupRebase&&this._appliedOptimisticUpdates.size)&&(this._hasStoreSnapshot||(this._store.snapshot(),this._hasStoreSnapshot=!0),this._applyUpdates()),this._pendingBackupRebase=!1,this._appliedOptimisticUpdates.size>0?this._gcHold||(this._gcHold=this._store.holdGC()):this._gcHold&&(this._gcHold.dispose(),this._gcHold=null),this._store.notify(e,t)},t._publishSourceFromPayload=function(e){var t=this,n=e.payload,r=e.operation,a=e.updater,i=n.source,o=n.fieldPayloads,f=new l(this._store.getSource(),i),d=new s(f,this._getDataID);if(o&&o.length&&o.forEach((function(e){var n=t._handlerProvider&&t._handlerProvider(e.handle);n||c(!1),n.update(d,e)})),a){var h=r.fragment;null==h&&c(!1),a(new u(f,d,h),p(i,h))}var v=d.getIDsMarkedForInvalidation();return this._store.publish(i,v),d.isStoreMarkedForInvalidation()},t._commitData=function(){var e=this;if(!this._pendingData.size)return!1;var t=!1;return this._pendingData.forEach((function(n){if("payload"===n.kind){var r=e._publishSourceFromPayload(n);t=t||r}else if("source"===n.kind){var a=n.source;e._store.publish(a)}else{var i=n.updater,u=o.create(),c=new l(e._store.getSource(),u),d=new s(c,e._getDataID);f(i,null,[d],null,"RelayPublishQueue:commitData"),t=t||d.isStoreMarkedForInvalidation();var p=d.getIDsMarkedForInvalidation();e._store.publish(u,p)}})),this._pendingData.clear(),t},t._applyUpdates=function(){var e=this,t=o.create(),n=new l(this._store.getSource(),t),r=new s(n,this._getDataID,this._handlerProvider),a=function(e){if(e.storeUpdater){var t=e.storeUpdater;f(t,null,[r],null,"RelayPublishQueue:applyUpdates")}else{var a,i=e.operation,o=e.payload,l=e.updater,s=o.source,c=o.fieldPayloads,d=new u(n,r,i.fragment);s&&(r.publishSource(s,c),a=p(s,i.fragment)),l&&f(l,null,[d,a],null,"RelayPublishQueue:applyUpdates")}};this._pendingBackupRebase&&this._appliedOptimisticUpdates.size&&this._appliedOptimisticUpdates.forEach(a),this._pendingOptimisticUpdates.size&&(this._pendingOptimisticUpdates.forEach((function(t){a(t),e._appliedOptimisticUpdates.add(t)})),this._pendingOptimisticUpdates.clear()),this._store.publish(t)},e}();function p(e,t){return i.read(e,t).data}e.exports=d},4159:(e,t,n)=>{"use strict";var r=n(5847)(n(8557)),a=n(1230),i=n(8250),o=n(1143),l=n(132),s=l.CLIENT_EXTENSION,u=l.CONDITION,c=l.DEFER,f=l.FLIGHT_FIELD,d=l.FRAGMENT_SPREAD,p=l.INLINE_DATA_FRAGMENT_SPREAD,h=l.INLINE_FRAGMENT,v=l.LINKED_FIELD,m=l.MODULE_IMPORT,g=l.REQUIRED_FIELD,_=l.RELAY_RESOLVER,y=l.SCALAR_FIELD,b=l.STREAM,E=n(4447).getReactFlightClientResponse,S=n(1380),k=S.FRAGMENTS_KEY,R=S.FRAGMENT_OWNER_KEY,w=S.FRAGMENT_PROP_NAME_KEY,I=S.ID_KEY,C=S.IS_WITHIN_UNMATCHED_TYPE_REFINEMENT,P=S.MODULE_COMPONENT_KEY,D=S.ROOT_ID,x=S.getArgumentValues,O=S.getStorageKey,T=S.getModuleComponentKey,F=n(6253).withResolverContext,N=n(5309).generateTypeID,A=function(){function e(e,t){this._isMissingData=!1,this._isWithinUnmatchedTypeRefinement=!1,this._missingRequiredFields=null,this._owner=t.owner,this._recordSource=e,this._seenRecords=new Set,this._selector=t,this._variables=t.variables}var t=e.prototype;return t.read=function(){var e=this._selector,t=e.node,n=e.dataID,r=e.isWithinUnmatchedTypeRefinement,o=t.abstractKey,l=this._recordSource.get(n),s=!r;if(s&&null==o&&null!=l&&i.getType(l)!==t.type&&n!==D&&(s=!1),s&&null!=o&&null!=l&&a.ENABLE_PRECISE_TYPE_REFINEMENT){var u=i.getType(l),c=N(u),f=this._recordSource.get(c),d=null!=f?i.getValue(f,o):null;!1===d?s=!1:null==d&&(this._isMissingData=!0)}return this._isWithinUnmatchedTypeRefinement=!s,{data:this._traverse(t,n,null),isMissingData:this._isMissingData&&s,seenRecords:this._seenRecords,selector:this._selector,missingRequiredFields:this._missingRequiredFields}},t._traverse=function(e,t,n){var r=this._recordSource.get(t);if(this._seenRecords.add(t),null==r)return void 0===r&&(this._isMissingData=!0),r;var a=n||{};return this._traverseSelections(e.selections,r,a)?a:null},t._getVariableValue=function(e){return this._variables.hasOwnProperty(e)||o(!1),this._variables[e]},t._maybeReportUnexpectedNull=function(e,t,n){var r;if("THROW"!==(null===(r=this._missingRequiredFields)||void 0===r?void 0:r.action)){var a=this._selector.node.name;switch(t){case"THROW":return void(this._missingRequiredFields={action:t,field:{path:e,owner:a}});case"LOG":return null==this._missingRequiredFields&&(this._missingRequiredFields={action:t,fields:[]}),void this._missingRequiredFields.fields.push({path:e,owner:a})}}},t._traverseSelections=function(e,t,n){for(var r=0;r<e.length;r++){var l=e[r];switch(l.kind){case g:if(a.ENABLE_REQUIRED_DIRECTIVES||o(!1),null==this._readRequiredField(l,t,n)){var E=l.action;return"NONE"!==E&&this._maybeReportUnexpectedNull(l.path,E,t),!1}break;case y:this._readScalar(l,t,n);break;case v:l.plural?this._readPluralLink(l,t,n):this._readLink(l,t,n);break;case u:if(this._getVariableValue(l.condition)===l.passingValue&&!this._traverseSelections(l.selections,t,n))return!1;break;case h:var S=l.abstractKey;if(null==S){var k=i.getType(t);if(null!=k&&k===l.type&&!this._traverseSelections(l.selections,t,n))return!1}else if(a.ENABLE_PRECISE_TYPE_REFINEMENT){var R=this._isMissingData,w=this._isWithinUnmatchedTypeRefinement,I=i.getType(t),C=N(I),P=this._recordSource.get(C),D=null!=P?i.getValue(P,S):null;this._isWithinUnmatchedTypeRefinement=w||!1===D,this._traverseSelections(l.selections,t,n),this._isWithinUnmatchedTypeRefinement=w,!1===D?this._isMissingData=R:null==D&&(this._isMissingData=!0)}else this._traverseSelections(l.selections,t,n);break;case _:if(!a.ENABLE_RELAY_RESOLVERS)throw new Error("Relay Resolver fields are not yet supported.");this._readResolverField(l,t,n);break;case d:this._createFragmentPointer(l,t,n);break;case m:this._readModuleImport(l,t,n);break;case p:this._createInlineDataOrResolverFragmentPointer(l,t,n);break;case c:case s:var x=this._isMissingData,O=this._traverseSelections(l.selections,t,n);if(this._isMissingData=x,!O)return!1;break;case b:if(!this._traverseSelections(l.selections,t,n))return!1;break;case f:if(!a.ENABLE_REACT_FLIGHT_COMPONENT_FIELD)throw new Error("Flight fields are not yet supported.");this._readFlightField(l,t,n);break;default:o(!1)}}return!0},t._readRequiredField=function(e,t,n){switch(e.field.kind){case y:return this._readScalar(e.field,t,n);case v:return e.field.plural?this._readPluralLink(e.field,t,n):this._readLink(e.field,t,n);default:e.field.kind,o(!1)}},t._readResolverField=function(e,t,n){var a=this,l=e.name,s=e.alias,u=e.resolverModule,c=e.fragment,f={__id:i.getDataID(t),__fragmentOwner:this._owner,__fragments:(0,r.default)({},c.name,{})},d=F({getDataForResolverFragment:function(e){var n,r={};a._createInlineDataOrResolverFragmentPointer(e.node,t,r);var i=null===(n=r[k])||void 0===n?void 0:n[c.name];return("object"!=typeof i||null===i)&&o(!1),i}},(function(){return u(f)}));return n[null!=s?s:l]=d,d},t._readFlightField=function(e,t,n){var r,a=null!==(r=e.alias)&&void 0!==r?r:e.name,o=O(e,this._variables),l=i.getLinkedRecordID(t,o);if(null==l)return n[a]=l,void 0===l&&(this._isMissingData=!0),l;var s=this._recordSource.get(l);if(this._seenRecords.add(l),null==s)return n[a]=s,void 0===s&&(this._isMissingData=!0),s;var u=E(s);return n[a]=u,u},t._readScalar=function(e,t,n){var r,a=null!==(r=e.alias)&&void 0!==r?r:e.name,o=O(e,this._variables),l=i.getValue(t,o);return void 0===l&&(this._isMissingData=!0),n[a]=l,l},t._readLink=function(e,t,n){var r,a=null!==(r=e.alias)&&void 0!==r?r:e.name,l=O(e,this._variables),s=i.getLinkedRecordID(t,l);if(null==s)return n[a]=s,void 0===s&&(this._isMissingData=!0),s;var u=n[a];null!=u&&"object"!=typeof u&&o(!1);var c=this._traverse(e,s,u);return n[a]=c,c},t._readPluralLink=function(e,t,n){var r,a=this,l=null!==(r=e.alias)&&void 0!==r?r:e.name,s=O(e,this._variables),u=i.getLinkedRecordIDs(t,s);if(null==u)return n[l]=u,void 0===u&&(this._isMissingData=!0),u;var c=n[l];null==c||Array.isArray(c)||o(!1);var f=c||[];return u.forEach((function(t,n){if(null==t)return void 0===t&&(a._isMissingData=!0),void(f[n]=t);var r=f[n];null!=r&&"object"!=typeof r&&o(!1),f[n]=a._traverse(e,t,r)})),n[l]=f,f},t._readModuleImport=function(e,t,n){var r=T(e.documentName),a=i.getValue(t,r);null!=a?(this._createFragmentPointer({kind:"FragmentSpread",name:e.fragmentName,args:null},t,n),n[w]=e.fragmentPropName,n[P]=a):void 0===a&&(this._isMissingData=!0)},t._createFragmentPointer=function(e,t,n){var r=n[k];null==r&&(r=n[k]={}),("object"!=typeof r||null==r)&&o(!1),null==n[I]&&(n[I]=i.getDataID(t)),r[e.name]=e.args?x(e.args,this._variables):{},n[R]=this._owner,a.ENABLE_PRECISE_TYPE_REFINEMENT&&(n[C]=this._isWithinUnmatchedTypeRefinement)},t._createInlineDataOrResolverFragmentPointer=function(e,t,n){var r=n[k];null==r&&(r=n[k]={}),("object"!=typeof r||null==r)&&o(!1),null==n[I]&&(n[I]=i.getDataID(t));var a={};this._traverseSelections(e.selections,t,a),r[e.name]=a},e}();e.exports={read:function(e,t){return new A(e,t).read()}}},8724:(e,t,n)=>{"use strict";var r=n(7578),a=function(){function e(t){return e.create(t)}return e.create=function(e){return new r(e)},e}();e.exports=a},7578:(e,t,n)=>{"use strict";var r=n(5847)(n(1735)),a=n(6528),i=a.EXISTENT,o=a.NONEXISTENT,l=a.UNKNOWN,s=function(){function e(e){var t=this;this._records=new Map,null!=e&&Object.keys(e).forEach((function(n){t._records.set(n,e[n])}))}var t=e.prototype;return t.clear=function(){this._records=new Map},t.delete=function(e){this._records.set(e,null)},t.get=function(e){return this._records.get(e)},t.getRecordIDs=function(){return Array.from(this._records.keys())},t.getStatus=function(e){return this._records.has(e)?null==this._records.get(e)?o:i:l},t.has=function(e){return this._records.has(e)},t.remove=function(e){this._records.delete(e)},t.set=function(e,t){this._records.set(e,t)},t.size=function(){return this._records.size},t.toJSON=function(){var e,t={},n=(0,r.default)(this._records);try{for(n.s();!(e=n.n()).done;){var a=e.value,i=a[0],o=a[1];t[i]=o}}catch(e){n.e(e)}finally{n.f()}return t},e}();e.exports=s},6528:e=>{"use strict";e.exports={EXISTENT:"EXISTENT",NONEXISTENT:"NONEXISTENT",UNKNOWN:"UNKNOWN"}},4023:(e,t,n)=>{"use strict";var r=n(5847)(n(1735)),a=n(132),i=n(1230),o=n(8250),l=n(4447),s=n(1380),u=n(5486),c=n(2576),f=n(1143),d=n(5309).generateTypeID,p=a.CONDITION,h=a.CLIENT_COMPONENT,v=a.CLIENT_EXTENSION,m=a.DEFER,g=a.FLIGHT_FIELD,_=a.FRAGMENT_SPREAD,y=a.INLINE_FRAGMENT,b=a.LINKED_FIELD,E=a.MODULE_IMPORT,S=a.LINKED_HANDLE,k=a.SCALAR_FIELD,R=a.SCALAR_HANDLE,w=a.STREAM,I=a.TYPE_DISCRIMINATOR,C=s.ROOT_ID,P=s.getStorageKey,D=s.getModuleOperationKey,x=function(){function e(e,t,n,r,a){this._operationLoader=null!=r?r:null,this._operationName=null,this._recordSource=e,this._references=n,this._variables=t,this._shouldProcessClientComponents=a}var t=e.prototype;return t.mark=function(e,t){"Operation"!==e.kind&&"SplitOperation"!==e.kind||(this._operationName=e.name),this._traverse(e,t)},t._traverse=function(e,t){this._references.add(t);var n=this._recordSource.get(t);null!=n&&this._traverseSelections(e.selections,n)},t._getVariableValue=function(e){return this._variables.hasOwnProperty(e)||f(!1),this._variables[e]},t._traverseSelections=function(e,t){var n=this;e.forEach((function(r){switch(r.kind){case b:r.plural?n._traversePluralLink(r,t):n._traverseLink(r,t);break;case p:n._getVariableValue(r.condition)===r.passingValue&&n._traverseSelections(r.selections,t);break;case y:if(null==r.abstractKey){var a=o.getType(t);null!=a&&a===r.type&&n._traverseSelections(r.selections,t)}else if(i.ENABLE_PRECISE_TYPE_REFINEMENT){var l=o.getType(t),s=d(l);n._references.add(s),n._traverseSelections(r.selections,t)}else n._traverseSelections(r.selections,t);break;case _:n._traverseSelections(r.fragment.selections,t);break;case S:var c=u(r,e,n._variables);c.plural?n._traversePluralLink(c,t):n._traverseLink(c,t);break;case m:case w:n._traverseSelections(r.selections,t);break;case k:case R:break;case I:if(i.ENABLE_PRECISE_TYPE_REFINEMENT){var C=o.getType(t),P=d(C);n._references.add(P)}break;case E:n._traverseModuleImport(r,t);break;case v:n._traverseSelections(r.selections,t);break;case g:if(!i.ENABLE_REACT_FLIGHT_COMPONENT_FIELD)throw new Error("Flight fields are not yet supported.");n._traverseFlightField(r,t);break;case h:if(!1===n._shouldProcessClientComponents)break;n._traverseSelections(r.fragment.selections,t);break;default:f(!1)}}))},t._traverseModuleImport=function(e,t){var n=this._operationLoader;null===n&&f(!1);var r=D(e.documentName),a=o.getValue(t,r);if(null!=a){var i=n.get(a);if(null!=i){var l=c(i).selections;this._traverseSelections(l,t)}}},t._traverseLink=function(e,t){var n=P(e,this._variables),r=o.getLinkedRecordID(t,n);null!=r&&this._traverse(e,r)},t._traversePluralLink=function(e,t){var n=this,r=P(e,this._variables),a=o.getLinkedRecordIDs(t,r);null!=a&&a.forEach((function(t){null!=t&&n._traverse(e,t)}))},t._traverseFlightField=function(e,t){var n=P(e,this._variables),a=o.getLinkedRecordID(t,n);if(null!=a){this._references.add(a);var i=this._recordSource.get(a);if(null!=i){var s=o.getValue(i,l.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY);if(Array.isArray(s)){var u=this._operationLoader;null===u&&f(!1);var d,p=this._variables,h=(0,r.default)(s);try{for(h.s();!(d=h.n()).done;){var v=d.value;this._variables=v.variables;var m=v.module,g=u.get(m);if(null!=g){var _=c(g);this._traverse(_,C)}}}catch(e){h.e(e)}finally{h.f()}this._variables=p}}}},e}();e.exports={mark:function(e,t,n,r,a){var i=t.dataID,o=t.node,l=t.variables;new x(e,l,n,r,a).mark(o,i)}}},1147:(e,t,n)=>{"use strict";var r=n(5847),a=r(n(1735)),i=r(n(9381)),o=n(1230),l=n(8250),s=(n(1305),n(1143)),u=(n(3620),n(132)),c=u.CONDITION,f=u.CLIENT_COMPONENT,d=u.CLIENT_EXTENSION,p=u.DEFER,h=u.FLIGHT_FIELD,v=u.FRAGMENT_SPREAD,m=u.INLINE_FRAGMENT,g=u.LINKED_FIELD,_=u.LINKED_HANDLE,y=u.MODULE_IMPORT,b=u.SCALAR_FIELD,E=u.SCALAR_HANDLE,S=u.STREAM,k=u.TYPE_DISCRIMINATOR,R=n(6063),w=R.generateClientID,I=(R.isClientID,n(1447).createNormalizationSelector),C=n(4447),P=C.refineToReactFlightPayloadData,D=C.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY,x=C.REACT_FLIGHT_TREE_STORAGE_KEY,O=C.REACT_FLIGHT_TYPE_NAME,T=n(1380),F=T.getArgumentValues,N=T.getHandleStorageKey,A=T.getModuleComponentKey,L=T.getModuleOperationKey,M=T.getStorageKey,U=T.TYPENAME_KEY,q=T.ROOT_ID,z=T.ROOT_TYPE,j=n(5309),V=j.generateTypeID,Q=j.TYPE_SCHEMA_TYPE,K=function(){function e(e,t,n){this._getDataId=n.getDataID,this._handleFieldPayloads=[],this._treatMissingFieldsAsNull=n.treatMissingFieldsAsNull,this._incrementalPlaceholders=[],this._isClientExtension=!1,this._isUnmatchedAbstractType=!1,this._moduleImportPayloads=[],this._path=n.path?(0,i.default)(n.path):[],this._recordSource=e,this._variables=t,this._reactFlightPayloadDeserializer=n.reactFlightPayloadDeserializer,this._reactFlightServerErrorHandler=n.reactFlightServerErrorHandler,this._shouldProcessClientComponents=n.shouldProcessClientComponents}var t=e.prototype;return t.normalizeResponse=function(e,t,n){var r=this._recordSource.get(t);return r||s(!1),this._traverseSelections(e,r,n),{errors:null,fieldPayloads:this._handleFieldPayloads,incrementalPlaceholders:this._incrementalPlaceholders,moduleImportPayloads:this._moduleImportPayloads,source:this._recordSource,isFinal:!1}},t._getVariableValue=function(e){return this._variables.hasOwnProperty(e)||s(!1),this._variables[e]},t._getRecordType=function(e){var t=e[U];return null==t&&s(!1),t},t._traverseSelections=function(e,t,n){for(var r=0;r<e.selections.length;r++){var a=e.selections[r];switch(a.kind){case b:case g:this._normalizeField(e,a,t,n);break;case c:this._getVariableValue(a.condition)===a.passingValue&&this._traverseSelections(a,t,n);break;case v:this._traverseSelections(a.fragment,t,n);break;case m:var i=a.abstractKey;if(null==i)l.getType(t)===a.type&&this._traverseSelections(a,t,n);else if(o.ENABLE_PRECISE_TYPE_REFINEMENT){var u=n.hasOwnProperty(i),R=l.getType(t),w=V(R),I=this._recordSource.get(w);null==I&&(I=l.create(w,Q),this._recordSource.set(w,I)),l.setValue(I,i,u),u&&this._traverseSelections(a,t,n)}else{var C=n.hasOwnProperty(i),P=this._isUnmatchedAbstractType;this._isUnmatchedAbstractType=this._isUnmatchedAbstractType||!C,this._traverseSelections(a,t,n),this._isUnmatchedAbstractType=P}break;case k:if(o.ENABLE_PRECISE_TYPE_REFINEMENT){var D=a.abstractKey,x=n.hasOwnProperty(D),O=l.getType(t),T=V(O),A=this._recordSource.get(T);null==A&&(A=l.create(T,Q),this._recordSource.set(T,A)),l.setValue(A,D,x)}break;case _:case E:var L=a.args?F(a.args,this._variables):{},U=M(a,this._variables),q=N(a,this._variables);this._handleFieldPayloads.push({args:L,dataID:l.getDataID(t),fieldKey:U,handle:a.handle,handleKey:q,handleArgs:a.handleArgs?F(a.handleArgs,this._variables):{}});break;case y:this._normalizeModuleImport(e,a,t,n);break;case p:this._normalizeDefer(a,t,n);break;case S:this._normalizeStream(a,t,n);break;case d:var z=this._isClientExtension;this._isClientExtension=!0,this._traverseSelections(a,t,n),this._isClientExtension=z;break;case f:if(!1===this._shouldProcessClientComponents)break;this._traverseSelections(a.fragment,t,n);break;case h:if(!o.ENABLE_REACT_FLIGHT_COMPONENT_FIELD)throw new Error("Flight fields are not yet supported.");this._normalizeFlightField(e,a,t,n);break;default:s(!1)}}},t._normalizeDefer=function(e,t,n){!1===(null===e.if||this._getVariableValue(e.if))?this._traverseSelections(e,t,n):this._incrementalPlaceholders.push({kind:"defer",data:n,label:e.label,path:(0,i.default)(this._path),selector:I(e,l.getDataID(t),this._variables),typeName:l.getType(t)})},t._normalizeStream=function(e,t,n){this._traverseSelections(e,t,n),!0===(null===e.if||this._getVariableValue(e.if))&&this._incrementalPlaceholders.push({kind:"stream",label:e.label,path:(0,i.default)(this._path),parentID:l.getDataID(t),node:e,variables:this._variables})},t._normalizeModuleImport=function(e,t,n,r){"object"==typeof r&&r||s(!1);var a=l.getType(n),o=A(t.documentName),u=r[o];l.setValue(n,o,null!=u?u:null);var c=L(t.documentName),f=r[c];l.setValue(n,c,null!=f?f:null),null!=f&&this._moduleImportPayloads.push({data:r,dataID:l.getDataID(n),operationReference:f,path:(0,i.default)(this._path),typeName:a,variables:this._variables})},t._normalizeField=function(e,t,n,r){"object"==typeof r&&r||s(!1);var a=t.alias||t.name,i=M(t,this._variables),o=r[a];if(null!=o)t.kind===b?l.setValue(n,i,o):t.kind===g?(this._path.push(a),t.plural?this._normalizePluralLink(t,n,i,o):this._normalizeLink(t,n,i,o),this._path.pop()):s(!1);else{if(void 0===o){if(this._isClientExtension||this._isUnmatchedAbstractType)return;if(!this._treatMissingFieldsAsNull)return}l.setValue(n,i,null)}},t._normalizeFlightField=function(e,t,n,r){var i=t.alias||t.name,o=M(t,this._variables),u=r[i];if(null!=u){var c=P(u),f=this._reactFlightPayloadDeserializer;null==c&&s(!1),"function"!=typeof f&&s(!1),c.errors.length>0&&"function"==typeof this._reactFlightServerErrorHandler&&this._reactFlightServerErrorHandler(c.status,c.errors);var d=w(l.getDataID(n),M(t,this._variables)),p=this._recordSource.get(d);if(null==p&&(p=l.create(d,O),this._recordSource.set(d,p)),null==c.tree)return l.setValue(p,x,null),l.setValue(p,D,[]),void l.setLinkedRecordID(n,o,d);var h=f(c.tree);l.setValue(p,x,h);var v,m=[],g=(0,a.default)(c.queries);try{for(g.s();!(v=g.n()).done;){var _=v.value;null!=_.response.data&&this._moduleImportPayloads.push({data:_.response.data,dataID:q,operationReference:_.module,path:[],typeName:z,variables:_.variables}),m.push({module:_.module,variables:_.variables})}}catch(e){g.e(e)}finally{g.f()}var y,b=(0,a.default)(c.fragments);try{for(b.s();!(y=b.n()).done;){var E=y.value;null!=E.response.data&&this._moduleImportPayloads.push({data:E.response.data,dataID:E.__id,operationReference:E.module,path:[],typeName:E.__typename,variables:E.variables}),m.push({module:E.module,variables:E.variables})}}catch(e){b.e(e)}finally{b.f()}l.setValue(p,D,m),l.setLinkedRecordID(n,o,d)}else{if(void 0===u){if(this._isUnmatchedAbstractType)return;if(!this._treatMissingFieldsAsNull)return}l.setValue(n,o,null)}},t._normalizeLink=function(e,t,n,r){var a;"object"==typeof r&&r||s(!1);var i=this._getDataId(r,null!==(a=e.concreteType)&&void 0!==a?a:this._getRecordType(r))||l.getLinkedRecordID(t,n)||w(l.getDataID(t),n);"string"!=typeof i&&s(!1),l.setLinkedRecordID(t,n,i);var o=this._recordSource.get(i);if(o);else{var u=e.concreteType||this._getRecordType(r);o=l.create(i,u),this._recordSource.set(i,o)}this._traverseSelections(e,o,r)},t._normalizePluralLink=function(e,t,n,r){var a=this;Array.isArray(r)||s(!1);var i=l.getLinkedRecordIDs(t,n),o=[];r.forEach((function(r,u){var c;if(null!=r){a._path.push(String(u)),"object"!=typeof r&&s(!1);var f=a._getDataId(r,null!==(c=e.concreteType)&&void 0!==c?c:a._getRecordType(r))||i&&i[u]||w(l.getDataID(t),n,u);"string"!=typeof f&&s(!1),o.push(f);var d=a._recordSource.get(f);if(d);else{var p=e.concreteType||a._getRecordType(r);d=l.create(f,p),a._recordSource.set(f,d)}a._traverseSelections(e,d,r),a._path.pop()}else o.push(r)})),l.setLinkedRecordIDs(t,n,o)},t._validateRecordType=function(e,t,n){var r;null!==(r=t.concreteType)&&void 0!==r||this._getRecordType(n),l.getDataID(e)},t._validateConflictingFieldsWithIdenticalId=function(e,t,n){},t._validateConflictingLinkedFieldsWithIdenticalId=function(e,t,n,r){},e}();e.exports={normalize:function(e,t,n,r){var a=t.dataID,i=t.node,o=t.variables;return new K(e,o,r).normalizeResponse(i,a,n)}}},4447:(e,t,n)=>{"use strict";var r=n(1143),a=n(8250).getType,i="ReactFlightComponent";e.exports={REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY:"executableDefinitions",REACT_FLIGHT_TREE_STORAGE_KEY:"tree",REACT_FLIGHT_TYPE_NAME:i,getReactFlightClientResponse:function(e){a(e)!==i&&r(!1);var t=e.tree;return null!=t?t:null},refineToReactFlightPayloadData:function(e){return null!=e&&"object"==typeof e&&"string"==typeof e.status&&(Array.isArray(e.tree)||null===e.tree)&&Array.isArray(e.queries)&&Array.isArray(e.fragments)&&Array.isArray(e.errors)?e:null}}},7706:(e,t,n)=>{"use strict";var r=n(1230),a=n(4159),i=(n(2232),n(9552)),o=n(5578),l=function(){function e(e){this._subscriptions=new Set,this.__log=e}var t=e.prototype;return t.subscribe=function(e,t){var n=this,r={backup:null,callback:t,snapshot:e,stale:!1};return this._subscriptions.add(r),{dispose:function(){n._subscriptions.delete(r)}}},t.snapshotSubscriptions=function(e){this._subscriptions.forEach((function(t){if(t.stale){var n=t.snapshot,r=a.read(e,n.selector),i=o(n.data,r.data);r.data=i,t.backup=r}else t.backup=t.snapshot}))},t.restoreSubscriptions=function(){this._subscriptions.forEach((function(e){var t=e.backup;e.backup=null,t?(t.data!==e.snapshot.data&&(e.stale=!0),e.snapshot={data:e.snapshot.data,isMissingData:t.isMissingData,seenRecords:t.seenRecords,selector:t.selector,missingRequiredFields:t.missingRequiredFields}):e.stale=!0}))},t.updateSubscriptions=function(e,t,n,r){var a=this,i=0!==t.size;this._subscriptions.forEach((function(o){var l=a._updateSubscription(e,o,t,i,r);null!=l&&n.push(l)}))},t._updateSubscription=function(e,t,n,l,s){var u=t.backup,c=t.callback,f=t.snapshot,d=t.stale,p=l&&i(f.seenRecords,n);if(d||p){var h=p||!u?a.read(e,f.selector):u;return h={data:o(f.data,h.data),isMissingData:h.isMissingData,seenRecords:h.seenRecords,selector:h.selector,missingRequiredFields:h.missingRequiredFields},t.snapshot=h,t.stale=!1,h.data!==f.data?(this.__log&&r.ENABLE_NOTIFY_SUBSCRIPTION&&this.__log({name:"store.notify.subscription",sourceOperation:s,snapshot:f,nextSnapshot:h}),c(h),f.selector.owner):void 0}},e}();e.exports=l},4430:(e,t,n)=>{"use strict";var r=n(5847)(n(1735)),a=n(1230),i=n(4159),o=(n(2232),n(5578)),l=function(){function e(e){this._notifiedRevision=0,this._snapshotRevision=0,this._subscriptionsByDataId=new Map,this._staleSubscriptions=new Set,this.__log=e}var t=e.prototype;return t.subscribe=function(e,t){var n,a=this,i={backup:null,callback:t,notifiedRevision:this._notifiedRevision,snapshotRevision:this._snapshotRevision,snapshot:e},o=(0,r.default)(e.seenRecords);try{for(o.s();!(n=o.n()).done;){var l=n.value,s=this._subscriptionsByDataId.get(l);null!=s?s.add(i):this._subscriptionsByDataId.set(l,new Set([i]))}}catch(e){o.e(e)}finally{o.f()}return{dispose:function(){var t,n=(0,r.default)(e.seenRecords);try{for(n.s();!(t=n.n()).done;){var o=t.value,l=a._subscriptionsByDataId.get(o);null!=l&&(l.delete(i),0===l.size&&a._subscriptionsByDataId.delete(o))}}catch(e){n.e(e)}finally{n.f()}}}},t.snapshotSubscriptions=function(e){var t=this;this._snapshotRevision++,this._subscriptionsByDataId.forEach((function(n){n.forEach((function(n){if(n.snapshotRevision!==t._snapshotRevision)if(n.snapshotRevision=t._snapshotRevision,t._staleSubscriptions.has(n)){var r=n.snapshot,a=i.read(e,r.selector),l=o(r.data,a.data);a.data=l,n.backup=a}else n.backup=n.snapshot}))}))},t.restoreSubscriptions=function(){var e=this;this._snapshotRevision++,this._subscriptionsByDataId.forEach((function(t){t.forEach((function(t){if(t.snapshotRevision!==e._snapshotRevision){t.snapshotRevision=e._snapshotRevision;var n=t.backup;if(t.backup=null,n){n.data!==t.snapshot.data&&e._staleSubscriptions.add(t);var r=t.snapshot.seenRecords;t.snapshot={data:t.snapshot.data,isMissingData:n.isMissingData,seenRecords:n.seenRecords,selector:n.selector,missingRequiredFields:n.missingRequiredFields},e._updateSubscriptionsMap(t,r)}else e._staleSubscriptions.add(t)}}))}))},t.updateSubscriptions=function(e,t,n,r){var a=this;this._notifiedRevision++,t.forEach((function(t){var i=a._subscriptionsByDataId.get(t);null!=i&&i.forEach((function(t){if(t.notifiedRevision!==a._notifiedRevision){var i=a._updateSubscription(e,t,!1,r);null!=i&&n.push(i)}}))})),this._staleSubscriptions.forEach((function(t){if(t.notifiedRevision!==a._notifiedRevision){var i=a._updateSubscription(e,t,!0,r);null!=i&&n.push(i)}})),this._staleSubscriptions.clear()},t._updateSubscription=function(e,t,n,r){var l=t.backup,s=t.callback,u=t.snapshot,c=n&&null!=l?l:i.read(e,u.selector);c={data:o(u.data,c.data),isMissingData:c.isMissingData,seenRecords:c.seenRecords,selector:c.selector,missingRequiredFields:c.missingRequiredFields};var f=t.snapshot.seenRecords;if(t.snapshot=c,t.notifiedRevision=this._notifiedRevision,this._updateSubscriptionsMap(t,f),c.data!==u.data)return this.__log&&a.ENABLE_NOTIFY_SUBSCRIPTION&&this.__log({name:"store.notify.subscription",sourceOperation:r,snapshot:u,nextSnapshot:c}),s(c),u.selector.owner},t._updateSubscriptionsMap=function(e,t){var n,a=(0,r.default)(t);try{for(a.s();!(n=a.n()).done;){var i=n.value,o=this._subscriptionsByDataId.get(i);null!=o&&(o.delete(e),0===o.size&&this._subscriptionsByDataId.delete(i))}}catch(e){a.e(e)}finally{a.f()}var l,s=(0,r.default)(e.snapshot.seenRecords);try{for(s.s();!(l=s.n()).done;){var u=l.value,c=this._subscriptionsByDataId.get(u);null!=c?c.add(e):this._subscriptionsByDataId.set(u,new Set([e]))}}catch(e){s.e(e)}finally{s.f()}},e}();e.exports=l},1380:(e,t,n)=>{"use strict";var r=n(5847)(n(9381)),a=n(132),i=n(1126),o=n(1143),l=n(1411),s=a.VARIABLE,u=a.LITERAL,c=a.OBJECT_VALUE,f=a.LIST_VALUE;function d(e,t){if(e.kind===s)return function(e,t){return t.hasOwnProperty(e)||o(!1),l(t[e])}(e.variableName,t);if(e.kind===u)return e.value;if(e.kind===c){var n={};return e.fields.forEach((function(e){n[e.name]=d(e,t)})),n}if(e.kind===f){var r=[];return e.items.forEach((function(e){null!=e&&r.push(d(e,t))})),r}}function p(e,t){var n={};return e.forEach((function(e){n[e.name]=d(e,t)})),n}function h(e,t){if(!t)return e;var n=[];for(var r in t)if(t.hasOwnProperty(r)){var a,i=t[r];null!=i&&n.push(r+":"+(null!==(a=JSON.stringify(i))&&void 0!==a?a:"undefined"))}return 0===n.length?e:e+"(".concat(n.join(","),")")}var v={FRAGMENTS_KEY:"__fragments",FRAGMENT_OWNER_KEY:"__fragmentOwner",FRAGMENT_PROP_NAME_KEY:"__fragmentPropName",MODULE_COMPONENT_KEY:"__module_component",ID_KEY:"__id",REF_KEY:"__ref",REFS_KEY:"__refs",ROOT_ID:"client:root",ROOT_TYPE:"__Root",TYPENAME_KEY:"__typename",INVALIDATED_AT_KEY:"__invalidated_at",IS_WITHIN_UNMATCHED_TYPE_REFINEMENT:"__isWithinUnmatchedTypeRefinement",formatStorageKey:h,getArgumentValue:d,getArgumentValues:p,getHandleStorageKey:function(e,t){var n=e.dynamicKey,a=e.handle,o=e.key,l=e.name,s=e.args,u=e.filters,c=i(a,o,l),f=null;return s&&u&&0!==s.length&&0!==u.length&&(f=s.filter((function(e){return u.indexOf(e.name)>-1}))),n&&(f=null!=f?[n].concat((0,r.default)(f)):[n]),null===f?c:h(c,p(f,t))},getStorageKey:function(e,t){if(e.storageKey)return e.storageKey;var n=e.args,r=e.name;return n&&0!==n.length?h(r,p(n,t)):r},getStableStorageKey:function(e,t){return h(e,l(t))},getModuleComponentKey:function(e){return"".concat("__module_component_").concat(e)},getModuleOperationKey:function(e){return"".concat("__module_operation_").concat(e)}};e.exports=v},6253:(e,t,n)=>{"use strict";var r=n(1143),a=n(5557).getFragment,i=n(1447).getSelector,o=[];e.exports={readFragment:function(e,t){if(!o.length)throw new Error("readFragment should be called only from within a Relay Resolver function.");var n=o[o.length-1],l=a(e),s=i(l,t);return null==s&&r(!1),"SingularReaderSelector"!==s.kind&&r(!1),n.getDataForResolverFragment(s)},withResolverContext:function(e,t){o.push(e);try{return t()}finally{o.pop()}}}},5309:e=>{"use strict";var t="client:__type:";e.exports={generateTypeID:function(e){return t+e},isTypeID:function(e){return 0===e.indexOf(t)},TYPE_SCHEMA_TYPE:"__TypeSchema"}},2691:(e,t,n)=>{"use strict";var r=(0,n(6063).generateClientID)(n(1380).ROOT_ID,"viewer");e.exports={VIEWER_ID:r,VIEWER_TYPE:"Viewer"}},5486:(e,t,n)=>{"use strict";var r=n(1305),a=n(1143),i=n(132).LINKED_FIELD,o=n(1380).getHandleStorageKey;e.exports=function(e,t,n){var l=t.find((function(t){return t.kind===i&&t.name===e.name&&t.alias===e.alias&&r(t.args,e.args)}));l&&l.kind===i||a(!1);var s=o(e,n);return{kind:"LinkedField",alias:l.alias,name:s,storageKey:s,args:null,concreteType:l.concreteType,plural:l.plural,selections:l.selections}}},3871:(e,t,n)=>{"use strict";var r=n(1305),a=n(1143),i=n(132).SCALAR_FIELD,o=n(1380).getHandleStorageKey;e.exports=function(e,t,n){var l=t.find((function(t){return t.kind===i&&t.name===e.name&&t.alias===e.alias&&r(t.args,e.args)}));l&&l.kind===i||a(!1);var s=o(e,n);return{kind:"ScalarField",alias:l.alias,name:s,storageKey:s,args:null}}},221:(e,t,n)=>{"use strict";var r=n(8474);n(3620),e.exports=function(e,t,n,a,i,o){return new r(e,n,a,o,i)}},594:(e,t,n)=>{"use strict";var r,a,i=n(1143);e.exports=function(e){return r||(r=e.createContext(null),a=e),e!==a&&i(!1),r}},1517:(e,t,n)=>{"use strict";var r=n(2691),a=r.VIEWER_ID,i=r.VIEWER_TYPE;e.exports=function(e,t){return t===i&&null==e.id?a:e.id}},4062:e=>{"use strict";e.exports=function(e){}},9552:e=>{"use strict";var t=Symbol.iterator;e.exports=function(e,n){for(var r=e[t](),a=r.next();!a.done;){var i=a.value;if(n.has(i))return!0;a=r.next()}return!1}},641:e=>{"use strict";e.exports=function(e){return Boolean(e&&e["@@RelayModernEnvironment"])}},1507:(e,t,n)=>{"use strict";var r=n(1143),a=n(5557).getInlineDataFragment,i=n(1380).FRAGMENTS_KEY;e.exports=function(e,t){var n,o=a(e);if(null==t)return t;"object"!=typeof t&&r(!1);var l=null===(n=t[i])||void 0===n?void 0:n[o.name];return null==l&&r(!1),l}},5476:(e,t,n)=>{"use strict";var r=n(3385),a=n(1230),i=(n(3620),n(5557).getRequest),o=n(6063).generateUniqueClientID,l=n(1071).createOperationDescriptor,s=n(1447).createReaderSelector;e.exports=function(e,t){var n=i(t.subscription);if("subscription"!==n.params.operationKind)throw new Error("requestSubscription: Must use Subscription operation");var u=t.configs,c=t.onCompleted,f=t.onError,d=t.onNext,p=t.variables,h=t.cacheConfig,v=l(n,p,h,a.ENABLE_UNIQUE_SUBSCRIPTION_ROOT?o():void 0),m=(u?r.convert(u,n,null,t.updater):t).updater;return{dispose:e.execute({operation:v,updater:m}).map((function(t){var n,r,i,o,l=v.fragment;a.ENABLE_UNIQUE_SUBSCRIPTION_ROOT&&("string"==typeof(n=Array.isArray(t)?null===(r=t[0])||void 0===r||null===(i=r.extensions)||void 0===i?void 0:i.__relay_subscription_root_id:null===(o=t.extensions)||void 0===o?void 0:o.__relay_subscription_root_id)&&(l=s(l.node,n,l.variables,l.owner)));return e.lookup(l).data})).subscribe({next:d,error:f,complete:c}).unsubscribe}}},132:e=>{"use strict";e.exports={CONDITION:"Condition",CLIENT_COMPONENT:"ClientComponent",CLIENT_EXTENSION:"ClientExtension",DEFER:"Defer",CONNECTION:"Connection",FLIGHT_FIELD:"FlightField",FRAGMENT:"Fragment",FRAGMENT_SPREAD:"FragmentSpread",INLINE_DATA_FRAGMENT_SPREAD:"InlineDataFragmentSpread",INLINE_DATA_FRAGMENT:"InlineDataFragment",INLINE_FRAGMENT:"InlineFragment",LINKED_FIELD:"LinkedField",LINKED_HANDLE:"LinkedHandle",LITERAL:"Literal",LIST_VALUE:"ListValue",LOCAL_ARGUMENT:"LocalArgument",MODULE_IMPORT:"ModuleImport",RELAY_RESOLVER:"RelayResolver",REQUIRED_FIELD:"RequiredField",OBJECT_VALUE:"ObjectValue",OPERATION:"Operation",REQUEST:"Request",ROOT_ARGUMENT:"RootArgument",SCALAR_FIELD:"ScalarField",SCALAR_HANDLE:"ScalarHandle",SPLIT_OPERATION:"SplitOperation",STREAM:"Stream",TYPE_DISCRIMINATOR:"TypeDiscriminator",VARIABLE:"Variable"}},9558:e=>{"use strict";e.exports={DEFAULT_HANDLE_KEY:""}},2299:e=>{"use strict";function t(e,t,n){for(var r=arguments.length,a=new Array(r>3?r-3:0),i=3;i<r;i++)a[i-3]=arguments[i];var o=0,l=n.replace(/%s/g,(function(){return String(a[o++])})),s=new Error(l),u=Object.assign(s,{name:t,messageFormat:n,messageParams:a,type:e,taalOpcodes:[2,2]});if(void 0===u.stack)try{throw u}catch(e){}return u}e.exports={create:function(e,n){for(var r=arguments.length,a=new Array(r>2?r-2:0),i=2;i<r;i++)a[i-2]=arguments[i];return t.apply(void 0,["error",e,n].concat(a))},createWarning:function(e,n){for(var r=arguments.length,a=new Array(r>2?r-2:0),i=2;i<r;i++)a[i-2]=arguments[i];return t.apply(void 0,["warn",e,n].concat(a))}}},1230:e=>{"use strict";e.exports={ENABLE_VARIABLE_CONNECTION_KEY:!1,ENABLE_PARTIAL_RENDERING_DEFAULT:!0,ENABLE_RELAY_CONTAINERS_SUSPENSE:!0,ENABLE_PRECISE_TYPE_REFINEMENT:!1,ENABLE_REACT_FLIGHT_COMPONENT_FIELD:!1,ENABLE_REQUIRED_DIRECTIVES:!1,ENABLE_RELAY_RESOLVERS:!1,ENABLE_GETFRAGMENTIDENTIFIER_OPTIMIZATION:!1,ENABLE_FRIENDLY_QUERY_NAME_GQL_URL:!1,ENABLE_STORE_SUBSCRIPTIONS_REFACTOR:!1,ENABLE_LOAD_QUERY_REQUEST_DEDUPING:!0,ENABLE_DO_NOT_WRAP_LIVE_QUERY:!1,ENABLE_NOTIFY_SUBSCRIPTION:!1,ENABLE_UNIQUE_SUBSCRIPTION_ROOT:!1,ENABLE_BATCHED_STORE_UPDATES:!1}},1241:e=>{"use strict";var t={},n={stop:function(){}},r={profile:function(e,r){var a=t[e];if(a&&a.length>0){for(var i=[],o=a.length-1;o>=0;o--){var l=a[o](e,r);i.unshift(l)}return{stop:function(e){i.forEach((function(t){return t(e)}))}}}return n},attachProfileHandler:function(e,n){t.hasOwnProperty(e)||(t[e]=[]),t[e].push(n)},detachProfileHandler:function(e,n){var r,a,i;t.hasOwnProperty(e)&&(a=n,-1!==(i=(r=t[e]).indexOf(a))&&r.splice(i,1))}};e.exports=r},9480:(e,t,n)=>{"use strict";var r=n(5847)(n(8557)),a=n(5060),i=n(1143),o=function(){function e(){var e=this;(0,r.default)(this,"_complete",!1),(0,r.default)(this,"_events",[]),(0,r.default)(this,"_sinks",new Set),(0,r.default)(this,"_subscription",null),this._observable=a.create((function(t){e._sinks.add(t);for(var n=e._events,r=0;r<n.length&&!t.closed;r++){var a=n[r];switch(a.kind){case"complete":t.complete();break;case"error":t.error(a.error);break;case"next":t.next(a.data);break;default:a.kind,i(!1)}}return function(){e._sinks.delete(t)}}))}var t=e.prototype;return t.complete=function(){!0!==this._complete&&(this._complete=!0,this._events.push({kind:"complete"}),this._sinks.forEach((function(e){return e.complete()})))},t.error=function(e){!0!==this._complete&&(this._complete=!0,this._events.push({kind:"error",error:e}),this._sinks.forEach((function(t){return t.error(e)})))},t.next=function(e){!0!==this._complete&&(this._events.push({kind:"next",data:e}),this._sinks.forEach((function(t){return t.next(e)})))},t.subscribe=function(e){return this._subscription=this._observable.subscribe(e),this._subscription},t.unsubscribe=function(){this._subscription&&(this._subscription.unsubscribe(),this._subscription=null)},t.getObserverCount=function(){return this._sinks.size},e}();e.exports=o},8958:(e,t,n)=>{"use strict";var r=n(5847)(n(9471)),a=n(1380),i=a.getModuleComponentKey,o=a.getModuleOperationKey;e.exports=function(e,t,n,a){var l=(0,r.default)({},a);return l[i(e)]=n,l[o(e)]=t,l}},2232:e=>{"use strict";e.exports=function e(t){return Object.freeze(t),Object.getOwnPropertyNames(t).forEach((function(n){var r=t[n];r&&"object"==typeof r&&!Object.isFrozen(r)&&e(r)})),t}},7579:e=>{"use strict";var t=1e5;e.exports=function(){return t++}},6956:(e,t,n)=>{"use strict";var r=n(1230),a=n(9589),i=n(1411),o=n(1447),l=o.getDataIDsFromFragment,s=o.getVariablesFromFragment,u=o.getSelector;e.exports=function(e,t){var n,o=u(e,t),c=null==o?"null":"SingularReaderSelector"===o.kind?o.owner.identifier:"["+o.selectors.map((function(e){return e.owner.identifier})).join(",")+"]",f=s(e,t),d=l(e,t);return r.ENABLE_GETFRAGMENTIDENTIFIER_OPTIMIZATION?c+"/"+e.name+"/"+(null==f||a(f)?"{}":JSON.stringify(i(f)))+"/"+(void 0===d?"missing":null==d?"null":Array.isArray(d)?"["+d.join(",")+"]":d):c+"/"+e.name+"/"+JSON.stringify(i(f))+"/"+(null!==(n=JSON.stringify(d))&&void 0!==n?n:"missing")}},2576:(e,t,n)=>{"use strict";var r=n(132),a=r.REQUEST,i=r.SPLIT_OPERATION;e.exports=function(e){switch(e.kind){case a:return e.operation;case i:default:return e}}},1126:(e,t,n)=>{"use strict";var r=n(1143),a=n(9558).DEFAULT_HANDLE_KEY;e.exports=function(e,t,n){return t&&t!==a?"__".concat(t,"_").concat(e):(null==n&&r(!1),"__".concat(n,"_").concat(e))}},676:(e,t,n)=>{"use strict";var r=n(1143),a=n(1411);e.exports=function(e,t){var n=null!=e.cacheID?e.cacheID:e.id;return null==n&&r(!1),n+JSON.stringify(a(t))}},9589:e=>{"use strict";var t=Object.prototype.hasOwnProperty;e.exports=function(e){for(var n in e)if(t.call(e,n))return!1;return!0}},7188:e=>{"use strict";e.exports=function(e){return!!e&&"function"==typeof e.then}},7669:e=>{"use strict";e.exports=function(e,t){return e===t&&(null===e||"object"!=typeof e)}},5578:e=>{"use strict";var t="undefined"!=typeof WeakSet,n="undefined"!=typeof WeakMap;e.exports=function e(r,a){if(r===a||"object"!=typeof r||r instanceof Set||r instanceof Map||t&&r instanceof WeakSet||n&&r instanceof WeakMap||!r||"object"!=typeof a||a instanceof Set||a instanceof Map||t&&a instanceof WeakSet||n&&a instanceof WeakMap||!a)return a;var i=!1,o=Array.isArray(r)?r:null,l=Array.isArray(a)?a:null;if(o&&l)i=l.reduce((function(t,n,r){var a=e(o[r],n);return a!==l[r]&&(l[r]=a),t&&a===o[r]}),!0)&&o.length===l.length;else if(!o&&!l){var s=r,u=a,c=Object.keys(s),f=Object.keys(u);i=f.reduce((function(t,n){var r=e(s[n],u[n]);return r!==u[n]&&(u[n]=r),t&&r===s[n]}),!0)&&c.length===f.length}return i?r:a}},8154:e=>{"use strict";e.exports=function(e,t){switch(t.action){case"THROW":var n=t.field,r=n.path,a=n.owner;throw e.requiredFieldLogger({kind:"missing_field.throw",owner:a,fieldPath:r}),new Error("Relay: Missing @required value at path '".concat(r,"' in '").concat(a,"'."));case"LOG":t.fields.forEach((function(t){var n=t.path,r=t.owner;e.requiredFieldLogger({kind:"missing_field.log",owner:r,fieldPath:n})}));break;default:t.action}}},9468:e=>{"use strict";var t=Promise.resolve();function n(e){setTimeout((function(){throw e}),0)}e.exports=function(e){t.then(e).catch(n)}},1411:e=>{"use strict";e.exports=function e(t){if(!t||"object"!=typeof t)return t;if(Array.isArray(t))return t.map(e);for(var n=Object.keys(t).sort(),r={},a=0;a<n.length;a++)r[n[a]]=e(t[n[a]]);return r}},2591:e=>{e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r},e.exports.default=e.exports,e.exports.__esModule=!0},2982:(e,t,n)=>{var r=n(2591);e.exports=function(e){if(Array.isArray(e))return r(e)},e.exports.default=e.exports,e.exports.__esModule=!0},1735:(e,t,n)=>{var r=n(5625);e.exports=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=r(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0,i=function(){};return{s:i,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return l=e.done,e},e:function(e){s=!0,o=e},f:function(){try{l||null==n.return||n.return()}finally{if(s)throw o}}}},e.exports.default=e.exports,e.exports.__esModule=!0},8557:e=>{e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},e.exports.default=e.exports,e.exports.__esModule=!0},5847:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.default=e.exports,e.exports.__esModule=!0},8225:e=>{e.exports=function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)},e.exports.default=e.exports,e.exports.__esModule=!0},8135:e=>{e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.default=e.exports,e.exports.__esModule=!0},9471:(e,t,n)=>{var r=n(8557);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}e.exports=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e},e.exports.default=e.exports,e.exports.__esModule=!0},9381:(e,t,n)=>{var r=n(2982),a=n(8225),i=n(5625),o=n(8135);e.exports=function(e){return r(e)||a(e)||i(e)||o()},e.exports.default=e.exports,e.exports.__esModule=!0},5625:(e,t,n)=>{var r=n(2591);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}},e.exports.default=e.exports,e.exports.__esModule=!0},53:(e,t)=>{"use strict";var n,r,a,i;if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,f=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},a=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,m=null,g=-1,_=5,y=0;t.unstable_shouldYield=function(){return t.unstable_now()>=y},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5};var b=new MessageChannel,E=b.port2;b.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();y=e+_;try{m(!0,e)?E.postMessage(null):(v=!1,m=null)}catch(e){throw E.postMessage(null),e}}else v=!1},n=function(e){m=e,v||(v=!0,E.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},a=function(){p(g),g=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<w(a,t)))break e;e[r]=t,e[n]=a,n=r}}function k(e){return void 0===(e=e[0])?null:e}function R(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var i=2*(r+1)-1,o=e[i],l=i+1,s=e[l];if(void 0!==o&&0>w(o,n))void 0!==s&&0>w(s,o)?(e[r]=s,e[l]=n,r=l):(e[r]=o,e[i]=n,r=i);else{if(!(void 0!==s&&0>w(s,n)))break e;e[r]=s,e[l]=n,r=l}}}return t}return null}function w(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var I=[],C=[],P=1,D=null,x=3,O=!1,T=!1,F=!1;function N(e){for(var t=k(C);null!==t;){if(null===t.callback)R(C);else{if(!(t.startTime<=e))break;R(C),t.sortIndex=t.expirationTime,S(I,t)}t=k(C)}}function A(e){if(F=!1,N(e),!T)if(null!==k(I))T=!0,n(L);else{var t=k(C);null!==t&&r(A,t.startTime-e)}}function L(e,n){T=!1,F&&(F=!1,a()),O=!0;var i=x;try{for(N(n),D=k(I);null!==D&&(!(D.expirationTime>n)||e&&!t.unstable_shouldYield());){var o=D.callback;if("function"==typeof o){D.callback=null,x=D.priorityLevel;var l=o(D.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?D.callback=l:D===k(I)&&R(I),N(n)}else R(I);D=k(I)}if(null!==D)var s=!0;else{var u=k(C);null!==u&&r(A,u.startTime-n),s=!1}return s}finally{D=null,x=i,O=!1}}var M=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){T||O||(T=!0,n(L))},t.unstable_getCurrentPriorityLevel=function(){return x},t.unstable_getFirstCallbackNode=function(){return k(I)},t.unstable_next=function(e){switch(x){case 1:case 2:case 3:var t=3;break;default:t=x}var n=x;x=t;try{return e()}finally{x=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=M,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=x;x=e;try{return t()}finally{x=n}},t.unstable_scheduleCallback=function(e,i,o){var l=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?l+o:l,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:P++,callback:i,priorityLevel:e,startTime:o,expirationTime:s=o+s,sortIndex:-1},o>l?(e.sortIndex=o,S(C,e),null===k(I)&&e===k(C)&&(F?a():F=!0,r(A,o-l))):(e.sortIndex=s,S(I,e),T||O||(T=!0,n(L))),e},t.unstable_wrapCallback=function(e){var t=x;return function(){var n=x;x=t;try{return e.apply(this,arguments)}finally{x=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=n(7294),t=n(3935),r=n(2578),a=n(4311);const i=new a.Environment({network:a.Network.create(((e,t)=>(async(e,t)=>{try{const n=await fetch("http://localhost:3000/graphql",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:e,variables:t})});return await n.json()}catch(e){return console.warn(e),null}})(e.text,t))),store:new a.Store(new a.RecordSource)});function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,o(e,t)}var s=n(5697),u=n.n(s);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function f(e){return"/"===e.charAt(0)}function d(e,t){for(var n=t,r=n+1,a=e.length;r<a;n+=1,r+=1)e[n]=e[r];e.pop()}const p=function(e,t){if(!e)throw new Error("Invariant failed")};function h(e){return"/"===e.charAt(0)?e:"/"+e}function v(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function m(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function g(e){var t=e.pathname,n=e.search,r=e.hash,a=t||"/";return n&&"?"!==n&&(a+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(a+="#"===r.charAt(0)?r:"#"+r),a}function _(e,t,n,r){var a;"string"==typeof e?(a=function(e){var t=e||"/",n="",r="",a=t.indexOf("#");-1!==a&&(r=t.substr(a),t=t.substr(0,a));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(a=c({},e)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(a.key=n),r?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],a=t&&t.split("/")||[],i=e&&f(e),o=t&&f(t),l=i||o;if(e&&f(e)?a=r:r.length&&(a.pop(),a=a.concat(r)),!a.length)return"/";if(a.length){var s=a[a.length-1];n="."===s||".."===s||""===s}else n=!1;for(var u=0,c=a.length;c>=0;c--){var p=a[c];"."===p?d(a,c):".."===p?(d(a,c),u++):u&&(d(a,c),u--)}if(!l)for(;u--;u)a.unshift("..");!l||""===a[0]||a[0]&&f(a[0])||a.unshift("");var h=a.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h}(a.pathname,r.pathname)):a.pathname=r.pathname:a.pathname||(a.pathname="/"),a}function y(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,a){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,a):a(!0):a(!1!==i)}else a(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var b=!("undefined"==typeof window||!window.document||!window.document.createElement);function E(e,t){t(window.confirm(e))}var S="popstate",k="hashchange";function R(){try{return window.history.state||{}}catch(e){return{}}}function w(e){void 0===e&&(e={}),b||p(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,a=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,o=i.forceRefresh,l=void 0!==o&&o,s=i.getUserConfirmation,u=void 0===s?E:s,f=i.keyLength,d=void 0===f?6:f,w=e.basename?m(h(e.basename)):"";function I(e){var t=e||{},n=t.key,r=t.state,a=window.location,i=a.pathname+a.search+a.hash;return w&&(i=v(i,w)),_(i,r,n)}function C(){return Math.random().toString(36).substr(2,d)}var P=y();function D(e){c(j,e),j.length=n.length,P.notifyListeners(j.location,j.action)}function x(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||F(I(e.state))}function O(){F(I(R()))}var T=!1;function F(e){T?(T=!1,D()):P.confirmTransitionTo(e,"POP",u,(function(t){t?D({action:"POP",location:e}):function(e){var t=j.location,n=A.indexOf(t.key);-1===n&&(n=0);var r=A.indexOf(e.key);-1===r&&(r=0);var a=n-r;a&&(T=!0,M(a))}(e)}))}var N=I(R()),A=[N.key];function L(e){return w+g(e)}function M(e){n.go(e)}var U=0;function q(e){1===(U+=e)&&1===e?(window.addEventListener(S,x),a&&window.addEventListener(k,O)):0===U&&(window.removeEventListener(S,x),a&&window.removeEventListener(k,O))}var z=!1,j={length:n.length,action:"POP",location:N,createHref:L,push:function(e,t){var a="PUSH",i=_(e,t,C(),j.location);P.confirmTransitionTo(i,a,u,(function(e){if(e){var t=L(i),o=i.key,s=i.state;if(r)if(n.pushState({key:o,state:s},null,t),l)window.location.href=t;else{var u=A.indexOf(j.location.key),c=A.slice(0,u+1);c.push(i.key),A=c,D({action:a,location:i})}else window.location.href=t}}))},replace:function(e,t){var a="REPLACE",i=_(e,t,C(),j.location);P.confirmTransitionTo(i,a,u,(function(e){if(e){var t=L(i),o=i.key,s=i.state;if(r)if(n.replaceState({key:o,state:s},null,t),l)window.location.replace(t);else{var u=A.indexOf(j.location.key);-1!==u&&(A[u]=i.key),D({action:a,location:i})}else window.location.replace(t)}}))},go:M,goBack:function(){M(-1)},goForward:function(){M(1)},block:function(e){void 0===e&&(e=!1);var t=P.setPrompt(e);return z||(q(1),z=!0),function(){return z&&(z=!1,q(-1)),t()}},listen:function(e){var t=P.appendListener(e);return q(1),function(){q(-1),t()}}};return j}var I=1073741823,C="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function P(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const D=e.createContext||function(t,n){var r,a,i,o="__create-react-context-"+((C[i="__global_unique_id__"]=(C[i]||0)+1)+"__"),s=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=P(t.props.value),t}l(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[o]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,a=e.value;((i=r)===(o=a)?0!==i||1/i==1/o:i!=i&&o!=o)?t=0:(t="function"==typeof n?n(r,a):I,0!=(t|=0)&&this.emitter.set(e.value,t))}var i,o},r.render=function(){return this.props.children},t}(e.Component);s.childContextTypes=((r={})[o]=u().object.isRequired,r);var c=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,n){0!=((0|t.observedBits)&n)&&t.setState({value:t.getValue()})},t}l(n,e);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?I:t},r.componentDidMount=function(){this.context[o]&&this.context[o].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?I:e},r.componentWillUnmount=function(){this.context[o]&&this.context[o].off(this.onUpdate)},r.getValue=function(){return this.context[o]?this.context[o].get():t},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(e.Component);return c.contextTypes=((a={})[o]=u().object,a),{Provider:s,Consumer:c}};var x=n(9658),O=n.n(x);function T(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n(9864),n(8679);var F=function(e){var t=D();return t.displayName="Router-History",t}(),N=function(e){var t=D();return t.displayName="Router",t}(),A=function(t){function n(e){var n;return(n=t.call(this,e)||this).state={location:e.history.location},n._isMounted=!1,n._pendingLocation=null,e.staticContext||(n.unlisten=e.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}l(n,t),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=n.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&this.unlisten()},r.render=function(){return e.createElement(N.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(F.Provider,{children:this.props.children||null,value:this.props.history}))},n}(e.Component);e.Component,e.Component;var L={},M=0;function U(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,a=n.exact,i=void 0!==a&&a,o=n.strict,l=void 0!==o&&o,s=n.sensitive,u=void 0!==s&&s;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=L[n]||(L[n]={});if(r[e])return r[e];var a=[],i={regexp:O()(e,a,t),keys:a};return M<1e4&&(r[e]=i,M++),i}(n,{end:i,strict:l,sensitive:u}),a=r.regexp,o=r.keys,s=a.exec(e);if(!s)return null;var c=s[0],f=s.slice(1),d=e===c;return i&&!d?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:d,params:o.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var q=function(t){function n(){return t.apply(this,arguments)||this}return l(n,t),n.prototype.render=function(){var t=this;return e.createElement(N.Consumer,null,(function(n){n||p(!1);var r=t.props.location||n.location,a=c({},n,{location:r,match:t.props.computedMatch?t.props.computedMatch:t.props.path?U(r.pathname,t.props):n.match}),i=t.props,o=i.children,l=i.component,s=i.render;return Array.isArray(o)&&0===o.length&&(o=null),e.createElement(N.Provider,{value:a},a.match?o?"function"==typeof o?o(a):o:l?e.createElement(l,a):s?s(a):null:"function"==typeof o?o(a):null)}))},n}(e.Component);e.Component;var z=function(t){function n(){return t.apply(this,arguments)||this}return l(n,t),n.prototype.render=function(){var t=this;return e.createElement(N.Consumer,null,(function(n){n||p(!1);var r,a,i=t.props.location||n.location;return e.Children.forEach(t.props.children,(function(t){if(null==a&&e.isValidElement(t)){r=t;var o=t.props.path||t.props.from;a=o?U(i.pathname,c({},t.props,{path:o})):n.match}})),a?e.cloneElement(r,{location:i,computedMatch:a}):null}))},n}(e.Component),j=e.useContext;var V=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return(e=t.call.apply(t,[this].concat(r))||this).history=w(e.props),e}return l(n,t),n.prototype.render=function(){return e.createElement(A,{history:this.history,children:this.props.children})},n}(e.Component);e.Component;var Q=function(e,t){return"function"==typeof e?e(t):e},K=function(e,t){return"string"==typeof e?_(e,null,null,t):e},B=function(e){return e},H=e.forwardRef;void 0===H&&(H=B);var W=H((function(t,n){var r=t.innerRef,a=t.navigate,i=t.onClick,o=T(t,["innerRef","navigate","onClick"]),l=o.target,s=c({},o,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),a())}});return s.ref=B!==H&&n||r,e.createElement("a",s)})),Y=H((function(t,n){var r=t.component,a=void 0===r?W:r,i=t.replace,o=t.to,l=t.innerRef,s=T(t,["component","replace","to","innerRef"]);return e.createElement(N.Consumer,null,(function(t){t||p(!1);var r=t.history,u=K(Q(o,t.location),t.location),f=u?r.createHref(u):"",d=c({},s,{href:f,navigate:function(){var e=Q(o,t.location);(i?r.replace:r.push)(e)}});return B!==H?d.ref=n||l:d.innerRef=l,e.createElement(a,d)}))})),G=function(e){return e},$=e.forwardRef;void 0===$&&($=G),$((function(t,n){var r=t["aria-current"],a=void 0===r?"page":r,i=t.activeClassName,o=void 0===i?"active":i,l=t.activeStyle,s=t.className,u=t.exact,f=t.isActive,d=t.location,h=t.sensitive,v=t.strict,m=t.style,g=t.to,_=t.innerRef,y=T(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(N.Consumer,null,(function(t){t||p(!1);var r=d||t.location,i=K(Q(g,r),r),b=i.pathname,E=b&&b.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),S=E?U(r.pathname,{path:E,exact:u,sensitive:h,strict:v}):null,k=!!(f?f(S,r):S),R=k?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(s,o):s,w=k?c({},m,{},l):m,I=c({"aria-current":k&&a||null,className:R,style:w,to:i},y);return G!==$?I.ref=n||_:I.innerRef=_,e.createElement(Y,I)}))}));const X="MISSING_ENV_VAR".APP_DOMAIN||"http://localhost:8080",J=X,Z=()=>{const t=`https://github.com/login/oauth/authorize?client_id=${"MISSING_ENV_VAR".GITHUB_OAUTH_CLIENT_ID}&redirect_uri=${X}/oauth`;return e.createElement("a",{href:t,onClick:e=>{e.preventDefault(),window.open(t)}},"Login")},ee=()=>((0,e.useEffect)((()=>{const e=e=>{if(e.origin!==J)return;const{accessToken:t}=e.data;t&&localStorage.setItem("accessToken",t)};return window.addEventListener("message",e,!1),()=>window.removeEventListener("message",e,!1)}),[]),e.createElement(Z,null));var te;const ne=(re=()=>{const{search:t}=j(N).location,a=new URLSearchParams(t).get("code")||"",i=(0,r.useLazyLoadQuery)(void 0!==te?te:te=n(6692),{code:a});return(0,e.useEffect)((()=>{var e;const{accessToken:t}=i.login;null===(e=window.opener)||void 0===e||e.postMessage({accessToken:t},J),window.close()}),[]),null},ae=()=>e.createElement("div",null,"로딩중..."),()=>e.createElement(e.Suspense,{fallback:e.createElement(ae,null)},e.createElement(re,null)));var re,ae,ie;const oe=(0,r.createFragmentContainer)((({question:t})=>e.createElement("section",null,e.createElement("h2",null,"문제 #",t.id),e.createElement("p",null,"제목:",t.title),e.createElement("p",null,"내용:",t.content))),{question:void 0!==ie?ie:ie=n(4653)});var le;const se=(t=>()=>(console.log("example HOC called"),e.createElement(t,null)))((()=>e.createElement(r.QueryRenderer,{environment:i,query:void 0!==le?le:le=n(8071),variables:{},render:({error:t,props:n})=>n?t?e.createElement("div",null,"...에러발생"):e.createElement("div",null,n.allQuestions.map((t=>e.createElement(oe,{question:t})))):e.createElement("div",null,"...로딩중")})));var ue;const ce=(0,r.createFragmentContainer)((({comment:t})=>e.createElement("section",null,e.createElement("div",null,"유저 :"," ",t.userEmail),e.createElement("div",null,t.content),e.createElement("div",null,"좋아요 :"," ",t.like),e.createElement("div",null,"싫어요 :"," ",t.dislike))),{comment:void 0!==ue?ue:ue=n(3563)});var fe;const de=({error:t,props:n})=>n?t?e.createElement("div",null,"...에러발생"):e.createElement("section",null,e.createElement("h2",null,"댓글"),0===n.comments.length?e.createElement("p",null,"댓글이 없습니다"):e.createElement("ol",null,n.comments.map((t=>e.createElement("li",{key:t.id},e.createElement(ce,{comment:t})))))):e.createElement("div",null,"...로딩중"),pe=()=>e.createElement(r.QueryRenderer,{environment:i,query:void 0!==fe?fe:fe=n(3649),variables:{questionId:1},render:de});var he,ve=n(7912);const me=void 0!==he?he:he=n(5128),ge=({bookmarksQueryRef:t})=>{const n=(0,ve.usePreloadedQuery)(me,t),{bookmarks:r}=n;return e.createElement("ul",null,r.map((t=>e.createElement("li",{key:t.id},e.createElement("p",null,`Q) ${t.question.content}`)))))},_e=()=>{const[t,n,r]=(0,ve.useQueryLoader)(me);return(0,e.useEffect)((()=>(n({userId:4}),()=>{r()})),[n,r]),null===t?null:e.createElement(e.Suspense,{fallback:e.createElement("p",null,"bookmarkloading")},e.createElement(ge,{bookmarksQueryRef:t}))},ye=()=>e.createElement(V,null,e.createElement(z,null,e.createElement(q,{exact:!0,path:"/",component:se}),e.createElement(q,{exact:!0,path:"/comment",component:pe}),e.createElement(q,{path:"/login",component:ee}),e.createElement(q,{path:"/oauth",component:ne}),e.createElement(q,{path:"/bookmarks",component:_e}))),be=document.querySelector("#root");t.render(e.createElement(r.RelayEnvironmentProvider,{environment:i},e.createElement(ye,null)),be)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vc3JjL19fZ2VuZXJhdGVkX18vQm9va21hcmtzUGFnZVF1ZXJ5LmdyYXBocWwudHMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL3NyYy9fX2dlbmVyYXRlZF9fL0NvbW1lbnRQYWdlUXVlcnkuZ3JhcGhxbC50cyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vc3JjL19fZ2VuZXJhdGVkX18vQ29tbWVudF9jb21tZW50LmdyYXBocWwudHMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL3NyYy9fX2dlbmVyYXRlZF9fL0V4YW1wbGVQYWdlUXVlcnkuZ3JhcGhxbC50cyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vc3JjL19fZ2VuZXJhdGVkX18vTG9naW5DYWxsYmFja1BhZ2VRdWVyeS5ncmFwaHFsLnRzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9zcmMvX19nZW5lcmF0ZWRfXy9RdWVzdGlvbl9xdWVzdGlvbi5ncmFwaHFsLnRzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvYXJlRXF1YWwuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvd2FybmluZy5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L1JlYWN0UmVsYXlDb250ZXh0LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvaG9va3MuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9SZWFjdFJlbGF5Q29udGFpbmVyVXRpbHMuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvUmVhY3RSZWxheUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvUmVhY3RSZWxheUZyYWdtZW50Q29udGFpbmVyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL1JlYWN0UmVsYXlMb2NhbFF1ZXJ5UmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9SZWFjdFJlbGF5UXVlcnlSZW5kZXJlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9SZWFjdFJlbGF5UXVlcnlSZW5kZXJlckNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvUmVhY3RSZWxheVJlZmV0Y2hDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvUmVsYXlDb250ZXh0LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL2Fzc2VydEZyYWdtZW50TWFwLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL2J1aWxkUmVhY3RSZWxheUNvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9nZXRSb290VmFyaWFibGVzRm9yRnJhZ21lbnRzLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL2hvb2tzLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL2luZGV4LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL2lzUmVsYXlFbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWFkQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy9FbnRyeVBvaW50Q29udGFpbmVyLnJlYWN0LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL0ZyYWdtZW50UmVzb3VyY2UuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvTFJVQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvUHJvZmlsZXJDb250ZXh0LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL1F1ZXJ5UmVzb3VyY2UuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvUmVsYXlFbnZpcm9ubWVudFByb3ZpZGVyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL2dldFBhZ2luYXRpb25NZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy9nZXRQYWdpbmF0aW9uVmFyaWFibGVzLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL2dldFJlZmV0Y2hNZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy9nZXRWYWx1ZUF0UGF0aC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy9sb2FkRW50cnlQb2ludC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy9sb2FkUXVlcnkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvdXNlRW50cnlQb2ludExvYWRlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy91c2VGZXRjaFRyYWNraW5nUmVmLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZUZyYWdtZW50LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZUZyYWdtZW50Tm9kZS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy91c2VJc01vdW50ZWRSZWYuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvdXNlSXNPcGVyYXRpb25Ob2RlQWN0aXZlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZUxhenlMb2FkUXVlcnkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvdXNlTGF6eUxvYWRRdWVyeU5vZGUuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvdXNlTG9hZE1vcmVGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy91c2VNZW1vT3BlcmF0aW9uRGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy91c2VNZW1vVmFyaWFibGVzLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZU11dGF0aW9uLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZVBhZ2luYXRpb25GcmFnbWVudC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy91c2VQcmVsb2FkZWRRdWVyeS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy91c2VRdWVyeUxvYWRlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy91c2VSZWZldGNoYWJsZUZyYWdtZW50LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZVJlZmV0Y2hhYmxlRnJhZ21lbnROb2RlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZVJlbGF5RW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9saWIvcmVsYXktaG9va3MvdXNlU3RhdGljRnJhZ21lbnROb2RlV2FybmluZy5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L2xpYi9yZWxheS1ob29rcy91c2VTdWJzY3JpYmVUb0ludmFsaWRhdGlvblN0YXRlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbGliL3JlbGF5LWhvb2tzL3VzZVN1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlbGF5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVsYXkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWxheS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9oYW5kbGVycy9SZWxheURlZmF1bHRIYW5kbGVyUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9oYW5kbGVycy9jb25uZWN0aW9uL0Nvbm5lY3Rpb25IYW5kbGVyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvaGFuZGxlcnMvY29ubmVjdGlvbi9Db25uZWN0aW9uSW50ZXJmYWNlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvaGFuZGxlcnMvY29ubmVjdGlvbi9NdXRhdGlvbkhhbmRsZXJzLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9tdXRhdGlvbnMvUmVsYXlEZWNsYXJhdGl2ZU11dGF0aW9uQ29uZmlnLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvbXV0YXRpb25zL1JlbGF5UmVjb3JkUHJveHkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9tdXRhdGlvbnMvUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvbXV0YXRpb25zL1JlbGF5UmVjb3JkU291cmNlUHJveHkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9tdXRhdGlvbnMvUmVsYXlSZWNvcmRTb3VyY2VTZWxlY3RvclByb3h5LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvbXV0YXRpb25zL2FwcGx5T3B0aW1pc3RpY011dGF0aW9uLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvbXV0YXRpb25zL2NvbW1pdExvY2FsVXBkYXRlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvbXV0YXRpb25zL2NvbW1pdE11dGF0aW9uLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvbXV0YXRpb25zL3ZhbGlkYXRlTXV0YXRpb24uanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9uZXR3b3JrL0NvbnZlcnRUb0V4ZWN1dGVGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL25ldHdvcmsvUmVsYXlOZXR3b3JrLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvbmV0d29yay9SZWxheU9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9uZXR3b3JrL1JlbGF5UXVlcnlSZXNwb25zZUNhY2hlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvcXVlcnkvR3JhcGhRTFRhZy5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3F1ZXJ5L1ByZWxvYWRhYmxlUXVlcnlSZWdpc3RyeS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3F1ZXJ5L2ZldGNoUXVlcnkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9xdWVyeS9mZXRjaFF1ZXJ5SW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9xdWVyeS9mZXRjaFF1ZXJ5X0RFUFJFQ0FURUQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9DbGllbnRJRC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL0RhdGFDaGVja2VyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvT3BlcmF0aW9uRXhlY3V0b3IuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheUNvbmNyZXRlVmFyaWFibGVzLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvUmVsYXlNb2Rlcm5FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1JlbGF5TW9kZXJuRnJhZ21lbnRTcGVjUmVzb2x2ZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheU1vZGVybk9wZXJhdGlvbkRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheU1vZGVyblJlY29yZC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1JlbGF5TW9kZXJuU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheU1vZGVyblN0b3JlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvUmVsYXlPcGVyYXRpb25UcmFja2VyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvUmVsYXlPcHRpbWlzdGljUmVjb3JkU291cmNlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvUmVsYXlQdWJsaXNoUXVldWUuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheVJlYWRlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1JlbGF5UmVjb3JkU291cmNlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvUmVsYXlSZWNvcmRTb3VyY2VNYXBJbXBsLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvUmVsYXlSZWNvcmRTdGF0ZS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1JlbGF5UmVmZXJlbmNlTWFya2VyLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheVN0b3JlUmVhY3RGbGlnaHRVdGlscy5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1JlbGF5U3RvcmVTdWJzY3JpcHRpb25zLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnNVc2luZ01hcEJ5SUQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZWxheVN0b3JlVXRpbHMuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9SZXNvbHZlckZyYWdtZW50cy5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1R5cGVJRC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL1ZpZXdlclBhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9jbG9uZVJlbGF5SGFuZGxlU291cmNlRmllbGQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9jbG9uZVJlbGF5U2NhbGFySGFuZGxlU291cmNlRmllbGQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9jcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL2NyZWF0ZVJlbGF5Q29udGV4dC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL2RlZmF1bHRHZXREYXRhSUQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdG9yZS9kZWZhdWx0UmVxdWlyZWRGaWVsZExvZ2dlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3N0b3JlL2hhc092ZXJsYXBwaW5nSURzLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvaXNSZWxheU1vZGVybkVudmlyb25tZW50LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvc3RvcmUvcmVhZElubGluZURhdGEuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi9zdWJzY3JpcHRpb24vcmVxdWVzdFN1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvUmVsYXlDb25jcmV0ZU5vZGUuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi91dGlsL1JlbGF5RGVmYXVsdEhhbmRsZUtleS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvUmVsYXlFcnJvci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvUmVsYXlGZWF0dXJlRmxhZ3MuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi91dGlsL1JlbGF5UHJvZmlsZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi91dGlsL1JlbGF5UmVwbGF5U3ViamVjdC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvY3JlYXRlUGF5bG9hZEZvcjNERmllbGQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi91dGlsL2RlZXBGcmVlemUuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi91dGlsL2dlbmVyYXRlSUQuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi91dGlsL2dldEZyYWdtZW50SWRlbnRpZmllci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvZ2V0T3BlcmF0aW9uLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvdXRpbC9nZXRSZWxheUhhbmRsZUtleS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvZ2V0UmVxdWVzdElkZW50aWZpZXIuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi91dGlsL2lzRW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL2xpYi91dGlsL2lzUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvaXNTY2FsYXJBbmRFcXVhbC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvcmVjeWNsZU5vZGVzSW50by5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbGliL3V0aWwvcmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvdXRpbC9yZXNvbHZlSW1tZWRpYXRlLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9saWIvdXRpbC9zdGFibGVDb3B5LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvcmVsYXktcnVudGltZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMi5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlbGF5LXJ1bnRpbWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWxheS1ydW50aW1lL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2Rldi1hbnN3ZXIvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9zcmMvZ3JhcGhxbC9pbmRleC50cyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2VzbS9yZXNvbHZlLXBhdGhuYW1lLmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXNtL3JlYWN0LXJvdXRlci5qcyIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL3NyYy9jb25zdGFudHMvZG9tYWluLnRzIiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9zcmMvY29tcG9uZW50cy9Mb2dpbi9HaXRIdWJPQXV0aEFuY2hvci50c3giLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL3NyYy9wYWdlL0xvZ2luUGFnZS50c3giLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL3NyYy9wYWdlL0xvZ2luQ2FsbGJhY2tQYWdlLnRzeCIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vc3JjL2hvY3Mvd2l0aFN1c3BlbnNlLnRzeCIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vc3JjL2NvbXBvbmVudHMvRXhhbXBsZS9RdWVzdGlvbi50c3giLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL3NyYy9wYWdlL0V4YW1wbGVQYWdlLnRzeCIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vc3JjL2hvY3Mvd2l0aEV4YW1wbGUudHN4Iiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9zcmMvY29tcG9uZW50cy9FeGFtcGxlL0NvbW1lbnQudHN4Iiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9zcmMvcGFnZS9Db21tZW50UGFnZS50c3giLCJ3ZWJwYWNrOi8vZGV2LWFuc3dlci8uL3NyYy9wYWdlL0Jvb2ttYXJrc1BhZ2UudHN4Iiwid2VicGFjazovL2Rldi1hbnN3ZXIvLi9zcmMvQXBwLnRzeCIsIndlYnBhY2s6Ly9kZXYtYW5zd2VyLy4vc3JjL2luZGV4LnRzeCJdLCJuYW1lcyI6WyJub2RlIiwidjAiLCJ2MSIsInYyIiwidjMiLCJoYXNoIiwiYVN0YWNrUG9vbCIsImJTdGFja1Bvb2wiLCJlcSIsImEiLCJiIiwiYVN0YWNrIiwiYlN0YWNrIiwib2JqVG9TdHIiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNsYXNzTmFtZSIsImNhbGwiLCJTdHJpbmciLCJpc05hTiIsIk51bWJlciIsInNvdXJjZSIsImdsb2JhbCIsIm11bHRpbGluZSIsImlnbm9yZUNhc2UiLCJsZW5ndGgiLCJwdXNoIiwic2l6ZSIsImNvbnN0cnVjdG9yIiwiaGFzT3duUHJvcGVydHkiLCJ2YWx1ZU9mIiwia2V5cyIsImkiLCJwb3AiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVzdWx0IiwibWFrZUVtcHR5RnVuY3Rpb24iLCJhcmciLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJ3YXJuaW5nIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsIm5hbWUiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcmd1bWVudHMiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwiY29uY2F0IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJrZXkiLCJkZXNjcmlwdG9yIiwiZSIsImNvbmRpdGlvbiIsImZvcm1hdCIsImMiLCJkIiwiZiIsImVycm9yIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJhcmdzIiwiYXJnSW5kZXgiLCJyZXBsYWNlIiwiZnJhbWVzVG9Qb3AiLCJBcnJheSIsImlzQXJyYXkiLCJhcnIiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsIlR5cGVFcnJvciIsImFzc2lnbiIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJtYXAiLCJuIiwiam9pbiIsInRlc3QzIiwic3BsaXQiLCJmb3JFYWNoIiwibGV0dGVyIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwidGFyZ2V0IiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsInMiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYm9vbCIsImZ1bmMiLCJudW1iZXIiLCJvYmplY3QiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudCIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhYSIsIm0iLCJyIiwieSIsImVuY29kZVVSSUNvbXBvbmVudCIsImJhIiwiU2V0IiwiY2EiLCJkYSIsImVhIiwiYWRkIiwiZmEiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJoYSIsImlhIiwiamEiLCJrYSIsIkIiLCJnIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJEIiwidG9Mb3dlckNhc2UiLCJvYSIsInBhIiwidG9VcHBlckNhc2UiLCJxYSIsInNsaWNlIiwibWEiLCJuYSIsInRlc3QiLCJsYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwicmEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInNhIiwidGEiLCJ1YSIsIndhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJTeW1ib2wiLCJmb3IiLCJFIiwiTWEiLCJLYSIsIml0ZXJhdG9yIiwiTGEiLCJOYSIsInN0YWNrIiwidHJpbSIsIm1hdGNoIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwic2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImsiLCJoIiwiUWEiLCJ0YWciLCJfcmVuZGVyIiwiUmEiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImdldCIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJ2YWx1ZSIsIlhhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJvd25lckRvY3VtZW50IiwiZWIiLCJjaGlsZHJlbiIsIkNoaWxkcmVuIiwiZGIiLCJmYiIsIm9wdGlvbnMiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsInBiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJxYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicmIiLCJzYiIsInRiIiwic3R5bGUiLCJpbmRleE9mIiwic2V0UHJvcGVydHkiLCJjaGFyQXQiLCJzdWJzdHJpbmciLCJ1YiIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInZiIiwid2IiLCJpcyIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk9iIiwiUGIiLCJRYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiUmIiLCJsIiwiYXBwbHkiLCJvbkVycm9yIiwiU2IiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCJmbGFncyIsIiRiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJhYyIsImNjIiwiY2hpbGQiLCJzaWJsaW5nIiwiY3VycmVudCIsImJjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwibWMiLCJuYyIsIk1hcCIsIm9jIiwicGMiLCJxYyIsInJjIiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0Q29udGFpbmVycyIsInNjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwidGMiLCJ2YyIsIndjIiwibGFuZVByaW9yaXR5IiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiY29udGFpbmVySW5mbyIsInhjIiwieWMiLCJzaGlmdCIsInpjIiwiQWMiLCJCYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkNjIiwiRGMiLCJFYyIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIkZjIiwiR2MiLCJIYyIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJ1bnN0YWJsZV9ub3ciLCJGIiwiUmMiLCJVYyIsInBlbmRpbmdMYW5lcyIsImV4cGlyZWRMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJWYyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJldmVudFRpbWVzIiwiTWF0aCIsImNsejMyIiwiYmQiLCJjZCIsImxvZyIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImlkIiwiYmluZCIsInVjIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsInZpZXciLCJkZXRhaWwiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkpkIiwiY2xpcGJvYXJkRGF0YSIsIkxkIiwiZGF0YSIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUmQiLCJjb2RlIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWmQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ1cmwiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwiZXZlbnQiLCJsaXN0ZW5lcnMiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwib25pbnB1dCIsIkFlIiwiZGV0YWNoRXZlbnQiLCJCZSIsIkNlIiwiYXR0YWNoRXZlbnQiLCJEZSIsIkVlIiwiRmUiLCJIZSIsIkllIiwiSmUiLCJLZSIsIkxlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJNZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJPZSIsImNvbnRlbnRFZGl0YWJsZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCJZYiIsImluc3RhbmNlIiwibGlzdGVuZXIiLCJHIiwiJGUiLCJoYXMiLCJhZiIsImJmIiwicmFuZG9tIiwiY2YiLCJkZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwiTmIiLCJ4IiwidyIsInoiLCJ1IiwicSIsInQiLCJ2IiwiZWYiLCJmZiIsInBhcmVudFdpbmRvdyIsImdmIiwiaGYiLCJKIiwiSyIsIlEiLCJMIiwiamUiLCJjaGFyIiwia2UiLCJ1bnNoaWZ0IiwiamYiLCJrZiIsImxmIiwibWYiLCJhdXRvRm9jdXMiLCJuZiIsIl9faHRtbCIsIm9mIiwic2V0VGltZW91dCIsInBmIiwiY2xlYXJUaW1lb3V0IiwicWYiLCJyZiIsInNmIiwicHJldmlvdXNTaWJsaW5nIiwidGYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkgiLCJJIiwiQ2YiLCJNIiwiTiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIlFmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJSZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlNmIiwiVGYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlVmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJWZiIsIldmIiwiWGYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIllmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiTyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsIl9jdXJyZW50VmFsdWUiLCJzZyIsImNoaWxkTGFuZXMiLCJ0ZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwidWciLCJ2ZyIsImNvbnRleHQiLCJvYnNlcnZlZEJpdHMiLCJuZXh0IiwicmVzcG9uZGVycyIsIndnIiwieGciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ5ZyIsInpnIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJjYWxsYmFjayIsIkFnIiwiQmciLCJDZyIsIkEiLCJwIiwiQyIsIkRnIiwiRWciLCJGZyIsIkNvbXBvbmVudCIsInJlZnMiLCJHZyIsIktnIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiSGciLCJJZyIsIkpnIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIkxnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJNZyIsInN0YXRlIiwidXBkYXRlciIsIk5nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiT2ciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIlBnIiwiUWciLCJyZWYiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwiUmciLCJTZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJpbmRleCIsIlRnIiwiVWciLCJtb2RlIiwiVmciLCJpbXBsZW1lbnRhdGlvbiIsIldnIiwiWGciLCJkb25lIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJmaCIsImdoIiwiaGgiLCJQIiwiaWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwZW5kaW5nUHJvcHMiLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsInZoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIndoIiwieGgiLCJSIiwiUyIsIlQiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiSWgiLCJKaCIsIktoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiTGgiLCJNaCIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsIm11dGFibGVSZWFkTGFuZXMiLCJOaCIsIlUiLCJ1c2VTdGF0ZSIsImdldFNuYXBzaG90Iiwic3Vic2NyaWJlIiwidXNlRWZmZWN0Iiwic2V0U25hcHNob3QiLCJPaCIsIlBoIiwiUWgiLCJSaCIsImNyZWF0ZSIsImRlc3Ryb3kiLCJkZXBzIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VPcGFxdWVJZGVudGlmaWVyIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwidWYiLCJlaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJtaSIsImJhc2VMYW5lcyIsIm5pIiwib2kiLCJwaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInFpIiwicmkiLCJwZW5kaW5nQ29udGV4dCIsIkJpIiwiRGkiLCJFaSIsInNpIiwicmV0cnlMYW5lIiwidGkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwidWkiLCJ1bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsTW9kZSIsIkFpIiwiRmkiLCJHaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwiViIsIkhpIiwiSWkiLCJXIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJtZXNzYWdlIiwiTmkiLCJjb25zb2xlIiwiT2kiLCJXZWFrTWFwIiwiUGkiLCJRaSIsIlJpIiwiU2kiLCJjb21wb25lbnREaWRDYXRjaCIsIlRpIiwiY29tcG9uZW50U3RhY2siLCJVaSIsIldlYWtTZXQiLCJWaSIsIldpIiwiWGkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIllpIiwiWmkiLCIkaSIsImZvY3VzIiwiYWoiLCJkaXNwbGF5IiwiYmoiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsImhqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImlqIiwiamoiLCJraiIsImxqIiwidGhlbiIsIm1qIiwibmoiLCJjZWlsIiwib2oiLCJwaiIsIlgiLCJZIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwiSW5maW5pdHkiLCJ3aiIsImNrIiwiWiIsInhqIiwieWoiLCJ6aiIsIkFqIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJJaiIsIkpqIiwiU2MiLCJLaiIsIkxqIiwiTWoiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJjYWxsYmFja1ByaW9yaXR5IiwiVGMiLCJOaiIsIk9qIiwiUGoiLCJRaiIsIlJqIiwiU2oiLCJUaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJVaiIsInRpbWVvdXRIYW5kbGUiLCJXaiIsIlhqIiwicGluZ0NhY2hlIiwiWWoiLCJaaiIsInZhIiwiYWsiLCJiayIsImRrIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJlayIsIm1pbiIsImV4dGVuZCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwib25Db21taXRGaWJlclJvb3QiLCJmayIsImdrIiwiaWsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiamsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwia2siLCJsayIsIm1rIiwibmsiLCJvayIsInFrIiwiaHlkcmF0aW9uT3B0aW9ucyIsIm11dGFibGVTb3VyY2VzIiwiX2ludGVybmFsUm9vdCIsInJrIiwidGsiLCJoYXNBdHRyaWJ1dGUiLCJzayIsInVrIiwiaGsiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJ1bm1vdW50IiwicXVlcnlTZWxlY3RvckFsbCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb3JtIiwiVmoiLCJ2ayIsIkV2ZW50cyIsIndrIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwieWsiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZyYWdtZW50IiwiTGF6eSIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwiZ2V0Q29tcG9uZW50TmFtZSIsImdldENvbnRhaW5lck5hbWUiLCJSZWFjdCIsImNyZWF0ZVJlbGF5Q29udGV4dCIsIl9faW50ZXJuYWwiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX29iamVjdFNwcmVhZDIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiIsIl9pbmhlcml0c0xvb3NlMiIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJhcmVFcXVhbCIsImJ1aWxkUmVhY3RSZWxheUNvbnRhaW5lciIsImFzc2VydFJlbGF5Q29udGV4dCIsIl9yZXF1aXJlMyIsImNyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyIiwiZ2V0RGF0YUlEc0Zyb21PYmplY3QiLCJpc1NjYWxhckFuZEVxdWFsIiwiY3JlYXRlQ29udGFpbmVyV2l0aEZyYWdtZW50cyIsImZyYWdtZW50cyIsIl9jbGFzcyIsIl90ZW1wIiwiY29udGFpbmVyTmFtZSIsIl9SZWFjdCRDb21wb25lbnQiLCJfcHJvcHMkX19yb290SXNRdWVyeVIiLCJfdGhpcyIsInJlc29sdmVyRnJvbVRoaXNVcGRhdGUiLCJyZXNvbHZlciIsInNldFN0YXRlIiwidXBkYXRlZFN0YXRlIiwicmVzb2x2ZSIsInJlbGF5UHJvcCIsImdldFJlbGF5UHJvcCIsImVudmlyb25tZW50IiwicmVsYXlDb250ZXh0IiwiX19yZWxheUNvbnRleHQiLCJyb290SXNRdWVyeVJlbmRlcmVyIiwiX19yb290SXNRdWVyeVJlbmRlcmVyIiwicHJldlByb3BzIiwicHJldlByb3BzQ29udGV4dCIsIm5leHRQcm9wcyIsInByZXZTdGF0ZSIsIl9uZXh0UHJvcHMkX19yb290SXNRdSIsInByZXZJRHMiLCJuZXh0SURzIiwic2V0UHJvcHMiLCJfcHJvdG8iLCJfc3Vic2NyaWJlVG9OZXdSZXNvbHZlciIsIl9yZXJlbmRlcklmU3RvcmVIYXNDaGFuZ2VkIiwiZGlzcG9zZSIsIm5leHRTdGF0ZSIsIl9rZXkiLCJfdGhpcyRzdGF0ZSIsIm1heWJlTmV3RGF0YSIsInNldENhbGxiYWNrIiwiX2hhbmRsZUZyYWdtZW50RGF0YVVwZGF0ZSIsIl90aGlzJHByb3BzIiwiY29tcG9uZW50UmVmIiwicmVsYXkiLCJjcmVhdGVDb250YWluZXIiLCJmcmFnbWVudFNwZWMiLCJSZWFjdFJlbGF5Q29udGV4dCIsIlJlYWN0UmVsYXlRdWVyeVJlbmRlcmVyQ29udGV4dCIsIl9yZXF1aXJlIiwiY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvciIsImdldFJlcXVlc3QiLCJkZWVwRnJlZXplIiwicXVlcnlSZW5kZXJlckNvbnRleHQiLCJsYXRlc3RWYWx1ZSIsInF1ZXJ5IiwidmFyaWFibGVzIiwibGF0ZXN0VmFyaWFibGVzIiwib3BlcmF0aW9uIiwicmVxdWVzdCIsImRhdGFSZWYiLCJmb3JjZVVwZGF0ZSIsImNsZWFudXBGblJlZiIsInNuYXBzaG90IiwiY2hlY2siLCJyZXMiLCJsb29rdXAiLCJmcmFnbWVudCIsInJldGFpbkRpc3Bvc2FibGUiLCJyZXRhaW4iLCJzdWJzY3JpYmVEaXNwb3NhYmxlIiwibmV3U25hcHNob3QiLCJkaXNwb3NlZCIsImNsZWFudXBGbiIsIlByb3ZpZGVyIiwiX2V4dGVuZHMyIiwiX29iamVjdFNwcmVhZDMiLCJSZWFjdFJlbGF5UXVlcnlGZXRjaGVyIiwiZ2V0Um9vdFZhcmlhYmxlc0ZvckZyYWdtZW50cyIsImludmFyaWFudCIsIkNvbm5lY3Rpb25JbnRlcmZhY2UiLCJPYnNlcnZhYmxlIiwiZ2V0VmFyaWFibGVzRnJvbU9iamVjdCIsImdldFNlbGVjdG9yIiwiRk9SV0FSRCIsInRvT2JzZXJ2ZXIiLCJvYnNlcnZlck9yQ2FsbGJhY2siLCJjb21wbGV0ZSIsInVuc3Vic2NyaWJlIiwic3Vic2NyaXB0aW9uIiwiY29ubmVjdGlvbkNvbmZpZyIsIkNvbXBvbmVudENsYXNzIiwibWV0YWRhdGEiLCJmb3VuZENvbm5lY3Rpb25NZXRhZGF0YSIsImlzUmVsYXlNb2Rlcm4iLCJmcmFnbWVudE5hbWUiLCJjb25uZWN0aW9uTWV0YWRhdGEiLCJjb25uZWN0aW9uIiwiZmluZENvbm5lY3Rpb25NZXRhZGF0YSIsImdldENvbm5lY3Rpb25Gcm9tUHJvcHMiLCJwYXRoIiwiY3JlYXRlR2V0Q29ubmVjdGlvbkZyb21Qcm9wcyIsImRpcmVjdGlvbiIsImdldEZyYWdtZW50VmFyaWFibGVzIiwiY291bnRWYXJpYWJsZSIsImNvdW50IiwicHJldlZhcnMiLCJ0b3RhbENvdW50IiwiY3JlYXRlR2V0RnJhZ21lbnRWYXJpYWJsZXMiLCJfcmVzb2x2ZXIiLCJjb25uZWN0aW9uRGF0YSIsIl9nZXRDb25uZWN0aW9uRGF0YSIsImhhc01vcmUiLCJjdXJzb3IiLCJfcmVmZXRjaFN1YnNjcmlwdGlvbiIsInJlZmV0Y2hWYXJpYWJsZXMiLCJfY2FuRmV0Y2hQYWdlIiwiX3JlZmV0Y2hWYXJpYWJsZXMiLCJwYWdpbmF0aW5nVmFyaWFibGVzIiwiX2ZldGNoUGFnZSIsImZvcmNlIiwicGFnZVNpemUiLCJvYnNlcnZlciIsInNpbmsiLCJlZGdlQ291bnQiLCJfcmVmZXRjaENvbm5lY3Rpb24iLCJfQ29ubmVjdGlvbkludGVyZmFjZSQiLCJFTkRfQ1VSU09SIiwiU1RBUlRfQ1VSU09SIiwiX2lzQVJlcXVlc3RJbkZsaWdodCIsInByZXZDb250ZXh0IiwiY29udGV4dEZvckNoaWxkcmVuIiwiX2J1aWxkUmVsYXlQcm9wIiwiX2lzVW5tb3VudGVkIiwiX2hhc0ZldGNoZWQiLCJwcmV2Um9vdFZhcmlhYmxlcyIsIm5leHRSb290VmFyaWFibGVzIiwiX2NsZWFudXAiLCJfaGFzTW9yZSIsImlzTG9hZGluZyIsIl9pc0xvYWRpbmciLCJsb2FkTW9yZSIsIl9sb2FkTW9yZSIsInJlZmV0Y2hDb25uZWN0aW9uIiwicmVzdFByb3BzIiwiX0Nvbm5lY3Rpb25JbnRlcmZhY2UkMiIsIkVER0VTIiwiUEFHRV9JTkZPIiwiSEFTX05FWFRfUEFHRSIsIkhBU19QUkVWX1BBR0UiLCJlZGdlcyIsInBhZ2VJbmZvIiwiX2dldFF1ZXJ5RmV0Y2hlciIsIl9xdWVyeUZldGNoZXIiLCJtZXRob2QiLCJmcmFnbWVudFZhcmlhYmxlcyIsIl90aGlzMiIsIl90aGlzJHByb3BzMiIsInJvb3RWYXJpYWJsZXMiLCJmZXRjaFZhcmlhYmxlcyIsImdldFZhcmlhYmxlcyIsImNhY2hlQ29uZmlnIiwicmVmZXRjaFN1YnNjcmlwdGlvbiIsImNsZWFudXAiLCJleGVjdXRlIiwicHJlc2VydmVQcmV2aW91c1JlZmVyZW5jZXMiLCJtZXJnZU1hcCIsInByZXZEYXRhIiwic2V0VmFyaWFibGVzIiwibmV4dERhdGEiLCJvbk5leHQiLCJfdGhpcyRwcm9wczMiLCJpc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQiLCJmZXRjaFF1ZXJ5IiwiX2NhY2hlU2VsZWN0aW9uUmVmZXJlbmNlIiwiY2FjaGVTZWxlY3Rpb25SZWZlcmVuY2UiLCJfc2VsZWN0aW9uUmVmZXJlbmNlcyIsInNlbGVjdGlvblJlZmVyZW5jZXMiLCJnZXRTZWxlY3Rpb25SZWZlcmVuY2VzIiwibG9va3VwSW5TdG9yZSIsImZldGNoUG9saWN5Iiwic3RhdHVzIiwiX3JldGFpbkNhY2hlZE9wZXJhdGlvbiIsIl9yZWYiLCJfcmVmJHByZXNlcnZlUHJldmlvdXMiLCJyZWZlcmVuY2UiLCJkaXNwb3NlU2VsZWN0aW9uUmVmZXJlbmNlcyIsInNldE9uRGF0YUNoYW5nZSIsIm9uRGF0YUNoYW5nZSIsIl9mZXRjaE9wdGlvbnMiLCJvbkRhdGFDaGFuZ2VDYWxsYmFja3MiLCJfY2FsbE9uRGF0YUNoYW5nZVdoZW5TZXQiLCJfZXJyb3IiLCJfc25hcHNob3QiLCJmZXRjaCIsImZldGNoT3B0aW9ucyIsImNhY2hlQ29uZmlnT3ZlcnJpZGUiLCJmZXRjaEhhc1JldHVybmVkIiwiZGlzcG9zZVJlcXVlc3QiLCJvbGRPbkRhdGFDaGFuZ2VDYWxsYmFja3MiLCJvcGVyYXRpb25PdmVycmlkZSIsIl9wZW5kaW5nUmVxdWVzdCIsIl9vblF1ZXJ5RGF0YUF2YWlsYWJsZSIsIm5vdGlmeUZpcnN0UmVzdWx0IiwicmV0cnkiLCJfcm9vdFN1YnNjcmlwdGlvbiIsIl9kaXNwb3NlQ2FjaGVTZWxlY3Rpb25SZWZlcmVuY2UiLCJfcmVmMiIsIl90aGlzMyIsIl90aGlzJF9mZXRjaE9wdGlvbnMiLCJtYXliZU5ld09uRGF0YUNoYW5nZUNhbGxiYWNrcyIsInJlcXVlc3RDYWNoZSIsIlJlYWN0UmVsYXlRdWVyeVJlbmRlcmVyIiwicXVlcnlGZXRjaGVyIiwicmVxdWVzdENhY2hlS2V5IiwicmV0cnlDYWxsYmFja3MiLCJoYW5kbGVEYXRhQ2hhbmdlIiwiaGFuZGxlUmV0cnlBZnRlckVycm9yIiwiZ2V0UmVxdWVzdENhY2hlS2V5IiwicGFyYW1zIiwicHJldlByb3BzRW52aXJvbm1lbnQiLCJwcmV2UHJvcHNWYXJpYWJsZXMiLCJwcmV2UXVlcnkiLCJmZXRjaFF1ZXJ5QW5kQ29tcHV0ZVN0YXRlRnJvbVByb3BzIiwicHJldlNlbGVjdGlvblJlZmVyZW5jZXMiLCJwcmV2UmVxdWVzdENhY2hlS2V5IiwicmVuZGVyUHJvcHMiLCJnZXRSZW5kZXJQcm9wcyIsIl90aGlzJHN0YXRlMiIsInN5bmNTbmFwc2hvdCIsImNhY2hlSUQiLCJnZW5lcmljRW52aXJvbm1lbnQiLCJzdG9yZVNuYXBzaG90IiwiY3JlYXRlQ29udGV4dCIsInJlZmV0Y2giLCJ0YWdnZWROb2RlIiwicmVuZGVyVmFyaWFibGVzIiwiX2dldEZyYWdtZW50VmFyaWFibGVzIiwibG9jYWxWYXJpYWJsZXMiLCJsYXRlc3RTdGF0ZSIsInJlc3BvbnNlIiwiX3JlZmV0Y2giLCJpc1JlbGF5RW52aXJvbm1lbnQiLCJpc1JlbGF5Q29udGV4dCIsImFzc2VydEZyYWdtZW50TWFwIiwiZ2V0RnJhZ21lbnQiLCJDb250YWluZXIiLCJmb3J3YXJkUmVmIiwiX3F1ZXJ5UmVuZGVyZXJDb250ZXh0IiwiX3NlbGVjdG9yJHNlbGVjdG9ycyQiLCJfc2VsZWN0b3Ikc2VsZWN0b3JzJDIiLCJfc2VsZWN0b3Ikb3duZXIkdmFyaWEiLCJmcmFnbWVudE5vZGUiLCJmcmFnbWVudFJlZiIsInNlbGVjdG9yIiwiZnJhZ21lbnRPd25lclZhcmlhYmxlcyIsImtpbmQiLCJzZWxlY3RvcnMiLCJvd25lciIsIkVudHJ5UG9pbnRDb250YWluZXIiLCJSZWxheUVudmlyb25tZW50UHJvdmlkZXIiLCJSZWxheVJ1bnRpbWUiLCJsb2FkRW50cnlQb2ludCIsInVzZUVudHJ5UG9pbnRMb2FkZXIiLCJ1c2VGcmFnbWVudCIsInVzZUxhenlMb2FkUXVlcnkiLCJ1c2VNdXRhdGlvbiIsInVzZVBhZ2luYXRpb25GcmFnbWVudCIsInVzZVByZWxvYWRlZFF1ZXJ5IiwidXNlUXVlcnlMb2FkZXIiLCJ1c2VSZWZldGNoYWJsZUZyYWdtZW50IiwidXNlUmVsYXlFbnZpcm9ubWVudCIsInVzZVN1YnNjcmliZVRvSW52YWxpZGF0aW9uU3RhdGUiLCJ1c2VTdWJzY3JpcHRpb24iLCJsb2FkUXVlcnkiLCJDb25uZWN0aW9uSGFuZGxlciIsImFwcGx5T3B0aW1pc3RpY011dGF0aW9uIiwiY29tbWl0TG9jYWxVcGRhdGUiLCJjb21taXRNdXRhdGlvbiIsImdyYXBocWwiLCJyZWFkSW5saW5lRGF0YSIsInJlcXVlc3RTdWJzY3JpcHRpb24iLCJSZWFjdFJlbGF5RnJhZ21lbnRDb250YWluZXIiLCJSZWFjdFJlbGF5TG9jYWxRdWVyeVJlbmRlcmVyIiwiUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXIiLCJSZWFjdFJlbGF5UmVmZXRjaENvbnRhaW5lciIsIlF1ZXJ5UmVuZGVyZXIiLCJMb2NhbFF1ZXJ5UmVuZGVyZXIiLCJNdXRhdGlvblR5cGVzIiwiUmFuZ2VPcGVyYXRpb25zIiwiY3JlYXRlRnJhZ21lbnRDb250YWluZXIiLCJjcmVhdGVQYWdpbmF0aW9uQ29udGFpbmVyIiwiY3JlYXRlUmVmZXRjaENvbnRhaW5lciIsImZldGNoUXVlcnlfREVQUkVDQVRFRCIsIl9SZWFjdCRfX1NFQ1JFVF9JTlRFUiIsIkNvbnRleHQiLCJjdXJyZW50RGlzcGF0Y2hlciIsIlByb2ZpbGVyQ29udGV4dCIsImVudHJ5UG9pbnRSZWZlcmVuY2UiLCJnZXRDb21wb25lbnQiLCJxdWVyaWVzIiwiZW50cnlQb2ludHMiLCJleHRyYVByb3BzIiwicm9vdE1vZHVsZUlEIiwicHJvZmlsZXJDb250ZXh0IiwiX19sb2ciLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiTFJVQ2FjaGUiLCJnZXRQcm9taXNlRm9yQWN0aXZlUmVxdWVzdCIsImdldEZyYWdtZW50SWRlbnRpZmllciIsImlzUHJvbWlzZSIsInJlY3ljbGVOb2Rlc0ludG8iLCJyZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHMiLCJXRUFLTUFQX1NVUFBPUlRFRCIsIkNPTlNUQU5UX1JFQURPTkxZX0VNUFRZX0FSUkFZIiwiZnJlZXplIiwiZ2V0RnJhZ21lbnRSZXN1bHQiLCJjYWNoZUtleSIsIkZyYWdtZW50UmVzb3VyY2VJbXBsIiwiX2Vudmlyb25tZW50IiwiX2NhY2hlIiwicmVhZCIsImNvbXBvbmVudERpc3BsYXlOYW1lIiwiZnJhZ21lbnRLZXkiLCJyZWFkV2l0aElkZW50aWZpZXIiLCJmcmFnbWVudElkZW50aWZpZXIiLCJfZnJhZ21lbnROb2RlJG1ldGFkYXQiLCJwbHVyYWwiLCJjYWNoZWRWYWx1ZSIsIl9yZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHNJblNuYXBzaG90IiwiZnJhZ21lbnRTZWxlY3RvciIsImZyYWdtZW50T3duZXIiLCJzb21lIiwiaXNNaXNzaW5nRGF0YSIsImZyYWdtZW50UmVzdWx0IiwibmV0d29ya1Byb21pc2UiLCJfZ2V0QW5kU2F2ZVByb21pc2VGb3JGcmFnbWVudFJlcXVlc3RJbkZsaWdodCIsIm1pc3NpbmdSZXF1aXJlZEZpZWxkcyIsInJlYWRTcGVjIiwiZnJhZ21lbnROb2RlcyIsImZyYWdtZW50UmVmcyIsInJlbmRlcmVkU25hcHNob3QiLCJfdGhpcyRjaGVja01pc3NlZFVwZGEiLCJjaGVja01pc3NlZFVwZGF0ZXMiLCJkaWRNaXNzVXBkYXRlcyIsImN1cnJlbnRTbmFwc2hvdCIsImRhdGFTdWJzY3JpcHRpb25zIiwiaWR4IiwibGF0ZXN0U25hcHNob3QiLCJfdXBkYXRlUGx1cmFsU25hcHNob3QiLCJzdWJzY3JpYmVTcGVjIiwiZnJhZ21lbnRSZXN1bHRzIiwiZGlzcG9zYWJsZXMiLCJkaXNwb3NhYmxlIiwiY3VycmVudFNuYXBzaG90cyIsInJlbmRlckRhdGEiLCJjdXJyZW50RGF0YSIsInVwZGF0ZWREYXRhIiwic2VlblJlY29yZHMiLCJjaGVja01pc3NlZFVwZGF0ZXNTcGVjIiwiX3RoaXM0IiwiX2dldFByb21pc2VGb3JBY3RpdmVSIiwiX3RoaXM1IiwiZ2V0T3BlcmF0aW9uVHJhY2tlciIsImdldFByb21pc2VGb3JQZW5kaW5nT3BlcmF0aW9uc0FmZmVjdGluZ093bmVyIiwiZ2V0UHJvbWlzZUZvclBlbmRpbmdPcGVyYXRpb25BZmZlY3RpbmdPd25lciIsInByb21pc2UiLCJxdWVyeU5hbWUiLCJwcm9taXNlRGlzcGxheU5hbWUiLCJiYXNlU25hcHNob3RzIiwiY3VycmVudEZyYWdtZW50UmVzdWx0IiwicmVwb3J0SW52YWxpZENhY2hlZERhdGEiLCJuZXh0U25hcHNob3RzIiwiY3JlYXRlRnJhZ21lbnRSZXNvdXJjZSIsImRhdGFSZXNvdXJjZXMiLCJnZXRGcmFnbWVudFJlc291cmNlRm9yRW52aXJvbm1lbnQiLCJjYWNoZWQiLCJuZXdEYXRhUmVzb3VyY2UiLCJjYXBhY2l0eSIsIl9jYXBhY2l0eSIsIl9tYXAiLCJmaXJzdEtleSIsImNsZWFyIiwid3JhcFByZXBhcmVRdWVyeVJlc291cmNlIiwiREVGQVVMVF9GRVRDSF9QT0xJQ1kiLCJnZXRRdWVyeUNhY2hlSWRlbnRpZmllciIsIm1heWJlRmV0Y2hQb2xpY3kiLCJtYXliZVJlbmRlclBvbGljeSIsImNhY2hlQnJlYWtlciIsInJlbmRlclBvbGljeSIsIlVOU1RBQkxFX2dldERlZmF1bHRSZW5kZXJQb2xpY3kiLCJjYWNoZUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwiZ2V0UXVlcnlSZXN1bHQiLCJyb290RnJhZ21lbnRSZWYiLCJfX2lkIiwiZGF0YUlEIiwiX19mcmFnbWVudHMiLCJfX2ZyYWdtZW50T3duZXIiLCJuZXh0SUQiLCJjcmVhdGVDYWNoZUVudHJ5IiwibmV0d29ya1N1YnNjcmlwdGlvbiIsIm9uRGlzcG9zZSIsImN1cnJlbnRWYWx1ZSIsInJldGFpbkNvdW50IiwicmVsZWFzZVRlbXBvcmFyeVJldGFpbiIsImN1cnJlbnROZXR3b3JrU3Vic2NyaXB0aW9uIiwibWF4IiwiY2FjaGVFbnRyeSIsImdldFJldGFpbkNvdW50IiwiZ2V0TmV0d29ya1N1YnNjcmlwdGlvbiIsInNldE5ldHdvcmtTdWJzY3JpcHRpb24iLCJ0ZW1wb3JhcnlSZXRhaW4iLCJpc1NlcnZlciIsInJlbGVhc2VRdWVyeVRpbWVvdXQiLCJsb2NhbFJlbGVhc2VUZW1wb3JhcnlSZXRhaW4iLCJwZXJtYW5lbnRSZXRhaW4iLCJRdWVyeVJlc291cmNlSW1wbCIsInByZXBhcmUiLCJmZXRjaE9ic2VydmFibGUiLCJwcmVwYXJlV2l0aElkZW50aWZpZXIiLCJ0ZW1wb3JhcnlSZXRhaW5EaXNwb3NhYmxlIiwiX2ZldGNoQW5kU2F2ZVF1ZXJ5Iiwib2JzZXJ2ZXJVbnN1YnNjcmliZSIsInF1ZXJ5UmVzdWx0IiwiX2dldE9yQ3JlYXRlQ2FjaGVFbnRyeSIsInJlc291cmNlSUQiLCJURVNUU19PTkxZX19nZXRDYWNoZUVudHJ5IiwiX2NsZWFyQ2FjaGVFbnRyeSIsInNob3VsZEZldGNoIiwic2hvdWxkQWxsb3dSZW5kZXIiLCJxdWVyeUF2YWlsYWJpbGl0eSIsInF1ZXJ5U3RhdHVzIiwiaGFzRnVsbFF1ZXJ5IiwiY2FuUGFydGlhbFJlbmRlciIsInJlc29sdmVOZXR3b3JrUHJvbWlzZSIsIl9jYWNoZUVudHJ5IiwiX3F1ZXJ5UmVzdWx0Iiwib2JzZXJ2ZXJTdGFydCIsIm9ic2VydmVyTmV4dCIsIm9ic2VydmVyRXJyb3IiLCJvYnNlcnZlckNvbXBsZXRlIiwiX2NhY2hlRW50cnkyIiwiUHJvbWlzZSIsImNyZWF0ZVF1ZXJ5UmVzb3VyY2UiLCJnZXRRdWVyeVJlc291cmNlRm9yRW52aXJvbm1lbnQiLCJnZXRSZWZldGNoTWV0YWRhdGEiLCJfZnJhZ21lbnROb2RlJG1ldGFkYXQyIiwiX2dldFJlZmV0Y2hNZXRhZGF0YSIsInBhZ2luYXRpb25SZXF1ZXN0IiwicmVmZXRjaGFibGVSZXF1ZXN0IiwicmVmZXRjaE1ldGFkYXRhIiwicGFnaW5hdGlvbk1ldGFkYXRhIiwiY29ubmVjdGlvblBhdGhJbkZyYWdtZW50RGF0YSIsImlkZW50aWZpZXJGaWVsZCIsInN0cmVhbSIsIl9vYmplY3RTcHJlYWQ0IiwiYmFzZVZhcmlhYmxlcyIsImV4dHJhVmFyaWFibGVzIiwiYmFja3dhcmRNZXRhZGF0YSIsImJhY2t3YXJkIiwiZm9yd2FyZE1ldGFkYXRhIiwiZm9yd2FyZCIsIl9wYWdpbmF0aW9uVmFyaWFibGVzIiwicGFnaW5hdGlvblZhcmlhYmxlcyIsImZyYWdtZW50UmVmUGF0aEluUmVzcG9uc2UiLCJmcmFnbWVudFBhdGhJblJlc3VsdCIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMiIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiZW52aXJvbm1lbnRQcm92aWRlciIsImVudHJ5UG9pbnQiLCJlbnRyeVBvaW50UGFyYW1zIiwibG9hZGluZ1Byb21pc2UiLCJyb290IiwiZ2V0TW9kdWxlSWZSZXF1aXJlZCIsImxvYWQiLCJwcmVsb2FkUHJvcHMiLCJnZXRQcmVsb2FkUHJvcHMiLCJwcmVsb2FkZWRRdWVyaWVzIiwicHJlbG9hZGVkRW50cnlQb2ludHMiLCJxdWVyeVByb3BOYW1lIiwiX3F1ZXJpZXMkcXVlcnlQcm9wTmFtIiwiZW52aXJvbm1lbnRQcm92aWRlck9wdGlvbnMiLCJwYXJhbWV0ZXJzIiwiZ2V0RW52aXJvbm1lbnQiLCJuZXR3b3JrQ2FjaGVDb25maWciLCJfX25hbWVGb3JXYXJuaW5nIiwiZW50cnlQb2ludFByb3BOYW1lIiwiZW50cnlQb2ludERlc2NyaXB0aW9uIiwibmVzdGVkRW50cnlQb2ludCIsIm5lc3RlZFBhcmFtcyIsImlzRGlzcG9zZWQiLCJ2YWx1ZXMiLCJpbm5lckRpc3Bvc2UiLCJfbG9hZGluZ1Byb21pc2UiLCJnZXRNb2R1bGVJZCIsIlByZWxvYWRhYmxlUXVlcnlSZWdpc3RyeSIsIlJlcGxheVN1YmplY3QiLCJnZXRSZXF1ZXN0SWRlbnRpZmllciIsIlJlbGF5RmVhdHVyZUZsYWdzIiwiZmV0Y2hRdWVyeURlZHVwZWQiLCJSZW5kZXJEaXNwYXRjaGVyIiwiZmV0Y2hLZXkiLCJwcmVsb2FkYWJsZVJlcXVlc3QiLCJfUmVhY3QkX19TRUNSRVRfSU5URVIzIiwiX1JlYWN0JF9fU0VDUkVUX0lOVEVSNCIsIl9vcHRpb25zJGZldGNoUG9saWN5IiwicmV0YWluUmVmZXJlbmNlIiwidW5zdWJzY3JpYmVGcm9tTmV0d29ya1JlcXVlc3QiLCJ1bnN1YnNjcmliZUZyb21FeGVjdXRpb24iLCJjYW5jZWxPbkxvYWRDYWxsYmFjayIsInF1ZXJ5SWQiLCJkaWRFeGVjdXRlTmV0d29ya1NvdXJjZSIsImV4ZWN1dGVXaXRoTmV0d29ya1NvdXJjZSIsIm5ldHdvcmtPYnNlcnZhYmxlIiwiZXhlY3V0ZVdpdGhTb3VyY2UiLCJleGVjdXRpb25TdWJqZWN0IiwicmV0dXJuZWRPYnNlcnZhYmxlIiwibmV0d29ya0Vycm9yIiwiZGlkTWFrZU5ldHdvcmtSZXF1ZXN0IiwibWFrZU5ldHdvcmtSZXF1ZXN0Iiwib2JzZXJ2YWJsZSIsInN1YmplY3QiLCJFTkFCTEVfTE9BRF9RVUVSWV9SRVFVRVNUX0RFRFVQSU5HIiwiZ2V0TmV0d29yayIsInN1YmplY3RTdWJzY3JpcHRpb24iLCJleGVjdXRlRGVkdXBlZCIsImZldGNoRm4iLCJfZmV0Y2hRdWVyeURlZHVwZWQkc3UiLCJjaGVja0F2YWlsYWJpbGl0eUFuZEV4ZWN1dGUiLCJjb25jcmV0ZVJlcXVlc3QiLCJfbW9kdWxlIiwiX1ByZWxvYWRhYmxlUXVlcnlSZWdpIiwib25Mb2FkIiwicHJlbG9hZGVkTW9kdWxlIiwidXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlciIsIl9SZWFjdCRfX1NFQ1JFVF9JTlRFUjIiLCJ1c2VJc01vdW50ZWRSZWYiLCJfcmVxdWlyZTIiLCJpbml0aWFsTnVsbEVudHJ5UG9pbnRSZWZlcmVuY2VTdGF0ZSIsIl9vcHRpb25zJFRFU1RfT05MWV9faSIsIl9vcHRpb25zJFRFU1RfT05MWV9faTIiLCJfb3B0aW9ucyRURVNUX09OTFlfX2kzIiwiX29wdGlvbnMkVEVTVF9PTkxZX19pNCIsImluaXRpYWxFbnRyeVBvaW50UmVmZXJlbmNlSW50ZXJuYWwiLCJURVNUX09OTFlfX2luaXRpYWxFbnRyeVBvaW50RGF0YSIsImluaXRpYWxFbnRyeVBvaW50UGFyYW1zSW50ZXJuYWwiLCJpc01vdW50ZWRSZWYiLCJ1bmRpc3Bvc2VkRW50cnlQb2ludFJlZmVyZW5jZXNSZWYiLCJfdXNlU3RhdGUiLCJzZXRFbnRyeVBvaW50UmVmZXJlbmNlIiwiX3VzZVN0YXRlMiIsInNldEVudHJ5UG9pbnRQYXJhbXMiLCJkaXNwb3NlRW50cnlQb2ludCIsIm51bGxFbnRyeVBvaW50UmVmZXJlbmNlIiwiZW50cnlQb2ludExvYWRlckNhbGxiYWNrIiwidXBkYXRlZEVudHJ5UG9pbnRSZWZlcmVuY2UiLCJtYXliZUhpZGRlbk9yRmFzdFJlZnJlc2giLCJ1bmRpc3Bvc2VkRW50cnlQb2ludFJlZmVyZW5jZXMiLCJ1bmRpc3Bvc2VkRW50cnlQb2ludFJlZmVyZW5jZSIsIl9zdGVwMiIsIl9pdGVyYXRvcjIiLCJ1bmhhbmRsZWRTdGF0ZUNoYW5nZSIsInN1YnNjcmlwdGlvblJlZiIsImlzRmV0Y2hpbmdSZWYiLCJkaXNwb3NlRmV0Y2giLCJzdGFydEZldGNoIiwiY29tcGxldGVGZXRjaCIsInVzZUZyYWdtZW50Tm9kZSIsInVzZVN0YXRpY0ZyYWdtZW50Tm9kZVdhcm5pbmciLCJmcmFnbWVudElucHV0IiwiRnJhZ21lbnRSZXNvdXJjZSIsImlzTGlzdGVuaW5nRm9yVXBkYXRlc1JlZiIsImhhbmRsZURhdGFVcGRhdGUiLCJkaXNhYmxlU3RvcmVVcGRhdGVzIiwiZW5hYmxlU3RvcmVVcGRhdGVzIiwiZ2V0T2JzZXJ2YWJsZUZvckFjdGl2ZVJlcXVlc3QiLCJpc0FjdGl2ZSIsInNldElzQWN0aXZlIiwib25Db21wbGV0ZU9yRXJyb3IiLCJ1c2VMYXp5TG9hZFF1ZXJ5Tm9kZSIsInVzZU1lbW9PcGVyYXRpb25EZXNjcmlwdG9yIiwiZ3FsUXVlcnkiLCJVTlNUQUJMRV9yZW5kZXJQb2xpY3kiLCJ1c2VGZXRjaFRyYWNraW5nUmVmIiwiUXVlcnlSZXNvdXJjZSIsImZvcmNlVXBkYXRlS2V5IiwiX3VzZUZldGNoVHJhY2tpbmdSZWYiLCJwcmVwYXJlZFF1ZXJ5UmVzdWx0IiwiZ2V0UGFnaW5hdGlvblZhcmlhYmxlcyIsImdldFZhbHVlQXRQYXRoIiwidXNlSXNPcGVyYXRpb25Ob2RlQWN0aXZlIiwiZnJhZ21lbnREYXRhIiwib25SZXNldCIsImlkZW50aWZpZXJWYWx1ZSIsIm1pcnJvcmVkRW52aXJvbm1lbnQiLCJzZXRNaXJyb3JlZEVudmlyb25tZW50IiwibWlycm9yZWRGcmFnbWVudElkZW50aWZpZXIiLCJzZXRNaXJyb3JlZEZyYWdtZW50SWRlbnRpZmllciIsImlzUGFyZW50UXVlcnlBY3RpdmUiLCJfZ2V0Q29ubmVjdGlvblN0YXRlIiwiX3BhZ2VJbmZvJEVORF9DVVJTT1IiLCJfcGFnZUluZm8kU1RBUlRfQ1VSU08iLCJnZXRDb25uZWN0aW9uU3RhdGUiLCJvbkNvbXBsZXRlIiwicGFyZW50VmFyaWFibGVzIiwiVU5TVEFCTEVfZXh0cmFWYXJpYWJsZXMiLCJwYWdpbmF0aW9uUXVlcnkiLCJ1c2VNZW1vVmFyaWFibGVzIiwibWVtb1ZhcmlhYmxlcyIsIm1lbW9DYWNoZUNvbmZpZyIsIl92YXJpYWJsZXNDaGFuZ2VkR2VuZTIiLCJfdmFyaWFibGVzQ2hhbmdlZEdlbmUiLCJ2YXJpYWJsZXNDaGFuZ2VkR2VuZXJhdGlvblJlZiIsIm1pcnJvcmVkVmFyaWFibGVzIiwic2V0TWlycm9yZWRWYXJpYWJsZXMiLCJkZWZhdWx0Q29tbWl0TXV0YXRpb24iLCJtdXRhdGlvbiIsImNvbW1pdE11dGF0aW9uRm4iLCJlbnZpcm9ubWVudFJlZiIsIm11dGF0aW9uUmVmIiwiaW5GbGlnaHRNdXRhdGlvbnNSZWYiLCJpc011dGF0aW9uSW5GbGlnaHQiLCJzZXRNdXRhdGlvbkluRmxpZ2h0IiwiY29tbWl0IiwiY29uZmlnIiwib25Db21wbGV0ZWQiLCJlcnJvcnMiLCJvblVuc3Vic2NyaWJlIiwiZ2V0UGFnaW5hdGlvbk1ldGFkYXRhIiwidXNlTG9hZE1vcmVGdW5jdGlvbiIsInVzZVJlZmV0Y2hhYmxlRnJhZ21lbnROb2RlIiwidXNlTG9hZE1vcmUiLCJpc0xvYWRpbmdNb3JlIiwic2V0SXNMb2FkaW5nTW9yZSIsIl91c2VMb2FkTW9yZUZ1bmN0aW9uIiwicGFyZW50RnJhZ21lbnRSZWYiLCJfZ2V0UGFnaW5hdGlvbk1ldGFkYXQiLCJfdXNlUmVmZXRjaGFibGVGcmFnbWUiLCJfdXNlTG9hZE1vcmUiLCJsb2FkUHJldmlvdXMiLCJoYXNQcmV2aW91cyIsImlzTG9hZGluZ1ByZXZpb3VzIiwiZGlzcG9zZUZldGNoUHJldmlvdXMiLCJfdXNlTG9hZE1vcmUyIiwibG9hZE5leHQiLCJoYXNOZXh0IiwiaXNMb2FkaW5nTmV4dCIsImRpc3Bvc2VGZXRjaE5leHQiLCJfX2Vudmlyb25tZW50IiwiX3JlcXVpcmUzJF9faW50ZXJuYWwiLCJwcmVsb2FkZWRRdWVyeSIsInVzZUxhenlMb2FkUXVlcnlOb2RlUGFyYW1zIiwiZmFsbGJhY2tGZXRjaE9ic2VydmFibGUiLCJpZkVtcHR5IiwiaW5pdGlhbE51bGxRdWVyeVJlZmVyZW5jZVN0YXRlIiwiaW5pdGlhbFF1ZXJ5UmVmZXJlbmNlIiwiaW5pdGlhbFF1ZXJ5UmVmZXJlbmNlSW50ZXJuYWwiLCJ1bmRpc3Bvc2VkUXVlcnlSZWZlcmVuY2VzUmVmIiwicXVlcnlSZWZlcmVuY2UiLCJzZXRRdWVyeVJlZmVyZW5jZSIsInByZXZpb3VzSW5pdGlhbFF1ZXJ5UmVmZXJlbmNlIiwic2V0UHJldmlvdXNJbml0aWFsUXVlcnlSZWZlcmVuY2UiLCJkaXNwb3NlUXVlcnkiLCJxdWVyeUxvYWRlckNhbGxiYWNrIiwibWVyZ2VkT3B0aW9ucyIsIl9vcHRpb25zJF9fZW52aXJvbm1lbiIsInVwZGF0ZWRRdWVyeVJlZmVyZW5jZSIsInVuZGlzcG9zZWRRdWVyeVJlZmVyZW5jZXMiLCJ1bmRpc3Bvc2VkUXVlcnlSZWZlcmVuY2UiLCJfcmVxdWlyZTQiLCJyZWR1Y2VyIiwiX2FjdGlvbiRyZWZldGNoRW52aXJvIiwicmVmZXRjaEVudmlyb25tZW50IiwicmVmZXRjaFF1ZXJ5IiwicGFyZW50RW52aXJvbm1lbnQiLCJfdXNlUmVkdWNlciIsInJlZmV0Y2hTdGF0ZSIsInNob3VsZFJlc2V0IiwiX3VzZVF1ZXJ5TG9hZGVyIiwicXVlcnlSZWYiLCJoYW5kbGVRdWVyeUNvbXBsZXRlZCIsIm1heWJlRXJyb3IiLCJxdWVyeURhdGEiLCJfdXNlRnJhZ21lbnROb2RlIiwicHJvdmlkZWRSZWZldGNoVmFyaWFibGVzIiwiX2ZyYWdtZW50U2VsZWN0b3Ikc2VsIiwiX2ZyYWdtZW50U2VsZWN0b3Ikc2VsMiIsIl9mcmFnbWVudFNlbGVjdG9yJHNlbDMiLCJfZnJhZ21lbnRTZWxlY3RvciRzZWw0IiwidXNlUmVmZXRjaEZ1bmN0aW9uIiwid2FybmluZ0NvbnRleHQiLCJkYXRhSURzIiwiZGlzcG9zYWJsZVJlZiIsInN0YWJsZURhdGFJRHMiLCJzb3J0Iiwic3RvcmUiLCJnZXRTdG9yZSIsImludmFsaWRhdGlvblN0YXRlIiwibG9va3VwSW52YWxpZGF0aW9uU3RhdGUiLCJzdWJzY3JpYmVUb0ludmFsaWRhdGlvblN0YXRlIiwicmVxdWVzdFN1YnNjcmlwdGlvbkZuIiwiYWN0dWFsUmVxdWVzdFN1YnNjcmlwdGlvbiIsImxlbiIsImFycjIiLCJfX2VzTW9kdWxlIiwiYXJyYXlMaWtlVG9BcnJheSIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsInVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibyIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJfZSIsIm5vcm1hbENvbXBsZXRpb24iLCJkaWRFcnIiLCJzdGVwIiwiX2UyIiwib2JqIiwid3JpdGFibGUiLCJfZXh0ZW5kcyIsInNldFByb3RvdHlwZU9mIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiaXRlciIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiX3NldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVNwcmVhZCIsIm1pbkxlbiIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJSZWdFeHAiLCJncm91cHMiLCJwcmVmaXgiLCJkZWxpbWl0ZXIiLCJvcHRpb25hbCIsInBhcnRpYWwiLCJhc3RlcmlzayIsInBhdHRlcm4iLCJhdHRhY2hLZXlzIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJ0b2tlbnNUb1JlZ0V4cCIsInBhcnNlIiwic3RyaW5nVG9SZWdleHAiLCJjb21waWxlIiwic3RyIiwidG9rZW5zVG9GdW5jdGlvbiIsIlBBVEhfUkVHRVhQIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImV4ZWMiLCJlc2NhcGVkIiwiZ3JvdXAiLCJtb2RpZmllciIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwic3Vic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiY2hhckNvZGVBdCIsIm1hdGNoZXMiLCJvcHRzIiwiZW5jb2RlIiwicHJldHR5IiwidG9rZW4iLCJzZWdtZW50IiwiaiIsInNlbnNpdGl2ZSIsInN0cmljdCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImVzY2FwZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiZGVmYXVsdCIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwidG9BcnJheSIsIm9ubHkiLCJQdXJlQ29tcG9uZW50IiwiY2xvbmVFbGVtZW50IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJDb25zdW1lciIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwiTXV0YXRpb25IYW5kbGVycyIsImhhbmRsZSIsIkRlbGV0ZVJlY29yZEhhbmRsZXIiLCJEZWxldGVFZGdlSGFuZGxlciIsIkFwcGVuZEVkZ2VIYW5kbGVyIiwiUHJlcGVuZEVkZ2VIYW5kbGVyIiwiQXBwZW5kTm9kZUhhbmRsZXIiLCJQcmVwZW5kTm9kZUhhbmRsZXIiLCJnZXRSZWxheUhhbmRsZUtleSIsImdlbmVyYXRlQ2xpZW50SUQiLCJnZXRTdGFibGVTdG9yYWdlS2V5IiwiQ09OTkVDVElPTiIsIk5FWFRfRURHRV9JTkRFWCIsImJ1aWxkQ29ubmVjdGlvbkVkZ2UiLCJlZGdlIiwiZWRnZUluZGV4IiwiZWRnZUlEIiwiZ2V0RGF0YUlEIiwiY29ubmVjdGlvbkVkZ2UiLCJnZXRUeXBlIiwiY29weUZpZWxkc0Zyb20iLCJtZXJnZUVkZ2VzIiwic291cmNlRWRnZXMiLCJ0YXJnZXRFZGdlcyIsIm5vZGVJRHMiLCJOT0RFIiwiZ2V0TGlua2VkUmVjb3JkIiwibm9kZUlEIiwiY3JlYXRlRWRnZSIsInJlY29yZCIsImVkZ2VUeXBlIiwic2V0TGlua2VkUmVjb3JkIiwiZGVsZXRlTm9kZSIsIl9Db25uZWN0aW9uSW50ZXJmYWNlJDUiLCJnZXRMaW5rZWRSZWNvcmRzIiwibmV4dEVkZ2VzIiwic2V0TGlua2VkUmVjb3JkcyIsImdldENvbm5lY3Rpb24iLCJmaWx0ZXJzIiwiaGFuZGxlS2V5IiwiZ2V0Q29ubmVjdGlvbklEIiwicmVjb3JkSUQiLCJzdG9yYWdlS2V5IiwiaW5zZXJ0RWRnZUFmdGVyIiwibmV3RWRnZSIsIkNVUlNPUiIsImZvdW5kQ3Vyc29yIiwiaW5zZXJ0RWRnZUJlZm9yZSIsIl9Db25uZWN0aW9uSW50ZXJmYWNlJDQiLCJ1cGRhdGUiLCJQQUdFX0lORk9fVFlQRSIsInNlcnZlckNvbm5lY3Rpb24iLCJmaWVsZEtleSIsInNlcnZlclBhZ2VJbmZvIiwiY2xpZW50Q29ubmVjdGlvbklEIiwiY2xpZW50Q29ubmVjdGlvbkZpZWxkIiwiY2xpZW50Q29ubmVjdGlvbiIsImNsaWVudFBhZ2VJbmZvIiwiX2Nvbm5lY3Rpb24iLCJfc2VydmVyRWRnZXMiLCJwcmV2RWRnZXMiLCJwcmV2UGFnZUluZm8iLCJhZnRlciIsImJlZm9yZSIsIl9ub2RlSURzIiwic3RhcnRDdXJzb3IiLCJmaXJzdCIsImVuZEN1cnNvciIsInNlcnZlckVkZ2VzIiwiQ09OTkVDVElPTl9DQUxMUyIsImZpbmQiLCJzdXJyb3VuZHMiLCJDTElFTlRfTVVUQVRJT05fSUQiLCJuZXdDb25maWciLCJpc0Nvbm5lY3Rpb25DYWxsIiwiaWRPcklkcyIsImNvbm5lY3Rpb25zIiwiaGFuZGxlQXJncyIsImNvbm5lY3Rpb25JRCIsImVkZ2VVcGRhdGVyIiwibm9kZVVwZGF0ZXIiLCJpbnNlcnRGbiIsInNpbmdsZVNlcnZlckVkZ2UiLCJfdW51c2VkIiwiX3VudXNlZDIiLCJzZXJ2ZXJFZGdlTGlzdCIsIl9sb29wIiwic2VydmVyRWRnZSIsInNlcnZlck5vZGUiLCJfc3RlcDMiLCJzZXJ2ZXJOb2RlSWQiLCJfaXRlcmF0b3IzIiwiX2Nvbm5lY3Rpb24kZ2V0TGlua2VkIiwiX2VkZ2UkZ2V0TGlua2VkUmVjb3JkIiwiY2xpZW50RWRnZSIsIl9zZXJ2ZXJOb2RlcyIsInNpbmdsZVNlcnZlck5vZGUiLCJzZXJ2ZXJOb2RlcyIsIl9wYXlsb2FkJGhhbmRsZUFyZ3MiLCJlZGdlVHlwZU5hbWUiLCJfdW51c2VkMyIsIl91bnVzZWQ0IiwiX3N0ZXA0Iiwic2VydmVyTm9kZUxpc3QiLCJfaXRlcmF0b3I0IiwiX2xvb3AyIiwiX3N0ZXA1IiwiX2l0ZXJhdG9yNSIsIl9jb25uZWN0aW9uJGdldExpbmtlZDIiLCJfZWRnZSRnZXRMaW5rZWRSZWNvcmQyIiwiR3JhcGhRTFRhZyIsIlJlbGF5Q29uY3JldGVOb2RlIiwiUmVsYXlDb25jcmV0ZVZhcmlhYmxlcyIsIlJlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZyIsIlJlbGF5RGVmYXVsdEhhbmRsZUtleSIsIlJlbGF5RGVmYXVsdEhhbmRsZXJQcm92aWRlciIsIlJlbGF5RXJyb3IiLCJSZWxheU1vZGVybkVudmlyb25tZW50IiwiUmVsYXlNb2Rlcm5PcGVyYXRpb25EZXNjcmlwdG9yIiwiUmVsYXlNb2Rlcm5SZWNvcmQiLCJSZWxheU1vZGVyblNlbGVjdG9yIiwiUmVsYXlNb2Rlcm5TdG9yZSIsIlJlbGF5TmV0d29yayIsIlJlbGF5T2JzZXJ2YWJsZSIsIlJlbGF5T3BlcmF0aW9uVHJhY2tlciIsIlJlbGF5UHJvZmlsZXIiLCJSZWxheVF1ZXJ5UmVzcG9uc2VDYWNoZSIsIlJlbGF5UmVjb3JkU291cmNlIiwiUmVsYXlSZXBsYXlTdWJqZWN0IiwiUmVsYXlTdG9yZVV0aWxzIiwiVmlld2VyUGF0dGVybiIsImNyZWF0ZVBheWxvYWRGb3IzREZpZWxkIiwiZmV0Y2hRdWVyeUludGVybmFsIiwic3RhYmxlQ29weSIsImdlbmVyYXRlVW5pcXVlQ2xpZW50SUQiLCJpc0NsaWVudElEIiwiRW52aXJvbm1lbnQiLCJOZXR3b3JrIiwiUXVlcnlSZXNwb25zZUNhY2hlIiwiUmVjb3JkU291cmNlIiwiUmVjb3JkIiwiU3RvcmUiLCJhcmVFcXVhbFNlbGVjdG9ycyIsImNyZWF0ZU5vcm1hbGl6YXRpb25TZWxlY3RvciIsImNyZWF0ZVJlYWRlclNlbGVjdG9yIiwiY3JlYXRlUmVxdWVzdERlc2NyaXB0b3IiLCJnZXREYXRhSURzRnJvbUZyYWdtZW50IiwiZ2V0Tm9kZSIsImdldElubGluZURhdGFGcmFnbWVudCIsImdldE1vZHVsZUNvbXBvbmVudEtleSIsImdldE1vZHVsZU9wZXJhdGlvbktleSIsImdldFBhZ2luYXRpb25GcmFnbWVudCIsImdldFBsdXJhbFNlbGVjdG9yIiwiZ2V0UmVmZXRjaGFibGVGcmFnbWVudCIsImdldFNlbGVjdG9yc0Zyb21PYmplY3QiLCJnZXRTaW5ndWxhclNlbGVjdG9yIiwiZ2V0U3RvcmFnZUtleSIsImdldFZhcmlhYmxlc0Zyb21GcmFnbWVudCIsImdldFZhcmlhYmxlc0Zyb21QbHVyYWxGcmFnbWVudCIsImdldFZhcmlhYmxlc0Zyb21TaW5ndWxhckZyYWdtZW50IiwiaXNJbmxpbmVEYXRhRnJhZ21lbnQiLCJpc1JlcXVlc3QiLCJEZWZhdWx0SGFuZGxlclByb3ZpZGVyIiwiVklFV0VSX0lEIiwiVklFV0VSX1RZUEUiLCJERUZBVUxUX0hBTkRMRV9LRVkiLCJGUkFHTUVOVFNfS0VZIiwiRlJBR01FTlRfT1dORVJfS0VZIiwiSURfS0VZIiwiUkVGX0tFWSIsIlJFRlNfS0VZIiwiUk9PVF9JRCIsIlJPT1RfVFlQRSIsIlRZUEVOQU1FX0tFWSIsIk9wZXJhdGlvblRyYWNrZXIiLCJnZXRPcGVyYXRpb25WYXJpYWJsZXMiLCJSQU5HRV9BREQiLCJSQU5HRV9ERUxFVEUiLCJOT0RFX0RFTEVURSIsIkFQUEVORCIsIlBSRVBFTkQiLCJnZXRSb290RmllbGQiLCJzZWxlY3Rpb25zIiwiY29udmVydCIsImNvbmZpZ3MiLCJvcHRpbWlzdGljVXBkYXRlciIsImNvbmZpZ09wdGltaXN0aWNVcGRhdGVzIiwiY29uZmlnVXBkYXRlcyIsIm5vZGVEZWxldGVSZXN1bHQiLCJkZWxldGVkSURGaWVsZE5hbWUiLCJyb290RmllbGQiLCJkZWxldGVJRCIsIm5vZGVEZWxldGUiLCJyYW5nZUFkZFJlc3VsdCIsInBhcmVudElEIiwiY29ubmVjdGlvbkluZm8iLCJlZGdlTmFtZSIsInBhcmVudCIsImluZm8iLCJyYW5nZUJlaGF2aW9yIiwicmFuZ2VBZGQiLCJyYW5nZURlbGV0ZVJlc3VsdCIsImNvbm5lY3Rpb25LZXlzIiwicGF0aFRvQ29ubmVjdGlvbiIsImRlbGV0ZUlEcyIsImRlbGV0ZWRJREZpZWxkIiwiZWFjaEZpZWxkIiwiaWRPYmplY3QiLCJyZWNvcmRQcm94eSIsInJhbmdlRGVsZXRlIiwiZWFjaE9wdGltaXN0aWNVcGRhdGVyIiwiZWFjaFVwZGF0ZXIiLCJSZWxheVJlY29yZFByb3h5IiwibXV0YXRvciIsIl9kYXRhSUQiLCJfbXV0YXRvciIsImNvcHlGaWVsZHMiLCJpc1ZhbGlkTGVhZlZhbHVlIiwibGlua2VkSUQiLCJnZXRMaW5rZWRSZWNvcmRJRCIsInNldExpbmtlZFJlY29yZElEIiwiZ2V0T3JDcmVhdGVMaW5rZWRSZWNvcmQiLCJ0eXBlTmFtZSIsImxpbmtlZFJlY29yZCIsIl90aGlzJF9zb3VyY2UkZ2V0IiwiY2xpZW50SUQiLCJsaW5rZWRJRHMiLCJnZXRMaW5rZWRSZWNvcmRJRHMiLCJyZWNvcmRzIiwic2V0TGlua2VkUmVjb3JkSURzIiwiaW52YWxpZGF0ZVJlY29yZCIsIm1hcmtJREZvckludmFsaWRhdGlvbiIsImV2ZXJ5IiwiRVhJU1RFTlQiLCJSZWxheVJlY29yZFNvdXJjZU11dGF0b3IiLCJfX3NvdXJjZXMiLCJfYmFzZSIsIl9zaW5rIiwidW5zdGFibGVfZ2V0UmF3UmVjb3JkV2l0aENoYW5nZXMiLCJiYXNlUmVjb3JkIiwic2lua1JlY29yZCIsImNsb25lIiwiX2dldFNpbmtSZWNvcmQiLCJzb3VyY2VJRCIsInNpbmtJRCIsInNpbmtTb3VyY2UiLCJiYXNlU291cmNlIiwiY29weUZpZWxkc0Zyb21SZWNvcmQiLCJnZXRTdGF0dXMiLCJOT05FWElTVEVOVCIsIlJlbGF5UmVjb3JkU291cmNlUHJveHkiLCJoYW5kbGVyUHJvdmlkZXIiLCJfX211dGF0b3IiLCJfaGFuZGxlclByb3ZpZGVyIiwiX3Byb3hpZXMiLCJfZ2V0RGF0YUlEIiwiX2ludmFsaWRhdGVkU3RvcmUiLCJfaWRzTWFya2VkRm9ySW52YWxpZGF0aW9uIiwicHVibGlzaFNvdXJjZSIsImZpZWxkUGF5bG9hZHMiLCJnZXRSZWNvcmRJRHMiLCJzb3VyY2VSZWNvcmQiLCJmaWVsZFBheWxvYWQiLCJoYW5kbGVyIiwiZ2V0Um9vdCIsImludmFsaWRhdGVTdG9yZSIsImlzU3RvcmVNYXJrZWRGb3JJbnZhbGlkYXRpb24iLCJnZXRJRHNNYXJrZWRGb3JJbnZhbGlkYXRpb24iLCJSZWxheVJlY29yZFNvdXJjZVNlbGVjdG9yUHJveHkiLCJyZWNvcmRTb3VyY2UiLCJyZWFkU2VsZWN0b3IiLCJfX3JlY29yZFNvdXJjZSIsIl9yZWFkU2VsZWN0b3IiLCJnZXRPcGVyYXRpb25Sb290IiwiX2dldFJvb3RGaWVsZCIsImZpZWxkTmFtZSIsImZpZWxkIiwic2VsZWN0aW9uIiwiZ2V0UGx1cmFsUm9vdEZpZWxkIiwib3BlcmF0aW9uS2luZCIsIm9wdGltaXN0aWNSZXNwb25zZSIsImFwcGx5TXV0YXRpb24iLCJjb21taXRVcGRhdGUiLCJ1cGxvYWRhYmxlcyIsIl9SZWxheURlY2xhcmF0aXZlTXV0YSIsImV4ZWN1dGVNdXRhdGlvbiIsIml0ZW0iLCJDT05ESVRJT04iLCJDTElFTlRfQ09NUE9ORU5UIiwiQ0xJRU5UX0VYVEVOU0lPTiIsIkRFRkVSIiwiRkxJR0hUX0ZJRUxEIiwiRlJBR01FTlRfU1BSRUFEIiwiSU5MSU5FX0ZSQUdNRU5UIiwiTElOS0VEX0ZJRUxEIiwiTElOS0VEX0hBTkRMRSIsIk1PRFVMRV9JTVBPUlQiLCJTQ0FMQVJfRklFTEQiLCJTQ0FMQVJfSEFORExFIiwiU1RSRUFNIiwiVFlQRV9ESVNDUklNSU5BVE9SIiwiY29udmVydEZldGNoIiwiZm4iLCJsb2dSZXF1ZXN0SW5mbyIsIm9ic2VydmVGZXRjaCIsInBvbGxJbnRlcnZhbCIsInBvbGwiLCJob3N0UmVwb3J0RXJyb3IiLCJfaXNVbmNhdWdodFRocm93bkVycm9yIiwib25VbmhhbmRsZWRFcnJvciIsImlzT2JzZXJ2YWJsZSIsImZyb21PYnNlcnZhYmxlIiwiZnJvbVByb21pc2UiLCJmcm9tVmFsdWUiLCJzdWIiLCJfZXJyb3IyIiwiZXJyb3IyIiwiYm90aCIsImhhc1ZhbHVlIiwiY2xvc2VkIiwid2l0aENsb3NlZCIsImRvQ2xlYW51cCIsIl9lcnJvcjMiLCJpc1VuY2F1Z2h0VGhyb3duRXJyb3IiLCJfc3Vic2NyaWJlIiwiX3RoaXM2IiwibWFwVmFsdWUiLCJfdGhpczciLCJzdWJzY3JpcHRpb25zIiwiX3N1YiIsInNwbGljZSIsIl90aGlzOCIsInRpbWVvdXQiLCJ0b1Byb21pc2UiLCJfdGhpczkiLCJyZWplY3QiLCJyZXNvbHZlZCIsInR0bCIsIl9yZXNwb25zZXMiLCJfc2l6ZSIsIl90dGwiLCJxdWVyeUlEIiwiZ2V0Q2FjaGVLZXkiLCJmZXRjaFRpbWUiLCJleHRlbnNpb25zIiwiY2FjaGVUaW1lc3RhbXAiLCJGUkFHTUVOVCIsIlJFUVVFU1QiLCJJTkxJTkVfREFUQV9GUkFHTUVOVCIsIl9mcmFnbWVudCRtZXRhZGF0YSIsIl9mcmFnbWVudCRtZXRhZGF0YTIiLCJzdHJpbmdzIiwicHJlbG9hZGFibGVRdWVyeVJlZ2lzdHJ5IiwiX3ByZWxvYWRhYmxlUXVlcmllcyIsIl9jYWxsYmFja3MiLCJjYWxsYmFja3MiLCJfdGhpcyRfY2FsbGJhY2tzJGdldCIsImdldE5ldHdvcmtPYnNlcnZhYmxlIiwicXVlcnlOb2RlIiwicmVhZERhdGEiLCJyZXF1ZXN0Q2FjaGVzQnlFbnZpcm9ubWVudCIsImdldFJlcXVlc3RDYWNoZSIsImNhY2hlZFJlcXVlc3QiLCJzdWJqZWN0Rm9ySW5GbGlnaHRTdGF0dXMiLCJjYWNoZWRSZXEiLCJnZXRDYWNoZWRSZXF1ZXN0IiwiY2FjaGVkUmVxdWVzdEluc3RhbmNlIiwiZ2V0T2JzZXJ2ZXJDb3VudCIsImdldE9ic2VydmFibGVGb3JDYWNoZWRSZXF1ZXN0IiwiZ2V0QWN0aXZlU3RhdHVzT2JzZXJ2YWJsZUZvckNhY2hlZFJlcXVlc3QiLCJpc1JlcXVlc3RBY3RpdmUiLCJyZXNvbHZlT25OZXh0IiwiUFJFRklYIiwibG9jYWxJRCIsIlJlbGF5U3RvcmVSZWFjdEZsaWdodFV0aWxzIiwiY2xvbmVSZWxheUhhbmRsZVNvdXJjZUZpZWxkIiwiY2xvbmVSZWxheVNjYWxhckhhbmRsZVNvdXJjZUZpZWxkIiwiZ2V0T3BlcmF0aW9uIiwiVU5LTk9XTiIsImdlbmVyYXRlVHlwZUlEIiwiZ2V0QXJndW1lbnRWYWx1ZXMiLCJEYXRhQ2hlY2tlciIsImhhbmRsZXJzIiwib3BlcmF0aW9uTG9hZGVyIiwic2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMiLCJfbW9zdFJlY2VudGx5SW52YWxpZGF0ZWRBdCIsIl9oYW5kbGVycyIsIl9vcGVyYXRpb25Mb2FkZXIiLCJfcmVjb3JkU291cmNlUHJveHkiLCJfcmVjb3JkV2FzTWlzc2luZyIsIl92YXJpYWJsZXMiLCJfc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMiLCJfdHJhdmVyc2UiLCJtb3N0UmVjZW50bHlJbnZhbGlkYXRlZEF0IiwiX2dldFZhcmlhYmxlVmFsdWUiLCJfaGFuZGxlTWlzc2luZyIsIl9nZXREYXRhRm9ySGFuZGxlcnMiLCJfaGFuZGxlTWlzc2luZ1NjYWxhckZpZWxkIiwiYWxpYXMiLCJfdGhpcyRfZ2V0RGF0YUZvckhhbmQiLCJuZXdWYWx1ZSIsIl9oYW5kbGVNaXNzaW5nTGlua0ZpZWxkIiwiX3RoaXMkX2dldERhdGFGb3JIYW5kMiIsIl9oYW5kbGVNaXNzaW5nUGx1cmFsTGlua0ZpZWxkIiwiX3RoaXMkX2dldERhdGFGb3JIYW5kMyIsImludmFsaWRhdGVkQXQiLCJnZXRJbnZhbGlkYXRpb25FcG9jaCIsIl90cmF2ZXJzZVNlbGVjdGlvbnMiLCJfY2hlY2tTY2FsYXIiLCJfY2hlY2tQbHVyYWxMaW5rIiwiX2NoZWNrTGluayIsInBhc3NpbmdWYWx1ZSIsImFic3RyYWN0S2V5IiwiRU5BQkxFX1BSRUNJU0VfVFlQRV9SRUZJTkVNRU5UIiwicmVjb3JkVHlwZSIsInR5cGVJRCIsImltcGxlbWVudHNJbnRlcmZhY2UiLCJoYW5kbGVGaWVsZCIsIl9oYW5kbGVGaWVsZCIsIl9jaGVja01vZHVsZUltcG9ydCIsInJlY29yZFdhc01pc3NpbmciLCJfYWJzdHJhY3RLZXkiLCJfcmVjb3JkVHlwZSIsIl90eXBlSUQiLCJFTkFCTEVfUkVBQ1RfRkxJR0hUX0NPTVBPTkVOVF9GSUVMRCIsIl9jaGVja0ZsaWdodEZpZWxkIiwibW9kdWxlSW1wb3J0Iiwib3BlcmF0aW9uS2V5IiwiZG9jdW1lbnROYW1lIiwib3BlcmF0aW9uUmVmZXJlbmNlIiwibm9ybWFsaXphdGlvblJvb3ROb2RlIiwiZmllbGRWYWx1ZSIsInRyZWUiLCJSRUFDVF9GTElHSFRfVFJFRV9TVE9SQUdFX0tFWSIsInJlYWNoYWJsZUV4ZWN1dGFibGVEZWZpbml0aW9ucyIsIlJFQUNUX0ZMSUdIVF9FWEVDVVRBQkxFX0RFRklOSVRJT05TX1NUT1JBR0VfS0VZIiwicHJldlZhcmlhYmxlcyIsImRlZmluaXRpb24iLCJSZWxheVJlc3BvbnNlTm9ybWFsaXplciIsIkV4ZWN1dG9yIiwib3BlcmF0aW9uRXhlY3V0aW9ucyIsIm9wdGltaXN0aWNDb25maWciLCJwdWJsaXNoUXVldWUiLCJzY2hlZHVsZXIiLCJvcGVyYXRpb25UcmFja2VyIiwidHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsIiwiaXNDbGllbnRQYXlsb2FkIiwicmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyIiwicmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXIiLCJfdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsIiwiX2luY3JlbWVudGFsUGF5bG9hZHNQZW5kaW5nIiwiX2luY3JlbWVudGFsUmVzdWx0cyIsIl9uZXh0U3Vic2NyaXB0aW9uSWQiLCJfb3BlcmF0aW9uIiwiX29wZXJhdGlvbkV4ZWN1dGlvbnMiLCJfb3BlcmF0aW9uVHJhY2tlciIsIl9vcGVyYXRpb25VcGRhdGVFcG9jaHMiLCJfb3B0aW1pc3RpY1VwZGF0ZXMiLCJfcGVuZGluZ01vZHVsZVBheWxvYWRzQ291bnQiLCJfcHVibGlzaFF1ZXVlIiwiX3NjaGVkdWxlciIsIl9zdGF0ZSIsIl9zdG9yZSIsIl9zdWJzY3JpcHRpb25zIiwiX3VwZGF0ZXIiLCJfaXNDbGllbnRQYXlsb2FkIiwiX3JlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplciIsIl9yZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlciIsIl9pc1N1YnNjcmlwdGlvbk9wZXJhdGlvbiIsIl9jb21wbGV0ZSIsIl9uZXh0IiwiX3N0YXJ0IiwiX3Byb2Nlc3NPcHRpbWlzdGljUmVzcG9uc2UiLCJjYW5jZWwiLCJvcHRpbWlzdGljVXBkYXRlcyIsInJldmVydFVwZGF0ZSIsInJ1biIsIl9jb21wbGV0ZU9wZXJhdGlvblRyYWNrZXIiLCJfcmV0YWluRGlzcG9zYWJsZSIsIl91cGRhdGVBY3RpdmVTdGF0ZSIsImFjdGl2ZVN0YXRlIiwiX3NjaGVkdWxlIiwidGFzayIsIl9pZDIiLCJjYW5jZWxsYXRpb25Ub2tlbiIsInNjaGVkdWxlIiwiX2lkIiwiX2hhbmRsZU5leHQiLCJfbWF5YmVDb21wbGV0ZVN1YnNjcmlwdGlvbk9wZXJhdGlvblRyYWNraW5nIiwiX2hhbmRsZUVycm9yUmVzcG9uc2UiLCJyZXNwb25zZXMiLCJyZXN1bHRzIiwibWVzc2FnZXMiLCJyZXNwb25zZVdpdGhEYXRhIiwiX2hhbmRsZU9wdGltaXN0aWNSZXNwb25zZXMiLCJfcmVzcG9uc2UkZXh0ZW5zaW9ucyIsInJlc3BvbnNlUGFydCIsIl9yZXNwb25zZVBhcnQkZXh0ZW5zaSIsImlzT3B0aW1pc3RpYyIsInJlc3BvbnNlc1dpdGhEYXRhIiwiX3gkZXh0ZW5zaW9ucyIsImlzX2ZpbmFsIiwiX3BhcnRpdGlvbkdyYXBoUUxSZXNwIiwibm9uSW5jcmVtZW50YWxSZXNwb25zZXMiLCJpbmNyZW1lbnRhbFJlc3BvbnNlcyIsImxhYmVsIiwicGFydGl0aW9uR3JhcGhRTFJlc3BvbnNlcyIsImhhc05vbkluY3JlbWVudGFsUmVzcG9uc2VzIiwicGF5bG9hZEZvbGxvd3VwcyIsIl9wcm9jZXNzUmVzcG9uc2VzIiwiRU5BQkxFX0JBVENIRURfU1RPUkVfVVBEQVRFUyIsInVwZGF0ZWRPd25lcnMiLCJfdXBkYXRlT3BlcmF0aW9uVHJhY2tlciIsIl9wcm9jZXNzUGF5bG9hZEZvbGxvd3VwcyIsIl9wYXlsb2FkRm9sbG93dXBzIiwiX3Byb2Nlc3NJbmNyZW1lbnRhbFJlc3BvbnNlcyIsIl91cGRhdGVkT3duZXJzIiwiRU5BQkxFX1VOSVFVRV9TVUJTQ1JJUFRJT05fUk9PVCIsIl9fcmVsYXlfc3Vic2NyaXB0aW9uX3Jvb3RfaWQiLCJfdXBkYXRlZE93bmVyczIiLCJub3JtYWxpemVSZXNwb25zZSIsInZhbGlkYXRlT3B0aW1pc3RpY1Jlc3BvbnNlUGF5bG9hZCIsIl9wcm9jZXNzT3B0aW1pc3RpY0ZvbGxvd3VwcyIsImluY3JlbWVudGFsUGxhY2Vob2xkZXJzIiwibW9kdWxlSW1wb3J0UGF5bG9hZHMiLCJpc0ZpbmFsIiwiYXBwbHlVcGRhdGUiLCJtb2R1bGVJbXBvcnRQYXlsb2FkIiwiX3Byb2Nlc3NBc3luY09wdGltaXN0aWNNb2R1bGVJbXBvcnQiLCJtb2R1bGVJbXBvcnRPcHRpbWlzdGljVXBkYXRlcyIsIl9wcm9jZXNzT3B0aW1pc3RpY01vZHVsZUltcG9ydCIsIl9ub3JtYWxpemVNb2R1bGVJbXBvcnQiLCJtb2R1bGVQYXlsb2FkIiwiX3RoaXMkX29wdGltaXN0aWNVcGRhIiwicGF5bG9hZFBhcnQiLCJyZWxheVBheWxvYWQiLCJjb21taXRQYXlsb2FkIiwicGF5bG9hZHMiLCJfcHJvY2Vzc01vZHVsZUltcG9ydFBheWxvYWQiLCJpbmNyZW1lbnRhbFBsYWNlaG9sZGVyIiwiX3Byb2Nlc3NJbmNyZW1lbnRhbFBsYWNlaG9sZGVyIiwicmVsYXlQYXlsb2FkcyIsInBsYWNlaG9sZGVyIiwiX3Byb2Nlc3NEZWZlclJlc3BvbnNlIiwiX3RoaXMxMCIsIl9oYW5kbGVNb2R1bGVJbXBvcnRQYXlsb2FkIiwiX2lkMyIsImRlY3JlbWVudFBlbmRpbmdDb3VudCIsIl9lcnJvcjQiLCJfcmVsYXlQYXlsb2FkJGZpZWxkUGEiLCJwYXRoS2V5IiwicmVzdWx0Rm9yTGFiZWwiLCJyZXN1bHRGb3JQYXRoIiwicGVuZGluZ1Jlc3BvbnNlcyIsIm5leHRQYXJlbnRSZWNvcmQiLCJuZXh0UGFyZW50UGF5bG9hZHMiLCJwYXJlbnRSZWNvcmQiLCJwYXJlbnRQYXlsb2FkcyIsImZpZWxkSUQiLCJwcmV2aW91c1BhcmVudEVudHJ5IiwiaGFuZGxlUGF5bG9hZHMiLCJkZWR1cGVQYXlsb2FkIiwiX0pTT04kc3RyaW5naWZ5IiwiX3RoaXMxMSIsImluY3JlbWVudGFsUmVzcG9uc2UiLCJfcGF0aEtleSIsIl9yZXN1bHRGb3JQYXRoIiwiX3BsYWNlaG9sZGVyIiwiX3Byb2Nlc3NTdHJlYW1SZXNwb25zZSIsInBhcmVudEVudHJ5IiwiX3Jlc3BvbnNlJGV4dGVuc2lvbnMyIiwiaGFuZGxlRmllbGRzUmVsYXlQYXlsb2FkIiwiX3RoaXMkX25vcm1hbGl6ZVN0cmVhIiwiX25vcm1hbGl6ZVN0cmVhbUl0ZW0iLCJpdGVtSUQiLCJpdGVtSW5kZXgiLCJjdXJyZW50UGFyZW50UmVjb3JkIiwiY3VycmVudEl0ZW1zIiwiY3VycmVudEl0ZW0iLCJuZXh0SXRlbXMiLCJub3JtYWxpemF0aW9uUGF0aCIsIl9maWVsZCRhbGlhcyIsIl9maWVsZCRjb25jcmV0ZVR5cGUiLCJfdGhpcyRfZ2V0RGF0YUlEIiwicmVzcG9uc2VLZXkiLCJmaW5hbFBhdGhFbnRyeSIsInBhcnNlSW50IiwiY29uY3JldGVUeXBlIiwiX3Jlc3BvbnNlJGV4dGVuc2lvbnMzIiwibm9ybWFsaXplIiwiYXJndW1lbnRWYXJpYWJsZXMiLCJhcmd1bWVudERlZmluaXRpb25zIiwib3BlcmF0aW9uVmFyaWFibGVzIiwiZGVmIiwiT3BlcmF0aW9uRXhlY3V0b3IiLCJSZWxheVB1Ymxpc2hRdWV1ZSIsImRlZmF1bHRHZXREYXRhSUQiLCJkZWZhdWx0UmVxdWlyZWRGaWVsZExvZ2dlciIsImdlbmVyYXRlSUQiLCJfY29uZmlnJGxvZyIsIl9jb25maWckcmVxdWlyZWRGaWVsZCIsIl9jb25maWckVU5TVEFCTEVfZGVmYSIsIl9jb25maWckZ2V0RGF0YUlEIiwiX2NvbmZpZyRoYW5kbGVyUHJvdmlkIiwiX2NvbmZpZyRzY2hlZHVsZXIiLCJfY29uZmlnJGlzU2VydmVyIiwiX2NvbmZpZyRvcGVyYXRpb25UcmFjIiwiY29uZmlnTmFtZSIsInJlcXVpcmVkRmllbGRMb2dnZXIiLCJfZGVmYXVsdFJlbmRlclBvbGljeSIsIlVOU1RBQkxFX2RlZmF1bHRSZW5kZXJQb2xpY3kiLCJFTkFCTEVfUEFSVElBTF9SRU5ERVJJTkdfREVGQVVMVCIsIl9uZXR3b3JrIiwiX193cmFwTmV0d29ya1dpdGhMb2dPYnNlcnZlciIsIm5ldHdvcmsiLCJfaXNTZXJ2ZXIiLCJfX3NldE5ldCIsIm5ld05ldCIsIl9nbG9iYWwiLCJkZXZUb29sc0hvb2siLCJfX1JFTEFZX0RFVlRPT0xTX0hPT0tfXyIsInJlZ2lzdGVyRW52aXJvbm1lbnQiLCJfbWlzc2luZ0ZpZWxkSGFuZGxlcnMiLCJtaXNzaW5nRmllbGRIYW5kbGVycyIsInJlcXVlc3RJZGVudGlmaWVyIiwib3B0aW1pc3RpY1VwZGF0ZSIsIl9zY2hlZHVsZVVwZGF0ZXMiLCJyZXBsYWNlVXBkYXRlIiwibmV3VXBkYXRlIiwiX2V4ZWN1dGUiLCJjcmVhdGVTb3VyY2UiLCJfY2hlY2tTZWxlY3RvckFuZEhhbmRsZU1pc3NpbmdGaWVsZHMiLCJjb21taXRTb3VyY2UiLCJfcmVmMyIsInRvSlNPTiIsIl90aGlzJGNvbmZpZ05hbWUiLCJfcmVmNCIsImV4ZWN1dG9yIiwidGhhdCIsInRyYW5zYWN0aW9uSUQiLCJsb2dPYnNlcnZlciIsIlJlbGF5TW9kZXJuRnJhZ21lbnRTcGVjUmVzb2x2ZXIiLCJfc3RhbGUiLCJfY2FsbGJhY2siLCJfZGF0YSIsIl9mcmFnbWVudHMiLCJfcHJvcHMiLCJfcmVzb2x2ZXJzIiwiX3Jvb3RJc1F1ZXJ5UmVuZGVyZXIiLCJkaXNwb3NlQ2FsbGJhY2siLCJfa2V5MiIsInByZXZJdGVtIiwibmV4dEl0ZW0iLCJwcm9wIiwiX25leHRJdGVtIiwib3duZWRTZWxlY3RvcnMiLCJfa2V5MyIsIm93bmVkU2VsZWN0b3IiLCJTZWxlY3Rvckxpc3RSZXNvbHZlciIsIl9vbkNoYW5nZSIsInNldFNlbGVjdG9yIiwiU2VsZWN0b3JSZXNvbHZlciIsIl9rZXk0IiwiX2lzTWlzc2luZ0RhdGEiLCJfbWlzc2luZ1JlcXVpcmVkRmllbGRzIiwiX3NlbGVjdG9yIiwiX3N1YnNjcmlwdGlvbiIsIl9wcm90bzIiLCJFTkFCTEVfUkVMQVlfQ09OVEFJTkVSU19TVVNQRU5TRSIsInJlcXVlc3REZXNjcmlwdG9yIiwiX3Byb3RvMyIsIm9wZXJhdGlvbkRlc2NyaXB0b3IiLCJJTlZBTElEQVRFRF9BVF9LRVkiLCJsaW5rcyIsIm1lcmdlIiwicmVjb3JkMSIsInJlY29yZDIiLCJwcmV2UmVjb3JkIiwibmV4dFJlY29yZCIsInVwZGF0ZWQiLCJJU19XSVRISU5fVU5NQVRDSEVEX1RZUEVfUkVGSU5FTUVOVCIsIm1peGVkT3duZXIiLCJpc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50IiwiaXRlbXMiLCJpZHMiLCJpdGVtVmFyaWFibGVzIiwidGhpc1NlbGVjdG9yIiwidGhhdFNlbGVjdG9yIiwiUmVsYXlPcHRpbWlzdGljUmVjb3JkU291cmNlIiwiUmVsYXlSZWFkZXIiLCJSZWxheVJlZmVyZW5jZU1hcmtlciIsIlJlbGF5U3RvcmVTdWJzY3JpcHRpb25zIiwiUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnNVc2luZ01hcEJ5SUQiLCJyZXNvbHZlSW1tZWRpYXRlIiwiX29wdGlvbnMkZ2NSZWxlYXNlQnVmIiwiX29wdGlvbnMkZ2NTY2hlZHVsZXIiLCJfb3B0aW9ucyRnZXREYXRhSUQiLCJfb3B0aW9ucyRsb2ciLCJfb3B0aW9ucyRvcGVyYXRpb25Mb2EiLCJfZ2NSdW4iLCJfZ2NTY2hlZHVsZXIiLCJfZ2NTdGVwIiwiX2N1cnJlbnRXcml0ZUVwb2NoIiwiX2djSG9sZENvdW50ZXIiLCJfZ2NSZWxlYXNlQnVmZmVyU2l6ZSIsImdjUmVsZWFzZUJ1ZmZlclNpemUiLCJnY1NjaGVkdWxlciIsIl9nbG9iYWxJbnZhbGlkYXRpb25FcG9jaCIsIl9pbnZhbGlkYXRpb25TdWJzY3JpcHRpb25zIiwiX2ludmFsaWRhdGVkUmVjb3JkSURzIiwiX3F1ZXJ5Q2FjaGVFeHBpcmF0aW9uVGltZSIsInF1ZXJ5Q2FjaGVFeHBpcmF0aW9uVGltZSIsIl9vcHRpbWlzdGljU291cmNlIiwiX3JlY29yZFNvdXJjZSIsIl9yZWxlYXNlQnVmZmVyIiwiX3Jvb3RzIiwiX3Nob3VsZFNjaGVkdWxlR0MiLCJfc3RvcmVTdWJzY3JpcHRpb25zIiwiRU5BQkxFX1NUT1JFX1NVQlNDUklQVElPTlNfUkVGQUNUT1IiLCJfdXBkYXRlZFJlY29yZElEcyIsInJvb3RSZWNvcmQiLCJpbml0aWFsaXplUmVjb3JkU291cmNlIiwiZ2V0U291cmNlIiwiX3RoaXMkX29wdGltaXN0aWNTb3VyIiwiX3RoaXMkX29wdGltaXN0aWNTb3VyMiIsIl9vcHRpb25zJHRhcmdldCIsIl9vcHRpb25zJGhhbmRsZXJzIiwiZ2xvYmFsSW52YWxpZGF0aW9uRXBvY2giLCJyb290RW50cnkiLCJvcGVyYXRpb25MYXN0V3JpdHRlbkF0IiwiZXBvY2giLCJvcGVyYXRpb25BdmFpbGFiaWxpdHkiLCJvcGVyYXRpb25GZXRjaFRpbWUiLCJnZXRBdmFpbGFiaWxpdHlTdGF0dXMiLCJyZWZDb3VudCIsInNjaGVkdWxlR0MiLCJub3RpZnkiLCJzb3VyY2VPcGVyYXRpb24iLCJ1cGRhdGVTdWJzY3JpcHRpb25zIiwiX3VwZGF0ZUludmFsaWRhdGlvblN1YnNjcmlwdGlvbiIsInVwZGF0ZWRSZWNvcmRJRHMiLCJpbnZhbGlkYXRlZFJlY29yZElEcyIsInRlbXBvcmFyeVJvb3RFbnRyeSIsInB1Ymxpc2giLCJpZHNNYXJrZWRGb3JJbnZhbGlkYXRpb24iLCJfdGhpcyRfb3B0aW1pc3RpY1NvdXIzIiwiY3VycmVudFdyaXRlRXBvY2giLCJ0YXJnZXRSZWNvcmQiLCJSRUFDVF9GTElHSFRfVFlQRV9OQU1FIiwidXBkYXRlVGFyZ2V0RnJvbVNvdXJjZSIsIm9wdGltaXN0aWMiLCJob2xkR0MiLCJfX2dldFVwZGF0ZWRSZWNvcmRJRHMiLCJpbnZhbGlkYXRpb25zIiwiX1JlbGF5TW9kZXJuUmVjb3JkJGdlIiwiY2hlY2tJbnZhbGlkYXRpb25TdGF0ZSIsInByZXZJbnZhbGlkYXRpb25TdGF0ZSIsImN1cnJlbnRJbnZhbGlkYXRpb25zIiwicHJldkludmFsaWRhdGlvbnMiLCJpbnZhbGlkYXRlZFN0b3JlIiwic25hcHNob3RTdWJzY3JpcHRpb25zIiwicmVzdG9yZSIsInJlc3RvcmVTdWJzY3JpcHRpb25zIiwiX2NvbGxlY3QiLCJfX2djIiwiZ2NSdW4iLCJzdGFydEVwb2NoIiwicmVmZXJlbmNlcyIsIm1hcmsiLCJzdG9yZUlEcyIsInJlbW92ZSIsIl9vd25lcnNUb1BlbmRpbmdPcGVyYXRpb25zSWRlbnRpZmllciIsIl9wZW5kaW5nT3BlcmF0aW9uc1RvT3duZXJzSWRlbnRpZmllciIsIl9vd25lcnNJZGVudGlmaWVyVG9Qcm9taXNlIiwicGVuZGluZ09wZXJhdGlvbiIsImFmZmVjdGVkT3duZXJzIiwicGVuZGluZ09wZXJhdGlvbklkZW50aWZpZXIiLCJuZXdseUFmZmVjdGVkT3duZXJzSWRlbnRpZmllciIsIm93bmVySWRlbnRpZmllciIsInBlbmRpbmdPcGVyYXRpb25zQWZmZWN0aW5nT3duZXIiLCJvd25lcnNBZmZlY3RlZEJ5T3BlcmF0aW9uSWRlbnRpZmllciIsIl9vd25lcklkZW50aWZpZXIiLCJfcmVzb2x2ZU93bmVyUmVzb2x2ZXJzIiwiYWZmZWN0ZWRPd25lcnNJZGVudGlmaWVyIiwiY29tcGxldGVkT3duZXJzSWRlbnRpZmllciIsInVwZGF0ZWRPd25lcnNJZGVudGlmaWVyIiwiX293bmVySWRlbnRpZmllcjIiLCJfb3duZXJJZGVudGlmaWVyMyIsInByb21pc2VFbnRyeSIsImNhY2hlZFByb21pc2VFbnRyeSIsIlVOUFVCTElTSF9SRUNPUkRfU0VOVElORUwiLCJfX1VOUFVCTElTSF9SRUNPUkRfU0VOVElORUwiLCJtZXJnZWQiLCJfZ2xvYmFsJEVycm9yVXRpbHMkYXAiLCJfZ2xvYmFsJEVycm9yVXRpbHMiLCJhcHBseVdpdGhHdWFyZCIsIkVycm9yVXRpbHMiLCJfaGFzU3RvcmVTbmFwc2hvdCIsIl9wZW5kaW5nQmFja3VwUmViYXNlIiwiX3BlbmRpbmdEYXRhIiwiX3BlbmRpbmdPcHRpbWlzdGljVXBkYXRlcyIsIl9hcHBsaWVkT3B0aW1pc3RpY1VwZGF0ZXMiLCJfZ2NIb2xkIiwicmV2ZXJ0QWxsIiwiX2NvbW1pdERhdGEiLCJfYXBwbHlVcGRhdGVzIiwiX3B1Ymxpc2hTb3VyY2VGcm9tUGF5bG9hZCIsInBlbmRpbmdQYXlsb2FkIiwicmVjb3JkU291cmNlUHJveHkiLCJsb29rdXBTZWxlY3RvciIsInBheWxvYWRJbnZhbGlkYXRlZFN0b3JlIiwicHJvY2Vzc1VwZGF0ZSIsInN0b3JlVXBkYXRlciIsInNlbGVjdG9yRGF0YSIsInJlY29yZFNvdXJjZVNlbGVjdG9yUHJveHkiLCJJTkxJTkVfREFUQV9GUkFHTUVOVF9TUFJFQUQiLCJSRVFVSVJFRF9GSUVMRCIsIlJFTEFZX1JFU09MVkVSIiwiZ2V0UmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZSIsIkZSQUdNRU5UX1BST1BfTkFNRV9LRVkiLCJNT0RVTEVfQ09NUE9ORU5UX0tFWSIsIndpdGhSZXNvbHZlckNvbnRleHQiLCJfaXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudCIsIl9zZWVuUmVjb3JkcyIsIl90aGlzJF9zZWxlY3RvciIsImlzRGF0YUV4cGVjdGVkVG9CZVByZXNlbnQiLCJ0eXBlUmVjb3JkIiwiX21heWJlUmVwb3J0VW5leHBlY3RlZE51bGwiLCJmaWVsZFBhdGgiLCJfdGhpcyRfbWlzc2luZ1JlcXVpcmUiLCJmaWVsZHMiLCJFTkFCTEVfUkVRVUlSRURfRElSRUNUSVZFUyIsIl9yZWFkUmVxdWlyZWRGaWVsZCIsIl9yZWFkU2NhbGFyIiwiX3JlYWRQbHVyYWxMaW5rIiwiX3JlYWRMaW5rIiwicGFyZW50SXNNaXNzaW5nRGF0YSIsInBhcmVudElzV2l0aGluVW5tYXRjaGVkVHlwZVJlZmluZW1lbnQiLCJfdHlwZU5hbWUiLCJFTkFCTEVfUkVMQVlfUkVTT0xWRVJTIiwiX3JlYWRSZXNvbHZlckZpZWxkIiwiX2NyZWF0ZUZyYWdtZW50UG9pbnRlciIsIl9yZWFkTW9kdWxlSW1wb3J0IiwiX2NyZWF0ZUlubGluZURhdGFPclJlc29sdmVyRnJhZ21lbnRQb2ludGVyIiwiX2hhc0V4cGVjdGVkRGF0YTIiLCJfcmVhZEZsaWdodEZpZWxkIiwicmVzb2x2ZXJNb2R1bGUiLCJyZXNvbHZlclJlc3VsdCIsImdldERhdGFGb3JSZXNvbHZlckZyYWdtZW50Iiwic2luZ3VsYXJSZWFkZXJTZWxlY3RvciIsIl9yZXNvbHZlckZyYWdtZW50RGF0YSIsInJlc29sdmVyRnJhZ21lbnREYXRhIiwiYW5zd2VyIiwiYXBwbGljYXRpb25OYW1lIiwicmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZElEIiwicmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZCIsImNsaWVudFJlc3BvbnNlIiwiX2ZpZWxkJGFsaWFzMiIsIl9maWVsZCRhbGlhczMiLCJfZmllbGQkYWxpYXM0IiwibGlua2VkQXJyYXkiLCJuZXh0SW5kZXgiLCJjb21wb25lbnRLZXkiLCJmcmFnbWVudFByb3BOYW1lIiwiZnJhZ21lbnRTcHJlYWQiLCJmcmFnbWVudFBvaW50ZXJzIiwiZnJhZ21lbnRTcHJlYWRPckZyYWdtZW50IiwiaW5saW5lRGF0YSIsIlJlbGF5UmVjb3JkU291cmNlTWFwSW1wbCIsIlJlbGF5UmVjb3JkU3RhdGUiLCJSZWxheU1hcFJlY29yZFNvdXJjZU1hcEltcGwiLCJfcmVjb3JkcyIsIl9zdGVwJHZhbHVlIiwiX29wZXJhdGlvbk5hbWUiLCJfcmVmZXJlbmNlcyIsIl90cmF2ZXJzZVBsdXJhbExpbmsiLCJfdHJhdmVyc2VMaW5rIiwiX3R5cGVOYW1lMiIsIl90cmF2ZXJzZU1vZHVsZUltcG9ydCIsIl90cmF2ZXJzZUZsaWdodEZpZWxkIiwicmVmaW5lVG9SZWFjdEZsaWdodFBheWxvYWREYXRhIiwiX3JlcXVpcmU1IiwiZ2V0SGFuZGxlU3RvcmFnZUtleSIsIl9yZXF1aXJlNiIsIlRZUEVfU0NIRU1BX1RZUEUiLCJfZ2V0RGF0YUlkIiwiX2hhbmRsZUZpZWxkUGF5bG9hZHMiLCJfaW5jcmVtZW50YWxQbGFjZWhvbGRlcnMiLCJfaXNDbGllbnRFeHRlbnNpb24iLCJfaXNVbm1hdGNoZWRBYnN0cmFjdFR5cGUiLCJfbW9kdWxlSW1wb3J0UGF5bG9hZHMiLCJfcGF0aCIsIl9nZXRSZWNvcmRUeXBlIiwiX25vcm1hbGl6ZUZpZWxkIiwiX2ltcGxlbWVudHNJbnRlcmZhY2UiLCJwYXJlbnRJc1VubWF0Y2hlZEFic3RyYWN0VHlwZSIsIl9pbXBsZW1lbnRzSW50ZXJmYWNlMiIsIl90eXBlTmFtZTMiLCJfdHlwZVJlY29yZCIsIl9ub3JtYWxpemVEZWZlciIsIl9ub3JtYWxpemVTdHJlYW0iLCJpc0NsaWVudEV4dGVuc2lvbiIsIl9ub3JtYWxpemVGbGlnaHRGaWVsZCIsImRlZmVyIiwiY29tcG9uZW50UmVmZXJlbmNlIiwiX25vcm1hbGl6ZVBsdXJhbExpbmsiLCJfbm9ybWFsaXplTGluayIsInJlYWN0RmxpZ2h0UGF5bG9hZCIsInJlYWN0RmxpZ2h0SUQiLCJyZWFjdEZsaWdodENsaWVudFJlc3BvbnNlIiwiX190eXBlbmFtZSIsIl90eXBlTmFtZTQiLCJfZmllbGQkY29uY3JldGVUeXBlMiIsIl90eXBlTmFtZTUiLCJfdmFsaWRhdGVSZWNvcmRUeXBlIiwiX2ZpZWxkJGNvbmNyZXRlVHlwZTMiLCJfdmFsaWRhdGVDb25mbGljdGluZ0ZpZWxkc1dpdGhJZGVudGljYWxJZCIsIl92YWxpZGF0ZUNvbmZsaWN0aW5nTGlua2VkRmllbGRzV2l0aElkZW50aWNhbElkIiwicHJldklEIiwiaGFzT3ZlcmxhcHBpbmdJRHMiLCJiYWNrdXAiLCJzdGFsZSIsImhhc1VwZGF0ZWRSZWNvcmRzIiwiX3VwZGF0ZVN1YnNjcmlwdGlvbiIsImhhc092ZXJsYXBwaW5nVXBkYXRlcyIsIm5leHRTbmFwc2hvdCIsIkVOQUJMRV9OT1RJRllfU1VCU0NSSVBUSU9OIiwiX25vdGlmaWVkUmV2aXNpb24iLCJfc25hcHNob3RSZXZpc2lvbiIsIl9zdWJzY3JpcHRpb25zQnlEYXRhSWQiLCJfc3RhbGVTdWJzY3JpcHRpb25zIiwibm90aWZpZWRSZXZpc2lvbiIsInNuYXBzaG90UmV2aXNpb24iLCJkYXRhSWQiLCJzdWJzY3JpcHRpb25zRm9yRGF0YUlkIiwicHJldlNlZW5SZWNvcmRzIiwiX3VwZGF0ZVN1YnNjcmlwdGlvbnNNYXAiLCJ1cGRhdGVkUmVjb3JkSWQiLCJzdWJjcmlwdGlvbnNGb3JEYXRhSWQiLCJfZGF0YUlkIiwiX3N1YnNjcmlwdGlvbnNGb3JEYXRhSWQiLCJWQVJJQUJMRSIsIkxJVEVSQUwiLCJPQkpFQ1RfVkFMVUUiLCJMSVNUX1ZBTFVFIiwiZ2V0QXJndW1lbnRWYWx1ZSIsImdldFN0YWJsZVZhcmlhYmxlVmFsdWUiLCJ2YXJpYWJsZU5hbWUiLCJfdmFsdWUiLCJmb3JtYXRTdG9yYWdlS2V5IiwiYXJnVmFsdWVzIiwiYXJnTmFtZSIsImR5bmFtaWNLZXkiLCJoYW5kbGVOYW1lIiwiZmlsdGVyQXJncyIsImNvbnRleHRTdGFjayIsInJlYWRGcmFnbWVudCIsImlzVHlwZUlEIiwic291cmNlRmllbGQiLCJmaXJzdFJlYWN0IiwicmVhY3QiLCJJVEVSQVRPUl9LRVkiLCJCb29sZWFuIiwiX2ZyYWdtZW50UmVmJEZSQUdNRU5UIiwiaW5saW5lRGF0YUZyYWdtZW50IiwiX3Jlc3BvbnNlcyQiLCJfcmVzcG9uc2VzJCRleHRlbnNpb24iLCJfcmVzcG9uc2VzJGV4dGVuc2lvbnMiLCJMT0NBTF9BUkdVTUVOVCIsIk9QRVJBVElPTiIsIlJPT1RfQVJHVU1FTlQiLCJTUExJVF9PUEVSQVRJT04iLCJjcmVhdGVFcnJvciIsIm1lc3NhZ2VGb3JtYXQiLCJfbGVuIiwibWVzc2FnZVBhcmFtcyIsInRhYWxPcGNvZGVzIiwiX2xlbjIiLCJjcmVhdGVXYXJuaW5nIiwiX2xlbjMiLCJFTkFCTEVfVkFSSUFCTEVfQ09OTkVDVElPTl9LRVkiLCJFTkFCTEVfR0VURlJBR01FTlRJREVOVElGSUVSX09QVElNSVpBVElPTiIsIkVOQUJMRV9GUklFTkRMWV9RVUVSWV9OQU1FX0dRTF9VUkwiLCJFTkFCTEVfRE9fTk9UX1dSQVBfTElWRV9RVUVSWSIsInByb2ZpbGVIYW5kbGVyc0J5TmFtZSIsImRlZmF1bHRQcm9maWxlciIsInN0b3AiLCJwcm9maWxlIiwic3RvcEhhbmRsZXJzIiwic3RvcEhhbmRsZXIiLCJhdHRhY2hQcm9maWxlSGFuZGxlciIsImRldGFjaFByb2ZpbGVIYW5kbGVyIiwiX29ic2VydmFibGUiLCJfc2lua3MiLCJldmVudHMiLCJfZXZlbnRzIiwicHJvcGVydHkiLCJpc0Zyb3plbiIsImlzRW1wdHlPYmplY3QiLCJmcmFnbWVudE93bmVySWRlbnRpZmllciIsInNlbCIsInJlcXVlc3RJRCIsInZhbHVlQSIsInZhbHVlQiIsImhhc1dlYWtTZXREZWZpbmVkIiwiaGFzV2Vha01hcERlZmluZWQiLCJjYW5SZWN5Y2xlIiwicHJldkFycmF5IiwibmV4dEFycmF5IiwicmVkdWNlIiwid2FzRXF1YWwiLCJuZXh0VmFsdWUiLCJwcmV2T2JqZWN0IiwibmV4dE9iamVjdCIsInByZXZLZXlzIiwibmV4dEtleXMiLCJfbWlzc2luZ1JlcXVpcmVkRmllbGQiLCJyZXNvbHZlZFByb21pc2UiLCJ0aHJvd05leHQiLCJzdGFibGUiLCJwZXJmb3JtYW5jZSIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInRvU3RyaW5nVGFnIiwiYXN5bmMiLCJoZWFkZXJzIiwianNvbiIsIndhcm4iLCJmZXRjaEdyYXBoUUwiLCJfaW5oZXJpdHNMb29zZSIsImlzQWJzb2x1dGUiLCJwYXRobmFtZSIsInNwbGljZU9uZSIsImxpc3QiLCJhZGRMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJ1cCIsInBhcnQiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwibm90aWZ5TGlzdGVuZXJzIiwiY2FuVXNlRE9NIiwiZ2V0Q29uZmlybWF0aW9uIiwiY29uZmlybSIsIlBvcFN0YXRlRXZlbnQiLCJIYXNoQ2hhbmdlRXZlbnQiLCJnZXRIaXN0b3J5U3RhdGUiLCJoaXN0b3J5IiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJnbG9iYWxIaXN0b3J5IiwiY2FuVXNlSGlzdG9yeSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwiaGFuZGxlUG9wU3RhdGUiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImRlbHRhIiwiZ28iLCJyZXZlcnRQb3AiLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJjb21tb25qc0dsb2JhbCIsImNyZWF0ZUV2ZW50RW1pdHRlciIsIm9uIiwib2ZmIiwiY2hhbmdlZEJpdHMiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiX0NvbXBvbmVudCIsImVtaXR0ZXIiLCJvbGRWYWx1ZSIsIl9Db21wb25lbnQyIiwib25VcGRhdGUiLCJoaXN0b3J5Q29udGV4dCIsImNyZWF0ZU5hbWVkQ29udGV4dCIsImNyZWF0ZU5hbWVkQ29udGV4dCQxIiwiUm91dGVyIiwiX2lzTW91bnRlZCIsIl9wZW5kaW5nTG9jYXRpb24iLCJzdGF0aWNDb250ZXh0IiwiY29tcHV0ZVJvb3RNYXRjaCIsImlzRXhhY3QiLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIm1hdGNoZWQiLCJfY29tcGlsZVBhdGgiLCJwYXRoQ2FjaGUiLCJyZWdleHAiLCJjb21waWxlUGF0aCQxIiwiUm91dGUiLCJjb250ZXh0JDEiLCJjb21wdXRlZE1hdGNoIiwiU3dpdGNoIiwiQnJvd3NlclJvdXRlciIsInJlc29sdmVUb0xvY2F0aW9uIiwibm9ybWFsaXplVG9Mb2NhdGlvbiIsImZvcndhcmRSZWZTaGltIiwiTGlua0FuY2hvciIsImZvcndhcmRlZFJlZiIsImlubmVyUmVmIiwibmF2aWdhdGUiLCJfb25DbGljayIsInJlc3QiLCJleCIsImlzTW9kaWZpZWRFdmVudCIsIkxpbmsiLCJfcmVmMiRjb21wb25lbnQiLCJmb3J3YXJkUmVmU2hpbSQxIiwiZm9yd2FyZFJlZiQxIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJlc2NhcGVkUGF0aCIsImNsYXNzbmFtZXMiLCJqb2luQ2xhc3NuYW1lcyIsIkFQUF9ET01BSU4iLCJwcm9jZXNzIiwiT0FVVEhfTE9HSU5fVVJMIiwiR0lUSFVCX09BVVRIX0NMSUVOVF9JRCIsIm9wZW4iLCJoYW5kbGVQb3N0TWVzc2FnZSIsIm9yaWdpbiIsImFjY2Vzc1Rva2VuIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkNvbXAiLCJVUkxTZWFyY2hQYXJhbXMiLCJsb2dpbiIsIm9wZW5lciIsImNsb3NlIiwiRmFsbGJhY2siLCJxdWVzdGlvbiIsInRpdGxlIiwiY29udGVudCIsImFsbFF1ZXN0aW9ucyIsImNvbW1lbnQiLCJ1c2VyRW1haWwiLCJsaWtlIiwiZGlzbGlrZSIsInJlbmRlclF1ZXJ5IiwiY29tbWVudHMiLCJxdWVzdGlvbklkIiwiYm9va21hcmtzUXVlcnkiLCJCb29rbWFya3MiLCJib29rbWFya3NRdWVyeVJlZiIsImJvb2ttYXJrcyIsImJvb2ttYXJrIiwidXNlcklkIiwiRXhhbXBsZVBhZ2UiLCJDb21tZW50UGFnZSIsIkxvZ2luUGFnZSIsIkxvZ2luQ2FsbGJhY2tQYWdlIiwiQm9va21hcmtzUGFnZSIsInJvb3RFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsIlJlYWN0RE9NIl0sIm1hcHBpbmdzIjoiO3VFQXFDQSxNQUFNQSxFQTBCSyxDQUNILFNBQVksQ0FDUixvQkEzQkpDLEVBQUssQ0FDTCxDQUNJLGFBQWdCLEtBQ2hCLEtBQVEsZ0JBQ1IsS0FBUSxXQXdCUixLQUFRLFdBQ1IsU0FBWSxLQUNaLEtBQVEscUJBQ1IsV0FBYyxDQUNWLENBQ0ksTUFBUyxLQUNULEtBNUJiQyxFQUFLLENBQ0osQ0FDSSxLQUFRLFdBQ1IsS0FBUSxTQUNSLGFBQWdCLFdBeUJSLGFBQWdCLFdBQ2hCLEtBQVEsY0FDUixLQUFRLFlBQ1IsUUFBVSxFQUNWLFdBQWMsQ0EzQjNCQyxFQUFLLENBQ0osTUFBUyxLQUNULEtBQVEsS0FDUixLQUFRLGNBQ1IsS0FBUSxLQUNSLFdBQWMsTUF3QkUsQ0FDSSxNQUFTLEtBQ1QsS0FBUSxLQUNSLGFBQWdCLFdBQ2hCLEtBQVEsY0FDUixLQUFRLFdBQ1IsUUFBVSxFQUNWLFdBQWMsQ0E5QjVCQyxFQUFLLENBQ1gsTUFBUyxLQUNULEtBQVEsS0FDUixLQUFRLGNBQ1IsS0FBUSxVQUNSLFdBQWMsT0E0Qk0sV0FBYyxPQUd0QixXQUFjLE9BR3RCLEtBQVEsUUFDUixZQUFlLE1BRW5CLEtBQVEsVUFDUixVQUFhLENBQ1Qsb0JBQXdCSCxFQUN4QixLQUFRLFlBQ1IsS0FBUSxxQkFDUixXQUFjLENBQ1YsQ0FDSSxNQUFTLEtBQ1QsS0FBU0MsRUFDVCxhQUFnQixXQUNoQixLQUFRLGNBQ1IsS0FBUSxZQUNSLFFBQVUsRUFDVixXQUFjLENBQ1RDLEVBQ0QsQ0FDSSxNQUFTLEtBQ1QsS0FBUSxLQUNSLGFBQWdCLFdBQ2hCLEtBQVEsY0FDUixLQUFRLFdBQ1IsUUFBVSxFQUNWLFdBQWMsQ0FDVEMsRUFDQUQsR0FFTCxXQUFjLE9BR3RCLFdBQWMsUUFJMUIsT0FBVSxDQUNOLFFBQVcsbUNBQ1gsR0FBTSxLQUNOLFNBQVksR0FDWixLQUFRLHFCQUNSLGNBQWlCLFFBQ2pCLEtBQVEsc0pBcEdXLElBQ3ZCRixFQU1EQyxFQU1BQyxFQU1PQyxFQXFGYkosRUFBYUssS0FBTyxtQ0FDckIsVywwRENuR0EsTUFBTUwsRUFvQkssQ0FDSCxTQUFZLENBQ1Isb0JBckJKQyxFQUFLLENBQ0wsQ0FDSSxhQUFnQixLQUNoQixLQUFRLGdCQUNSLEtBQVEsZUFrQlIsS0FBUSxXQUNSLFNBQVksS0FDWixLQUFRLG1CQUNSLFdBQWMsQ0FDVixDQUNJLE1BQVMsS0FDVCxLQXRCYkMsRUFBSyxDQUNKLENBQ0ksS0FBUSxXQUNSLEtBQVEsYUFDUixhQUFnQixlQW1CUixhQUFnQixVQUNoQixLQUFRLGNBQ1IsS0FBUSxXQUNSLFFBQVUsRUFDVixXQUFjLENBckIzQkMsRUFBSyxDQUNKLE1BQVMsS0FDVCxLQUFRLEtBQ1IsS0FBUSxjQUNSLEtBQVEsS0FDUixXQUFjLE1Ba0JFLENBQ0ksS0FBUSxLQUNSLEtBQVEsaUJBQ1IsS0FBUSxvQkFHaEIsV0FBYyxPQUd0QixLQUFRLFFBQ1IsWUFBZSxNQUVuQixLQUFRLFVBQ1IsVUFBYSxDQUNULG9CQUF3QkYsRUFDeEIsS0FBUSxZQUNSLEtBQVEsbUJBQ1IsV0FBYyxDQUNWLENBQ0ksTUFBUyxLQUNULEtBQVNDLEVBQ1QsYUFBZ0IsVUFDaEIsS0FBUSxjQUNSLEtBQVEsV0FDUixRQUFVLEVBQ1YsV0FBYyxDQUNUQyxFQUNELENBQ0ksTUFBUyxLQUNULEtBQVEsS0FDUixLQUFRLGNBQ1IsS0FBUSxhQUNSLFdBQWMsTUFFbEIsQ0FDSSxNQUFTLEtBQ1QsS0FBUSxLQUNSLEtBQVEsY0FDUixLQUFRLFlBQ1IsV0FBYyxNQUVsQixDQUNJLE1BQVMsS0FDVCxLQUFRLEtBQ1IsS0FBUSxjQUNSLEtBQVEsWUFDUixXQUFjLE1BRWxCLENBQ0ksTUFBUyxLQUNULEtBQVEsS0FDUixLQUFRLGNBQ1IsS0FBUSxVQUNSLFdBQWMsTUFFbEIsQ0FDSSxNQUFTLEtBQ1QsS0FBUSxLQUNSLEtBQVEsY0FDUixLQUFRLE9BQ1IsV0FBYyxNQUVsQixDQUNJLE1BQVMsS0FDVCxLQUFRLEtBQ1IsS0FBUSxjQUNSLEtBQVEsVUFDUixXQUFjLE9BR3RCLFdBQWMsUUFJMUIsT0FBVSxDQUNOLFFBQVcsbUNBQ1gsR0FBTSxLQUNOLFNBQVksR0FDWixLQUFRLG1CQUNSLGNBQWlCLFFBQ2pCLEtBQVEsOFBBcEhXLElBQ3ZCRixFQU1EQyxFQU1BQyxFQTJHTkgsRUFBYUssS0FBTyxtQ0FDckIsVywwREM1SUEsTUE0REEsRUE1RDZCLENBQ3pCLG9CQUF1QixHQUN2QixLQUFRLFdBQ1IsU0FBWSxLQUNaLEtBQVEsa0JBQ1IsV0FBYyxDQUNWLENBQ0ksTUFBUyxLQUNULEtBQVEsS0FDUixLQUFRLGNBQ1IsS0FBUSxLQUNSLFdBQWMsTUFFbEIsQ0FDSSxNQUFTLEtBQ1QsS0FBUSxLQUNSLEtBQVEsY0FDUixLQUFRLGFBQ1IsV0FBYyxNQUVsQixDQUNJLE1BQVMsS0FDVCxLQUFRLEtBQ1IsS0FBUSxjQUNSLEtBQVEsWUFDUixXQUFjLE1BRWxCLENBQ0ksTUFBUyxLQUNULEtBQVEsS0FDUixLQUFRLGNBQ1IsS0FBUSxZQUNSLFdBQWMsTUFFbEIsQ0FDSSxNQUFTLEtBQ1QsS0FBUSxLQUNSLEtBQVEsY0FDUixLQUFRLFVBQ1IsV0FBYyxNQUVsQixDQUNJLE1BQVMsS0FDVCxLQUFRLEtBQ1IsS0FBUSxjQUNSLEtBQVEsT0FDUixXQUFjLE1BRWxCLENBQ0ksTUFBUyxLQUNULEtBQVEsS0FDUixLQUFRLGNBQ1IsS0FBUSxVQUNSLFdBQWMsT0FHdEIsS0FBUSxVQUNSLFlBQWUsS0FFbEJMLEtBQW9CLHFDLDBEQ2hEckIsTUFBTUEsRUFRSyxDQUNILFNBQVksQ0FDUixvQkFBdUIsR0FDdkIsS0FBUSxXQUNSLFNBQVksS0FDWixLQUFRLG1CQUNSLFdBQWMsQ0FDVixDQUNJLE1BQVMsS0FDVCxLQUFRLEtBQ1IsYUFBZ0IsV0FDaEIsS0FBUSxjQUNSLEtBQVEsZUFDUixRQUFVLEVBQ1YsV0FBYyxDQXJCMUJDLEVBQUssQ0FDTCxNQUFTLEtBQ1QsS0FBUSxLQUNSLEtBQVEsY0FDUixLQUFRLEtBQ1IsV0FBYyxNQWtCRSxDQUNJLEtBQVEsS0FDUixLQUFRLGlCQUNSLEtBQVEsc0JBR2hCLFdBQWMsT0FHdEIsS0FBUSxRQUNSLFlBQWUsTUFFbkIsS0FBUSxVQUNSLFVBQWEsQ0FDVCxvQkFBdUIsR0FDdkIsS0FBUSxZQUNSLEtBQVEsbUJBQ1IsV0FBYyxDQUNWLENBQ0ksTUFBUyxLQUNULEtBQVEsS0FDUixhQUFnQixXQUNoQixLQUFRLGNBQ1IsS0FBUSxlQUNSLFFBQVUsRUFDVixXQUFjLENBQ1RBLEVBQ0QsQ0FDSSxNQUFTLEtBQ1QsS0FBUSxLQUNSLEtBQVEsY0FDUixLQUFRLFFBQ1IsV0FBYyxNQUVsQixDQUNJLE1BQVMsS0FDVCxLQUFRLEtBQ1IsS0FBUSxjQUNSLEtBQVEsVUFDUixXQUFjLE9BR3RCLFdBQWMsUUFJMUIsT0FBVSxDQUNOLFFBQVcsbUNBQ1gsR0FBTSxLQUNOLFNBQVksR0FDWixLQUFRLG1CQUNSLGNBQWlCLFFBQ2pCLEtBQVEsb0tBNUVXLElBQ3ZCQSxFQStFUEQsRUFBYUssS0FBTyxtQ0FDckIsVywwREN0RkEsTUFBTUwsRUFpQ0ssQ0FDSCxTQUFZLENBQ1Isb0JBbENKQyxFQUFLLENBQ0wsQ0FDSSxhQUFnQixLQUNoQixLQUFRLGdCQUNSLEtBQVEsU0ErQlIsS0FBUSxXQUNSLFNBQVksS0FDWixLQUFRLHlCQUNSLFdBaENMQyxFQUFLLENBQ0osQ0FDSSxNQUFTLEtBQ1QsS0FBUSxDQUNKLENBQ0ksS0FBUSxXQUNSLEtBQVEsT0FDUixhQUFnQixTQUd4QixhQUFnQixPQUNoQixLQUFRLGNBQ1IsS0FBUSxRQUNSLFFBQVUsRUFDVixXQUFjLENBQ1YsQ0FDSSxNQUFTLEtBQ1QsS0FBUSxLQUNSLEtBQVEsY0FDUixLQUFRLGNBQ1IsV0FBYyxPQUd0QixXQUFjLE9BVWQsS0FBUSxXQUNSLFlBQWUsTUFFbkIsS0FBUSxVQUNSLFVBQWEsQ0FDVCxvQkFBd0JELEVBQ3hCLEtBQVEsWUFDUixLQUFRLHlCQUNSLFdBQWVDLEdBRW5CLE9BQVUsQ0FDTixRQUFXLG1DQUNYLEdBQU0sS0FDTixTQUFZLEdBQ1osS0FBUSx5QkFDUixjQUFpQixXQUNqQixLQUFRLCtHQXhEVyxJQUN2QkQsRUFNREMsRUFxRE5GLEVBQWFLLEtBQU8sbUNBQ3JCLFcsMERDdkVBLE1BZ0NBLEVBaEM2QixDQUN6QixvQkFBdUIsR0FDdkIsS0FBUSxXQUNSLFNBQVksS0FDWixLQUFRLG9CQUNSLFdBQWMsQ0FDVixDQUNJLE1BQVMsS0FDVCxLQUFRLEtBQ1IsS0FBUSxjQUNSLEtBQVEsS0FDUixXQUFjLE1BRWxCLENBQ0ksTUFBUyxLQUNULEtBQVEsS0FDUixLQUFRLGNBQ1IsS0FBUSxRQUNSLFdBQWMsTUFFbEIsQ0FDSSxNQUFTLEtBQ1QsS0FBUSxLQUNSLEtBQVEsY0FDUixLQUFRLFVBQ1IsV0FBYyxPQUd0QixLQUFRLFdBQ1IsWUFBZSxLQUVsQkwsS0FBb0IscUMsc0JDekNyQixJQUFJTSxFQUFhLEdBQ2JDLEVBQWEsR0FxQmpCLFNBQVNDLEVBQUdDLEVBQUdDLEVBQUdDLEVBQVFDLEdBQ3hCLEdBQUlILElBQU1DLEVBRVIsT0FBYSxJQUFORCxHQUFXLEVBQUlBLEdBQUssRUFBSUMsRUFHakMsR0FBUyxNQUFMRCxHQUFrQixNQUFMQyxFQUVmLE9BQU8sRUFHVCxHQUFnQixpQkFBTEQsR0FBNkIsaUJBQUxDLEVBQ2pDLE9BQU8sRUFHVCxJQUFJRyxFQUFXQyxPQUFPQyxVQUFVQyxTQUM1QkMsRUFBWUosRUFBU0ssS0FBS1QsR0FFOUIsR0FBSVEsR0FBYUosRUFBU0ssS0FBS1IsR0FDN0IsT0FBTyxFQUdULE9BQVFPLEdBQ04sSUFBSyxrQkFDSCxPQUFPUixHQUFLVSxPQUFPVCxHQUVyQixJQUFLLGtCQUNILE9BQU9VLE1BQU1YLEtBQU1XLE1BQU1WLElBQWFELEdBQUtZLE9BQU9YLEdBRXBELElBQUssZ0JBQ0wsSUFBSyxtQkFDSCxPQUFRRCxJQUFNQyxFQUVoQixJQUFLLGtCQUNILE9BQU9ELEVBQUVhLFFBQVVaLEVBQUVZLFFBQVViLEVBQUVjLFFBQVViLEVBQUVhLFFBQVVkLEVBQUVlLFdBQWFkLEVBQUVjLFdBQWFmLEVBQUVnQixZQUFjZixFQUFFZSxXQU0zRyxJQUZBLElBQUlDLEVBQVNmLEVBQU9lLE9BRWJBLEtBQ0wsR0FBSWYsRUFBT2UsSUFBV2pCLEVBQ3BCLE9BQU9HLEVBQU9jLElBQVdoQixFQUk3QkMsRUFBT2dCLEtBQUtsQixHQUNaRyxFQUFPZSxLQUFLakIsR0FDWixJQUFJa0IsRUFBTyxFQUVYLEdBQWtCLG1CQUFkWCxFQUFnQyxDQUdsQyxJQUZBVyxFQUFPbkIsRUFBRWlCLFVBRUloQixFQUFFZ0IsT0FDYixPQUFPLEVBSVQsS0FBT0UsS0FDTCxJQUFLcEIsRUFBR0MsRUFBRW1CLEdBQU9sQixFQUFFa0IsR0FBT2pCLEVBQVFDLEdBQ2hDLE9BQU8sTUFHTixDQUNMLEdBQUlILEVBQUVvQixjQUFnQm5CLEVBQUVtQixZQUN0QixPQUFPLEVBR1QsR0FBSXBCLEVBQUVxQixlQUFlLFlBQWNwQixFQUFFb0IsZUFBZSxXQUNsRCxPQUFPckIsRUFBRXNCLFdBQWFyQixFQUFFcUIsVUFHMUIsSUFBSUMsRUFBT2xCLE9BQU9rQixLQUFLdkIsR0FFdkIsR0FBSXVCLEVBQUtOLFFBQVVaLE9BQU9rQixLQUFLdEIsR0FBR2dCLE9BQ2hDLE9BQU8sRUFHVCxJQUFLLElBQUlPLEVBQUksRUFBR0EsRUFBSUQsRUFBS04sT0FBUU8sSUFDL0IsSUFBS3pCLEVBQUdDLEVBQUV1QixFQUFLQyxJQUFLdkIsRUFBRXNCLEVBQUtDLElBQUt0QixFQUFRQyxHQUN0QyxPQUFPLEVBT2IsT0FGQUQsRUFBT3VCLE1BQ1B0QixFQUFPc0IsT0FDQSxFQUdUQyxFQUFPQyxRQXJHUCxTQUFrQjNCLEVBQUdDLEdBQ25CLElBQUlDLEVBQVNMLEVBQVdvQixPQUFTcEIsRUFBVzRCLE1BQVEsR0FDaER0QixFQUFTTCxFQUFXbUIsT0FBU25CLEVBQVcyQixNQUFRLEdBQ2hERyxFQUFTN0IsRUFBR0MsRUFBR0MsRUFBR0MsRUFBUUMsR0FLOUIsT0FKQUQsRUFBT2UsT0FBUyxFQUNoQmQsRUFBT2MsT0FBUyxFQUNoQnBCLEVBQVdxQixLQUFLaEIsR0FDaEJKLEVBQVdvQixLQUFLZixHQUNUeUIsSSxxQkNuQlQsU0FBU0MsRUFBa0JDLEdBQ3pCLE9BQU8sV0FDTCxPQUFPQSxHQVVYLElBQUlDLEVBQWdCLGFBRXBCQSxFQUFjQyxZQUFjSCxFQUM1QkUsRUFBY0UsaUJBQW1CSixHQUFrQixHQUNuREUsRUFBY0csZ0JBQWtCTCxHQUFrQixHQUNsREUsRUFBY0ksZ0JBQWtCTixFQUFrQixNQUVsREUsRUFBY0ssZ0JBQWtCLFdBQzlCLE9BQU9DLE1BR1ROLEVBQWNPLG9CQUFzQixTQUFVUixHQUM1QyxPQUFPQSxHQUdUSixFQUFPQyxRQUFVSSxHLDRCQ0dqQixJQUFJUSxFQS9CZ0IsRUFBUSxLQTRDNUJiLEVBQU9DLFFBQVVZLEcsNEJDbkRqQixJQUFJQyxFQUFVLEVBQVEsTUFNbEJDLEVBQWdCLENBQ2xCQyxtQkFBbUIsRUFDbkJDLGFBQWEsRUFDYkMsY0FBYyxFQUNkQyxjQUFjLEVBQ2RDLGFBQWEsRUFDYkMsaUJBQWlCLEVBQ2pCQywwQkFBMEIsRUFDMUJDLDBCQUEwQixFQUMxQkMsUUFBUSxFQUNSQyxXQUFXLEVBQ1hDLE1BQU0sR0FFSkMsRUFBZ0IsQ0FDbEJDLE1BQU0sRUFDTnJDLFFBQVEsRUFDUlgsV0FBVyxFQUNYaUQsUUFBUSxFQUNSQyxRQUFRLEVBQ1JDLFdBQVcsRUFDWEMsT0FBTyxHQVNMQyxFQUFlLENBQ2pCLFVBQVksRUFDWkMsU0FBUyxFQUNUZixjQUFjLEVBQ2RDLGFBQWEsRUFDYkssV0FBVyxFQUNYQyxNQUFNLEdBRUpTLEVBQWUsR0FJbkIsU0FBU0MsRUFBV0MsR0FFbEIsT0FBSXZCLEVBQVF3QixPQUFPRCxHQUNWSixFQUlGRSxFQUFhRSxFQUFvQixXQUFNdEIsRUFWaERvQixFQUFhckIsRUFBUXlCLFlBaEJLLENBQ3hCLFVBQVksRUFDWkMsUUFBUSxFQUNSckIsY0FBYyxFQUNkQyxhQUFhLEVBQ2JLLFdBQVcsR0FZYlUsRUFBYXJCLEVBQVEyQixNQUFRUixFQVk3QixJQUFJUyxFQUFpQi9ELE9BQU8rRCxlQUN4QkMsRUFBc0JoRSxPQUFPZ0Usb0JBQzdCQyxFQUF3QmpFLE9BQU9pRSxzQkFDL0JDLEVBQTJCbEUsT0FBT2tFLHlCQUNsQ0MsRUFBaUJuRSxPQUFPbUUsZUFDeEJDLEVBQWtCcEUsT0FBT0MsVUFzQzdCb0IsRUFBT0MsUUFyQ1AsU0FBUytDLEVBQXFCQyxFQUFpQkMsRUFBaUJDLEdBQzlELEdBQStCLGlCQUFwQkQsRUFBOEIsQ0FFdkMsR0FBSUgsRUFBaUIsQ0FDbkIsSUFBSUssRUFBcUJOLEVBQWVJLEdBRXBDRSxHQUFzQkEsSUFBdUJMLEdBQy9DQyxFQUFxQkMsRUFBaUJHLEVBQW9CRCxHQUk5RCxJQUFJdEQsRUFBTzhDLEVBQW9CTyxHQUUzQk4sSUFDRi9DLEVBQU9BLEVBQUt3RCxPQUFPVCxFQUFzQk0sS0FNM0MsSUFIQSxJQUFJSSxFQUFnQmxCLEVBQVdhLEdBQzNCTSxFQUFnQm5CLEVBQVdjLEdBRXRCcEQsRUFBSSxFQUFHQSxFQUFJRCxFQUFLTixTQUFVTyxFQUFHLENBQ3BDLElBQUkwRCxFQUFNM0QsRUFBS0MsR0FFZixLQUFLNkIsRUFBYzZCLElBQVVMLEdBQWFBLEVBQVVLLElBQVdELEdBQWlCQSxFQUFjQyxJQUFXRixHQUFpQkEsRUFBY0UsSUFBTyxDQUM3SSxJQUFJQyxFQUFhWixFQUF5QkssRUFBaUJNLEdBRTNELElBRUVkLEVBQWVPLEVBQWlCTyxFQUFLQyxHQUNyQyxNQUFPQyxPQUtmLE9BQU9ULEksc0JDbkRUakQsRUFBT0MsUUE1QlMsU0FBUzBELEVBQVdDLEVBQVF0RixFQUFHQyxFQUFHc0YsRUFBR0MsRUFBR0osRUFBR0ssR0FPekQsSUFBS0osRUFBVyxDQUNkLElBQUlLLEVBQ0osUUFBZUMsSUFBWEwsRUFDRkksRUFBUSxJQUFJRSxNQUNWLHFJQUdHLENBQ0wsSUFBSUMsRUFBTyxDQUFDN0YsRUFBR0MsRUFBR3NGLEVBQUdDLEVBQUdKLEVBQUdLLEdBQ3ZCSyxFQUFXLEdBQ2ZKLEVBQVEsSUFBSUUsTUFDVk4sRUFBT1MsUUFBUSxPQUFPLFdBQWEsT0FBT0YsRUFBS0MsVUFFM0N4QyxLQUFPLHNCQUlmLE1BREFvQyxFQUFNTSxZQUFjLEVBQ2ROLEssU0M1Q1ZoRSxFQUFPQyxRQUFVc0UsTUFBTUMsU0FBVyxTQUFVQyxHQUMxQyxNQUE4QyxrQkFBdkM5RixPQUFPQyxVQUFVQyxTQUFTRSxLQUFLMEYsSyxzQkNPeEMsSUFBSTdCLEVBQXdCakUsT0FBT2lFLHNCQUMvQmpELEVBQWlCaEIsT0FBT0MsVUFBVWUsZUFDbEMrRSxFQUFtQi9GLE9BQU9DLFVBQVUrRixxQkFFeEMsU0FBU0MsRUFBU0MsR0FDakIsR0FBSUEsUUFDSCxNQUFNLElBQUlDLFVBQVUseURBR3JCLE9BQU9uRyxPQUFPa0csR0ErQ2Y3RSxFQUFPQyxRQTVDUCxXQUNDLElBQ0MsSUFBS3RCLE9BQU9vRyxPQUNYLE9BQU8sRUFNUixJQUFJQyxFQUFRLElBQUloRyxPQUFPLE9BRXZCLEdBREFnRyxFQUFNLEdBQUssS0FDa0MsTUFBekNyRyxPQUFPZ0Usb0JBQW9CcUMsR0FBTyxHQUNyQyxPQUFPLEVBS1IsSUFEQSxJQUFJQyxFQUFRLEdBQ0huRixFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDdkJtRixFQUFNLElBQU1qRyxPQUFPa0csYUFBYXBGLElBQU1BLEVBS3ZDLEdBQXdCLGVBSFhuQixPQUFPZ0Usb0JBQW9Cc0MsR0FBT0UsS0FBSSxTQUFVQyxHQUM1RCxPQUFPSCxFQUFNRyxNQUVIQyxLQUFLLElBQ2YsT0FBTyxFQUlSLElBQUlDLEVBQVEsR0FJWixNQUhBLHVCQUF1QkMsTUFBTSxJQUFJQyxTQUFRLFNBQVVDLEdBQ2xESCxFQUFNRyxHQUFVQSxLQUdmLHlCQURFOUcsT0FBT2tCLEtBQUtsQixPQUFPb0csT0FBTyxHQUFJTyxJQUFRRCxLQUFLLElBTTlDLE1BQU9LLEdBRVIsT0FBTyxHQUlRQyxHQUFvQmhILE9BQU9vRyxPQUFTLFNBQVVhLEVBQVF6RyxHQUt0RSxJQUpBLElBQUkwRyxFQUVBQyxFQURBQyxFQUFLbkIsRUFBU2dCLEdBR1RJLEVBQUksRUFBR0EsRUFBSWpFLFVBQVV4QyxPQUFReUcsSUFBSyxDQUcxQyxJQUFLLElBQUl4QyxLQUZUcUMsRUFBT2xILE9BQU9vRCxVQUFVaUUsSUFHbkJyRyxFQUFlWixLQUFLOEcsRUFBTXJDLEtBQzdCdUMsRUFBR3ZDLEdBQU9xQyxFQUFLckMsSUFJakIsR0FBSVosRUFBdUIsQ0FDMUJrRCxFQUFVbEQsRUFBc0JpRCxHQUNoQyxJQUFLLElBQUkvRixFQUFJLEVBQUdBLEVBQUlnRyxFQUFRdkcsT0FBUU8sSUFDL0I0RSxFQUFpQjNGLEtBQUs4RyxFQUFNQyxFQUFRaEcsTUFDdkNpRyxFQUFHRCxFQUFRaEcsSUFBTStGLEVBQUtDLEVBQVFoRyxNQU1sQyxPQUFPaUcsSSw0QkMvRVIsSUFBSUUsRUFBdUIsRUFBUSxLQUVuQyxTQUFTNUYsS0FDVCxTQUFTNkYsS0FDVEEsRUFBdUJDLGtCQUFvQjlGLEVBRTNDTCxFQUFPQyxRQUFVLFdBQ2YsU0FBU21HLEVBQUtDLEVBQU9DLEVBQVVDLEVBQWVDLEVBQVVDLEVBQWNDLEdBQ3BFLEdBQUlBLElBQVdULEVBQWYsQ0FJQSxJQUFJUCxFQUFNLElBQUl4QixNQUNaLG1MQUtGLE1BREF3QixFQUFJOUQsS0FBTyxzQkFDTDhELEdBR1IsU0FBU2lCLElBQ1AsT0FBT1AsRUFGVEEsRUFBS1EsV0FBYVIsRUFNbEIsSUFBSVMsRUFBaUIsQ0FDbkJDLE1BQU9WLEVBQ1BXLEtBQU1YLEVBQ05ZLEtBQU1aLEVBQ05hLE9BQVFiLEVBQ1JjLE9BQVFkLEVBQ1JlLE9BQVFmLEVBQ1JnQixPQUFRaEIsRUFFUmlCLElBQUtqQixFQUNMa0IsUUFBU1gsRUFDVFksUUFBU25CLEVBQ1RvQixZQUFhcEIsRUFDYnFCLFdBQVlkLEVBQ1o5SSxLQUFNdUksRUFDTnNCLFNBQVVmLEVBQ1ZnQixNQUFPaEIsRUFDUGlCLFVBQVdqQixFQUNYa0IsTUFBT2xCLEVBQ1BtQixNQUFPbkIsRUFFUG9CLGVBQWdCN0IsRUFDaEJDLGtCQUFtQjlGLEdBS3JCLE9BRkF3RyxFQUFlbUIsVUFBWW5CLEVBRXBCQSxJLGVDN0NQN0csRUFBT0MsUUFBVSxFQUFRLEtBQVIsSSxxQkNObkJELEVBQU9DLFFBRm9CLGdELDRCQ0VkLElBQUlnSSxFQUFHLEVBQVEsTUFBU0MsRUFBRSxFQUFRLE1BQWlCQyxFQUFFLEVBQVEsTUFBYSxTQUFTQyxFQUFFOUosR0FBRyxJQUFJLElBQUlDLEVBQUUseURBQXlERCxFQUFFdUYsRUFBRSxFQUFFQSxFQUFFOUIsVUFBVXhDLE9BQU9zRSxJQUFJdEYsR0FBRyxXQUFXOEosbUJBQW1CdEcsVUFBVThCLElBQUksTUFBTSx5QkFBeUJ2RixFQUFFLFdBQVdDLEVBQUUsaUhBQWlILElBQUkwSixFQUFHLE1BQU0vRCxNQUFNa0UsRUFBRSxNQUFNLElBQUlFLEVBQUcsSUFBSUMsSUFBSUMsRUFBRyxHQUFHLFNBQVNDLEVBQUduSyxFQUFFQyxHQUFHbUssRUFBR3BLLEVBQUVDLEdBQUdtSyxFQUFHcEssRUFBRSxVQUFVQyxHQUMzZSxTQUFTbUssRUFBR3BLLEVBQUVDLEdBQVcsSUFBUmlLLEVBQUdsSyxHQUFHQyxFQUFNRCxFQUFFLEVBQUVBLEVBQUVDLEVBQUVnQixPQUFPakIsSUFBSWdLLEVBQUdLLElBQUlwSyxFQUFFRCxJQUN6RCxJQUFJc0ssSUFBSyxvQkFBcUJDLGFBQVEsSUFBcUJBLE9BQU9DLGVBQVUsSUFBcUJELE9BQU9DLFNBQVNDLGVBQWVDLEVBQUcsOFZBQThWQyxFQUFHdEssT0FBT0MsVUFBVWUsZUFDcmZ1SixFQUFHLEdBQUdDLEVBQUcsR0FDK00sU0FBU0MsRUFBRTlLLEVBQUVDLEVBQUVzRixFQUFFQyxFQUFFSixFQUFFSyxFQUFFc0YsR0FBRzFJLEtBQUsySSxnQkFBZ0IsSUFBSS9LLEdBQUcsSUFBSUEsR0FBRyxJQUFJQSxFQUFFb0MsS0FBSzRJLGNBQWN6RixFQUFFbkQsS0FBSzZJLG1CQUFtQjlGLEVBQUUvQyxLQUFLOEksZ0JBQWdCNUYsRUFBRWxELEtBQUsrSSxhQUFhcEwsRUFBRXFDLEtBQUtlLEtBQUtuRCxFQUFFb0MsS0FBS2dKLFlBQVk1RixFQUFFcEQsS0FBS2lKLGtCQUFrQlAsRUFBRSxJQUFJUSxFQUFFLEdBQ25iLHVJQUF1SXRFLE1BQU0sS0FBS0MsU0FBUSxTQUFTbEgsR0FBR3VMLEVBQUV2TCxHQUFHLElBQUk4SyxFQUFFOUssRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLGdCQUFnQixrQkFBa0IsQ0FBQyxZQUFZLFNBQVMsQ0FBQyxVQUFVLE9BQU8sQ0FBQyxZQUFZLGVBQWVrSCxTQUFRLFNBQVNsSCxHQUFHLElBQUlDLEVBQUVELEVBQUUsR0FBR3VMLEVBQUV0TCxHQUFHLElBQUk2SyxFQUFFN0ssRUFBRSxHQUFFLEVBQUdELEVBQUUsR0FBRyxNQUFLLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixZQUFZLGFBQWEsU0FBU2tILFNBQVEsU0FBU2xILEdBQUd1TCxFQUFFdkwsR0FBRyxJQUFJOEssRUFBRTlLLEVBQUUsR0FBRSxFQUFHQSxFQUFFd0wsY0FBYyxNQUFLLEdBQUcsTUFDdmUsQ0FBQyxjQUFjLDRCQUE0QixZQUFZLGlCQUFpQnRFLFNBQVEsU0FBU2xILEdBQUd1TCxFQUFFdkwsR0FBRyxJQUFJOEssRUFBRTlLLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssR0FBRyxNQUFNLDhPQUE4T2lILE1BQU0sS0FBS0MsU0FBUSxTQUFTbEgsR0FBR3VMLEVBQUV2TCxHQUFHLElBQUk4SyxFQUFFOUssRUFBRSxHQUFFLEVBQUdBLEVBQUV3TCxjQUFjLE1BQUssR0FBRyxNQUNyYixDQUFDLFVBQVUsV0FBVyxRQUFRLFlBQVl0RSxTQUFRLFNBQVNsSCxHQUFHdUwsRUFBRXZMLEdBQUcsSUFBSThLLEVBQUU5SyxFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsWUFBWWtILFNBQVEsU0FBU2xILEdBQUd1TCxFQUFFdkwsR0FBRyxJQUFJOEssRUFBRTlLLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssR0FBRyxNQUFNLENBQUMsT0FBTyxPQUFPLE9BQU8sUUFBUWtILFNBQVEsU0FBU2xILEdBQUd1TCxFQUFFdkwsR0FBRyxJQUFJOEssRUFBRTlLLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssR0FBRyxNQUFNLENBQUMsVUFBVSxTQUFTa0gsU0FBUSxTQUFTbEgsR0FBR3VMLEVBQUV2TCxHQUFHLElBQUk4SyxFQUFFOUssRUFBRSxHQUFFLEVBQUdBLEVBQUV3TCxjQUFjLE1BQUssR0FBRyxNQUFNLElBQUlDLEVBQUcsZ0JBQWdCLFNBQVNDLEVBQUcxTCxHQUFHLE9BQU9BLEVBQUUsR0FBRzJMLGNBSTNZLFNBQVNDLEVBQUc1TCxFQUFFQyxFQUFFc0YsRUFBRUMsR0FBRyxJQUFJSixFQUFFbUcsRUFBRWxLLGVBQWVwQixHQUFHc0wsRUFBRXRMLEdBQUcsTUFBVyxPQUFPbUYsRUFBRSxJQUFJQSxFQUFFaEMsTUFBS29DLEdBQU8sRUFBRXZGLEVBQUVnQixTQUFTLE1BQU1oQixFQUFFLElBQUksTUFBTUEsRUFBRSxNQUFJLE1BQU1BLEVBQUUsSUFBSSxNQUFNQSxFQUFFLE9BUG5KLFNBQVlELEVBQUVDLEVBQUVzRixFQUFFQyxHQUFHLEdBQUcsTUFBT3ZGLEdBRGdHLFNBQVlELEVBQUVDLEVBQUVzRixFQUFFQyxHQUFHLEdBQUcsT0FBT0QsR0FBRyxJQUFJQSxFQUFFbkMsS0FBSyxPQUFNLEVBQUcsY0FBY25ELEdBQUcsSUFBSyxXQUFXLElBQUssU0FBUyxPQUFNLEVBQUcsSUFBSyxVQUFVLE9BQUd1RixJQUFjLE9BQU9ELEdBQVNBLEVBQUV5RixnQkFBbUQsV0FBbkNoTCxFQUFFQSxFQUFFd0wsY0FBY0ssTUFBTSxFQUFFLEtBQXNCLFVBQVU3TCxHQUFFLFFBQVEsT0FBTSxHQUMvVDhMLENBQUc5TCxFQUFFQyxFQUFFc0YsRUFBRUMsR0FBRyxPQUFNLEVBQUcsR0FBR0EsRUFBRSxPQUFNLEVBQUcsR0FBRyxPQUFPRCxFQUFFLE9BQU9BLEVBQUVuQyxNQUFNLEtBQUssRUFBRSxPQUFPbkQsRUFBRSxLQUFLLEVBQUUsT0FBTSxJQUFLQSxFQUFFLEtBQUssRUFBRSxPQUFPVSxNQUFNVixHQUFHLEtBQUssRUFBRSxPQUFPVSxNQUFNVixJQUFJLEVBQUVBLEVBQUUsT0FBTSxFQU9yRDhMLENBQUc5TCxFQUFFc0YsRUFBRUgsRUFBRUksS0FBS0QsRUFBRSxNQUFNQyxHQUFHLE9BQU9KLEVBUnBMLFNBQVlwRixHQUFHLFFBQUcySyxFQUFHbEssS0FBS29LLEVBQUc3SyxLQUFlMkssRUFBR2xLLEtBQUttSyxFQUFHNUssS0FBZTBLLEVBQUdzQixLQUFLaE0sR0FBVTZLLEVBQUc3SyxJQUFHLEdBQUc0SyxFQUFHNUssSUFBRyxHQUFTLElBUXNFaU0sQ0FBR2hNLEtBQUssT0FBT3NGLEVBQUV2RixFQUFFa00sZ0JBQWdCak0sR0FBR0QsRUFBRW1NLGFBQWFsTSxFQUFFLEdBQUdzRixJQUFJSCxFQUFFK0YsZ0JBQWdCbkwsRUFBRW9GLEVBQUVnRyxjQUFjLE9BQU83RixFQUFFLElBQUlILEVBQUVoQyxNQUFRLEdBQUdtQyxHQUFHdEYsRUFBRW1GLEVBQUU2RixjQUFjekYsRUFBRUosRUFBRThGLG1CQUFtQixPQUFPM0YsRUFBRXZGLEVBQUVrTSxnQkFBZ0JqTSxJQUFhc0YsRUFBRSxLQUFYSCxFQUFFQSxFQUFFaEMsT0FBYyxJQUFJZ0MsSUFBRyxJQUFLRyxFQUFFLEdBQUcsR0FBR0EsRUFBRUMsRUFBRXhGLEVBQUVvTSxlQUFlNUcsRUFBRXZGLEVBQUVzRixHQUFHdkYsRUFBRW1NLGFBQWFsTSxFQUFFc0YsTUFINWQsMGpDQUEwakMwQixNQUFNLEtBQUtDLFNBQVEsU0FBU2xILEdBQUcsSUFBSUMsRUFBRUQsRUFBRStGLFFBQVEwRixFQUN6bUNDLEdBQUlILEVBQUV0TCxHQUFHLElBQUk2SyxFQUFFN0ssRUFBRSxHQUFFLEVBQUdELEVBQUUsTUFBSyxHQUFHLE1BQU0sMkVBQTJFaUgsTUFBTSxLQUFLQyxTQUFRLFNBQVNsSCxHQUFHLElBQUlDLEVBQUVELEVBQUUrRixRQUFRMEYsRUFBR0MsR0FBSUgsRUFBRXRMLEdBQUcsSUFBSTZLLEVBQUU3SyxFQUFFLEdBQUUsRUFBR0QsRUFBRSxnQ0FBK0IsR0FBRyxNQUFNLENBQUMsV0FBVyxXQUFXLGFBQWFrSCxTQUFRLFNBQVNsSCxHQUFHLElBQUlDLEVBQUVELEVBQUUrRixRQUFRMEYsRUFBR0MsR0FBSUgsRUFBRXRMLEdBQUcsSUFBSTZLLEVBQUU3SyxFQUFFLEdBQUUsRUFBR0QsRUFBRSx3Q0FBdUMsR0FBRyxNQUFNLENBQUMsV0FBVyxlQUFla0gsU0FBUSxTQUFTbEgsR0FBR3VMLEVBQUV2TCxHQUFHLElBQUk4SyxFQUFFOUssRUFBRSxHQUFFLEVBQUdBLEVBQUV3TCxjQUFjLE1BQUssR0FBRyxNQUMvY0QsRUFBRWMsVUFBVSxJQUFJdkIsRUFBRSxZQUFZLEdBQUUsRUFBRyxhQUFhLGdDQUErQixHQUFHLEdBQUksQ0FBQyxNQUFNLE9BQU8sU0FBUyxjQUFjNUQsU0FBUSxTQUFTbEgsR0FBR3VMLEVBQUV2TCxHQUFHLElBQUk4SyxFQUFFOUssRUFBRSxHQUFFLEVBQUdBLEVBQUV3TCxjQUFjLE1BQUssR0FBRyxNQUV6TCxJQUFJYyxFQUFHM0MsRUFBRzRDLG1EQUFtREMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQ2hOLEdBQUcsbUJBQW9CQyxRQUFRQSxPQUFPQyxJQUFJLENBQUMsSUFBSUMsRUFBRUYsT0FBT0MsSUFBSWxCLEVBQUdtQixFQUFFLGlCQUFpQmxCLEVBQUdrQixFQUFFLGdCQUFnQmpCLEVBQUdpQixFQUFFLGtCQUFrQmhCLEVBQUdnQixFQUFFLHFCQUFxQmYsRUFBR2UsRUFBRSxrQkFBa0JkLEVBQUdjLEVBQUUsa0JBQWtCYixFQUFHYSxFQUFFLGlCQUFpQlosRUFBR1ksRUFBRSxxQkFBcUJYLEVBQUdXLEVBQUUsa0JBQWtCVixFQUFHVSxFQUFFLHVCQUF1QlQsRUFBR1MsRUFBRSxjQUFjUixFQUFHUSxFQUFFLGNBQWNQLEVBQUdPLEVBQUUsZUFBZUEsRUFBRSxlQUFlTixFQUFHTSxFQUFFLG1CQUFtQkwsRUFBR0ssRUFBRSwwQkFBMEJKLEVBQUdJLEVBQUUsbUJBQW1CSCxFQUFHRyxFQUFFLHVCQUN4YyxJQUFtTEMsRUFBL0tDLEVBQUcsbUJBQW9CSixRQUFRQSxPQUFPSyxTQUFTLFNBQVNDLEVBQUcvTixHQUFHLE9BQUcsT0FBT0EsR0FBRyxpQkFBa0JBLEVBQVMsS0FBd0MsbUJBQW5DQSxFQUFFNk4sR0FBSTdOLEVBQUU2TixJQUFLN04sRUFBRSxlQUEwQ0EsRUFBRSxLQUFZLFNBQVNnTyxFQUFHaE8sR0FBRyxRQUFHLElBQVM0TixFQUFHLElBQUksTUFBTWhJLFFBQVMsTUFBTUwsR0FBRyxJQUFJdEYsRUFBRXNGLEVBQUUwSSxNQUFNQyxPQUFPQyxNQUFNLGdCQUFnQlAsRUFBRzNOLEdBQUdBLEVBQUUsSUFBSSxHQUFHLE1BQU0sS0FBSzJOLEVBQUc1TixFQUFFLElBQUlvTyxHQUFHLEVBQ2pVLFNBQVNDLEVBQUdyTyxFQUFFQyxHQUFHLElBQUlELEdBQUdvTyxFQUFHLE1BQU0sR0FBR0EsR0FBRyxFQUFHLElBQUk3SSxFQUFFSyxNQUFNMEksa0JBQWtCMUksTUFBTTBJLHVCQUFrQixFQUFPLElBQUksR0FBR3JPLEVBQUUsR0FBR0EsRUFBRSxXQUFXLE1BQU0yRixTQUFVdkYsT0FBTytELGVBQWVuRSxFQUFFSyxVQUFVLFFBQVEsQ0FBQ2lPLElBQUksV0FBVyxNQUFNM0ksV0FBWSxpQkFBa0I0SSxTQUFTQSxRQUFRQyxVQUFVLENBQUMsSUFBSUQsUUFBUUMsVUFBVXhPLEVBQUUsSUFBSSxNQUFNeU8sR0FBRyxJQUFJbEosRUFBRWtKLEVBQUVGLFFBQVFDLFVBQVV6TyxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFJQSxFQUFFUSxPQUFPLE1BQU1pTyxHQUFHbEosRUFBRWtKLEVBQUUxTyxFQUFFUyxLQUFLUixFQUFFSyxlQUFlLENBQUMsSUFBSSxNQUFNc0YsUUFBUyxNQUFNOEksR0FBR2xKLEVBQUVrSixFQUFFMU8sS0FBSyxNQUFNME8sR0FBRyxHQUFHQSxHQUFHbEosR0FBRyxpQkFBa0JrSixFQUFFVCxNQUFNLENBQUMsSUFBSSxJQUFJN0ksRUFBRXNKLEVBQUVULE1BQU1oSCxNQUFNLE1BQ25meEIsRUFBRUQsRUFBRXlJLE1BQU1oSCxNQUFNLE1BQU04RCxFQUFFM0YsRUFBRW5FLE9BQU8sRUFBRTBOLEVBQUVsSixFQUFFeEUsT0FBTyxFQUFFLEdBQUc4SixHQUFHLEdBQUc0RCxHQUFHdkosRUFBRTJGLEtBQUt0RixFQUFFa0osSUFBSUEsSUFBSSxLQUFLLEdBQUc1RCxHQUFHLEdBQUc0RCxFQUFFNUQsSUFBSTRELElBQUksR0FBR3ZKLEVBQUUyRixLQUFLdEYsRUFBRWtKLEdBQUcsQ0FBQyxHQUFHLElBQUk1RCxHQUFHLElBQUk0RCxFQUFHLE1BQU01RCxJQUFRLElBQUo0RCxHQUFTdkosRUFBRTJGLEtBQUt0RixFQUFFa0osR0FBRyxNQUFNLEtBQUt2SixFQUFFMkYsR0FBR2hGLFFBQVEsV0FBVyxjQUFjLEdBQUdnRixHQUFHLEdBQUc0RCxHQUFHLFFBQVEsUUFBUVAsR0FBRyxFQUFHeEksTUFBTTBJLGtCQUFrQi9JLEVBQUUsT0FBT3ZGLEVBQUVBLEVBQUVBLEVBQUU4QyxhQUFhOUMsRUFBRXNELEtBQUssSUFBSTBLLEVBQUdoTyxHQUFHLEdBQzdULFNBQVM0TyxFQUFHNU8sR0FBRyxPQUFPQSxFQUFFNk8sS0FBSyxLQUFLLEVBQUUsT0FBT2IsRUFBR2hPLEVBQUVvRCxNQUFNLEtBQUssR0FBRyxPQUFPNEssRUFBRyxRQUFRLEtBQUssR0FBRyxPQUFPQSxFQUFHLFlBQVksS0FBSyxHQUFHLE9BQU9BLEVBQUcsZ0JBQWdCLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLE9BQVNLLEVBQUdyTyxFQUFFb0QsTUFBSyxHQUFNLEtBQUssR0FBRyxPQUFTaUwsRUFBR3JPLEVBQUVvRCxLQUFLYyxRQUFPLEdBQU0sS0FBSyxHQUFHLE9BQVNtSyxFQUFHck8sRUFBRW9ELEtBQUswTCxTQUFRLEdBQU0sS0FBSyxFQUFFLE9BQVNULEVBQUdyTyxFQUFFb0QsTUFBSyxHQUFNLFFBQVEsTUFBTSxJQUM5VCxTQUFTMkwsRUFBRy9PLEdBQUcsR0FBRyxNQUFNQSxFQUFFLE9BQU8sS0FBSyxHQUFHLG1CQUFvQkEsRUFBRSxPQUFPQSxFQUFFOEMsYUFBYTlDLEVBQUVzRCxNQUFNLEtBQUssR0FBRyxpQkFBa0J0RCxFQUFFLE9BQU9BLEVBQUUsT0FBT0EsR0FBRyxLQUFLME0sRUFBRyxNQUFNLFdBQVcsS0FBS0QsRUFBRyxNQUFNLFNBQVMsS0FBS0csRUFBRyxNQUFNLFdBQVcsS0FBS0QsRUFBRyxNQUFNLGFBQWEsS0FBS0ssRUFBRyxNQUFNLFdBQVcsS0FBS0MsRUFBRyxNQUFNLGVBQWUsR0FBRyxpQkFBa0JqTixFQUFFLE9BQU9BLEVBQUVnUCxVQUFVLEtBQUtsQyxFQUFHLE9BQU85TSxFQUFFOEMsYUFBYSxXQUFXLFlBQVksS0FBSytKLEVBQUcsT0FBTzdNLEVBQUVpUCxTQUFTbk0sYUFBYSxXQUFXLFlBQVksS0FBS2lLLEVBQUcsSUFBSTlNLEVBQUVELEVBQUVrRSxPQUNuZCxPQUQwZGpFLEVBQUVBLEVBQUU2QyxhQUFhN0MsRUFBRXFELE1BQU0sR0FDNWV0RCxFQUFFOEMsY0FBYyxLQUFLN0MsRUFBRSxjQUFjQSxFQUFFLElBQUksY0FBYyxLQUFLaU4sRUFBRyxPQUFPNkIsRUFBRy9PLEVBQUVvRCxNQUFNLEtBQUtnSyxFQUFHLE9BQU8yQixFQUFHL08sRUFBRThPLFNBQVMsS0FBSzNCLEVBQUdsTixFQUFFRCxFQUFFa1AsU0FBU2xQLEVBQUVBLEVBQUVtUCxNQUFNLElBQUksT0FBT0osRUFBRy9PLEVBQUVDLElBQUksTUFBTXNGLEtBQUssT0FBTyxLQUFLLFNBQVM2SixFQUFHcFAsR0FBRyxjQUFjQSxHQUFHLElBQUssVUFBVSxJQUFLLFNBQVMsSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFlBQVksT0FBT0EsRUFBRSxRQUFRLE1BQU0sSUFBSSxTQUFTcVAsRUFBR3JQLEdBQUcsSUFBSUMsRUFBRUQsRUFBRW9ELEtBQUssT0FBT3BELEVBQUVBLEVBQUVzUCxXQUFXLFVBQVV0UCxFQUFFd0wsZ0JBQWdCLGFBQWF2TCxHQUFHLFVBQVVBLEdBRTFaLFNBQVNzUCxFQUFHdlAsR0FBR0EsRUFBRXdQLGdCQUFnQnhQLEVBQUV3UCxjQUR2RCxTQUFZeFAsR0FBRyxJQUFJQyxFQUFFb1AsRUFBR3JQLEdBQUcsVUFBVSxRQUFRdUYsRUFBRWxGLE9BQU9rRSx5QkFBeUJ2RSxFQUFFb0IsWUFBWWQsVUFBVUwsR0FBR3VGLEVBQUUsR0FBR3hGLEVBQUVDLEdBQUcsSUFBSUQsRUFBRXFCLGVBQWVwQixTQUFJLElBQXFCc0YsR0FBRyxtQkFBb0JBLEVBQUVrSyxLQUFLLG1CQUFvQmxLLEVBQUVnSixJQUFJLENBQUMsSUFBSW5KLEVBQUVHLEVBQUVrSyxJQUFJaEssRUFBRUYsRUFBRWdKLElBQWlMLE9BQTdLbE8sT0FBTytELGVBQWVwRSxFQUFFQyxFQUFFLENBQUN5UCxjQUFhLEVBQUdELElBQUksV0FBVyxPQUFPckssRUFBRTNFLEtBQUs0QixPQUFPa00sSUFBSSxTQUFTdk8sR0FBR3dGLEVBQUUsR0FBR3hGLEVBQUV5RixFQUFFaEYsS0FBSzRCLEtBQUtyQyxNQUFNSyxPQUFPK0QsZUFBZXBFLEVBQUVDLEVBQUUsQ0FBQzBQLFdBQVdwSyxFQUFFb0ssYUFBbUIsQ0FBQ0MsU0FBUyxXQUFXLE9BQU9wSyxHQUFHcUssU0FBUyxTQUFTN1AsR0FBR3dGLEVBQUUsR0FBR3hGLEdBQUc4UCxhQUFhLFdBQVc5UCxFQUFFd1AsY0FDeGYsWUFBWXhQLEVBQUVDLE1BQXVEOFAsQ0FBRy9QLElBQUksU0FBU2dRLEVBQUdoUSxHQUFHLElBQUlBLEVBQUUsT0FBTSxFQUFHLElBQUlDLEVBQUVELEVBQUV3UCxjQUFjLElBQUl2UCxFQUFFLE9BQU0sRUFBRyxJQUFJc0YsRUFBRXRGLEVBQUUyUCxXQUFlcEssRUFBRSxHQUFxRCxPQUFsRHhGLElBQUl3RixFQUFFNkosRUFBR3JQLEdBQUdBLEVBQUVpUSxRQUFRLE9BQU8sUUFBUWpRLEVBQUVrUSxRQUFPbFEsRUFBRXdGLEtBQWFELElBQUd0RixFQUFFNFAsU0FBUzdQLElBQUcsR0FBTyxTQUFTbVEsRUFBR25RLEdBQXdELFFBQUcsS0FBeERBLEVBQUVBLElBQUksb0JBQXFCd0ssU0FBU0EsY0FBUyxJQUFrQyxPQUFPLEtBQUssSUFBSSxPQUFPeEssRUFBRW9RLGVBQWVwUSxFQUFFcVEsS0FBSyxNQUFNcFEsR0FBRyxPQUFPRCxFQUFFcVEsTUFDL1osU0FBU0MsRUFBR3RRLEVBQUVDLEdBQUcsSUFBSXNGLEVBQUV0RixFQUFFZ1EsUUFBUSxPQUFPckcsRUFBRSxHQUFHM0osRUFBRSxDQUFDc1Esb0JBQWUsRUFBT0Msa0JBQWEsRUFBT04sV0FBTSxFQUFPRCxRQUFRLE1BQU0xSyxFQUFFQSxFQUFFdkYsRUFBRXlRLGNBQWNDLGlCQUFpQixTQUFTQyxHQUFHM1EsRUFBRUMsR0FBRyxJQUFJc0YsRUFBRSxNQUFNdEYsRUFBRXVRLGFBQWEsR0FBR3ZRLEVBQUV1USxhQUFhaEwsRUFBRSxNQUFNdkYsRUFBRWdRLFFBQVFoUSxFQUFFZ1EsUUFBUWhRLEVBQUVzUSxlQUFlaEwsRUFBRTZKLEVBQUcsTUFBTW5QLEVBQUVpUSxNQUFNalEsRUFBRWlRLE1BQU0zSyxHQUFHdkYsRUFBRXlRLGNBQWMsQ0FBQ0MsZUFBZWxMLEVBQUVvTCxhQUFhckwsRUFBRXNMLFdBQVcsYUFBYTVRLEVBQUVtRCxNQUFNLFVBQVVuRCxFQUFFbUQsS0FBSyxNQUFNbkQsRUFBRWdRLFFBQVEsTUFBTWhRLEVBQUVpUSxPQUFPLFNBQVNZLEdBQUc5USxFQUFFQyxHQUFlLE9BQVpBLEVBQUVBLEVBQUVnUSxVQUFpQnJFLEVBQUc1TCxFQUFFLFVBQVVDLEdBQUUsR0FDM2QsU0FBUzhRLEdBQUcvUSxFQUFFQyxHQUFHNlEsR0FBRzlRLEVBQUVDLEdBQUcsSUFBSXNGLEVBQUU2SixFQUFHblAsRUFBRWlRLE9BQU8xSyxFQUFFdkYsRUFBRW1ELEtBQUssR0FBRyxNQUFNbUMsRUFBSyxXQUFXQyxHQUFNLElBQUlELEdBQUcsS0FBS3ZGLEVBQUVrUSxPQUFPbFEsRUFBRWtRLE9BQU8zSyxLQUFFdkYsRUFBRWtRLE1BQU0sR0FBRzNLLEdBQU92RixFQUFFa1EsUUFBUSxHQUFHM0ssSUFBSXZGLEVBQUVrUSxNQUFNLEdBQUczSyxRQUFRLEdBQUcsV0FBV0MsR0FBRyxVQUFVQSxFQUE4QixZQUEzQnhGLEVBQUVrTSxnQkFBZ0IsU0FBZ0JqTSxFQUFFb0IsZUFBZSxTQUFTMlAsR0FBR2hSLEVBQUVDLEVBQUVtRCxLQUFLbUMsR0FBR3RGLEVBQUVvQixlQUFlLGlCQUFpQjJQLEdBQUdoUixFQUFFQyxFQUFFbUQsS0FBS2dNLEVBQUduUCxFQUFFdVEsZUFBZSxNQUFNdlEsRUFBRWdRLFNBQVMsTUFBTWhRLEVBQUVzUSxpQkFBaUJ2USxFQUFFdVEsaUJBQWlCdFEsRUFBRXNRLGdCQUNuWixTQUFTVSxHQUFHalIsRUFBRUMsRUFBRXNGLEdBQUcsR0FBR3RGLEVBQUVvQixlQUFlLFVBQVVwQixFQUFFb0IsZUFBZSxnQkFBZ0IsQ0FBQyxJQUFJbUUsRUFBRXZGLEVBQUVtRCxLQUFLLEtBQUssV0FBV29DLEdBQUcsVUFBVUEsUUFBRyxJQUFTdkYsRUFBRWlRLE9BQU8sT0FBT2pRLEVBQUVpUSxPQUFPLE9BQU9qUSxFQUFFLEdBQUdELEVBQUV5USxjQUFjRyxhQUFhckwsR0FBR3RGLElBQUlELEVBQUVrUSxRQUFRbFEsRUFBRWtRLE1BQU1qUSxHQUFHRCxFQUFFd1EsYUFBYXZRLEVBQVcsTUFBVHNGLEVBQUV2RixFQUFFc0QsUUFBY3RELEVBQUVzRCxLQUFLLElBQUl0RCxFQUFFdVEsaUJBQWlCdlEsRUFBRXlRLGNBQWNDLGVBQWUsS0FBS25MLElBQUl2RixFQUFFc0QsS0FBS2lDLEdBQ3ZWLFNBQVN5TCxHQUFHaFIsRUFBRUMsRUFBRXNGLEdBQU0sV0FBV3RGLEdBQUdrUSxFQUFHblEsRUFBRWtSLGlCQUFpQmxSLElBQUUsTUFBTXVGLEVBQUV2RixFQUFFd1EsYUFBYSxHQUFHeFEsRUFBRXlRLGNBQWNHLGFBQWE1USxFQUFFd1EsZUFBZSxHQUFHakwsSUFBSXZGLEVBQUV3USxhQUFhLEdBQUdqTCxJQUF3RixTQUFTNEwsR0FBR25SLEVBQUVDLEdBQTZELE9BQTFERCxFQUFFNEosRUFBRSxDQUFDd0gsY0FBUyxHQUFRblIsSUFBTUEsRUFBbEksU0FBWUQsR0FBRyxJQUFJQyxFQUFFLEdBQXVELE9BQXBEMEosRUFBRzBILFNBQVNuSyxRQUFRbEgsR0FBRSxTQUFTQSxHQUFHLE1BQU1BLElBQUlDLEdBQUdELE1BQVlDLEVBQWlEcVIsQ0FBR3JSLEVBQUVtUixhQUFVcFIsRUFBRW9SLFNBQVNuUixHQUFTRCxFQUN2VSxTQUFTdVIsR0FBR3ZSLEVBQUVDLEVBQUVzRixFQUFFQyxHQUFlLEdBQVp4RixFQUFFQSxFQUFFd1IsUUFBV3ZSLEVBQUUsQ0FBQ0EsRUFBRSxHQUFHLElBQUksSUFBSW1GLEVBQUUsRUFBRUEsRUFBRUcsRUFBRXRFLE9BQU9tRSxJQUFJbkYsRUFBRSxJQUFJc0YsRUFBRUgsS0FBSSxFQUFHLElBQUlHLEVBQUUsRUFBRUEsRUFBRXZGLEVBQUVpQixPQUFPc0UsSUFBSUgsRUFBRW5GLEVBQUVvQixlQUFlLElBQUlyQixFQUFFdUYsR0FBRzJLLE9BQU9sUSxFQUFFdUYsR0FBR2tNLFdBQVdyTSxJQUFJcEYsRUFBRXVGLEdBQUdrTSxTQUFTck0sR0FBR0EsR0FBR0ksSUFBSXhGLEVBQUV1RixHQUFHbU0saUJBQWdCLE9BQVEsQ0FBbUIsSUFBbEJuTSxFQUFFLEdBQUc2SixFQUFHN0osR0FBR3RGLEVBQUUsS0FBU21GLEVBQUUsRUFBRUEsRUFBRXBGLEVBQUVpQixPQUFPbUUsSUFBSSxDQUFDLEdBQUdwRixFQUFFb0YsR0FBRzhLLFFBQVEzSyxFQUFpRCxPQUE5Q3ZGLEVBQUVvRixHQUFHcU0sVUFBUyxPQUFHak0sSUFBSXhGLEVBQUVvRixHQUFHc00saUJBQWdCLElBQVcsT0FBT3pSLEdBQUdELEVBQUVvRixHQUFHdU0sV0FBVzFSLEVBQUVELEVBQUVvRixJQUFJLE9BQU9uRixJQUFJQSxFQUFFd1IsVUFBUyxJQUNwWSxTQUFTRyxHQUFHNVIsRUFBRUMsR0FBRyxHQUFHLE1BQU1BLEVBQUU0Uix3QkFBd0IsTUFBTWpNLE1BQU1rRSxFQUFFLEtBQUssT0FBT0YsRUFBRSxHQUFHM0osRUFBRSxDQUFDaVEsV0FBTSxFQUFPTSxrQkFBYSxFQUFPWSxTQUFTLEdBQUdwUixFQUFFeVEsY0FBY0csZUFBZSxTQUFTa0IsR0FBRzlSLEVBQUVDLEdBQUcsSUFBSXNGLEVBQUV0RixFQUFFaVEsTUFBTSxHQUFHLE1BQU0zSyxFQUFFLENBQStCLEdBQTlCQSxFQUFFdEYsRUFBRW1SLFNBQVNuUixFQUFFQSxFQUFFdVEsYUFBZ0IsTUFBTWpMLEVBQUUsQ0FBQyxHQUFHLE1BQU10RixFQUFFLE1BQU0yRixNQUFNa0UsRUFBRSxLQUFLLEdBQUc3RCxNQUFNQyxRQUFRWCxHQUFHLENBQUMsS0FBSyxHQUFHQSxFQUFFdEUsUUFBUSxNQUFNMkUsTUFBTWtFLEVBQUUsS0FBS3ZFLEVBQUVBLEVBQUUsR0FBR3RGLEVBQUVzRixFQUFFLE1BQU10RixJQUFJQSxFQUFFLElBQUlzRixFQUFFdEYsRUFBRUQsRUFBRXlRLGNBQWMsQ0FBQ0csYUFBYXhCLEVBQUc3SixJQUMvWSxTQUFTd00sR0FBRy9SLEVBQUVDLEdBQUcsSUFBSXNGLEVBQUU2SixFQUFHblAsRUFBRWlRLE9BQU8xSyxFQUFFNEosRUFBR25QLEVBQUV1USxjQUFjLE1BQU1qTCxLQUFJQSxFQUFFLEdBQUdBLEtBQU12RixFQUFFa1EsUUFBUWxRLEVBQUVrUSxNQUFNM0ssR0FBRyxNQUFNdEYsRUFBRXVRLGNBQWN4USxFQUFFd1EsZUFBZWpMLElBQUl2RixFQUFFd1EsYUFBYWpMLElBQUksTUFBTUMsSUFBSXhGLEVBQUV3USxhQUFhLEdBQUdoTCxHQUFHLFNBQVN3TSxHQUFHaFMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFaVMsWUFBWWhTLElBQUlELEVBQUV5USxjQUFjRyxjQUFjLEtBQUszUSxHQUFHLE9BQU9BLElBQUlELEVBQUVrUSxNQUFNalEsR0FBRyxJQUFJaVMsR0FBUywrQkFDL1MsU0FBU0MsR0FBR25TLEdBQUcsT0FBT0EsR0FBRyxJQUFLLE1BQU0sTUFBTSw2QkFBNkIsSUFBSyxPQUFPLE1BQU0scUNBQXFDLFFBQVEsTUFBTSxnQ0FBZ0MsU0FBU29TLEdBQUdwUyxFQUFFQyxHQUFHLE9BQU8sTUFBTUQsR0FBRyxpQ0FBaUNBLEVBQUVtUyxHQUFHbFMsR0FBRywrQkFBK0JELEdBQUcsa0JBQWtCQyxFQUFFLCtCQUErQkQsRUFDM1UsSUFBSXFTLEdBQWVyUyxHQUFac1MsSUFBWXRTLEdBQXNKLFNBQVNBLEVBQUVDLEdBQUcsR0FGdU0sK0JBRXBNRCxFQUFFdVMsY0FBdUIsY0FBY3ZTLEVBQUVBLEVBQUV3UyxVQUFVdlMsTUFBTSxDQUEyRixLQUExRm9TLEdBQUdBLElBQUk3SCxTQUFTQyxjQUFjLFFBQVUrSCxVQUFVLFFBQVF2UyxFQUFFcUIsVUFBVWYsV0FBVyxTQUFhTixFQUFFb1MsR0FBR0ksV0FBV3pTLEVBQUV5UyxZQUFZelMsRUFBRTBTLFlBQVkxUyxFQUFFeVMsWUFBWSxLQUFLeFMsRUFBRXdTLFlBQVl6UyxFQUFFMlMsWUFBWTFTLEVBQUV3UyxjQUFyWixvQkFBcUJHLE9BQU9BLE1BQU1DLHdCQUF3QixTQUFTNVMsRUFBRXNGLEVBQUVDLEVBQUVKLEdBQUd3TixNQUFNQyx5QkFBd0IsV0FBVyxPQUFPN1MsR0FBRUMsRUFBRXNGLE9BQVV2RixJQUN0SyxTQUFTOFMsR0FBRzlTLEVBQUVDLEdBQUcsR0FBR0EsRUFBRSxDQUFDLElBQUlzRixFQUFFdkYsRUFBRXlTLFdBQVcsR0FBR2xOLEdBQUdBLElBQUl2RixFQUFFK1MsV0FBVyxJQUFJeE4sRUFBRXlOLFNBQXdCLFlBQWR6TixFQUFFME4sVUFBVWhULEdBQVVELEVBQUVpUyxZQUFZaFMsRUFDckgsSUFBSWlULEdBQUcsQ0FBQ0MseUJBQXdCLEVBQUdDLG1CQUFrQixFQUFHQyxrQkFBaUIsRUFBR0Msa0JBQWlCLEVBQUdDLFNBQVEsRUFBR0MsY0FBYSxFQUFHQyxpQkFBZ0IsRUFBR0MsYUFBWSxFQUFHQyxTQUFRLEVBQUdDLE1BQUssRUFBR0MsVUFBUyxFQUFHQyxjQUFhLEVBQUdDLFlBQVcsRUFBR0MsY0FBYSxFQUFHQyxXQUFVLEVBQUdDLFVBQVMsRUFBR0MsU0FBUSxFQUFHQyxZQUFXLEVBQUdDLGFBQVksRUFBR0MsY0FBYSxFQUFHQyxZQUFXLEVBQUdDLGVBQWMsRUFBR0MsZ0JBQWUsRUFBR0MsaUJBQWdCLEVBQUdDLFlBQVcsRUFBR0MsV0FBVSxFQUFHQyxZQUFXLEVBQUdDLFNBQVEsRUFBR0MsT0FBTSxFQUFHQyxTQUFRLEVBQUdDLFNBQVEsRUFBR0MsUUFBTyxFQUFHQyxRQUFPLEVBQUdDLE1BQUssRUFBR0MsYUFBWSxFQUMxZkMsY0FBYSxFQUFHQyxhQUFZLEVBQUdDLGlCQUFnQixFQUFHQyxrQkFBaUIsRUFBR0Msa0JBQWlCLEVBQUdDLGVBQWMsRUFBR0MsYUFBWSxHQUFJQyxHQUFHLENBQUMsU0FBUyxLQUFLLE1BQU0sS0FBNkgsU0FBU0MsR0FBRzlWLEVBQUVDLEVBQUVzRixHQUFHLE9BQU8sTUFBTXRGLEdBQUcsa0JBQW1CQSxHQUFHLEtBQUtBLEVBQUUsR0FBR3NGLEdBQUcsaUJBQWtCdEYsR0FBRyxJQUFJQSxHQUFHaVQsR0FBRzdSLGVBQWVyQixJQUFJa1QsR0FBR2xULElBQUksR0FBR0MsR0FBR2lPLE9BQU9qTyxFQUFFLEtBQzlaLFNBQVM4VixHQUFHL1YsRUFBRUMsR0FBYSxJQUFJLElBQUlzRixLQUFsQnZGLEVBQUVBLEVBQUVnVyxNQUFtQi9WLEVBQUUsR0FBR0EsRUFBRW9CLGVBQWVrRSxHQUFHLENBQUMsSUFBSUMsRUFBRSxJQUFJRCxFQUFFMFEsUUFBUSxNQUFNN1EsRUFBRTBRLEdBQUd2USxFQUFFdEYsRUFBRXNGLEdBQUdDLEdBQUcsVUFBVUQsSUFBSUEsRUFBRSxZQUFZQyxFQUFFeEYsRUFBRWtXLFlBQVkzUSxFQUFFSCxHQUFHcEYsRUFBRXVGLEdBQUdILEdBRFQvRSxPQUFPa0IsS0FBSzJSLElBQUloTSxTQUFRLFNBQVNsSCxHQUFHNlYsR0FBRzNPLFNBQVEsU0FBU2pILEdBQUdBLEVBQUVBLEVBQUVELEVBQUVtVyxPQUFPLEdBQUd4SyxjQUFjM0wsRUFBRW9XLFVBQVUsR0FBR2xELEdBQUdqVCxHQUFHaVQsR0FBR2xULFNBQ3JHLElBQUlxVyxHQUFHek0sRUFBRSxDQUFDME0sVUFBUyxHQUFJLENBQUNDLE1BQUssRUFBR0MsTUFBSyxFQUFHQyxJQUFHLEVBQUdDLEtBQUksRUFBR0MsT0FBTSxFQUFHQyxJQUFHLEVBQUdDLEtBQUksRUFBR0MsT0FBTSxFQUFHQyxRQUFPLEVBQUdDLE1BQUssRUFBR0MsTUFBSyxFQUFHQyxPQUFNLEVBQUdyVyxRQUFPLEVBQUdzVyxPQUFNLEVBQUdDLEtBQUksSUFDbFQsU0FBU0MsR0FBR3JYLEVBQUVDLEdBQUcsR0FBR0EsRUFBRSxDQUFDLEdBQUdvVyxHQUFHclcsS0FBSyxNQUFNQyxFQUFFbVIsVUFBVSxNQUFNblIsRUFBRTRSLHlCQUF5QixNQUFNak0sTUFBTWtFLEVBQUUsSUFBSTlKLElBQUksR0FBRyxNQUFNQyxFQUFFNFIsd0JBQXdCLENBQUMsR0FBRyxNQUFNNVIsRUFBRW1SLFNBQVMsTUFBTXhMLE1BQU1rRSxFQUFFLEtBQUssR0FBSyxpQkFBa0I3SixFQUFFNFIsMkJBQXlCLFdBQVc1UixFQUFFNFIseUJBQXlCLE1BQU1qTSxNQUFNa0UsRUFBRSxLQUFNLEdBQUcsTUFBTTdKLEVBQUUrVixPQUFPLGlCQUFrQi9WLEVBQUUrVixNQUFNLE1BQU1wUSxNQUFNa0UsRUFBRSxNQUM1VixTQUFTd04sR0FBR3RYLEVBQUVDLEdBQUcsSUFBSSxJQUFJRCxFQUFFaVcsUUFBUSxLQUFLLE1BQU0saUJBQWtCaFcsRUFBRXNYLEdBQUcsT0FBT3ZYLEdBQUcsSUFBSyxpQkFBaUIsSUFBSyxnQkFBZ0IsSUFBSyxZQUFZLElBQUssZ0JBQWdCLElBQUssZ0JBQWdCLElBQUssbUJBQW1CLElBQUssaUJBQWlCLElBQUssZ0JBQWdCLE9BQU0sRUFBRyxRQUFRLE9BQU0sR0FBSSxTQUFTd1gsR0FBR3hYLEdBQTZGLE9BQTFGQSxFQUFFQSxFQUFFc0gsUUFBUXRILEVBQUV5WCxZQUFZbE4sUUFBU21OLDBCQUEwQjFYLEVBQUVBLEVBQUUwWCx5QkFBZ0MsSUFBSTFYLEVBQUVnVCxTQUFTaFQsRUFBRTJYLFdBQVczWCxFQUFFLElBQUk0WCxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUN4YixTQUFTQyxHQUFHL1gsR0FBRyxHQUFHQSxFQUFFZ1ksR0FBR2hZLEdBQUcsQ0FBQyxHQUFHLG1CQUFvQjRYLEdBQUcsTUFBTWhTLE1BQU1rRSxFQUFFLE1BQU0sSUFBSTdKLEVBQUVELEVBQUVpWSxVQUFVaFksSUFBSUEsRUFBRWlZLEdBQUdqWSxHQUFHMlgsR0FBRzVYLEVBQUVpWSxVQUFValksRUFBRW9ELEtBQUtuRCxLQUFLLFNBQVNrWSxHQUFHblksR0FBRzZYLEdBQUdDLEdBQUdBLEdBQUc1VyxLQUFLbEIsR0FBRzhYLEdBQUcsQ0FBQzlYLEdBQUc2WCxHQUFHN1gsRUFBRSxTQUFTb1ksS0FBSyxHQUFHUCxHQUFHLENBQUMsSUFBSTdYLEVBQUU2WCxHQUFHNVgsRUFBRTZYLEdBQW9CLEdBQWpCQSxHQUFHRCxHQUFHLEtBQUtFLEdBQUcvWCxHQUFNQyxFQUFFLElBQUlELEVBQUUsRUFBRUEsRUFBRUMsRUFBRWdCLE9BQU9qQixJQUFJK1gsR0FBRzlYLEVBQUVELEtBQUssU0FBU3FZLEdBQUdyWSxFQUFFQyxHQUFHLE9BQU9ELEVBQUVDLEdBQUcsU0FBU3FZLEdBQUd0WSxFQUFFQyxFQUFFc0YsRUFBRUMsRUFBRUosR0FBRyxPQUFPcEYsRUFBRUMsRUFBRXNGLEVBQUVDLEVBQUVKLEdBQUcsU0FBU21ULE1BQU0sSUFBSUMsR0FBR0gsR0FBR0ksSUFBRyxFQUFHQyxJQUFHLEVBQUcsU0FBU0MsS0FBUSxPQUFPZCxJQUFJLE9BQU9DLEtBQUdTLEtBQUtILE1BRTlaLFNBQVNRLEdBQUc1WSxFQUFFQyxHQUFHLElBQUlzRixFQUFFdkYsRUFBRWlZLFVBQVUsR0FBRyxPQUFPMVMsRUFBRSxPQUFPLEtBQUssSUFBSUMsRUFBRTBTLEdBQUczUyxHQUFHLEdBQUcsT0FBT0MsRUFBRSxPQUFPLEtBQUtELEVBQUVDLEVBQUV2RixHQUFHRCxFQUFFLE9BQU9DLEdBQUcsSUFBSyxVQUFVLElBQUssaUJBQWlCLElBQUssZ0JBQWdCLElBQUssdUJBQXVCLElBQUssY0FBYyxJQUFLLHFCQUFxQixJQUFLLGNBQWMsSUFBSyxxQkFBcUIsSUFBSyxZQUFZLElBQUssbUJBQW1CLElBQUssZ0JBQWdCdUYsR0FBR0EsRUFBRW1NLFlBQXFCbk0sSUFBSSxZQUFieEYsRUFBRUEsRUFBRW9ELE9BQXVCLFVBQVVwRCxHQUFHLFdBQVdBLEdBQUcsYUFBYUEsSUFBSUEsR0FBR3dGLEVBQUUsTUFBTXhGLEVBQUUsUUFBUUEsR0FBRSxFQUFHLEdBQUdBLEVBQUUsT0FBTyxLQUFLLEdBQUd1RixHQUFHLG1CQUNsZUEsRUFBRSxNQUFNSyxNQUFNa0UsRUFBRSxJQUFJN0osU0FBU3NGLElBQUksT0FBT0EsRUFBRSxJQUFJc1QsSUFBRyxFQUFHLEdBQUd2TyxFQUFHLElBQUksSUFBSXdPLEdBQUcsR0FBR3pZLE9BQU8rRCxlQUFlMFUsR0FBRyxVQUFVLENBQUNySixJQUFJLFdBQVdvSixJQUFHLEtBQU10TyxPQUFPd08saUJBQWlCLE9BQU9ELEdBQUdBLElBQUl2TyxPQUFPeU8sb0JBQW9CLE9BQU9GLEdBQUdBLElBQUksTUFBTTlZLElBQUc2WSxJQUFHLEVBQUcsU0FBU0ksR0FBR2paLEVBQUVDLEVBQUVzRixFQUFFQyxFQUFFSixFQUFFSyxFQUFFc0YsRUFBRTRELEVBQUVELEdBQUcsSUFBSXdLLEVBQUVqVCxNQUFNM0YsVUFBVXVMLE1BQU1wTCxLQUFLZ0QsVUFBVSxHQUFHLElBQUl4RCxFQUFFa1osTUFBTTVULEVBQUUyVCxHQUFHLE1BQU1wUyxHQUFHekUsS0FBSytXLFFBQVF0UyxJQUFJLElBQUl1UyxJQUFHLEVBQUdDLEdBQUcsS0FBS0MsSUFBRyxFQUFHQyxHQUFHLEtBQUtDLEdBQUcsQ0FBQ0wsUUFBUSxTQUFTcFosR0FBR3FaLElBQUcsRUFBR0MsR0FBR3RaLElBQUksU0FBUzBaLEdBQUcxWixFQUFFQyxFQUFFc0YsRUFBRUMsRUFBRUosRUFBRUssRUFBRXNGLEVBQUU0RCxFQUFFRCxHQUFHMkssSUFBRyxFQUFHQyxHQUFHLEtBQUtMLEdBQUdFLE1BQU1NLEdBQUdoVyxXQUN2VixTQUFTa1csR0FBRzNaLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXVGLEVBQUV2RixFQUFFLEdBQUdBLEVBQUU0WixVQUFVLEtBQUszWixFQUFFNFosUUFBUTVaLEVBQUVBLEVBQUU0WixXQUFXLENBQUM3WixFQUFFQyxFQUFFLEdBQU8sSUFBYSxNQUFqQkEsRUFBRUQsR0FBUzhaLFNBQWN2VSxFQUFFdEYsRUFBRTRaLFFBQVE3WixFQUFFQyxFQUFFNFosYUFBYTdaLEdBQUcsT0FBTyxJQUFJQyxFQUFFNE8sSUFBSXRKLEVBQUUsS0FBSyxTQUFTd1UsR0FBRy9aLEdBQUcsR0FBRyxLQUFLQSxFQUFFNk8sSUFBSSxDQUFDLElBQUk1TyxFQUFFRCxFQUFFZ2EsY0FBc0UsR0FBeEQsT0FBTy9aLEdBQWtCLFFBQWRELEVBQUVBLEVBQUU0WixhQUFxQjNaLEVBQUVELEVBQUVnYSxlQUFtQixPQUFPL1osRUFBRSxPQUFPQSxFQUFFZ2EsV0FBVyxPQUFPLEtBQUssU0FBU0MsR0FBR2xhLEdBQUcsR0FBRzJaLEdBQUczWixLQUFLQSxFQUFFLE1BQU00RixNQUFNa0UsRUFBRSxNQUVwUyxTQUFTcVEsR0FBR25hLEdBQVcsS0FBUkEsRUFEdE4sU0FBWUEsR0FBRyxJQUFJQyxFQUFFRCxFQUFFNFosVUFBVSxJQUFJM1osRUFBRSxDQUFTLEdBQUcsUUFBWEEsRUFBRTBaLEdBQUczWixJQUFlLE1BQU00RixNQUFNa0UsRUFBRSxNQUFNLE9BQU83SixJQUFJRCxFQUFFLEtBQUtBLEVBQUUsSUFBSSxJQUFJdUYsRUFBRXZGLEVBQUV3RixFQUFFdkYsSUFBSSxDQUFDLElBQUltRixFQUFFRyxFQUFFc1UsT0FBTyxHQUFHLE9BQU96VSxFQUFFLE1BQU0sSUFBSUssRUFBRUwsRUFBRXdVLFVBQVUsR0FBRyxPQUFPblUsRUFBRSxDQUFZLEdBQUcsUUFBZEQsRUFBRUosRUFBRXlVLFFBQW1CLENBQUN0VSxFQUFFQyxFQUFFLFNBQVMsTUFBTSxHQUFHSixFQUFFZ1YsUUFBUTNVLEVBQUUyVSxNQUFNLENBQUMsSUFBSTNVLEVBQUVMLEVBQUVnVixNQUFNM1UsR0FBRyxDQUFDLEdBQUdBLElBQUlGLEVBQUUsT0FBTzJVLEdBQUc5VSxHQUFHcEYsRUFBRSxHQUFHeUYsSUFBSUQsRUFBRSxPQUFPMFUsR0FBRzlVLEdBQUduRixFQUFFd0YsRUFBRUEsRUFBRTRVLFFBQVEsTUFBTXpVLE1BQU1rRSxFQUFFLE1BQU8sR0FBR3ZFLEVBQUVzVSxTQUFTclUsRUFBRXFVLE9BQU90VSxFQUFFSCxFQUFFSSxFQUFFQyxNQUFNLENBQUMsSUFBSSxJQUFJc0YsR0FBRSxFQUFHNEQsRUFBRXZKLEVBQUVnVixNQUFNekwsR0FBRyxDQUFDLEdBQUdBLElBQUlwSixFQUFFLENBQUN3RixHQUFFLEVBQUd4RixFQUFFSCxFQUFFSSxFQUFFQyxFQUFFLE1BQU0sR0FBR2tKLElBQUluSixFQUFFLENBQUN1RixHQUFFLEVBQUd2RixFQUFFSixFQUFFRyxFQUFFRSxFQUFFLE1BQU1rSixFQUFFQSxFQUFFMEwsUUFBUSxJQUFJdFAsRUFBRSxDQUFDLElBQUk0RCxFQUFFbEosRUFBRTJVLE1BQU16TCxHQUFHLENBQUMsR0FBR0EsSUFDNWZwSixFQUFFLENBQUN3RixHQUFFLEVBQUd4RixFQUFFRSxFQUFFRCxFQUFFSixFQUFFLE1BQU0sR0FBR3VKLElBQUluSixFQUFFLENBQUN1RixHQUFFLEVBQUd2RixFQUFFQyxFQUFFRixFQUFFSCxFQUFFLE1BQU11SixFQUFFQSxFQUFFMEwsUUFBUSxJQUFJdFAsRUFBRSxNQUFNbkYsTUFBTWtFLEVBQUUsT0FBUSxHQUFHdkUsRUFBRXFVLFlBQVlwVSxFQUFFLE1BQU1JLE1BQU1rRSxFQUFFLE1BQU8sR0FBRyxJQUFJdkUsRUFBRXNKLElBQUksTUFBTWpKLE1BQU1rRSxFQUFFLE1BQU0sT0FBT3ZFLEVBQUUwUyxVQUFVcUMsVUFBVS9VLEVBQUV2RixFQUFFQyxFQUFtQnNhLENBQUd2YSxJQUFTLE9BQU8sS0FBSyxJQUFJLElBQUlDLEVBQUVELElBQUksQ0FBQyxHQUFHLElBQUlDLEVBQUU0TyxLQUFLLElBQUk1TyxFQUFFNE8sSUFBSSxPQUFPNU8sRUFBRSxHQUFHQSxFQUFFbWEsTUFBTW5hLEVBQUVtYSxNQUFNUCxPQUFPNVosRUFBRUEsRUFBRUEsRUFBRW1hLFVBQVUsQ0FBQyxHQUFHbmEsSUFBSUQsRUFBRSxNQUFNLE1BQU1DLEVBQUVvYSxTQUFTLENBQUMsSUFBSXBhLEVBQUU0WixRQUFRNVosRUFBRTRaLFNBQVM3WixFQUFFLE9BQU8sS0FBS0MsRUFBRUEsRUFBRTRaLE9BQU81WixFQUFFb2EsUUFBUVIsT0FBTzVaLEVBQUU0WixPQUFPNVosRUFBRUEsRUFBRW9hLFNBQVMsT0FBTyxLQUM1YyxTQUFTRyxHQUFHeGEsRUFBRUMsR0FBRyxJQUFJLElBQUlzRixFQUFFdkYsRUFBRTRaLFVBQVUsT0FBTzNaLEdBQUcsQ0FBQyxHQUFHQSxJQUFJRCxHQUFHQyxJQUFJc0YsRUFBRSxPQUFNLEVBQUd0RixFQUFFQSxFQUFFNFosT0FBTyxPQUFNLEVBQUcsSUFBSVksR0FBR0MsR0FBR0MsR0FBR0MsR0FBR0MsSUFBRyxFQUFHQyxHQUFHLEdBQUdDLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsSUFBSUMsSUFBSUMsR0FBRyxJQUFJRCxJQUFJRSxHQUFHLEdBQUdDLEdBQUcsNlBBQTZQclUsTUFBTSxLQUNyYixTQUFTc1UsR0FBR3ZiLEVBQUVDLEVBQUVzRixFQUFFQyxFQUFFSixHQUFHLE1BQU0sQ0FBQ29XLFVBQVV4YixFQUFFeWIsYUFBYXhiLEVBQUV5YixpQkFBbUIsR0FBRm5XLEVBQUtvVyxZQUFZdlcsRUFBRXdXLGlCQUFpQixDQUFDcFcsSUFBSSxTQUFTcVcsR0FBRzdiLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFVBQVUsSUFBSyxXQUFXK2EsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZLElBQUssWUFBWUMsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZLElBQUssV0FBV0MsR0FBRyxLQUFLLE1BQU0sSUFBSyxjQUFjLElBQUssYUFBYUMsR0FBR1ksT0FBTzdiLEVBQUU4YixXQUFXLE1BQU0sSUFBSyxvQkFBb0IsSUFBSyxxQkFBcUJYLEdBQUdVLE9BQU83YixFQUFFOGIsWUFDM1osU0FBU0MsR0FBR2hjLEVBQUVDLEVBQUVzRixFQUFFQyxFQUFFSixFQUFFSyxHQUFHLE9BQUcsT0FBT3pGLEdBQUdBLEVBQUUyYixjQUFjbFcsR0FBU3pGLEVBQUV1YixHQUFHdGIsRUFBRXNGLEVBQUVDLEVBQUVKLEVBQUVLLEdBQUcsT0FBT3hGLEdBQVksUUFBUkEsRUFBRStYLEdBQUcvWCxLQUFheWEsR0FBR3phLEdBQUlELElBQUVBLEVBQUUwYixrQkFBa0JsVyxFQUFFdkYsRUFBRUQsRUFBRTRiLGlCQUFpQixPQUFPeFcsSUFBSSxJQUFJbkYsRUFBRWdXLFFBQVE3USxJQUFJbkYsRUFBRWlCLEtBQUtrRSxHQUFVcEYsR0FFOU0sU0FBU2ljLEdBQUdqYyxHQUFHLElBQUlDLEVBQUVpYyxHQUFHbGMsRUFBRXNILFFBQVEsR0FBRyxPQUFPckgsRUFBRSxDQUFDLElBQUlzRixFQUFFb1UsR0FBRzFaLEdBQUcsR0FBRyxPQUFPc0YsRUFBRSxHQUFXLE1BQVJ0RixFQUFFc0YsRUFBRXNKLE1BQVksR0FBVyxRQUFSNU8sRUFBRThaLEdBQUd4VSxJQUFtSCxPQUF0R3ZGLEVBQUV3YixVQUFVdmIsT0FBRTJhLEdBQUc1YSxFQUFFbWMsY0FBYSxXQUFXdFMsRUFBRXVTLHlCQUF5QnBjLEVBQUVxYyxVQUFTLFdBQVcxQixHQUFHcFYsY0FBb0IsR0FBRyxJQUFJdEYsR0FBR3NGLEVBQUUwUyxVQUFVcUUsUUFBOEQsWUFBckR0YyxFQUFFd2IsVUFBVSxJQUFJalcsRUFBRXNKLElBQUl0SixFQUFFMFMsVUFBVXNFLGNBQWMsTUFBYXZjLEVBQUV3YixVQUFVLEtBQzFVLFNBQVNnQixHQUFHeGMsR0FBRyxHQUFHLE9BQU9BLEVBQUV3YixVQUFVLE9BQU0sRUFBRyxJQUFJLElBQUl2YixFQUFFRCxFQUFFNGIsaUJBQWlCLEVBQUUzYixFQUFFZ0IsUUFBUSxDQUFDLElBQUlzRSxFQUFFa1gsR0FBR3pjLEVBQUV5YixhQUFhemIsRUFBRTBiLGlCQUFpQnpiLEVBQUUsR0FBR0QsRUFBRTJiLGFBQWEsR0FBRyxPQUFPcFcsRUFBRSxPQUFlLFFBQVJ0RixFQUFFK1gsR0FBR3pTLEtBQWFtVixHQUFHemEsR0FBR0QsRUFBRXdiLFVBQVVqVyxHQUFFLEVBQUd0RixFQUFFeWMsUUFBUSxPQUFNLEVBQUcsU0FBU0MsR0FBRzNjLEVBQUVDLEVBQUVzRixHQUFHaVgsR0FBR3hjLElBQUl1RixFQUFFdVcsT0FBTzdiLEdBQ3pRLFNBQVMyYyxLQUFLLElBQUkvQixJQUFHLEVBQUcsRUFBRUMsR0FBRzdaLFFBQVEsQ0FBQyxJQUFJakIsRUFBRThhLEdBQUcsR0FBRyxHQUFHLE9BQU85YSxFQUFFd2IsVUFBVSxDQUFtQixRQUFsQnhiLEVBQUVnWSxHQUFHaFksRUFBRXdiLGFBQXFCZixHQUFHemEsR0FBRyxNQUFNLElBQUksSUFBSUMsRUFBRUQsRUFBRTRiLGlCQUFpQixFQUFFM2IsRUFBRWdCLFFBQVEsQ0FBQyxJQUFJc0UsRUFBRWtYLEdBQUd6YyxFQUFFeWIsYUFBYXpiLEVBQUUwYixpQkFBaUJ6YixFQUFFLEdBQUdELEVBQUUyYixhQUFhLEdBQUcsT0FBT3BXLEVBQUUsQ0FBQ3ZGLEVBQUV3YixVQUFValcsRUFBRSxNQUFNdEYsRUFBRXljLFFBQVEsT0FBTzFjLEVBQUV3YixXQUFXVixHQUFHNEIsUUFBUSxPQUFPM0IsSUFBSXlCLEdBQUd6QixNQUFNQSxHQUFHLE1BQU0sT0FBT0MsSUFBSXdCLEdBQUd4QixNQUFNQSxHQUFHLE1BQU0sT0FBT0MsSUFBSXVCLEdBQUd2QixNQUFNQSxHQUFHLE1BQU1DLEdBQUdoVSxRQUFReVYsSUFBSXZCLEdBQUdsVSxRQUFReVYsSUFDclosU0FBU0UsR0FBRzdjLEVBQUVDLEdBQUdELEVBQUV3YixZQUFZdmIsSUFBSUQsRUFBRXdiLFVBQVUsS0FBS1gsS0FBS0EsSUFBRyxFQUFHaFIsRUFBRWlULDBCQUEwQmpULEVBQUVrVCx3QkFBd0JILE1BQ3JILFNBQVNJLEdBQUdoZCxHQUFHLFNBQVNDLEVBQUVBLEdBQUcsT0FBTzRjLEdBQUc1YyxFQUFFRCxHQUFHLEdBQUcsRUFBRThhLEdBQUc3WixPQUFPLENBQUM0YixHQUFHL0IsR0FBRyxHQUFHOWEsR0FBRyxJQUFJLElBQUl1RixFQUFFLEVBQUVBLEVBQUV1VixHQUFHN1osT0FBT3NFLElBQUksQ0FBQyxJQUFJQyxFQUFFc1YsR0FBR3ZWLEdBQUdDLEVBQUVnVyxZQUFZeGIsSUFBSXdGLEVBQUVnVyxVQUFVLE9BQStGLElBQXhGLE9BQU9ULElBQUk4QixHQUFHOUIsR0FBRy9hLEdBQUcsT0FBT2diLElBQUk2QixHQUFHN0IsR0FBR2hiLEdBQUcsT0FBT2liLElBQUk0QixHQUFHNUIsR0FBR2piLEdBQUdrYixHQUFHaFUsUUFBUWpILEdBQUdtYixHQUFHbFUsUUFBUWpILEdBQU9zRixFQUFFLEVBQUVBLEVBQUU4VixHQUFHcGEsT0FBT3NFLEtBQUlDLEVBQUU2VixHQUFHOVYsSUFBS2lXLFlBQVl4YixJQUFJd0YsRUFBRWdXLFVBQVUsTUFBTSxLQUFLLEVBQUVILEdBQUdwYSxRQUFpQixRQUFSc0UsRUFBRThWLEdBQUcsSUFBWUcsV0FBWVMsR0FBRzFXLEdBQUcsT0FBT0EsRUFBRWlXLFdBQVdILEdBQUdxQixRQUMvWCxTQUFTTyxHQUFHamQsRUFBRUMsR0FBRyxJQUFJc0YsRUFBRSxHQUFrRixPQUEvRUEsRUFBRXZGLEVBQUV3TCxlQUFldkwsRUFBRXVMLGNBQWNqRyxFQUFFLFNBQVN2RixHQUFHLFNBQVNDLEVBQUVzRixFQUFFLE1BQU12RixHQUFHLE1BQU1DLEVBQVNzRixFQUFFLElBQUkyWCxHQUFHLENBQUNDLGFBQWFGLEdBQUcsWUFBWSxnQkFBZ0JHLG1CQUFtQkgsR0FBRyxZQUFZLHNCQUFzQkksZUFBZUosR0FBRyxZQUFZLGtCQUFrQkssY0FBY0wsR0FBRyxhQUFhLGtCQUFrQk0sR0FBRyxHQUFHQyxHQUFHLEdBQ25GLFNBQVNDLEdBQUd6ZCxHQUFHLEdBQUd1ZCxHQUFHdmQsR0FBRyxPQUFPdWQsR0FBR3ZkLEdBQUcsSUFBSWtkLEdBQUdsZCxHQUFHLE9BQU9BLEVBQUUsSUFBWXVGLEVBQVJ0RixFQUFFaWQsR0FBR2xkLEdBQUssSUFBSXVGLEtBQUt0RixFQUFFLEdBQUdBLEVBQUVvQixlQUFla0UsSUFBSUEsS0FBS2lZLEdBQUcsT0FBT0QsR0FBR3ZkLEdBQUdDLEVBQUVzRixHQUFHLE9BQU92RixFQUE5WHNLLElBQUtrVCxHQUFHaFQsU0FBU0MsY0FBYyxPQUFPdUwsTUFBTSxtQkFBbUJ6TCxnQkFBZ0IyUyxHQUFHQyxhQUFhTyxpQkFBaUJSLEdBQUdFLG1CQUFtQk0saUJBQWlCUixHQUFHRyxlQUFlSyxXQUFXLG9CQUFvQm5ULGVBQWUyUyxHQUFHSSxjQUFjSyxZQUN4TyxJQUFJQyxHQUFHSCxHQUFHLGdCQUFnQkksR0FBR0osR0FBRyxzQkFBc0JLLEdBQUdMLEdBQUcsa0JBQWtCTSxHQUFHTixHQUFHLGlCQUFpQk8sR0FBRyxJQUFJN0MsSUFBSThDLEdBQUcsSUFBSTlDLElBQUkrQyxHQUFHLENBQUMsUUFBUSxRQUFRTixHQUFHLGVBQWVDLEdBQUcscUJBQXFCQyxHQUFHLGlCQUFpQixVQUFVLFVBQVUsaUJBQWlCLGlCQUFpQixpQkFBaUIsaUJBQWlCLFVBQVUsVUFBVSxZQUFZLFlBQVksUUFBUSxRQUFRLFFBQVEsUUFBUSxvQkFBb0Isb0JBQW9CLE9BQU8sT0FBTyxhQUFhLGFBQWEsaUJBQWlCLGlCQUFpQixZQUFZLFlBQy9lLHFCQUFxQixxQkFBcUIsVUFBVSxVQUFVLFdBQVcsV0FBVyxVQUFVLFVBQVUsVUFBVSxVQUFVLFVBQVUsVUFBVSxhQUFhLGFBQWFDLEdBQUcsZ0JBQWdCLFVBQVUsV0FBVyxTQUFTSSxHQUFHbmUsRUFBRUMsR0FBRyxJQUFJLElBQUlzRixFQUFFLEVBQUVBLEVBQUV2RixFQUFFaUIsT0FBT3NFLEdBQUcsRUFBRSxDQUFDLElBQUlDLEVBQUV4RixFQUFFdUYsR0FBR0gsRUFBRXBGLEVBQUV1RixFQUFFLEdBQUdILEVBQUUsTUFBTUEsRUFBRSxHQUFHdUcsY0FBY3ZHLEVBQUV5RyxNQUFNLElBQUlvUyxHQUFHMVAsSUFBSS9JLEVBQUV2RixHQUFHK2QsR0FBR3pQLElBQUkvSSxFQUFFSixHQUFHK0UsRUFBRy9FLEVBQUUsQ0FBQ0ksTUFBMkI0WSxFQUFmdlUsRUFBRXdVLGdCQUFrQixJQUFJQyxHQUFFLEVBQy9YLFNBQVNDLEdBQUd2ZSxHQUFHLEdBQUcsSUFBSyxFQUFFQSxHQUFHLE9BQU9zZSxHQUFFLEdBQUcsRUFBRSxHQUFHLElBQUssRUFBRXRlLEdBQUcsT0FBT3NlLEdBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSyxFQUFFdGUsR0FBRyxPQUFPc2UsR0FBRSxHQUFHLEVBQUUsSUFBSXJlLEVBQUUsR0FBR0QsRUFBRSxPQUFHLElBQUlDLEdBQVNxZSxHQUFFLEdBQUdyZSxHQUFLLElBQU8sR0FBRkQsSUFBYXNlLEdBQUUsR0FBRyxJQUFjLElBQVhyZSxFQUFFLElBQUlELElBQWtCc2UsR0FBRSxHQUFHcmUsR0FBSyxJQUFPLElBQUZELElBQWNzZSxHQUFFLEVBQUUsS0FBZ0IsSUFBWnJlLEVBQUUsS0FBS0QsSUFBa0JzZSxHQUFFLEVBQUVyZSxHQUFLLElBQU8sS0FBRkQsSUFBZXNlLEdBQUUsRUFBRSxNQUFvQixJQUFmcmUsRUFBRSxRQUFRRCxJQUFrQnNlLEdBQUUsRUFBRXJlLEdBQWtCLElBQWhCQSxFQUFFLFNBQVNELElBQWtCc2UsR0FBRSxFQUFFcmUsR0FBTyxTQUFGRCxHQUFrQnNlLEdBQUUsRUFBRSxVQUFZLElBQU8sVUFBRnRlLElBQW9Cc2UsR0FBRSxFQUFFLFdBQTJCLElBQWpCcmUsRUFBRSxVQUFVRCxJQUFrQnNlLEdBQUUsRUFBRXJlLEdBQUssSUFBSyxXQUFXRCxJQUFVc2UsR0FBRSxFQUFFLGFBQ2pmQSxHQUFFLEVBQVN0ZSxHQUNYLFNBQVN3ZSxHQUFHeGUsRUFBRUMsR0FBRyxJQUFJc0YsRUFBRXZGLEVBQUV5ZSxhQUFhLEdBQUcsSUFBSWxaLEVBQUUsT0FBTytZLEdBQUUsRUFBRSxJQUFJOVksRUFBRSxFQUFFSixFQUFFLEVBQUVLLEVBQUV6RixFQUFFMGUsYUFBYTNULEVBQUUvSyxFQUFFMmUsZUFBZWhRLEVBQUUzTyxFQUFFNGUsWUFBWSxHQUFHLElBQUluWixFQUFFRCxFQUFFQyxFQUFFTCxFQUFFa1osR0FBRSxRQUFRLEdBQWlCLElBQWQ3WSxFQUFJLFVBQUZGLEdBQWtCLENBQUMsSUFBSW1KLEVBQUVqSixHQUFHc0YsRUFBRSxJQUFJMkQsR0FBR2xKLEVBQUUrWSxHQUFHN1AsR0FBR3RKLEVBQUVrWixJQUFTLElBQUwzUCxHQUFHbEosS0FBVUQsRUFBRStZLEdBQUc1UCxHQUFHdkosRUFBRWtaLFNBQWdCLElBQVA3WSxFQUFFRixHQUFHd0YsSUFBU3ZGLEVBQUUrWSxHQUFHOVksR0FBR0wsRUFBRWtaLElBQUcsSUFBSTNQLElBQUluSixFQUFFK1ksR0FBRzVQLEdBQUd2SixFQUFFa1osSUFBRyxHQUFHLElBQUk5WSxFQUFFLE9BQU8sRUFBcUMsR0FBeEJBLEVBQUVELElBQUksR0FBakJDLEVBQUUsR0FBR3FaLEdBQUdyWixJQUFhLEVBQUUsR0FBR0EsSUFBSSxHQUFHLEVBQUssSUFBSXZGLEdBQUdBLElBQUl1RixHQUFHLElBQUt2RixFQUFFOEssR0FBRyxDQUFPLEdBQU53VCxHQUFHdGUsR0FBTW1GLEdBQUdrWixHQUFFLE9BQU9yZSxFQUFFcWUsR0FBRWxaLEVBQXFCLEdBQUcsS0FBdEJuRixFQUFFRCxFQUFFOGUsZ0JBQXdCLElBQUk5ZSxFQUFFQSxFQUFFK2UsY0FBYzllLEdBQUd1RixFQUFFLEVBQUV2RixHQUFjbUYsRUFBRSxJQUFiRyxFQUFFLEdBQUdzWixHQUFHNWUsSUFBVXVGLEdBQUd4RixFQUFFdUYsR0FBR3RGLElBQUltRixFQUFFLE9BQU9JLEVBQzFlLFNBQVN3WixHQUFHaGYsR0FBZ0MsT0FBTyxJQUFwQ0EsR0FBa0IsV0FBaEJBLEVBQUV5ZSxjQUFzQ3plLEVBQUksV0FBRkEsRUFBYSxXQUFXLEVBQUUsU0FBU2lmLEdBQUdqZixFQUFFQyxHQUFHLE9BQU9ELEdBQUcsS0FBSyxHQUFHLE9BQU8sRUFBRSxLQUFLLEdBQUcsT0FBTyxFQUFFLEtBQUssR0FBRyxPQUFtQixLQUFaQSxFQUFFa2YsR0FBRyxJQUFJamYsSUFBU2dmLEdBQUcsR0FBR2hmLEdBQUdELEVBQUUsS0FBSyxHQUFHLE9BQW9CLEtBQWJBLEVBQUVrZixHQUFHLEtBQUtqZixJQUFTZ2YsR0FBRyxFQUFFaGYsR0FBR0QsRUFBRSxLQUFLLEVBQUUsT0FBcUIsS0FBZEEsRUFBRWtmLEdBQUcsTUFBTWpmLEtBQTRCLEtBQWpCRCxFQUFFa2YsR0FBRyxTQUFTamYsTUFBV0QsRUFBRSxLQUFNQSxFQUFFLEtBQUssRUFBRSxPQUEwQixLQUFuQkMsRUFBRWlmLEdBQUcsV0FBV2pmLE1BQVdBLEVBQUUsV0FBV0EsRUFBRSxNQUFNMkYsTUFBTWtFLEVBQUUsSUFBSTlKLElBQUssU0FBU2tmLEdBQUdsZixHQUFHLE9BQU9BLEdBQUdBLEVBQUUsU0FBU21mLEdBQUduZixHQUFHLElBQUksSUFBSUMsRUFBRSxHQUFHc0YsRUFBRSxFQUFFLEdBQUdBLEVBQUVBLElBQUl0RixFQUFFaUIsS0FBS2xCLEdBQUcsT0FBT0MsRUFDcmQsU0FBU21mLEdBQUdwZixFQUFFQyxFQUFFc0YsR0FBR3ZGLEVBQUV5ZSxjQUFjeGUsRUFBRSxJQUFJdUYsRUFBRXZGLEVBQUUsRUFBRUQsRUFBRTJlLGdCQUFnQm5aLEVBQUV4RixFQUFFNGUsYUFBYXBaLEdBQUV4RixFQUFFQSxFQUFFcWYsWUFBV3BmLEVBQUUsR0FBRzRlLEdBQUc1ZSxJQUFRc0YsRUFBRSxJQUFJc1osR0FBR1MsS0FBS0MsTUFBTUQsS0FBS0MsTUFBaUMsU0FBWXZmLEdBQUcsT0FBTyxJQUFJQSxFQUFFLEdBQUcsSUFBSXdmLEdBQUd4ZixHQUFHeWYsR0FBRyxHQUFHLEdBQXZFRCxHQUFHRixLQUFLSSxJQUFJRCxHQUFHSCxLQUFLSyxJQUF5REMsR0FBRy9WLEVBQUVnVyw4QkFBOEJDLEdBQUdqVyxFQUFFdVMseUJBQXlCMkQsSUFBRyxFQUFHLFNBQVNDLEdBQUdoZ0IsRUFBRUMsRUFBRXNGLEVBQUVDLEdBQUdpVCxJQUFJRixLQUFLLElBQUluVCxFQUFFNmEsR0FBR3hhLEVBQUVnVCxHQUFHQSxJQUFHLEVBQUcsSUFBSUgsR0FBR2xULEVBQUVwRixFQUFFQyxFQUFFc0YsRUFBRUMsR0FBRyxTQUFTaVQsR0FBR2hULElBQUlrVCxNQUFNLFNBQVN1SCxHQUFHbGdCLEVBQUVDLEVBQUVzRixFQUFFQyxHQUFHc2EsR0FBR0YsR0FBR0ssR0FBR0UsS0FBSyxLQUFLbmdCLEVBQUVDLEVBQUVzRixFQUFFQyxJQUNqYixTQUFTeWEsR0FBR2pnQixFQUFFQyxFQUFFc0YsRUFBRUMsR0FBVSxJQUFJSixFQUFYLEdBQUcyYSxHQUFVLElBQUkzYSxFQUFFLElBQU8sRUFBRm5GLEtBQU8sRUFBRTZhLEdBQUc3WixTQUFTLEVBQUVxYSxHQUFHckYsUUFBUWpXLEdBQUdBLEVBQUV1YixHQUFHLEtBQUt2YixFQUFFQyxFQUFFc0YsRUFBRUMsR0FBR3NWLEdBQUc1WixLQUFLbEIsT0FBTyxDQUFDLElBQUl5RixFQUFFZ1gsR0FBR3pjLEVBQUVDLEVBQUVzRixFQUFFQyxHQUFHLEdBQUcsT0FBT0MsRUFBRUwsR0FBR3lXLEdBQUc3YixFQUFFd0YsT0FBTyxDQUFDLEdBQUdKLEVBQUUsQ0FBQyxJQUFJLEVBQUVrVyxHQUFHckYsUUFBUWpXLEdBQStCLE9BQTNCQSxFQUFFdWIsR0FBRzlWLEVBQUV6RixFQUFFQyxFQUFFc0YsRUFBRUMsUUFBR3NWLEdBQUc1WixLQUFLbEIsR0FBVSxHQWZoTyxTQUFZQSxFQUFFQyxFQUFFc0YsRUFBRUMsRUFBRUosR0FBRyxPQUFPbkYsR0FBRyxJQUFLLFVBQVUsT0FBTzhhLEdBQUdpQixHQUFHakIsR0FBRy9hLEVBQUVDLEVBQUVzRixFQUFFQyxFQUFFSixJQUFHLEVBQUcsSUFBSyxZQUFZLE9BQU80VixHQUFHZ0IsR0FBR2hCLEdBQUdoYixFQUFFQyxFQUFFc0YsRUFBRUMsRUFBRUosSUFBRyxFQUFHLElBQUssWUFBWSxPQUFPNlYsR0FBR2UsR0FBR2YsR0FBR2piLEVBQUVDLEVBQUVzRixFQUFFQyxFQUFFSixJQUFHLEVBQUcsSUFBSyxjQUFjLElBQUlLLEVBQUVMLEVBQUUyVyxVQUFrRCxPQUF4Q2IsR0FBRzNNLElBQUk5SSxFQUFFdVcsR0FBR2QsR0FBR3pMLElBQUloSyxJQUFJLEtBQUt6RixFQUFFQyxFQUFFc0YsRUFBRUMsRUFBRUosS0FBVSxFQUFHLElBQUssb0JBQW9CLE9BQU9LLEVBQUVMLEVBQUUyVyxVQUFVWCxHQUFHN00sSUFBSTlJLEVBQUV1VyxHQUFHWixHQUFHM0wsSUFBSWhLLElBQUksS0FBS3pGLEVBQUVDLEVBQUVzRixFQUFFQyxFQUFFSixLQUFJLEVBQUcsT0FBTSxFQWU5SGdiLENBQUczYSxFQUFFekYsRUFBRUMsRUFBRXNGLEVBQUVDLEdBQUcsT0FBT3FXLEdBQUc3YixFQUFFd0YsR0FBRzZhLEdBQUdyZ0IsRUFBRUMsRUFBRXVGLEVBQUUsS0FBS0QsS0FDOVEsU0FBU2tYLEdBQUd6YyxFQUFFQyxFQUFFc0YsRUFBRUMsR0FBRyxJQUFJSixFQUFFb1MsR0FBR2hTLEdBQVcsR0FBRyxRQUFYSixFQUFFOFcsR0FBRzlXLElBQWUsQ0FBQyxJQUFJSyxFQUFFa1UsR0FBR3ZVLEdBQUcsR0FBRyxPQUFPSyxFQUFFTCxFQUFFLFNBQVMsQ0FBQyxJQUFJMkYsRUFBRXRGLEVBQUVvSixJQUFJLEdBQUcsS0FBSzlELEVBQUUsQ0FBUyxHQUFHLFFBQVgzRixFQUFFMlUsR0FBR3RVLElBQWUsT0FBT0wsRUFBRUEsRUFBRSxVQUFVLEdBQUcsSUFBSTJGLEVBQUUsQ0FBQyxHQUFHdEYsRUFBRXdTLFVBQVVxRSxRQUFRLE9BQU8sSUFBSTdXLEVBQUVvSixJQUFJcEosRUFBRXdTLFVBQVVzRSxjQUFjLEtBQUtuWCxFQUFFLFVBQVVLLElBQUlMLElBQUlBLEVBQUUsT0FBcUIsT0FBZGliLEdBQUdyZ0IsRUFBRUMsRUFBRXVGLEVBQUVKLEVBQUVHLEdBQVUsS0FBSyxJQUFJK2EsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FDelQsU0FBU0MsS0FBSyxHQUFHRCxHQUFHLE9BQU9BLEdBQUcsSUFBSXhnQixFQUFrQndGLEVBQWhCdkYsRUFBRXNnQixHQUFHaGIsRUFBRXRGLEVBQUVnQixPQUFTbUUsRUFBRSxVQUFVa2IsR0FBR0EsR0FBR3BRLE1BQU1vUSxHQUFHck8sWUFBWXhNLEVBQUVMLEVBQUVuRSxPQUFPLElBQUlqQixFQUFFLEVBQUVBLEVBQUV1RixHQUFHdEYsRUFBRUQsS0FBS29GLEVBQUVwRixHQUFHQSxLQUFLLElBQUkrSyxFQUFFeEYsRUFBRXZGLEVBQUUsSUFBSXdGLEVBQUUsRUFBRUEsR0FBR3VGLEdBQUc5SyxFQUFFc0YsRUFBRUMsS0FBS0osRUFBRUssRUFBRUQsR0FBR0EsS0FBSyxPQUFPZ2IsR0FBR3BiLEVBQUV5RyxNQUFNN0wsRUFBRSxFQUFFd0YsRUFBRSxFQUFFQSxPQUFFLEdBQVEsU0FBU2tiLEdBQUcxZ0IsR0FBRyxJQUFJQyxFQUFFRCxFQUFFMmdCLFFBQStFLE1BQXZFLGFBQWEzZ0IsRUFBZ0IsS0FBYkEsRUFBRUEsRUFBRTRnQixXQUFnQixLQUFLM2dCLElBQUlELEVBQUUsSUFBS0EsRUFBRUMsRUFBRSxLQUFLRCxJQUFJQSxFQUFFLElBQVcsSUFBSUEsR0FBRyxLQUFLQSxFQUFFQSxFQUFFLEVBQUUsU0FBUzZnQixLQUFLLE9BQU0sRUFBRyxTQUFTQyxLQUFLLE9BQU0sRUFDalksU0FBU0MsR0FBRy9nQixHQUFHLFNBQVNDLEVBQUVBLEVBQUV1RixFQUFFSixFQUFFSyxFQUFFc0YsR0FBNkcsSUFBSSxJQUFJeEYsS0FBbEhsRCxLQUFLMmUsV0FBVy9nQixFQUFFb0MsS0FBSzRlLFlBQVk3YixFQUFFL0MsS0FBS2UsS0FBS29DLEVBQUVuRCxLQUFLc1osWUFBWWxXLEVBQUVwRCxLQUFLaUYsT0FBT3lELEVBQUUxSSxLQUFLNmUsY0FBYyxLQUFrQmxoQixFQUFFQSxFQUFFcUIsZUFBZWtFLEtBQUt0RixFQUFFRCxFQUFFdUYsR0FBR2xELEtBQUtrRCxHQUFHdEYsRUFBRUEsRUFBRXdGLEdBQUdBLEVBQUVGLElBQWdJLE9BQTVIbEQsS0FBSzhlLG9CQUFvQixNQUFNMWIsRUFBRTJiLGlCQUFpQjNiLEVBQUUyYixrQkFBaUIsSUFBSzNiLEVBQUU0YixhQUFhUixHQUFHQyxHQUFHemUsS0FBS2lmLHFCQUFxQlIsR0FBVXplLEtBQzFFLE9BRCtFdUgsRUFBRTNKLEVBQUVLLFVBQVUsQ0FBQ2loQixlQUFlLFdBQVdsZixLQUFLK2Usa0JBQWlCLEVBQUcsSUFBSXBoQixFQUFFcUMsS0FBS3NaLFlBQVkzYixJQUFJQSxFQUFFdWhCLGVBQWV2aEIsRUFBRXVoQixpQkFBaUIsa0JBQW1CdmhCLEVBQUVxaEIsY0FDN2VyaEIsRUFBRXFoQixhQUFZLEdBQUloZixLQUFLOGUsbUJBQW1CTixLQUFLVyxnQkFBZ0IsV0FBVyxJQUFJeGhCLEVBQUVxQyxLQUFLc1osWUFBWTNiLElBQUlBLEVBQUV3aEIsZ0JBQWdCeGhCLEVBQUV3aEIsa0JBQWtCLGtCQUFtQnhoQixFQUFFeWhCLGVBQWV6aEIsRUFBRXloQixjQUFhLEdBQUlwZixLQUFLaWYscUJBQXFCVCxLQUFLYSxRQUFRLGFBQWFDLGFBQWFkLEtBQVk1Z0IsRUFDaFIsSUFBb0wyaEIsR0FBR0MsR0FBR0MsR0FBdExDLEdBQUcsQ0FBQ0MsV0FBVyxFQUFFQyxRQUFRLEVBQUVDLFdBQVcsRUFBRUMsVUFBVSxTQUFTbmlCLEdBQUcsT0FBT0EsRUFBRW1pQixXQUFXQyxLQUFLQyxPQUFPakIsaUJBQWlCLEVBQUVrQixVQUFVLEdBQUdDLEdBQUd4QixHQUFHZ0IsSUFBSVMsR0FBRzVZLEVBQUUsR0FBR21ZLEdBQUcsQ0FBQ1UsS0FBSyxFQUFFQyxPQUFPLElBQUlDLEdBQUc1QixHQUFHeUIsSUFBYUksR0FBR2haLEVBQUUsR0FBRzRZLEdBQUcsQ0FBQ0ssUUFBUSxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxpQkFBaUJDLEdBQUdDLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxjQUFjLFNBQVMzakIsR0FBRyxZQUFPLElBQVNBLEVBQUUyakIsY0FBYzNqQixFQUFFNGpCLGNBQWM1akIsRUFBRXlYLFdBQVd6WCxFQUFFNmpCLFVBQVU3akIsRUFBRTRqQixZQUFZNWpCLEVBQUUyakIsZUFBZUcsVUFBVSxTQUFTOWpCLEdBQUcsTUFBRyxjQUMzZUEsRUFBU0EsRUFBRThqQixXQUFVOWpCLElBQUk4aEIsS0FBS0EsSUFBSSxjQUFjOWhCLEVBQUVvRCxNQUFNd2UsR0FBRzVoQixFQUFFNmlCLFFBQVFmLEdBQUdlLFFBQVFoQixHQUFHN2hCLEVBQUU4aUIsUUFBUWhCLEdBQUdnQixTQUFTakIsR0FBR0QsR0FBRyxFQUFFRSxHQUFHOWhCLEdBQVU0aEIsS0FBSW1DLFVBQVUsU0FBUy9qQixHQUFHLE1BQU0sY0FBY0EsRUFBRUEsRUFBRStqQixVQUFVbEMsTUFBTW1DLEdBQUdqRCxHQUFHNkIsSUFBaUNxQixHQUFHbEQsR0FBN0JuWCxFQUFFLEdBQUdnWixHQUFHLENBQUNzQixhQUFhLEtBQTRDQyxHQUFHcEQsR0FBOUJuWCxFQUFFLEdBQUc0WSxHQUFHLENBQUNtQixjQUFjLEtBQTBFUyxHQUFHckQsR0FBNURuWCxFQUFFLEdBQUdtWSxHQUFHLENBQUNzQyxjQUFjLEVBQUVDLFlBQVksRUFBRUMsY0FBYyxLQUFzSEMsR0FBR3pELEdBQXhHblgsRUFBRSxHQUFHbVksR0FBRyxDQUFDMEMsY0FBYyxTQUFTemtCLEdBQUcsTUFBTSxrQkFBa0JBLEVBQUVBLEVBQUV5a0IsY0FBY2xhLE9BQU9rYSxrQkFBZ0RDLEdBQUczRCxHQUFyQm5YLEVBQUUsR0FBR21ZLEdBQUcsQ0FBQzRDLEtBQUssS0FBY0MsR0FBRyxDQUFDQyxJQUFJLFNBQ3hmQyxTQUFTLElBQUlDLEtBQUssWUFBWUMsR0FBRyxVQUFVQyxNQUFNLGFBQWFDLEtBQUssWUFBWUMsSUFBSSxTQUFTQyxJQUFJLEtBQUtDLEtBQUssY0FBY0MsS0FBSyxjQUFjQyxPQUFPLGFBQWFDLGdCQUFnQixnQkFBZ0JDLEdBQUcsQ0FBQ0MsRUFBRSxZQUFZQyxFQUFFLE1BQU1DLEdBQUcsUUFBUUMsR0FBRyxRQUFRQyxHQUFHLFFBQVFDLEdBQUcsVUFBVUMsR0FBRyxNQUFNQyxHQUFHLFFBQVFDLEdBQUcsV0FBV0MsR0FBRyxTQUFTQyxHQUFHLElBQUlDLEdBQUcsU0FBU0MsR0FBRyxXQUFXQyxHQUFHLE1BQU1DLEdBQUcsT0FBT0MsR0FBRyxZQUFZQyxHQUFHLFVBQVVDLEdBQUcsYUFBYUMsR0FBRyxZQUFZQyxHQUFHLFNBQVNDLEdBQUcsU0FBU0MsSUFBSSxLQUFLQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxLQUFLQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxLQUN0ZkMsSUFBSSxLQUFLQyxJQUFJLEtBQUtDLElBQUksTUFBTUMsSUFBSSxNQUFNQyxJQUFJLE1BQU1DLElBQUksVUFBVUMsSUFBSSxhQUFhQyxJQUFJLFFBQVFDLEdBQUcsQ0FBQ0MsSUFBSSxTQUFTQyxRQUFRLFVBQVVDLEtBQUssVUFBVUMsTUFBTSxZQUFZLFNBQVNDLEdBQUdub0IsR0FBRyxJQUFJQyxFQUFFb0MsS0FBS3NaLFlBQVksT0FBTzFiLEVBQUVzakIsaUJBQWlCdGpCLEVBQUVzakIsaUJBQWlCdmpCLE1BQUlBLEVBQUU4bkIsR0FBRzluQixPQUFNQyxFQUFFRCxHQUFNLFNBQVN3akIsS0FBSyxPQUFPMkUsR0FDOVIsSUFDaUVDLEdBQUdySCxHQUQ3RG5YLEVBQUUsR0FBRzRZLEdBQUcsQ0FBQ3RkLElBQUksU0FBU2xGLEdBQUcsR0FBR0EsRUFBRWtGLElBQUksQ0FBQyxJQUFJakYsRUFBRTJrQixHQUFHNWtCLEVBQUVrRixNQUFNbEYsRUFBRWtGLElBQUksR0FBRyxpQkFBaUJqRixFQUFFLE9BQU9BLEVBQUUsTUFBTSxhQUFhRCxFQUFFb0QsS0FBYyxNQUFScEQsRUFBRTBnQixHQUFHMWdCLElBQVUsUUFBUVUsT0FBT2tHLGFBQWE1RyxHQUFJLFlBQVlBLEVBQUVvRCxNQUFNLFVBQVVwRCxFQUFFb0QsS0FBS3FpQixHQUFHemxCLEVBQUUyZ0IsVUFBVSxlQUFlLElBQUkwSCxLQUFLLEVBQUVuZ0IsU0FBUyxFQUFFaWIsUUFBUSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFZ0YsT0FBTyxFQUFFQyxPQUFPLEVBQUVoRixpQkFBaUJDLEdBQUc1QyxTQUFTLFNBQVM1Z0IsR0FBRyxNQUFNLGFBQWFBLEVBQUVvRCxLQUFLc2QsR0FBRzFnQixHQUFHLEdBQUcyZ0IsUUFBUSxTQUFTM2dCLEdBQUcsTUFBTSxZQUFZQSxFQUFFb0QsTUFBTSxVQUFVcEQsRUFBRW9ELEtBQUtwRCxFQUFFMmdCLFFBQVEsR0FBRzZILE1BQU0sU0FBU3hvQixHQUFHLE1BQU0sYUFDN2VBLEVBQUVvRCxLQUFLc2QsR0FBRzFnQixHQUFHLFlBQVlBLEVBQUVvRCxNQUFNLFVBQVVwRCxFQUFFb0QsS0FBS3BELEVBQUUyZ0IsUUFBUSxNQUE0SThILEdBQUcxSCxHQUE3SG5YLEVBQUUsR0FBR2daLEdBQUcsQ0FBQzdHLFVBQVUsRUFBRTJNLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxTQUFTLEVBQUVDLG1CQUFtQixFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxZQUFZLEVBQUVDLFVBQVUsS0FBbUlDLEdBQUdwSSxHQUFySG5YLEVBQUUsR0FBRzRZLEdBQUcsQ0FBQzRHLFFBQVEsRUFBRUMsY0FBYyxFQUFFQyxlQUFlLEVBQUVqRyxPQUFPLEVBQUVDLFFBQVEsRUFBRUgsUUFBUSxFQUFFQyxTQUFTLEVBQUVHLGlCQUFpQkMsTUFBMEUrRixHQUFHeEksR0FBM0RuWCxFQUFFLEdBQUdtWSxHQUFHLENBQUMzVyxhQUFhLEVBQUVrWixZQUFZLEVBQUVDLGNBQWMsS0FDL1BpRixHQUFHekksR0FENlFuWCxFQUFFLEdBQUdnWixHQUFHLENBQUM2RyxPQUFPLFNBQVN6cEIsR0FBRyxNQUFNLFdBQVdBLEVBQUVBLEVBQUV5cEIsT0FBTyxnQkFBZ0J6cEIsR0FBR0EsRUFBRTBwQixZQUFZLEdBQ2xmQyxPQUFPLFNBQVMzcEIsR0FBRyxNQUFNLFdBQVdBLEVBQUVBLEVBQUUycEIsT0FBTyxnQkFBZ0IzcEIsR0FBR0EsRUFBRTRwQixZQUFZLGVBQWU1cEIsR0FBR0EsRUFBRTZwQixXQUFXLEdBQUdDLE9BQU8sRUFBRUMsVUFBVSxLQUFjQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSUMsR0FBRzNmLEdBQUkscUJBQXFCQyxPQUFPMmYsR0FBRyxLQUFLNWYsR0FBSSxpQkFBaUJFLFdBQVcwZixHQUFHMWYsU0FBUzJmLGNBQWMsSUFBSUMsR0FBRzlmLEdBQUksY0FBY0MsU0FBUzJmLEdBQUdHLEdBQUcvZixLQUFNMmYsSUFBSUMsSUFBSSxFQUFFQSxJQUFJLElBQUlBLElBQUlJLEdBQUc1cEIsT0FBT2tHLGFBQWEsSUFBSTJqQixJQUFHLEVBQzFXLFNBQVNDLEdBQUd4cUIsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssUUFBUSxPQUFPLElBQUlncUIsR0FBRy9ULFFBQVFoVyxFQUFFMGdCLFNBQVMsSUFBSyxVQUFVLE9BQU8sTUFBTTFnQixFQUFFMGdCLFFBQVEsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLFdBQVcsT0FBTSxFQUFHLFFBQVEsT0FBTSxHQUFJLFNBQVM4SixHQUFHenFCLEdBQWMsTUFBTSxpQkFBakJBLEVBQUVBLEVBQUUwaUIsU0FBa0MsU0FBUzFpQixFQUFFQSxFQUFFMmtCLEtBQUssS0FBSyxJQUFJK0YsSUFBRyxFQUUxUUMsR0FBRyxDQUFDQyxPQUFNLEVBQUdDLE1BQUssRUFBR0MsVUFBUyxFQUFHLGtCQUFpQixFQUFHQyxPQUFNLEVBQUdDLE9BQU0sRUFBR3JpQixRQUFPLEVBQUdzaUIsVUFBUyxFQUFHQyxPQUFNLEVBQUdDLFFBQU8sRUFBR0MsS0FBSSxFQUFHQyxNQUFLLEVBQUdDLE1BQUssRUFBR0MsS0FBSSxFQUFHQyxNQUFLLEdBQUksU0FBU0MsR0FBR3pyQixHQUFHLElBQUlDLEVBQUVELEdBQUdBLEVBQUVzUCxVQUFVdFAsRUFBRXNQLFNBQVM5RCxjQUFjLE1BQU0sVUFBVXZMLElBQUkwcUIsR0FBRzNxQixFQUFFb0QsTUFBTSxhQUFhbkQsRUFBUSxTQUFTeXJCLEdBQUcxckIsRUFBRUMsRUFBRXNGLEVBQUVDLEdBQUcyUyxHQUFHM1MsR0FBc0IsR0FBbkJ2RixFQUFFMHJCLEdBQUcxckIsRUFBRSxhQUFnQmdCLFNBQVNzRSxFQUFFLElBQUlnZCxHQUFHLFdBQVcsU0FBUyxLQUFLaGQsRUFBRUMsR0FBR3hGLEVBQUVrQixLQUFLLENBQUMwcUIsTUFBTXJtQixFQUFFc21CLFVBQVU1ckIsS0FBSyxJQUFJNnJCLEdBQUcsS0FBS0MsR0FBRyxLQUFLLFNBQVNDLEdBQUdoc0IsR0FBR2lzQixHQUFHanNCLEVBQUUsR0FBRyxTQUFTa3NCLEdBQUdsc0IsR0FBZSxHQUFHZ1EsRUFBVG1jLEdBQUduc0IsSUFBWSxPQUFPQSxFQUNuZSxTQUFTb3NCLEdBQUdwc0IsRUFBRUMsR0FBRyxHQUFHLFdBQVdELEVBQUUsT0FBT0MsRUFBRSxJQUFJb3NCLElBQUcsRUFBRyxHQUFHL2hCLEVBQUcsQ0FBQyxJQUFJZ2lCLEdBQUcsR0FBR2hpQixFQUFHLENBQUMsSUFBSWlpQixHQUFHLFlBQVkvaEIsU0FBUyxJQUFJK2hCLEdBQUcsQ0FBQyxJQUFJQyxHQUFHaGlCLFNBQVNDLGNBQWMsT0FBTytoQixHQUFHcmdCLGFBQWEsVUFBVSxXQUFXb2dCLEdBQUcsbUJBQW9CQyxHQUFHQyxRQUFRSCxHQUFHQyxRQUFRRCxJQUFHLEVBQUdELEdBQUdDLE1BQU05aEIsU0FBUzJmLGNBQWMsRUFBRTNmLFNBQVMyZixjQUFjLFNBQVN1QyxLQUFLWixLQUFLQSxHQUFHYSxZQUFZLG1CQUFtQkMsSUFBSWIsR0FBR0QsR0FBRyxNQUFNLFNBQVNjLEdBQUc1c0IsR0FBRyxHQUFHLFVBQVVBLEVBQUVvTCxjQUFjOGdCLEdBQUdILElBQUksQ0FBQyxJQUFJOXJCLEVBQUUsR0FBeUIsR0FBdEJ5ckIsR0FBR3pyQixFQUFFOHJCLEdBQUcvckIsRUFBRXdYLEdBQUd4WCxJQUFJQSxFQUFFZ3NCLEdBQU12VCxHQUFHelksRUFBRUMsT0FBTyxDQUFDd1ksSUFBRyxFQUFHLElBQUlKLEdBQUdyWSxFQUFFQyxHQUFHLFFBQVF3WSxJQUFHLEVBQUdFLFFBQzNlLFNBQVNrVSxHQUFHN3NCLEVBQUVDLEVBQUVzRixHQUFHLFlBQVl2RixHQUFHMHNCLEtBQVVYLEdBQUd4bUIsR0FBUnVtQixHQUFHN3JCLEdBQVU2c0IsWUFBWSxtQkFBbUJGLEtBQUssYUFBYTVzQixHQUFHMHNCLEtBQUssU0FBU0ssR0FBRy9zQixHQUFHLEdBQUcsb0JBQW9CQSxHQUFHLFVBQVVBLEdBQUcsWUFBWUEsRUFBRSxPQUFPa3NCLEdBQUdILElBQUksU0FBU2lCLEdBQUdodEIsRUFBRUMsR0FBRyxHQUFHLFVBQVVELEVBQUUsT0FBT2tzQixHQUFHanNCLEdBQUcsU0FBU2d0QixHQUFHanRCLEVBQUVDLEdBQUcsR0FBRyxVQUFVRCxHQUFHLFdBQVdBLEVBQUUsT0FBT2tzQixHQUFHanNCLEdBQW1FLElBQUlpdEIsR0FBRyxtQkFBb0I3c0IsT0FBT2tYLEdBQUdsWCxPQUFPa1gsR0FBNUcsU0FBWXZYLEVBQUVDLEdBQUcsT0FBT0QsSUFBSUMsSUFBSSxJQUFJRCxHQUFHLEVBQUVBLEdBQUksRUFBRUMsSUFBSUQsR0FBSUEsR0FBR0MsR0FBSUEsR0FBb0RrdEIsR0FBRzlzQixPQUFPQyxVQUFVZSxlQUM3YSxTQUFTK3JCLEdBQUdwdEIsRUFBRUMsR0FBRyxHQUFHaXRCLEdBQUdsdEIsRUFBRUMsR0FBRyxPQUFNLEVBQUcsR0FBRyxpQkFBa0JELEdBQUcsT0FBT0EsR0FBRyxpQkFBa0JDLEdBQUcsT0FBT0EsRUFBRSxPQUFNLEVBQUcsSUFBSXNGLEVBQUVsRixPQUFPa0IsS0FBS3ZCLEdBQUd3RixFQUFFbkYsT0FBT2tCLEtBQUt0QixHQUFHLEdBQUdzRixFQUFFdEUsU0FBU3VFLEVBQUV2RSxPQUFPLE9BQU0sRUFBRyxJQUFJdUUsRUFBRSxFQUFFQSxFQUFFRCxFQUFFdEUsT0FBT3VFLElBQUksSUFBSTJuQixHQUFHMXNCLEtBQUtSLEVBQUVzRixFQUFFQyxNQUFNMG5CLEdBQUdsdEIsRUFBRXVGLEVBQUVDLElBQUl2RixFQUFFc0YsRUFBRUMsS0FBSyxPQUFNLEVBQUcsT0FBTSxFQUFHLFNBQVM2bkIsR0FBR3J0QixHQUFHLEtBQUtBLEdBQUdBLEVBQUV5UyxZQUFZelMsRUFBRUEsRUFBRXlTLFdBQVcsT0FBT3pTLEVBQ2xVLFNBQVNzdEIsR0FBR3R0QixFQUFFQyxHQUFHLElBQXdCdUYsRUFBcEJELEVBQUU4bkIsR0FBR3J0QixHQUFPLElBQUpBLEVBQUUsRUFBWXVGLEdBQUcsQ0FBQyxHQUFHLElBQUlBLEVBQUV5TixTQUFTLENBQTBCLEdBQXpCeE4sRUFBRXhGLEVBQUV1RixFQUFFME0sWUFBWWhSLE9BQVVqQixHQUFHQyxHQUFHdUYsR0FBR3ZGLEVBQUUsTUFBTSxDQUFDVixLQUFLZ0csRUFBRWdvQixPQUFPdHRCLEVBQUVELEdBQUdBLEVBQUV3RixFQUFFeEYsRUFBRSxDQUFDLEtBQUt1RixHQUFHLENBQUMsR0FBR0EsRUFBRWlvQixZQUFZLENBQUNqb0IsRUFBRUEsRUFBRWlvQixZQUFZLE1BQU14dEIsRUFBRXVGLEVBQUVBLEVBQUVvUyxXQUFXcFMsT0FBRSxFQUFPQSxFQUFFOG5CLEdBQUc5bkIsSUFBSSxTQUFTa29CLEdBQUd6dEIsRUFBRUMsR0FBRyxTQUFPRCxJQUFHQyxLQUFFRCxJQUFJQyxLQUFLRCxHQUFHLElBQUlBLEVBQUVnVCxZQUFZL1MsR0FBRyxJQUFJQSxFQUFFK1MsU0FBU3lhLEdBQUd6dEIsRUFBRUMsRUFBRTBYLFlBQVksYUFBYTNYLEVBQUVBLEVBQUUwdEIsU0FBU3p0QixLQUFHRCxFQUFFMnRCLDRCQUF3RCxHQUE3QjN0QixFQUFFMnRCLHdCQUF3QjF0QixNQUNsWixTQUFTMnRCLEtBQUssSUFBSSxJQUFJNXRCLEVBQUV1SyxPQUFPdEssRUFBRWtRLElBQUtsUSxhQUFhRCxFQUFFNnRCLG1CQUFtQixDQUFDLElBQUksSUFBSXRvQixFQUFFLGlCQUFrQnRGLEVBQUU2dEIsY0FBYzVsQixTQUFTNmxCLEtBQUssTUFBTXZvQixHQUFHRCxHQUFFLEVBQUcsSUFBR0EsRUFBeUIsTUFBTXRGLEVBQUVrUSxHQUEvQm5RLEVBQUVDLEVBQUU2dEIsZUFBZ0N0akIsVUFBVSxPQUFPdkssRUFBRSxTQUFTK3RCLEdBQUdodUIsR0FBRyxJQUFJQyxFQUFFRCxHQUFHQSxFQUFFc1AsVUFBVXRQLEVBQUVzUCxTQUFTOUQsY0FBYyxPQUFPdkwsSUFBSSxVQUFVQSxJQUFJLFNBQVNELEVBQUVvRCxNQUFNLFdBQVdwRCxFQUFFb0QsTUFBTSxRQUFRcEQsRUFBRW9ELE1BQU0sUUFBUXBELEVBQUVvRCxNQUFNLGFBQWFwRCxFQUFFb0QsT0FBTyxhQUFhbkQsR0FBRyxTQUFTRCxFQUFFaXVCLGlCQUN4WixJQUFJQyxHQUFHNWpCLEdBQUksaUJBQWlCRSxVQUFVLElBQUlBLFNBQVMyZixhQUFhZ0UsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsSUFBRyxFQUMzRixTQUFTQyxHQUFHdnVCLEVBQUVDLEVBQUVzRixHQUFHLElBQUlDLEVBQUVELEVBQUVnRixTQUFTaEYsRUFBRUEsRUFBRWlGLFNBQVMsSUFBSWpGLEVBQUV5TixTQUFTek4sRUFBRUEsRUFBRTJMLGNBQWNvZCxJQUFJLE1BQU1ILElBQUlBLEtBQUtoZSxFQUFHM0ssS0FBc0NBLEVBQTVCLG1CQUFMQSxFQUFFMm9CLEtBQXlCSCxHQUFHeG9CLEdBQUssQ0FBQ2dwQixNQUFNaHBCLEVBQUVpcEIsZUFBZUMsSUFBSWxwQixFQUFFbXBCLGNBQXlGLENBQUNDLFlBQTNFcHBCLEdBQUdBLEVBQUUwTCxlQUFlMUwsRUFBRTBMLGNBQWMyZCxhQUFhdGtCLFFBQVF1a0IsZ0JBQStCRixXQUFXRyxhQUFhdnBCLEVBQUV1cEIsYUFBYUMsVUFBVXhwQixFQUFFd3BCLFVBQVVDLFlBQVl6cEIsRUFBRXlwQixhQUFjWixJQUFJakIsR0FBR2lCLEdBQUc3b0IsS0FBSzZvQixHQUFHN29CLEVBQXNCLEdBQXBCQSxFQUFFbW1CLEdBQUd5QyxHQUFHLGFBQWdCbnRCLFNBQVNoQixFQUFFLElBQUlzaUIsR0FBRyxXQUFXLFNBQVMsS0FBS3RpQixFQUFFc0YsR0FBR3ZGLEVBQUVrQixLQUFLLENBQUMwcUIsTUFBTTNyQixFQUFFNHJCLFVBQVVybUIsSUFBSXZGLEVBQUVxSCxPQUFPNm1CLE1BQ2pmaFEsR0FBRyxtakJBQW1qQmxYLE1BQU0sS0FDNWpCLEdBQUdrWCxHQUFHLG9SQUFvUmxYLE1BQU0sS0FBSyxHQUFHa1gsR0FBR0QsR0FBRyxHQUFHLElBQUksSUFBSWdSLEdBQUcscUZBQXFGam9CLE1BQU0sS0FBS2tvQixHQUFHLEVBQUVBLEdBQUdELEdBQUdqdUIsT0FBT2t1QixLQUFLbFIsR0FBRzFQLElBQUkyZ0IsR0FBR0MsSUFBSSxHQUFHL2tCLEVBQUcsZUFBZSxDQUFDLFdBQVcsY0FDbGVBLEVBQUcsZUFBZSxDQUFDLFdBQVcsY0FBY0EsRUFBRyxpQkFBaUIsQ0FBQyxhQUFhLGdCQUFnQkEsRUFBRyxpQkFBaUIsQ0FBQyxhQUFhLGdCQUFnQkQsRUFBRyxXQUFXLG9FQUFvRWxELE1BQU0sTUFBTWtELEVBQUcsV0FBVyx1RkFBdUZsRCxNQUFNLE1BQU1rRCxFQUFHLGdCQUFnQixDQUFDLGlCQUFpQixXQUFXLFlBQVksVUFBVUEsRUFBRyxtQkFBbUIsMkRBQTJEbEQsTUFBTSxNQUM1ZmtELEVBQUcscUJBQXFCLDZEQUE2RGxELE1BQU0sTUFBTWtELEVBQUcsc0JBQXNCLDhEQUE4RGxELE1BQU0sTUFBTSxJQUFJbW9CLEdBQUcsc05BQXNObm9CLE1BQU0sS0FBS29vQixHQUFHLElBQUlwbEIsSUFBSSwwQ0FBMENoRCxNQUFNLEtBQUtsQyxPQUFPcXFCLEtBQ25mLFNBQVNFLEdBQUd0dkIsRUFBRUMsRUFBRXNGLEdBQUcsSUFBSUMsRUFBRXhGLEVBQUVvRCxNQUFNLGdCQUFnQnBELEVBQUVraEIsY0FBYzNiLEVBL0NqRSxTQUFZdkYsRUFBRUMsRUFBRXNGLEVBQUVDLEVBQUVKLEVBQUVLLEVBQUVzRixFQUFFNEQsRUFBRUQsR0FBNEIsR0FBekJnTCxHQUFHUCxNQUFNOVcsS0FBS29CLFdBQWM0VixHQUFHLENBQUMsSUFBR0EsR0FBZ0MsTUFBTXpULE1BQU1rRSxFQUFFLE1BQTFDLElBQUlvUCxFQUFFSSxHQUFHRCxJQUFHLEVBQUdDLEdBQUcsS0FBOEJDLEtBQUtBLElBQUcsRUFBR0MsR0FBR04sSUErQ2pFcVcsQ0FBRy9wQixFQUFFdkYsT0FBRSxFQUFPRCxHQUFHQSxFQUFFa2hCLGNBQWMsS0FDcEcsU0FBUytLLEdBQUdqc0IsRUFBRUMsR0FBR0EsRUFBRSxJQUFPLEVBQUZBLEdBQUssSUFBSSxJQUFJc0YsRUFBRSxFQUFFQSxFQUFFdkYsRUFBRWlCLE9BQU9zRSxJQUFJLENBQUMsSUFBSUMsRUFBRXhGLEVBQUV1RixHQUFHSCxFQUFFSSxFQUFFb21CLE1BQU1wbUIsRUFBRUEsRUFBRXFtQixVQUFVN3JCLEVBQUUsQ0FBQyxJQUFJeUYsT0FBRSxFQUFPLEdBQUd4RixFQUFFLElBQUksSUFBSThLLEVBQUV2RixFQUFFdkUsT0FBTyxFQUFFLEdBQUc4SixFQUFFQSxJQUFJLENBQUMsSUFBSTRELEVBQUVuSixFQUFFdUYsR0FBRzJELEVBQUVDLEVBQUU2Z0IsU0FBU3RXLEVBQUV2SyxFQUFFdVMsY0FBMkIsR0FBYnZTLEVBQUVBLEVBQUU4Z0IsU0FBWS9nQixJQUFJakosR0FBR0wsRUFBRWtjLHVCQUF1QixNQUFNdGhCLEVBQUVzdkIsR0FBR2xxQixFQUFFdUosRUFBRXVLLEdBQUd6VCxFQUFFaUosT0FBTyxJQUFJM0QsRUFBRSxFQUFFQSxFQUFFdkYsRUFBRXZFLE9BQU84SixJQUFJLENBQW9ELEdBQTVDMkQsR0FBUEMsRUFBRW5KLEVBQUV1RixJQUFPeWtCLFNBQVN0VyxFQUFFdkssRUFBRXVTLGNBQWN2UyxFQUFFQSxFQUFFOGdCLFNBQVkvZ0IsSUFBSWpKLEdBQUdMLEVBQUVrYyx1QkFBdUIsTUFBTXRoQixFQUFFc3ZCLEdBQUdscUIsRUFBRXVKLEVBQUV1SyxHQUFHelQsRUFBRWlKLElBQUksR0FBRzZLLEdBQUcsTUFBTXZaLEVBQUV3WixHQUFHRCxJQUFHLEVBQUdDLEdBQUcsS0FBS3haLEVBQzFhLFNBQVMwdkIsR0FBRTF2QixFQUFFQyxHQUFHLElBQUlzRixFQUFFb3FCLEdBQUcxdkIsR0FBR3VGLEVBQUV4RixFQUFFLFdBQVd1RixFQUFFcXFCLElBQUlwcUIsS0FBS3FxQixHQUFHNXZCLEVBQUVELEVBQUUsR0FBRSxHQUFJdUYsRUFBRThFLElBQUk3RSxJQUFJLElBQUlzcUIsR0FBRyxrQkFBa0J4USxLQUFLeVEsU0FBU3h2QixTQUFTLElBQUlzTCxNQUFNLEdBQUcsU0FBU21rQixHQUFHaHdCLEdBQUdBLEVBQUU4dkIsTUFBTTl2QixFQUFFOHZCLEtBQUksRUFBRzlsQixFQUFHOUMsU0FBUSxTQUFTakgsR0FBR292QixHQUFHTyxJQUFJM3ZCLElBQUlnd0IsR0FBR2h3QixHQUFFLEVBQUdELEVBQUUsTUFBTWl3QixHQUFHaHdCLEdBQUUsRUFBR0QsRUFBRSxVQUN0TyxTQUFTaXdCLEdBQUdqd0IsRUFBRUMsRUFBRXNGLEVBQUVDLEdBQUcsSUFBSUosRUFBRSxFQUFFM0IsVUFBVXhDLGFBQVEsSUFBU3dDLFVBQVUsR0FBR0EsVUFBVSxHQUFHLEVBQUVnQyxFQUFFRixFQUE2RCxHQUEzRCxvQkFBb0J2RixHQUFHLElBQUl1RixFQUFFeU4sV0FBV3ZOLEVBQUVGLEVBQUUyTCxlQUFrQixPQUFPMUwsSUFBSXZGLEdBQUdvdkIsR0FBR08sSUFBSTV2QixHQUFHLENBQUMsR0FBRyxXQUFXQSxFQUFFLE9BQU9vRixHQUFHLEVBQUVLLEVBQUVELEVBQUUsSUFBSXVGLEVBQUU0a0IsR0FBR2xxQixHQUFHa0osRUFBRTNPLEVBQUUsTUFBTUMsRUFBRSxVQUFVLFVBQVU4SyxFQUFFNmtCLElBQUlqaEIsS0FBSzFPLElBQUltRixHQUFHLEdBQUd5cUIsR0FBR3BxQixFQUFFekYsRUFBRW9GLEVBQUVuRixHQUFHOEssRUFBRVYsSUFBSXNFLElBQ2xTLFNBQVNraEIsR0FBRzd2QixFQUFFQyxFQUFFc0YsRUFBRUMsR0FBRyxJQUFJSixFQUFFNlksR0FBR3hPLElBQUl4UCxHQUFHLFlBQU8sSUFBU21GLEVBQUUsRUFBRUEsR0FBRyxLQUFLLEVBQUVBLEVBQUU0YSxHQUFHLE1BQU0sS0FBSyxFQUFFNWEsRUFBRThhLEdBQUcsTUFBTSxRQUFROWEsRUFBRTZhLEdBQUcxYSxFQUFFSCxFQUFFK2EsS0FBSyxLQUFLbGdCLEVBQUVzRixFQUFFdkYsR0FBR29GLE9BQUUsR0FBUXlULElBQUksZUFBZTVZLEdBQUcsY0FBY0EsR0FBRyxVQUFVQSxJQUFJbUYsR0FBRSxHQUFJSSxPQUFFLElBQVNKLEVBQUVwRixFQUFFK1ksaUJBQWlCOVksRUFBRXNGLEVBQUUsQ0FBQzJxQixTQUFRLEVBQUdDLFFBQVEvcUIsSUFBSXBGLEVBQUUrWSxpQkFBaUI5WSxFQUFFc0YsR0FBRSxRQUFJLElBQVNILEVBQUVwRixFQUFFK1ksaUJBQWlCOVksRUFBRXNGLEVBQUUsQ0FBQzRxQixRQUFRL3FCLElBQUlwRixFQUFFK1ksaUJBQWlCOVksRUFBRXNGLEdBQUUsR0FDcFcsU0FBUzhhLEdBQUdyZ0IsRUFBRUMsRUFBRXNGLEVBQUVDLEVBQUVKLEdBQUcsSUFBSUssRUFBRUQsRUFBRSxHQUFHLElBQU8sRUFBRnZGLElBQU0sSUFBTyxFQUFGQSxJQUFNLE9BQU91RixFQUFFeEYsRUFBRSxPQUFPLENBQUMsR0FBRyxPQUFPd0YsRUFBRSxPQUFPLElBQUl1RixFQUFFdkYsRUFBRXFKLElBQUksR0FBRyxJQUFJOUQsR0FBRyxJQUFJQSxFQUFFLENBQUMsSUFBSTRELEVBQUVuSixFQUFFeVMsVUFBVXNFLGNBQWMsR0FBRzVOLElBQUl2SixHQUFHLElBQUl1SixFQUFFcUUsVUFBVXJFLEVBQUVnSixhQUFhdlMsRUFBRSxNQUFNLEdBQUcsSUFBSTJGLEVBQUUsSUFBSUEsRUFBRXZGLEVBQUVxVSxPQUFPLE9BQU85TyxHQUFHLENBQUMsSUFBSTJELEVBQUUzRCxFQUFFOEQsSUFBSSxJQUFHLElBQUlILEdBQUcsSUFBSUEsTUFBS0EsRUFBRTNELEVBQUVrTixVQUFVc0UsaUJBQWtCblgsR0FBRyxJQUFJc0osRUFBRXNFLFVBQVV0RSxFQUFFaUosYUFBYXZTLEdBQUUsT0FBTzJGLEVBQUVBLEVBQUU4TyxPQUFPLEtBQUssT0FBT2xMLEdBQUcsQ0FBUyxHQUFHLFFBQVg1RCxFQUFFbVIsR0FBR3ZOLElBQWUsT0FBZSxHQUFHLEtBQVhELEVBQUUzRCxFQUFFOEQsTUFBYyxJQUFJSCxFQUFFLENBQUNsSixFQUFFQyxFQUFFc0YsRUFBRSxTQUFTL0ssRUFBRTJPLEVBQUVBLEVBQUVnSixZQUFZblMsRUFBRUEsRUFBRXFVLFFBdkQ3YyxTQUFZN1osRUFBRUMsRUFBRXNGLEdBQUcsR0FBR21ULEdBQUcsT0FBTzFZLElBQU8wWSxJQUFHLEVBQUcsSUFBV0YsR0FBR3hZLEVBQUVDLEVBQUVzRixHQUFHLFFBQVFtVCxJQUFHLEVBQUdDLE1BdURvWXlYLEVBQUcsV0FBVyxJQUFJNXFCLEVBQUVDLEVBQUVMLEVBQUVvUyxHQUFHalMsR0FBR3dGLEVBQUUsR0FDcGYvSyxFQUFFLENBQUMsSUFBSTJPLEVBQUVxUCxHQUFHdk8sSUFBSXpQLEdBQUcsUUFBRyxJQUFTMk8sRUFBRSxDQUFDLElBQUlELEVBQUU2VCxHQUFHOE4sRUFBRXJ3QixFQUFFLE9BQU9BLEdBQUcsSUFBSyxXQUFXLEdBQUcsSUFBSTBnQixHQUFHbmIsR0FBRyxNQUFNdkYsRUFBRSxJQUFLLFVBQVUsSUFBSyxRQUFRME8sRUFBRTBaLEdBQUcsTUFBTSxJQUFLLFVBQVVpSSxFQUFFLFFBQVEzaEIsRUFBRXlWLEdBQUcsTUFBTSxJQUFLLFdBQVdrTSxFQUFFLE9BQU8zaEIsRUFBRXlWLEdBQUcsTUFBTSxJQUFLLGFBQWEsSUFBSyxZQUFZelYsRUFBRXlWLEdBQUcsTUFBTSxJQUFLLFFBQVEsR0FBRyxJQUFJNWUsRUFBRWtlLE9BQU8sTUFBTXpqQixFQUFFLElBQUssV0FBVyxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssWUFBWSxJQUFLLFVBQVUsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLGNBQWMwTyxFQUFFc1YsR0FBRyxNQUFNLElBQUssT0FBTyxJQUFLLFVBQVUsSUFBSyxZQUFZLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLE9BQU90VixFQUMxaUJ1VixHQUFHLE1BQU0sSUFBSyxjQUFjLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxhQUFhdlYsRUFBRXlhLEdBQUcsTUFBTSxLQUFLdkwsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUdwUCxFQUFFMFYsR0FBRyxNQUFNLEtBQUtyRyxHQUFHclAsRUFBRTZhLEdBQUcsTUFBTSxJQUFLLFNBQVM3YSxFQUFFaVUsR0FBRyxNQUFNLElBQUssUUFBUWpVLEVBQUU4YSxHQUFHLE1BQU0sSUFBSyxPQUFPLElBQUssTUFBTSxJQUFLLFFBQVE5YSxFQUFFOFYsR0FBRyxNQUFNLElBQUssb0JBQW9CLElBQUsscUJBQXFCLElBQUssZ0JBQWdCLElBQUssY0FBYyxJQUFLLGNBQWMsSUFBSyxhQUFhLElBQUssY0FBYyxJQUFLLFlBQVk5VixFQUFFK1osR0FBRyxJQUFJNkgsRUFBRSxJQUFPLEVBQUZyd0IsR0FBS3N3QixHQUFHRCxHQUFHLFdBQVd0d0IsRUFBRXd3QixFQUFFRixFQUFFLE9BQU8zaEIsRUFBRUEsRUFBRSxVQUFVLEtBQUtBLEVBQUUyaEIsRUFBRSxHQUFHLElBQUksSUFBUUcsRUFBSkMsRUFBRWxyQixFQUFJLE9BQy9la3JCLEdBQUcsQ0FBSyxJQUFJQyxHQUFSRixFQUFFQyxHQUFVelksVUFBc0YsR0FBNUUsSUFBSXdZLEVBQUU1aEIsS0FBSyxPQUFPOGhCLElBQUlGLEVBQUVFLEVBQUUsT0FBT0gsR0FBYyxPQUFWRyxFQUFFL1gsR0FBRzhYLEVBQUVGLEtBQVlGLEVBQUVwdkIsS0FBSzB2QixHQUFHRixFQUFFQyxFQUFFRixLQUFTRixFQUFFLE1BQU1HLEVBQUVBLEVBQUU3VyxPQUFPLEVBQUV5VyxFQUFFcnZCLFNBQVMwTixFQUFFLElBQUlELEVBQUVDLEVBQUUwaEIsRUFBRSxLQUFLOXFCLEVBQUVILEdBQUcyRixFQUFFN0osS0FBSyxDQUFDMHFCLE1BQU1qZCxFQUFFa2QsVUFBVXlFLE1BQU0sR0FBRyxJQUFPLEVBQUZyd0IsR0FBSyxDQUE0RSxHQUFuQ3lPLEVBQUUsYUFBYTFPLEdBQUcsZUFBZUEsS0FBdEUyTyxFQUFFLGNBQWMzTyxHQUFHLGdCQUFnQkEsSUFBMkMsSUFBTyxHQUFGQyxNQUFRb3dCLEVBQUU5cUIsRUFBRW9lLGVBQWVwZSxFQUFFcWUsZUFBZTFILEdBQUdtVSxLQUFJQSxFQUFFUSxPQUFnQm5pQixHQUFHQyxLQUFHQSxFQUFFdkosRUFBRW1GLFNBQVNuRixFQUFFQSxHQUFHdUosRUFBRXZKLEVBQUU4TCxlQUFldkMsRUFBRWtnQixhQUFhbGdCLEVBQUVtaUIsYUFBYXZtQixPQUFVbUUsR0FBcUNBLEVBQUVsSixFQUFpQixRQUFmNnFCLEdBQW5DQSxFQUFFOXFCLEVBQUVvZSxlQUFlcGUsRUFBRXNlLFdBQWtCM0gsR0FBR21VLEdBQUcsUUFDbGVBLEtBQVJFLEVBQUU1VyxHQUFHMFcsS0FBVSxJQUFJQSxFQUFFeGhCLEtBQUssSUFBSXdoQixFQUFFeGhCLE9BQUt3aEIsRUFBRSxRQUFVM2hCLEVBQUUsS0FBSzJoQixFQUFFN3FCLEdBQUtrSixJQUFJMmhCLEdBQUUsQ0FBZ1UsR0FBL1RDLEVBQUV0TSxHQUFHMk0sRUFBRSxlQUFlSCxFQUFFLGVBQWVFLEVBQUUsUUFBVyxlQUFlMXdCLEdBQUcsZ0JBQWdCQSxJQUFFc3dCLEVBQUU3SCxHQUFHa0ksRUFBRSxpQkFBaUJILEVBQUUsaUJBQWlCRSxFQUFFLFdBQVVILEVBQUUsTUFBTTdoQixFQUFFQyxFQUFFd2QsR0FBR3pkLEdBQUcraEIsRUFBRSxNQUFNSixFQUFFMWhCLEVBQUV3ZCxHQUFHa0UsSUFBRzFoQixFQUFFLElBQUkyaEIsRUFBRUssRUFBRUQsRUFBRSxRQUFRaGlCLEVBQUVuSixFQUFFSCxJQUFLa0MsT0FBT2lwQixFQUFFNWhCLEVBQUVnVixjQUFjOE0sRUFBRUUsRUFBRSxLQUFLelUsR0FBRzlXLEtBQUtJLEtBQUk4cUIsRUFBRSxJQUFJQSxFQUFFRSxFQUFFRSxFQUFFLFFBQVFMLEVBQUU5cUIsRUFBRUgsSUFBS2tDLE9BQU9tcEIsRUFBRUgsRUFBRTNNLGNBQWM0TSxFQUFFSSxFQUFFTCxHQUFHQyxFQUFFSSxFQUFLamlCLEdBQUcyaEIsRUFBRXB3QixFQUFFLENBQWEsSUFBUnV3QixFQUFFSCxFQUFFSyxFQUFFLEVBQU1ELEVBQWhCSCxFQUFFNWhCLEVBQWtCK2hCLEVBQUVBLEVBQUVNLEdBQUdOLEdBQUdDLElBQVEsSUFBSkQsRUFBRSxFQUFNRSxFQUFFSCxFQUFFRyxFQUFFQSxFQUFFSSxHQUFHSixHQUFHRixJQUFJLEtBQUssRUFBRUMsRUFBRUQsR0FBR0gsRUFBRVMsR0FBR1QsR0FBR0ksSUFBSSxLQUFLLEVBQUVELEVBQUVDLEdBQUdGLEVBQ3BmTyxHQUFHUCxHQUFHQyxJQUFJLEtBQUtDLEtBQUssQ0FBQyxHQUFHSixJQUFJRSxHQUFHLE9BQU9BLEdBQUdGLElBQUlFLEVBQUU1VyxVQUFVLE1BQU0zWixFQUFFcXdCLEVBQUVTLEdBQUdULEdBQUdFLEVBQUVPLEdBQUdQLEdBQUdGLEVBQUUsVUFBVUEsRUFBRSxLQUFLLE9BQU81aEIsR0FBR3NpQixHQUFHam1CLEVBQUU0RCxFQUFFRCxFQUFFNGhCLEdBQUUsR0FBSSxPQUFPRCxHQUFHLE9BQU9FLEdBQUdTLEdBQUdqbUIsRUFBRXdsQixFQUFFRixFQUFFQyxHQUFFLEdBQWlFLEdBQUcsWUFBMUM1aEIsR0FBakJDLEVBQUVuSixFQUFFMm1CLEdBQUczbUIsR0FBRytFLFFBQVcrRSxVQUFVWCxFQUFFVyxTQUFTOUQsZ0JBQStCLFVBQVVrRCxHQUFHLFNBQVNDLEVBQUV2TCxLQUFLLElBQUk2dEIsRUFBRTdFLFFBQVEsR0FBR1gsR0FBRzljLEdBQUcsR0FBRzBkLEdBQUc0RSxFQUFFaEUsT0FBTyxDQUFDZ0UsRUFBRWxFLEdBQUcsSUFBSW1FLEVBQUVyRSxRQUFRbmUsRUFBRUMsRUFBRVcsV0FBVyxVQUFVWixFQUFFbEQsZ0JBQWdCLGFBQWFtRCxFQUFFdkwsTUFBTSxVQUFVdUwsRUFBRXZMLFFBQVE2dEIsRUFBRWpFLElBQ2xWLE9BRHlWaUUsSUFBSUEsRUFBRUEsRUFBRWp4QixFQUFFd0YsSUFBS2ttQixHQUFHM2dCLEVBQUVrbUIsRUFBRTFyQixFQUFFSCxJQUFXOHJCLEdBQUdBLEVBQUVseEIsRUFBRTJPLEVBQUVuSixHQUFHLGFBQWF4RixJQUFJa3hCLEVBQUV2aUIsRUFBRThCLGdCQUN0ZXlnQixFQUFFcmdCLFlBQVksV0FBV2xDLEVBQUV2TCxNQUFNNE4sR0FBR3JDLEVBQUUsU0FBU0EsRUFBRXVCLFFBQU9naEIsRUFBRTFyQixFQUFFMm1CLEdBQUczbUIsR0FBRytFLE9BQWN2SyxHQUFHLElBQUssV0FBYXlyQixHQUFHeUYsSUFBSSxTQUFTQSxFQUFFakQsbUJBQWdCRSxHQUFHK0MsRUFBRTlDLEdBQUc1b0IsRUFBRTZvQixHQUFHLE1BQUssTUFBTSxJQUFLLFdBQVdBLEdBQUdELEdBQUdELEdBQUcsS0FBSyxNQUFNLElBQUssWUFBWUcsSUFBRyxFQUFHLE1BQU0sSUFBSyxjQUFjLElBQUssVUFBVSxJQUFLLFVBQVVBLElBQUcsRUFBR0MsR0FBR3hqQixFQUFFeEYsRUFBRUgsR0FBRyxNQUFNLElBQUssa0JBQWtCLEdBQUc4b0IsR0FBRyxNQUFNLElBQUssVUFBVSxJQUFLLFFBQVFLLEdBQUd4akIsRUFBRXhGLEVBQUVILEdBQUcsSUFBSStyQixFQUFFLEdBQUdsSCxHQUFHaHFCLEVBQUUsQ0FBQyxPQUFPRCxHQUFHLElBQUssbUJBQW1CLElBQUlveEIsRUFBRSxxQkFBcUIsTUFBTW54QixFQUFFLElBQUssaUJBQWlCbXhCLEVBQUUsbUJBQW1CLE1BQU1ueEIsRUFDcmYsSUFBSyxvQkFBb0JteEIsRUFBRSxzQkFBc0IsTUFBTW54QixFQUFFbXhCLE9BQUUsT0FBWTFHLEdBQUdGLEdBQUd4cUIsRUFBRXVGLEtBQUs2ckIsRUFBRSxvQkFBb0IsWUFBWXB4QixHQUFHLE1BQU11RixFQUFFb2IsVUFBVXlRLEVBQUUsc0JBQXNCQSxJQUFJL0csSUFBSSxPQUFPOWtCLEVBQUVnakIsU0FBU21DLElBQUksdUJBQXVCMEcsRUFBRSxxQkFBcUJBLEdBQUcxRyxLQUFLeUcsRUFBRTFRLE9BQVlGLEdBQUcsVUFBUkQsR0FBR2xiLEdBQWtCa2IsR0FBR3BRLE1BQU1vUSxHQUFHck8sWUFBWXlZLElBQUcsSUFBZSxHQUFWd0csRUFBRXZGLEdBQUdubUIsRUFBRTRyQixJQUFPbndCLFNBQVNtd0IsRUFBRSxJQUFJMU0sR0FBRzBNLEVBQUVweEIsRUFBRSxLQUFLdUYsRUFBRUgsR0FBRzJGLEVBQUU3SixLQUFLLENBQUMwcUIsTUFBTXdGLEVBQUV2RixVQUFVcUYsS0FBSUMsR0FBb0IsUUFBUkEsRUFBRTFHLEdBQUdsbEIsT0FBZjZyQixFQUFFek0sS0FBS3dNLE1BQXNDQSxFQUFFL0csR0ExQmpLLFNBQVlwcUIsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssaUJBQWlCLE9BQU95cUIsR0FBR3hxQixHQUFHLElBQUssV0FBVyxPQUFHLEtBQUtBLEVBQUV1b0IsTUFBYSxNQUFLK0IsSUFBRyxFQUFVRCxJQUFHLElBQUssWUFBWSxPQUFPdHFCLEVBQUVDLEVBQUUwa0IsUUFBUzJGLElBQUlDLEdBQUcsS0FBS3ZxQixFQUFFLFFBQVEsT0FBTyxNQTBCeEJxeEIsQ0FBR3J4QixFQUFFdUYsR0F6QjFiLFNBQVl2RixFQUFFQyxHQUFHLEdBQUd5cUIsR0FBRyxNQUFNLG1CQUFtQjFxQixJQUFJaXFCLElBQUlPLEdBQUd4cUIsRUFBRUMsSUFBSUQsRUFBRXlnQixLQUFLRCxHQUFHRCxHQUFHRCxHQUFHLEtBQUtvSyxJQUFHLEVBQUcxcUIsR0FBRyxLQUFLLE9BQU9BLEdBQUcsSUFBSyxRQUFRLE9BQU8sS0FBSyxJQUFLLFdBQVcsS0FBS0MsRUFBRWtqQixTQUFTbGpCLEVBQUVvakIsUUFBUXBqQixFQUFFcWpCLFVBQVVyakIsRUFBRWtqQixTQUFTbGpCLEVBQUVvakIsT0FBTyxDQUFDLEdBQUdwakIsRUFBRXF4QixNQUFNLEVBQUVyeEIsRUFBRXF4QixLQUFLcndCLE9BQU8sT0FBT2hCLEVBQUVxeEIsS0FBSyxHQUFHcnhCLEVBQUV1b0IsTUFBTSxPQUFPOW5CLE9BQU9rRyxhQUFhM0csRUFBRXVvQixPQUFPLE9BQU8sS0FBSyxJQUFLLGlCQUFpQixPQUFPNkIsSUFBSSxPQUFPcHFCLEVBQUVzb0IsT0FBTyxLQUFLdG9CLEVBQUUwa0IsS0FBSyxRQUFRLE9BQU8sTUF5QjJENE0sQ0FBR3Z4QixFQUFFdUYsS0FBMkIsR0FBeEJDLEVBQUVtbUIsR0FBR25tQixFQUFFLGtCQUFxQnZFLFNBQVNtRSxFQUFFLElBQUlzZixHQUFHLGdCQUNuZixjQUFjLEtBQUtuZixFQUFFSCxHQUFHMkYsRUFBRTdKLEtBQUssQ0FBQzBxQixNQUFNeG1CLEVBQUV5bUIsVUFBVXJtQixJQUFJSixFQUFFdWYsS0FBS3dNLEdBQUdsRixHQUFHbGhCLEVBQUU5SyxNQUFLLFNBQVMyd0IsR0FBRzV3QixFQUFFQyxFQUFFc0YsR0FBRyxNQUFNLENBQUNpcUIsU0FBU3h2QixFQUFFeXZCLFNBQVN4dkIsRUFBRWloQixjQUFjM2IsR0FBRyxTQUFTb21CLEdBQUczckIsRUFBRUMsR0FBRyxJQUFJLElBQUlzRixFQUFFdEYsRUFBRSxVQUFVdUYsRUFBRSxHQUFHLE9BQU94RixHQUFHLENBQUMsSUFBSW9GLEVBQUVwRixFQUFFeUYsRUFBRUwsRUFBRTZTLFVBQVUsSUFBSTdTLEVBQUV5SixLQUFLLE9BQU9wSixJQUFJTCxFQUFFSyxFQUFZLE9BQVZBLEVBQUVtVCxHQUFHNVksRUFBRXVGLEtBQVlDLEVBQUVnc0IsUUFBUVosR0FBRzV3QixFQUFFeUYsRUFBRUwsSUFBYyxPQUFWSyxFQUFFbVQsR0FBRzVZLEVBQUVDLEtBQVl1RixFQUFFdEUsS0FBSzB2QixHQUFHNXdCLEVBQUV5RixFQUFFTCxLQUFLcEYsRUFBRUEsRUFBRTZaLE9BQU8sT0FBT3JVLEVBQUUsU0FBU3VyQixHQUFHL3dCLEdBQUcsR0FBRyxPQUFPQSxFQUFFLE9BQU8sS0FBSyxHQUFHQSxFQUFFQSxFQUFFNlosYUFBYTdaLEdBQUcsSUFBSUEsRUFBRTZPLEtBQUssT0FBTzdPLEdBQUksS0FDeGEsU0FBU2d4QixHQUFHaHhCLEVBQUVDLEVBQUVzRixFQUFFQyxFQUFFSixHQUFHLElBQUksSUFBSUssRUFBRXhGLEVBQUUrZ0IsV0FBV2pXLEVBQUUsR0FBRyxPQUFPeEYsR0FBR0EsSUFBSUMsR0FBRyxDQUFDLElBQUltSixFQUFFcEosRUFBRW1KLEVBQUVDLEVBQUVpTCxVQUFVVixFQUFFdkssRUFBRXNKLFVBQVUsR0FBRyxPQUFPdkosR0FBR0EsSUFBSWxKLEVBQUUsTUFBTSxJQUFJbUosRUFBRUUsS0FBSyxPQUFPcUssSUFBSXZLLEVBQUV1SyxFQUFFOVQsRUFBYSxPQUFWc0osRUFBRWtLLEdBQUdyVCxFQUFFRSxLQUFZc0YsRUFBRXltQixRQUFRWixHQUFHcnJCLEVBQUVtSixFQUFFQyxJQUFLdkosR0FBYyxPQUFWc0osRUFBRWtLLEdBQUdyVCxFQUFFRSxLQUFZc0YsRUFBRTdKLEtBQUswdkIsR0FBR3JyQixFQUFFbUosRUFBRUMsS0FBTXBKLEVBQUVBLEVBQUVzVSxPQUFPLElBQUk5TyxFQUFFOUosUUFBUWpCLEVBQUVrQixLQUFLLENBQUMwcUIsTUFBTTNyQixFQUFFNHJCLFVBQVU5Z0IsSUFBSSxTQUFTMG1CLE1BQU0sSUFBSUMsR0FBRyxLQUFLQyxHQUFHLEtBQUssU0FBU0MsR0FBRzV4QixFQUFFQyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxTQUFTLElBQUssUUFBUSxJQUFLLFNBQVMsSUFBSyxXQUFXLFFBQVFDLEVBQUU0eEIsVUFBVSxPQUFNLEVBQzNiLFNBQVNDLEdBQUc5eEIsRUFBRUMsR0FBRyxNQUFNLGFBQWFELEdBQUcsV0FBV0EsR0FBRyxhQUFhQSxHQUFHLGlCQUFrQkMsRUFBRW1SLFVBQVUsaUJBQWtCblIsRUFBRW1SLFVBQVUsaUJBQWtCblIsRUFBRTRSLHlCQUF5QixPQUFPNVIsRUFBRTRSLHlCQUF5QixNQUFNNVIsRUFBRTRSLHdCQUF3QmtnQixPQUFPLElBQUlDLEdBQUcsbUJBQW9CQyxXQUFXQSxnQkFBVyxFQUFPQyxHQUFHLG1CQUFvQkMsYUFBYUEsa0JBQWEsRUFBTyxTQUFTQyxHQUFHcHlCLElBQUcsSUFBSUEsRUFBRWdULFVBQTBCLElBQUloVCxFQUFFZ1QsVUFBb0IsT0FBVGhULEVBQUVBLEVBQUVxUSxTQUF0Q3JRLEVBQUVpUyxZQUFZLElBQ25aLFNBQVNvZ0IsR0FBR3J5QixHQUFHLEtBQUssTUFBTUEsRUFBRUEsRUFBRUEsRUFBRXd0QixZQUFZLENBQUMsSUFBSXZ0QixFQUFFRCxFQUFFZ1QsU0FBUyxHQUFHLElBQUkvUyxHQUFHLElBQUlBLEVBQUUsTUFBTSxPQUFPRCxFQUFFLFNBQVNzeUIsR0FBR3R5QixHQUFHQSxFQUFFQSxFQUFFdXlCLGdCQUFnQixJQUFJLElBQUl0eUIsRUFBRSxFQUFFRCxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFZ1QsU0FBUyxDQUFDLElBQUl6TixFQUFFdkYsRUFBRTJrQixLQUFLLEdBQUcsTUFBTXBmLEdBQUcsT0FBT0EsR0FBRyxPQUFPQSxFQUFFLENBQUMsR0FBRyxJQUFJdEYsRUFBRSxPQUFPRCxFQUFFQyxRQUFRLE9BQU9zRixHQUFHdEYsSUFBSUQsRUFBRUEsRUFBRXV5QixnQkFBZ0IsT0FBTyxLQUFLLElBQUlDLEdBQUcsRUFBOERDLEdBQUduVCxLQUFLeVEsU0FBU3h2QixTQUFTLElBQUlzTCxNQUFNLEdBQUc2bUIsR0FBRyxnQkFBZ0JELEdBQUdFLEdBQUcsZ0JBQWdCRixHQUFHNUIsR0FBRyxvQkFBb0I0QixHQUFHRyxHQUFHLGlCQUFpQkgsR0FDOWQsU0FBU3ZXLEdBQUdsYyxHQUFHLElBQUlDLEVBQUVELEVBQUUweUIsSUFBSSxHQUFHenlCLEVBQUUsT0FBT0EsRUFBRSxJQUFJLElBQUlzRixFQUFFdkYsRUFBRTJYLFdBQVdwUyxHQUFHLENBQUMsR0FBR3RGLEVBQUVzRixFQUFFc3JCLEtBQUt0ckIsRUFBRW10QixJQUFJLENBQWUsR0FBZG50QixFQUFFdEYsRUFBRTJaLFVBQWEsT0FBTzNaLEVBQUVtYSxPQUFPLE9BQU83VSxHQUFHLE9BQU9BLEVBQUU2VSxNQUFNLElBQUlwYSxFQUFFc3lCLEdBQUd0eUIsR0FBRyxPQUFPQSxHQUFHLENBQUMsR0FBR3VGLEVBQUV2RixFQUFFMHlCLElBQUksT0FBT250QixFQUFFdkYsRUFBRXN5QixHQUFHdHlCLEdBQUcsT0FBT0MsRUFBTXNGLEdBQUp2RixFQUFFdUYsR0FBTW9TLFdBQVcsT0FBTyxLQUFLLFNBQVNLLEdBQUdoWSxHQUFrQixRQUFmQSxFQUFFQSxFQUFFMHlCLEtBQUsxeUIsRUFBRTZ3QixNQUFjLElBQUk3d0IsRUFBRTZPLEtBQUssSUFBSTdPLEVBQUU2TyxLQUFLLEtBQUs3TyxFQUFFNk8sS0FBSyxJQUFJN08sRUFBRTZPLElBQUksS0FBSzdPLEVBQUUsU0FBU21zQixHQUFHbnNCLEdBQUcsR0FBRyxJQUFJQSxFQUFFNk8sS0FBSyxJQUFJN08sRUFBRTZPLElBQUksT0FBTzdPLEVBQUVpWSxVQUFVLE1BQU1yUyxNQUFNa0UsRUFBRSxLQUFNLFNBQVNvTyxHQUFHbFksR0FBRyxPQUFPQSxFQUFFMnlCLEtBQUssS0FDbGIsU0FBU2hELEdBQUczdkIsR0FBRyxJQUFJQyxFQUFFRCxFQUFFNHlCLElBQWtDLFlBQTlCLElBQVMzeUIsSUFBSUEsRUFBRUQsRUFBRTR5QixJQUFJLElBQUkzb0IsS0FBWWhLLEVBQUUsSUFBSTR5QixHQUFHLEdBQUdDLElBQUksRUFBRSxTQUFTQyxHQUFHL3lCLEdBQUcsTUFBTSxDQUFDc2EsUUFBUXRhLEdBQUcsU0FBU2d6QixHQUFFaHpCLEdBQUcsRUFBRTh5QixLQUFLOXlCLEVBQUVzYSxRQUFRdVksR0FBR0MsSUFBSUQsR0FBR0MsSUFBSSxLQUFLQSxNQUFNLFNBQVNHLEdBQUVqekIsRUFBRUMsR0FBRzZ5QixLQUFLRCxHQUFHQyxJQUFJOXlCLEVBQUVzYSxRQUFRdGEsRUFBRXNhLFFBQVFyYSxFQUFFLElBQUlpekIsR0FBRyxHQUFHQyxHQUFFSixHQUFHRyxJQUFJRSxHQUFFTCxJQUFHLEdBQUlNLEdBQUdILEdBQzVQLFNBQVNJLEdBQUd0ekIsRUFBRUMsR0FBRyxJQUFJc0YsRUFBRXZGLEVBQUVvRCxLQUFLUixhQUFhLElBQUkyQyxFQUFFLE9BQU8ydEIsR0FBRyxJQUFJMXRCLEVBQUV4RixFQUFFaVksVUFBVSxHQUFHelMsR0FBR0EsRUFBRSt0Qiw4Q0FBOEN0ekIsRUFBRSxPQUFPdUYsRUFBRWd1QiwwQ0FBMEMsSUFBUy90QixFQUFMTCxFQUFFLEdBQUssSUFBSUssS0FBS0YsRUFBRUgsRUFBRUssR0FBR3hGLEVBQUV3RixHQUFvSCxPQUFqSEQsS0FBSXhGLEVBQUVBLEVBQUVpWSxXQUFZc2IsNENBQTRDdHpCLEVBQUVELEVBQUV3ekIsMENBQTBDcHVCLEdBQVVBLEVBQUUsU0FBU3F1QixHQUFHenpCLEdBQXlCLE9BQU8sTUFBM0JBLEVBQUUwQyxrQkFBOEMsU0FBU2d4QixLQUFLVixHQUFFSSxJQUFHSixHQUFFRyxJQUFHLFNBQVNRLEdBQUczekIsRUFBRUMsRUFBRXNGLEdBQUcsR0FBRzR0QixHQUFFN1ksVUFBVTRZLEdBQUcsTUFBTXR0QixNQUFNa0UsRUFBRSxNQUFNbXBCLEdBQUVFLEdBQUVsekIsR0FBR2d6QixHQUFFRyxHQUFFN3RCLEdBQy9lLFNBQVNxdUIsR0FBRzV6QixFQUFFQyxFQUFFc0YsR0FBRyxJQUFJQyxFQUFFeEYsRUFBRWlZLFVBQWdDLEdBQXRCalksRUFBRUMsRUFBRXlDLGtCQUFxQixtQkFBb0I4QyxFQUFFcXVCLGdCQUFnQixPQUFPdHVCLEVBQXdCLElBQUksSUFBSUgsS0FBOUJJLEVBQUVBLEVBQUVxdUIsa0JBQWlDLEtBQUt6dUIsS0FBS3BGLEdBQUcsTUFBTTRGLE1BQU1rRSxFQUFFLElBQUlpRixFQUFHOU8sSUFBSSxVQUFVbUYsSUFBSSxPQUFPd0UsRUFBRSxHQUFHckUsRUFBRUMsR0FBRyxTQUFTc3VCLEdBQUc5ekIsR0FBeUcsT0FBdEdBLEdBQUdBLEVBQUVBLEVBQUVpWSxZQUFZalksRUFBRSt6QiwyQ0FBMkNiLEdBQUdHLEdBQUdGLEdBQUU3WSxRQUFRMlksR0FBRUUsR0FBRW56QixHQUFHaXpCLEdBQUVHLEdBQUVBLEdBQUU5WSxVQUFlLEVBQUcsU0FBUzBaLEdBQUdoMEIsRUFBRUMsRUFBRXNGLEdBQUcsSUFBSUMsRUFBRXhGLEVBQUVpWSxVQUFVLElBQUl6UyxFQUFFLE1BQU1JLE1BQU1rRSxFQUFFLE1BQU12RSxHQUFHdkYsRUFBRTR6QixHQUFHNXpCLEVBQUVDLEVBQUVvekIsSUFBSTd0QixFQUFFdXVCLDBDQUEwQy96QixFQUFFZ3pCLEdBQUVJLElBQUdKLEdBQUVHLElBQUdGLEdBQUVFLEdBQUVuekIsSUFBSWd6QixHQUFFSSxJQUFHSCxHQUFFRyxHQUFFN3RCLEdBQzdlLElBQUkwdUIsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUd0cUIsRUFBRXVTLHlCQUF5QmdZLEdBQUd2cUIsRUFBRWlULDBCQUEwQnVYLEdBQUd4cUIsRUFBRXlxQix3QkFBd0JDLEdBQUcxcUIsRUFBRTJxQixxQkFBcUJDLEdBQUc1cUIsRUFBRTZxQixzQkFBc0JDLEdBQUc5cUIsRUFBRXdVLGFBQWF1VyxHQUFHL3FCLEVBQUVnckIsaUNBQWlDQyxHQUFHanJCLEVBQUVrckIsMkJBQTJCQyxHQUFHbnJCLEVBQUVnVyw4QkFBOEJvVixHQUFHcHJCLEVBQUVrVCx3QkFBd0JtWSxHQUFHcnJCLEVBQUVzckIscUJBQXFCQyxHQUFHdnJCLEVBQUV3ckIsc0JBQXNCQyxHQUFHLEdBQUdDLFFBQUcsSUFBU2QsR0FBR0EsR0FBRyxhQUFhZSxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsSUFBRyxFQUFHQyxHQUFHaEIsS0FBS2lCLEdBQUUsSUFBSUQsR0FBR2hCLEdBQUcsV0FBVyxPQUFPQSxLQUFLZ0IsSUFDdGQsU0FBU0UsS0FBSyxPQUFPakIsTUFBTSxLQUFLRSxHQUFHLE9BQU8sR0FBRyxLQUFLRSxHQUFHLE9BQU8sR0FBRyxLQUFLQyxHQUFHLE9BQU8sR0FBRyxLQUFLQyxHQUFHLE9BQU8sR0FBRyxLQUFLRSxHQUFHLE9BQU8sR0FBRyxRQUFRLE1BQU14dkIsTUFBTWtFLEVBQUUsT0FBUSxTQUFTZ3NCLEdBQUc5MUIsR0FBRyxPQUFPQSxHQUFHLEtBQUssR0FBRyxPQUFPODBCLEdBQUcsS0FBSyxHQUFHLE9BQU9FLEdBQUcsS0FBSyxHQUFHLE9BQU9DLEdBQUcsS0FBSyxHQUFHLE9BQU9DLEdBQUcsS0FBSyxHQUFHLE9BQU9FLEdBQUcsUUFBUSxNQUFNeHZCLE1BQU1rRSxFQUFFLE9BQVEsU0FBU2lzQixHQUFHLzFCLEVBQUVDLEdBQVcsT0FBUkQsRUFBRTgxQixHQUFHOTFCLEdBQVVtMEIsR0FBR24wQixFQUFFQyxHQUFHLFNBQVMrMUIsR0FBR2gyQixFQUFFQyxFQUFFc0YsR0FBVyxPQUFSdkYsRUFBRTgxQixHQUFHOTFCLEdBQVVvMEIsR0FBR3AwQixFQUFFQyxFQUFFc0YsR0FBRyxTQUFTMHdCLEtBQUssR0FBRyxPQUFPUixHQUFHLENBQUMsSUFBSXoxQixFQUFFeTFCLEdBQUdBLEdBQUcsS0FBS3BCLEdBQUdyMEIsR0FBR2syQixLQUMzYSxTQUFTQSxLQUFLLElBQUlSLElBQUksT0FBT0YsR0FBRyxDQUFDRSxJQUFHLEVBQUcsSUFBSTExQixFQUFFLEVBQUUsSUFBSSxJQUFJQyxFQUFFdTFCLEdBQUdPLEdBQUcsSUFBRyxXQUFXLEtBQUsvMUIsRUFBRUMsRUFBRWdCLE9BQU9qQixJQUFJLENBQUMsSUFBSXVGLEVBQUV0RixFQUFFRCxHQUFHLEdBQUd1RixFQUFFQSxHQUFFLFNBQVUsT0FBT0EsT0FBTWl3QixHQUFHLEtBQUssTUFBTWp3QixHQUFHLE1BQU0sT0FBT2l3QixLQUFLQSxHQUFHQSxHQUFHM3BCLE1BQU03TCxFQUFFLElBQUlvMEIsR0FBR1UsR0FBR21CLElBQUkxd0IsRUFBRyxRQUFRbXdCLElBQUcsSUFBSyxJQUFJUyxHQUFHN3BCLEVBQUc4cEIsd0JBQXdCLFNBQVNDLEdBQUdyMkIsRUFBRUMsR0FBRyxHQUFHRCxHQUFHQSxFQUFFNkMsYUFBYSxDQUE0QixJQUFJLElBQUkwQyxLQUFuQ3RGLEVBQUUySixFQUFFLEdBQUczSixHQUFHRCxFQUFFQSxFQUFFNkMsa0JBQTRCLElBQVM1QyxFQUFFc0YsS0FBS3RGLEVBQUVzRixHQUFHdkYsRUFBRXVGLElBQUksT0FBT3RGLEVBQUUsT0FBT0EsRUFBRSxJQUFJcTJCLEdBQUd2RCxHQUFHLE1BQU13RCxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUFLLFNBQVNDLEtBQUtELEdBQUdELEdBQUdELEdBQUcsS0FDNWIsU0FBU0ksR0FBRzMyQixHQUFHLElBQUlDLEVBQUVxMkIsR0FBR2hjLFFBQVEwWSxHQUFFc0QsSUFBSXQyQixFQUFFb0QsS0FBSzZMLFNBQVMybkIsY0FBYzMyQixFQUFFLFNBQVM0MkIsR0FBRzcyQixFQUFFQyxHQUFHLEtBQUssT0FBT0QsR0FBRyxDQUFDLElBQUl1RixFQUFFdkYsRUFBRTRaLFVBQVUsSUFBSTVaLEVBQUU4MkIsV0FBVzcyQixLQUFLQSxFQUFFLElBQUcsT0FBT3NGLElBQUlBLEVBQUV1eEIsV0FBVzcyQixLQUFLQSxFQUFFLE1BQVdzRixFQUFFdXhCLFlBQVk3MkIsT0FBT0QsRUFBRTgyQixZQUFZNzJCLEVBQUUsT0FBT3NGLElBQUlBLEVBQUV1eEIsWUFBWTcyQixHQUFHRCxFQUFFQSxFQUFFNlosUUFBUSxTQUFTa2QsR0FBRy8yQixFQUFFQyxHQUFHczJCLEdBQUd2MkIsRUFBRXkyQixHQUFHRCxHQUFHLEtBQXNCLFFBQWpCeDJCLEVBQUVBLEVBQUVnM0IsZUFBdUIsT0FBT2gzQixFQUFFaTNCLGVBQWUsSUFBS2ozQixFQUFFazNCLE1BQU1qM0IsS0FBS2szQixJQUFHLEdBQUluM0IsRUFBRWkzQixhQUFhLE1BQ3ZZLFNBQVNHLEdBQUdwM0IsRUFBRUMsR0FBRyxHQUFHdzJCLEtBQUt6MkIsSUFBRyxJQUFLQyxHQUFHLElBQUlBLEVBQW1HLEdBQTdGLGlCQUFrQkEsR0FBRyxhQUFhQSxJQUFFdzJCLEdBQUd6MkIsRUFBRUMsRUFBRSxZQUFXQSxFQUFFLENBQUNvM0IsUUFBUXIzQixFQUFFczNCLGFBQWFyM0IsRUFBRXMzQixLQUFLLE1BQVMsT0FBT2YsR0FBRyxDQUFDLEdBQUcsT0FBT0QsR0FBRyxNQUFNM3dCLE1BQU1rRSxFQUFFLE1BQU0wc0IsR0FBR3YyQixFQUFFczJCLEdBQUdTLGFBQWEsQ0FBQ0UsTUFBTSxFQUFFRCxhQUFhaDNCLEVBQUV1M0IsV0FBVyxXQUFXaEIsR0FBR0EsR0FBR2UsS0FBS3QzQixFQUFFLE9BQU9ELEVBQUU0MkIsY0FBYyxJQUFJYSxJQUFHLEVBQUcsU0FBU0MsR0FBRzEzQixHQUFHQSxFQUFFMjNCLFlBQVksQ0FBQ0MsVUFBVTUzQixFQUFFZ2EsY0FBYzZkLGdCQUFnQixLQUFLQyxlQUFlLEtBQUtDLE9BQU8sQ0FBQ0MsUUFBUSxNQUFNQyxRQUFRLE1BQzFhLFNBQVNDLEdBQUdsNEIsRUFBRUMsR0FBR0QsRUFBRUEsRUFBRTIzQixZQUFZMTNCLEVBQUUwM0IsY0FBYzMzQixJQUFJQyxFQUFFMDNCLFlBQVksQ0FBQ0MsVUFBVTUzQixFQUFFNDNCLFVBQVVDLGdCQUFnQjczQixFQUFFNjNCLGdCQUFnQkMsZUFBZTkzQixFQUFFODNCLGVBQWVDLE9BQU8vM0IsRUFBRSszQixPQUFPRSxRQUFRajRCLEVBQUVpNEIsVUFBVSxTQUFTRSxHQUFHbjRCLEVBQUVDLEdBQUcsTUFBTSxDQUFDbTRCLFVBQVVwNEIsRUFBRXE0QixLQUFLcDRCLEVBQUU0TyxJQUFJLEVBQUV5cEIsUUFBUSxLQUFLQyxTQUFTLEtBQUtoQixLQUFLLE1BQU0sU0FBU2lCLEdBQUd4NEIsRUFBRUMsR0FBbUIsR0FBRyxRQUFuQkQsRUFBRUEsRUFBRTIzQixhQUF3QixDQUFZLElBQUlweUIsR0FBZnZGLEVBQUVBLEVBQUUrM0IsUUFBZUMsUUFBUSxPQUFPenlCLEVBQUV0RixFQUFFczNCLEtBQUt0M0IsR0FBR0EsRUFBRXMzQixLQUFLaHlCLEVBQUVneUIsS0FBS2h5QixFQUFFZ3lCLEtBQUt0M0IsR0FBR0QsRUFBRWc0QixRQUFRLzNCLEdBQ3JaLFNBQVN3NEIsR0FBR3o0QixFQUFFQyxHQUFHLElBQUlzRixFQUFFdkYsRUFBRTIzQixZQUFZbnlCLEVBQUV4RixFQUFFNFosVUFBVSxHQUFHLE9BQU9wVSxHQUFvQkQsS0FBaEJDLEVBQUVBLEVBQUVteUIsYUFBbUIsQ0FBQyxJQUFJdnlCLEVBQUUsS0FBS0ssRUFBRSxLQUF5QixHQUFHLFFBQXZCRixFQUFFQSxFQUFFc3lCLGlCQUE0QixDQUFDLEVBQUUsQ0FBQyxJQUFJOXNCLEVBQUUsQ0FBQ3F0QixVQUFVN3lCLEVBQUU2eUIsVUFBVUMsS0FBSzl5QixFQUFFOHlCLEtBQUt4cEIsSUFBSXRKLEVBQUVzSixJQUFJeXBCLFFBQVEveUIsRUFBRSt5QixRQUFRQyxTQUFTaHpCLEVBQUVnekIsU0FBU2hCLEtBQUssTUFBTSxPQUFPOXhCLEVBQUVMLEVBQUVLLEVBQUVzRixFQUFFdEYsRUFBRUEsRUFBRTh4QixLQUFLeHNCLEVBQUV4RixFQUFFQSxFQUFFZ3lCLFdBQVcsT0FBT2h5QixHQUFHLE9BQU9FLEVBQUVMLEVBQUVLLEVBQUV4RixFQUFFd0YsRUFBRUEsRUFBRTh4QixLQUFLdDNCLE9BQU9tRixFQUFFSyxFQUFFeEYsRUFBaUgsT0FBL0dzRixFQUFFLENBQUNxeUIsVUFBVXB5QixFQUFFb3lCLFVBQVVDLGdCQUFnQnp5QixFQUFFMHlCLGVBQWVyeUIsRUFBRXN5QixPQUFPdnlCLEVBQUV1eUIsT0FBT0UsUUFBUXp5QixFQUFFeXlCLGNBQVNqNEIsRUFBRTIzQixZQUFZcHlCLEdBQTRCLFFBQW5CdkYsRUFBRXVGLEVBQUV1eUIsZ0JBQXdCdnlCLEVBQUVzeUIsZ0JBQWdCNTNCLEVBQUVELEVBQUV1M0IsS0FDbmZ0M0IsRUFBRXNGLEVBQUV1eUIsZUFBZTczQixFQUNuQixTQUFTeTRCLEdBQUcxNEIsRUFBRUMsRUFBRXNGLEVBQUVDLEdBQUcsSUFBSUosRUFBRXBGLEVBQUUyM0IsWUFBWUYsSUFBRyxFQUFHLElBQUloeUIsRUFBRUwsRUFBRXl5QixnQkFBZ0I5c0IsRUFBRTNGLEVBQUUweUIsZUFBZW5wQixFQUFFdkosRUFBRTJ5QixPQUFPQyxRQUFRLEdBQUcsT0FBT3JwQixFQUFFLENBQUN2SixFQUFFMnlCLE9BQU9DLFFBQVEsS0FBSyxJQUFJdHBCLEVBQUVDLEVBQUV1SyxFQUFFeEssRUFBRTZvQixLQUFLN29CLEVBQUU2b0IsS0FBSyxLQUFLLE9BQU94c0IsRUFBRXRGLEVBQUV5VCxFQUFFbk8sRUFBRXdzQixLQUFLcmUsRUFBRW5PLEVBQUUyRCxFQUFFLElBQUk1SCxFQUFFOUcsRUFBRTRaLFVBQVUsR0FBRyxPQUFPOVMsRUFBRSxDQUFpQixJQUFJNnhCLEdBQXBCN3hCLEVBQUVBLEVBQUU2d0IsYUFBb0JHLGVBQWVhLElBQUk1dEIsSUFBSSxPQUFPNHRCLEVBQUU3eEIsRUFBRSt3QixnQkFBZ0IzZSxFQUFFeWYsRUFBRXBCLEtBQUtyZSxFQUFFcFMsRUFBRWd4QixlQUFlcHBCLElBQUksR0FBRyxPQUFPakosRUFBRSxDQUE4QixJQUE3Qmt6QixFQUFFdnpCLEVBQUV3eUIsVUFBVTdzQixFQUFFLEVBQUVqRSxFQUFFb1MsRUFBRXhLLEVBQUUsT0FBTyxDQUFDQyxFQUFFbEosRUFBRTR5QixLQUFLLElBQUlPLEVBQUVuekIsRUFBRTJ5QixVQUFVLElBQUk1eUIsRUFBRW1KLEtBQUtBLEVBQUUsQ0FBQyxPQUFPN0gsSUFBSUEsRUFBRUEsRUFBRXl3QixLQUFLLENBQUNhLFVBQVVRLEVBQUVQLEtBQUssRUFBRXhwQixJQUFJcEosRUFBRW9KLElBQUl5cEIsUUFBUTd5QixFQUFFNnlCLFFBQVFDLFNBQVM5eUIsRUFBRTh5QixTQUNyZmhCLEtBQUssT0FBT3YzQixFQUFFLENBQUMsSUFBSTY0QixFQUFFNzRCLEVBQUVxd0IsRUFBRTVxQixFQUFVLE9BQVJrSixFQUFFMU8sRUFBRTI0QixFQUFFcnpCLEVBQVM4cUIsRUFBRXhoQixLQUFLLEtBQUssRUFBYyxHQUFHLG1CQUFmZ3FCLEVBQUV4SSxFQUFFaUksU0FBaUMsQ0FBQ0ssRUFBRUUsRUFBRXA0QixLQUFLbTRCLEVBQUVELEVBQUVocUIsR0FBRyxNQUFNM08sRUFBRTI0QixFQUFFRSxFQUFFLE1BQU03NEIsRUFBRSxLQUFLLEVBQUU2NEIsRUFBRS9lLE9BQWUsS0FBVCtlLEVBQUUvZSxNQUFZLEdBQUcsS0FBSyxFQUFzRCxHQUFHLE9BQTNDbkwsRUFBRSxtQkFBZGtxQixFQUFFeEksRUFBRWlJLFNBQWdDTyxFQUFFcDRCLEtBQUttNEIsRUFBRUQsRUFBRWhxQixHQUFHa3FCLEdBQTBCLE1BQU03NEIsRUFBRTI0QixFQUFFL3VCLEVBQUUsR0FBRyt1QixFQUFFaHFCLEdBQUcsTUFBTTNPLEVBQUUsS0FBSyxFQUFFeTNCLElBQUcsR0FBSSxPQUFPaHlCLEVBQUU4eUIsV0FBV3Y0QixFQUFFOFosT0FBTyxHQUFlLFFBQVpuTCxFQUFFdkosRUFBRTZ5QixTQUFpQjd5QixFQUFFNnlCLFFBQVEsQ0FBQ3h5QixHQUFHa0osRUFBRXpOLEtBQUt1RSxTQUFTbXpCLEVBQUUsQ0FBQ1IsVUFBVVEsRUFBRVAsS0FBSzFwQixFQUFFRSxJQUFJcEosRUFBRW9KLElBQUl5cEIsUUFBUTd5QixFQUFFNnlCLFFBQVFDLFNBQVM5eUIsRUFBRTh5QixTQUFTaEIsS0FBSyxNQUFNLE9BQU96d0IsR0FBR29TLEVBQUVwUyxFQUFFOHhCLEVBQUVscUIsRUFBRWlxQixHQUFHN3hCLEVBQUVBLEVBQUV5d0IsS0FBS3FCLEVBQUU3dEIsR0FBRzRELEVBQVcsR0FBRyxRQUFabEosRUFBRUEsRUFBRTh4QixNQUMxZSxJQUFzQixRQUFuQjVvQixFQUFFdkosRUFBRTJ5QixPQUFPQyxTQUFpQixNQUFXdnlCLEVBQUVrSixFQUFFNG9CLEtBQUs1b0IsRUFBRTRvQixLQUFLLEtBQUtueUIsRUFBRTB5QixlQUFlbnBCLEVBQUV2SixFQUFFMnlCLE9BQU9DLFFBQVEsTUFBYyxPQUFPbHhCLElBQUk0SCxFQUFFaXFCLEdBQUd2ekIsRUFBRXd5QixVQUFVbHBCLEVBQUV0SixFQUFFeXlCLGdCQUFnQjNlLEVBQUU5VCxFQUFFMHlCLGVBQWVoeEIsRUFBRWd5QixJQUFJL3RCLEVBQUUvSyxFQUFFazNCLE1BQU1uc0IsRUFBRS9LLEVBQUVnYSxjQUFjMmUsR0FBRyxTQUFTSSxHQUFHLzRCLEVBQUVDLEVBQUVzRixHQUE4QixHQUEzQnZGLEVBQUVDLEVBQUVnNEIsUUFBUWg0QixFQUFFZzRCLFFBQVEsS0FBUSxPQUFPajRCLEVBQUUsSUFBSUMsRUFBRSxFQUFFQSxFQUFFRCxFQUFFaUIsT0FBT2hCLElBQUksQ0FBQyxJQUFJdUYsRUFBRXhGLEVBQUVDLEdBQUdtRixFQUFFSSxFQUFFK3lCLFNBQVMsR0FBRyxPQUFPbnpCLEVBQUUsQ0FBcUIsR0FBcEJJLEVBQUUreUIsU0FBUyxLQUFLL3lCLEVBQUVELEVBQUssbUJBQW9CSCxFQUFFLE1BQU1RLE1BQU1rRSxFQUFFLElBQUkxRSxJQUFJQSxFQUFFM0UsS0FBSytFLEtBQUssSUFBSXd6QixJQUFHLElBQUtydkIsRUFBR3N2QixXQUFXQyxLQUMzYixTQUFTQyxHQUFHbjVCLEVBQUVDLEVBQUVzRixFQUFFQyxHQUE4QkQsRUFBRSxPQUFYQSxFQUFFQSxFQUFFQyxFQUF0QnZGLEVBQUVELEVBQUVnYSxnQkFBOEMvWixFQUFFMkosRUFBRSxHQUFHM0osRUFBRXNGLEdBQUd2RixFQUFFZ2EsY0FBY3pVLEVBQUUsSUFBSXZGLEVBQUVrM0IsUUFBUWwzQixFQUFFMjNCLFlBQVlDLFVBQVVyeUIsR0FDM0ksSUFBSTZ6QixHQUFHLENBQUNDLFVBQVUsU0FBU3I1QixHQUFHLFNBQU9BLEVBQUVBLEVBQUVzNUIsa0JBQWlCM2YsR0FBRzNaLEtBQUtBLEdBQU11NUIsZ0JBQWdCLFNBQVN2NUIsRUFBRUMsRUFBRXNGLEdBQUd2RixFQUFFQSxFQUFFczVCLGdCQUFnQixJQUFJOXpCLEVBQUVnMEIsS0FBS3AwQixFQUFFcTBCLEdBQUd6NUIsR0FBR3lGLEVBQUUweUIsR0FBRzN5QixFQUFFSixHQUFHSyxFQUFFNnlCLFFBQVFyNEIsRUFBRSxNQUFTc0YsSUFBY0UsRUFBRTh5QixTQUFTaHpCLEdBQUdpekIsR0FBR3g0QixFQUFFeUYsR0FBR2kwQixHQUFHMTVCLEVBQUVvRixFQUFFSSxJQUFJbTBCLG9CQUFvQixTQUFTMzVCLEVBQUVDLEVBQUVzRixHQUFHdkYsRUFBRUEsRUFBRXM1QixnQkFBZ0IsSUFBSTl6QixFQUFFZzBCLEtBQUtwMEIsRUFBRXEwQixHQUFHejVCLEdBQUd5RixFQUFFMHlCLEdBQUczeUIsRUFBRUosR0FBR0ssRUFBRW9KLElBQUksRUFBRXBKLEVBQUU2eUIsUUFBUXI0QixFQUFFLE1BQVNzRixJQUFjRSxFQUFFOHlCLFNBQVNoekIsR0FBR2l6QixHQUFHeDRCLEVBQUV5RixHQUFHaTBCLEdBQUcxNUIsRUFBRW9GLEVBQUVJLElBQUlvMEIsbUJBQW1CLFNBQVM1NUIsRUFBRUMsR0FBR0QsRUFBRUEsRUFBRXM1QixnQkFBZ0IsSUFBSS96QixFQUFFaTBCLEtBQUtoMEIsRUFBRWkwQixHQUFHejVCLEdBQUdvRixFQUFFK3lCLEdBQUc1eUIsRUFBRUMsR0FBR0osRUFBRXlKLElBQUksRUFBRSxNQUFTNU8sSUFBY21GLEVBQUVtekIsU0FDamZ0NEIsR0FBR3U0QixHQUFHeDRCLEVBQUVvRixHQUFHczBCLEdBQUcxNUIsRUFBRXdGLEVBQUVELEtBQUssU0FBU3MwQixHQUFHNzVCLEVBQUVDLEVBQUVzRixFQUFFQyxFQUFFSixFQUFFSyxFQUFFc0YsR0FBaUIsTUFBTSxtQkFBcEIvSyxFQUFFQSxFQUFFaVksV0FBc0M2aEIsc0JBQXNCOTVCLEVBQUU4NUIsc0JBQXNCdDBCLEVBQUVDLEVBQUVzRixLQUFHOUssRUFBRUssV0FBV0wsRUFBRUssVUFBVXk1QixzQkFBc0IzTSxHQUFHN25CLEVBQUVDLElBQUs0bkIsR0FBR2hvQixFQUFFSyxJQUMvTSxTQUFTdTBCLEdBQUdoNkIsRUFBRUMsRUFBRXNGLEdBQUcsSUFBSUMsR0FBRSxFQUFHSixFQUFFOHRCLEdBQU96dEIsRUFBRXhGLEVBQUUwQyxZQUEyVyxNQUEvVixpQkFBa0I4QyxHQUFHLE9BQU9BLEVBQUVBLEVBQUUyeEIsR0FBRzN4QixJQUFJTCxFQUFFcXVCLEdBQUd4ekIsR0FBR296QixHQUFHRixHQUFFN1ksUUFBeUI3VSxHQUFHRCxFQUFFLE9BQXRCQSxFQUFFdkYsRUFBRTJDLGVBQXdDMHdCLEdBQUd0ekIsRUFBRW9GLEdBQUc4dEIsSUFBSWp6QixFQUFFLElBQUlBLEVBQUVzRixFQUFFRSxHQUFHekYsRUFBRWdhLGNBQWMsT0FBTy9aLEVBQUVnNkIsWUFBTyxJQUFTaDZCLEVBQUVnNkIsTUFBTWg2QixFQUFFZzZCLE1BQU0sS0FBS2g2QixFQUFFaTZCLFFBQVFkLEdBQUdwNUIsRUFBRWlZLFVBQVVoWSxFQUFFQSxFQUFFcTVCLGdCQUFnQnQ1QixFQUFFd0YsS0FBSXhGLEVBQUVBLEVBQUVpWSxXQUFZc2IsNENBQTRDbnVCLEVBQUVwRixFQUFFd3pCLDBDQUEwQy90QixHQUFVeEYsRUFDM1osU0FBU2s2QixHQUFHbjZCLEVBQUVDLEVBQUVzRixFQUFFQyxHQUFHeEYsRUFBRUMsRUFBRWc2QixNQUFNLG1CQUFvQmg2QixFQUFFbTZCLDJCQUEyQm42QixFQUFFbTZCLDBCQUEwQjcwQixFQUFFQyxHQUFHLG1CQUFvQnZGLEVBQUVvNkIsa0NBQWtDcDZCLEVBQUVvNkIsaUNBQWlDOTBCLEVBQUVDLEdBQUd2RixFQUFFZzZCLFFBQVFqNkIsR0FBR281QixHQUFHTyxvQkFBb0IxNUIsRUFBRUEsRUFBRWc2QixNQUFNLE1BQy9QLFNBQVNLLEdBQUd0NkIsRUFBRUMsRUFBRXNGLEVBQUVDLEdBQUcsSUFBSUosRUFBRXBGLEVBQUVpWSxVQUFVN1MsRUFBRTJDLE1BQU14QyxFQUFFSCxFQUFFNjBCLE1BQU1qNkIsRUFBRWdhLGNBQWM1VSxFQUFFOHpCLEtBQUtGLEdBQUd0QixHQUFHMTNCLEdBQUcsSUFBSXlGLEVBQUV4RixFQUFFMEMsWUFBWSxpQkFBa0I4QyxHQUFHLE9BQU9BLEVBQUVMLEVBQUVpeUIsUUFBUUQsR0FBRzN4QixJQUFJQSxFQUFFZ3VCLEdBQUd4ekIsR0FBR296QixHQUFHRixHQUFFN1ksUUFBUWxWLEVBQUVpeUIsUUFBUS9ELEdBQUd0ekIsRUFBRXlGLElBQUlpekIsR0FBRzE0QixFQUFFdUYsRUFBRUgsRUFBRUksR0FBR0osRUFBRTYwQixNQUFNajZCLEVBQUVnYSxjQUEyQyxtQkFBN0J2VSxFQUFFeEYsRUFBRWdELDRCQUFpRGsyQixHQUFHbjVCLEVBQUVDLEVBQUV3RixFQUFFRixHQUFHSCxFQUFFNjBCLE1BQU1qNkIsRUFBRWdhLGVBQWUsbUJBQW9CL1osRUFBRWdELDBCQUEwQixtQkFBb0JtQyxFQUFFbTFCLHlCQUF5QixtQkFBb0JuMUIsRUFBRW8xQiwyQkFBMkIsbUJBQW9CcDFCLEVBQUVxMUIscUJBQ3ZleDZCLEVBQUVtRixFQUFFNjBCLE1BQU0sbUJBQW9CNzBCLEVBQUVxMUIsb0JBQW9CcjFCLEVBQUVxMUIscUJBQXFCLG1CQUFvQnIxQixFQUFFbzFCLDJCQUEyQnAxQixFQUFFbzFCLDRCQUE0QnY2QixJQUFJbUYsRUFBRTYwQixPQUFPYixHQUFHTyxvQkFBb0J2MEIsRUFBRUEsRUFBRTYwQixNQUFNLE1BQU12QixHQUFHMTRCLEVBQUV1RixFQUFFSCxFQUFFSSxHQUFHSixFQUFFNjBCLE1BQU1qNkIsRUFBRWdhLGVBQWUsbUJBQW9CNVUsRUFBRXMxQixvQkFBb0IxNkIsRUFBRThaLE9BQU8sR0FBRyxJQUFJNmdCLEdBQUcxMEIsTUFBTUMsUUFDdlQsU0FBUzAwQixHQUFHNTZCLEVBQUVDLEVBQUVzRixHQUFXLEdBQUcsUUFBWHZGLEVBQUV1RixFQUFFczFCLE1BQWlCLG1CQUFvQjc2QixHQUFHLGlCQUFrQkEsRUFBRSxDQUFDLEdBQUd1RixFQUFFdTFCLE9BQU8sQ0FBWSxHQUFYdjFCLEVBQUVBLEVBQUV1MUIsT0FBWSxDQUFDLEdBQUcsSUFBSXYxQixFQUFFc0osSUFBSSxNQUFNakosTUFBTWtFLEVBQUUsTUFBTSxJQUFJdEUsRUFBRUQsRUFBRTBTLFVBQVUsSUFBSXpTLEVBQUUsTUFBTUksTUFBTWtFLEVBQUUsSUFBSTlKLElBQUksSUFBSW9GLEVBQUUsR0FBR3BGLEVBQUUsT0FBRyxPQUFPQyxHQUFHLE9BQU9BLEVBQUU0NkIsS0FBSyxtQkFBb0I1NkIsRUFBRTQ2QixLQUFLNTZCLEVBQUU0NkIsSUFBSUUsYUFBYTMxQixFQUFTbkYsRUFBRTQ2QixNQUFJNTZCLEVBQUUsU0FBU0QsR0FBRyxJQUFJQyxFQUFFdUYsRUFBRTB6QixLQUFLajVCLElBQUkrNEIsS0FBSy80QixFQUFFdUYsRUFBRTB6QixLQUFLLElBQUksT0FBT2w1QixTQUFTQyxFQUFFbUYsR0FBR25GLEVBQUVtRixHQUFHcEYsSUFBSys2QixXQUFXMzFCLEVBQVNuRixHQUFFLEdBQUcsaUJBQWtCRCxFQUFFLE1BQU00RixNQUFNa0UsRUFBRSxNQUFNLElBQUl2RSxFQUFFdTFCLE9BQU8sTUFBTWwxQixNQUFNa0UsRUFBRSxJQUFJOUosSUFBSyxPQUFPQSxFQUNoZSxTQUFTZzdCLEdBQUdoN0IsRUFBRUMsR0FBRyxHQUFHLGFBQWFELEVBQUVvRCxLQUFLLE1BQU13QyxNQUFNa0UsRUFBRSxHQUFHLG9CQUFvQnpKLE9BQU9DLFVBQVVDLFNBQVNFLEtBQUtSLEdBQUcscUJBQXFCSSxPQUFPa0IsS0FBS3RCLEdBQUc4RyxLQUFLLE1BQU0sSUFBSTlHLElBQ2xLLFNBQVNnN0IsR0FBR2o3QixHQUFHLFNBQVNDLEVBQUVBLEVBQUVzRixHQUFHLEdBQUd2RixFQUFFLENBQUMsSUFBSXdGLEVBQUV2RixFQUFFaTdCLFdBQVcsT0FBTzExQixHQUFHQSxFQUFFMjFCLFdBQVc1MUIsRUFBRXRGLEVBQUVpN0IsV0FBVzMxQixHQUFHdEYsRUFBRW03QixZQUFZbjdCLEVBQUVpN0IsV0FBVzMxQixFQUFFQSxFQUFFNDFCLFdBQVcsS0FBSzUxQixFQUFFdVUsTUFBTSxHQUFHLFNBQVN2VSxFQUFFQSxFQUFFQyxHQUFHLElBQUl4RixFQUFFLE9BQU8sS0FBSyxLQUFLLE9BQU93RixHQUFHdkYsRUFBRXNGLEVBQUVDLEdBQUdBLEVBQUVBLEVBQUU2VSxRQUFRLE9BQU8sS0FBSyxTQUFTN1UsRUFBRXhGLEVBQUVDLEdBQUcsSUFBSUQsRUFBRSxJQUFJbWIsSUFBSSxPQUFPbGIsR0FBRyxPQUFPQSxFQUFFaUYsSUFBSWxGLEVBQUV1TyxJQUFJdE8sRUFBRWlGLElBQUlqRixHQUFHRCxFQUFFdU8sSUFBSXRPLEVBQUVvN0IsTUFBTXA3QixHQUFHQSxFQUFFQSxFQUFFb2EsUUFBUSxPQUFPcmEsRUFBRSxTQUFTb0YsRUFBRXBGLEVBQUVDLEdBQXNDLE9BQW5DRCxFQUFFczdCLEdBQUd0N0IsRUFBRUMsSUFBS283QixNQUFNLEVBQUVyN0IsRUFBRXFhLFFBQVEsS0FBWXJhLEVBQUUsU0FBU3lGLEVBQUV4RixFQUFFc0YsRUFBRUMsR0FBYSxPQUFWdkYsRUFBRW83QixNQUFNNzFCLEVBQU14RixFQUE0QixRQUFqQndGLEVBQUV2RixFQUFFMlosWUFBNkJwVSxFQUFFQSxFQUFFNjFCLE9BQVE5MUIsR0FBR3RGLEVBQUU2WixNQUFNLEVBQ3BmdlUsR0FBR0MsR0FBRXZGLEVBQUU2WixNQUFNLEVBQVN2VSxHQURvYUEsRUFDbGEsU0FBU3dGLEVBQUU5SyxHQUFzQyxPQUFuQ0QsR0FBRyxPQUFPQyxFQUFFMlosWUFBWTNaLEVBQUU2WixNQUFNLEdBQVU3WixFQUFFLFNBQVMwTyxFQUFFM08sRUFBRUMsRUFBRXNGLEVBQUVDLEdBQUcsT0FBRyxPQUFPdkYsR0FBRyxJQUFJQSxFQUFFNE8sTUFBVzVPLEVBQUVzN0IsR0FBR2gyQixFQUFFdkYsRUFBRXc3QixLQUFLaDJCLElBQUtxVSxPQUFPN1osRUFBRUMsS0FBRUEsRUFBRW1GLEVBQUVuRixFQUFFc0YsSUFBS3NVLE9BQU83WixFQUFTQyxHQUFFLFNBQVN5TyxFQUFFMU8sRUFBRUMsRUFBRXNGLEVBQUVDLEdBQUcsT0FBRyxPQUFPdkYsR0FBR0EsRUFBRWlKLGNBQWMzRCxFQUFFbkMsT0FBWW9DLEVBQUVKLEVBQUVuRixFQUFFc0YsRUFBRXdDLFFBQVM4eUIsSUFBSUQsR0FBRzU2QixFQUFFQyxFQUFFc0YsR0FBR0MsRUFBRXFVLE9BQU83WixFQUFFd0YsS0FBRUEsRUFBRWkyQixHQUFHbDJCLEVBQUVuQyxLQUFLbUMsRUFBRUwsSUFBSUssRUFBRXdDLE1BQU0sS0FBSy9ILEVBQUV3N0IsS0FBS2gyQixJQUFLcTFCLElBQUlELEdBQUc1NkIsRUFBRUMsRUFBRXNGLEdBQUdDLEVBQUVxVSxPQUFPN1osRUFBU3dGLEdBQUUsU0FBUzBULEVBQUVsWixFQUFFQyxFQUFFc0YsRUFBRUMsR0FBRyxPQUFHLE9BQU92RixHQUFHLElBQUlBLEVBQUU0TyxLQUFLNU8sRUFBRWdZLFVBQVVzRSxnQkFBZ0JoWCxFQUFFZ1gsZUFBZXRjLEVBQUVnWSxVQUFVeWpCLGlCQUFpQm4yQixFQUFFbTJCLGlCQUFzQno3QixFQUNyZ0IwN0IsR0FBR3AyQixFQUFFdkYsRUFBRXc3QixLQUFLaDJCLElBQUtxVSxPQUFPN1osRUFBRUMsS0FBRUEsRUFBRW1GLEVBQUVuRixFQUFFc0YsRUFBRTZMLFVBQVUsS0FBTXlJLE9BQU83WixFQUFTQyxHQUFFLFNBQVM2RyxFQUFFOUcsRUFBRUMsRUFBRXNGLEVBQUVDLEVBQUVDLEdBQUcsT0FBRyxPQUFPeEYsR0FBRyxJQUFJQSxFQUFFNE8sTUFBVzVPLEVBQUUyN0IsR0FBR3IyQixFQUFFdkYsRUFBRXc3QixLQUFLaDJCLEVBQUVDLElBQUtvVSxPQUFPN1osRUFBRUMsS0FBRUEsRUFBRW1GLEVBQUVuRixFQUFFc0YsSUFBS3NVLE9BQU83WixFQUFTQyxHQUFFLFNBQVMwNEIsRUFBRTM0QixFQUFFQyxFQUFFc0YsR0FBRyxHQUFHLGlCQUFrQnRGLEdBQUcsaUJBQWtCQSxFQUFFLE9BQU9BLEVBQUVzN0IsR0FBRyxHQUFHdDdCLEVBQUVELEVBQUV3N0IsS0FBS2oyQixJQUFLc1UsT0FBTzdaLEVBQUVDLEVBQUUsR0FBRyxpQkFBa0JBLEdBQUcsT0FBT0EsRUFBRSxDQUFDLE9BQU9BLEVBQUUrTyxVQUFVLEtBQUt4QyxFQUFHLE9BQU9qSCxFQUFFazJCLEdBQUd4N0IsRUFBRW1ELEtBQUtuRCxFQUFFaUYsSUFBSWpGLEVBQUU4SCxNQUFNLEtBQUsvSCxFQUFFdzdCLEtBQUtqMkIsSUFBS3MxQixJQUFJRCxHQUFHNTZCLEVBQUUsS0FBS0MsR0FBR3NGLEVBQUVzVSxPQUFPN1osRUFBRXVGLEVBQUUsS0FBS2tILEVBQUcsT0FBT3hNLEVBQUUwN0IsR0FBRzE3QixFQUFFRCxFQUFFdzdCLEtBQUtqMkIsSUFBS3NVLE9BQU83WixFQUFFQyxFQUFFLEdBQUcwNkIsR0FBRzE2QixJQUFJOE4sRUFBRzlOLEdBQUcsT0FBT0EsRUFBRTI3QixHQUFHMzdCLEVBQ25mRCxFQUFFdzdCLEtBQUtqMkIsRUFBRSxPQUFRc1UsT0FBTzdaLEVBQUVDLEVBQUUrNkIsR0FBR2g3QixFQUFFQyxHQUFHLE9BQU8sS0FBSyxTQUFTMjRCLEVBQUU1NEIsRUFBRUMsRUFBRXNGLEVBQUVDLEdBQUcsSUFBSUosRUFBRSxPQUFPbkYsRUFBRUEsRUFBRWlGLElBQUksS0FBSyxHQUFHLGlCQUFrQkssR0FBRyxpQkFBa0JBLEVBQUUsT0FBTyxPQUFPSCxFQUFFLEtBQUt1SixFQUFFM08sRUFBRUMsRUFBRSxHQUFHc0YsRUFBRUMsR0FBRyxHQUFHLGlCQUFrQkQsR0FBRyxPQUFPQSxFQUFFLENBQUMsT0FBT0EsRUFBRXlKLFVBQVUsS0FBS3hDLEVBQUcsT0FBT2pILEVBQUVMLE1BQU1FLEVBQUVHLEVBQUVuQyxPQUFPc0osRUFBRzVGLEVBQUU5RyxFQUFFQyxFQUFFc0YsRUFBRXdDLE1BQU1xSixTQUFTNUwsRUFBRUosR0FBR3NKLEVBQUUxTyxFQUFFQyxFQUFFc0YsRUFBRUMsR0FBRyxLQUFLLEtBQUtpSCxFQUFHLE9BQU9sSCxFQUFFTCxNQUFNRSxFQUFFOFQsRUFBRWxaLEVBQUVDLEVBQUVzRixFQUFFQyxHQUFHLEtBQUssR0FBR20xQixHQUFHcDFCLElBQUl3SSxFQUFHeEksR0FBRyxPQUFPLE9BQU9ILEVBQUUsS0FBSzBCLEVBQUU5RyxFQUFFQyxFQUFFc0YsRUFBRUMsRUFBRSxNQUFNdzFCLEdBQUdoN0IsRUFBRXVGLEdBQUcsT0FBTyxLQUFLLFNBQVNzekIsRUFBRTc0QixFQUFFQyxFQUFFc0YsRUFBRUMsRUFBRUosR0FBRyxHQUFHLGlCQUFrQkksR0FBRyxpQkFBa0JBLEVBQUUsT0FDbGVtSixFQUFFMU8sRUFEdWVELEVBQUVBLEVBQUV5UCxJQUFJbEssSUFDdGYsS0FBVyxHQUFHQyxFQUFFSixHQUFHLEdBQUcsaUJBQWtCSSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxPQUFPQSxFQUFFd0osVUFBVSxLQUFLeEMsRUFBRyxPQUFPeE0sRUFBRUEsRUFBRXlQLElBQUksT0FBT2pLLEVBQUVOLElBQUlLLEVBQUVDLEVBQUVOLE1BQU0sS0FBS00sRUFBRXBDLE9BQU9zSixFQUFHNUYsRUFBRTdHLEVBQUVELEVBQUV3RixFQUFFdUMsTUFBTXFKLFNBQVNoTSxFQUFFSSxFQUFFTixLQUFLd0osRUFBRXpPLEVBQUVELEVBQUV3RixFQUFFSixHQUFHLEtBQUtxSCxFQUFHLE9BQTJDeU0sRUFBRWpaLEVBQXRDRCxFQUFFQSxFQUFFeVAsSUFBSSxPQUFPakssRUFBRU4sSUFBSUssRUFBRUMsRUFBRU4sTUFBTSxLQUFXTSxFQUFFSixHQUFHLEdBQUd1MUIsR0FBR24xQixJQUFJdUksRUFBR3ZJLEdBQUcsT0FBd0JzQixFQUFFN0csRUFBbkJELEVBQUVBLEVBQUV5UCxJQUFJbEssSUFBSSxLQUFXQyxFQUFFSixFQUFFLE1BQU00MUIsR0FBRy82QixFQUFFdUYsR0FBRyxPQUFPLEtBQUssU0FBUzZxQixFQUFFanJCLEVBQUUyRixFQUFFNEQsRUFBRUQsR0FBRyxJQUFJLElBQUl3SyxFQUFFLEtBQUt3WCxFQUFFLEtBQUtGLEVBQUV6bEIsRUFBRXdsQixFQUFFeGxCLEVBQUUsRUFBRTBsQixFQUFFLEtBQUssT0FBT0QsR0FBR0QsRUFBRTVoQixFQUFFMU4sT0FBT3N2QixJQUFJLENBQUNDLEVBQUU2SyxNQUFNOUssR0FBR0UsRUFBRUQsRUFBRUEsRUFBRSxNQUFNQyxFQUFFRCxFQUFFblcsUUFBUSxJQUFJdlQsRUFBRTh4QixFQUFFeHpCLEVBQUVvckIsRUFBRTdoQixFQUFFNGhCLEdBQUc3aEIsR0FBRyxHQUFHLE9BQU81SCxFQUFFLENBQUMsT0FBTzBwQixJQUFJQSxFQUFFQyxHQUFHLE1BQU16d0IsR0FBR3d3QixHQUFHLE9BQ2pmMXBCLEVBQUU4UyxXQUFXM1osRUFBRW1GLEVBQUVvckIsR0FBR3psQixFQUFFdEYsRUFBRXFCLEVBQUVpRSxFQUFFd2xCLEdBQUcsT0FBT0csRUFBRXhYLEVBQUVwUyxFQUFFNHBCLEVBQUVyVyxRQUFRdlQsRUFBRTRwQixFQUFFNXBCLEVBQUUwcEIsRUFBRUMsRUFBRSxHQUFHRixJQUFJNWhCLEVBQUUxTixPQUFPLE9BQU9zRSxFQUFFSCxFQUFFb3JCLEdBQUd0WCxFQUFFLEdBQUcsT0FBT3NYLEVBQUUsQ0FBQyxLQUFLRCxFQUFFNWhCLEVBQUUxTixPQUFPc3ZCLElBQWtCLFFBQWRDLEVBQUVtSSxFQUFFdnpCLEVBQUV1SixFQUFFNGhCLEdBQUc3aEIsTUFBYzNELEVBQUV0RixFQUFFK3FCLEVBQUV6bEIsRUFBRXdsQixHQUFHLE9BQU9HLEVBQUV4WCxFQUFFc1gsRUFBRUUsRUFBRXJXLFFBQVFtVyxFQUFFRSxFQUFFRixHQUFHLE9BQU90WCxFQUFFLElBQUlzWCxFQUFFaHJCLEVBQUVKLEVBQUVvckIsR0FBR0QsRUFBRTVoQixFQUFFMU4sT0FBT3N2QixJQUFzQixRQUFsQkUsRUFBRW9JLEVBQUVySSxFQUFFcHJCLEVBQUVtckIsRUFBRTVoQixFQUFFNGhCLEdBQUc3aEIsTUFBYzFPLEdBQUcsT0FBT3l3QixFQUFFN1csV0FBVzRXLEVBQUUxVSxPQUFPLE9BQU8yVSxFQUFFdnJCLElBQUlxckIsRUFBRUUsRUFBRXZyQixLQUFLNkYsRUFBRXRGLEVBQUVnckIsRUFBRTFsQixFQUFFd2xCLEdBQUcsT0FBT0csRUFBRXhYLEVBQUV1WCxFQUFFQyxFQUFFclcsUUFBUW9XLEVBQUVDLEVBQUVELEdBQTRDLE9BQXpDendCLEdBQUd3d0IsRUFBRXRwQixTQUFRLFNBQVNsSCxHQUFHLE9BQU9DLEVBQUVtRixFQUFFcEYsTUFBWWtaLEVBQUUsU0FBU29YLEVBQUVsckIsRUFBRTJGLEVBQUU0RCxFQUFFRCxHQUFHLElBQUl3SyxFQUFFbkwsRUFBR1ksR0FBRyxHQUFHLG1CQUFvQnVLLEVBQUUsTUFBTXRULE1BQU1rRSxFQUFFLE1BQWtCLEdBQUcsT0FBZjZFLEVBQUV1SyxFQUFFelksS0FBS2tPLElBQzFlLE1BQU0vSSxNQUFNa0UsRUFBRSxNQUFNLElBQUksSUFBSTRtQixFQUFFeFgsRUFBRSxLQUFLc1gsRUFBRXpsQixFQUFFd2xCLEVBQUV4bEIsRUFBRSxFQUFFMGxCLEVBQUUsS0FBSzNwQixFQUFFNkgsRUFBRTRvQixPQUFPLE9BQU8vRyxJQUFJMXBCLEVBQUUrMEIsS0FBS3RMLElBQUl6cEIsRUFBRTZILEVBQUU0b0IsT0FBTyxDQUFDL0csRUFBRTZLLE1BQU05SyxHQUFHRSxFQUFFRCxFQUFFQSxFQUFFLE1BQU1DLEVBQUVELEVBQUVuVyxRQUFRLElBQUlpVyxFQUFFc0ksRUFBRXh6QixFQUFFb3JCLEVBQUUxcEIsRUFBRW9KLE1BQU14QixHQUFHLEdBQUcsT0FBTzRoQixFQUFFLENBQUMsT0FBT0UsSUFBSUEsRUFBRUMsR0FBRyxNQUFNendCLEdBQUd3d0IsR0FBRyxPQUFPRixFQUFFMVcsV0FBVzNaLEVBQUVtRixFQUFFb3JCLEdBQUd6bEIsRUFBRXRGLEVBQUU2cUIsRUFBRXZsQixFQUFFd2xCLEdBQUcsT0FBT0csRUFBRXhYLEVBQUVvWCxFQUFFSSxFQUFFclcsUUFBUWlXLEVBQUVJLEVBQUVKLEVBQUVFLEVBQUVDLEVBQUUsR0FBRzNwQixFQUFFKzBCLEtBQUssT0FBT3QyQixFQUFFSCxFQUFFb3JCLEdBQUd0WCxFQUFFLEdBQUcsT0FBT3NYLEVBQUUsQ0FBQyxNQUFNMXBCLEVBQUUrMEIsS0FBS3RMLElBQUl6cEIsRUFBRTZILEVBQUU0b0IsT0FBd0IsUUFBakJ6d0IsRUFBRTZ4QixFQUFFdnpCLEVBQUUwQixFQUFFb0osTUFBTXhCLE1BQWMzRCxFQUFFdEYsRUFBRXFCLEVBQUVpRSxFQUFFd2xCLEdBQUcsT0FBT0csRUFBRXhYLEVBQUVwUyxFQUFFNHBCLEVBQUVyVyxRQUFRdlQsRUFBRTRwQixFQUFFNXBCLEdBQUcsT0FBT29TLEVBQUUsSUFBSXNYLEVBQUVockIsRUFBRUosRUFBRW9yQixJQUFJMXBCLEVBQUUrMEIsS0FBS3RMLElBQUl6cEIsRUFBRTZILEVBQUU0b0IsT0FBNEIsUUFBckJ6d0IsRUFBRSt4QixFQUFFckksRUFBRXByQixFQUFFbXJCLEVBQUV6cEIsRUFBRW9KLE1BQU14QixNQUFjMU8sR0FBRyxPQUFPOEcsRUFBRThTLFdBQ2hmNFcsRUFBRTFVLE9BQU8sT0FBT2hWLEVBQUU1QixJQUFJcXJCLEVBQUV6cEIsRUFBRTVCLEtBQUs2RixFQUFFdEYsRUFBRXFCLEVBQUVpRSxFQUFFd2xCLEdBQUcsT0FBT0csRUFBRXhYLEVBQUVwUyxFQUFFNHBCLEVBQUVyVyxRQUFRdlQsRUFBRTRwQixFQUFFNXBCLEdBQTRDLE9BQXpDOUcsR0FBR3d3QixFQUFFdHBCLFNBQVEsU0FBU2xILEdBQUcsT0FBT0MsRUFBRW1GLEVBQUVwRixNQUFZa1osRUFBRSxPQUFPLFNBQVNsWixFQUFFd0YsRUFBRUMsRUFBRWtKLEdBQUcsSUFBSUQsRUFBRSxpQkFBa0JqSixHQUFHLE9BQU9BLEdBQUdBLEVBQUVyQyxPQUFPc0osR0FBSSxPQUFPakgsRUFBRVAsSUFBSXdKLElBQUlqSixFQUFFQSxFQUFFc0MsTUFBTXFKLFVBQVUsSUFBSThILEVBQUUsaUJBQWtCelQsR0FBRyxPQUFPQSxFQUFFLEdBQUd5VCxFQUFFLE9BQU96VCxFQUFFdUosVUFBVSxLQUFLeEMsRUFBR3hNLEVBQUUsQ0FBUyxJQUFSa1osRUFBRXpULEVBQUVQLElBQVF3SixFQUFFbEosRUFBRSxPQUFPa0osR0FBRyxDQUFDLEdBQUdBLEVBQUV4SixNQUFNZ1UsRUFBRSxDQUFDLE9BQU94SyxFQUFFRyxLQUFLLEtBQUssRUFBRSxHQUFHcEosRUFBRXJDLE9BQU9zSixFQUFHLENBQUNuSCxFQUFFdkYsRUFBRTBPLEVBQUUyTCxVQUFTN1UsRUFBRUosRUFBRXNKLEVBQUVqSixFQUFFc0MsTUFBTXFKLFdBQVl5SSxPQUFPN1osRUFBRUEsRUFBRXdGLEVBQUUsTUFBTXhGLEVBQUUsTUFBTSxRQUFRLEdBQUcwTyxFQUFFeEYsY0FBY3pELEVBQUVyQyxLQUFLLENBQUNtQyxFQUFFdkYsRUFBRTBPLEVBQUUyTCxVQUM1ZTdVLEVBQUVKLEVBQUVzSixFQUFFakosRUFBRXNDLFFBQVM4eUIsSUFBSUQsR0FBRzU2QixFQUFFME8sRUFBRWpKLEdBQUdELEVBQUVxVSxPQUFPN1osRUFBRUEsRUFBRXdGLEVBQUUsTUFBTXhGLEdBQUd1RixFQUFFdkYsRUFBRTBPLEdBQUcsTUFBV3pPLEVBQUVELEVBQUUwTyxHQUFHQSxFQUFFQSxFQUFFMkwsUUFBUTVVLEVBQUVyQyxPQUFPc0osSUFBSWxILEVBQUVvMkIsR0FBR24yQixFQUFFc0MsTUFBTXFKLFNBQVNwUixFQUFFdzdCLEtBQUs3c0IsRUFBRWxKLEVBQUVQLE1BQU8yVSxPQUFPN1osRUFBRUEsRUFBRXdGLEtBQUltSixFQUFFOHNCLEdBQUdoMkIsRUFBRXJDLEtBQUtxQyxFQUFFUCxJQUFJTyxFQUFFc0MsTUFBTSxLQUFLL0gsRUFBRXc3QixLQUFLN3NCLElBQUtrc0IsSUFBSUQsR0FBRzU2QixFQUFFd0YsRUFBRUMsR0FBR2tKLEVBQUVrTCxPQUFPN1osRUFBRUEsRUFBRTJPLEdBQUcsT0FBTzVELEVBQUUvSyxHQUFHLEtBQUt5TSxFQUFHek0sRUFBRSxDQUFDLElBQUkwTyxFQUFFakosRUFBRVAsSUFBSSxPQUFPTSxHQUFHLENBQUMsR0FBR0EsRUFBRU4sTUFBTXdKLEVBQUUsSUFBRyxJQUFJbEosRUFBRXFKLEtBQUtySixFQUFFeVMsVUFBVXNFLGdCQUFnQjlXLEVBQUU4VyxlQUFlL1csRUFBRXlTLFVBQVV5akIsaUJBQWlCajJCLEVBQUVpMkIsZUFBZSxDQUFDbjJCLEVBQUV2RixFQUFFd0YsRUFBRTZVLFVBQVM3VSxFQUFFSixFQUFFSSxFQUFFQyxFQUFFMkwsVUFBVSxLQUFNeUksT0FBTzdaLEVBQUVBLEVBQUV3RixFQUFFLE1BQU14RixFQUFPdUYsRUFBRXZGLEVBQUV3RixHQUFHLE1BQVd2RixFQUFFRCxFQUFFd0YsR0FBR0EsRUFBRUEsRUFBRTZVLFNBQVE3VSxFQUNwZm0yQixHQUFHbDJCLEVBQUV6RixFQUFFdzdCLEtBQUs3c0IsSUFBS2tMLE9BQU83WixFQUFFQSxFQUFFd0YsRUFBRSxPQUFPdUYsRUFBRS9LLEdBQUcsR0FBRyxpQkFBa0J5RixHQUFHLGlCQUFrQkEsRUFBRSxPQUFPQSxFQUFFLEdBQUdBLEVBQUUsT0FBT0QsR0FBRyxJQUFJQSxFQUFFcUosS0FBS3RKLEVBQUV2RixFQUFFd0YsRUFBRTZVLFVBQVM3VSxFQUFFSixFQUFFSSxFQUFFQyxJQUFLb1UsT0FBTzdaLEVBQUVBLEVBQUV3RixJQUFJRCxFQUFFdkYsRUFBRXdGLElBQUdBLEVBQUUrMUIsR0FBRzkxQixFQUFFekYsRUFBRXc3QixLQUFLN3NCLElBQUtrTCxPQUFPN1osRUFBRUEsRUFBRXdGLEdBQUd1RixFQUFFL0ssR0FBRyxHQUFHMjZCLEdBQUdsMUIsR0FBRyxPQUFPNHFCLEVBQUVyd0IsRUFBRXdGLEVBQUVDLEVBQUVrSixHQUFHLEdBQUdaLEVBQUd0SSxHQUFHLE9BQU82cUIsRUFBRXR3QixFQUFFd0YsRUFBRUMsRUFBRWtKLEdBQWMsR0FBWHVLLEdBQUc4aEIsR0FBR2g3QixFQUFFeUYsUUFBTSxJQUFxQkEsSUFBSWlKLEVBQUUsT0FBTzFPLEVBQUU2TyxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsTUFBTWpKLE1BQU1rRSxFQUFFLElBQUlpRixFQUFHL08sRUFBRW9ELE9BQU8sY0FBZSxPQUFPbUMsRUFBRXZGLEVBQUV3RixJQUFJLElBQUlzMkIsR0FBR2IsSUFBRyxHQUFJYyxHQUFHZCxJQUFHLEdBQUllLEdBQUcsR0FBR0MsR0FBR2xKLEdBQUdpSixJQUFJRSxHQUFHbkosR0FBR2lKLElBQUlHLEdBQUdwSixHQUFHaUosSUFDdGQsU0FBU0ksR0FBR3A4QixHQUFHLEdBQUdBLElBQUlnOEIsR0FBRyxNQUFNcDJCLE1BQU1rRSxFQUFFLE1BQU0sT0FBTzlKLEVBQUUsU0FBU3E4QixHQUFHcjhCLEVBQUVDLEdBQXlDLE9BQXRDZ3pCLEdBQUVrSixHQUFHbDhCLEdBQUdnekIsR0FBRWlKLEdBQUdsOEIsR0FBR2l6QixHQUFFZ0osR0FBR0QsSUFBSWg4QixFQUFFQyxFQUFFK1MsVUFBbUIsS0FBSyxFQUFFLEtBQUssR0FBRy9TLEdBQUdBLEVBQUVBLEVBQUVxOEIsaUJBQWlCcjhCLEVBQUVzUyxhQUFhSCxHQUFHLEtBQUssSUFBSSxNQUFNLFFBQWtFblMsRUFBRW1TLEdBQXJDblMsR0FBdkJELEVBQUUsSUFBSUEsRUFBRUMsRUFBRTBYLFdBQVcxWCxHQUFNc1MsY0FBYyxLQUFLdlMsRUFBRUEsRUFBRXU4QixTQUFrQnZKLEdBQUVpSixJQUFJaEosR0FBRWdKLEdBQUdoOEIsR0FBRyxTQUFTdThCLEtBQUt4SixHQUFFaUosSUFBSWpKLEdBQUVrSixJQUFJbEosR0FBRW1KLElBQUksU0FBU00sR0FBR3o4QixHQUFHbzhCLEdBQUdELEdBQUc3aEIsU0FBUyxJQUFJcmEsRUFBRW04QixHQUFHSCxHQUFHM2hCLFNBQWEvVSxFQUFFNk0sR0FBR25TLEVBQUVELEVBQUVvRCxNQUFNbkQsSUFBSXNGLElBQUkwdEIsR0FBRWlKLEdBQUdsOEIsR0FBR2l6QixHQUFFZ0osR0FBRzEyQixJQUFJLFNBQVNtM0IsR0FBRzE4QixHQUFHazhCLEdBQUc1aEIsVUFBVXRhLElBQUlnekIsR0FBRWlKLElBQUlqSixHQUFFa0osS0FBSyxJQUFJUyxHQUFFNUosR0FBRyxHQUM5YyxTQUFTNkosR0FBRzU4QixHQUFHLElBQUksSUFBSUMsRUFBRUQsRUFBRSxPQUFPQyxHQUFHLENBQUMsR0FBRyxLQUFLQSxFQUFFNE8sSUFBSSxDQUFDLElBQUl0SixFQUFFdEYsRUFBRStaLGNBQWMsR0FBRyxPQUFPelUsSUFBbUIsUUFBZkEsRUFBRUEsRUFBRTBVLGFBQXFCLE9BQU8xVSxFQUFFb2YsTUFBTSxPQUFPcGYsRUFBRW9mLE1BQU0sT0FBTzFrQixPQUFPLEdBQUcsS0FBS0EsRUFBRTRPLFVBQUssSUFBUzVPLEVBQUU0OEIsY0FBY0MsYUFBYSxHQUFHLElBQWEsR0FBUjc4QixFQUFFNlosT0FBVSxPQUFPN1osT0FBTyxHQUFHLE9BQU9BLEVBQUVtYSxNQUFNLENBQUNuYSxFQUFFbWEsTUFBTVAsT0FBTzVaLEVBQUVBLEVBQUVBLEVBQUVtYSxNQUFNLFNBQVMsR0FBR25hLElBQUlELEVBQUUsTUFBTSxLQUFLLE9BQU9DLEVBQUVvYSxTQUFTLENBQUMsR0FBRyxPQUFPcGEsRUFBRTRaLFFBQVE1WixFQUFFNFosU0FBUzdaLEVBQUUsT0FBTyxLQUFLQyxFQUFFQSxFQUFFNFosT0FBTzVaLEVBQUVvYSxRQUFRUixPQUFPNVosRUFBRTRaLE9BQU81WixFQUFFQSxFQUFFb2EsUUFBUSxPQUFPLEtBQUssSUFBSTBpQixHQUFHLEtBQUtDLEdBQUcsS0FBS0MsSUFBRyxFQUNwZCxTQUFTQyxHQUFHbDlCLEVBQUVDLEdBQUcsSUFBSXNGLEVBQUU0M0IsR0FBRyxFQUFFLEtBQUssS0FBSyxHQUFHNTNCLEVBQUUyRCxZQUFZLFVBQVUzRCxFQUFFbkMsS0FBSyxVQUFVbUMsRUFBRTBTLFVBQVVoWSxFQUFFc0YsRUFBRXNVLE9BQU83WixFQUFFdUYsRUFBRXVVLE1BQU0sRUFBRSxPQUFPOVosRUFBRWs3QixZQUFZbDdCLEVBQUVrN0IsV0FBV0MsV0FBVzUxQixFQUFFdkYsRUFBRWs3QixXQUFXMzFCLEdBQUd2RixFQUFFbzdCLFlBQVlwN0IsRUFBRWs3QixXQUFXMzFCLEVBQUUsU0FBUzYzQixHQUFHcDlCLEVBQUVDLEdBQUcsT0FBT0QsRUFBRTZPLEtBQUssS0FBSyxFQUFFLElBQUl0SixFQUFFdkYsRUFBRW9ELEtBQXlFLE9BQU8sUUFBM0VuRCxFQUFFLElBQUlBLEVBQUUrUyxVQUFVek4sRUFBRWlHLGdCQUFnQnZMLEVBQUVxUCxTQUFTOUQsY0FBYyxLQUFLdkwsS0FBbUJELEVBQUVpWSxVQUFVaFksR0FBRSxHQUFPLEtBQUssRUFBRSxPQUFvRCxRQUE3Q0EsRUFBRSxLQUFLRCxFQUFFcTlCLGNBQWMsSUFBSXA5QixFQUFFK1MsU0FBUyxLQUFLL1MsS0FBWUQsRUFBRWlZLFVBQVVoWSxHQUFFLEdBQU8sS0FBSyxHQUFZLFFBQVEsT0FBTSxHQUN2ZSxTQUFTcTlCLEdBQUd0OUIsR0FBRyxHQUFHaTlCLEdBQUcsQ0FBQyxJQUFJaDlCLEVBQUUrOEIsR0FBRyxHQUFHLzhCLEVBQUUsQ0FBQyxJQUFJc0YsRUFBRXRGLEVBQUUsSUFBSW05QixHQUFHcDlCLEVBQUVDLEdBQUcsQ0FBcUIsS0FBcEJBLEVBQUVveUIsR0FBRzlzQixFQUFFaW9CLGdCQUFxQjRQLEdBQUdwOUIsRUFBRUMsR0FBdUMsT0FBbkNELEVBQUU4WixPQUFlLEtBQVQ5WixFQUFFOFosTUFBWSxFQUFFbWpCLElBQUcsT0FBR0YsR0FBRy84QixHQUFTazlCLEdBQUdILEdBQUd4M0IsR0FBR3czQixHQUFHLzhCLEVBQUVnOUIsR0FBRzNLLEdBQUdweUIsRUFBRXdTLGlCQUFpQnpTLEVBQUU4WixPQUFlLEtBQVQ5WixFQUFFOFosTUFBWSxFQUFFbWpCLElBQUcsRUFBR0YsR0FBRy84QixHQUFHLFNBQVN1OUIsR0FBR3Y5QixHQUFHLElBQUlBLEVBQUVBLEVBQUU2WixPQUFPLE9BQU83WixHQUFHLElBQUlBLEVBQUU2TyxLQUFLLElBQUk3TyxFQUFFNk8sS0FBSyxLQUFLN08sRUFBRTZPLEtBQUs3TyxFQUFFQSxFQUFFNlosT0FBT2tqQixHQUFHLzhCLEVBQzVTLFNBQVN3OUIsR0FBR3g5QixHQUFHLEdBQUdBLElBQUkrOEIsR0FBRyxPQUFNLEVBQUcsSUFBSUUsR0FBRyxPQUFPTSxHQUFHdjlCLEdBQUdpOUIsSUFBRyxHQUFHLEVBQUcsSUFBSWg5QixFQUFFRCxFQUFFb0QsS0FBSyxHQUFHLElBQUlwRCxFQUFFNk8sS0FBSyxTQUFTNU8sR0FBRyxTQUFTQSxJQUFJNnhCLEdBQUc3eEIsRUFBRUQsRUFBRTY4QixlQUFlLElBQUk1OEIsRUFBRSs4QixHQUFHLzhCLEdBQUdpOUIsR0FBR2w5QixFQUFFQyxHQUFHQSxFQUFFb3lCLEdBQUdweUIsRUFBRXV0QixhQUFtQixHQUFOK1AsR0FBR3Y5QixHQUFNLEtBQUtBLEVBQUU2TyxJQUFJLENBQWdELEtBQTdCN08sRUFBRSxRQUFwQkEsRUFBRUEsRUFBRWdhLGVBQXlCaGEsRUFBRWlhLFdBQVcsTUFBVyxNQUFNclUsTUFBTWtFLEVBQUUsTUFBTTlKLEVBQUUsQ0FBaUIsSUFBaEJBLEVBQUVBLEVBQUV3dEIsWUFBZ0J2dEIsRUFBRSxFQUFFRCxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFZ1QsU0FBUyxDQUFDLElBQUl6TixFQUFFdkYsRUFBRTJrQixLQUFLLEdBQUcsT0FBT3BmLEVBQUUsQ0FBQyxHQUFHLElBQUl0RixFQUFFLENBQUMrOEIsR0FBRzNLLEdBQUdyeUIsRUFBRXd0QixhQUFhLE1BQU14dEIsRUFBRUMsUUFBUSxNQUFNc0YsR0FBRyxPQUFPQSxHQUFHLE9BQU9BLEdBQUd0RixJQUFJRCxFQUFFQSxFQUFFd3RCLFlBQVl3UCxHQUFHLFdBQVdBLEdBQUdELEdBQUcxSyxHQUFHcnlCLEVBQUVpWSxVQUFVdVYsYUFBYSxLQUFLLE9BQU0sRUFDdGYsU0FBU2lRLEtBQUtULEdBQUdELEdBQUcsS0FBS0UsSUFBRyxFQUFHLElBQUlTLEdBQUcsR0FBRyxTQUFTQyxLQUFLLElBQUksSUFBSTM5QixFQUFFLEVBQUVBLEVBQUUwOUIsR0FBR3o4QixPQUFPakIsSUFBSTA5QixHQUFHMTlCLEdBQUc0OUIsOEJBQThCLEtBQUtGLEdBQUd6OEIsT0FBTyxFQUFFLElBQUk0OEIsR0FBR3Z4QixFQUFHd3hCLHVCQUF1QkMsR0FBR3p4QixFQUFHOHBCLHdCQUF3QjRILEdBQUcsRUFBRUMsR0FBRSxLQUFLQyxHQUFFLEtBQUtDLEdBQUUsS0FBS0MsSUFBRyxFQUFHQyxJQUFHLEVBQUcsU0FBU0MsS0FBSyxNQUFNMTRCLE1BQU1rRSxFQUFFLE1BQU8sU0FBU3kwQixHQUFHditCLEVBQUVDLEdBQUcsR0FBRyxPQUFPQSxFQUFFLE9BQU0sRUFBRyxJQUFJLElBQUlzRixFQUFFLEVBQUVBLEVBQUV0RixFQUFFZ0IsUUFBUXNFLEVBQUV2RixFQUFFaUIsT0FBT3NFLElBQUksSUFBSTJuQixHQUFHbHRCLEVBQUV1RixHQUFHdEYsRUFBRXNGLElBQUksT0FBTSxFQUFHLE9BQU0sRUFDOVgsU0FBU2k1QixHQUFHeCtCLEVBQUVDLEVBQUVzRixFQUFFQyxFQUFFSixFQUFFSyxHQUF5SCxHQUF0SHU0QixHQUFHdjRCLEVBQUV3NEIsR0FBRWgrQixFQUFFQSxFQUFFK1osY0FBYyxLQUFLL1osRUFBRTAzQixZQUFZLEtBQUsxM0IsRUFBRWkzQixNQUFNLEVBQUUyRyxHQUFHdmpCLFFBQVEsT0FBT3RhLEdBQUcsT0FBT0EsRUFBRWdhLGNBQWN5a0IsR0FBR0MsR0FBRzErQixFQUFFdUYsRUFBRUMsRUFBRUosR0FBTWk1QixHQUFHLENBQUM1NEIsRUFBRSxFQUFFLEVBQUUsQ0FBTyxHQUFONDRCLElBQUcsSUFBUSxHQUFHNTRCLEdBQUcsTUFBTUcsTUFBTWtFLEVBQUUsTUFBTXJFLEdBQUcsRUFBRTA0QixHQUFFRCxHQUFFLEtBQUtqK0IsRUFBRTAzQixZQUFZLEtBQUtrRyxHQUFHdmpCLFFBQVFxa0IsR0FBRzMrQixFQUFFdUYsRUFBRUMsRUFBRUosU0FBU2k1QixJQUFrRSxHQUE5RFIsR0FBR3ZqQixRQUFRc2tCLEdBQUczK0IsRUFBRSxPQUFPaStCLElBQUcsT0FBT0EsR0FBRTNHLEtBQUt5RyxHQUFHLEVBQUVHLEdBQUVELEdBQUVELEdBQUUsS0FBS0csSUFBRyxFQUFNbitCLEVBQUUsTUFBTTJGLE1BQU1rRSxFQUFFLE1BQU0sT0FBTzlKLEVBQUUsU0FBUzYrQixLQUFLLElBQUk3K0IsRUFBRSxDQUFDZ2EsY0FBYyxLQUFLNGQsVUFBVSxLQUFLa0gsVUFBVSxLQUFLQyxNQUFNLEtBQUt4SCxLQUFLLE1BQThDLE9BQXhDLE9BQU80RyxHQUFFRixHQUFFamtCLGNBQWNta0IsR0FBRW4rQixFQUFFbStCLEdBQUVBLEdBQUU1RyxLQUFLdjNCLEVBQVNtK0IsR0FDL2UsU0FBU2EsS0FBSyxHQUFHLE9BQU9kLEdBQUUsQ0FBQyxJQUFJbCtCLEVBQUVpK0IsR0FBRXJrQixVQUFVNVosRUFBRSxPQUFPQSxFQUFFQSxFQUFFZ2EsY0FBYyxVQUFVaGEsRUFBRWsrQixHQUFFM0csS0FBSyxJQUFJdDNCLEVBQUUsT0FBT2srQixHQUFFRixHQUFFamtCLGNBQWNta0IsR0FBRTVHLEtBQUssR0FBRyxPQUFPdDNCLEVBQUVrK0IsR0FBRWwrQixFQUFFaStCLEdBQUVsK0IsTUFBTSxDQUFDLEdBQUcsT0FBT0EsRUFBRSxNQUFNNEYsTUFBTWtFLEVBQUUsTUFBVTlKLEVBQUUsQ0FBQ2dhLGVBQVBra0IsR0FBRWwrQixHQUFxQmdhLGNBQWM0ZCxVQUFVc0csR0FBRXRHLFVBQVVrSCxVQUFVWixHQUFFWSxVQUFVQyxNQUFNYixHQUFFYSxNQUFNeEgsS0FBSyxNQUFNLE9BQU80RyxHQUFFRixHQUFFamtCLGNBQWNta0IsR0FBRW4rQixFQUFFbStCLEdBQUVBLEdBQUU1RyxLQUFLdjNCLEVBQUUsT0FBT20rQixHQUFFLFNBQVNjLEdBQUdqL0IsRUFBRUMsR0FBRyxNQUFNLG1CQUFvQkEsRUFBRUEsRUFBRUQsR0FBR0MsRUFDdlksU0FBU2kvQixHQUFHbC9CLEdBQUcsSUFBSUMsRUFBRSsrQixLQUFLejVCLEVBQUV0RixFQUFFOCtCLE1BQU0sR0FBRyxPQUFPeDVCLEVBQUUsTUFBTUssTUFBTWtFLEVBQUUsTUFBTXZFLEVBQUU0NUIsb0JBQW9Cbi9CLEVBQUUsSUFBSXdGLEVBQUUwNEIsR0FBRTk0QixFQUFFSSxFQUFFczVCLFVBQVVyNUIsRUFBRUYsRUFBRXl5QixRQUFRLEdBQUcsT0FBT3Z5QixFQUFFLENBQUMsR0FBRyxPQUFPTCxFQUFFLENBQUMsSUFBSTJGLEVBQUUzRixFQUFFbXlCLEtBQUtueUIsRUFBRW15QixLQUFLOXhCLEVBQUU4eEIsS0FBSzl4QixFQUFFOHhCLEtBQUt4c0IsRUFBRXZGLEVBQUVzNUIsVUFBVTE1QixFQUFFSyxFQUFFRixFQUFFeXlCLFFBQVEsS0FBSyxHQUFHLE9BQU81eUIsRUFBRSxDQUFDQSxFQUFFQSxFQUFFbXlCLEtBQUsveEIsRUFBRUEsRUFBRW95QixVQUFVLElBQUlqcEIsRUFBRTVELEVBQUV0RixFQUFFLEtBQUtpSixFQUFFdEosRUFBRSxFQUFFLENBQUMsSUFBSThULEVBQUV4SyxFQUFFMnBCLEtBQUssSUFBSTJGLEdBQUc5a0IsS0FBS0EsRUFBRSxPQUFPdkssSUFBSUEsRUFBRUEsRUFBRTRvQixLQUFLLENBQUNjLEtBQUssRUFBRStHLE9BQU8xd0IsRUFBRTB3QixPQUFPQyxhQUFhM3dCLEVBQUUyd0IsYUFBYUMsV0FBVzV3QixFQUFFNHdCLFdBQVcvSCxLQUFLLE9BQU8veEIsRUFBRWtKLEVBQUUyd0IsZUFBZXIvQixFQUFFME8sRUFBRTR3QixXQUFXdC9CLEVBQUV3RixFQUFFa0osRUFBRTB3QixZQUFZLENBQUMsSUFBSXQ0QixFQUFFLENBQUN1eEIsS0FBS25mLEVBQUVrbUIsT0FBTzF3QixFQUFFMHdCLE9BQU9DLGFBQWEzd0IsRUFBRTJ3QixhQUM5ZkMsV0FBVzV3QixFQUFFNHdCLFdBQVcvSCxLQUFLLE1BQU0sT0FBTzVvQixHQUFHNUQsRUFBRTRELEVBQUU3SCxFQUFFckIsRUFBRUQsR0FBR21KLEVBQUVBLEVBQUU0b0IsS0FBS3p3QixFQUFFbTNCLEdBQUUvRyxPQUFPaGUsRUFBRTRmLElBQUk1ZixFQUFFeEssRUFBRUEsRUFBRTZvQixXQUFXLE9BQU83b0IsR0FBR0EsSUFBSXRKLEdBQUcsT0FBT3VKLEVBQUVsSixFQUFFRCxFQUFFbUosRUFBRTRvQixLQUFLeHNCLEVBQUVtaUIsR0FBRzFuQixFQUFFdkYsRUFBRStaLGlCQUFpQm1kLElBQUcsR0FBSWwzQixFQUFFK1osY0FBY3hVLEVBQUV2RixFQUFFMjNCLFVBQVVueUIsRUFBRXhGLEVBQUU2K0IsVUFBVW53QixFQUFFcEosRUFBRWc2QixrQkFBa0IvNUIsRUFBRSxNQUFNLENBQUN2RixFQUFFK1osY0FBY3pVLEVBQUVpNkIsVUFDdFEsU0FBU0MsR0FBR3ovQixHQUFHLElBQUlDLEVBQUUrK0IsS0FBS3o1QixFQUFFdEYsRUFBRTgrQixNQUFNLEdBQUcsT0FBT3g1QixFQUFFLE1BQU1LLE1BQU1rRSxFQUFFLE1BQU12RSxFQUFFNDVCLG9CQUFvQm4vQixFQUFFLElBQUl3RixFQUFFRCxFQUFFaTZCLFNBQVNwNkIsRUFBRUcsRUFBRXl5QixRQUFRdnlCLEVBQUV4RixFQUFFK1osY0FBYyxHQUFHLE9BQU81VSxFQUFFLENBQUNHLEVBQUV5eUIsUUFBUSxLQUFLLElBQUlqdEIsRUFBRTNGLEVBQUVBLEVBQUVteUIsS0FBSyxHQUFHOXhCLEVBQUV6RixFQUFFeUYsRUFBRXNGLEVBQUVxMEIsUUFBUXIwQixFQUFFQSxFQUFFd3NCLFdBQVd4c0IsSUFBSTNGLEdBQUc4bkIsR0FBR3puQixFQUFFeEYsRUFBRStaLGlCQUFpQm1kLElBQUcsR0FBSWwzQixFQUFFK1osY0FBY3ZVLEVBQUUsT0FBT3hGLEVBQUU2K0IsWUFBWTcrQixFQUFFMjNCLFVBQVVueUIsR0FBR0YsRUFBRWc2QixrQkFBa0I5NUIsRUFBRSxNQUFNLENBQUNBLEVBQUVELEdBQ25WLFNBQVNrNkIsR0FBRzEvQixFQUFFQyxFQUFFc0YsR0FBRyxJQUFJQyxFQUFFdkYsRUFBRTAvQixZQUFZbjZCLEVBQUVBLEVBQUV2RixFQUFFMi9CLFNBQVMsSUFBSXg2QixFQUFFbkYsRUFBRTI5Qiw4QkFBeUksR0FBeEcsT0FBT3g0QixFQUFFcEYsRUFBRW9GLElBQUlJLEdBQVV4RixFQUFFQSxFQUFFNi9CLGtCQUFpQjcvQixHQUFHZytCLEdBQUdoK0IsS0FBS0EsS0FBRUMsRUFBRTI5Qiw4QkFBOEJwNEIsRUFBRWs0QixHQUFHeDhCLEtBQUtqQixLQUFNRCxFQUFFLE9BQU91RixFQUFFdEYsRUFBRTIvQixTQUFvQixNQUFYbEMsR0FBR3g4QixLQUFLakIsR0FBUzJGLE1BQU1rRSxFQUFFLE1BQ3pQLFNBQVNnMkIsR0FBRzkvQixFQUFFQyxFQUFFc0YsRUFBRUMsR0FBRyxJQUFJSixFQUFFMjZCLEdBQUUsR0FBRyxPQUFPMzZCLEVBQUUsTUFBTVEsTUFBTWtFLEVBQUUsTUFBTSxJQUFJckUsRUFBRXhGLEVBQUUwL0IsWUFBWTUwQixFQUFFdEYsRUFBRXhGLEVBQUUyL0IsU0FBU2p4QixFQUFFa3ZCLEdBQUd2akIsUUFBUTVMLEVBQUVDLEVBQUVxeEIsVUFBUyxXQUFXLE9BQU9OLEdBQUd0NkIsRUFBRW5GLEVBQUVzRixNQUFLMlQsRUFBRXhLLEVBQUUsR0FBRzVILEVBQUU0SCxFQUFFLEdBQUdBLEVBQUV5dkIsR0FBRSxJQUFJeEYsRUFBRTM0QixFQUFFZ2EsY0FBYzRlLEVBQUVELEVBQUVPLEtBQUtMLEVBQUVELEVBQUVxSCxZQUFZNVAsRUFBRXNJLEVBQUU5M0IsT0FBTzgzQixFQUFFQSxFQUFFdUgsVUFBVSxJQUFJNVAsRUFBRTJOLEdBQ3VPLE9BRHJPaitCLEVBQUVnYSxjQUFjLENBQUNrZixLQUFLTixFQUFFLzNCLE9BQU9aLEVBQUVpZ0MsVUFBVTE2QixHQUFHbUosRUFBRXd4QixXQUFVLFdBQVd2SCxFQUFFcUgsWUFBWTE2QixFQUFFcXpCLEVBQUV3SCxZQUFZbG5CLEVBQUUsSUFBSWxaLEVBQUV5RixFQUFFeEYsRUFBRTIvQixTQUFTLElBQUkxUyxHQUFHbmlCLEVBQUUvSyxHQUFHLENBQUNBLEVBQUV1RixFQUFFdEYsRUFBRTIvQixTQUFTMVMsR0FBR3BtQixFQUFFOUcsS0FBS2taLEVBQUVsWixHQUFHQSxFQUFFeTVCLEdBQUduSixHQUFHbHJCLEVBQUV5NkIsa0JBQWtCNy9CLEVBQUVvRixFQUFFcVosY0FBY3plLEVBQUVvRixFQUFFeTZCLGlCQUFpQno2QixFQUFFMFosZ0JBQWdCOWUsRUFBRSxJQUFJLElBQUl3RixFQUM1ZkosRUFBRTJaLGNBQWNwUSxFQUFFM08sRUFBRSxFQUFFMk8sR0FBRyxDQUFDLElBQUlELEVBQUUsR0FBR21RLEdBQUdsUSxHQUFHZ2lCLEVBQUUsR0FBR2ppQixFQUFFbEosRUFBRWtKLElBQUkxTyxFQUFFMk8sSUFBSWdpQixNQUFLLENBQUNwckIsRUFBRXRGLEVBQUV1RixJQUFJbUosRUFBRXd4QixXQUFVLFdBQVcsT0FBTzM2QixFQUFFdkYsRUFBRTIvQixTQUFRLFdBQVcsSUFBSTUvQixFQUFFNDRCLEVBQUVxSCxZQUFZMTZCLEVBQUVxekIsRUFBRXdILFlBQVksSUFBSTc2QixFQUFFdkYsRUFBRUMsRUFBRTIvQixVQUFVLElBQUlwNkIsRUFBRWkwQixHQUFHbkosR0FBR2xyQixFQUFFeTZCLGtCQUFrQnI2QixFQUFFSixFQUFFcVosYUFBYSxNQUFNZ1MsR0FBR2xyQixHQUFFLFdBQVcsTUFBTWtyQixXQUFTLENBQUN4d0IsRUFBRXVGLElBQUkwbkIsR0FBRzJMLEVBQUV0ekIsSUFBSTJuQixHQUFHbUQsRUFBRXB3QixJQUFJaXRCLEdBQUd5TCxFQUFFbnpCLE1BQUt4RixFQUFFLENBQUNnNEIsUUFBUSxLQUFLd0gsU0FBUyxLQUFLTCxvQkFBb0JGLEdBQUdNLGtCQUFrQno0QixJQUFLMDRCLFNBQVN0bUIsRUFBRW1uQixHQUFHbGdCLEtBQUssS0FBSzhkLEdBQUVqK0IsR0FBRzBPLEVBQUVxd0IsTUFBTS8rQixFQUFFME8sRUFBRW93QixVQUFVLEtBQUtoNEIsRUFBRTQ0QixHQUFHdDZCLEVBQUVuRixFQUFFc0YsR0FBR21KLEVBQUVzTCxjQUFjdEwsRUFBRWtwQixVQUFVOXdCLEdBQVVBLEVBQ3RlLFNBQVN3NUIsR0FBR3RnQyxFQUFFQyxFQUFFc0YsR0FBYyxPQUFPdTZCLEdBQVpkLEtBQWlCaC9CLEVBQUVDLEVBQUVzRixHQUFHLFNBQVNnN0IsR0FBR3ZnQyxHQUFHLElBQUlDLEVBQUU0K0IsS0FBbUwsTUFBOUssbUJBQW9CNytCLElBQUlBLEVBQUVBLEtBQUtDLEVBQUUrWixjQUFjL1osRUFBRTIzQixVQUFVNTNCLEVBQW9GQSxHQUFsRkEsRUFBRUMsRUFBRTgrQixNQUFNLENBQUMvRyxRQUFRLEtBQUt3SCxTQUFTLEtBQUtMLG9CQUFvQkYsR0FBR00sa0JBQWtCdi9CLElBQU93L0IsU0FBU2EsR0FBR2xnQixLQUFLLEtBQUs4ZCxHQUFFaitCLEdBQVMsQ0FBQ0MsRUFBRStaLGNBQWNoYSxHQUNoUixTQUFTd2dDLEdBQUd4Z0MsRUFBRUMsRUFBRXNGLEVBQUVDLEdBQWtPLE9BQS9OeEYsRUFBRSxDQUFDNk8sSUFBSTdPLEVBQUV5Z0MsT0FBT3hnQyxFQUFFeWdDLFFBQVFuN0IsRUFBRW83QixLQUFLbjdCLEVBQUUreEIsS0FBSyxNQUFzQixRQUFoQnQzQixFQUFFZytCLEdBQUV0RyxjQUFzQjEzQixFQUFFLENBQUNpN0IsV0FBVyxNQUFNK0MsR0FBRXRHLFlBQVkxM0IsRUFBRUEsRUFBRWk3QixXQUFXbDdCLEVBQUV1M0IsS0FBS3YzQixHQUFtQixRQUFmdUYsRUFBRXRGLEVBQUVpN0IsWUFBb0JqN0IsRUFBRWk3QixXQUFXbDdCLEVBQUV1M0IsS0FBS3YzQixHQUFHd0YsRUFBRUQsRUFBRWd5QixLQUFLaHlCLEVBQUVneUIsS0FBS3YzQixFQUFFQSxFQUFFdTNCLEtBQUsveEIsRUFBRXZGLEVBQUVpN0IsV0FBV2w3QixHQUFXQSxFQUFFLFNBQVM0Z0MsR0FBRzVnQyxHQUE0QixPQUFkQSxFQUFFLENBQUNzYSxRQUFRdGEsR0FBaEI2K0IsS0FBNEI3a0IsY0FBY2hhLEVBQUUsU0FBUzZnQyxLQUFLLE9BQU83QixLQUFLaGxCLGNBQWMsU0FBUzhtQixHQUFHOWdDLEVBQUVDLEVBQUVzRixFQUFFQyxHQUFHLElBQUlKLEVBQUV5NUIsS0FBS1osR0FBRW5rQixPQUFPOVosRUFBRW9GLEVBQUU0VSxjQUFjd21CLEdBQUcsRUFBRXZnQyxFQUFFc0YsT0FBRSxPQUFPLElBQVNDLEVBQUUsS0FBS0EsR0FDamMsU0FBU3U3QixHQUFHL2dDLEVBQUVDLEVBQUVzRixFQUFFQyxHQUFHLElBQUlKLEVBQUU0NUIsS0FBS3g1QixPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJQyxPQUFFLEVBQU8sR0FBRyxPQUFPeTRCLEdBQUUsQ0FBQyxJQUFJbnpCLEVBQUVtekIsR0FBRWxrQixjQUEwQixHQUFadlUsRUFBRXNGLEVBQUUyMUIsUUFBVyxPQUFPbDdCLEdBQUcrNEIsR0FBRy80QixFQUFFdUYsRUFBRTQxQixNQUFtQixZQUFaSCxHQUFHdmdDLEVBQUVzRixFQUFFRSxFQUFFRCxHQUFXeTRCLEdBQUVua0IsT0FBTzlaLEVBQUVvRixFQUFFNFUsY0FBY3dtQixHQUFHLEVBQUV2Z0MsRUFBRXNGLEVBQUVFLEVBQUVELEdBQUcsU0FBU3c3QixHQUFHaGhDLEVBQUVDLEdBQUcsT0FBTzZnQyxHQUFHLElBQUksRUFBRTlnQyxFQUFFQyxHQUFHLFNBQVNnaEMsR0FBR2poQyxFQUFFQyxHQUFHLE9BQU84Z0MsR0FBRyxJQUFJLEVBQUUvZ0MsRUFBRUMsR0FBRyxTQUFTaWhDLEdBQUdsaEMsRUFBRUMsR0FBRyxPQUFPOGdDLEdBQUcsRUFBRSxFQUFFL2dDLEVBQUVDLEdBQUcsU0FBU2toQyxHQUFHbmhDLEVBQUVDLEdBQUcsTUFBRyxtQkFBb0JBLEdBQVNELEVBQUVBLElBQUlDLEVBQUVELEdBQUcsV0FBV0MsRUFBRSxRQUFVLE1BQU9BLEdBQXFCRCxFQUFFQSxJQUFJQyxFQUFFcWEsUUFBUXRhLEVBQUUsV0FBV0MsRUFBRXFhLFFBQVEsWUFBdEUsRUFDeFksU0FBUzhtQixHQUFHcGhDLEVBQUVDLEVBQUVzRixHQUE2QyxPQUExQ0EsRUFBRSxNQUFPQSxFQUFjQSxFQUFFUixPQUFPLENBQUMvRSxJQUFJLEtBQVkrZ0MsR0FBRyxFQUFFLEVBQUVJLEdBQUdoaEIsS0FBSyxLQUFLbGdCLEVBQUVELEdBQUd1RixHQUFHLFNBQVM4N0IsTUFBTSxTQUFTQyxHQUFHdGhDLEVBQUVDLEdBQUcsSUFBSXNGLEVBQUV5NUIsS0FBSy8rQixPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJdUYsRUFBRUQsRUFBRXlVLGNBQWMsT0FBRyxPQUFPeFUsR0FBRyxPQUFPdkYsR0FBR3MrQixHQUFHdCtCLEVBQUV1RixFQUFFLElBQVdBLEVBQUUsSUFBR0QsRUFBRXlVLGNBQWMsQ0FBQ2hhLEVBQUVDLEdBQVVELEdBQUUsU0FBU3VoQyxHQUFHdmhDLEVBQUVDLEdBQUcsSUFBSXNGLEVBQUV5NUIsS0FBSy8rQixPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJdUYsRUFBRUQsRUFBRXlVLGNBQWMsT0FBRyxPQUFPeFUsR0FBRyxPQUFPdkYsR0FBR3MrQixHQUFHdCtCLEVBQUV1RixFQUFFLElBQVdBLEVBQUUsSUFBR3hGLEVBQUVBLElBQUl1RixFQUFFeVUsY0FBYyxDQUFDaGEsRUFBRUMsR0FBVUQsR0FDelosU0FBU3doQyxHQUFHeGhDLEVBQUVDLEdBQUcsSUFBSXNGLEVBQUVzd0IsS0FBS0UsR0FBRyxHQUFHeHdCLEVBQUUsR0FBR0EsR0FBRSxXQUFXdkYsR0FBRSxNQUFNKzFCLEdBQUcsR0FBR3h3QixFQUFFLEdBQUdBLEdBQUUsV0FBVyxJQUFJQSxFQUFFdzRCLEdBQUdwZ0IsV0FBV29nQixHQUFHcGdCLFdBQVcsRUFBRSxJQUFJM2QsR0FBRSxHQUFJQyxJQUFJLFFBQVE4OUIsR0FBR3BnQixXQUFXcFksTUFDNUosU0FBUzg2QixHQUFHcmdDLEVBQUVDLEVBQUVzRixHQUFHLElBQUlDLEVBQUVnMEIsS0FBS3AwQixFQUFFcTBCLEdBQUd6NUIsR0FBR3lGLEVBQUUsQ0FBQzR5QixLQUFLanpCLEVBQUVnNkIsT0FBTzc1QixFQUFFODVCLGFBQWEsS0FBS0MsV0FBVyxLQUFLL0gsS0FBSyxNQUFNeHNCLEVBQUU5SyxFQUFFKzNCLFFBQTZFLEdBQXJFLE9BQU9qdEIsRUFBRXRGLEVBQUU4eEIsS0FBSzl4QixHQUFHQSxFQUFFOHhCLEtBQUt4c0IsRUFBRXdzQixLQUFLeHNCLEVBQUV3c0IsS0FBSzl4QixHQUFHeEYsRUFBRSszQixRQUFRdnlCLEVBQUVzRixFQUFFL0ssRUFBRTRaLFVBQWE1WixJQUFJaStCLElBQUcsT0FBT2x6QixHQUFHQSxJQUFJa3pCLEdBQUVJLEdBQUdELElBQUcsTUFBTyxDQUFDLEdBQUcsSUFBSXArQixFQUFFazNCLFFBQVEsT0FBT25zQixHQUFHLElBQUlBLEVBQUVtc0IsUUFBaUMsUUFBeEJuc0IsRUFBRTlLLEVBQUVrL0IscUJBQThCLElBQUksSUFBSXh3QixFQUFFMU8sRUFBRXMvQixrQkFBa0I3d0IsRUFBRTNELEVBQUU0RCxFQUFFcEosR0FBbUMsR0FBaENFLEVBQUU0NUIsYUFBYXQwQixFQUFFdEYsRUFBRTY1QixXQUFXNXdCLEVBQUt3ZSxHQUFHeGUsRUFBRUMsR0FBRyxPQUFPLE1BQU11SyxJQUFhd2dCLEdBQUcxNUIsRUFBRW9GLEVBQUVJLElBQzlaLElBQUlvNUIsR0FBRyxDQUFDNkMsWUFBWXJLLEdBQUdzSyxZQUFZcEQsR0FBR3FELFdBQVdyRCxHQUFHNkIsVUFBVTdCLEdBQUdzRCxvQkFBb0J0RCxHQUFHdUQsZ0JBQWdCdkQsR0FBR3dELFFBQVF4RCxHQUFHeUQsV0FBV3pELEdBQUcwRCxPQUFPMUQsR0FBRzBCLFNBQVMxQixHQUFHMkQsY0FBYzNELEdBQUc0RCxpQkFBaUI1RCxHQUFHNkQsY0FBYzdELEdBQUc4RCxpQkFBaUI5RCxHQUFHK0Qsb0JBQW9CL0QsR0FBR2dFLDBCQUF5QixHQUFJN0QsR0FBRyxDQUFDZ0QsWUFBWXJLLEdBQUdzSyxZQUFZLFNBQVMxaEMsRUFBRUMsR0FBNEMsT0FBekM0K0IsS0FBSzdrQixjQUFjLENBQUNoYSxPQUFFLElBQVNDLEVBQUUsS0FBS0EsR0FBVUQsR0FBRzJoQyxXQUFXdkssR0FBRytJLFVBQVVhLEdBQUdZLG9CQUFvQixTQUFTNWhDLEVBQUVDLEVBQUVzRixHQUE2QyxPQUExQ0EsRUFBRSxNQUFPQSxFQUFjQSxFQUFFUixPQUFPLENBQUMvRSxJQUFJLEtBQVk4Z0MsR0FBRyxFQUFFLEVBQUVLLEdBQUdoaEIsS0FBSyxLQUN2ZmxnQixFQUFFRCxHQUFHdUYsSUFBSXM4QixnQkFBZ0IsU0FBUzdoQyxFQUFFQyxHQUFHLE9BQU82Z0MsR0FBRyxFQUFFLEVBQUU5Z0MsRUFBRUMsSUFBSTZoQyxRQUFRLFNBQVM5aEMsRUFBRUMsR0FBRyxJQUFJc0YsRUFBRXM1QixLQUFxRCxPQUFoRDUrQixPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRUQsRUFBRUEsSUFBSXVGLEVBQUV5VSxjQUFjLENBQUNoYSxFQUFFQyxHQUFVRCxHQUFHK2hDLFdBQVcsU0FBUy9oQyxFQUFFQyxFQUFFc0YsR0FBRyxJQUFJQyxFQUFFcTVCLEtBQXVLLE9BQWxLNStCLE9BQUUsSUFBU3NGLEVBQUVBLEVBQUV0RixHQUFHQSxFQUFFdUYsRUFBRXdVLGNBQWN4VSxFQUFFb3lCLFVBQVUzM0IsRUFBbUZELEdBQWpGQSxFQUFFd0YsRUFBRXU1QixNQUFNLENBQUMvRyxRQUFRLEtBQUt3SCxTQUFTLEtBQUtMLG9CQUFvQm4vQixFQUFFdS9CLGtCQUFrQnQvQixJQUFPdS9CLFNBQVNhLEdBQUdsZ0IsS0FBSyxLQUFLOGQsR0FBRWorQixHQUFTLENBQUN3RixFQUFFd1UsY0FBY2hhLElBQUlnaUMsT0FBT3BCLEdBQUdaLFNBQVNPLEdBQUcwQixjQUFjWixHQUFHYSxpQkFBaUIsU0FBU2xpQyxHQUFHLElBQUlDLEVBQUVzZ0MsR0FBR3ZnQyxHQUFHdUYsRUFBRXRGLEVBQUUsR0FBR3VGLEVBQUV2RixFQUFFLEdBQzVaLE9BRCtaK2dDLElBQUcsV0FBVyxJQUFJL2dDLEVBQUU4OUIsR0FBR3BnQixXQUM5ZW9nQixHQUFHcGdCLFdBQVcsRUFBRSxJQUFJblksRUFBRXhGLEdBQUcsUUFBUSs5QixHQUFHcGdCLFdBQVcxZCxLQUFJLENBQUNELElBQVd1RixHQUFHNDhCLGNBQWMsV0FBVyxJQUFJbmlDLEVBQUV1Z0MsSUFBRyxHQUFJdGdDLEVBQUVELEVBQUUsR0FBOEIsT0FBTjRnQyxHQUFyQjVnQyxFQUFFd2hDLEdBQUdyaEIsS0FBSyxLQUFLbmdCLEVBQUUsS0FBZ0IsQ0FBQ0EsRUFBRUMsSUFBSW1pQyxpQkFBaUIsU0FBU3BpQyxFQUFFQyxFQUFFc0YsR0FBRyxJQUFJQyxFQUFFcTVCLEtBQWtGLE9BQTdFcjVCLEVBQUV3VSxjQUFjLENBQUNrZixLQUFLLENBQUMrRyxZQUFZaGdDLEVBQUVtZ0MsWUFBWSxNQUFNdi9CLE9BQU9iLEVBQUVrZ0MsVUFBVTM2QixHQUFVdTZCLEdBQUd0NkIsRUFBRXhGLEVBQUVDLEVBQUVzRixJQUFJODhCLG9CQUFvQixXQUFXLEdBQUdwRixHQUFHLENBQUMsSUFBSWo5QixHQUFFLEVBQUdDLEVBekRsRCxTQUFZRCxHQUFHLE1BQU0sQ0FBQ2dQLFNBQVMzQixFQUFHOU0sU0FBU1AsRUFBRXNCLFFBQVF0QixHQXlERHVpQyxFQUFHLFdBQWlELE1BQXRDdmlDLElBQUlBLEdBQUUsRUFBR3VGLEVBQUUsTUFBTWl0QixNQUFNanlCLFNBQVMsTUFBWXFGLE1BQU1rRSxFQUFFLFNBQVN2RSxFQUFFZzdCLEdBQUd0Z0MsR0FBRyxHQUMxWixPQUQ2WixJQUFZLEVBQVBnK0IsR0FBRXpDLFFBQVV5QyxHQUFFbmtCLE9BQU8sSUFBSTBtQixHQUFHLEdBQUUsV0FBV2o3QixFQUFFLE1BQU1pdEIsTUFBTWp5QixTQUFTLFlBQ2hmLEVBQU8sT0FBY04sRUFBbUMsT0FBTnNnQyxHQUEzQnRnQyxFQUFFLE1BQU11eUIsTUFBTWp5QixTQUFTLEtBQWlCTixHQUFHcWlDLDBCQUF5QixHQUFJNUQsR0FBRyxDQUFDK0MsWUFBWXJLLEdBQUdzSyxZQUFZSixHQUFHSyxXQUFXdkssR0FBRytJLFVBQVVjLEdBQUdXLG9CQUFvQlIsR0FBR1MsZ0JBQWdCWCxHQUFHWSxRQUFRUCxHQUFHUSxXQUFXN0MsR0FBRzhDLE9BQU9uQixHQUFHYixTQUFTLFdBQVcsT0FBT2QsR0FBR0QsS0FBS2dELGNBQWNaLEdBQUdhLGlCQUFpQixTQUFTbGlDLEdBQUcsSUFBSUMsRUFBRWkvQixHQUFHRCxJQUFJMTVCLEVBQUV0RixFQUFFLEdBQUd1RixFQUFFdkYsRUFBRSxHQUE2RixPQUExRmdoQyxJQUFHLFdBQVcsSUFBSWhoQyxFQUFFODlCLEdBQUdwZ0IsV0FBV29nQixHQUFHcGdCLFdBQVcsRUFBRSxJQUFJblksRUFBRXhGLEdBQUcsUUFBUSs5QixHQUFHcGdCLFdBQVcxZCxLQUFJLENBQUNELElBQVd1RixHQUFHNDhCLGNBQWMsV0FBVyxJQUFJbmlDLEVBQUVrL0IsR0FBR0QsSUFBSSxHQUFHLE1BQU0sQ0FBQzRCLEtBQUt2bUIsUUFDOWV0YSxJQUFJb2lDLGlCQUFpQjlCLEdBQUcrQixvQkFBb0IsV0FBVyxPQUFPbkQsR0FBR0QsSUFBSSxJQUFJcUQsMEJBQXlCLEdBQUkzRCxHQUFHLENBQUM4QyxZQUFZckssR0FBR3NLLFlBQVlKLEdBQUdLLFdBQVd2SyxHQUFHK0ksVUFBVWMsR0FBR1csb0JBQW9CUixHQUFHUyxnQkFBZ0JYLEdBQUdZLFFBQVFQLEdBQUdRLFdBQVd0QyxHQUFHdUMsT0FBT25CLEdBQUdiLFNBQVMsV0FBVyxPQUFPUCxHQUFHUixLQUFLZ0QsY0FBY1osR0FBR2EsaUJBQWlCLFNBQVNsaUMsR0FBRyxJQUFJQyxFQUFFdy9CLEdBQUdSLElBQUkxNUIsRUFBRXRGLEVBQUUsR0FBR3VGLEVBQUV2RixFQUFFLEdBQTZGLE9BQTFGZ2hDLElBQUcsV0FBVyxJQUFJaGhDLEVBQUU4OUIsR0FBR3BnQixXQUFXb2dCLEdBQUdwZ0IsV0FBVyxFQUFFLElBQUluWSxFQUFFeEYsR0FBRyxRQUFRKzlCLEdBQUdwZ0IsV0FBVzFkLEtBQUksQ0FBQ0QsSUFBV3VGLEdBQUc0OEIsY0FBYyxXQUFXLElBQUluaUMsRUFBRXkvQixHQUFHUixJQUFJLEdBQUcsTUFBTSxDQUFDNEIsS0FBS3ZtQixRQUNyZnRhLElBQUlvaUMsaUJBQWlCOUIsR0FBRytCLG9CQUFvQixXQUFXLE9BQU81QyxHQUFHUixJQUFJLElBQUlxRCwwQkFBeUIsR0FBSUUsR0FBR2wyQixFQUFHbTJCLGtCQUFrQnRMLElBQUcsRUFBRyxTQUFTdUwsR0FBRzFpQyxFQUFFQyxFQUFFc0YsRUFBRUMsR0FBR3ZGLEVBQUVtYSxNQUFNLE9BQU9wYSxFQUFFKzdCLEdBQUc5N0IsRUFBRSxLQUFLc0YsRUFBRUMsR0FBR3MyQixHQUFHNzdCLEVBQUVELEVBQUVvYSxNQUFNN1UsRUFBRUMsR0FBRyxTQUFTbTlCLEdBQUczaUMsRUFBRUMsRUFBRXNGLEVBQUVDLEVBQUVKLEdBQUdHLEVBQUVBLEVBQUVyQixPQUFPLElBQUl1QixFQUFFeEYsRUFBRTQ2QixJQUE4QixPQUExQjlELEdBQUc5MkIsRUFBRW1GLEdBQUdJLEVBQUVnNUIsR0FBR3grQixFQUFFQyxFQUFFc0YsRUFBRUMsRUFBRUMsRUFBRUwsR0FBTSxPQUFPcEYsR0FBSW0zQixJQUEwRWwzQixFQUFFNlosT0FBTyxFQUFFNG9CLEdBQUcxaUMsRUFBRUMsRUFBRXVGLEVBQUVKLEdBQVVuRixFQUFFbWEsUUFBaEduYSxFQUFFMDNCLFlBQVkzM0IsRUFBRTIzQixZQUFZMTNCLEVBQUU2WixRQUFRLElBQUk5WixFQUFFazNCLFFBQVE5eEIsRUFBRXc5QixHQUFHNWlDLEVBQUVDLEVBQUVtRixJQUN4VyxTQUFTeTlCLEdBQUc3aUMsRUFBRUMsRUFBRXNGLEVBQUVDLEVBQUVKLEVBQUVLLEdBQUcsR0FBRyxPQUFPekYsRUFBRSxDQUFDLElBQUkrSyxFQUFFeEYsRUFBRW5DLEtBQUssTUFBRyxtQkFBb0IySCxHQUFJKzNCLEdBQUcvM0IsU0FBSSxJQUFTQSxFQUFFbEksY0FBYyxPQUFPMEMsRUFBRTNCLGNBQVMsSUFBUzJCLEVBQUUxQyxlQUFzRDdDLEVBQUV5N0IsR0FBR2wyQixFQUFFbkMsS0FBSyxLQUFLb0MsRUFBRXZGLEVBQUVBLEVBQUV1N0IsS0FBSy8xQixJQUFLbzFCLElBQUk1NkIsRUFBRTQ2QixJQUFJNzZCLEVBQUU2WixPQUFPNVosRUFBU0EsRUFBRW1hLE1BQU1wYSxJQUF2R0MsRUFBRTRPLElBQUksR0FBRzVPLEVBQUVtRCxLQUFLMkgsRUFBRWc0QixHQUFHL2lDLEVBQUVDLEVBQUU4SyxFQUFFdkYsRUFBRUosRUFBRUssSUFBb0YsT0FBVnNGLEVBQUUvSyxFQUFFb2EsTUFBUyxJQUFLaFYsRUFBRUssS0FBS0wsRUFBRTJGLEVBQUU4eEIsZUFBMEJ0M0IsRUFBRSxRQUFkQSxFQUFFQSxFQUFFM0IsU0FBbUIyQixFQUFFNm5CLElBQUtob0IsRUFBRUksSUFBSXhGLEVBQUU2NkIsTUFBTTU2QixFQUFFNDZCLEtBQVkrSCxHQUFHNWlDLEVBQUVDLEVBQUV3RixJQUFHeEYsRUFBRTZaLE9BQU8sR0FBRTlaLEVBQUVzN0IsR0FBR3Z3QixFQUFFdkYsSUFBS3ExQixJQUFJNTZCLEVBQUU0NkIsSUFBSTc2QixFQUFFNlosT0FBTzVaLEVBQVNBLEVBQUVtYSxNQUFNcGEsR0FDbGIsU0FBUytpQyxHQUFHL2lDLEVBQUVDLEVBQUVzRixFQUFFQyxFQUFFSixFQUFFSyxHQUFHLEdBQUcsT0FBT3pGLEdBQUdvdEIsR0FBR3B0QixFQUFFNjhCLGNBQWNyM0IsSUFBSXhGLEVBQUU2NkIsTUFBTTU2QixFQUFFNDZCLElBQUksSUFBRzFELElBQUcsRUFBRyxJQUFLMXhCLEVBQUVMLEdBQXFDLE9BQU9uRixFQUFFaTNCLE1BQU1sM0IsRUFBRWszQixNQUFNMEwsR0FBRzVpQyxFQUFFQyxFQUFFd0YsR0FBaEUsSUFBYSxNQUFSekYsRUFBRThaLFNBQWVxZCxJQUFHLEdBQTBDLE9BQU82TCxHQUFHaGpDLEVBQUVDLEVBQUVzRixFQUFFQyxFQUFFQyxHQUNuTCxTQUFTdzlCLEdBQUdqakMsRUFBRUMsRUFBRXNGLEdBQUcsSUFBSUMsRUFBRXZGLEVBQUVvOUIsYUFBYWo0QixFQUFFSSxFQUFFNEwsU0FBUzNMLEVBQUUsT0FBT3pGLEVBQUVBLEVBQUVnYSxjQUFjLEtBQUssR0FBRyxXQUFXeFUsRUFBRWcyQixNQUFNLGtDQUFrQ2gyQixFQUFFZzJCLEtBQUssR0FBRyxJQUFZLEVBQVB2N0IsRUFBRXU3QixNQUFRdjdCLEVBQUUrWixjQUFjLENBQUNrcEIsVUFBVSxHQUFHQyxHQUFHbGpDLEVBQUVzRixPQUFRLElBQUcsSUFBTyxXQUFGQSxHQUE4RSxPQUFPdkYsRUFBRSxPQUFPeUYsRUFBRUEsRUFBRXk5QixVQUFVMzlCLEVBQUVBLEVBQUV0RixFQUFFaTNCLE1BQU1qM0IsRUFBRTYyQixXQUFXLFdBQVc3MkIsRUFBRStaLGNBQWMsQ0FBQ2twQixVQUFVbGpDLEdBQUdtakMsR0FBR2xqQyxFQUFFRCxHQUFHLEtBQXhLQyxFQUFFK1osY0FBYyxDQUFDa3BCLFVBQVUsR0FBR0MsR0FBR2xqQyxFQUFFLE9BQU93RixFQUFFQSxFQUFFeTlCLFVBQVUzOUIsUUFBMEgsT0FBT0UsR0FBR0QsRUFBRUMsRUFBRXk5QixVQUFVMzlCLEVBQUV0RixFQUFFK1osY0FBYyxNQUFNeFUsRUFBRUQsRUFBRTQ5QixHQUFHbGpDLEVBQUV1RixHQUFlLE9BQVprOUIsR0FBRzFpQyxFQUFFQyxFQUFFbUYsRUFBRUcsR0FBVXRGLEVBQUVtYSxNQUMxZSxTQUFTZ3BCLEdBQUdwakMsRUFBRUMsR0FBRyxJQUFJc0YsRUFBRXRGLEVBQUU0NkIsS0FBTyxPQUFPNzZCLEdBQUcsT0FBT3VGLEdBQUcsT0FBT3ZGLEdBQUdBLEVBQUU2NkIsTUFBTXQxQixLQUFFdEYsRUFBRTZaLE9BQU8sS0FBSSxTQUFTa3BCLEdBQUdoakMsRUFBRUMsRUFBRXNGLEVBQUVDLEVBQUVKLEdBQUcsSUFBSUssRUFBRWd1QixHQUFHbHVCLEdBQUc4dEIsR0FBR0YsR0FBRTdZLFFBQTRDLE9BQXBDN1UsRUFBRTZ0QixHQUFHcnpCLEVBQUV3RixHQUFHc3hCLEdBQUc5MkIsRUFBRW1GLEdBQUdHLEVBQUVpNUIsR0FBR3grQixFQUFFQyxFQUFFc0YsRUFBRUMsRUFBRUMsRUFBRUwsR0FBTSxPQUFPcEYsR0FBSW0zQixJQUEwRWwzQixFQUFFNlosT0FBTyxFQUFFNG9CLEdBQUcxaUMsRUFBRUMsRUFBRXNGLEVBQUVILEdBQVVuRixFQUFFbWEsUUFBaEduYSxFQUFFMDNCLFlBQVkzM0IsRUFBRTIzQixZQUFZMTNCLEVBQUU2WixRQUFRLElBQUk5WixFQUFFazNCLFFBQVE5eEIsRUFBRXc5QixHQUFHNWlDLEVBQUVDLEVBQUVtRixJQUM5UCxTQUFTaStCLEdBQUdyakMsRUFBRUMsRUFBRXNGLEVBQUVDLEVBQUVKLEdBQUcsR0FBR3F1QixHQUFHbHVCLEdBQUcsQ0FBQyxJQUFJRSxHQUFFLEVBQUdxdUIsR0FBRzd6QixRQUFRd0YsR0FBRSxFQUFXLEdBQVJzeEIsR0FBRzkyQixFQUFFbUYsR0FBTSxPQUFPbkYsRUFBRWdZLFVBQVUsT0FBT2pZLElBQUlBLEVBQUU0WixVQUFVLEtBQUszWixFQUFFMlosVUFBVSxLQUFLM1osRUFBRTZaLE9BQU8sR0FBR2tnQixHQUFHLzVCLEVBQUVzRixFQUFFQyxHQUFHODBCLEdBQUdyNkIsRUFBRXNGLEVBQUVDLEVBQUVKLEdBQUdJLEdBQUUsT0FBUSxHQUFHLE9BQU94RixFQUFFLENBQUMsSUFBSStLLEVBQUU5SyxFQUFFZ1ksVUFBVXRKLEVBQUUxTyxFQUFFNDhCLGNBQWM5eEIsRUFBRWhELE1BQU00RyxFQUFFLElBQUlELEVBQUUzRCxFQUFFc3NCLFFBQVFuZSxFQUFFM1QsRUFBRTVDLFlBQTBDdVcsRUFBOUIsaUJBQWtCQSxHQUFHLE9BQU9BLEVBQUlrZSxHQUFHbGUsR0FBMkJvYSxHQUFHcnpCLEVBQTFCaVosRUFBRXVhLEdBQUdsdUIsR0FBRzh0QixHQUFHRixHQUFFN1ksU0FBbUIsSUFBSXhULEVBQUV2QixFQUFFdEMseUJBQXlCMDFCLEVBQUUsbUJBQW9CN3hCLEdBQUcsbUJBQW9CaUUsRUFBRXd2Qix3QkFBd0I1QixHQUFHLG1CQUFvQjV0QixFQUFFc3ZCLGtDQUNwZCxtQkFBb0J0dkIsRUFBRXF2Qiw0QkFBNEJ6ckIsSUFBSW5KLEdBQUdrSixJQUFJd0ssSUFBSWloQixHQUFHbDZCLEVBQUU4SyxFQUFFdkYsRUFBRTBULEdBQUd1ZSxJQUFHLEVBQUcsSUFBSW1CLEVBQUUzNEIsRUFBRStaLGNBQWNqUCxFQUFFa3ZCLE1BQU1yQixFQUFFRixHQUFHejRCLEVBQUV1RixFQUFFdUYsRUFBRTNGLEdBQUdzSixFQUFFek8sRUFBRStaLGNBQWNyTCxJQUFJbkosR0FBR296QixJQUFJbHFCLEdBQUcwa0IsR0FBRTlZLFNBQVNtZCxJQUFJLG1CQUFvQjN3QixJQUFJcXlCLEdBQUdsNUIsRUFBRXNGLEVBQUV1QixFQUFFdEIsR0FBR2tKLEVBQUV6TyxFQUFFK1osZ0JBQWdCckwsRUFBRThvQixJQUFJb0MsR0FBRzU1QixFQUFFc0YsRUFBRW9KLEVBQUVuSixFQUFFb3pCLEVBQUVscUIsRUFBRXdLLEtBQUt5ZixHQUFHLG1CQUFvQjV0QixFQUFFeXZCLDJCQUEyQixtQkFBb0J6dkIsRUFBRTB2QixxQkFBcUIsbUJBQW9CMXZCLEVBQUUwdkIsb0JBQW9CMXZCLEVBQUUwdkIscUJBQXFCLG1CQUFvQjF2QixFQUFFeXZCLDJCQUEyQnp2QixFQUFFeXZCLDZCQUE2QixtQkFDemV6dkIsRUFBRTJ2QixvQkFBb0J6NkIsRUFBRTZaLE9BQU8sS0FBSyxtQkFBb0IvTyxFQUFFMnZCLG9CQUFvQno2QixFQUFFNlosT0FBTyxHQUFHN1osRUFBRTQ4QixjQUFjcjNCLEVBQUV2RixFQUFFK1osY0FBY3RMLEdBQUczRCxFQUFFaEQsTUFBTXZDLEVBQUV1RixFQUFFa3ZCLE1BQU12ckIsRUFBRTNELEVBQUVzc0IsUUFBUW5lLEVBQUUxVCxFQUFFbUosSUFBSSxtQkFBb0I1RCxFQUFFMnZCLG9CQUFvQno2QixFQUFFNlosT0FBTyxHQUFHdFUsR0FBRSxPQUFRLENBQUN1RixFQUFFOUssRUFBRWdZLFVBQVVpZ0IsR0FBR2w0QixFQUFFQyxHQUFHME8sRUFBRTFPLEVBQUU0OEIsY0FBYzNqQixFQUFFalosRUFBRW1ELE9BQU9uRCxFQUFFaUosWUFBWXlGLEVBQUUwbkIsR0FBR3AyQixFQUFFbUQsS0FBS3VMLEdBQUc1RCxFQUFFaEQsTUFBTW1SLEVBQUV5ZixFQUFFMTRCLEVBQUVvOUIsYUFBYXpFLEVBQUU3dEIsRUFBRXNzQixRQUFzRDNvQixFQUE5QixpQkFBaEJBLEVBQUVuSixFQUFFNUMsY0FBaUMsT0FBTytMLEVBQUkwb0IsR0FBRzFvQixHQUEyQjRrQixHQUFHcnpCLEVBQTFCeU8sRUFBRStrQixHQUFHbHVCLEdBQUc4dEIsR0FBR0YsR0FBRTdZLFNBQW1CLElBQUl1ZSxFQUFFdHpCLEVBQUV0QywwQkFBMEI2RCxFQUFFLG1CQUFvQit4QixHQUNuZixtQkFBb0I5dEIsRUFBRXd2QiwwQkFBMEIsbUJBQW9CeHZCLEVBQUVzdkIsa0NBQWtDLG1CQUFvQnR2QixFQUFFcXZCLDRCQUE0QnpyQixJQUFJZ3FCLEdBQUdDLElBQUlscUIsSUFBSXlyQixHQUFHbDZCLEVBQUU4SyxFQUFFdkYsRUFBRWtKLEdBQUcrb0IsSUFBRyxFQUFHbUIsRUFBRTM0QixFQUFFK1osY0FBY2pQLEVBQUVrdkIsTUFBTXJCLEVBQUVGLEdBQUd6NEIsRUFBRXVGLEVBQUV1RixFQUFFM0YsR0FBRyxJQUFJaXJCLEVBQUVwd0IsRUFBRStaLGNBQWNyTCxJQUFJZ3FCLEdBQUdDLElBQUl2SSxHQUFHK0MsR0FBRTlZLFNBQVNtZCxJQUFJLG1CQUFvQm9CLElBQUlNLEdBQUdsNUIsRUFBRXNGLEVBQUVzekIsRUFBRXJ6QixHQUFHNnFCLEVBQUVwd0IsRUFBRStaLGdCQUFnQmQsRUFBRXVlLElBQUlvQyxHQUFHNTVCLEVBQUVzRixFQUFFMlQsRUFBRTFULEVBQUVvekIsRUFBRXZJLEVBQUUzaEIsS0FBSzVILEdBQUcsbUJBQW9CaUUsRUFBRXU0Qiw0QkFBNEIsbUJBQW9CdjRCLEVBQUV3NEIsc0JBQXNCLG1CQUFvQng0QixFQUFFdzRCLHFCQUFxQng0QixFQUFFdzRCLG9CQUFvQi85QixFQUMxZ0I2cUIsRUFBRTNoQixHQUFHLG1CQUFvQjNELEVBQUV1NEIsNEJBQTRCdjRCLEVBQUV1NEIsMkJBQTJCOTlCLEVBQUU2cUIsRUFBRTNoQixJQUFJLG1CQUFvQjNELEVBQUV5NEIscUJBQXFCdmpDLEVBQUU2WixPQUFPLEdBQUcsbUJBQW9CL08sRUFBRXd2QiwwQkFBMEJ0NkIsRUFBRTZaLE9BQU8sT0FBTyxtQkFBb0IvTyxFQUFFeTRCLG9CQUFvQjcwQixJQUFJM08sRUFBRTY4QixlQUFlakUsSUFBSTU0QixFQUFFZ2EsZ0JBQWdCL1osRUFBRTZaLE9BQU8sR0FBRyxtQkFBb0IvTyxFQUFFd3ZCLHlCQUF5QjVyQixJQUFJM08sRUFBRTY4QixlQUFlakUsSUFBSTU0QixFQUFFZ2EsZ0JBQWdCL1osRUFBRTZaLE9BQU8sS0FBSzdaLEVBQUU0OEIsY0FBY3IzQixFQUFFdkYsRUFBRStaLGNBQWNxVyxHQUFHdGxCLEVBQUVoRCxNQUFNdkMsRUFBRXVGLEVBQUVrdkIsTUFBTTVKLEVBQUV0bEIsRUFBRXNzQixRQUFRM29CLEVBQUVsSixFQUFFMFQsSUFBSSxtQkFBb0JuTyxFQUFFeTRCLG9CQUM3ZjcwQixJQUFJM08sRUFBRTY4QixlQUFlakUsSUFBSTU0QixFQUFFZ2EsZ0JBQWdCL1osRUFBRTZaLE9BQU8sR0FBRyxtQkFBb0IvTyxFQUFFd3ZCLHlCQUF5QjVyQixJQUFJM08sRUFBRTY4QixlQUFlakUsSUFBSTU0QixFQUFFZ2EsZ0JBQWdCL1osRUFBRTZaLE9BQU8sS0FBS3RVLEdBQUUsR0FBSSxPQUFPaStCLEdBQUd6akMsRUFBRUMsRUFBRXNGLEVBQUVDLEVBQUVDLEVBQUVMLEdBQ3pMLFNBQVNxK0IsR0FBR3pqQyxFQUFFQyxFQUFFc0YsRUFBRUMsRUFBRUosRUFBRUssR0FBRzI5QixHQUFHcGpDLEVBQUVDLEdBQUcsSUFBSThLLEVBQUUsSUFBYSxHQUFSOUssRUFBRTZaLE9BQVUsSUFBSXRVLElBQUl1RixFQUFFLE9BQU8zRixHQUFHNHVCLEdBQUcvekIsRUFBRXNGLEdBQUUsR0FBSXE5QixHQUFHNWlDLEVBQUVDLEVBQUV3RixHQUFHRCxFQUFFdkYsRUFBRWdZLFVBQVV1cUIsR0FBR2xvQixRQUFRcmEsRUFBRSxJQUFJME8sRUFBRTVELEdBQUcsbUJBQW9CeEYsRUFBRXZDLHlCQUF5QixLQUFLd0MsRUFBRXRCLFNBQXdJLE9BQS9IakUsRUFBRTZaLE9BQU8sRUFBRSxPQUFPOVosR0FBRytLLEdBQUc5SyxFQUFFbWEsTUFBTTBoQixHQUFHNzdCLEVBQUVELEVBQUVvYSxNQUFNLEtBQUszVSxHQUFHeEYsRUFBRW1hLE1BQU0waEIsR0FBRzc3QixFQUFFLEtBQUswTyxFQUFFbEosSUFBSWk5QixHQUFHMWlDLEVBQUVDLEVBQUUwTyxFQUFFbEosR0FBR3hGLEVBQUUrWixjQUFjeFUsRUFBRXkwQixNQUFNNzBCLEdBQUc0dUIsR0FBRy96QixFQUFFc0YsR0FBRSxHQUFXdEYsRUFBRW1hLE1BQU0sU0FBU3NwQixHQUFHMWpDLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWlZLFVBQVVoWSxFQUFFMGpDLGVBQWVoUSxHQUFHM3pCLEVBQUVDLEVBQUUwakMsZUFBZTFqQyxFQUFFMGpDLGlCQUFpQjFqQyxFQUFFbzNCLFNBQVNwM0IsRUFBRW8zQixTQUFTMUQsR0FBRzN6QixFQUFFQyxFQUFFbzNCLFNBQVEsR0FBSWdGLEdBQUdyOEIsRUFBRUMsRUFBRXNjLGVBQzdkLElBUzBWcW5CLEdBQU1DLEdBQUdDLEdBVC9WQyxHQUFHLENBQUM5cEIsV0FBVyxLQUFLK3BCLFVBQVUsR0FDbEMsU0FBU0MsR0FBR2prQyxFQUFFQyxFQUFFc0YsR0FBRyxJQUFzQ3dGLEVBQWxDdkYsRUFBRXZGLEVBQUVvOUIsYUFBYWo0QixFQUFFdTNCLEdBQUVyaUIsUUFBUTdVLEdBQUUsRUFBNk0sT0FBdk1zRixFQUFFLElBQWEsR0FBUjlLLEVBQUU2WixVQUFhL08sR0FBRSxPQUFPL0ssR0FBRyxPQUFPQSxFQUFFZ2EsZ0JBQWlCLElBQU8sRUFBRjVVLElBQU0yRixHQUFHdEYsR0FBRSxFQUFHeEYsRUFBRTZaLFFBQVEsSUFBSSxPQUFPOVosR0FBRyxPQUFPQSxFQUFFZ2Esb0JBQWUsSUFBU3hVLEVBQUUwK0IsV0FBVSxJQUFLMStCLEVBQUUyK0IsNkJBQTZCLytCLEdBQUcsR0FBRzZ0QixHQUFFMEosR0FBSSxFQUFGdjNCLEdBQVEsT0FBT3BGLFFBQUcsSUFBU3dGLEVBQUUwK0IsVUFBVTVHLEdBQUdyOUIsR0FBR0QsRUFBRXdGLEVBQUU0TCxTQUFTaE0sRUFBRUksRUFBRTArQixTQUFZeitCLEdBQVN6RixFQUFFb2tDLEdBQUdua0MsRUFBRUQsRUFBRW9GLEVBQUVHLEdBQUd0RixFQUFFbWEsTUFBTUosY0FBYyxDQUFDa3BCLFVBQVUzOUIsR0FBR3RGLEVBQUUrWixjQUFjK3BCLEdBQUcvakMsR0FBSyxpQkFBa0J3RixFQUFFNitCLDJCQUFpQ3JrQyxFQUFFb2tDLEdBQUdua0MsRUFBRUQsRUFBRW9GLEVBQUVHLEdBQUd0RixFQUFFbWEsTUFBTUosY0FBYyxDQUFDa3BCLFVBQVUzOUIsR0FDL2Z0RixFQUFFK1osY0FBYytwQixHQUFHOWpDLEVBQUVpM0IsTUFBTSxTQUFTbDNCLEtBQUV1RixFQUFFKytCLEdBQUcsQ0FBQzlJLEtBQUssVUFBVXBxQixTQUFTcFIsR0FBR0MsRUFBRXU3QixLQUFLajJCLEVBQUUsT0FBUXNVLE9BQU81WixFQUFTQSxFQUFFbWEsTUFBTTdVLEtBQVl2RixFQUFFZ2EsY0FBa0J2VSxHQUFTRCxFQUd6SixTQUFZeEYsRUFBRUMsRUFBRXNGLEVBQUVDLEVBQUVKLEdBQUcsSUFBSUssRUFBRXhGLEVBQUV1N0IsS0FBS3p3QixFQUFFL0ssRUFBRW9hLE1BQU1wYSxFQUFFK0ssRUFBRXNQLFFBQVEsSUFBSTFMLEVBQUUsQ0FBQzZzQixLQUFLLFNBQVNwcUIsU0FBUzdMLEdBQW9TLE9BQWpTLElBQU8sRUFBRkUsSUFBTXhGLEVBQUVtYSxRQUFRclAsSUFBR3hGLEVBQUV0RixFQUFFbWEsT0FBUTBjLFdBQVcsRUFBRXZ4QixFQUFFODNCLGFBQWExdUIsRUFBaUIsUUFBZjVELEVBQUV4RixFQUFFMjFCLGFBQXFCajdCLEVBQUVtN0IsWUFBWTcxQixFQUFFNjFCLFlBQVluN0IsRUFBRWk3QixXQUFXbndCLEVBQUVBLEVBQUVvd0IsV0FBVyxNQUFNbDdCLEVBQUVtN0IsWUFBWW43QixFQUFFaTdCLFdBQVcsTUFBTTMxQixFQUFFKzFCLEdBQUd2d0IsRUFBRTRELEdBQUcsT0FBTzNPLEVBQUV3RixFQUFFODFCLEdBQUd0N0IsRUFBRXdGLElBQUlBLEVBQUVvMkIsR0FBR3AyQixFQUFFQyxFQUFFTCxFQUFFLE9BQVEwVSxPQUFPLEVBQUd0VSxFQUFFcVUsT0FBTzVaLEVBQUVzRixFQUFFc1UsT0FBTzVaLEVBQUVzRixFQUFFOFUsUUFBUTdVLEVBQUV2RixFQUFFbWEsTUFBTTdVLEVBQVNDLEVBSHhPKytCLENBQUd2a0MsRUFBRUMsRUFBRXVGLEVBQUU0TCxTQUFTNUwsRUFBRTArQixTQUFTMytCLEdBQUdFLEVBQUV4RixFQUFFbWEsTUFBTWhWLEVBQUVwRixFQUFFb2EsTUFBTUosY0FBY3ZVLEVBQUV1VSxjQUFjLE9BQU81VSxFQUFFLENBQUM4OUIsVUFBVTM5QixHQUFHLENBQUMyOUIsVUFBVTk5QixFQUFFODlCLFVBQVUzOUIsR0FBR0UsRUFBRXF4QixXQUFXOTJCLEVBQUU4MkIsWUFBWXZ4QixFQUFFdEYsRUFBRStaLGNBQWMrcEIsR0FBR3YrQixJQUFFRCxFQUVoVixTQUFZdkYsRUFBRUMsRUFBRXNGLEVBQUVDLEdBQUcsSUFBSUosRUFBRXBGLEVBQUVvYSxNQUFpTCxPQUEzS3BhLEVBQUVvRixFQUFFaVYsUUFBUTlVLEVBQUUrMUIsR0FBR2wyQixFQUFFLENBQUNvMkIsS0FBSyxVQUFVcHFCLFNBQVM3TCxJQUFJLElBQVksRUFBUHRGLEVBQUV1N0IsUUFBVWoyQixFQUFFMnhCLE1BQU0xeEIsR0FBR0QsRUFBRXNVLE9BQU81WixFQUFFc0YsRUFBRThVLFFBQVEsS0FBSyxPQUFPcmEsSUFBSUEsRUFBRW03QixXQUFXLEtBQUtuN0IsRUFBRThaLE1BQU0sRUFBRTdaLEVBQUVtN0IsWUFBWW43QixFQUFFaTdCLFdBQVdsN0IsR0FBVUMsRUFBRW1hLE1BQU03VSxFQUZxSGkvQixDQUFHeGtDLEVBQUVDLEVBQUV1RixFQUFFNEwsU0FBUzdMLEdBQUd0RixFQUFFK1osY0FBYyxLQUFZelUsSUFDbFEsU0FBUzYrQixHQUFHcGtDLEVBQUVDLEVBQUVzRixFQUFFQyxHQUFHLElBQUlKLEVBQUVwRixFQUFFdzdCLEtBQUsvMUIsRUFBRXpGLEVBQUVvYSxNQUF1SyxPQUFqS25hLEVBQUUsQ0FBQ3U3QixLQUFLLFNBQVNwcUIsU0FBU25SLEdBQUcsSUFBTyxFQUFGbUYsSUFBTSxPQUFPSyxHQUFHQSxFQUFFcXhCLFdBQVcsRUFBRXJ4QixFQUFFNDNCLGFBQWFwOUIsR0FBR3dGLEVBQUU2K0IsR0FBR3JrQyxFQUFFbUYsRUFBRSxFQUFFLE1BQU1HLEVBQUVxMkIsR0FBR3IyQixFQUFFSCxFQUFFSSxFQUFFLE1BQU1DLEVBQUVvVSxPQUFPN1osRUFBRXVGLEVBQUVzVSxPQUFPN1osRUFBRXlGLEVBQUU0VSxRQUFROVUsRUFBRXZGLEVBQUVvYSxNQUFNM1UsRUFBU0YsRUFFZ0QsU0FBU2svQixHQUFHemtDLEVBQUVDLEdBQUdELEVBQUVrM0IsT0FBT2ozQixFQUFFLElBQUlzRixFQUFFdkYsRUFBRTRaLFVBQVUsT0FBT3JVLElBQUlBLEVBQUUyeEIsT0FBT2ozQixHQUFHNDJCLEdBQUc3MkIsRUFBRTZaLE9BQU81WixHQUN0ZCxTQUFTeWtDLEdBQUcxa0MsRUFBRUMsRUFBRXNGLEVBQUVDLEVBQUVKLEVBQUVLLEdBQUcsSUFBSXNGLEVBQUUvSyxFQUFFZ2EsY0FBYyxPQUFPalAsRUFBRS9LLEVBQUVnYSxjQUFjLENBQUMycUIsWUFBWTFrQyxFQUFFMmtDLFVBQVUsS0FBS0MsbUJBQW1CLEVBQUVDLEtBQUt0L0IsRUFBRXUvQixLQUFLeC9CLEVBQUV5L0IsU0FBUzUvQixFQUFFODFCLFdBQVd6MUIsSUFBSXNGLEVBQUU0NUIsWUFBWTFrQyxFQUFFOEssRUFBRTY1QixVQUFVLEtBQUs3NUIsRUFBRTg1QixtQkFBbUIsRUFBRTk1QixFQUFFKzVCLEtBQUt0L0IsRUFBRXVGLEVBQUVnNkIsS0FBS3gvQixFQUFFd0YsRUFBRWk2QixTQUFTNS9CLEVBQUUyRixFQUFFbXdCLFdBQVd6MUIsR0FDdlEsU0FBU3cvQixHQUFHamxDLEVBQUVDLEVBQUVzRixHQUFHLElBQUlDLEVBQUV2RixFQUFFbzlCLGFBQWFqNEIsRUFBRUksRUFBRXMzQixZQUFZcjNCLEVBQUVELEVBQUV1L0IsS0FBc0MsR0FBakNyQyxHQUFHMWlDLEVBQUVDLEVBQUV1RixFQUFFNEwsU0FBUzdMLEdBQWtCLElBQU8sR0FBdEJDLEVBQUVtM0IsR0FBRXJpQixVQUFxQjlVLEVBQUksRUFBRkEsRUFBSSxFQUFFdkYsRUFBRTZaLE9BQU8sT0FBTyxDQUFDLEdBQUcsT0FBTzlaLEdBQUcsSUFBYSxHQUFSQSxFQUFFOFosT0FBVTlaLEVBQUUsSUFBSUEsRUFBRUMsRUFBRW1hLE1BQU0sT0FBT3BhLEdBQUcsQ0FBQyxHQUFHLEtBQUtBLEVBQUU2TyxJQUFJLE9BQU83TyxFQUFFZ2EsZUFBZXlxQixHQUFHemtDLEVBQUV1RixRQUFRLEdBQUcsS0FBS3ZGLEVBQUU2TyxJQUFJNDFCLEdBQUd6a0MsRUFBRXVGLFFBQVEsR0FBRyxPQUFPdkYsRUFBRW9hLE1BQU0sQ0FBQ3BhLEVBQUVvYSxNQUFNUCxPQUFPN1osRUFBRUEsRUFBRUEsRUFBRW9hLE1BQU0sU0FBUyxHQUFHcGEsSUFBSUMsRUFBRSxNQUFNRCxFQUFFLEtBQUssT0FBT0EsRUFBRXFhLFNBQVMsQ0FBQyxHQUFHLE9BQU9yYSxFQUFFNlosUUFBUTdaLEVBQUU2WixTQUFTNVosRUFBRSxNQUFNRCxFQUFFQSxFQUFFQSxFQUFFNlosT0FBTzdaLEVBQUVxYSxRQUFRUixPQUFPN1osRUFBRTZaLE9BQU83WixFQUFFQSxFQUFFcWEsUUFBUTdVLEdBQUcsRUFBUyxHQUFQeXRCLEdBQUUwSixHQUFFbjNCLEdBQU0sSUFBWSxFQUFQdkYsRUFBRXU3QixNQUFRdjdCLEVBQUUrWixjQUN6ZSxVQUFVLE9BQU81VSxHQUFHLElBQUssV0FBcUIsSUFBVkcsRUFBRXRGLEVBQUVtYSxNQUFVaFYsRUFBRSxLQUFLLE9BQU9HLEdBQWlCLFFBQWR2RixFQUFFdUYsRUFBRXFVLFlBQW9CLE9BQU9nakIsR0FBRzU4QixLQUFLb0YsRUFBRUcsR0FBR0EsRUFBRUEsRUFBRThVLFFBQVksUUFBSjlVLEVBQUVILElBQVlBLEVBQUVuRixFQUFFbWEsTUFBTW5hLEVBQUVtYSxNQUFNLE9BQU9oVixFQUFFRyxFQUFFOFUsUUFBUTlVLEVBQUU4VSxRQUFRLE1BQU1xcUIsR0FBR3prQyxHQUFFLEVBQUdtRixFQUFFRyxFQUFFRSxFQUFFeEYsRUFBRWk3QixZQUFZLE1BQU0sSUFBSyxZQUE2QixJQUFqQjMxQixFQUFFLEtBQUtILEVBQUVuRixFQUFFbWEsTUFBVW5hLEVBQUVtYSxNQUFNLEtBQUssT0FBT2hWLEdBQUcsQ0FBZSxHQUFHLFFBQWpCcEYsRUFBRW9GLEVBQUV3VSxZQUF1QixPQUFPZ2pCLEdBQUc1OEIsR0FBRyxDQUFDQyxFQUFFbWEsTUFBTWhWLEVBQUUsTUFBTXBGLEVBQUVvRixFQUFFaVYsUUFBUWpWLEVBQUVpVixRQUFROVUsRUFBRUEsRUFBRUgsRUFBRUEsRUFBRXBGLEVBQUUwa0MsR0FBR3prQyxHQUFFLEVBQUdzRixFQUFFLEtBQUtFLEVBQUV4RixFQUFFaTdCLFlBQVksTUFBTSxJQUFLLFdBQVd3SixHQUFHemtDLEdBQUUsRUFBRyxLQUFLLFVBQUssRUFBT0EsRUFBRWk3QixZQUFZLE1BQU0sUUFBUWo3QixFQUFFK1osY0FBYyxLQUFLLE9BQU8vWixFQUFFbWEsTUFDL2YsU0FBU3dvQixHQUFHNWlDLEVBQUVDLEVBQUVzRixHQUF5RCxHQUF0RCxPQUFPdkYsSUFBSUMsRUFBRSsyQixhQUFhaDNCLEVBQUVnM0IsY0FBYzhCLElBQUk3NEIsRUFBRWkzQixNQUFTLElBQUszeEIsRUFBRXRGLEVBQUU2MkIsWUFBWSxDQUFDLEdBQUcsT0FBTzkyQixHQUFHQyxFQUFFbWEsUUFBUXBhLEVBQUVvYSxNQUFNLE1BQU14VSxNQUFNa0UsRUFBRSxNQUFNLEdBQUcsT0FBTzdKLEVBQUVtYSxNQUFNLENBQTRDLElBQWpDN1UsRUFBRSsxQixHQUFadDdCLEVBQUVDLEVBQUVtYSxNQUFhcGEsRUFBRXE5QixjQUFjcDlCLEVBQUVtYSxNQUFNN1UsRUFBTUEsRUFBRXNVLE9BQU81WixFQUFFLE9BQU9ELEVBQUVxYSxTQUFTcmEsRUFBRUEsRUFBRXFhLFNBQVE5VSxFQUFFQSxFQUFFOFUsUUFBUWloQixHQUFHdDdCLEVBQUVBLEVBQUVxOUIsZUFBZ0J4akIsT0FBTzVaLEVBQUVzRixFQUFFOFUsUUFBUSxLQUFLLE9BQU9wYSxFQUFFbWEsTUFBTSxPQUFPLEtBSzVQLFNBQVM4cUIsR0FBR2xsQyxFQUFFQyxHQUFHLElBQUlnOUIsR0FBRyxPQUFPajlCLEVBQUVnbEMsVUFBVSxJQUFLLFNBQVMva0MsRUFBRUQsRUFBRStrQyxLQUFLLElBQUksSUFBSXgvQixFQUFFLEtBQUssT0FBT3RGLEdBQUcsT0FBT0EsRUFBRTJaLFlBQVlyVSxFQUFFdEYsR0FBR0EsRUFBRUEsRUFBRW9hLFFBQVEsT0FBTzlVLEVBQUV2RixFQUFFK2tDLEtBQUssS0FBS3gvQixFQUFFOFUsUUFBUSxLQUFLLE1BQU0sSUFBSyxZQUFZOVUsRUFBRXZGLEVBQUUra0MsS0FBSyxJQUFJLElBQUl2L0IsRUFBRSxLQUFLLE9BQU9ELEdBQUcsT0FBT0EsRUFBRXFVLFlBQVlwVSxFQUFFRCxHQUFHQSxFQUFFQSxFQUFFOFUsUUFBUSxPQUFPN1UsRUFBRXZGLEdBQUcsT0FBT0QsRUFBRStrQyxLQUFLL2tDLEVBQUUra0MsS0FBSyxLQUFLL2tDLEVBQUUra0MsS0FBSzFxQixRQUFRLEtBQUs3VSxFQUFFNlUsUUFBUSxNQUM3WixTQUFTOHFCLEdBQUdubEMsRUFBRUMsRUFBRXNGLEdBQUcsSUFBSUMsRUFBRXZGLEVBQUVvOUIsYUFBYSxPQUFPcDlCLEVBQUU0TyxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxPQUFPLEtBQUssS0FBSyxFQUFFLE9BQU80a0IsR0FBR3h6QixFQUFFbUQsT0FBT3N3QixLQUFLLEtBQUssS0FBSyxFQUFzTCxPQUFwTDhJLEtBQUt4SixHQUFFSSxJQUFHSixHQUFFRyxJQUFHd0ssTUFBS240QixFQUFFdkYsRUFBRWdZLFdBQVkwckIsaUJBQWlCbitCLEVBQUU2eEIsUUFBUTd4QixFQUFFbStCLGVBQWVuK0IsRUFBRW0rQixlQUFlLE1BQVMsT0FBTzNqQyxHQUFHLE9BQU9BLEVBQUVvYSxRQUFNb2pCLEdBQUd2OUIsR0FBR0EsRUFBRTZaLE9BQU8sRUFBRXRVLEVBQUU4VyxVQUFVcmMsRUFBRTZaLE9BQU8sTUFBa0IsS0FBSyxLQUFLLEVBQUU0aUIsR0FBR3o4QixHQUFHLElBQUltRixFQUFFZzNCLEdBQUdELEdBQUc3aEIsU0FBa0IsR0FBVC9VLEVBQUV0RixFQUFFbUQsS0FBUSxPQUFPcEQsR0FBRyxNQUFNQyxFQUFFZ1ksVUFBVTRyQixHQUFHN2pDLEVBQUVDLEVBQUVzRixFQUFFQyxHQUFLeEYsRUFBRTY2QixNQUFNNTZCLEVBQUU0NkIsTUFBTTU2QixFQUFFNlosT0FBTyxTQUFTLENBQUMsSUFBSXRVLEVBQUUsQ0FBQyxHQUFHLE9BQzdmdkYsRUFBRWdZLFVBQVUsTUFBTXJTLE1BQU1rRSxFQUFFLE1BQU0sT0FBTyxLQUFzQixHQUFqQjlKLEVBQUVvOEIsR0FBR0gsR0FBRzNoQixTQUFZa2pCLEdBQUd2OUIsR0FBRyxDQUFDdUYsRUFBRXZGLEVBQUVnWSxVQUFVMVMsRUFBRXRGLEVBQUVtRCxLQUFLLElBQUlxQyxFQUFFeEYsRUFBRTQ4QixjQUE4QixPQUFoQnIzQixFQUFFa3RCLElBQUl6eUIsRUFBRXVGLEVBQUVtdEIsSUFBSWx0QixFQUFTRixHQUFHLElBQUssU0FBU21xQixHQUFFLFNBQVNscUIsR0FBR2txQixHQUFFLFFBQVFscUIsR0FBRyxNQUFNLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxRQUFRa3FCLEdBQUUsT0FBT2xxQixHQUFHLE1BQU0sSUFBSyxRQUFRLElBQUssUUFBUSxJQUFJeEYsRUFBRSxFQUFFQSxFQUFFb3ZCLEdBQUdudUIsT0FBT2pCLElBQUkwdkIsR0FBRU4sR0FBR3B2QixHQUFHd0YsR0FBRyxNQUFNLElBQUssU0FBU2txQixHQUFFLFFBQVFscUIsR0FBRyxNQUFNLElBQUssTUFBTSxJQUFLLFFBQVEsSUFBSyxPQUFPa3FCLEdBQUUsUUFBUWxxQixHQUFHa3FCLEdBQUUsT0FBT2xxQixHQUFHLE1BQU0sSUFBSyxVQUFVa3FCLEdBQUUsU0FBU2xxQixHQUFHLE1BQU0sSUFBSyxRQUFRbUwsR0FBR25MLEVBQUVDLEdBQUdpcUIsR0FBRSxVQUFVbHFCLEdBQUcsTUFBTSxJQUFLLFNBQVNBLEVBQUVpTCxjQUM1ZixDQUFDMjBCLGNBQWMzL0IsRUFBRTQvQixVQUFVM1YsR0FBRSxVQUFVbHFCLEdBQUcsTUFBTSxJQUFLLFdBQVdzTSxHQUFHdE0sRUFBRUMsR0FBR2lxQixHQUFFLFVBQVVscUIsR0FBa0IsSUFBSSxJQUFJdUYsS0FBdkJzTSxHQUFHOVIsRUFBRUUsR0FBR3pGLEVBQUUsS0FBa0J5RixFQUFFQSxFQUFFcEUsZUFBZTBKLEtBQUszRixFQUFFSyxFQUFFc0YsR0FBRyxhQUFhQSxFQUFFLGlCQUFrQjNGLEVBQUVJLEVBQUV5TSxjQUFjN00sSUFBSXBGLEVBQUUsQ0FBQyxXQUFXb0YsSUFBSSxpQkFBa0JBLEdBQUdJLEVBQUV5TSxjQUFjLEdBQUc3TSxJQUFJcEYsRUFBRSxDQUFDLFdBQVcsR0FBR29GLElBQUk4RSxFQUFHN0ksZUFBZTBKLElBQUksTUFBTTNGLEdBQUcsYUFBYTJGLEdBQUcya0IsR0FBRSxTQUFTbHFCLElBQUksT0FBT0QsR0FBRyxJQUFLLFFBQVFnSyxFQUFHL0osR0FBR3lMLEdBQUd6TCxFQUFFQyxHQUFFLEdBQUksTUFBTSxJQUFLLFdBQVc4SixFQUFHL0osR0FBR3dNLEdBQUd4TSxHQUFHLE1BQU0sSUFBSyxTQUFTLElBQUssU0FBUyxNQUFNLFFBQVEsbUJBQW9CQyxFQUFFNi9CLFVBQVU5L0IsRUFBRSsvQixRQUN0ZjlULElBQUlqc0IsRUFBRXhGLEVBQUVDLEVBQUUwM0IsWUFBWW55QixFQUFFLE9BQU9BLElBQUl2RixFQUFFNlosT0FBTyxPQUFPLENBQWlaLE9BQWhaL08sRUFBRSxJQUFJM0YsRUFBRTROLFNBQVM1TixFQUFFQSxFQUFFOEwsY0FBY2xSLElBQUlrUyxLQUFVbFMsRUFBRW1TLEdBQUc1TSxJQUFJdkYsSUFBSWtTLEdBQVEsV0FBVzNNLElBQUd2RixFQUFFK0ssRUFBRU4sY0FBYyxRQUFTK0gsVUFBVSxxQkFBdUJ4UyxFQUFFQSxFQUFFMFMsWUFBWTFTLEVBQUV5UyxhQUFhLGlCQUFrQmpOLEVBQUUrUixHQUFHdlgsRUFBRStLLEVBQUVOLGNBQWNsRixFQUFFLENBQUNnUyxHQUFHL1IsRUFBRStSLE1BQU12WCxFQUFFK0ssRUFBRU4sY0FBY2xGLEdBQUcsV0FBV0EsSUFBSXdGLEVBQUUvSyxFQUFFd0YsRUFBRTYvQixTQUFTdDZCLEVBQUVzNkIsVUFBUyxFQUFHNy9CLEVBQUVyRSxPQUFPNEosRUFBRTVKLEtBQUtxRSxFQUFFckUsUUFBUW5CLEVBQUUrSyxFQUFFeTZCLGdCQUFnQnhsQyxFQUFFdUYsR0FBR3ZGLEVBQUUweUIsSUFBSXp5QixFQUFFRCxFQUFFMnlCLElBQUludEIsRUFBRW8rQixHQUFHNWpDLEVBQUVDLEdBQVNBLEVBQUVnWSxVQUFValksRUFBRStLLEVBQUV1TSxHQUFHL1IsRUFBRUMsR0FBVUQsR0FBRyxJQUFLLFNBQVNtcUIsR0FBRSxTQUFTMXZCLEdBQUcwdkIsR0FBRSxRQUFRMXZCLEdBQ3Bmb0YsRUFBRUksRUFBRSxNQUFNLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxRQUFRa3FCLEdBQUUsT0FBTzF2QixHQUFHb0YsRUFBRUksRUFBRSxNQUFNLElBQUssUUFBUSxJQUFLLFFBQVEsSUFBSUosRUFBRSxFQUFFQSxFQUFFZ3FCLEdBQUdudUIsT0FBT21FLElBQUlzcUIsR0FBRU4sR0FBR2hxQixHQUFHcEYsR0FBR29GLEVBQUVJLEVBQUUsTUFBTSxJQUFLLFNBQVNrcUIsR0FBRSxRQUFRMXZCLEdBQUdvRixFQUFFSSxFQUFFLE1BQU0sSUFBSyxNQUFNLElBQUssUUFBUSxJQUFLLE9BQU9rcUIsR0FBRSxRQUFRMXZCLEdBQUcwdkIsR0FBRSxPQUFPMXZCLEdBQUdvRixFQUFFSSxFQUFFLE1BQU0sSUFBSyxVQUFVa3FCLEdBQUUsU0FBUzF2QixHQUFHb0YsRUFBRUksRUFBRSxNQUFNLElBQUssUUFBUW1MLEdBQUczUSxFQUFFd0YsR0FBR0osRUFBRWtMLEVBQUd0USxFQUFFd0YsR0FBR2txQixHQUFFLFVBQVUxdkIsR0FBRyxNQUFNLElBQUssU0FBU29GLEVBQUUrTCxHQUFHblIsRUFBRXdGLEdBQUcsTUFBTSxJQUFLLFNBQVN4RixFQUFFeVEsY0FBYyxDQUFDMjBCLGNBQWM1L0IsRUFBRTYvQixVQUFVamdDLEVBQUV3RSxFQUFFLEdBQUdwRSxFQUFFLENBQUMwSyxXQUFNLElBQVN3ZixHQUFFLFVBQVUxdkIsR0FBRyxNQUFNLElBQUssV0FBVzhSLEdBQUc5UixFQUFFd0YsR0FBR0osRUFDcGZ3TSxHQUFHNVIsRUFBRXdGLEdBQUdrcUIsR0FBRSxVQUFVMXZCLEdBQUcsTUFBTSxRQUFRb0YsRUFBRUksRUFBRTZSLEdBQUc5UixFQUFFSCxHQUFHLElBQUl1SixFQUFFdkosRUFBRSxJQUFJSyxLQUFLa0osRUFBRSxHQUFHQSxFQUFFdE4sZUFBZW9FLEdBQUcsQ0FBQyxJQUFJaUosRUFBRUMsRUFBRWxKLEdBQUcsVUFBVUEsRUFBRXNRLEdBQUcvVixFQUFFME8sR0FBRyw0QkFBNEJqSixFQUF1QixPQUFwQmlKLEVBQUVBLEVBQUVBLEVBQUVxakIsWUFBTyxJQUFnQnpmLEdBQUd0UyxFQUFFME8sR0FBSSxhQUFhakosRUFBRSxpQkFBa0JpSixHQUFHLGFBQWFuSixHQUFHLEtBQUttSixJQUFJb0UsR0FBRzlTLEVBQUUwTyxHQUFHLGlCQUFrQkEsR0FBR29FLEdBQUc5UyxFQUFFLEdBQUcwTyxHQUFHLG1DQUFtQ2pKLEdBQUcsNkJBQTZCQSxHQUFHLGNBQWNBLElBQUl5RSxFQUFHN0ksZUFBZW9FLEdBQUcsTUFBTWlKLEdBQUcsYUFBYWpKLEdBQUdpcUIsR0FBRSxTQUFTMXZCLEdBQUcsTUFBTTBPLEdBQUc5QyxFQUFHNUwsRUFBRXlGLEVBQUVpSixFQUFFM0QsSUFBSSxPQUFPeEYsR0FBRyxJQUFLLFFBQVFnSyxFQUFHdlAsR0FBR2lSLEdBQUdqUixFQUFFd0YsR0FBRSxHQUNuZixNQUFNLElBQUssV0FBVytKLEVBQUd2UCxHQUFHZ1MsR0FBR2hTLEdBQUcsTUFBTSxJQUFLLFNBQVMsTUFBTXdGLEVBQUUwSyxPQUFPbFEsRUFBRW1NLGFBQWEsUUFBUSxHQUFHaUQsRUFBRzVKLEVBQUUwSyxRQUFRLE1BQU0sSUFBSyxTQUFTbFEsRUFBRXFsQyxXQUFXNy9CLEVBQUU2L0IsU0FBbUIsT0FBVjUvQixFQUFFRCxFQUFFMEssT0FBY3FCLEdBQUd2UixJQUFJd0YsRUFBRTYvQixTQUFTNS9CLEdBQUUsR0FBSSxNQUFNRCxFQUFFZ0wsY0FBY2UsR0FBR3ZSLElBQUl3RixFQUFFNi9CLFNBQVM3L0IsRUFBRWdMLGNBQWEsR0FBSSxNQUFNLFFBQVEsbUJBQW9CcEwsRUFBRWtnQyxVQUFVdGxDLEVBQUV1bEMsUUFBUTlULElBQUlHLEdBQUdyc0IsRUFBRUMsS0FBS3ZGLEVBQUU2WixPQUFPLEdBQUcsT0FBTzdaLEVBQUU0NkIsTUFBTTU2QixFQUFFNlosT0FBTyxLQUFLLE9BQU8sS0FBSyxLQUFLLEVBQUUsR0FBRzlaLEdBQUcsTUFBTUMsRUFBRWdZLFVBQVU2ckIsR0FBRzlqQyxFQUFFQyxFQUFFRCxFQUFFNjhCLGNBQWNyM0IsT0FBTyxDQUFDLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU92RixFQUFFZ1ksVUFBVSxNQUFNclMsTUFBTWtFLEVBQUUsTUFDL2V2RSxFQUFFNjJCLEdBQUdELEdBQUc3aEIsU0FBUzhoQixHQUFHSCxHQUFHM2hCLFNBQVNrakIsR0FBR3Y5QixJQUFJdUYsRUFBRXZGLEVBQUVnWSxVQUFVMVMsRUFBRXRGLEVBQUU0OEIsY0FBY3IzQixFQUFFa3RCLElBQUl6eUIsRUFBRXVGLEVBQUV5TixZQUFZMU4sSUFBSXRGLEVBQUU2WixPQUFPLE1BQUt0VSxHQUFHLElBQUlELEVBQUV5TixTQUFTek4sRUFBRUEsRUFBRTJMLGVBQWV1MEIsZUFBZWpnQyxJQUFLa3RCLElBQUl6eUIsRUFBRUEsRUFBRWdZLFVBQVV6UyxHQUFHLE9BQU8sS0FBSyxLQUFLLEdBQTBCLE9BQXZCd3RCLEdBQUUySixJQUFHbjNCLEVBQUV2RixFQUFFK1osY0FBaUIsSUFBYSxHQUFSL1osRUFBRTZaLFFBQWlCN1osRUFBRWkzQixNQUFNM3hCLEVBQUV0RixJQUFFdUYsRUFBRSxPQUFPQSxFQUFFRCxHQUFFLEVBQUcsT0FBT3ZGLE9BQUUsSUFBU0MsRUFBRTQ4QixjQUFjcUgsVUFBVTFHLEdBQUd2OUIsR0FBR3NGLEVBQUUsT0FBT3ZGLEVBQUVnYSxjQUFpQnhVLElBQUlELEdBQUcsSUFBWSxFQUFQdEYsRUFBRXU3QixRQUFXLE9BQU94N0IsSUFBRyxJQUFLQyxFQUFFNDhCLGNBQWNzSCw0QkFBNEIsSUFBZSxFQUFWeEgsR0FBRXJpQixTQUFXLElBQUlvckIsS0FBSUEsR0FBRSxJQUFXLElBQUlBLElBQUcsSUFBSUEsS0FBRUEsR0FDcmYsR0FBRSxPQUFPM0YsSUFBRyxJQUFRLFVBQUhqSCxLQUFlLElBQVEsVUFBSDZNLEtBQWVDLEdBQUc3RixHQUFFOEYsT0FBTXJnQyxHQUFHRCxLQUFFdEYsRUFBRTZaLE9BQU8sR0FBUyxNQUFLLEtBQUssRUFBRSxPQUFPMGlCLEtBQVcsT0FBT3g4QixHQUFHZ3dCLEdBQUcvdkIsRUFBRWdZLFVBQVVzRSxlQUFlLEtBQUssS0FBSyxHQUFHLE9BQU9vYSxHQUFHMTJCLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBT3d6QixHQUFHeHpCLEVBQUVtRCxPQUFPc3dCLEtBQUssS0FBSyxLQUFLLEdBQTBCLEdBQXZCVixHQUFFMkosSUFBd0IsUUFBckJuM0IsRUFBRXZGLEVBQUUrWixlQUEwQixPQUFPLEtBQXNDLEdBQWpDdlUsRUFBRSxJQUFhLEdBQVJ4RixFQUFFNlosT0FBMkIsUUFBakIvTyxFQUFFdkYsRUFBRW8vQixXQUFzQixHQUFHbi9CLEVBQUV5L0IsR0FBRzEvQixHQUFFLE9BQVEsQ0FBQyxHQUFHLElBQUlrZ0MsSUFBRyxPQUFPMWxDLEdBQUcsSUFBYSxHQUFSQSxFQUFFOFosT0FBVSxJQUFJOVosRUFBRUMsRUFBRW1hLE1BQU0sT0FBT3BhLEdBQUcsQ0FBUyxHQUFHLFFBQVgrSyxFQUFFNnhCLEdBQUc1OEIsSUFBZSxDQUNqVyxJQURrV0MsRUFBRTZaLE9BQU8sR0FBR29yQixHQUFHMS9CLEdBQUUsR0FBb0IsUUFBaEJDLEVBQUVzRixFQUFFNHNCLGVBQXVCMTNCLEVBQUUwM0IsWUFBWWx5QixFQUFFeEYsRUFBRTZaLE9BQU8sR0FDbmYsT0FBT3RVLEVBQUUwMUIsYUFBYWo3QixFQUFFbTdCLFlBQVksTUFBTW43QixFQUFFaTdCLFdBQVcxMUIsRUFBRTAxQixXQUFXMTFCLEVBQUVELEVBQU1BLEVBQUV0RixFQUFFbWEsTUFBTSxPQUFPN1UsR0FBT3ZGLEVBQUV3RixHQUFOQyxFQUFFRixHQUFRdVUsT0FBTyxFQUFFclUsRUFBRTAxQixXQUFXLEtBQUsxMUIsRUFBRTIxQixZQUFZLEtBQUszMUIsRUFBRXkxQixXQUFXLEtBQW1CLFFBQWRud0IsRUFBRXRGLEVBQUVtVSxZQUFvQm5VLEVBQUVxeEIsV0FBVyxFQUFFcnhCLEVBQUV5eEIsTUFBTWwzQixFQUFFeUYsRUFBRTJVLE1BQU0sS0FBSzNVLEVBQUVvM0IsY0FBYyxLQUFLcDNCLEVBQUV1VSxjQUFjLEtBQUt2VSxFQUFFa3lCLFlBQVksS0FBS2x5QixFQUFFdXhCLGFBQWEsS0FBS3Z4QixFQUFFd1MsVUFBVSxPQUFPeFMsRUFBRXF4QixXQUFXL3JCLEVBQUUrckIsV0FBV3J4QixFQUFFeXhCLE1BQU1uc0IsRUFBRW1zQixNQUFNenhCLEVBQUUyVSxNQUFNclAsRUFBRXFQLE1BQU0zVSxFQUFFbzNCLGNBQWM5eEIsRUFBRTh4QixjQUFjcDNCLEVBQUV1VSxjQUFjalAsRUFBRWlQLGNBQWN2VSxFQUFFa3lCLFlBQVk1c0IsRUFBRTRzQixZQUFZbHlCLEVBQUVyQyxLQUFLMkgsRUFBRTNILEtBQUtwRCxFQUFFK0ssRUFBRWlzQixhQUNwZnZ4QixFQUFFdXhCLGFBQWEsT0FBT2gzQixFQUFFLEtBQUssQ0FBQ2szQixNQUFNbDNCLEVBQUVrM0IsTUFBTUQsYUFBYWozQixFQUFFaTNCLGVBQWUxeEIsRUFBRUEsRUFBRThVLFFBQTJCLE9BQW5CNFksR0FBRTBKLEdBQVksRUFBVkEsR0FBRXJpQixRQUFVLEdBQVVyYSxFQUFFbWEsTUFBTXBhLEVBQUVBLEVBQUVxYSxRQUFRLE9BQU83VSxFQUFFdS9CLE1BQU1uUCxLQUFJa1EsS0FBSzdsQyxFQUFFNlosT0FBTyxHQUFHclUsR0FBRSxFQUFHeS9CLEdBQUcxL0IsR0FBRSxHQUFJdkYsRUFBRWkzQixNQUFNLGNBQWMsQ0FBQyxJQUFJenhCLEVBQUUsR0FBVyxRQUFSekYsRUFBRTQ4QixHQUFHN3hCLEtBQWEsR0FBRzlLLEVBQUU2WixPQUFPLEdBQUdyVSxHQUFFLEVBQW1CLFFBQWhCRixFQUFFdkYsRUFBRTIzQixlQUF1QjEzQixFQUFFMDNCLFlBQVlweUIsRUFBRXRGLEVBQUU2WixPQUFPLEdBQUdvckIsR0FBRzEvQixHQUFFLEdBQUksT0FBT0EsRUFBRXUvQixNQUFNLFdBQVd2L0IsRUFBRXcvQixXQUFXajZCLEVBQUU2TyxZQUFZcWpCLEdBQUcsT0FBbUMsUUFBNUJoOUIsRUFBRUEsRUFBRWk3QixXQUFXMTFCLEVBQUUwMUIsY0FBc0JqN0IsRUFBRWs3QixXQUFXLE1BQU0sVUFBVSxFQUFFdkYsS0FBSXB3QixFQUFFcS9CLG1CQUFtQmlCLElBQUksYUFBYXZnQyxJQUFJdEYsRUFBRTZaLE9BQ2pmLEdBQUdyVSxHQUFFLEVBQUd5L0IsR0FBRzEvQixHQUFFLEdBQUl2RixFQUFFaTNCLE1BQU0sVUFBVTF4QixFQUFFbS9CLGFBQWE1NUIsRUFBRXNQLFFBQVFwYSxFQUFFbWEsTUFBTW5hLEVBQUVtYSxNQUFNclAsSUFBYSxRQUFUeEYsRUFBRUMsRUFBRXMvQixNQUFjdi9CLEVBQUU4VSxRQUFRdFAsRUFBRTlLLEVBQUVtYSxNQUFNclAsRUFBRXZGLEVBQUVzL0IsS0FBSy81QixHQUFHLE9BQU8sT0FBT3ZGLEVBQUV1L0IsTUFBTXgvQixFQUFFQyxFQUFFdS9CLEtBQUt2L0IsRUFBRW8vQixVQUFVci9CLEVBQUVDLEVBQUV1L0IsS0FBS3gvQixFQUFFOFUsUUFBUTdVLEVBQUUwMUIsV0FBV2o3QixFQUFFaTdCLFdBQVcxMUIsRUFBRXEvQixtQkFBbUJqUCxLQUFJcndCLEVBQUU4VSxRQUFRLEtBQUtwYSxFQUFFMDhCLEdBQUVyaUIsUUFBUTJZLEdBQUUwSixHQUFFbDNCLEVBQUksRUFBRnhGLEVBQUksRUFBSSxFQUFGQSxHQUFLc0YsR0FBRyxLQUFLLEtBQUssR0FBRyxLQUFLLEdBQUcsT0FBT3dnQyxLQUFLLE9BQU8vbEMsR0FBRyxPQUFPQSxFQUFFZ2EsZ0JBQWlCLE9BQU8vWixFQUFFK1osZ0JBQWdCLGtDQUFrQ3hVLEVBQUVnMkIsT0FBT3Y3QixFQUFFNlosT0FBTyxHQUFHLEtBQUssTUFBTWxVLE1BQU1rRSxFQUFFLElBQUk3SixFQUFFNE8sTUFDaGQsU0FBU20zQixHQUFHaG1DLEdBQUcsT0FBT0EsRUFBRTZPLEtBQUssS0FBSyxFQUFFNGtCLEdBQUd6ekIsRUFBRW9ELE9BQU9zd0IsS0FBSyxJQUFJenpCLEVBQUVELEVBQUU4WixNQUFNLE9BQVMsS0FBRjdaLEdBQVFELEVBQUU4WixPQUFTLEtBQUg3WixFQUFRLEdBQUdELEdBQUcsS0FBSyxLQUFLLEVBQWdDLEdBQTlCdzhCLEtBQUt4SixHQUFFSSxJQUFHSixHQUFFRyxJQUFHd0ssS0FBa0IsSUFBTyxJQUFwQjE5QixFQUFFRCxFQUFFOFosUUFBb0IsTUFBTWxVLE1BQU1rRSxFQUFFLE1BQXlCLE9BQW5COUosRUFBRThaLE9BQVMsS0FBSDdaLEVBQVEsR0FBVUQsRUFBRSxLQUFLLEVBQUUsT0FBTzA4QixHQUFHMThCLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBT2d6QixHQUFFMkosSUFBZSxNQUFaMThCLEVBQUVELEVBQUU4WixRQUFjOVosRUFBRThaLE9BQVMsS0FBSDdaLEVBQVEsR0FBR0QsR0FBRyxLQUFLLEtBQUssR0FBRyxPQUFPZ3pCLEdBQUUySixJQUFHLEtBQUssS0FBSyxFQUFFLE9BQU9ILEtBQUssS0FBSyxLQUFLLEdBQUcsT0FBTzdGLEdBQUczMkIsR0FBRyxLQUFLLEtBQUssR0FBRyxLQUFLLEdBQUcsT0FBTytsQyxLQUFLLEtBQUssUUFBUSxPQUFPLE1BQ3JhLFNBQVNFLEdBQUdqbUMsRUFBRUMsR0FBRyxJQUFJLElBQUlzRixFQUFFLEdBQUdDLEVBQUV2RixFQUFFLEdBQUdzRixHQUFHcUosRUFBR3BKLEdBQUdBLEVBQUVBLEVBQUVxVSxhQUFhclUsR0FBRyxJQUFJSixFQUFFRyxFQUFFLE1BQU1FLEdBQUdMLEVBQUUsNkJBQTZCSyxFQUFFeWdDLFFBQVEsS0FBS3pnQyxFQUFFd0ksTUFBTSxNQUFNLENBQUNpQyxNQUFNbFEsRUFBRWEsT0FBT1osRUFBRWdPLE1BQU03SSxHQUFHLFNBQVMrZ0MsR0FBR25tQyxFQUFFQyxHQUFHLElBQUltbUMsUUFBUTFnQyxNQUFNekYsRUFBRWlRLE9BQU8sTUFBTTNLLEdBQUcwc0IsWUFBVyxXQUFXLE1BQU0xc0IsTUFsQjNQcStCLEdBQUcsU0FBUzVqQyxFQUFFQyxHQUFHLElBQUksSUFBSXNGLEVBQUV0RixFQUFFbWEsTUFBTSxPQUFPN1UsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRXNKLEtBQUssSUFBSXRKLEVBQUVzSixJQUFJN08sRUFBRTJTLFlBQVlwTixFQUFFMFMsZ0JBQWdCLEdBQUcsSUFBSTFTLEVBQUVzSixLQUFLLE9BQU90SixFQUFFNlUsTUFBTSxDQUFDN1UsRUFBRTZVLE1BQU1QLE9BQU90VSxFQUFFQSxFQUFFQSxFQUFFNlUsTUFBTSxTQUFTLEdBQUc3VSxJQUFJdEYsRUFBRSxNQUFNLEtBQUssT0FBT3NGLEVBQUU4VSxTQUFTLENBQUMsR0FBRyxPQUFPOVUsRUFBRXNVLFFBQVF0VSxFQUFFc1UsU0FBUzVaLEVBQUUsT0FBT3NGLEVBQUVBLEVBQUVzVSxPQUFPdFUsRUFBRThVLFFBQVFSLE9BQU90VSxFQUFFc1UsT0FBT3RVLEVBQUVBLEVBQUU4VSxVQUNoU3dwQixHQUFHLFNBQVM3akMsRUFBRUMsRUFBRXNGLEVBQUVDLEdBQUcsSUFBSUosRUFBRXBGLEVBQUU2OEIsY0FBYyxHQUFHejNCLElBQUlJLEVBQUUsQ0FBQ3hGLEVBQUVDLEVBQUVnWSxVQUFVbWtCLEdBQUdILEdBQUczaEIsU0FBUyxJQUF5VXZQLEVBQXJVdEYsRUFBRSxLQUFLLE9BQU9GLEdBQUcsSUFBSyxRQUFRSCxFQUFFa0wsRUFBR3RRLEVBQUVvRixHQUFHSSxFQUFFOEssRUFBR3RRLEVBQUV3RixHQUFHQyxFQUFFLEdBQUcsTUFBTSxJQUFLLFNBQVNMLEVBQUUrTCxHQUFHblIsRUFBRW9GLEdBQUdJLEVBQUUyTCxHQUFHblIsRUFBRXdGLEdBQUdDLEVBQUUsR0FBRyxNQUFNLElBQUssU0FBU0wsRUFBRXdFLEVBQUUsR0FBR3hFLEVBQUUsQ0FBQzhLLFdBQU0sSUFBUzFLLEVBQUVvRSxFQUFFLEdBQUdwRSxFQUFFLENBQUMwSyxXQUFNLElBQVN6SyxFQUFFLEdBQUcsTUFBTSxJQUFLLFdBQVdMLEVBQUV3TSxHQUFHNVIsRUFBRW9GLEdBQUdJLEVBQUVvTSxHQUFHNVIsRUFBRXdGLEdBQUdDLEVBQUUsR0FBRyxNQUFNLFFBQVEsbUJBQW9CTCxFQUFFa2dDLFNBQVMsbUJBQW9COS9CLEVBQUU4L0IsVUFBVXRsQyxFQUFFdWxDLFFBQVE5VCxJQUF5QixJQUFJdlksS0FBekI3QixHQUFHOVIsRUFBRUMsR0FBU0QsRUFBRSxLQUFjSCxFQUFFLElBQUlJLEVBQUVuRSxlQUFlNlgsSUFBSTlULEVBQUUvRCxlQUFlNlgsSUFBSSxNQUFNOVQsRUFBRThULEdBQUcsR0FBRyxVQUMzZUEsRUFBRSxDQUFDLElBQUl2SyxFQUFFdkosRUFBRThULEdBQUcsSUFBSW5PLEtBQUs0RCxFQUFFQSxFQUFFdE4sZUFBZTBKLEtBQUt4RixJQUFJQSxFQUFFLElBQUlBLEVBQUV3RixHQUFHLFFBQVEsNEJBQTRCbU8sR0FBRyxhQUFhQSxHQUFHLG1DQUFtQ0EsR0FBRyw2QkFBNkJBLEdBQUcsY0FBY0EsSUFBSWhQLEVBQUc3SSxlQUFlNlgsR0FBR3pULElBQUlBLEVBQUUsS0FBS0EsRUFBRUEsR0FBRyxJQUFJdkUsS0FBS2dZLEVBQUUsT0FBTyxJQUFJQSxLQUFLMVQsRUFBRSxDQUFDLElBQUlrSixFQUFFbEosRUFBRTBULEdBQXlCLEdBQXRCdkssRUFBRSxNQUFNdkosRUFBRUEsRUFBRThULFFBQUcsRUFBVTFULEVBQUVuRSxlQUFlNlgsSUFBSXhLLElBQUlDLElBQUksTUFBTUQsR0FBRyxNQUFNQyxHQUFHLEdBQUcsVUFBVXVLLEVBQUUsR0FBR3ZLLEVBQUUsQ0FBQyxJQUFJNUQsS0FBSzRELEdBQUdBLEVBQUV0TixlQUFlMEosSUFBSTJELEdBQUdBLEVBQUVyTixlQUFlMEosS0FBS3hGLElBQUlBLEVBQUUsSUFBSUEsRUFBRXdGLEdBQUcsSUFBSSxJQUFJQSxLQUFLMkQsRUFBRUEsRUFBRXJOLGVBQWUwSixJQUFJNEQsRUFBRTVELEtBQUsyRCxFQUFFM0QsS0FBS3hGLElBQ2xmQSxFQUFFLElBQUlBLEVBQUV3RixHQUFHMkQsRUFBRTNELFNBQVN4RixJQUFJRSxJQUFJQSxFQUFFLElBQUlBLEVBQUV2RSxLQUFLZ1ksRUFBRTNULElBQUlBLEVBQUVtSixNQUFNLDRCQUE0QndLLEdBQUd4SyxFQUFFQSxFQUFFQSxFQUFFcWpCLFlBQU8sRUFBT3BqQixFQUFFQSxFQUFFQSxFQUFFb2pCLFlBQU8sRUFBTyxNQUFNcmpCLEdBQUdDLElBQUlELElBQUlqSixFQUFFQSxHQUFHLElBQUl2RSxLQUFLZ1ksRUFBRXhLLElBQUksYUFBYXdLLEVBQUUsaUJBQWtCeEssR0FBRyxpQkFBa0JBLElBQUlqSixFQUFFQSxHQUFHLElBQUl2RSxLQUFLZ1ksRUFBRSxHQUFHeEssR0FBRyxtQ0FBbUN3SyxHQUFHLDZCQUE2QkEsSUFBSWhQLEVBQUc3SSxlQUFlNlgsSUFBSSxNQUFNeEssR0FBRyxhQUFhd0ssR0FBR3dXLEdBQUUsU0FBUzF2QixHQUFHeUYsR0FBR2tKLElBQUlELElBQUlqSixFQUFFLEtBQUssaUJBQWtCaUosR0FBRyxPQUFPQSxHQUFHQSxFQUFFTSxXQUFXM0IsRUFBR3FCLEVBQUVuTyxZQUFZa0YsRUFBRUEsR0FBRyxJQUFJdkUsS0FBS2dZLEVBQUV4SyxJQUFJbkosSUFBSUUsRUFBRUEsR0FBRyxJQUFJdkUsS0FBSyxRQUMvZXFFLEdBQUcsSUFBSTJULEVBQUV6VCxHQUFLeEYsRUFBRTAzQixZQUFZemUsS0FBRWpaLEVBQUU2WixPQUFPLEtBQUlncUIsR0FBRyxTQUFTOWpDLEVBQUVDLEVBQUVzRixFQUFFQyxHQUFHRCxJQUFJQyxJQUFJdkYsRUFBRTZaLE9BQU8sSUFjZ0wsSUFBSXVzQixHQUFHLG1CQUFvQkMsUUFBUUEsUUFBUW5yQixJQUFJLFNBQVNvckIsR0FBR3ZtQyxFQUFFQyxFQUFFc0YsSUFBR0EsRUFBRTR5QixJQUFJLEVBQUU1eUIsSUFBS3NKLElBQUksRUFBRXRKLEVBQUUreUIsUUFBUSxDQUFDcnZCLFFBQVEsTUFBTSxJQUFJekQsRUFBRXZGLEVBQUVpUSxNQUFzRCxPQUFoRDNLLEVBQUVnekIsU0FBUyxXQUFXaU8sS0FBS0EsSUFBRyxFQUFHQyxHQUFHamhDLEdBQUcyZ0MsR0FBR25tQyxFQUFFQyxJQUFXc0YsRUFDcGIsU0FBU21oQyxHQUFHMW1DLEVBQUVDLEVBQUVzRixJQUFHQSxFQUFFNHlCLElBQUksRUFBRTV5QixJQUFLc0osSUFBSSxFQUFFLElBQUlySixFQUFFeEYsRUFBRW9ELEtBQUtKLHlCQUF5QixHQUFHLG1CQUFvQndDLEVBQUUsQ0FBQyxJQUFJSixFQUFFbkYsRUFBRWlRLE1BQU0zSyxFQUFFK3lCLFFBQVEsV0FBbUIsT0FBUjZOLEdBQUdubUMsRUFBRUMsR0FBVXVGLEVBQUVKLElBQUksSUFBSUssRUFBRXpGLEVBQUVpWSxVQUE4TyxPQUFwTyxPQUFPeFMsR0FBRyxtQkFBb0JBLEVBQUVraEMsb0JBQW9CcGhDLEVBQUVnekIsU0FBUyxXQUFXLG1CQUFvQi95QixJQUFJLE9BQU9vaEMsR0FBR0EsR0FBRyxJQUFJMzhCLElBQUksQ0FBQzVILE9BQU91a0MsR0FBR3Y4QixJQUFJaEksTUFBTThqQyxHQUFHbm1DLEVBQUVDLElBQUksSUFBSXNGLEVBQUV0RixFQUFFZ08sTUFBTTVMLEtBQUtza0Msa0JBQWtCMW1DLEVBQUVpUSxNQUFNLENBQUMyMkIsZUFBZSxPQUFPdGhDLEVBQUVBLEVBQUUsT0FBY0EsRUFBRSxJQUFJdWhDLEdBQUcsbUJBQW9CQyxRQUFRQSxRQUFROThCLElBQ3hjLFNBQVMrOEIsR0FBR2huQyxHQUFHLElBQUlDLEVBQUVELEVBQUU2NkIsSUFBSSxHQUFHLE9BQU81NkIsRUFBRSxHQUFHLG1CQUFvQkEsRUFBRSxJQUFJQSxFQUFFLE1BQU0sTUFBTXNGLEdBQUcwaEMsR0FBR2puQyxFQUFFdUYsUUFBUXRGLEVBQUVxYSxRQUFRLEtBQUssU0FBUzRzQixHQUFHbG5DLEVBQUVDLEdBQUcsT0FBT0EsRUFBRTRPLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU8sS0FBSyxFQUFFLEdBQVcsSUFBUjVPLEVBQUU2WixPQUFXLE9BQU85WixFQUFFLENBQUMsSUFBSXVGLEVBQUV2RixFQUFFNjhCLGNBQWNyM0IsRUFBRXhGLEVBQUVnYSxjQUE0Qi9aLEdBQWRELEVBQUVDLEVBQUVnWSxXQUFjc2lCLHdCQUF3QnQ2QixFQUFFaUosY0FBY2pKLEVBQUVtRCxLQUFLbUMsRUFBRTh3QixHQUFHcDJCLEVBQUVtRCxLQUFLbUMsR0FBR0MsR0FBR3hGLEVBQUVtbkMsb0NBQW9DbG5DLEVBQUUsT0FBTyxLQUFLLEVBQTZDLFlBQW5DLElBQVJBLEVBQUU2WixPQUFXc1ksR0FBR255QixFQUFFZ1ksVUFBVXNFLGdCQUFzQixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsT0FBTyxNQUFNM1csTUFBTWtFLEVBQUUsTUFDNWUsU0FBU3M5QixHQUFHcG5DLEVBQUVDLEVBQUVzRixHQUFHLE9BQU9BLEVBQUVzSixLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBZ0QsR0FBRyxRQUFoQzVPLEVBQUUsUUFBbEJBLEVBQUVzRixFQUFFb3lCLGFBQXVCMTNCLEVBQUVpN0IsV0FBVyxNQUFpQixDQUFDbDdCLEVBQUVDLEVBQUVBLEVBQUVzM0IsS0FBSyxFQUFFLENBQUMsR0FBRyxJQUFXLEVBQU52M0IsRUFBRTZPLEtBQU8sQ0FBQyxJQUFJckosRUFBRXhGLEVBQUV5Z0MsT0FBT3pnQyxFQUFFMGdDLFFBQVFsN0IsSUFBSXhGLEVBQUVBLEVBQUV1M0IsV0FBV3YzQixJQUFJQyxHQUFnRCxHQUFHLFFBQWhDQSxFQUFFLFFBQWxCQSxFQUFFc0YsRUFBRW95QixhQUF1QjEzQixFQUFFaTdCLFdBQVcsTUFBaUIsQ0FBQ2w3QixFQUFFQyxFQUFFQSxFQUFFczNCLEtBQUssRUFBRSxDQUFDLElBQUlueUIsRUFBRXBGLEVBQUV3RixFQUFFSixFQUFFbXlCLEtBQWEsSUFBTyxHQUFmbnlCLEVBQUVBLEVBQUV5SixPQUFlLElBQU8sRUFBRnpKLEtBQU9paUMsR0FBRzloQyxFQUFFdkYsR0FBR3NuQyxHQUFHL2hDLEVBQUV2RixJQUFJQSxFQUFFd0YsUUFBUXhGLElBQUlDLEdBQUcsT0FBTyxLQUFLLEVBQ3RSLE9BRHdSRCxFQUFFdUYsRUFBRTBTLFVBQWtCLEVBQVIxUyxFQUFFdVUsUUFBVSxPQUFPN1osRUFBRUQsRUFBRTA2QixxQkFBcUJsMUIsRUFBRUQsRUFBRTJELGNBQWMzRCxFQUFFbkMsS0FBS25ELEVBQUU0OEIsY0FBY3hHLEdBQUc5d0IsRUFBRW5DLEtBQUtuRCxFQUFFNDhCLGVBQWU3OEIsRUFBRXdqQyxtQkFBbUJoK0IsRUFDeGdCdkYsRUFBRStaLGNBQWNoYSxFQUFFbW5DLDRDQUF1RCxRQUFoQmxuQyxFQUFFc0YsRUFBRW95QixjQUFzQm9CLEdBQUd4ekIsRUFBRXRGLEVBQUVELElBQVUsS0FBSyxFQUFrQixHQUFHLFFBQW5CQyxFQUFFc0YsRUFBRW95QixhQUF3QixDQUFRLEdBQVAzM0IsRUFBRSxLQUFRLE9BQU91RixFQUFFNlUsTUFBTSxPQUFPN1UsRUFBRTZVLE1BQU12TCxLQUFLLEtBQUssRUFBRTdPLEVBQUV1RixFQUFFNlUsTUFBTW5DLFVBQVUsTUFBTSxLQUFLLEVBQUVqWSxFQUFFdUYsRUFBRTZVLE1BQU1uQyxVQUFVOGdCLEdBQUd4ekIsRUFBRXRGLEVBQUVELEdBQUcsT0FBTyxLQUFLLEVBQTJFLE9BQXpFQSxFQUFFdUYsRUFBRTBTLGVBQVUsT0FBT2hZLEdBQVcsRUFBUnNGLEVBQUV1VSxPQUFTOFgsR0FBR3JzQixFQUFFbkMsS0FBS21DLEVBQUVzM0IsZ0JBQWdCNzhCLEVBQUV1bkMsU0FBZSxLQUFLLEVBQVMsS0FBSyxFQUFTLEtBQUssR0FBRyxPQUFPLEtBQUssR0FDelksWUFENFksT0FBT2hpQyxFQUFFeVUsZ0JBQWdCelUsRUFBRUEsRUFBRXFVLFVBQVUsT0FBT3JVLElBQUlBLEVBQUVBLEVBQUV5VSxjQUFjLE9BQU96VSxJQUFJQSxFQUFFQSxFQUFFMFUsV0FBVyxPQUFPMVUsR0FBR3lYLEdBQUd6WCxPQUNoZixLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPLE1BQU1LLE1BQU1rRSxFQUFFLE1BQzVFLFNBQVMwOUIsR0FBR3huQyxFQUFFQyxHQUFHLElBQUksSUFBSXNGLEVBQUV2RixJQUFJLENBQUMsR0FBRyxJQUFJdUYsRUFBRXNKLElBQUksQ0FBQyxJQUFJckosRUFBRUQsRUFBRTBTLFVBQVUsR0FBR2hZLEVBQVksbUJBQVZ1RixFQUFFQSxFQUFFd1EsT0FBNEJFLFlBQVkxUSxFQUFFMFEsWUFBWSxVQUFVLE9BQU8sYUFBYTFRLEVBQUVpaUMsUUFBUSxXQUFXLENBQUNqaUMsRUFBRUQsRUFBRTBTLFVBQVUsSUFBSTdTLEVBQUVHLEVBQUVzM0IsY0FBYzdtQixNQUFNNVEsRUFBRSxNQUFTQSxHQUFhQSxFQUFFL0QsZUFBZSxXQUFXK0QsRUFBRXFpQyxRQUFRLEtBQUtqaUMsRUFBRXdRLE1BQU15eEIsUUFBUTN4QixHQUFHLFVBQVUxUSxTQUFTLEdBQUcsSUFBSUcsRUFBRXNKLElBQUl0SixFQUFFMFMsVUFBVWhGLFVBQVVoVCxFQUFFLEdBQUdzRixFQUFFczNCLG1CQUFtQixJQUFJLEtBQUt0M0IsRUFBRXNKLEtBQUssS0FBS3RKLEVBQUVzSixLQUFLLE9BQU90SixFQUFFeVUsZUFBZXpVLElBQUl2RixJQUFJLE9BQU91RixFQUFFNlUsTUFBTSxDQUFDN1UsRUFBRTZVLE1BQU1QLE9BQU90VSxFQUFFQSxFQUFFQSxFQUFFNlUsTUFBTSxTQUFTLEdBQUc3VSxJQUN0ZnZGLEVBQUUsTUFBTSxLQUFLLE9BQU91RixFQUFFOFUsU0FBUyxDQUFDLEdBQUcsT0FBTzlVLEVBQUVzVSxRQUFRdFUsRUFBRXNVLFNBQVM3WixFQUFFLE9BQU91RixFQUFFQSxFQUFFc1UsT0FBT3RVLEVBQUU4VSxRQUFRUixPQUFPdFUsRUFBRXNVLE9BQU90VSxFQUFFQSxFQUFFOFUsU0FDakgsU0FBU3F0QixHQUFHMW5DLEVBQUVDLEdBQUcsR0FBR2kwQixJQUFJLG1CQUFvQkEsR0FBR3lULHFCQUFxQixJQUFJelQsR0FBR3lULHFCQUFxQjFULEdBQUdoMEIsR0FBRyxNQUFNd0YsSUFBSSxPQUFPeEYsRUFBRTRPLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBbUIsR0FBRyxRQUFuQjdPLEVBQUVDLEVBQUUwM0IsY0FBeUMsUUFBZjMzQixFQUFFQSxFQUFFazdCLFlBQXFCLENBQUMsSUFBSTMxQixFQUFFdkYsRUFBRUEsRUFBRXUzQixLQUFLLEVBQUUsQ0FBQyxJQUFJL3hCLEVBQUVELEVBQUVILEVBQUVJLEVBQUVrN0IsUUFBZ0IsR0FBUmw3QixFQUFFQSxFQUFFcUosU0FBTyxJQUFTekosRUFBRSxHQUFHLElBQU8sRUFBRkksR0FBSzZoQyxHQUFHcG5DLEVBQUVzRixPQUFPLENBQUNDLEVBQUV2RixFQUFFLElBQUltRixJQUFJLE1BQU1LLEdBQUd3aEMsR0FBR3poQyxFQUFFQyxJQUFJRixFQUFFQSxFQUFFZ3lCLFdBQVdoeUIsSUFBSXZGLEdBQUcsTUFBTSxLQUFLLEVBQXNCLEdBQXBCZ25DLEdBQUcvbUMsR0FBb0IsbUJBQWpCRCxFQUFFQyxFQUFFZ1ksV0FBbUMydkIscUJBQXFCLElBQUk1bkMsRUFBRStILE1BQU05SCxFQUFFNDhCLGNBQWM3OEIsRUFBRWk2QixNQUFNaDZCLEVBQUUrWixjQUFjaGEsRUFBRTRuQyx1QkFBdUIsTUFBTW5pQyxHQUFHd2hDLEdBQUdobkMsRUFDL2dCd0YsR0FBRyxNQUFNLEtBQUssRUFBRXVoQyxHQUFHL21DLEdBQUcsTUFBTSxLQUFLLEVBQUU0bkMsR0FBRzduQyxFQUFFQyxJQUFJLFNBQVM2bkMsR0FBRzluQyxHQUFHQSxFQUFFNFosVUFBVSxLQUFLNVosRUFBRW9hLE1BQU0sS0FBS3BhLEVBQUVnM0IsYUFBYSxLQUFLaDNCLEVBQUVvN0IsWUFBWSxLQUFLcDdCLEVBQUVrN0IsV0FBVyxLQUFLbDdCLEVBQUU2OEIsY0FBYyxLQUFLNzhCLEVBQUVnYSxjQUFjLEtBQUtoYSxFQUFFcTlCLGFBQWEsS0FBS3I5QixFQUFFNlosT0FBTyxLQUFLN1osRUFBRTIzQixZQUFZLEtBQUssU0FBU29RLEdBQUcvbkMsR0FBRyxPQUFPLElBQUlBLEVBQUU2TyxLQUFLLElBQUk3TyxFQUFFNk8sS0FBSyxJQUFJN08sRUFBRTZPLElBQ25TLFNBQVNtNUIsR0FBR2hvQyxHQUFHQSxFQUFFLENBQUMsSUFBSSxJQUFJQyxFQUFFRCxFQUFFNlosT0FBTyxPQUFPNVosR0FBRyxDQUFDLEdBQUc4bkMsR0FBRzluQyxHQUFHLE1BQU1ELEVBQUVDLEVBQUVBLEVBQUU0WixPQUFPLE1BQU1qVSxNQUFNa0UsRUFBRSxNQUFPLElBQUl2RSxFQUFFdEYsRUFBZ0IsT0FBZEEsRUFBRXNGLEVBQUUwUyxVQUFpQjFTLEVBQUVzSixLQUFLLEtBQUssRUFBRSxJQUFJckosR0FBRSxFQUFHLE1BQU0sS0FBSyxFQUErQixLQUFLLEVBQUV2RixFQUFFQSxFQUFFc2MsY0FBYy9XLEdBQUUsRUFBRyxNQUFNLFFBQVEsTUFBTUksTUFBTWtFLEVBQUUsTUFBZSxHQUFSdkUsRUFBRXVVLFFBQVdoSCxHQUFHN1MsRUFBRSxJQUFJc0YsRUFBRXVVLFFBQVEsSUFBSTlaLEVBQUVDLEVBQUUsSUFBSXNGLEVBQUV2RixJQUFJLENBQUMsS0FBSyxPQUFPdUYsRUFBRThVLFNBQVMsQ0FBQyxHQUFHLE9BQU85VSxFQUFFc1UsUUFBUWt1QixHQUFHeGlDLEVBQUVzVSxRQUFRLENBQUN0VSxFQUFFLEtBQUssTUFBTXZGLEVBQUV1RixFQUFFQSxFQUFFc1UsT0FBaUMsSUFBMUJ0VSxFQUFFOFUsUUFBUVIsT0FBT3RVLEVBQUVzVSxPQUFXdFUsRUFBRUEsRUFBRThVLFFBQVEsSUFBSTlVLEVBQUVzSixLQUFLLElBQUl0SixFQUFFc0osS0FBSyxLQUFLdEosRUFBRXNKLEtBQUssQ0FBQyxHQUFXLEVBQVJ0SixFQUFFdVUsTUFBUSxTQUFTN1osRUFBRSxHQUFHLE9BQy9lc0YsRUFBRTZVLE9BQU8sSUFBSTdVLEVBQUVzSixJQUFJLFNBQVM1TyxFQUFPc0YsRUFBRTZVLE1BQU1QLE9BQU90VSxFQUFFQSxFQUFFQSxFQUFFNlUsTUFBTSxLQUFhLEVBQVI3VSxFQUFFdVUsT0FBUyxDQUFDdlUsRUFBRUEsRUFBRTBTLFVBQVUsTUFBTWpZLEdBQUd3RixFQUFFeWlDLEdBQUdqb0MsRUFBRXVGLEVBQUV0RixHQUFHaW9DLEdBQUdsb0MsRUFBRXVGLEVBQUV0RixHQUN6SCxTQUFTZ29DLEdBQUdqb0MsRUFBRUMsRUFBRXNGLEdBQUcsSUFBSUMsRUFBRXhGLEVBQUU2TyxJQUFJekosRUFBRSxJQUFJSSxHQUFHLElBQUlBLEVBQUUsR0FBR0osRUFBRXBGLEVBQUVvRixFQUFFcEYsRUFBRWlZLFVBQVVqWSxFQUFFaVksVUFBVXVYLFNBQVN2dkIsRUFBRSxJQUFJc0YsRUFBRXlOLFNBQVN6TixFQUFFb1MsV0FBV3d3QixhQUFhbm9DLEVBQUVDLEdBQUdzRixFQUFFNGlDLGFBQWFub0MsRUFBRUMsSUFBSSxJQUFJc0YsRUFBRXlOLFVBQVUvUyxFQUFFc0YsRUFBRW9TLFlBQWF3d0IsYUFBYW5vQyxFQUFFdUYsSUFBS3RGLEVBQUVzRixHQUFJb04sWUFBWTNTLEdBQTRCLE9BQXhCdUYsRUFBRUEsRUFBRTZpQyxzQkFBMEMsT0FBT25vQyxFQUFFc2xDLFVBQVV0bEMsRUFBRXNsQyxRQUFROVQsVUFBVSxHQUFHLElBQUlqc0IsR0FBYyxRQUFWeEYsRUFBRUEsRUFBRW9hLE9BQWdCLElBQUk2dEIsR0FBR2pvQyxFQUFFQyxFQUFFc0YsR0FBR3ZGLEVBQUVBLEVBQUVxYSxRQUFRLE9BQU9yYSxHQUFHaW9DLEdBQUdqb0MsRUFBRUMsRUFBRXNGLEdBQUd2RixFQUFFQSxFQUFFcWEsUUFDOVksU0FBUzZ0QixHQUFHbG9DLEVBQUVDLEVBQUVzRixHQUFHLElBQUlDLEVBQUV4RixFQUFFNk8sSUFBSXpKLEVBQUUsSUFBSUksR0FBRyxJQUFJQSxFQUFFLEdBQUdKLEVBQUVwRixFQUFFb0YsRUFBRXBGLEVBQUVpWSxVQUFValksRUFBRWlZLFVBQVV1WCxTQUFTdnZCLEVBQUVzRixFQUFFNGlDLGFBQWFub0MsRUFBRUMsR0FBR3NGLEVBQUVvTixZQUFZM1MsUUFBUSxHQUFHLElBQUl3RixHQUFjLFFBQVZ4RixFQUFFQSxFQUFFb2EsT0FBZ0IsSUFBSTh0QixHQUFHbG9DLEVBQUVDLEVBQUVzRixHQUFHdkYsRUFBRUEsRUFBRXFhLFFBQVEsT0FBT3JhLEdBQUdrb0MsR0FBR2xvQyxFQUFFQyxFQUFFc0YsR0FBR3ZGLEVBQUVBLEVBQUVxYSxRQUNyTixTQUFTd3RCLEdBQUc3bkMsRUFBRUMsR0FBRyxJQUFJLElBQWFtRixFQUFFSyxFQUFYRixFQUFFdEYsRUFBRXVGLEdBQUUsSUFBUyxDQUFDLElBQUlBLEVBQUUsQ0FBQ0EsRUFBRUQsRUFBRXNVLE9BQU83WixFQUFFLE9BQU8sQ0FBQyxHQUFHLE9BQU93RixFQUFFLE1BQU1JLE1BQU1rRSxFQUFFLE1BQW9CLE9BQWQxRSxFQUFFSSxFQUFFeVMsVUFBaUJ6UyxFQUFFcUosS0FBSyxLQUFLLEVBQUVwSixHQUFFLEVBQUcsTUFBTXpGLEVBQUUsS0FBSyxFQUFpQyxLQUFLLEVBQUVvRixFQUFFQSxFQUFFbVgsY0FBYzlXLEdBQUUsRUFBRyxNQUFNekYsRUFBRXdGLEVBQUVBLEVBQUVxVSxPQUFPclUsR0FBRSxFQUFHLEdBQUcsSUFBSUQsRUFBRXNKLEtBQUssSUFBSXRKLEVBQUVzSixJQUFJLENBQUM3TyxFQUFFLElBQUksSUFBSStLLEVBQUUvSyxFQUFFMk8sRUFBRXBKLEVBQUVtSixFQUFFQyxJQUFJLEdBQUcrNEIsR0FBRzM4QixFQUFFMkQsR0FBRyxPQUFPQSxFQUFFMEwsT0FBTyxJQUFJMUwsRUFBRUcsSUFBSUgsRUFBRTBMLE1BQU1QLE9BQU9uTCxFQUFFQSxFQUFFQSxFQUFFMEwsVUFBVSxDQUFDLEdBQUcxTCxJQUFJQyxFQUFFLE1BQU0zTyxFQUFFLEtBQUssT0FBTzBPLEVBQUUyTCxTQUFTLENBQUMsR0FBRyxPQUFPM0wsRUFBRW1MLFFBQVFuTCxFQUFFbUwsU0FBU2xMLEVBQUUsTUFBTTNPLEVBQUUwTyxFQUFFQSxFQUFFbUwsT0FBT25MLEVBQUUyTCxRQUFRUixPQUFPbkwsRUFBRW1MLE9BQU9uTCxFQUFFQSxFQUFFMkwsUUFBUTVVLEdBQUdzRixFQUFFM0YsRUFBRXVKLEVBQUVwSixFQUFFMFMsVUFDcmYsSUFBSWxOLEVBQUVpSSxTQUFTakksRUFBRTRNLFdBQVdqRixZQUFZL0QsR0FBRzVELEVBQUUySCxZQUFZL0QsSUFBSXZKLEVBQUVzTixZQUFZbk4sRUFBRTBTLGdCQUFnQixHQUFHLElBQUkxUyxFQUFFc0osS0FBSyxHQUFHLE9BQU90SixFQUFFNlUsTUFBTSxDQUFDaFYsRUFBRUcsRUFBRTBTLFVBQVVzRSxjQUFjOVcsR0FBRSxFQUFHRixFQUFFNlUsTUFBTVAsT0FBT3RVLEVBQUVBLEVBQUVBLEVBQUU2VSxNQUFNLGVBQWUsR0FBR3N0QixHQUFHMW5DLEVBQUV1RixHQUFHLE9BQU9BLEVBQUU2VSxNQUFNLENBQUM3VSxFQUFFNlUsTUFBTVAsT0FBT3RVLEVBQUVBLEVBQUVBLEVBQUU2VSxNQUFNLFNBQVMsR0FBRzdVLElBQUl0RixFQUFFLE1BQU0sS0FBSyxPQUFPc0YsRUFBRThVLFNBQVMsQ0FBQyxHQUFHLE9BQU85VSxFQUFFc1UsUUFBUXRVLEVBQUVzVSxTQUFTNVosRUFBRSxPQUFrQixLQUFYc0YsRUFBRUEsRUFBRXNVLFFBQWFoTCxNQUFNckosR0FBRSxHQUFJRCxFQUFFOFUsUUFBUVIsT0FBT3RVLEVBQUVzVSxPQUFPdFUsRUFBRUEsRUFBRThVLFNBQ2xaLFNBQVNndUIsR0FBR3JvQyxFQUFFQyxHQUFHLE9BQU9BLEVBQUU0TyxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsSUFBSXRKLEVBQUV0RixFQUFFMDNCLFlBQXlDLEdBQUcsUUFBaENweUIsRUFBRSxPQUFPQSxFQUFFQSxFQUFFMjFCLFdBQVcsTUFBaUIsQ0FBQyxJQUFJMTFCLEVBQUVELEVBQUVBLEVBQUVneUIsS0FBSyxHQUFHLElBQVcsRUFBTi94QixFQUFFcUosT0FBUzdPLEVBQUV3RixFQUFFazdCLFFBQVFsN0IsRUFBRWs3QixhQUFRLE9BQU8sSUFBUzFnQyxHQUFHQSxLQUFLd0YsRUFBRUEsRUFBRSt4QixXQUFXL3hCLElBQUlELEdBQUcsT0FBTyxLQUFLLEVBQUUsT0FBTyxLQUFLLEVBQWdCLEdBQUcsT0FBakJBLEVBQUV0RixFQUFFZ1ksV0FBcUIsQ0FBQ3pTLEVBQUV2RixFQUFFNDhCLGNBQWMsSUFBSXozQixFQUFFLE9BQU9wRixFQUFFQSxFQUFFNjhCLGNBQWNyM0IsRUFBRXhGLEVBQUVDLEVBQUVtRCxLQUFLLElBQUlxQyxFQUFFeEYsRUFBRTAzQixZQUErQixHQUFuQjEzQixFQUFFMDNCLFlBQVksS0FBUSxPQUFPbHlCLEVBQUUsQ0FBZ0YsSUFBL0VGLEVBQUVvdEIsSUFBSW50QixFQUFFLFVBQVV4RixHQUFHLFVBQVV3RixFQUFFcEMsTUFBTSxNQUFNb0MsRUFBRWxDLE1BQU13TixHQUFHdkwsRUFBRUMsR0FBRzhSLEdBQUd0WCxFQUFFb0YsR0FBR25GLEVBQUVxWCxHQUFHdFgsRUFBRXdGLEdBQU9KLEVBQUUsRUFBRUEsRUFBRUssRUFBRXhFLE9BQU9tRSxHQUNsZixFQUFFLENBQUMsSUFBSTJGLEVBQUV0RixFQUFFTCxHQUFHdUosRUFBRWxKLEVBQUVMLEVBQUUsR0FBRyxVQUFVMkYsRUFBRWdMLEdBQUd4USxFQUFFb0osR0FBRyw0QkFBNEI1RCxFQUFFdUgsR0FBRy9NLEVBQUVvSixHQUFHLGFBQWE1RCxFQUFFK0gsR0FBR3ZOLEVBQUVvSixHQUFHL0MsRUFBR3JHLEVBQUV3RixFQUFFNEQsRUFBRTFPLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFFBQVErUSxHQUFHeEwsRUFBRUMsR0FBRyxNQUFNLElBQUssV0FBV3VNLEdBQUd4TSxFQUFFQyxHQUFHLE1BQU0sSUFBSyxTQUFTeEYsRUFBRXVGLEVBQUVrTCxjQUFjMjBCLFlBQVk3L0IsRUFBRWtMLGNBQWMyMEIsY0FBYzUvQixFQUFFNi9CLFNBQW1CLE9BQVY1L0IsRUFBRUQsRUFBRTBLLE9BQWNxQixHQUFHaE0sSUFBSUMsRUFBRTYvQixTQUFTNS9CLEdBQUUsR0FBSXpGLE1BQU13RixFQUFFNi9CLFdBQVcsTUFBTTcvQixFQUFFZ0wsYUFBYWUsR0FBR2hNLElBQUlDLEVBQUU2L0IsU0FBUzcvQixFQUFFZ0wsY0FBYSxHQUFJZSxHQUFHaE0sSUFBSUMsRUFBRTYvQixTQUFTNy9CLEVBQUU2L0IsU0FBUyxHQUFHLElBQUcsTUFBTyxPQUFPLEtBQUssRUFBRSxHQUFHLE9BQU9wbEMsRUFBRWdZLFVBQVUsTUFBTXJTLE1BQU1rRSxFQUFFLE1BQy9jLFlBRHFkN0osRUFBRWdZLFVBQVVoRixVQUNqZmhULEVBQUU0OEIsZUFBcUIsS0FBSyxFQUE4RCxhQUE1RHQzQixFQUFFdEYsRUFBRWdZLFdBQVlxRSxVQUFVL1csRUFBRStXLFNBQVEsRUFBR1UsR0FBR3pYLEVBQUVnWCxpQkFBdUIsS0FBSyxHQUFHLE9BQU8sS0FBSyxHQUF5RCxPQUF0RCxPQUFPdGMsRUFBRStaLGdCQUFnQnN1QixHQUFHMVMsS0FBSTRSLEdBQUd2bkMsRUFBRW1hLE9BQU0sU0FBS211QixHQUFHdG9DLEdBQVUsS0FBSyxHQUFTLFlBQU5zb0MsR0FBR3RvQyxHQUFVLEtBQUssR0FBRyxPQUFPLEtBQUssR0FBRyxLQUFLLEdBQWdDLFlBQTdCdW5DLEdBQUd2bkMsRUFBRSxPQUFPQSxFQUFFK1osZUFBc0IsTUFBTXBVLE1BQU1rRSxFQUFFLE1BQU8sU0FBU3krQixHQUFHdm9DLEdBQUcsSUFBSUMsRUFBRUQsRUFBRTIzQixZQUFZLEdBQUcsT0FBTzEzQixFQUFFLENBQUNELEVBQUUyM0IsWUFBWSxLQUFLLElBQUlweUIsRUFBRXZGLEVBQUVpWSxVQUFVLE9BQU8xUyxJQUFJQSxFQUFFdkYsRUFBRWlZLFVBQVUsSUFBSTZ1QixJQUFJN21DLEVBQUVpSCxTQUFRLFNBQVNqSCxHQUFHLElBQUl1RixFQUFFZ2pDLEdBQUdyb0IsS0FBSyxLQUFLbmdCLEVBQUVDLEdBQUdzRixFQUFFcXFCLElBQUkzdkIsS0FBS3NGLEVBQUU4RSxJQUFJcEssR0FBR0EsRUFBRXdvQyxLQUFLampDLEVBQUVBLFFBQ25lLFNBQVNrakMsR0FBRzFvQyxFQUFFQyxHQUFHLE9BQU8sT0FBT0QsSUFBc0IsUUFBbEJBLEVBQUVBLEVBQUVnYSxnQkFBd0IsT0FBT2hhLEVBQUVpYSxhQUErQixRQUFsQmhhLEVBQUVBLEVBQUUrWixnQkFBd0IsT0FBTy9aLEVBQUVnYSxXQUFlLElBQUkwdUIsR0FBR3JwQixLQUFLc3BCLEtBQUtDLEdBQUd2OEIsRUFBR3d4Qix1QkFBdUJnTCxHQUFHeDhCLEVBQUdtMkIsa0JBQWtCc0csR0FBRSxFQUFFaEosR0FBRSxLQUFLaUosR0FBRSxLQUFLbkQsR0FBRSxFQUFFb0QsR0FBRyxFQUFFQyxHQUFHblcsR0FBRyxHQUFHMlMsR0FBRSxFQUFFeUQsR0FBRyxLQUFLQyxHQUFHLEVBQUV0USxHQUFHLEVBQUU2TSxHQUFHLEVBQUUwRCxHQUFHLEVBQUVDLEdBQUcsS0FBS2hCLEdBQUcsRUFBRXhDLEdBQUd5RCxJQUFTLFNBQVNDLEtBQUsxRCxHQUFHbFEsS0FBSSxJQUFJLElBOEJzRjZULEdBOUJsRkMsR0FBRSxLQUFLbEQsSUFBRyxFQUFHQyxHQUFHLEtBQUtHLEdBQUcsS0FBSytDLElBQUcsRUFBR0MsR0FBRyxLQUFLQyxHQUFHLEdBQUdDLEdBQUcsR0FBR0MsR0FBRyxHQUFHQyxHQUFHLEtBQUtDLEdBQUcsRUFBRUMsR0FBRyxLQUFLQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEtBQUtDLElBQUcsRUFBRyxTQUFTL1EsS0FBSyxPQUFPLElBQU8sR0FBRnVQLElBQU1uVCxNQUFLLElBQUl1VSxHQUFHQSxHQUFHQSxHQUFHdlUsS0FDM2UsU0FBUzZELEdBQUd6NUIsR0FBWSxHQUFHLElBQU8sR0FBbkJBLEVBQUVBLEVBQUV3N0IsT0FBa0IsT0FBTyxFQUFFLEdBQUcsSUFBTyxFQUFGeDdCLEdBQUssT0FBTyxLQUFLNjFCLEtBQUssRUFBRSxFQUFrQixHQUFoQixJQUFJdVUsS0FBS0EsR0FBR2hCLElBQU8sSUFBSWpULEdBQUd4WSxXQUFXLENBQUMsSUFBSTBzQixLQUFLQSxHQUFHLE9BQU9mLEdBQUdBLEdBQUc3cUIsYUFBYSxHQUFHemUsRUFBRW9xQyxHQUFHLElBQUlucUMsRUFBRSxTQUFTb3FDLEdBQXNELE9BQTdDLElBQU5wcUMsSUFBSUEsSUFBOEIsSUFBUEEsR0FBYkQsRUFBRSxTQUFTQSxJQUFPQSxLQUFVQyxFQUFFLE1BQWNBLEVBQTRELE9BQTFERCxFQUFFNjFCLEtBQXVCNzFCLEVBQUVpZixHQUFwQixJQUFPLEVBQUY4cEIsS0FBTSxLQUFLL29DLEVBQU8sR0FBUUEsRUF0SzNRLFNBQVlBLEdBQUcsT0FBT0EsR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPLEVBQUUsS0FBSyxHQUFHLE9BQU8sRUFBRSxRQUFRLE9BQU8sR0FzS3VKd3FDLENBQUd4cUMsR0FBVm9xQyxJQUNuUixTQUFTMVEsR0FBRzE1QixFQUFFQyxFQUFFc0YsR0FBRyxHQUFHLEdBQUcwa0MsR0FBRyxNQUFNQSxHQUFHLEVBQUVDLEdBQUcsS0FBS3RrQyxNQUFNa0UsRUFBRSxNQUFnQixHQUFHLFFBQWI5SixFQUFFeXFDLEdBQUd6cUMsRUFBRUMsSUFBZSxPQUFPLEtBQUttZixHQUFHcGYsRUFBRUMsRUFBRXNGLEdBQUd2RixJQUFJKy9CLEtBQUk0RixJQUFJMWxDLEVBQUUsSUFBSXlsQyxJQUFHRSxHQUFHNWxDLEVBQUU2bEMsS0FBSSxJQUFJcmdDLEVBQUVxd0IsS0FBSyxJQUFJNTFCLEVBQUUsSUFBTyxFQUFGOG9DLEtBQU0sSUFBTyxHQUFGQSxJQUFNMkIsR0FBRzFxQyxJQUFJMnFDLEdBQUczcUMsRUFBRXVGLEdBQUcsSUFBSXdqQyxLQUFJUyxLQUFLdlQsUUFBUSxJQUFPLEVBQUY4UyxLQUFNLEtBQUt2akMsR0FBRyxLQUFLQSxJQUFJLE9BQU93a0MsR0FBR0EsR0FBRyxJQUFJLy9CLElBQUksQ0FBQ2pLLElBQUlncUMsR0FBRzMvQixJQUFJckssSUFBSTJxQyxHQUFHM3FDLEVBQUV1RixJQUFJK2pDLEdBQUd0cEMsRUFBRSxTQUFTeXFDLEdBQUd6cUMsRUFBRUMsR0FBR0QsRUFBRWszQixPQUFPajNCLEVBQUUsSUFBSXNGLEVBQUV2RixFQUFFNFosVUFBcUMsSUFBM0IsT0FBT3JVLElBQUlBLEVBQUUyeEIsT0FBT2ozQixHQUFHc0YsRUFBRXZGLEVBQU1BLEVBQUVBLEVBQUU2WixPQUFPLE9BQU83WixHQUFHQSxFQUFFODJCLFlBQVk3MkIsRUFBZ0IsUUFBZHNGLEVBQUV2RixFQUFFNFosYUFBcUJyVSxFQUFFdXhCLFlBQVk3MkIsR0FBR3NGLEVBQUV2RixFQUFFQSxFQUFFQSxFQUFFNlosT0FBTyxPQUFPLElBQUl0VSxFQUFFc0osSUFBSXRKLEVBQUUwUyxVQUFVLEtBQ3plLFNBQVMweUIsR0FBRzNxQyxFQUFFQyxHQUFHLElBQUksSUFBSXNGLEVBQUV2RixFQUFFNHFDLGFBQWFwbEMsRUFBRXhGLEVBQUUyZSxlQUFldlosRUFBRXBGLEVBQUU0ZSxZQUFZblosRUFBRXpGLEVBQUU2cUMsZ0JBQWdCOS9CLEVBQUUvSyxFQUFFeWUsYUFBYSxFQUFFMVQsR0FBRyxDQUFDLElBQUk0RCxFQUFFLEdBQUdrUSxHQUFHOVQsR0FBRzJELEVBQUUsR0FBR0MsRUFBRXVLLEVBQUV6VCxFQUFFa0osR0FBRyxJQUFJLElBQUl1SyxHQUFHLEdBQUcsSUFBS3hLLEVBQUVsSixJQUFJLElBQUtrSixFQUFFdEosR0FBRyxDQUFDOFQsRUFBRWpaLEVBQUVzZSxHQUFHN1AsR0FBRyxJQUFJNUgsRUFBRXdYLEdBQUU3WSxFQUFFa0osR0FBRyxJQUFJN0gsRUFBRW9TLEVBQUUsSUFBSSxHQUFHcFMsRUFBRW9TLEVBQUUsS0FBSyxRQUFRQSxHQUFHalosSUFBSUQsRUFBRTBlLGNBQWNoUSxHQUFHM0QsSUFBSTJELEVBQXdCLEdBQXRCbEosRUFBRWdaLEdBQUd4ZSxFQUFFQSxJQUFJKy9CLEdBQUU4RixHQUFFLEdBQUc1bEMsRUFBRXFlLEdBQUssSUFBSTlZLEVBQUUsT0FBT0QsSUFBSUEsSUFBSSt2QixJQUFJakIsR0FBRzl1QixHQUFHdkYsRUFBRTRxQyxhQUFhLEtBQUs1cUMsRUFBRThxQyxpQkFBaUIsT0FBTyxDQUFDLEdBQUcsT0FBT3ZsQyxFQUFFLENBQUMsR0FBR3ZGLEVBQUU4cUMsbUJBQW1CN3FDLEVBQUUsT0FBT3NGLElBQUkrdkIsSUFBSWpCLEdBQUc5dUIsR0FBRyxLQUFLdEYsR0FBR3NGLEVBQUVtbEMsR0FBR3ZxQixLQUFLLEtBQUtuZ0IsR0FBRyxPQUFPdzFCLElBQUlBLEdBQUcsQ0FBQ2p3QixHQUFHa3dCLEdBQUdyQixHQUFHVSxHQUFHb0IsS0FBS1YsR0FBR3QwQixLQUFLcUUsR0FDcmZBLEVBQUUrdkIsSUFBVy92QixFQUFQLEtBQUt0RixFQUFJKzFCLEdBQUcsR0FBRzBVLEdBQUd2cUIsS0FBSyxLQUFLbmdCLElBQWVnMkIsR0FBVnp3QixFQXpLK0YsU0FBWXZGLEdBQUcsT0FBT0EsR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEdBQUcsS0FBSyxFQUFFLE9BQU8sR0FBRyxRQUFRLE1BQU00RixNQUFNa0UsRUFBRSxJQUFJOUosS0F5S3hUK3FDLENBQUc5cUMsR0FBVStxQyxHQUFHN3FCLEtBQUssS0FBS25nQixJQUFLQSxFQUFFOHFDLGlCQUFpQjdxQyxFQUFFRCxFQUFFNHFDLGFBQWFybEMsR0FDNUcsU0FBU3lsQyxHQUFHaHJDLEdBQWlCLEdBQWRtcUMsSUFBSSxFQUFFRSxHQUFHRCxHQUFHLEVBQUssSUFBTyxHQUFGckIsSUFBTSxNQUFNbmpDLE1BQU1rRSxFQUFFLE1BQU0sSUFBSTdKLEVBQUVELEVBQUU0cUMsYUFBYSxHQUFHSyxNQUFNanJDLEVBQUU0cUMsZUFBZTNxQyxFQUFFLE9BQU8sS0FBSyxJQUFJc0YsRUFBRWlaLEdBQUd4ZSxFQUFFQSxJQUFJKy9CLEdBQUU4RixHQUFFLEdBQUcsR0FBRyxJQUFJdGdDLEVBQUUsT0FBTyxLQUFLLElBQUlDLEVBQUVELEVBQU1ILEVBQUUyakMsR0FBRUEsSUFBRyxHQUFHLElBQUl0akMsRUFBRXlsQyxLQUFrQyxJQUExQm5MLEtBQUkvL0IsR0FBRzZsQyxLQUFJcmdDLElBQUVna0MsS0FBSzJCLEdBQUduckMsRUFBRXdGLFVBQVU0bEMsS0FBSyxNQUFNLE1BQU16OEIsR0FBRzA4QixHQUFHcnJDLEVBQUUyTyxHQUFnRSxHQUFwRCtuQixLQUFLbVMsR0FBR3Z1QixRQUFRN1UsRUFBRXNqQyxHQUFFM2pDLEVBQUUsT0FBTzRqQyxHQUFFeGpDLEVBQUUsR0FBR3U2QixHQUFFLEtBQUs4RixHQUFFLEVBQUVyZ0MsRUFBRWtnQyxJQUFNLElBQUswRCxHQUFHekQsSUFBSXdGLEdBQUduckMsRUFBRSxRQUFRLEdBQUcsSUFBSXdGLEVBQUUsQ0FBeUYsR0FBeEYsSUFBSUEsSUFBSXVqQyxJQUFHLEdBQUcvb0MsRUFBRXNjLFVBQVV0YyxFQUFFc2MsU0FBUSxFQUFHOFYsR0FBR3B5QixFQUFFdWMsZ0JBQXdCLEtBQVJoWCxFQUFFeVosR0FBR2hmLE1BQVd3RixFQUFFOGxDLEdBQUd0ckMsRUFBRXVGLEtBQVEsSUFBSUMsRUFBRSxNQUFNdkYsRUFBRWtwQyxHQUFHZ0MsR0FBR25yQyxFQUFFLEdBQUc0bEMsR0FBRzVsQyxFQUFFdUYsR0FBR29sQyxHQUFHM3FDLEVBQUU0MUIsTUFBSzMxQixFQUMzYyxPQUQ2Y0QsRUFBRXVyQyxhQUNyZnZyQyxFQUFFc2EsUUFBUVYsVUFBVTVaLEVBQUV3ckMsY0FBY2ptQyxFQUFTQyxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTUksTUFBTWtFLEVBQUUsTUFBTSxLQUFLLEVBQUUyaEMsR0FBR3pyQyxHQUFHLE1BQU0sS0FBSyxFQUFVLEdBQVI0bEMsR0FBRzVsQyxFQUFFdUYsSUFBUyxTQUFGQSxLQUFjQSxHQUFpQixJQUFiQyxFQUFFOGlDLEdBQUcsSUFBSTFTLE1BQVUsQ0FBQyxHQUFHLElBQUlwWCxHQUFHeGUsRUFBRSxHQUFHLE1BQXlCLEtBQW5Cb0YsRUFBRXBGLEVBQUUyZSxnQkFBcUJwWixLQUFLQSxFQUFFLENBQUNpMEIsS0FBS3g1QixFQUFFNGUsYUFBYTVlLEVBQUUyZSxlQUFldlosRUFBRSxNQUFNcEYsRUFBRTByQyxjQUFjMVosR0FBR3laLEdBQUd0ckIsS0FBSyxLQUFLbmdCLEdBQUd3RixHQUFHLE1BQU1pbUMsR0FBR3pyQyxHQUFHLE1BQU0sS0FBSyxFQUFVLEdBQVI0bEMsR0FBRzVsQyxFQUFFdUYsSUFBUyxRQUFGQSxLQUFhQSxFQUFFLE1BQXFCLElBQWZDLEVBQUV4RixFQUFFcWYsV0FBZWphLEdBQUcsRUFBRSxFQUFFRyxHQUFHLENBQUMsSUFBSXdGLEVBQUUsR0FBRzhULEdBQUd0WixHQUFHRSxFQUFFLEdBQUdzRixHQUFFQSxFQUFFdkYsRUFBRXVGLElBQUszRixJQUFJQSxFQUFFMkYsR0FBR3hGLElBQUlFLEVBQ2paLEdBRG1aRixFQUFFSCxFQUNsWixJQUQ0WkcsR0FBRyxLQUFYQSxFQUFFcXdCLEtBQUlyd0IsR0FBVyxJQUFJLElBQUlBLEVBQUUsSUFBSSxLQUFLQSxFQUFFLEtBQUssS0FBS0EsRUFBRSxLQUFLLElBQUlBLEVBQUUsSUFBSSxLQUNsZkEsRUFBRSxLQUFLLEtBQUtvakMsR0FBR3BqQyxFQUFFLE9BQU9BLEdBQVUsQ0FBQ3ZGLEVBQUUwckMsY0FBYzFaLEdBQUd5WixHQUFHdHJCLEtBQUssS0FBS25nQixHQUFHdUYsR0FBRyxNQUFNa21DLEdBQUd6ckMsR0FBRyxNQUFNLEtBQUssRUFBRXlyQyxHQUFHenJDLEdBQUcsTUFBTSxRQUFRLE1BQU00RixNQUFNa0UsRUFBRSxPQUFrQixPQUFWNmdDLEdBQUczcUMsRUFBRTQxQixNQUFZNTFCLEVBQUU0cUMsZUFBZTNxQyxFQUFFK3FDLEdBQUc3cUIsS0FBSyxLQUFLbmdCLEdBQUcsS0FBSyxTQUFTNGxDLEdBQUc1bEMsRUFBRUMsR0FBdUQsSUFBcERBLElBQUlvcEMsR0FBR3BwQyxJQUFJMGxDLEdBQUczbEMsRUFBRTJlLGdCQUFnQjFlLEVBQUVELEVBQUU0ZSxjQUFjM2UsRUFBTUQsRUFBRUEsRUFBRTZxQyxnQkFBZ0IsRUFBRTVxQyxHQUFHLENBQUMsSUFBSXNGLEVBQUUsR0FBR3NaLEdBQUc1ZSxHQUFHdUYsRUFBRSxHQUFHRCxFQUFFdkYsRUFBRXVGLElBQUksRUFBRXRGLElBQUl1RixHQUMxVSxTQUFTa2xDLEdBQUcxcUMsR0FBRyxHQUFHLElBQU8sR0FBRitvQyxJQUFNLE1BQU1uakMsTUFBTWtFLEVBQUUsTUFBVyxHQUFMbWhDLEtBQVFqckMsSUFBSSsvQixJQUFHLElBQUsvL0IsRUFBRTBlLGFBQWFtbkIsSUFBRyxDQUFDLElBQUk1bEMsRUFBRTRsQyxHQUFNdGdDLEVBQUUrbEMsR0FBR3RyQyxFQUFFQyxHQUFHLElBQUttcEMsR0FBR3pELE1BQWdCcGdDLEVBQUUrbEMsR0FBR3RyQyxFQUFmQyxFQUFFdWUsR0FBR3hlLEVBQUVDLFVBQTZCc0YsRUFBRStsQyxHQUFHdHJDLEVBQWZDLEVBQUV1ZSxHQUFHeGUsRUFBRSxJQUFnSCxHQUFuRyxJQUFJQSxFQUFFNk8sS0FBSyxJQUFJdEosSUFBSXdqQyxJQUFHLEdBQUcvb0MsRUFBRXNjLFVBQVV0YyxFQUFFc2MsU0FBUSxFQUFHOFYsR0FBR3B5QixFQUFFdWMsZ0JBQXdCLEtBQVJ0YyxFQUFFK2UsR0FBR2hmLE1BQVd1RixFQUFFK2xDLEdBQUd0ckMsRUFBRUMsS0FBUSxJQUFJc0YsRUFBRSxNQUFNQSxFQUFFNGpDLEdBQUdnQyxHQUFHbnJDLEVBQUUsR0FBRzRsQyxHQUFHNWxDLEVBQUVDLEdBQUcwcUMsR0FBRzNxQyxFQUFFNDFCLE1BQUtyd0IsRUFBdUUsT0FBckV2RixFQUFFdXJDLGFBQWF2ckMsRUFBRXNhLFFBQVFWLFVBQVU1WixFQUFFd3JDLGNBQWN2ckMsRUFBRXdyQyxHQUFHenJDLEdBQUcycUMsR0FBRzNxQyxFQUFFNDFCLE1BQVksS0FDblIsU0FBUytWLEdBQUczckMsRUFBRUMsR0FBRyxJQUFJc0YsRUFBRXdqQyxHQUFFQSxJQUFHLEVBQUUsSUFBSSxPQUFPL29DLEVBQUVDLEdBQUcsUUFBWSxLQUFKOG9DLEdBQUV4akMsS0FBVWlrQyxLQUFLdlQsT0FBTyxTQUFTMlYsR0FBRzVyQyxFQUFFQyxHQUFHLElBQUlzRixFQUFFd2pDLEdBQUVBLEtBQUksRUFBRUEsSUFBRyxFQUFFLElBQUksT0FBTy9vQyxFQUFFQyxHQUFHLFFBQVksS0FBSjhvQyxHQUFFeGpDLEtBQVVpa0MsS0FBS3ZULE9BQU8sU0FBU2tOLEdBQUduakMsRUFBRUMsR0FBR2d6QixHQUFFaVcsR0FBR0QsSUFBSUEsSUFBSWhwQyxFQUFFbXBDLElBQUlucEMsRUFBRSxTQUFTOGxDLEtBQUtrRCxHQUFHQyxHQUFHNXVCLFFBQVEwWSxHQUFFa1csSUFDNVYsU0FBU2lDLEdBQUduckMsRUFBRUMsR0FBR0QsRUFBRXVyQyxhQUFhLEtBQUt2ckMsRUFBRXdyQyxjQUFjLEVBQUUsSUFBSWptQyxFQUFFdkYsRUFBRTByQyxjQUFpRCxJQUFsQyxJQUFJbm1DLElBQUl2RixFQUFFMHJDLGVBQWUsRUFBRXhaLEdBQUczc0IsSUFBTyxPQUFPeWpDLEdBQUUsSUFBSXpqQyxFQUFFeWpDLEdBQUVudkIsT0FBTyxPQUFPdFUsR0FBRyxDQUFDLElBQUlDLEVBQUVELEVBQUUsT0FBT0MsRUFBRXFKLEtBQUssS0FBSyxFQUE2QixPQUEzQnJKLEVBQUVBLEVBQUVwQyxLQUFLVixvQkFBd0NneEIsS0FBSyxNQUFNLEtBQUssRUFBRThJLEtBQUt4SixHQUFFSSxJQUFHSixHQUFFRyxJQUFHd0ssS0FBSyxNQUFNLEtBQUssRUFBRWpCLEdBQUdsM0IsR0FBRyxNQUFNLEtBQUssRUFBRWczQixLQUFLLE1BQU0sS0FBSyxHQUFjLEtBQUssR0FBR3hKLEdBQUUySixJQUFHLE1BQU0sS0FBSyxHQUFHaEcsR0FBR254QixHQUFHLE1BQU0sS0FBSyxHQUFHLEtBQUssR0FBR3VnQyxLQUFLeGdDLEVBQUVBLEVBQUVzVSxPQUFPa21CLEdBQUUvL0IsRUFBRWdwQyxHQUFFMU4sR0FBR3Q3QixFQUFFc2EsUUFBUSxNQUFNdXJCLEdBQUVvRCxHQUFHRyxHQUFHbnBDLEVBQUV5bEMsR0FBRSxFQUFFeUQsR0FBRyxLQUFLRSxHQUFHMUQsR0FBRzdNLEdBQUcsRUFDdmMsU0FBU3VTLEdBQUdyckMsRUFBRUMsR0FBRyxPQUFFLENBQUMsSUFBSXNGLEVBQUV5akMsR0FBRSxJQUF1QixHQUFuQnRTLEtBQUttSCxHQUFHdmpCLFFBQVFza0IsR0FBTVIsR0FBRyxDQUFDLElBQUksSUFBSTU0QixFQUFFeTRCLEdBQUVqa0IsY0FBYyxPQUFPeFUsR0FBRyxDQUFDLElBQUlKLEVBQUVJLEVBQUV1NUIsTUFBTSxPQUFPMzVCLElBQUlBLEVBQUU0eUIsUUFBUSxNQUFNeHlCLEVBQUVBLEVBQUUreEIsS0FBSzZHLElBQUcsRUFBeUMsR0FBdENKLEdBQUcsRUFBRUcsR0FBRUQsR0FBRUQsR0FBRSxLQUFLSSxJQUFHLEVBQUd5SyxHQUFHeHVCLFFBQVEsS0FBUSxPQUFPL1UsR0FBRyxPQUFPQSxFQUFFc1UsT0FBTyxDQUFDNnJCLEdBQUUsRUFBRXlELEdBQUdscEMsRUFBRStvQyxHQUFFLEtBQUssTUFBTWhwQyxFQUFFLENBQUMsSUFBSXlGLEVBQUV6RixFQUFFK0ssRUFBRXhGLEVBQUVzVSxPQUFPbEwsRUFBRXBKLEVBQUVtSixFQUFFek8sRUFBb0QsR0FBbERBLEVBQUU0bEMsR0FBRWwzQixFQUFFbUwsT0FBTyxLQUFLbkwsRUFBRXlzQixZQUFZenNCLEVBQUV1c0IsV0FBVyxLQUFRLE9BQU94c0IsR0FBRyxpQkFBa0JBLEdBQUcsbUJBQW9CQSxFQUFFKzVCLEtBQUssQ0FBQyxJQUFJdnZCLEVBQUV4SyxFQUFFLEdBQUcsSUFBWSxFQUFQQyxFQUFFNnNCLE1BQVEsQ0FBQyxJQUFJMTBCLEVBQUU2SCxFQUFFaUwsVUFBVTlTLEdBQUc2SCxFQUFFZ3BCLFlBQVk3d0IsRUFBRTZ3QixZQUFZaHBCLEVBQUVxTCxjQUFjbFQsRUFBRWtULGNBQWNyTCxFQUFFdW9CLE1BQU1wd0IsRUFBRW93QixRQUNwZnZvQixFQUFFZ3BCLFlBQVksS0FBS2hwQixFQUFFcUwsY0FBYyxNQUFNLElBQUkyZSxFQUFFLElBQWUsRUFBVmdFLEdBQUVyaUIsU0FBV3NlLEVBQUU3dEIsRUFBRSxFQUFFLENBQUMsSUFBSTh0QixFQUFFLEdBQUdBLEVBQUUsS0FBS0QsRUFBRS9wQixJQUFJLENBQUMsSUFBSXdoQixFQUFFdUksRUFBRTVlLGNBQWMsR0FBRyxPQUFPcVcsRUFBRXdJLEVBQUUsT0FBT3hJLEVBQUVwVyxlQUFxQixDQUFDLElBQUlxVyxFQUFFc0ksRUFBRWlFLGNBQWNoRSxPQUFFLElBQVN2SSxFQUFFNFQsWUFBWSxJQUFLNVQsRUFBRTZULDZCQUE4QnhMLElBQVMsR0FBR0UsRUFBRSxDQUFDLElBQUl0SSxFQUFFcUksRUFBRWpCLFlBQVksR0FBRyxPQUFPcEgsRUFBRSxDQUFDLElBQUlDLEVBQUUsSUFBSXZtQixJQUFJdW1CLEVBQUVubUIsSUFBSTZPLEdBQUcwZixFQUFFakIsWUFBWW5ILE9BQU9ELEVBQUVsbUIsSUFBSTZPLEdBQUcsR0FBRyxJQUFZLEVBQVAwZixFQUFFNEMsTUFBUSxDQUEyQyxHQUExQzVDLEVBQUU5ZSxPQUFPLEdBQUduTCxFQUFFbUwsT0FBTyxNQUFNbkwsRUFBRW1MLFFBQVEsS0FBUSxJQUFJbkwsRUFBRUUsSUFBSSxHQUFHLE9BQU9GLEVBQUVpTCxVQUFVakwsRUFBRUUsSUFBSSxPQUFPLENBQUMsSUFBSTZoQixFQUFFeUgsSUFBSSxFQUFFLEdBQUd6SCxFQUFFN2hCLElBQUksRUFBRTJwQixHQUFHN3BCLEVBQUUraEIsR0FBRy9oQixFQUFFdW9CLE9BQU8sRUFBRSxNQUFNbDNCLEVBQUUwTyxPQUM1ZixFQUFPQyxFQUFFMU8sRUFBRSxJQUFJd3dCLEVBQUVockIsRUFBRW9tQyxVQUErRyxHQUFyRyxPQUFPcGIsR0FBR0EsRUFBRWhyQixFQUFFb21DLFVBQVUsSUFBSXhGLEdBQUczM0IsRUFBRSxJQUFJekUsSUFBSXdtQixFQUFFbGlCLElBQUkySyxFQUFFeEssU0FBZ0IsS0FBWEEsRUFBRStoQixFQUFFaGhCLElBQUl5SixNQUFnQnhLLEVBQUUsSUFBSXpFLElBQUl3bUIsRUFBRWxpQixJQUFJMkssRUFBRXhLLEtBQVNBLEVBQUVraEIsSUFBSWpoQixHQUFHLENBQUNELEVBQUVyRSxJQUFJc0UsR0FBRyxJQUFJZ2lCLEVBQUVtYixHQUFHM3JCLEtBQUssS0FBSzFhLEVBQUV5VCxFQUFFdkssR0FBR3VLLEVBQUV1dkIsS0FBSzlYLEVBQUVBLEdBQUdpSSxFQUFFOWUsT0FBTyxLQUFLOGUsRUFBRTFCLE1BQU1qM0IsRUFBRSxNQUFNRCxFQUFFNDRCLEVBQUVBLEVBQUUvZSxhQUFhLE9BQU8rZSxHQUFHbHFCLEVBQUU5SSxPQUFPbUosRUFBR0osRUFBRXZMLE9BQU8scUJBQXFCLHlMQUF5TCxJQUFJc2lDLEtBQUlBLEdBQUUsR0FBR2gzQixFQUFFdTNCLEdBQUd2M0IsRUFBRUMsR0FBR2lxQixFQUNwZjd0QixFQUFFLEVBQUUsQ0FBQyxPQUFPNnRCLEVBQUUvcEIsS0FBSyxLQUFLLEVBQUVwSixFQUFFaUosRUFBRWtxQixFQUFFOWUsT0FBTyxLQUFLN1osSUFBSUEsRUFBRTI0QixFQUFFMUIsT0FBT2ozQixFQUFrQnc0QixHQUFHRyxFQUFiMk4sR0FBRzNOLEVBQUVuekIsRUFBRXhGLElBQVcsTUFBTUQsRUFBRSxLQUFLLEVBQUV5RixFQUFFaUosRUFBRSxJQUFJd2lCLEVBQUUwSCxFQUFFeDFCLEtBQUsrdEIsRUFBRXlILEVBQUUzZ0IsVUFBVSxHQUFHLElBQWEsR0FBUjJnQixFQUFFOWUsU0FBWSxtQkFBb0JvWCxFQUFFbHVCLDBCQUEwQixPQUFPbXVCLEdBQUcsbUJBQW9CQSxFQUFFd1Ysb0JBQW9CLE9BQU9DLEtBQUtBLEdBQUdoWCxJQUFJdUIsS0FBSyxDQUFDeUgsRUFBRTllLE9BQU8sS0FBSzdaLElBQUlBLEVBQUUyNEIsRUFBRTFCLE9BQU9qM0IsRUFBa0J3NEIsR0FBR0csRUFBYjhOLEdBQUc5TixFQUFFbnpCLEVBQUV4RixJQUFXLE1BQU1ELEdBQUc0NEIsRUFBRUEsRUFBRS9lLGFBQWEsT0FBTytlLEdBQUdtVCxHQUFHeG1DLEdBQUcsTUFBTXltQyxHQUFJL3JDLEVBQUUrckMsRUFBR2hELEtBQUl6akMsR0FBRyxPQUFPQSxJQUFJeWpDLEdBQUV6akMsRUFBRUEsRUFBRXNVLFFBQVEsU0FBUyxPQUMvYSxTQUFTcXhCLEtBQUssSUFBSWxyQyxFQUFFNm9DLEdBQUd2dUIsUUFBc0IsT0FBZHV1QixHQUFHdnVCLFFBQVFza0IsR0FBVSxPQUFPNStCLEVBQUU0K0IsR0FBRzUrQixFQUFFLFNBQVNzckMsR0FBR3RyQyxFQUFFQyxHQUFHLElBQUlzRixFQUFFd2pDLEdBQUVBLElBQUcsR0FBRyxJQUFJdmpDLEVBQUUwbEMsS0FBMkIsSUFBdEJuTCxLQUFJLy9CLEdBQUc2bEMsS0FBSTVsQyxHQUFHa3JDLEdBQUduckMsRUFBRUMsU0FBVWdzQyxLQUFLLE1BQU0sTUFBTTdtQyxHQUFHaW1DLEdBQUdyckMsRUFBRW9GLEdBQWtDLEdBQXRCc3hCLEtBQUtxUyxHQUFFeGpDLEVBQUVzakMsR0FBR3Z1QixRQUFROVUsRUFBSyxPQUFPd2pDLEdBQUUsTUFBTXBqQyxNQUFNa0UsRUFBRSxNQUFpQixPQUFYaTJCLEdBQUUsS0FBSzhGLEdBQUUsRUFBU0gsR0FBRSxTQUFTdUcsS0FBSyxLQUFLLE9BQU9qRCxJQUFHa0QsR0FBR2xELElBQUcsU0FBU29DLEtBQUssS0FBSyxPQUFPcEMsS0FBSXpVLE1BQU0yWCxHQUFHbEQsSUFBRyxTQUFTa0QsR0FBR2xzQyxHQUFHLElBQUlDLEVBQUV3cEMsR0FBR3pwQyxFQUFFNFosVUFBVTVaLEVBQUVpcEMsSUFBSWpwQyxFQUFFNjhCLGNBQWM3OEIsRUFBRXE5QixhQUFhLE9BQU9wOUIsRUFBRThyQyxHQUFHL3JDLEdBQUdncEMsR0FBRS9vQyxFQUFFNm9DLEdBQUd4dUIsUUFBUSxLQUM1YSxTQUFTeXhCLEdBQUcvckMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFLEVBQUUsQ0FBQyxJQUFJdUYsRUFBRXRGLEVBQUUyWixVQUFxQixHQUFYNVosRUFBRUMsRUFBRTRaLE9BQVUsSUFBYSxLQUFSNVosRUFBRTZaLE9BQVksQ0FBYyxHQUFHLFFBQWhCdlUsRUFBRTQvQixHQUFHNS9CLEVBQUV0RixFQUFFZ3BDLEtBQXFCLFlBQUpELEdBQUV6akMsR0FBYSxHQUFHLE1BQVBBLEVBQUV0RixHQUFZNE8sS0FBSyxLQUFLdEosRUFBRXNKLEtBQUssT0FBT3RKLEVBQUV5VSxlQUFlLElBQVEsV0FBSGl2QixLQUFnQixJQUFZLEVBQVAxakMsRUFBRWkyQixNQUFRLENBQUMsSUFBSSxJQUFJaDJCLEVBQUUsRUFBRUosRUFBRUcsRUFBRTZVLE1BQU0sT0FBT2hWLEdBQUdJLEdBQUdKLEVBQUU4eEIsTUFBTTl4QixFQUFFMHhCLFdBQVcxeEIsRUFBRUEsRUFBRWlWLFFBQVE5VSxFQUFFdXhCLFdBQVd0eEIsRUFBRSxPQUFPeEYsR0FBRyxJQUFhLEtBQVJBLEVBQUU4WixTQUFjLE9BQU85WixFQUFFbzdCLGNBQWNwN0IsRUFBRW83QixZQUFZbjdCLEVBQUVtN0IsYUFBYSxPQUFPbjdCLEVBQUVpN0IsYUFBYSxPQUFPbDdCLEVBQUVrN0IsYUFBYWw3QixFQUFFazdCLFdBQVdDLFdBQVdsN0IsRUFBRW03QixhQUFhcDdCLEVBQUVrN0IsV0FBV2o3QixFQUFFaTdCLFlBQVksRUFBRWo3QixFQUFFNlosUUFBUSxPQUMvZTlaLEVBQUVrN0IsV0FBV2w3QixFQUFFazdCLFdBQVdDLFdBQVdsN0IsRUFBRUQsRUFBRW83QixZQUFZbjdCLEVBQUVELEVBQUVrN0IsV0FBV2o3QixRQUFRLENBQVMsR0FBRyxRQUFYc0YsRUFBRXlnQyxHQUFHL2xDLElBQWtDLE9BQWxCc0YsRUFBRXVVLE9BQU8sVUFBS2t2QixHQUFFempDLEdBQVMsT0FBT3ZGLElBQUlBLEVBQUVvN0IsWUFBWXA3QixFQUFFazdCLFdBQVcsS0FBS2w3QixFQUFFOFosT0FBTyxNQUFrQixHQUFHLFFBQWY3WixFQUFFQSxFQUFFb2EsU0FBeUIsWUFBSjJ1QixHQUFFL29DLEdBQVMrb0MsR0FBRS9vQyxFQUFFRCxRQUFRLE9BQU9DLEdBQUcsSUFBSXlsQyxLQUFJQSxHQUFFLEdBQUcsU0FBUytGLEdBQUd6ckMsR0FBRyxJQUFJQyxFQUFFNDFCLEtBQThCLE9BQXpCRSxHQUFHLEdBQUdvVyxHQUFHaHNCLEtBQUssS0FBS25nQixFQUFFQyxJQUFXLEtBQ3RULFNBQVNrc0MsR0FBR25zQyxFQUFFQyxHQUFHLEdBQUdnckMsV0FBVyxPQUFPckIsSUFBSSxHQUFHLElBQU8sR0FBRmIsSUFBTSxNQUFNbmpDLE1BQU1rRSxFQUFFLE1BQU0sSUFBSXZFLEVBQUV2RixFQUFFdXJDLGFBQWEsR0FBRyxPQUFPaG1DLEVBQUUsT0FBTyxLQUEyQyxHQUF0Q3ZGLEVBQUV1ckMsYUFBYSxLQUFLdnJDLEVBQUV3ckMsY0FBYyxFQUFLam1DLElBQUl2RixFQUFFc2EsUUFBUSxNQUFNMVUsTUFBTWtFLEVBQUUsTUFBTTlKLEVBQUU0cUMsYUFBYSxLQUFLLElBQUlwbEMsRUFBRUQsRUFBRTJ4QixNQUFNM3hCLEVBQUV1eEIsV0FBVzF4QixFQUFFSSxFQUFFQyxFQUFFekYsRUFBRXllLGNBQWNyWixFQUFFcEYsRUFBRXllLGFBQWFyWixFQUFFcEYsRUFBRTJlLGVBQWUsRUFBRTNlLEVBQUU0ZSxZQUFZLEVBQUU1ZSxFQUFFMGUsY0FBY3RaLEVBQUVwRixFQUFFNi9CLGtCQUFrQno2QixFQUFFcEYsRUFBRThlLGdCQUFnQjFaLEVBQUVBLEVBQUVwRixFQUFFK2UsY0FBYyxJQUFJLElBQUloVSxFQUFFL0ssRUFBRXFmLFdBQVcxUSxFQUFFM08sRUFBRTZxQyxnQkFBZ0IsRUFBRXBsQyxHQUFHLENBQUMsSUFBSWlKLEVBQUUsR0FBR21RLEdBQUdwWixHQUFHeVQsRUFBRSxHQUFHeEssRUFBRXRKLEVBQUVzSixHQUFHLEVBQUUzRCxFQUFFMkQsSUFBSSxFQUFFQyxFQUFFRCxJQUFJLEVBQUVqSixJQUFJeVQsRUFDblYsR0FEcVYsT0FDamY4d0IsSUFBSSxJQUFPLEdBQUZ4a0MsSUFBT3drQyxHQUFHcGEsSUFBSTV2QixJQUFJZ3FDLEdBQUdsdUIsT0FBTzliLEdBQUdBLElBQUkrL0IsS0FBSWlKLEdBQUVqSixHQUFFLEtBQUs4RixHQUFFLEdBQUcsRUFBRXRnQyxFQUFFdVUsTUFBTSxPQUFPdlUsRUFBRTIxQixZQUFZMzFCLEVBQUUyMUIsV0FBV0MsV0FBVzUxQixFQUFFQyxFQUFFRCxFQUFFNjFCLGFBQWE1MUIsRUFBRUQsRUFBRUMsRUFBRUQsRUFBRTYxQixZQUFlLE9BQU81MUIsRUFBRSxDQUF3QyxHQUF2Q0osRUFBRTJqQyxHQUFFQSxJQUFHLEdBQUdELEdBQUd4dUIsUUFBUSxLQUFLb1gsR0FBRzNSLEdBQWFpTyxHQUFWampCLEVBQUU2aUIsTUFBYyxDQUFDLEdBQUcsbUJBQW1CN2lCLEVBQUU0RCxFQUFFLENBQUM2ZixNQUFNempCLEVBQUUwakIsZUFBZUMsSUFBSTNqQixFQUFFNGpCLG1CQUFtQjN1QixFQUFFLEdBQUcyTyxHQUFHQSxFQUFFNUQsRUFBRW1HLGdCQUFnQnZDLEVBQUVrZ0IsYUFBYXRrQixRQUFRMk8sRUFBRXZLLEVBQUVtZ0IsY0FBY25nQixFQUFFbWdCLGlCQUFpQixJQUFJNVYsRUFBRWt6QixXQUFXLENBQUN6OUIsRUFBRXVLLEVBQUUwVixXQUFXbnBCLEVBQUV5VCxFQUFFNlYsYUFBYXJnQixFQUFFd0ssRUFBRThWLFVBQVU5VixFQUFFQSxFQUFFK1YsWUFBWSxJQUFJdGdCLEVBQUVxRSxTQUFTdEUsRUFBRXNFLFNBQVMsTUFBTWc1QixHQUFJcjlCLEVBQUUsS0FDbmYsTUFBTTNPLEVBQUUsSUFBSThHLEVBQUUsRUFBRTZ4QixHQUFHLEVBQUVDLEdBQUcsRUFBRUMsRUFBRSxFQUFFeEksRUFBRSxFQUFFQyxFQUFFdmxCLEVBQUV3bEIsRUFBRSxLQUFLdHdCLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBSXV3QixFQUFLRixJQUFJM2hCLEdBQUcsSUFBSWxKLEdBQUcsSUFBSTZxQixFQUFFdGQsV0FBVzJsQixFQUFFN3hCLEVBQUVyQixHQUFHNnFCLElBQUk1aEIsR0FBRyxJQUFJd0ssR0FBRyxJQUFJb1gsRUFBRXRkLFdBQVc0bEIsRUFBRTl4QixFQUFFb1MsR0FBRyxJQUFJb1gsRUFBRXRkLFdBQVdsTSxHQUFHd3BCLEVBQUVyZCxVQUFVaFMsUUFBVyxRQUFRdXZCLEVBQUVGLEVBQUU3ZCxhQUFrQjhkLEVBQUVELEVBQUVBLEVBQUVFLEVBQUUsT0FBTyxDQUFDLEdBQUdGLElBQUl2bEIsRUFBRSxNQUFNOUssRUFBOEMsR0FBNUNzd0IsSUFBSTVoQixLQUFLa3FCLElBQUlwekIsSUFBSWt6QixFQUFFN3hCLEdBQUd5cEIsSUFBSTdoQixLQUFLMmhCLElBQUluWCxJQUFJMGYsRUFBRTl4QixHQUFNLFFBQVEwcEIsRUFBRUYsRUFBRTlDLGFBQWEsTUFBVStDLEdBQUpELEVBQUVDLEdBQU01WSxXQUFXMlksRUFBRUUsRUFBRTdoQixHQUFHLElBQUlncUIsSUFBSSxJQUFJQyxFQUFFLEtBQUssQ0FBQ3BLLE1BQU1tSyxFQUFFakssSUFBSWtLLFFBQVFqcUIsRUFBRSxLQUFLQSxFQUFFQSxHQUFHLENBQUM2ZixNQUFNLEVBQUVFLElBQUksUUFBUS9mLEVBQUUsS0FBS2dqQixHQUFHLENBQUMwYSxZQUFZdGhDLEVBQUV1aEMsZUFBZTM5QixHQUFHb1IsSUFBRyxFQUFHdXFCLEdBQUcsS0FBS0MsSUFBRyxFQUFHYixHQUFFbGtDLEVBQUUsT0FBTyttQyxLQUFLLE1BQU1QLEdBQUksR0FBRyxPQUN2Z0J0QyxHQUFFLE1BQU05akMsTUFBTWtFLEVBQUUsTUFBTW05QixHQUFHeUMsR0FBRXNDLEdBQUl0QyxHQUFFQSxHQUFFdk8sa0JBQWlCLE9BQU91TyxJQUFHWSxHQUFHLEtBQUtaLEdBQUVsa0MsRUFBRSxPQUFPLElBQUl1RixFQUFFL0ssRUFBRSxPQUFPMHBDLElBQUcsQ0FBQyxJQUFJaFosRUFBRWdaLEdBQUU1dkIsTUFBK0IsR0FBdkIsR0FBRjRXLEdBQU01ZCxHQUFHNDJCLEdBQUV6eEIsVUFBVSxJQUFTLElBQUZ5WSxFQUFNLENBQUMsSUFBSUQsRUFBRWlaLEdBQUU5dkIsVUFBVSxHQUFHLE9BQU82VyxFQUFFLENBQUMsSUFBSUUsRUFBRUYsRUFBRW9LLElBQUksT0FBT2xLLElBQUksbUJBQW9CQSxFQUFFQSxFQUFFLE1BQU1BLEVBQUVyVyxRQUFRLE9BQU8sT0FBUyxLQUFGb1csR0FBUSxLQUFLLEVBQUVzWCxHQUFHMEIsSUFBR0EsR0FBRTV2QixRQUFRLEVBQUUsTUFBTSxLQUFLLEVBQUVrdUIsR0FBRzBCLElBQUdBLEdBQUU1dkIsUUFBUSxFQUFFdXVCLEdBQUdxQixHQUFFOXZCLFVBQVU4dkIsSUFBRyxNQUFNLEtBQUssS0FBS0EsR0FBRTV2QixRQUFRLEtBQUssTUFBTSxLQUFLLEtBQUs0dkIsR0FBRTV2QixRQUFRLEtBQUt1dUIsR0FBR3FCLEdBQUU5dkIsVUFBVTh2QixJQUFHLE1BQU0sS0FBSyxFQUFFckIsR0FBR3FCLEdBQUU5dkIsVUFBVTh2QixJQUFHLE1BQU0sS0FBSyxFQUFNN0IsR0FBRzk4QixFQUFQNEQsRUFBRSs2QixJQUFVLElBQUl6WSxFQUFFdGlCLEVBQUVpTCxVQUFVa3VCLEdBQUduNUIsR0FBRyxPQUNuZnNpQixHQUFHNlcsR0FBRzdXLEdBQUd5WSxHQUFFQSxHQUFFdk8sWUFBWSxNQUFNNlEsR0FBSSxHQUFHLE9BQU90QyxHQUFFLE1BQU05akMsTUFBTWtFLEVBQUUsTUFBTW05QixHQUFHeUMsR0FBRXNDLEdBQUl0QyxHQUFFQSxHQUFFdk8sa0JBQWlCLE9BQU91TyxJQUFrRCxHQUEvQy9ZLEVBQUVnQixHQUFHbEIsRUFBRTdDLEtBQUs4QyxFQUFFQyxFQUFFMGIsWUFBWXRoQyxFQUFFNGxCLEVBQUUyYixlQUFrQjdiLElBQUlDLEdBQUdBLEdBQUdBLEVBQUV4ZixlQUFldWMsR0FBR2lELEVBQUV4ZixjQUFjb3JCLGdCQUFnQjVMLEdBQUcsQ0FBQyxPQUFPM2xCLEdBQUdpakIsR0FBRzBDLEtBQUtELEVBQUUxbEIsRUFBRXlqQixXQUFjLEtBQVJtQyxFQUFFNWxCLEVBQUUyakIsT0FBaUJpQyxFQUFFRixHQUFHLG1CQUFtQkMsR0FBR0EsRUFBRWpDLGVBQWVnQyxFQUFFQyxFQUFFL0IsYUFBYXJQLEtBQUtrdEIsSUFBSTdiLEVBQUVELEVBQUV4Z0IsTUFBTWpQLFVBQVUwdkIsR0FBR0YsRUFBRUMsRUFBRXhmLGVBQWUxRyxXQUFXaW1CLEVBQUU1QixhQUFhdGtCLFFBQVN1a0IsZUFBZTZCLEVBQUVBLEVBQUU3QixlQUFlbmdCLEVBQUUraEIsRUFBRXplLFlBQVloUixPQUFPZ3dCLEVBQUUzUixLQUFLa3RCLElBQUl6aEMsRUFBRXlqQixNQUFNN2YsR0FBRzVELE9BQUUsSUFDcGZBLEVBQUUyakIsSUFBSXVDLEVBQUUzUixLQUFLa3RCLElBQUl6aEMsRUFBRTJqQixJQUFJL2YsSUFBSWdpQixFQUFFOGIsUUFBUXhiLEVBQUVsbUIsSUFBSTRELEVBQUU1RCxFQUFFQSxFQUFFa21CLEVBQUVBLEVBQUV0aUIsR0FBR0EsRUFBRTJlLEdBQUdvRCxFQUFFTyxHQUFHeHJCLEVBQUU2bkIsR0FBR29ELEVBQUUzbEIsR0FBRzRELEdBQUdsSixJQUFJLElBQUlrckIsRUFBRXliLFlBQVl6YixFQUFFL0IsYUFBYWpnQixFQUFFcFAsTUFBTW94QixFQUFFNUIsZUFBZXBnQixFQUFFNGUsUUFBUW9ELEVBQUUzQixZQUFZdnBCLEVBQUVsRyxNQUFNb3hCLEVBQUUxQixjQUFjeHBCLEVBQUU4bkIsV0FBVWtELEVBQUVBLEVBQUVpYyxlQUFnQkMsU0FBU2grQixFQUFFcFAsS0FBS29QLEVBQUU0ZSxRQUFRb0QsRUFBRWljLGtCQUFrQjNiLEVBQUVsbUIsR0FBRzRsQixFQUFFa2MsU0FBU3BjLEdBQUdFLEVBQUU4YixPQUFPaG5DLEVBQUVsRyxLQUFLa0csRUFBRThuQixVQUFVa0QsRUFBRXFjLE9BQU9ybkMsRUFBRWxHLEtBQUtrRyxFQUFFOG5CLFFBQVFvRCxFQUFFa2MsU0FBU3BjLE9BQVFBLEVBQUUsR0FBRyxJQUFJRSxFQUFFRCxFQUFFQyxFQUFFQSxFQUFFaFosWUFBWSxJQUFJZ1osRUFBRTNkLFVBQVV5ZCxFQUFFdnZCLEtBQUssQ0FBQytILFFBQVEwbkIsRUFBRW9jLEtBQUtwYyxFQUFFcWMsV0FBV0MsSUFBSXRjLEVBQUV1YyxZQUFtRCxJQUF2QyxtQkFBb0J4YyxFQUFFNlcsT0FBTzdXLEVBQUU2VyxRQUFZN1csRUFDcmYsRUFBRUEsRUFBRUQsRUFBRXh2QixPQUFPeXZCLEtBQUlDLEVBQUVGLEVBQUVDLElBQUt6bkIsUUFBUStqQyxXQUFXcmMsRUFBRW9jLEtBQUtwYyxFQUFFMW5CLFFBQVFpa0MsVUFBVXZjLEVBQUVzYyxJQUFJbHRCLEtBQUsyUixHQUFHQyxHQUFHRCxHQUFHLEtBQUsxeEIsRUFBRXNhLFFBQVEvVSxFQUFFbWtDLEdBQUVsa0MsRUFBRSxPQUFPLElBQUlrckIsRUFBRTF3QixFQUFFLE9BQU8wcEMsSUFBRyxDQUFDLElBQUl4WSxFQUFFd1ksR0FBRTV2QixNQUFnQyxHQUF4QixHQUFGb1gsR0FBTWtXLEdBQUcxVyxFQUFFZ1osR0FBRTl2QixVQUFVOHZCLElBQVEsSUFBRnhZLEVBQU0sQ0FBQ1QsT0FBRSxFQUFPLElBQUlVLEVBQUV1WSxHQUFFN08sSUFBSSxHQUFHLE9BQU8xSixFQUFFLENBQUMsSUFBSUMsRUFBRXNZLEdBQUV6eEIsVUFBVSxPQUFPeXhCLEdBQUU3NkIsS0FBSyxLQUFLLEVBQUU0aEIsRUFBRVcsRUFBRSxNQUFNLFFBQVFYLEVBQUVXLEVBQUUsbUJBQW9CRCxFQUFFQSxFQUFFVixHQUFHVSxFQUFFN1csUUFBUW1XLEdBQUdpWixHQUFFQSxHQUFFdk8sWUFBWSxNQUFNNlEsR0FBSSxHQUFHLE9BQU90QyxHQUFFLE1BQU05akMsTUFBTWtFLEVBQUUsTUFBTW05QixHQUFHeUMsR0FBRXNDLEdBQUl0QyxHQUFFQSxHQUFFdk8sa0JBQWlCLE9BQU91TyxJQUFHQSxHQUFFLEtBQUtuVSxLQUFLd1QsR0FBRTNqQyxPQUFPcEYsRUFBRXNhLFFBQVEvVSxFQUFFLEdBQUdva0MsR0FBR0EsSUFBRyxFQUFHQyxHQUFHNXBDLEVBQUU2cEMsR0FBRzVwQyxPQUFPLElBQUl5cEMsR0FBRWxrQyxFQUFFLE9BQU9ra0MsSUFBR3pwQyxFQUNwZnlwQyxHQUFFdk8sV0FBV3VPLEdBQUV2TyxXQUFXLEtBQWEsRUFBUnVPLEdBQUU1dkIsU0FBVW9YLEVBQUV3WSxJQUFJcnZCLFFBQVEsS0FBSzZXLEVBQUVqWixVQUFVLE1BQU15eEIsR0FBRXpwQyxFQUFxRixHQUFsRSxLQUFqQnVGLEVBQUV4RixFQUFFeWUsZ0JBQXFCbW9CLEdBQUcsTUFBTSxJQUFJcGhDLEVBQUV4RixJQUFJa3FDLEdBQUdELE1BQU1BLEdBQUcsRUFBRUMsR0FBR2xxQyxHQUFHaXFDLEdBQUcsRUFBRTFrQyxFQUFFQSxFQUFFMFMsVUFBYWljLElBQUksbUJBQW9CQSxHQUFHaVosa0JBQWtCLElBQUlqWixHQUFHaVosa0JBQWtCbFosR0FBRzF1QixPQUFFLEVBQU8sS0FBc0IsR0FBaEJBLEVBQUUrVSxRQUFRUixRQUFXLE1BQU1reUIsSUFBZSxHQUFWckIsR0FBRzNxQyxFQUFFNDFCLE1BQVE0USxHQUFHLE1BQU1BLElBQUcsRUFBR3htQyxFQUFFeW1DLEdBQUdBLEdBQUcsS0FBS3ptQyxFQUFFLE9BQUcsSUFBTyxFQUFGK29DLEtBQWlCOVMsS0FBTCxLQUNqVyxTQUFTc1csS0FBSyxLQUFLLE9BQU83QyxJQUFHLENBQUMsSUFBSTFwQyxFQUFFMHBDLEdBQUU5dkIsVUFBVTJ3QixJQUFJLE9BQU9ELEtBQUssSUFBYSxFQUFSWixHQUFFNXZCLE9BQVNVLEdBQUdrdkIsR0FBRVksTUFBTUMsSUFBRyxHQUFJLEtBQUtiLEdBQUU3NkIsS0FBSzY1QixHQUFHMW9DLEVBQUUwcEMsS0FBSWx2QixHQUFHa3ZCLEdBQUVZLE1BQU1DLElBQUcsSUFBSyxJQUFJdHFDLEVBQUV5cEMsR0FBRTV2QixNQUFNLElBQU8sSUFBRjdaLElBQVFpbkMsR0FBR2xuQyxFQUFFMHBDLElBQUcsSUFBTyxJQUFGenBDLElBQVEwcEMsS0FBS0EsSUFBRyxFQUFHM1QsR0FBRyxJQUFHLFdBQWdCLE9BQUxpVixLQUFZLFNBQVF2QixHQUFFQSxHQUFFdk8sWUFBWSxTQUFTOFAsS0FBSyxHQUFHLEtBQUtwQixHQUFHLENBQUMsSUFBSTdwQyxFQUFFLEdBQUc2cEMsR0FBRyxHQUFHQSxHQUFTLE9BQU5BLEdBQUcsR0FBVTlULEdBQUcvMUIsRUFBRW90QyxJQUFJLE9BQU0sRUFBRyxTQUFTOUYsR0FBR3RuQyxFQUFFQyxHQUFHNnBDLEdBQUc1b0MsS0FBS2pCLEVBQUVELEdBQUcycEMsS0FBS0EsSUFBRyxFQUFHM1QsR0FBRyxJQUFHLFdBQWdCLE9BQUxpVixLQUFZLFNBQVEsU0FBUzVELEdBQUdybkMsRUFBRUMsR0FBRzhwQyxHQUFHN29DLEtBQUtqQixFQUFFRCxHQUFHMnBDLEtBQUtBLElBQUcsRUFBRzNULEdBQUcsSUFBRyxXQUFnQixPQUFMaVYsS0FBWSxTQUN6ZCxTQUFTbUMsS0FBSyxHQUFHLE9BQU94RCxHQUFHLE9BQU0sRUFBRyxJQUFJNXBDLEVBQUU0cEMsR0FBVyxHQUFSQSxHQUFHLEtBQVEsSUFBTyxHQUFGYixJQUFNLE1BQU1uakMsTUFBTWtFLEVBQUUsTUFBTSxJQUFJN0osRUFBRThvQyxHQUFFQSxJQUFHLEdBQUcsSUFBSXhqQyxFQUFFd2tDLEdBQUdBLEdBQUcsR0FBRyxJQUFJLElBQUl2a0MsRUFBRSxFQUFFQSxFQUFFRCxFQUFFdEUsT0FBT3VFLEdBQUcsRUFBRSxDQUFDLElBQUlKLEVBQUVHLEVBQUVDLEdBQUdDLEVBQUVGLEVBQUVDLEVBQUUsR0FBR3VGLEVBQUUzRixFQUFFczdCLFFBQXlCLEdBQWpCdDdCLEVBQUVzN0IsYUFBUSxFQUFVLG1CQUFvQjMxQixFQUFFLElBQUlBLElBQUksTUFBTTJELEdBQUcsR0FBRyxPQUFPakosRUFBRSxNQUFNRyxNQUFNa0UsRUFBRSxNQUFNbTlCLEdBQUd4aEMsRUFBRWlKLElBQWUsSUFBWG5KLEVBQUV1a0MsR0FBR0EsR0FBRyxHQUFPdGtDLEVBQUUsRUFBRUEsRUFBRUQsRUFBRXRFLE9BQU91RSxHQUFHLEVBQUUsQ0FBQ0osRUFBRUcsRUFBRUMsR0FBR0MsRUFBRUYsRUFBRUMsRUFBRSxHQUFHLElBQUksSUFBSW1KLEVBQUV2SixFQUFFcTdCLE9BQU9yN0IsRUFBRXM3QixRQUFRL3hCLElBQUksTUFBTUQsR0FBRyxHQUFHLE9BQU9qSixFQUFFLE1BQU1HLE1BQU1rRSxFQUFFLE1BQU1tOUIsR0FBR3hoQyxFQUFFaUosSUFBSSxJQUFJQyxFQUFFM08sRUFBRXNhLFFBQVE4Z0IsWUFBWSxPQUFPenNCLEdBQUczTyxFQUFFMk8sRUFBRXdzQixXQUFXeHNCLEVBQUV3c0IsV0FBVyxLQUFhLEVBQVJ4c0IsRUFBRW1MLFFBQVVuTCxFQUFFMEwsUUFDamYsS0FBSzFMLEVBQUVzSixVQUFVLE1BQU10SixFQUFFM08sRUFBVyxPQUFUK29DLEdBQUU5b0MsRUFBRWcyQixNQUFXLEVBQUcsU0FBU29YLEdBQUdydEMsRUFBRUMsRUFBRXNGLEdBQXlCaXpCLEdBQUd4NEIsRUFBZkMsRUFBRXNtQyxHQUFHdm1DLEVBQWZDLEVBQUVnbUMsR0FBRzFnQyxFQUFFdEYsR0FBWSxJQUFXQSxFQUFFdTVCLEtBQWUsUUFBVng1QixFQUFFeXFDLEdBQUd6cUMsRUFBRSxNQUFjb2YsR0FBR3BmLEVBQUUsRUFBRUMsR0FBRzBxQyxHQUFHM3FDLEVBQUVDLElBQ3pJLFNBQVNnbkMsR0FBR2puQyxFQUFFQyxHQUFHLEdBQUcsSUFBSUQsRUFBRTZPLElBQUl3K0IsR0FBR3J0QyxFQUFFQSxFQUFFQyxRQUFRLElBQUksSUFBSXNGLEVBQUV2RixFQUFFNlosT0FBTyxPQUFPdFUsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRXNKLElBQUksQ0FBQ3crQixHQUFHOW5DLEVBQUV2RixFQUFFQyxHQUFHLE1BQVcsR0FBRyxJQUFJc0YsRUFBRXNKLElBQUksQ0FBQyxJQUFJckosRUFBRUQsRUFBRTBTLFVBQVUsR0FBRyxtQkFBb0IxUyxFQUFFbkMsS0FBS0osMEJBQTBCLG1CQUFvQndDLEVBQUVtaEMsb0JBQW9CLE9BQU9DLEtBQUtBLEdBQUdoWCxJQUFJcHFCLElBQUksQ0FBVyxJQUFJSixFQUFFc2hDLEdBQUduaEMsRUFBbkJ2RixFQUFFaW1DLEdBQUdobUMsRUFBRUQsR0FBZ0IsR0FBNEIsR0FBekJ3NEIsR0FBR2p6QixFQUFFSCxHQUFHQSxFQUFFbzBCLEtBQWtCLFFBQWJqMEIsRUFBRWtsQyxHQUFHbGxDLEVBQUUsSUFBZTZaLEdBQUc3WixFQUFFLEVBQUVILEdBQUd1bEMsR0FBR3BsQyxFQUFFSCxRQUFRLEdBQUcsbUJBQW9CSSxFQUFFbWhDLG9CQUFvQixPQUFPQyxLQUFLQSxHQUFHaFgsSUFBSXBxQixJQUFJLElBQUlBLEVBQUVtaEMsa0JBQWtCMW1DLEVBQUVELEdBQUcsTUFBTXlGLElBQUksT0FBT0YsRUFBRUEsRUFBRXNVLFFBQ3BkLFNBQVNpeUIsR0FBRzlyQyxFQUFFQyxFQUFFc0YsR0FBRyxJQUFJQyxFQUFFeEYsRUFBRTZyQyxVQUFVLE9BQU9ybUMsR0FBR0EsRUFBRXNXLE9BQU83YixHQUFHQSxFQUFFdTVCLEtBQUt4NUIsRUFBRTRlLGFBQWE1ZSxFQUFFMmUsZUFBZXBaLEVBQUV3NkIsS0FBSS8vQixJQUFJNmxDLEdBQUV0Z0MsS0FBS0EsSUFBSSxJQUFJbWdDLElBQUcsSUFBSUEsS0FBTSxTQUFGRyxNQUFjQSxJQUFHLElBQUlqUSxLQUFJMFMsR0FBRzZDLEdBQUduckMsRUFBRSxHQUFHcXBDLElBQUk5akMsR0FBR29sQyxHQUFHM3FDLEVBQUVDLEdBQUcsU0FBU3VvQyxHQUFHeG9DLEVBQUVDLEdBQUcsSUFBSXNGLEVBQUV2RixFQUFFaVksVUFBVSxPQUFPMVMsR0FBR0EsRUFBRXVXLE9BQU83YixHQUFPLElBQUpBLEVBQUUsS0FBbUIsSUFBTyxHQUFoQkEsRUFBRUQsRUFBRXc3QixPQUFldjdCLEVBQUUsRUFBRSxJQUFPLEVBQUZBLEdBQUtBLEVBQUUsS0FBSzQxQixLQUFLLEVBQUUsR0FBRyxJQUFJdVUsS0FBS0EsR0FBR2hCLElBQXVCLEtBQW5CbnBDLEVBQUVpZixHQUFHLFVBQVVrckIsT0FBWW5xQyxFQUFFLFdBQVdzRixFQUFFaTBCLEtBQWUsUUFBVng1QixFQUFFeXFDLEdBQUd6cUMsRUFBRUMsTUFBY21mLEdBQUdwZixFQUFFQyxFQUFFc0YsR0FBR29sQyxHQUFHM3FDLEVBQUV1RixJQVVqWixTQUFTK25DLEdBQUd0dEMsRUFBRUMsRUFBRXNGLEVBQUVDLEdBQUduRCxLQUFLd00sSUFBSTdPLEVBQUVxQyxLQUFLNkMsSUFBSUssRUFBRWxELEtBQUtnWSxRQUFRaFksS0FBSytYLE1BQU0vWCxLQUFLd1gsT0FBT3hYLEtBQUs0VixVQUFVNVYsS0FBS2UsS0FBS2YsS0FBSzZHLFlBQVksS0FBSzdHLEtBQUtnNUIsTUFBTSxFQUFFaDVCLEtBQUt3NEIsSUFBSSxLQUFLeDRCLEtBQUtnN0IsYUFBYXA5QixFQUFFb0MsS0FBSzIwQixhQUFhMzBCLEtBQUsyWCxjQUFjM1gsS0FBS3MxQixZQUFZdDFCLEtBQUt3NkIsY0FBYyxLQUFLeDZCLEtBQUttNUIsS0FBS2gyQixFQUFFbkQsS0FBS3lYLE1BQU0sRUFBRXpYLEtBQUs2NEIsV0FBVzc0QixLQUFLKzRCLFlBQVkvNEIsS0FBSzg0QixXQUFXLEtBQUs5NEIsS0FBS3kwQixXQUFXejBCLEtBQUs2MEIsTUFBTSxFQUFFNzBCLEtBQUt1WCxVQUFVLEtBQUssU0FBU3VqQixHQUFHbjlCLEVBQUVDLEVBQUVzRixFQUFFQyxHQUFHLE9BQU8sSUFBSThuQyxHQUFHdHRDLEVBQUVDLEVBQUVzRixFQUFFQyxHQUFHLFNBQVNzOUIsR0FBRzlpQyxHQUFpQixVQUFkQSxFQUFFQSxFQUFFTSxhQUF1Qk4sRUFBRXV0QyxrQkFFcmQsU0FBU2pTLEdBQUd0N0IsRUFBRUMsR0FBRyxJQUFJc0YsRUFBRXZGLEVBQUU0WixVQUN1QixPQURiLE9BQU9yVSxJQUFHQSxFQUFFNDNCLEdBQUduOUIsRUFBRTZPLElBQUk1TyxFQUFFRCxFQUFFa0YsSUFBSWxGLEVBQUV3N0IsT0FBUXR5QixZQUFZbEosRUFBRWtKLFlBQVkzRCxFQUFFbkMsS0FBS3BELEVBQUVvRCxLQUFLbUMsRUFBRTBTLFVBQVVqWSxFQUFFaVksVUFBVTFTLEVBQUVxVSxVQUFVNVosRUFBRUEsRUFBRTRaLFVBQVVyVSxJQUFJQSxFQUFFODNCLGFBQWFwOUIsRUFBRXNGLEVBQUVuQyxLQUFLcEQsRUFBRW9ELEtBQUttQyxFQUFFdVUsTUFBTSxFQUFFdlUsRUFBRTQxQixXQUFXLEtBQUs1MUIsRUFBRTYxQixZQUFZLEtBQUs3MUIsRUFBRTIxQixXQUFXLE1BQU0zMUIsRUFBRXV4QixXQUFXOTJCLEVBQUU4MkIsV0FBV3Z4QixFQUFFMnhCLE1BQU1sM0IsRUFBRWszQixNQUFNM3hCLEVBQUU2VSxNQUFNcGEsRUFBRW9hLE1BQU03VSxFQUFFczNCLGNBQWM3OEIsRUFBRTY4QixjQUFjdDNCLEVBQUV5VSxjQUFjaGEsRUFBRWdhLGNBQWN6VSxFQUFFb3lCLFlBQVkzM0IsRUFBRTIzQixZQUFZMTNCLEVBQUVELEVBQUVnM0IsYUFBYXp4QixFQUFFeXhCLGFBQWEsT0FBTy8yQixFQUFFLEtBQUssQ0FBQ2kzQixNQUFNajNCLEVBQUVpM0IsTUFBTUQsYUFBYWgzQixFQUFFZzNCLGNBQzNlMXhCLEVBQUU4VSxRQUFRcmEsRUFBRXFhLFFBQVE5VSxFQUFFODFCLE1BQU1yN0IsRUFBRXE3QixNQUFNOTFCLEVBQUVzMUIsSUFBSTc2QixFQUFFNjZCLElBQVd0MUIsRUFDdkQsU0FBU2syQixHQUFHejdCLEVBQUVDLEVBQUVzRixFQUFFQyxFQUFFSixFQUFFSyxHQUFHLElBQUlzRixFQUFFLEVBQU0sR0FBSnZGLEVBQUV4RixFQUFLLG1CQUFvQkEsRUFBRThpQyxHQUFHOWlDLEtBQUsrSyxFQUFFLFFBQVEsR0FBRyxpQkFBa0IvSyxFQUFFK0ssRUFBRSxPQUFPL0ssRUFBRSxPQUFPQSxHQUFHLEtBQUswTSxFQUFHLE9BQU9rdkIsR0FBR3IyQixFQUFFNkwsU0FBU2hNLEVBQUVLLEVBQUV4RixHQUFHLEtBQUtxTixFQUFHdkMsRUFBRSxFQUFFM0YsR0FBRyxHQUFHLE1BQU0sS0FBS3VILEVBQUc1QixFQUFFLEVBQUUzRixHQUFHLEVBQUUsTUFBTSxLQUFLd0gsRUFBRyxPQUFPNU0sRUFBRW05QixHQUFHLEdBQUc1M0IsRUFBRXRGLEVBQUksRUFBRm1GLElBQU84RCxZQUFZMEQsRUFBRzVNLEVBQUVvRCxLQUFLd0osRUFBRzVNLEVBQUVrM0IsTUFBTXp4QixFQUFFekYsRUFBRSxLQUFLZ04sRUFBRyxPQUFPaE4sRUFBRW05QixHQUFHLEdBQUc1M0IsRUFBRXRGLEVBQUVtRixJQUFLaEMsS0FBSzRKLEVBQUdoTixFQUFFa0osWUFBWThELEVBQUdoTixFQUFFazNCLE1BQU16eEIsRUFBRXpGLEVBQUUsS0FBS2lOLEVBQUcsT0FBT2pOLEVBQUVtOUIsR0FBRyxHQUFHNTNCLEVBQUV0RixFQUFFbUYsSUFBSzhELFlBQVkrRCxFQUFHak4sRUFBRWszQixNQUFNenhCLEVBQUV6RixFQUFFLEtBQUt1TixFQUFHLE9BQU8rMkIsR0FBRy8rQixFQUFFSCxFQUFFSyxFQUFFeEYsR0FBRyxLQUFLdU4sRUFBRyxPQUFPeE4sRUFBRW05QixHQUFHLEdBQUc1M0IsRUFBRXRGLEVBQUVtRixJQUFLOEQsWUFBWXNFLEVBQUd4TixFQUFFazNCLE1BQU16eEIsRUFBRXpGLEVBQUUsUUFBUSxHQUFHLGlCQUNoZkEsR0FBRyxPQUFPQSxFQUFFLE9BQU9BLEVBQUVnUCxVQUFVLEtBQUtuQyxFQUFHOUIsRUFBRSxHQUFHLE1BQU0vSyxFQUFFLEtBQUs4TSxFQUFHL0IsRUFBRSxFQUFFLE1BQU0vSyxFQUFFLEtBQUsrTSxFQUFHaEMsRUFBRSxHQUFHLE1BQU0vSyxFQUFFLEtBQUtrTixFQUFHbkMsRUFBRSxHQUFHLE1BQU0vSyxFQUFFLEtBQUttTixFQUFHcEMsRUFBRSxHQUFHdkYsRUFBRSxLQUFLLE1BQU14RixFQUFFLEtBQUtvTixFQUFHckMsRUFBRSxHQUFHLE1BQU0vSyxFQUFFLE1BQU00RixNQUFNa0UsRUFBRSxJQUFJLE1BQU05SixFQUFFQSxTQUFTQSxFQUFFLEtBQXVELE9BQWpEQyxFQUFFazlCLEdBQUdweUIsRUFBRXhGLEVBQUV0RixFQUFFbUYsSUFBSzhELFlBQVlsSixFQUFFQyxFQUFFbUQsS0FBS29DLEVBQUV2RixFQUFFaTNCLE1BQU16eEIsRUFBU3hGLEVBQUUsU0FBUzI3QixHQUFHNTdCLEVBQUVDLEVBQUVzRixFQUFFQyxHQUEyQixPQUF4QnhGLEVBQUVtOUIsR0FBRyxFQUFFbjlCLEVBQUV3RixFQUFFdkYsSUFBS2kzQixNQUFNM3hCLEVBQVN2RixFQUFFLFNBQVNza0MsR0FBR3RrQyxFQUFFQyxFQUFFc0YsRUFBRUMsR0FBNkMsT0FBMUN4RixFQUFFbTlCLEdBQUcsR0FBR245QixFQUFFd0YsRUFBRXZGLElBQUtpSixZQUFZcUUsRUFBR3ZOLEVBQUVrM0IsTUFBTTN4QixFQUFTdkYsRUFBRSxTQUFTdTdCLEdBQUd2N0IsRUFBRUMsRUFBRXNGLEdBQThCLE9BQTNCdkYsRUFBRW05QixHQUFHLEVBQUVuOUIsRUFBRSxLQUFLQyxJQUFLaTNCLE1BQU0zeEIsRUFBU3ZGLEVBQ2xjLFNBQVMyN0IsR0FBRzM3QixFQUFFQyxFQUFFc0YsR0FBOEosT0FBM0p0RixFQUFFazlCLEdBQUcsRUFBRSxPQUFPbjlCLEVBQUVvUixTQUFTcFIsRUFBRW9SLFNBQVMsR0FBR3BSLEVBQUVrRixJQUFJakYsSUFBS2kzQixNQUFNM3hCLEVBQUV0RixFQUFFZ1ksVUFBVSxDQUFDc0UsY0FBY3ZjLEVBQUV1YyxjQUFjaXhCLGdCQUFnQixLQUFLOVIsZUFBZTE3QixFQUFFMDdCLGdCQUF1Qno3QixFQUNyTCxTQUFTd3RDLEdBQUd6dEMsRUFBRUMsRUFBRXNGLEdBQUdsRCxLQUFLd00sSUFBSTVPLEVBQUVvQyxLQUFLa2EsY0FBY3ZjLEVBQUVxQyxLQUFLa3BDLGFBQWFscEMsS0FBS3dwQyxVQUFVeHBDLEtBQUtpWSxRQUFRalksS0FBS21yQyxnQkFBZ0IsS0FBS25yQyxLQUFLcXBDLGVBQWUsRUFBRXJwQyxLQUFLc2hDLGVBQWV0aEMsS0FBS2cxQixRQUFRLEtBQUtoMUIsS0FBS2lhLFFBQVEvVyxFQUFFbEQsS0FBS3VvQyxhQUFhLEtBQUt2b0MsS0FBS3lvQyxpQkFBaUIsRUFBRXpvQyxLQUFLZ2QsV0FBV0YsR0FBRyxHQUFHOWMsS0FBS3dvQyxnQkFBZ0IxckIsSUFBSSxHQUFHOWMsS0FBS3ljLGVBQWV6YyxLQUFLbXBDLGNBQWNucEMsS0FBS3c5QixpQkFBaUJ4OUIsS0FBS3FjLGFBQWFyYyxLQUFLdWMsWUFBWXZjLEtBQUtzYyxlQUFldGMsS0FBS29jLGFBQWEsRUFBRXBjLEtBQUswYyxjQUFjSSxHQUFHLEdBQUc5YyxLQUFLcXJDLGdDQUFnQyxLQUM3ZSxTQUFTQyxHQUFHM3RDLEVBQUVDLEVBQUVzRixHQUFHLElBQUlDLEVBQUUsRUFBRS9CLFVBQVV4QyxhQUFRLElBQVN3QyxVQUFVLEdBQUdBLFVBQVUsR0FBRyxLQUFLLE1BQU0sQ0FBQ3VMLFNBQVN2QyxFQUFHdkgsSUFBSSxNQUFNTSxFQUFFLEtBQUssR0FBR0EsRUFBRTRMLFNBQVNwUixFQUFFdWMsY0FBY3RjLEVBQUV5N0IsZUFBZW4yQixHQUN4SyxTQUFTcW9DLEdBQUc1dEMsRUFBRUMsRUFBRXNGLEVBQUVDLEdBQUcsSUFBSUosRUFBRW5GLEVBQUVxYSxRQUFRN1UsRUFBRSt6QixLQUFLenVCLEVBQUUwdUIsR0FBR3IwQixHQUFHcEYsRUFBRSxHQUFHdUYsRUFBRSxDQUFxQnRGLEVBQUUsQ0FBQyxHQUFHMFosR0FBMUJwVSxFQUFFQSxFQUFFK3pCLG1CQUE4Qi96QixHQUFHLElBQUlBLEVBQUVzSixJQUFJLE1BQU1qSixNQUFNa0UsRUFBRSxNQUFNLElBQUk2RSxFQUFFcEosRUFBRSxFQUFFLENBQUMsT0FBT29KLEVBQUVFLEtBQUssS0FBSyxFQUFFRixFQUFFQSxFQUFFc0osVUFBVW9mLFFBQVEsTUFBTXAzQixFQUFFLEtBQUssRUFBRSxHQUFHd3pCLEdBQUc5a0IsRUFBRXZMLE1BQU0sQ0FBQ3VMLEVBQUVBLEVBQUVzSixVQUFVOGIsMENBQTBDLE1BQU05ekIsR0FBRzBPLEVBQUVBLEVBQUVrTCxhQUFhLE9BQU9sTCxHQUFHLE1BQU0vSSxNQUFNa0UsRUFBRSxNQUFPLEdBQUcsSUFBSXZFLEVBQUVzSixJQUFJLENBQUMsSUFBSUgsRUFBRW5KLEVBQUVuQyxLQUFLLEdBQUdxd0IsR0FBRy9rQixHQUFHLENBQUNuSixFQUFFcXVCLEdBQUdydUIsRUFBRW1KLEVBQUVDLEdBQUcsTUFBTTNPLEdBQUd1RixFQUFFb0osT0FBT3BKLEVBQUUydEIsR0FDclcsT0FEd1csT0FBT2p6QixFQUFFbzNCLFFBQVFwM0IsRUFBRW8zQixRQUFROXhCLEVBQUV0RixFQUFFMGpDLGVBQWVwK0IsR0FBRXRGLEVBQUVrNEIsR0FBRzF5QixFQUFFc0YsSUFBS3V0QixRQUFRLENBQUNydkIsUUFBUWpKLEdBQXVCLFFBQXBCd0YsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEtBQzFldkYsRUFBRXM0QixTQUFTL3lCLEdBQUdnekIsR0FBR3B6QixFQUFFbkYsR0FBR3k1QixHQUFHdDBCLEVBQUUyRixFQUFFdEYsR0FBVXNGLEVBQUUsU0FBUzhpQyxHQUFHN3RDLEdBQWUsS0FBWkEsRUFBRUEsRUFBRXNhLFNBQWNGLE1BQU0sT0FBTyxLQUFLLE9BQU9wYSxFQUFFb2EsTUFBTXZMLEtBQUssS0FBSyxFQUEyQixRQUFRLE9BQU83TyxFQUFFb2EsTUFBTW5DLFdBQVcsU0FBUzYxQixHQUFHOXRDLEVBQUVDLEdBQXFCLEdBQUcsUUFBckJELEVBQUVBLEVBQUVnYSxnQkFBMkIsT0FBT2hhLEVBQUVpYSxXQUFXLENBQUMsSUFBSTFVLEVBQUV2RixFQUFFZ2tDLFVBQVVoa0MsRUFBRWdrQyxVQUFVLElBQUl6K0IsR0FBR0EsRUFBRXRGLEVBQUVzRixFQUFFdEYsR0FBRyxTQUFTOHRDLEdBQUcvdEMsRUFBRUMsR0FBRzZ0QyxHQUFHOXRDLEVBQUVDLElBQUlELEVBQUVBLEVBQUU0WixZQUFZazBCLEdBQUc5dEMsRUFBRUMsR0FDeFYsU0FBUyt0QyxHQUFHaHVDLEVBQUVDLEVBQUVzRixHQUFHLElBQUlDLEVBQUUsTUFBTUQsR0FBRyxNQUFNQSxFQUFFMG9DLGtCQUFrQjFvQyxFQUFFMG9DLGlCQUFpQkMsZ0JBQWdCLEtBQWlLLEdBQTVKM29DLEVBQUUsSUFBSWtvQyxHQUFHenRDLEVBQUVDLEVBQUUsTUFBTXNGLElBQUcsSUFBS0EsRUFBRStXLFNBQVNyYyxFQUFFazlCLEdBQUcsRUFBRSxLQUFLLEtBQUssSUFBSWw5QixFQUFFLEVBQUUsSUFBSUEsRUFBRSxFQUFFLEdBQUdzRixFQUFFK1UsUUFBUXJhLEVBQUVBLEVBQUVnWSxVQUFVMVMsRUFBRW15QixHQUFHejNCLEdBQUdELEVBQUU2d0IsSUFBSXRyQixFQUFFK1UsUUFBUTBWLEdBQUcsSUFBSWh3QixFQUFFZ1QsU0FBU2hULEVBQUUyWCxXQUFXM1gsR0FBTXdGLEVBQUUsSUFBSXhGLEVBQUUsRUFBRUEsRUFBRXdGLEVBQUV2RSxPQUFPakIsSUFBSSxDQUFRLElBQUlvRixHQUFYbkYsRUFBRXVGLEVBQUV4RixJQUFXMi9CLFlBQVl2NkIsRUFBRUEsRUFBRW5GLEVBQUUyL0IsU0FBUyxNQUFNcjZCLEVBQUVtb0MsZ0NBQWdDbm9DLEVBQUVtb0MsZ0NBQWdDLENBQUN6dEMsRUFBRW1GLEdBQUdHLEVBQUVtb0MsZ0NBQWdDeHNDLEtBQUtqQixFQUFFbUYsR0FBRy9DLEtBQUs4ckMsY0FBYzVvQyxFQUMvUixTQUFTNm9DLEdBQUdwdUMsR0FBRyxTQUFTQSxHQUFHLElBQUlBLEVBQUVnVCxVQUFVLElBQUloVCxFQUFFZ1QsVUFBVSxLQUFLaFQsRUFBRWdULFdBQVcsSUFBSWhULEVBQUVnVCxVQUFVLGlDQUFpQ2hULEVBQUVpVCxZQUV2VCxTQUFTbzdCLEdBQUdydUMsRUFBRUMsRUFBRXNGLEVBQUVDLEVBQUVKLEdBQUcsSUFBSUssRUFBRUYsRUFBRTZpQyxvQkFBb0IsR0FBRzNpQyxFQUFFLENBQUMsSUFBSXNGLEVBQUV0RixFQUFFMG9DLGNBQWMsR0FBRyxtQkFBb0Ivb0MsRUFBRSxDQUFDLElBQUl1SixFQUFFdkosRUFBRUEsRUFBRSxXQUFXLElBQUlwRixFQUFFNnRDLEdBQUc5aUMsR0FBRzRELEVBQUVsTyxLQUFLVCxJQUFJNHRDLEdBQUczdEMsRUFBRThLLEVBQUUvSyxFQUFFb0YsT0FBTyxDQUFtRCxHQUFsREssRUFBRUYsRUFBRTZpQyxvQkFEMUssU0FBWXBvQyxFQUFFQyxHQUEwSCxHQUF2SEEsSUFBMkRBLE1BQXZEQSxFQUFFRCxFQUFFLElBQUlBLEVBQUVnVCxTQUFTaFQsRUFBRXM4QixnQkFBZ0J0OEIsRUFBRXlTLFdBQVcsT0FBYSxJQUFJeFMsRUFBRStTLFdBQVcvUyxFQUFFcXVDLGFBQWEscUJBQXdCcnVDLEVBQUUsSUFBSSxJQUFJc0YsRUFBRUEsRUFBRXZGLEVBQUUrUyxXQUFXL1MsRUFBRTBTLFlBQVluTixHQUFHLE9BQU8sSUFBSXlvQyxHQUFHaHVDLEVBQUUsRUFBRUMsRUFBRSxDQUFDcWMsU0FBUSxRQUFJLEdBQzNCaXlCLENBQUdocEMsRUFBRUMsR0FBR3VGLEVBQUV0RixFQUFFMG9DLGNBQWlCLG1CQUFvQi9vQyxFQUFFLENBQUMsSUFBSXNKLEVBQUV0SixFQUFFQSxFQUFFLFdBQVcsSUFBSXBGLEVBQUU2dEMsR0FBRzlpQyxHQUFHMkQsRUFBRWpPLEtBQUtULElBQUk0ckMsSUFBRyxXQUFXZ0MsR0FBRzN0QyxFQUFFOEssRUFBRS9LLEVBQUVvRixNQUFLLE9BQU95b0MsR0FBRzlpQyxHQUdsRyxTQUFTeWpDLEdBQUd4dUMsRUFBRUMsR0FBRyxJQUFJc0YsRUFBRSxFQUFFOUIsVUFBVXhDLGFBQVEsSUFBU3dDLFVBQVUsR0FBR0EsVUFBVSxHQUFHLEtBQUssSUFBSTJxQyxHQUFHbnVDLEdBQUcsTUFBTTJGLE1BQU1rRSxFQUFFLE1BQU0sT0FBTzZqQyxHQUFHM3RDLEVBQUVDLEVBQUUsS0FBS3NGLEdBMUJ0V2trQyxHQUFHLFNBQVN6cEMsRUFBRUMsRUFBRXNGLEdBQUcsSUFBSUMsRUFBRXZGLEVBQUVpM0IsTUFBTSxHQUFHLE9BQU9sM0IsRUFBRSxHQUFHQSxFQUFFNjhCLGdCQUFnQjU4QixFQUFFbzlCLGNBQWNqSyxHQUFFOVksUUFBUTZjLElBQUcsTUFBUSxJQUFHLElBQUs1eEIsRUFBRUMsR0FBb0MsQ0FBTyxPQUFOMnhCLElBQUcsRUFBVWwzQixFQUFFNE8sS0FBSyxLQUFLLEVBQUU2MEIsR0FBR3pqQyxHQUFHdzlCLEtBQUssTUFBTSxLQUFLLEVBQUVoQixHQUFHeDhCLEdBQUcsTUFBTSxLQUFLLEVBQUV3ekIsR0FBR3h6QixFQUFFbUQsT0FBTzB3QixHQUFHN3pCLEdBQUcsTUFBTSxLQUFLLEVBQUVvOEIsR0FBR3A4QixFQUFFQSxFQUFFZ1ksVUFBVXNFLGVBQWUsTUFBTSxLQUFLLEdBQUcvVyxFQUFFdkYsRUFBRTQ4QixjQUFjM3NCLE1BQU0sSUFBSTlLLEVBQUVuRixFQUFFbUQsS0FBSzZMLFNBQVNna0IsR0FBRXFELEdBQUdseEIsRUFBRXd4QixlQUFleHhCLEVBQUV3eEIsY0FBY3B4QixFQUFFLE1BQU0sS0FBSyxHQUFHLEdBQUcsT0FBT3ZGLEVBQUUrWixjQUFlLE9BQUcsSUFBS3pVLEVBQUV0RixFQUFFbWEsTUFBTTBjLFlBQW1CbU4sR0FBR2prQyxFQUFFQyxFQUFFc0YsSUFBRzB0QixHQUFFMEosR0FBWSxFQUFWQSxHQUFFcmlCLFNBQThCLFFBQW5CcmEsRUFBRTJpQyxHQUFHNWlDLEVBQUVDLEVBQUVzRixJQUMvZXRGLEVBQUVvYSxRQUFRLE1BQUs0WSxHQUFFMEosR0FBWSxFQUFWQSxHQUFFcmlCLFNBQVcsTUFBTSxLQUFLLEdBQTBCLEdBQXZCOVUsRUFBRSxJQUFLRCxFQUFFdEYsRUFBRTYyQixZQUFlLElBQWEsR0FBUjkyQixFQUFFOFosT0FBVSxDQUFDLEdBQUd0VSxFQUFFLE9BQU95L0IsR0FBR2psQyxFQUFFQyxFQUFFc0YsR0FBR3RGLEVBQUU2WixPQUFPLEdBQStGLEdBQTFFLFFBQWxCMVUsRUFBRW5GLEVBQUUrWixpQkFBeUI1VSxFQUFFdy9CLFVBQVUsS0FBS3gvQixFQUFFMi9CLEtBQUssS0FBSzMvQixFQUFFODFCLFdBQVcsTUFBTWpJLEdBQUUwSixHQUFFQSxHQUFFcmlCLFNBQVk5VSxFQUFFLE1BQVcsT0FBTyxLQUFLLEtBQUssR0FBRyxLQUFLLEdBQUcsT0FBT3ZGLEVBQUVpM0IsTUFBTSxFQUFFK0wsR0FBR2pqQyxFQUFFQyxFQUFFc0YsR0FBRyxPQUFPcTlCLEdBQUc1aUMsRUFBRUMsRUFBRXNGLEdBRDNMNHhCLEdBQUcsSUFBYSxNQUFSbjNCLEVBQUU4WixZQUN5THFkLElBQUcsRUFBYSxPQUFWbDNCLEVBQUVpM0IsTUFBTSxFQUFTajNCLEVBQUU0TyxLQUFLLEtBQUssRUFBK0ksR0FBN0lySixFQUFFdkYsRUFBRW1ELEtBQUssT0FBT3BELElBQUlBLEVBQUU0WixVQUFVLEtBQUszWixFQUFFMlosVUFBVSxLQUFLM1osRUFBRTZaLE9BQU8sR0FBRzlaLEVBQUVDLEVBQUVvOUIsYUFBYWo0QixFQUFFa3VCLEdBQUdyekIsRUFBRWt6QixHQUFFN1ksU0FBU3ljLEdBQUc5MkIsRUFBRXNGLEdBQUdILEVBQUVvNUIsR0FBRyxLQUFLditCLEVBQUV1RixFQUFFeEYsRUFBRW9GLEVBQUVHLEdBQUd0RixFQUFFNlosT0FBTyxFQUFLLGlCQUNyZTFVLEdBQUcsT0FBT0EsR0FBRyxtQkFBb0JBLEVBQUVsQixhQUFRLElBQVNrQixFQUFFNEosU0FBUyxDQUFpRCxHQUFoRC9PLEVBQUU0TyxJQUFJLEVBQUU1TyxFQUFFK1osY0FBYyxLQUFLL1osRUFBRTAzQixZQUFZLEtBQVFsRSxHQUFHanVCLEdBQUcsQ0FBQyxJQUFJQyxHQUFFLEVBQUdxdUIsR0FBRzd6QixRQUFRd0YsR0FBRSxFQUFHeEYsRUFBRStaLGNBQWMsT0FBTzVVLEVBQUU2MEIsWUFBTyxJQUFTNzBCLEVBQUU2MEIsTUFBTTcwQixFQUFFNjBCLE1BQU0sS0FBS3ZDLEdBQUd6M0IsR0FBRyxJQUFJOEssRUFBRXZGLEVBQUV2Qyx5QkFBeUIsbUJBQW9COEgsR0FBR291QixHQUFHbDVCLEVBQUV1RixFQUFFdUYsRUFBRS9LLEdBQUdvRixFQUFFODBCLFFBQVFkLEdBQUduNUIsRUFBRWdZLFVBQVU3UyxFQUFFQSxFQUFFazBCLGdCQUFnQnI1QixFQUFFcTZCLEdBQUdyNkIsRUFBRXVGLEVBQUV4RixFQUFFdUYsR0FBR3RGLEVBQUV3akMsR0FBRyxLQUFLeGpDLEVBQUV1RixHQUFFLEVBQUdDLEVBQUVGLFFBQVF0RixFQUFFNE8sSUFBSSxFQUFFNnpCLEdBQUcsS0FBS3ppQyxFQUFFbUYsRUFBRUcsR0FBR3RGLEVBQUVBLEVBQUVtYSxNQUFNLE9BQU9uYSxFQUFFLEtBQUssR0FBR21GLEVBQUVuRixFQUFFaUosWUFBWWxKLEVBQUUsQ0FDaFgsT0FEaVgsT0FBT0EsSUFBSUEsRUFBRTRaLFVBQVUsS0FBSzNaLEVBQUUyWixVQUFVLEtBQUszWixFQUFFNlosT0FBTyxHQUNuZjlaLEVBQUVDLEVBQUVvOUIsYUFBdUJqNEIsR0FBVkssRUFBRUwsRUFBRStKLE9BQVUvSixFQUFFOEosVUFBVWpQLEVBQUVtRCxLQUFLZ0MsRUFBRUssRUFBRXhGLEVBQUU0TyxJQU94RCxTQUFZN08sR0FBRyxHQUFHLG1CQUFvQkEsRUFBRSxPQUFPOGlDLEdBQUc5aUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxNQUFTQSxFQUFZLENBQWMsSUFBYkEsRUFBRUEsRUFBRWdQLFlBQWdCakMsRUFBRyxPQUFPLEdBQUcsR0FBRy9NLElBQUlrTixFQUFHLE9BQU8sR0FBRyxPQUFPLEVBUGxGdWhDLENBQUdycEMsR0FBR3BGLEVBQUVxMkIsR0FBR2p4QixFQUFFcEYsR0FBVXlGLEdBQUcsS0FBSyxFQUFFeEYsRUFBRStpQyxHQUFHLEtBQUsvaUMsRUFBRW1GLEVBQUVwRixFQUFFdUYsR0FBRyxNQUFNdkYsRUFBRSxLQUFLLEVBQUVDLEVBQUVvakMsR0FBRyxLQUFLcGpDLEVBQUVtRixFQUFFcEYsRUFBRXVGLEdBQUcsTUFBTXZGLEVBQUUsS0FBSyxHQUFHQyxFQUFFMGlDLEdBQUcsS0FBSzFpQyxFQUFFbUYsRUFBRXBGLEVBQUV1RixHQUFHLE1BQU12RixFQUFFLEtBQUssR0FBR0MsRUFBRTRpQyxHQUFHLEtBQUs1aUMsRUFBRW1GLEVBQUVpeEIsR0FBR2p4QixFQUFFaEMsS0FBS3BELEdBQUd3RixFQUFFRCxHQUFHLE1BQU12RixFQUFFLE1BQU00RixNQUFNa0UsRUFBRSxJQUFJMUUsRUFBRSxLQUFNLE9BQU9uRixFQUFFLEtBQUssRUFBRSxPQUFPdUYsRUFBRXZGLEVBQUVtRCxLQUFLZ0MsRUFBRW5GLEVBQUVvOUIsYUFBMkMyRixHQUFHaGpDLEVBQUVDLEVBQUV1RixFQUFyQ0osRUFBRW5GLEVBQUVpSixjQUFjMUQsRUFBRUosRUFBRWl4QixHQUFHN3dCLEVBQUVKLEdBQWNHLEdBQUcsS0FBSyxFQUFFLE9BQU9DLEVBQUV2RixFQUFFbUQsS0FBS2dDLEVBQUVuRixFQUFFbzlCLGFBQTJDZ0csR0FBR3JqQyxFQUFFQyxFQUFFdUYsRUFBckNKLEVBQUVuRixFQUFFaUosY0FBYzFELEVBQUVKLEVBQUVpeEIsR0FBRzd3QixFQUFFSixHQUFjRyxHQUFHLEtBQUssRUFBd0IsR0FBdEJtK0IsR0FBR3pqQyxHQUFHdUYsRUFBRXZGLEVBQUUwM0IsWUFBZSxPQUFPMzNCLEdBQUcsT0FBT3dGLEVBQUUsTUFBTUksTUFBTWtFLEVBQUUsTUFDM1ksR0FBOUd0RSxFQUFFdkYsRUFBRW85QixhQUErQmo0QixFQUFFLFFBQXBCQSxFQUFFbkYsRUFBRStaLGVBQXlCNVUsRUFBRTZELFFBQVEsS0FBS2l2QixHQUFHbDRCLEVBQUVDLEdBQUd5NEIsR0FBR3o0QixFQUFFdUYsRUFBRSxLQUFLRCxJQUFHQyxFQUFFdkYsRUFBRStaLGNBQWMvUSxXQUFlN0QsRUFBRXE0QixLQUFLeDlCLEVBQUUyaUMsR0FBRzVpQyxFQUFFQyxFQUFFc0YsT0FBTyxDQUF1RixJQUFyRUUsR0FBakJMLEVBQUVuRixFQUFFZ1ksV0FBaUJxRSxXQUFRMGdCLEdBQUczSyxHQUFHcHlCLEVBQUVnWSxVQUFVc0UsY0FBYzlKLFlBQVlzcUIsR0FBRzk4QixFQUFFd0YsRUFBRXczQixJQUFHLEdBQU14M0IsRUFBRSxDQUFxQyxHQUFHLE9BQXZDekYsRUFBRW9GLEVBQUVzb0MsaUNBQTJDLElBQUl0b0MsRUFBRSxFQUFFQSxFQUFFcEYsRUFBRWlCLE9BQU9tRSxHQUFHLEdBQUVLLEVBQUV6RixFQUFFb0YsSUFBS3c0Qiw4QkFBOEI1OUIsRUFBRW9GLEVBQUUsR0FBR3M0QixHQUFHeDhCLEtBQUt1RSxHQUFvQixJQUFqQkYsRUFBRXcyQixHQUFHOTdCLEVBQUUsS0FBS3VGLEVBQUVELEdBQU90RixFQUFFbWEsTUFBTTdVLEVBQUVBLEdBQUdBLEVBQUV1VSxPQUFlLEVBQVR2VSxFQUFFdVUsTUFBUyxLQUFLdlUsRUFBRUEsRUFBRThVLGFBQWFxb0IsR0FBRzFpQyxFQUFFQyxFQUFFdUYsRUFBRUQsR0FBR2s0QixLQUFLeDlCLEVBQUVBLEVBQUVtYSxNQUFNLE9BQU9uYSxFQUFFLEtBQUssRUFBRSxPQUFPdzhCLEdBQUd4OEIsR0FBRyxPQUFPRCxHQUNuZnM5QixHQUFHcjlCLEdBQUd1RixFQUFFdkYsRUFBRW1ELEtBQUtnQyxFQUFFbkYsRUFBRW85QixhQUFhNTNCLEVBQUUsT0FBT3pGLEVBQUVBLEVBQUU2OEIsY0FBYyxLQUFLOXhCLEVBQUUzRixFQUFFZ00sU0FBUzBnQixHQUFHdHNCLEVBQUVKLEdBQUcyRixFQUFFLEtBQUssT0FBT3RGLEdBQUdxc0IsR0FBR3RzQixFQUFFQyxLQUFLeEYsRUFBRTZaLE9BQU8sSUFBSXNwQixHQUFHcGpDLEVBQUVDLEdBQUd5aUMsR0FBRzFpQyxFQUFFQyxFQUFFOEssRUFBRXhGLEdBQUd0RixFQUFFbWEsTUFBTSxLQUFLLEVBQUUsT0FBTyxPQUFPcGEsR0FBR3M5QixHQUFHcjlCLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBT2drQyxHQUFHamtDLEVBQUVDLEVBQUVzRixHQUFHLEtBQUssRUFBRSxPQUFPODJCLEdBQUdwOEIsRUFBRUEsRUFBRWdZLFVBQVVzRSxlQUFlL1csRUFBRXZGLEVBQUVvOUIsYUFBYSxPQUFPcjlCLEVBQUVDLEVBQUVtYSxNQUFNMGhCLEdBQUc3N0IsRUFBRSxLQUFLdUYsRUFBRUQsR0FBR205QixHQUFHMWlDLEVBQUVDLEVBQUV1RixFQUFFRCxHQUFHdEYsRUFBRW1hLE1BQU0sS0FBSyxHQUFHLE9BQU81VSxFQUFFdkYsRUFBRW1ELEtBQUtnQyxFQUFFbkYsRUFBRW85QixhQUEyQ3NGLEdBQUczaUMsRUFBRUMsRUFBRXVGLEVBQXJDSixFQUFFbkYsRUFBRWlKLGNBQWMxRCxFQUFFSixFQUFFaXhCLEdBQUc3d0IsRUFBRUosR0FBY0csR0FBRyxLQUFLLEVBQUUsT0FBT205QixHQUFHMWlDLEVBQUVDLEVBQUVBLEVBQUVvOUIsYUFBYTkzQixHQUFHdEYsRUFBRW1hLE1BQU0sS0FBSyxFQUN0YyxLQUFLLEdBQUcsT0FBT3NvQixHQUFHMWlDLEVBQUVDLEVBQUVBLEVBQUVvOUIsYUFBYWpzQixTQUFTN0wsR0FBR3RGLEVBQUVtYSxNQUFNLEtBQUssR0FBR3BhLEVBQUUsQ0FBQ3dGLEVBQUV2RixFQUFFbUQsS0FBSzZMLFNBQVM3SixFQUFFbkYsRUFBRW85QixhQUFhdHlCLEVBQUU5SyxFQUFFNDhCLGNBQWNwM0IsRUFBRUwsRUFBRThLLE1BQU0sSUFBSXZCLEVBQUUxTyxFQUFFbUQsS0FBSzZMLFNBQWlELEdBQXhDZ2tCLEdBQUVxRCxHQUFHM25CLEVBQUVpb0IsZUFBZWpvQixFQUFFaW9CLGNBQWNueEIsRUFBSyxPQUFPc0YsRUFBRSxHQUFHNEQsRUFBRTVELEVBQUVtRixNQUEwRyxJQUFwR3pLLEVBQUV5bkIsR0FBR3ZlLEVBQUVsSixHQUFHLEVBQXdGLEdBQXJGLG1CQUFvQkQsRUFBRWtwQyxzQkFBc0JscEMsRUFBRWtwQyxzQkFBc0IvL0IsRUFBRWxKLEdBQUcsY0FBcUIsR0FBR3NGLEVBQUVxRyxXQUFXaE0sRUFBRWdNLFdBQVdnaUIsR0FBRTlZLFFBQVEsQ0FBQ3JhLEVBQUUyaUMsR0FBRzVpQyxFQUFFQyxFQUFFc0YsR0FBRyxNQUFNdkYsUUFBUSxJQUFjLFFBQVYyTyxFQUFFMU8sRUFBRW1hLFNBQWlCekwsRUFBRWtMLE9BQU81WixHQUFHLE9BQU8wTyxHQUFHLENBQUMsSUFBSUQsRUFBRUMsRUFBRXFvQixhQUFhLEdBQUcsT0FBT3RvQixFQUFFLENBQUMzRCxFQUFFNEQsRUFBRXlMLE1BQU0sSUFBSSxJQUFJbEIsRUFDdGZ4SyxFQUFFdW9CLGFBQWEsT0FBTy9kLEdBQUcsQ0FBQyxHQUFHQSxFQUFFbWUsVUFBVTd4QixHQUFHLElBQUswVCxFQUFFb2UsYUFBYTd4QixHQUFHLENBQUMsSUFBSWtKLEVBQUVFLE9BQU1xSyxFQUFFaWYsSUFBSSxFQUFFNXlCLEdBQUdBLElBQUtzSixJQUFJLEVBQUUycEIsR0FBRzdwQixFQUFFdUssSUFBSXZLLEVBQUV1b0IsT0FBTzN4QixFQUFnQixRQUFkMlQsRUFBRXZLLEVBQUVpTCxhQUFxQlYsRUFBRWdlLE9BQU8zeEIsR0FBR3N4QixHQUFHbG9CLEVBQUVrTCxPQUFPdFUsR0FBR21KLEVBQUV3b0IsT0FBTzN4QixFQUFFLE1BQU0yVCxFQUFFQSxFQUFFcWUsV0FBV3hzQixFQUFFLEtBQUs0RCxFQUFFRSxLQUFJRixFQUFFdkwsT0FBT25ELEVBQUVtRCxLQUFLLEtBQWF1TCxFQUFFeUwsTUFBTSxHQUFHLE9BQU9yUCxFQUFFQSxFQUFFOE8sT0FBT2xMLE9BQU8sSUFBSTVELEVBQUU0RCxFQUFFLE9BQU81RCxHQUFHLENBQUMsR0FBR0EsSUFBSTlLLEVBQUUsQ0FBQzhLLEVBQUUsS0FBSyxNQUFrQixHQUFHLFFBQWY0RCxFQUFFNUQsRUFBRXNQLFNBQW9CLENBQUMxTCxFQUFFa0wsT0FBTzlPLEVBQUU4TyxPQUFPOU8sRUFBRTRELEVBQUUsTUFBTTVELEVBQUVBLEVBQUU4TyxPQUFPbEwsRUFBRTVELEVBQUUyM0IsR0FBRzFpQyxFQUFFQyxFQUFFbUYsRUFBRWdNLFNBQVM3TCxHQUFHdEYsRUFBRUEsRUFBRW1hLE1BQU0sT0FBT25hLEVBQUUsS0FBSyxFQUFFLE9BQU9tRixFQUFFbkYsRUFBRW1ELEtBQXNCb0MsR0FBakJDLEVBQUV4RixFQUFFbzlCLGNBQWlCanNCLFNBQVMybEIsR0FBRzkyQixFQUFFc0YsR0FDbmRDLEVBQUVBLEVBRG9kSixFQUFFZ3lCLEdBQUdoeUIsRUFDcGZLLEVBQUVrcEMsd0JBQThCMXVDLEVBQUU2WixPQUFPLEVBQUU0b0IsR0FBRzFpQyxFQUFFQyxFQUFFdUYsRUFBRUQsR0FBR3RGLEVBQUVtYSxNQUFNLEtBQUssR0FBRyxPQUFnQjNVLEVBQUU0d0IsR0FBWGp4QixFQUFFbkYsRUFBRW1ELEtBQVluRCxFQUFFbzlCLGNBQTZCd0YsR0FBRzdpQyxFQUFFQyxFQUFFbUYsRUFBdEJLLEVBQUU0d0IsR0FBR2p4QixFQUFFaEMsS0FBS3FDLEdBQWNELEVBQUVELEdBQUcsS0FBSyxHQUFHLE9BQU93OUIsR0FBRy9pQyxFQUFFQyxFQUFFQSxFQUFFbUQsS0FBS25ELEVBQUVvOUIsYUFBYTczQixFQUFFRCxHQUFHLEtBQUssR0FBRyxPQUFPQyxFQUFFdkYsRUFBRW1ELEtBQUtnQyxFQUFFbkYsRUFBRW85QixhQUFhajRCLEVBQUVuRixFQUFFaUosY0FBYzFELEVBQUVKLEVBQUVpeEIsR0FBRzd3QixFQUFFSixHQUFHLE9BQU9wRixJQUFJQSxFQUFFNFosVUFBVSxLQUFLM1osRUFBRTJaLFVBQVUsS0FBSzNaLEVBQUU2WixPQUFPLEdBQUc3WixFQUFFNE8sSUFBSSxFQUFFNGtCLEdBQUdqdUIsSUFBSXhGLEdBQUUsRUFBRzh6QixHQUFHN3pCLElBQUlELEdBQUUsRUFBRysyQixHQUFHOTJCLEVBQUVzRixHQUFHeTBCLEdBQUcvNUIsRUFBRXVGLEVBQUVKLEdBQUdrMUIsR0FBR3I2QixFQUFFdUYsRUFBRUosRUFBRUcsR0FBR2srQixHQUFHLEtBQUt4akMsRUFBRXVGLEdBQUUsRUFBR3hGLEVBQUV1RixHQUFHLEtBQUssR0FBRyxPQUFPMC9CLEdBQUdqbEMsRUFBRUMsRUFBRXNGLEdBQUcsS0FBSyxHQUFvQixLQUFLLEdBQUcsT0FBTzA5QixHQUFHampDLEVBQUVDLEVBQUVzRixHQUFHLE1BQU1LLE1BQU1rRSxFQUFFLElBQUk3SixFQUFFNE8sT0FhL2VtL0IsR0FBRzF0QyxVQUFVNEQsT0FBTyxTQUFTbEUsR0FBRzR0QyxHQUFHNXRDLEVBQUVxQyxLQUFLOHJDLGNBQWMsS0FBSyxPQUFPSCxHQUFHMXRDLFVBQVVzdUMsUUFBUSxXQUFXLElBQUk1dUMsRUFBRXFDLEtBQUs4ckMsY0FBY2x1QyxFQUFFRCxFQUFFdWMsY0FBY3F4QixHQUFHLEtBQUs1dEMsRUFBRSxNQUFLLFdBQVdDLEVBQUU0d0IsSUFBSSxTQUV3SnBXLEdBQUcsU0FBU3phLEdBQU0sS0FBS0EsRUFBRTZPLE1BQWdCNnFCLEdBQUcxNUIsRUFBRSxFQUFWdzVCLE1BQWV1VSxHQUFHL3RDLEVBQUUsS0FBSzBhLEdBQUcsU0FBUzFhLEdBQU0sS0FBS0EsRUFBRTZPLE1BQWdCNnFCLEdBQUcxNUIsRUFBRSxTQUFWdzVCLE1BQXNCdVUsR0FBRy90QyxFQUFFLFlBQ25jMmEsR0FBRyxTQUFTM2EsR0FBRyxHQUFHLEtBQUtBLEVBQUU2TyxJQUFJLENBQUMsSUFBSTVPLEVBQUV1NUIsS0FBS2owQixFQUFFazBCLEdBQUd6NUIsR0FBRzA1QixHQUFHMTVCLEVBQUV1RixFQUFFdEYsR0FBRzh0QyxHQUFHL3RDLEVBQUV1RixLQUFLcVYsR0FBRyxTQUFTNWEsRUFBRUMsR0FBRyxPQUFPQSxLQUM3RjJYLEdBQUcsU0FBUzVYLEVBQUVDLEVBQUVzRixHQUFHLE9BQU90RixHQUFHLElBQUssUUFBeUIsR0FBakI4USxHQUFHL1EsRUFBRXVGLEdBQUd0RixFQUFFc0YsRUFBRWpDLEtBQVEsVUFBVWlDLEVBQUVuQyxNQUFNLE1BQU1uRCxFQUFFLENBQUMsSUFBSXNGLEVBQUV2RixFQUFFdUYsRUFBRW9TLFlBQVlwUyxFQUFFQSxFQUFFb1MsV0FBc0YsSUFBM0VwUyxFQUFFQSxFQUFFc3BDLGlCQUFpQixjQUFjQyxLQUFLQyxVQUFVLEdBQUc5dUMsR0FBRyxtQkFBdUJBLEVBQUUsRUFBRUEsRUFBRXNGLEVBQUV0RSxPQUFPaEIsSUFBSSxDQUFDLElBQUl1RixFQUFFRCxFQUFFdEYsR0FBRyxHQUFHdUYsSUFBSXhGLEdBQUd3RixFQUFFd3BDLE9BQU9odkMsRUFBRWd2QyxLQUFLLENBQUMsSUFBSTVwQyxFQUFFOFMsR0FBRzFTLEdBQUcsSUFBSUosRUFBRSxNQUFNUSxNQUFNa0UsRUFBRSxLQUFLa0csRUFBR3hLLEdBQUd1TCxHQUFHdkwsRUFBRUosS0FBSyxNQUFNLElBQUssV0FBVzJNLEdBQUcvUixFQUFFdUYsR0FBRyxNQUFNLElBQUssU0FBbUIsT0FBVnRGLEVBQUVzRixFQUFFMkssUUFBZXFCLEdBQUd2UixJQUFJdUYsRUFBRTgvQixTQUFTcGxDLEdBQUUsS0FBTW9ZLEdBQUdzekIsR0FDOVpyekIsR0FBRyxTQUFTdFksRUFBRUMsRUFBRXNGLEVBQUVDLEVBQUVKLEdBQUcsSUFBSUssRUFBRXNqQyxHQUFFQSxJQUFHLEVBQUUsSUFBSSxPQUFPaFQsR0FBRyxHQUFHLzFCLEVBQUVtZ0IsS0FBSyxLQUFLbGdCLEVBQUVzRixFQUFFQyxFQUFFSixJQUFJLFFBQVksS0FBSjJqQyxHQUFFdGpDLEtBQVUrakMsS0FBS3ZULFFBQVExZCxHQUFHLFdBQVcsSUFBTyxHQUFGd3dCLE1BaEQvSCxXQUFjLEdBQUcsT0FBT2lCLEdBQUcsQ0FBQyxJQUFJaHFDLEVBQUVncUMsR0FBR0EsR0FBRyxLQUFLaHFDLEVBQUVrSCxTQUFRLFNBQVNsSCxHQUFHQSxFQUFFMGUsY0FBYyxHQUFHMWUsRUFBRXllLGFBQWFrc0IsR0FBRzNxQyxFQUFFNDFCLFNBQU9LLEtBZ0RzQmdaLEdBQUtoRSxPQUFPenlCLEdBQUcsU0FBU3hZLEVBQUVDLEdBQUcsSUFBSXNGLEVBQUV3akMsR0FBRUEsSUFBRyxFQUFFLElBQUksT0FBTy9vQyxFQUFFQyxHQUFHLFFBQVksS0FBSjhvQyxHQUFFeGpDLEtBQVVpa0MsS0FBS3ZULFFBQStJLElBQUlpWixHQUFHLENBQUNDLE9BQU8sQ0FBQ24zQixHQUFHbVUsR0FBR2pVLEdBQUdDLEdBQUdDLEdBQUc2eUIsR0FBRyxDQUFDM3dCLFNBQVEsS0FBTTgwQixHQUFHLENBQUNDLHdCQUF3Qm56QixHQUFHb3pCLFdBQVcsRUFBRUMsUUFBUSxTQUFTQyxvQkFBb0IsYUFDdmVDLEdBQUcsQ0FBQ0gsV0FBV0YsR0FBR0UsV0FBV0MsUUFBUUgsR0FBR0csUUFBUUMsb0JBQW9CSixHQUFHSSxvQkFBb0JFLGVBQWVOLEdBQUdNLGVBQWVDLGtCQUFrQixLQUFLQyw0QkFBNEIsS0FBS0MsNEJBQTRCLEtBQUtDLGNBQWMsS0FBS0Msd0JBQXdCLEtBQUtDLHdCQUF3QixLQUFLQyxtQkFBbUIsS0FBS0MsZUFBZSxLQUFLQyxxQkFBcUI3akMsRUFBR3d4Qix1QkFBdUJzUyx3QkFBd0IsU0FBU3B3QyxHQUFXLE9BQU8sUUFBZkEsRUFBRW1hLEdBQUduYSxJQUFtQixLQUFLQSxFQUFFaVksV0FBV28zQix3QkFBd0JELEdBQUdDLHlCQVIvSSxXQUFjLE9BQU8sTUFTN1dnQiw0QkFBNEIsS0FBS0MsZ0JBQWdCLEtBQUtDLGFBQWEsS0FBS0Msa0JBQWtCLEtBQUtDLGdCQUFnQixNQUFNLEdBQUcsb0JBQXFCQywrQkFBK0IsQ0FBQyxJQUFJQyxHQUFHRCwrQkFBK0IsSUFBSUMsR0FBR0MsWUFBWUQsR0FBR0UsY0FBYyxJQUFJNWMsR0FBRzBjLEdBQUdHLE9BQU9yQixJQUFJdmIsR0FBR3ljLEdBQUcsTUFBTTN3QyxNQUFLMkIsRUFBUTRLLG1EQUFtRDJpQyxHQUFHdnRDLEVBQVFvdkMsYUFBYXZDLEdBQ25YN3NDLEVBQVFxdkMsWUFBWSxTQUFTaHhDLEdBQUcsR0FBRyxNQUFNQSxFQUFFLE9BQU8sS0FBSyxHQUFHLElBQUlBLEVBQUVnVCxTQUFTLE9BQU9oVCxFQUFFLElBQUlDLEVBQUVELEVBQUVzNUIsZ0JBQWdCLFFBQUcsSUFBU3I1QixFQUFFLENBQUMsR0FBRyxtQkFBb0JELEVBQUVrRSxPQUFPLE1BQU0wQixNQUFNa0UsRUFBRSxNQUFNLE1BQU1sRSxNQUFNa0UsRUFBRSxJQUFJekosT0FBT2tCLEtBQUt2QixLQUEwQyxPQUExQixRQUFWQSxFQUFFbWEsR0FBR2xhLElBQWMsS0FBS0QsRUFBRWlZLFdBQW9CdFcsRUFBUXN2QyxVQUFVLFNBQVNqeEMsRUFBRUMsR0FBRyxJQUFJc0YsRUFBRXdqQyxHQUFFLEdBQUcsSUFBTyxHQUFGeGpDLEdBQU0sT0FBT3ZGLEVBQUVDLEdBQUc4b0MsSUFBRyxFQUFFLElBQUksR0FBRy9vQyxFQUFFLE9BQU8rMUIsR0FBRyxHQUFHLzFCLEVBQUVtZ0IsS0FBSyxLQUFLbGdCLElBQUksUUFBUThvQyxHQUFFeGpDLEVBQUUwd0IsT0FBT3QwQixFQUFRMmEsUUFBUSxTQUFTdGMsRUFBRUMsRUFBRXNGLEdBQUcsSUFBSTZvQyxHQUFHbnVDLEdBQUcsTUFBTTJGLE1BQU1rRSxFQUFFLE1BQU0sT0FBT3VrQyxHQUFHLEtBQUtydUMsRUFBRUMsR0FBRSxFQUFHc0YsSUFDbmQ1RCxFQUFRdUMsT0FBTyxTQUFTbEUsRUFBRUMsRUFBRXNGLEdBQUcsSUFBSTZvQyxHQUFHbnVDLEdBQUcsTUFBTTJGLE1BQU1rRSxFQUFFLE1BQU0sT0FBT3VrQyxHQUFHLEtBQUtydUMsRUFBRUMsR0FBRSxFQUFHc0YsSUFBSTVELEVBQVF1dkMsdUJBQXVCLFNBQVNseEMsR0FBRyxJQUFJb3VDLEdBQUdwdUMsR0FBRyxNQUFNNEYsTUFBTWtFLEVBQUUsS0FBSyxRQUFPOUosRUFBRW9vQyxzQkFBcUJ3RCxJQUFHLFdBQVd5QyxHQUFHLEtBQUssS0FBS3J1QyxHQUFFLEdBQUcsV0FBV0EsRUFBRW9vQyxvQkFBb0IsS0FBS3BvQyxFQUFFNndCLElBQUksWUFBUyxJQUFRbHZCLEVBQVF3dkMsd0JBQXdCeEYsR0FBR2hxQyxFQUFReXZDLHNCQUFzQixTQUFTcHhDLEVBQUVDLEdBQUcsT0FBT3V1QyxHQUFHeHVDLEVBQUVDLEVBQUUsRUFBRXdELFVBQVV4QyxhQUFRLElBQVN3QyxVQUFVLEdBQUdBLFVBQVUsR0FBRyxPQUM5YTlCLEVBQVEwdkMsb0NBQW9DLFNBQVNyeEMsRUFBRUMsRUFBRXNGLEVBQUVDLEdBQUcsSUFBSTRvQyxHQUFHN29DLEdBQUcsTUFBTUssTUFBTWtFLEVBQUUsTUFBTSxHQUFHLE1BQU05SixRQUFHLElBQVNBLEVBQUVzNUIsZ0JBQWdCLE1BQU0xekIsTUFBTWtFLEVBQUUsS0FBSyxPQUFPdWtDLEdBQUdydUMsRUFBRUMsRUFBRXNGLEdBQUUsRUFBR0MsSUFBSTdELEVBQVE0dEMsUUFBUSxVLDZCQ3RTN0wsU0FBUytCLElBRVAsR0FDNEMsb0JBQW5DWixnQ0FDNEMsbUJBQTVDQSwrQkFBK0JZLFNBY3hDLElBRUVaLCtCQUErQlksU0FBU0EsR0FDeEMsTUFBT2xxQyxHQUdQZy9CLFFBQVExZ0MsTUFBTTBCLElBT2hCa3FDLEdBQ0E1dkMsRUFBT0MsUUFBVSxFQUFqQixPLDBCQ3pCVyxJQUFJMUIsRUFBRSxtQkFBb0J3TixRQUFRQSxPQUFPQyxJQUFJbkksRUFBRXRGLEVBQUV3TixPQUFPQyxJQUFJLGlCQUFpQixNQUFNbEksRUFBRXZGLEVBQUV3TixPQUFPQyxJQUFJLGdCQUFnQixNQUFNdEksRUFBRW5GLEVBQUV3TixPQUFPQyxJQUFJLGtCQUFrQixNQUFNakksRUFBRXhGLEVBQUV3TixPQUFPQyxJQUFJLHFCQUFxQixNQUFNM0MsRUFBRTlLLEVBQUV3TixPQUFPQyxJQUFJLGtCQUFrQixNQUFNaUIsRUFBRTFPLEVBQUV3TixPQUFPQyxJQUFJLGtCQUFrQixNQUFNZ0IsRUFBRXpPLEVBQUV3TixPQUFPQyxJQUFJLGlCQUFpQixNQUFNd0wsRUFBRWpaLEVBQUV3TixPQUFPQyxJQUFJLG9CQUFvQixNQUFNOUQsRUFBRTNKLEVBQUV3TixPQUFPQyxJQUFJLHlCQUF5QixNQUFNNUcsRUFBRTdHLEVBQUV3TixPQUFPQyxJQUFJLHFCQUFxQixNQUFNa3JCLEVBQUUzNEIsRUFBRXdOLE9BQU9DLElBQUksa0JBQWtCLE1BQU0raUIsRUFBRXh3QixFQUNwZndOLE9BQU9DLElBQUksdUJBQXVCLE1BQU03RCxFQUFFNUosRUFBRXdOLE9BQU9DLElBQUksY0FBYyxNQUFNZ2pCLEVBQUV6d0IsRUFBRXdOLE9BQU9DLElBQUksY0FBYyxNQUFNaWpCLEVBQUUxd0IsRUFBRXdOLE9BQU9DLElBQUksZUFBZSxNQUFNNGlCLEVBQUVyd0IsRUFBRXdOLE9BQU9DLElBQUkscUJBQXFCLE1BQU0yaUIsRUFBRXB3QixFQUFFd04sT0FBT0MsSUFBSSxtQkFBbUIsTUFBTTVELEVBQUU3SixFQUFFd04sT0FBT0MsSUFBSSxlQUFlLE1BQ2xRLFNBQVM2aUIsRUFBRXZ3QixHQUFHLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxJQUFJd3dCLEVBQUV4d0IsRUFBRWdQLFNBQVMsT0FBT3doQixHQUFHLEtBQUtqckIsRUFBRSxPQUFPdkYsRUFBRUEsRUFBRW9ELE1BQVEsS0FBSzhWLEVBQUUsS0FBS3RQLEVBQUUsS0FBS3hFLEVBQUUsS0FBSzJGLEVBQUUsS0FBS3RGLEVBQUUsS0FBS216QixFQUFFLE9BQU81NEIsRUFBRSxRQUFRLE9BQU9BLEVBQUVBLEdBQUdBLEVBQUVnUCxVQUFZLEtBQUtOLEVBQUUsS0FBSzVILEVBQUUsS0FBSzRwQixFQUFFLEtBQUs3bUIsRUFBRSxLQUFLOEUsRUFBRSxPQUFPM08sRUFBRSxRQUFRLE9BQU93d0IsR0FBRyxLQUFLaHJCLEVBQUUsT0FBT2dyQixJQUFJLFNBQVNtSSxFQUFFMzRCLEdBQUcsT0FBT3V3QixFQUFFdndCLEtBQUs0SixFQUFFakksRUFBUTR2QyxVQUFVcjRCLEVBQUV2WCxFQUFRNnZDLGVBQWU1bkMsRUFBRWpJLEVBQVE4dkMsZ0JBQWdCL2lDLEVBQUUvTSxFQUFRK3ZDLGdCQUFnQi9pQyxFQUFFaE4sRUFBUWd3QyxRQUFRcHNDLEVBQUU1RCxFQUFRc0MsV0FBVzZDLEVBQUVuRixFQUFRaXdDLFNBQVN4c0MsRUFBRXpELEVBQVFrd0MsS0FBS25oQixFQUFFL3VCLEVBQVF3QyxLQUFLMEYsRUFBRWxJLEVBQVFtd0MsT0FBT3RzQyxFQUNoZjdELEVBQVFvd0MsU0FBU2huQyxFQUFFcEosRUFBUXF3QyxXQUFXdnNDLEVBQUU5RCxFQUFRc3dDLFNBQVNyWixFQUFFajNCLEVBQVF1d0MsWUFBWSxTQUFTbHlDLEdBQUcsT0FBTzI0QixFQUFFMzRCLElBQUl1d0IsRUFBRXZ3QixLQUFLa1osR0FBR3ZYLEVBQVF3d0MsaUJBQWlCeFosRUFBRWgzQixFQUFReXdDLGtCQUFrQixTQUFTcHlDLEdBQUcsT0FBT3V3QixFQUFFdndCLEtBQUswTyxHQUFHL00sRUFBUTB3QyxrQkFBa0IsU0FBU3J5QyxHQUFHLE9BQU91d0IsRUFBRXZ3QixLQUFLMk8sR0FBR2hOLEVBQVEyd0MsVUFBVSxTQUFTdHlDLEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsT0FBT0EsR0FBR0EsRUFBRWdQLFdBQVd6SixHQUFHNUQsRUFBUTR3QyxhQUFhLFNBQVN2eUMsR0FBRyxPQUFPdXdCLEVBQUV2d0IsS0FBSzhHLEdBQUduRixFQUFRNndDLFdBQVcsU0FBU3h5QyxHQUFHLE9BQU91d0IsRUFBRXZ3QixLQUFLb0YsR0FBR3pELEVBQVE4d0MsT0FBTyxTQUFTenlDLEdBQUcsT0FBT3V3QixFQUFFdndCLEtBQUswd0IsR0FDemQvdUIsRUFBUXFDLE9BQU8sU0FBU2hFLEdBQUcsT0FBT3V3QixFQUFFdndCLEtBQUs2SixHQUFHbEksRUFBUSt3QyxTQUFTLFNBQVMxeUMsR0FBRyxPQUFPdXdCLEVBQUV2d0IsS0FBS3dGLEdBQUc3RCxFQUFRZ3hDLFdBQVcsU0FBUzN5QyxHQUFHLE9BQU91d0IsRUFBRXZ3QixLQUFLK0ssR0FBR3BKLEVBQVFpeEMsYUFBYSxTQUFTNXlDLEdBQUcsT0FBT3V3QixFQUFFdndCLEtBQUt5RixHQUFHOUQsRUFBUWt4QyxXQUFXLFNBQVM3eUMsR0FBRyxPQUFPdXdCLEVBQUV2d0IsS0FBSzQ0QixHQUN6T2ozQixFQUFRbXhDLG1CQUFtQixTQUFTOXlDLEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsbUJBQW9CQSxHQUFHQSxJQUFJb0YsR0FBR3BGLElBQUk0SixHQUFHNUosSUFBSStLLEdBQUcvSyxJQUFJeUYsR0FBR3pGLElBQUk0NEIsR0FBRzU0QixJQUFJeXdCLEdBQUcsaUJBQWtCendCLEdBQUcsT0FBT0EsSUFBSUEsRUFBRWdQLFdBQVcwaEIsR0FBRzF3QixFQUFFZ1AsV0FBV25GLEdBQUc3SixFQUFFZ1AsV0FBV0wsR0FBRzNPLEVBQUVnUCxXQUFXTixHQUFHMU8sRUFBRWdQLFdBQVdsSSxHQUFHOUcsRUFBRWdQLFdBQVdzaEIsR0FBR3R3QixFQUFFZ1AsV0FBV3FoQixHQUFHcndCLEVBQUVnUCxXQUFXbEYsR0FBRzlKLEVBQUVnUCxXQUFXMmhCLElBQUlodkIsRUFBUW94QyxPQUFPeGlCLEcsNEJDWGpVN3VCLEVBQU9DLFFBQVUsRUFBakIsTyxlQ01GRCxFQUFPQyxRQUFVLEVBQWpCLE8sZUNBQUQsRUFBT0MsUUFBVSxFQUFqQixNLGVDQUFELEVBQU9DLFFBQVUsRUFBakIsTSxzQkNHQSxTQUFTcXhDLEVBQWlCanZDLEdBQ3hCLE9BQU9BLEVBQVVqQixhQUFlaUIsRUFBVVQsTUFBUSxZQU9wRDVCLEVBQU9DLFFBQVUsQ0FDZnF4QyxpQkFBa0JBLEVBQ2xCQyxpQkFORixTQUEwQmhhLEdBQ3hCLE1BQU8sU0FBVytaLEVBQWlCL1osR0FBYSxPLDRCQ0xsRCxJQUFJaWEsRUFBUSxFQUFRLE1BR2hCQyxFQURXLEVBQVEsTUFDV0MsV0FBV0QsbUJBRTdDenhDLEVBQU9DLFFBQVV3eEMsRUFBbUJELEksNEJDTHBDLElBQUlHLEVBQXlCLEVBQVEsTUFFakNDLEVBQWlCRCxFQUF1QixFQUFRLE9BRWhERSxFQUFpQ0YsRUFBdUIsRUFBUSxPQUVoRUcsRUFBMEJILEVBQXVCLEVBQVEsT0FFekRJLEVBQWtCSixFQUF1QixFQUFRLE9BRWpESyxFQUFtQkwsRUFBdUIsRUFBUSxPQUVsREgsRUFBUSxFQUFRLE1BRWhCUyxFQUFXLEVBQVEsTUFFbkJDLEVBQTJCLEVBQVEsTUFLbkNYLEdBSCtCLEVBQVEsTUFFNUIsRUFBUSxNQUNTQSxrQkFHNUJZLEVBRFksRUFBUSxNQUNXQSxtQkFFL0JDLEVBQVksRUFBUSxNQUNwQkMsRUFBNkJELEVBQVVDLDJCQUN2Q0MsRUFBdUJGLEVBQVVFLHFCQUNqQ0MsRUFBbUJILEVBQVVHLGlCQU9qQyxTQUFTQyxFQUE2QmpiLEVBQVdrYixHQUMvQyxJQUFJQyxFQUFRQyxFQUVSQyxFQUFnQnJCLEVBQWlCaGEsR0FDckMsT0FBT29iLEVBQVFELEVBQXNCLFNBQVVHLEdBRzdDLFNBQVNILEVBQU9yc0MsR0FDZCxJQUFJeXNDLEVBQXVCQyxFQUUzQkEsRUFBUUYsRUFBaUI5ekMsS0FBSzRCLEtBQU0wRixJQUFVMUYsTUFDOUMsRUFBSXF4QyxFQUEwQixVQUFHLEVBQUlGLEVBQWlDLFNBQUdpQixHQUFRLDZCQUE2QixXQUM1RyxJQUFJQyxFQUF5QkQsRUFBTXhhLE1BQU0wYSxTQUV6Q0YsRUFBTUcsVUFBUyxTQUFVQyxHQUN2QixPQUVFSCxJQUEyQkcsRUFBYUYsU0FBVyxDQUNqRGh3QixLQUFNa3dCLEVBQWFGLFNBQVNHLFVBQzVCQyxVQUFXQyxFQUFhSCxFQUFhRSxVQUFVRSxjQUM3QyxXQUlWLElBQUlDLEVBQWVyQixFQUFtQjlyQyxFQUFNb3RDLGdCQUN4Q0MsRUFBZ0YsUUFBekRaLEVBQXdCenNDLEVBQU1zdEMsNkJBQTZELElBQTFCYixHQUFtQ0EsRUFLM0hHLEVBQVdaLEVBQTJCbUIsRUFBY1osRUFBZUgsRUFBV3BzQyxFQUFPcXRDLEdBUXpGLE9BUEFYLEVBQU14YSxNQUFRLENBQ1p0VixLQUFNZ3dCLEVBQVNHLFVBQ2ZRLFVBQVd2dEMsRUFDWHd0QyxpQkFBa0JMLEVBQ2xCSCxVQUFXQyxFQUFhRSxFQUFhRCxhQUNyQ04sU0FBVUEsR0FFTEYsR0FqQ1QsRUFBSWhCLEVBQXlCLFNBQUdXLEVBQVFHLEdBMEN4Q0gsRUFBT254Qyx5QkFBMkIsU0FBa0N1eUMsRUFBV0MsR0FDN0UsSUFBSUMsRUFJQUosRUFBWUcsRUFBVUgsVUFDdEJKLEVBQWVyQixFQUFtQjJCLEVBQVVMLGdCQUM1Q0MsRUFBb0YsUUFBN0RNLEVBQXdCRixFQUFVSCw2QkFBNkQsSUFBMUJLLEdBQW1DQSxFQUMvSEMsRUFBVTNCLEVBQXFCRyxFQUFXbUIsR0FDMUNNLEVBQVU1QixFQUFxQkcsRUFBV3FCLEdBQzFDYixFQUFXYyxFQUFVZCxTQU16QixHQUFJYyxFQUFVRixpQkFBaUJOLGNBQWdCQyxFQUFhRCxjQUFnQnRCLEVBQVNnQyxFQUFTQyxHQU01RixNQUFPLENBQ0xqeEIsTUFGRmd3QixFQUFXWixFQUEyQm1CLEVBQWNaLEVBQWVILEVBQVdxQixFQUFXSixJQUV4RU4sVUFDZlMsaUJBQWtCTCxFQUNsQkksVUFBV0UsRUFDWFQsVUFBV0MsRUFBYUUsRUFBYUQsYUFDckNOLFNBQVVBLEdBR1pBLEVBQVNrQixTQUFTTCxHQUNsQixJQUFJN3dCLEVBQU9nd0IsRUFBU0csVUFFcEIsT0FBSW53QixJQUFTOHdCLEVBQVU5d0IsS0FDZCxDQUNMQSxLQUFNQSxFQUNOMndCLFVBQVdFLEVBQ1hELGlCQUFrQkwsRUFDbEJILFVBQVdDLEVBQWFFLEVBQWFELGNBS3BDLE1BR1QsSUFBSWEsRUFBUzFCLEVBQU85ekMsVUF1RnBCLE9BckZBdzFDLEVBQU9wYixrQkFBb0IsV0FDekJyNEIsS0FBSzB6QywwQkFFTDF6QyxLQUFLMnpDLDhCQUdQRixFQUFPdFMsbUJBQXFCLFNBQTRCOFIsRUFBV0csR0FDN0RwekMsS0FBSzQzQixNQUFNMGEsV0FBYWMsRUFBVWQsV0FDcENjLEVBQVVkLFNBQVNzQixVQUVuQjV6QyxLQUFLMHpDLDJCQUdQMXpDLEtBQUsyekMsOEJBR1BGLEVBQU9sTyxxQkFBdUIsV0FDNUJ2bEMsS0FBSzQzQixNQUFNMGEsU0FBU3NCLFdBR3RCSCxFQUFPaGMsc0JBQXdCLFNBQStCMGIsRUFBV1UsR0FFdkUsR0FBSUEsRUFBVXZ4QixPQUFTdGlCLEtBQUs0M0IsTUFBTXRWLEtBQ2hDLE9BQU8sRUFPVCxJQUZBLElBQUlwakIsRUFBT2xCLE9BQU9rQixLQUFLaTBDLEdBRWQzUyxFQUFLLEVBQUdBLEVBQUt0aEMsRUFBS04sT0FBUTRoQyxJQUFNLENBQ3ZDLElBQUlzVCxFQUFPNTBDLEVBQUtzaEMsR0FFaEIsR0FBYSxtQkFBVHNULEdBQ0YsR0FBSUQsRUFBVVgsaUJBQWlCTixjQUFnQjV5QyxLQUFLNDNCLE1BQU1zYixpQkFBaUJOLFlBQ3pFLE9BQU8sT0FHVCxJQUFLZCxFQUFVOXlDLGVBQWU4MEMsS0FBVWxDLEVBQWlCdUIsRUFBVVcsR0FBTzl6QyxLQUFLMEYsTUFBTW91QyxJQUNuRixPQUFPLEVBS2IsT0FBTyxHQU9UTCxFQUFPRSwyQkFBNkIsV0FDbEMsSUFBSUksRUFBYy96QyxLQUFLNDNCLE1BQ25CdFYsRUFBT3l4QixFQUFZenhCLEtBSW5CMHhCLEVBSFdELEVBQVl6QixTQUdDRyxVQUV4Qm53QixJQUFTMHhCLEdBQ1hoMEMsS0FBS3V5QyxTQUFTLENBQ1pqd0IsS0FBTTB4QixLQUtaUCxFQUFPQyx3QkFBMEIsV0FDaEIxekMsS0FBSzQzQixNQUFNMGEsU0FHakIyQixZQUFZajBDLEtBQUtrMEMsNEJBRzVCVCxFQUFPNXhDLE9BQVMsV0FDZCxJQUFJc3lDLEVBQWNuMEMsS0FBSzBGLE1BQ25CMHVDLEVBQWVELEVBQVlDLGFBRzNCMXVDLEdBRmlCeXVDLEVBQVlyQixlQUNMcUIsRUFBWW5CLHVCQUM1QixFQUFJOUIsRUFBd0MsU0FBR2lELEVBQWEsQ0FBQyxlQUFnQixpQkFBa0IsMkJBQzNHLE9BQU90RCxFQUFNem9DLGNBQWN3dUIsR0FBVyxFQUFJcWEsRUFBd0IsVUFBRyxFQUFJQSxFQUF3QixVQUFHLEVBQUlBLEVBQXdCLFNBQUcsR0FBSXZyQyxHQUFRMUYsS0FBSzQzQixNQUFNdFYsTUFBTyxHQUFJLENBQ25La1csSUFBSzRiLEVBQ0xDLE1BQU9yMEMsS0FBSzQzQixNQUFNOGEsY0FJZlgsRUFoTDRCLENBaUxuQ2xCLEVBQU1qYSxZQUFZLEVBQUl5YSxFQUEwQixTQUFHVSxFQUFRLGNBQWVFLEdBQWdCRCxFQUc5RixTQUFTVyxFQUFhQyxHQUNwQixNQUFPLENBQ0xBLFlBQWFBLEdBaUJqQnZ6QyxFQUFPQyxRQUFVLENBQ2ZnMUMsZ0JBTkYsU0FBeUIxZCxFQUFXMmQsR0FFbEMsT0FBT2hELEVBQXlCM2EsRUFBVzJkLEVBQWMxQyxNLDRCQzVPM0QsSUFBSWhCLEVBQVEsRUFBUSxNQUVoQjJELEVBQW9CLEVBQVEsTUFFNUJDLEVBQWlDLEVBQVEsTUFFekNqVixFQUFrQnFSLEVBQU1yUixnQkFDeEI3QixFQUFXa1QsRUFBTWxULFNBQ2pCZ0MsRUFBU2tSLEVBQU1sUixPQUNmRixFQUFVb1IsRUFBTXBSLFFBRWhCaVYsRUFBVyxFQUFRLE1BQ25CQyxFQUE0QkQsRUFBU0MsMEJBRXJDQyxHQURhRixFQUFTRyxXQUNUSCxFQUFTRSxZQUV0QnRELEVBQVcsRUFBUSxNQUVuQndELEVBQXVCLENBQ3pCL0IscUJBQXFCLEdBb0Z2QjF6QyxFQUFPQyxRQW5FUCxTQUFzQ29HLEdBQ3BDLElBZnNCbUksRUFDbEJrbkMsRUFjQW5DLEVBQWNsdEMsRUFBTWt0QyxZQUNwQm9DLEVBQVF0dkMsRUFBTXN2QyxNQUNkQyxFQUFZdnZDLEVBQU11dkMsVUFDbEJwekMsRUFBUzZELEVBQU03RCxPQUNmcXpDLEdBbkJrQnJuQyxFQW1CZW9uQyxFQWxCakNGLEVBQWNsRSxFQUFNbFIsT0FBTzl4QixHQUUxQnlqQyxFQUFTeUQsRUFBWTk4QixRQUFTcEssS0FLakNrbkMsRUFBWTk4QixRQUFVcEssR0FHakJrbkMsRUFBWTk4QixTQVNmazlCLEVBQVkxVixHQUFRLFdBQ3RCLElBQUkyVixFQUFVUixFQUFXSSxHQUN6QixPQUFPTCxFQUEwQlMsRUFBU0YsS0FDekMsQ0FBQ0YsRUFBT0UsSUFDUHJDLEVBQWVwVCxHQUFRLFdBQ3pCLE1BQU8sQ0FDTG1ULFlBQWFBLEtBRWQsQ0FBQ0EsSUFHQXlDLEVBQVUxVixFQUFPLE1BR2pCMlYsRUFEWTNYLEVBQVMsTUFDRyxHQUV4QjRYLEVBQWU1VixFQUFPLE1BQ3RCNlYsRUFBVy9WLEdBQVEsV0FDckJtVCxFQUFZNkMsTUFBTU4sR0FDbEIsSUFBSU8sRUFBTTlDLEVBQVkrQyxPQUFPUixFQUFVUyxVQUN2Q1AsRUFBUXA5QixRQUFVeTlCLEVBQUlwekIsS0FHdEIsSUFBSXV6QixFQUFtQmpELEVBQVlrRCxPQUFPWCxHQUN0Q1ksRUFBc0JuRCxFQUFZL1UsVUFBVTZYLEdBQUssU0FBVU0sR0FDN0RYLEVBQVFwOUIsUUFBVSs5QixFQUFZMXpCLEtBQzlCZ3pCLEVBQVlELEVBQVFwOUIsWUFFbEJnK0IsR0FBVyxFQWdCZixPQUxJVixFQUFhdDlCLFNBQ2ZzOUIsRUFBYXQ5QixVQUdmczlCLEVBQWF0OUIsUUFiYixXQUNPZytCLElBQ0hBLEdBQVcsRUFDWFYsRUFBYXQ5QixRQUFVLEtBQ3ZCNDlCLEVBQWlCakMsVUFDakJtQyxFQUFvQm5DLFlBU2pCOEIsSUFDTixDQUFDOUMsRUFBYXVDLElBT2pCLE9BTkEzVixHQUFnQixXQUNkLElBQUkwVyxFQUFZWCxFQUFhdDlCLFFBQzdCLE9BQU8sV0FDTGkrQixHQUFhQSxPQUVkLENBQUNWLElBQ2dCM0UsRUFBTXpvQyxjQUFjb3NDLEVBQWtCMkIsU0FBVSxDQUNsRXRvQyxNQUFPZ2xDLEdBQ09oQyxFQUFNem9DLGNBQWNxc0MsRUFBK0IwQixTQUFVLENBQzNFdG9DLE1BQU9pbkMsR0FDTmp6QyxFQUFPLENBQ1I2RCxNQUFPMnZDLEVBQVFwOUIsYyw0QkNuR25CLElBQUkrNEIsRUFBeUIsRUFBUSxNQUVqQ29GLEVBQVlwRixFQUF1QixFQUFRLE9BRTNDRSxFQUFpQ0YsRUFBdUIsRUFBUSxPQUVoRUcsRUFBMEJILEVBQXVCLEVBQVEsT0FFekRJLEVBQWtCSixFQUF1QixFQUFRLE9BRWpESyxFQUFtQkwsRUFBdUIsRUFBUSxPQUVsRHFGLEVBQWlCckYsRUFBdUIsRUFBUSxPQUVoREgsRUFBUSxFQUFRLE1BRWhCMkQsRUFBb0IsRUFBUSxNQUU1QjhCLEVBQXlCLEVBQVEsTUFFakNoRixFQUFXLEVBQVEsTUFFbkJDLEVBQTJCLEVBQVEsTUFFbkNnRixFQUErQixFQUFRLE1BRXZDQyxFQUFZLEVBQVEsTUFJcEI5QixHQUZVLEVBQVEsTUFFUCxFQUFRLE9BQ25CL0QsRUFBbUIrRCxFQUFTL0QsaUJBQzVCQyxFQUFtQjhELEVBQVM5RCxpQkFHNUJZLEVBRFksRUFBUSxNQUNXQSxtQkFFL0JDLEVBQVksRUFBUSxNQUNwQmdGLEVBQXNCaEYsRUFBVWdGLG9CQUNoQ0MsRUFBYWpGLEVBQVVpRixXQUN2QmhGLEVBQTZCRCxFQUFVQywyQkFDdkNpRCxFQUE0QmxELEVBQVVrRCwwQkFDdENoRCxFQUF1QkYsRUFBVUUscUJBQ2pDaUQsRUFBYW5ELEVBQVVtRCxXQUV2QitCLEdBRGNsRixFQUFVbUYsWUFDQ25GLEVBQVVrRix3QkFDbkMvRSxFQUFtQkgsRUFBVUcsaUJBRTdCaUYsRUFBVSxVQTJMZCxTQUFTQyxFQUFXQyxHQUNsQixNQUFxQyxtQkFBdkJBLEVBQW9DLENBQ2hEMXpDLE1BQU8wekMsRUFDUEMsU0FBVUQsRUFDVkUsWUFBYSxTQUFxQkMsR0FDRixtQkFBdkJILEdBQXFDQSxNQUU1Q0EsR0FBc0IsR0F5YTVCMTNDLEVBQU9DLFFBQVUsQ0FDZmcxQyxnQkFSRixTQUF5QjFkLEVBQVcyZCxFQUFjNEMsR0FFaEQsT0FBTzVGLEVBQXlCM2EsRUFBVzJkLEdBQWMsU0FBVTZDLEVBQWdCdEYsR0FDakYsT0FsYUosU0FBc0NsYixFQUFXa2IsRUFBV3FGLEdBR3RDeEcsRUFBaUIvWixHQUZyQyxJQUFJbWIsRUFBUUMsRUFHUkMsRUFBZ0JyQixFQUFpQmhhLEdBQ2pDeWdCLEVBMUNOLFNBQWdDdkYsR0FDOUIsSUFBSXdGLEVBQTBCLEtBQzFCQyxHQUFnQixFQUVwQixJQUFLLElBQUlDLEtBQWdCMUYsRUFBVyxDQUNsQyxJQUFJOEQsRUFBVzlELEVBQVUwRixHQUNyQkMsRUFBcUI3QixFQUFTeUIsVUFBWXpCLEVBQVN5QixTQUFTSyxnQkFJdENwMEMsSUFBdEJzeUMsRUFBU3lCLFdBQ1hFLEdBQWdCLEdBR2RFLElBQzhCLElBQTlCQSxFQUFtQjc0QyxRQUFnTjQzQyxHQUFVLEdBQzdPYyxHQUFrTGQsR0FBVSxHQUM5TGMsR0FBMEIsRUFBSWpCLEVBQXdCLFVBQUcsRUFBSUEsRUFBd0IsU0FBRyxHQUFJb0IsRUFBbUIsSUFBSyxHQUFJLENBQ3RIRCxhQUFjQSxLQU1wQixPQURHRCxHQUE2QyxPQUE1QkQsR0FBMEtkLEdBQVUsR0FDak1jLEdBQTJCLEdBa0JuQkssQ0FBdUI3RixHQUNsQzhGLEVBQXlCVCxFQUFpQlMsd0JBdEVoRCxTQUFzQ1AsR0FDcEMsSUFBSVEsRUFBT1IsRUFBU1EsS0FFcEIsT0FEQ0EsR0FBaUtyQixHQUFVLEdBQ3JLLFNBQVU5d0MsR0FHZixJQUZBLElBQUk0YyxFQUFPNWMsRUFBTTJ4QyxFQUFTRyxjQUVqQnI0QyxFQUFJLEVBQUdBLEVBQUkwNEMsRUFBS2o1QyxPQUFRTyxJQUFLLENBQ3BDLElBQUttakIsR0FBd0IsaUJBQVRBLEVBQ2xCLE9BQU8sS0FHVEEsRUFBT0EsRUFBS3UxQixFQUFLMTRDLElBR25CLE9BQU9takIsR0F3RCtEdzFCLENBQTZCVCxHQUNqR1UsRUFBWVosRUFBaUJZLFdBQWFWLEVBQVNVLFVBQ3REQSxHQUE4TXZCLEdBQVUsR0FDek4sSUFBSXdCLEVBQXVCYixFQUFpQmEsc0JBdkQ5QyxTQUFvQ1gsR0FDbEMsSUFBSVksRUFBZ0JaLEVBQVNhLE1BRzdCLE9BRkNELEdBQXdLekIsR0FBVSxHQUU1SyxTQUFVMkIsRUFBVUMsR0FDekIsT0FBTyxFQUFJL0IsRUFBd0IsVUFBRyxFQUFJQSxFQUF3QixTQUFHLEdBQUk4QixHQUFXLElBQUksRUFBSTlHLEVBQTBCLFNBQUcsR0FBSTRHLEVBQWVHLEtBa0QxRUMsQ0FBMkJoQixHQUMvRixPQUFPckYsRUFBUUQsRUFBc0IsU0FBVUcsR0FHN0MsU0FBU0gsRUFBT3JzQyxHQUNkLElBQUl5c0MsRUFBdUJDLEVBRTNCQSxFQUFRRixFQUFpQjl6QyxLQUFLNEIsS0FBTTBGLElBQVUxRixNQUM5QyxFQUFJcXhDLEVBQTBCLFVBQUcsRUFBSUYsRUFBaUMsU0FBR2lCLEdBQVEsNkJBQTZCLFdBQzVHQSxFQUFNRyxTQUFTLENBQ2Jqd0IsS0FBTTh2QixFQUFNa0csVUFBVTdGLGdCQUcxQixFQUFJcEIsRUFBMEIsVUFBRyxFQUFJRixFQUFpQyxTQUFHaUIsR0FBUSxZQUFZLFdBQzNGLElBQUltRyxFQUFpQm5HLEVBQU1vRyxxQkFFM0IsU0FBVUQsR0FBa0JBLEVBQWVFLFNBQVdGLEVBQWVHLFlBRXZFLEVBQUlySCxFQUEwQixVQUFHLEVBQUlGLEVBQWlDLFNBQUdpQixHQUFRLGNBQWMsV0FDN0YsUUFBU0EsRUFBTXVHLHlCQUVqQixFQUFJdEgsRUFBMEIsVUFBRyxFQUFJRixFQUFpQyxTQUFHaUIsR0FBUSxzQkFBc0IsU0FBVWdHLEVBQVlyQixFQUFvQjZCLEdBQy9JLElBQUt4RyxFQUFNeUcsY0FBYyxxQkFDdkIsTUFBTyxDQUNMakYsUUFBUyxjQUlieEIsRUFBTTBHLGtCQUFvQkYsRUFDMUIsSUFBSUcsRUFBc0IsQ0FDeEJiLE1BQU9FLEVBQ1BNLE9BQVEsS0FDUk4sV0FBWUEsR0FPZCxNQUFPLENBQ0x4RSxRQUxVeEIsRUFBTTRHLFdBQVdELEVBQXFCakMsRUFBV0MsR0FBcUIsQ0FDaEZrQyxPQUFPLElBSVFoQyxpQkFHbkIsRUFBSTVGLEVBQTBCLFVBQUcsRUFBSUYsRUFBaUMsU0FBR2lCLEdBQVEsYUFBYSxTQUFVOEcsRUFBVW5DLEVBQW9CNW5DLEdBQ3BJLElBQUtpakMsRUFBTXlHLGNBQWMsWUFDdkIsTUFBTyxDQUNMakYsUUFBUyxjQUliLElBQUl1RixFQUFXckMsRUFBV0MsR0FFdEJ3QixFQUFpQm5HLEVBQU1vRyxxQkFFM0IsSUFBS0QsRUFJSCxPQUhBN0IsRUFBV3RZLFFBQU8sU0FBVWdiLEdBQzFCLE9BQU9BLEVBQUtwQyxjQUNYblosVUFBVXNiLEdBQ04sS0FHVCxJQUFJZixFQUFhRyxFQUFlYyxVQUFZSCxFQUU1QyxHQUFJL3BDLEdBQVdBLEVBQVE4cEMsTUFDckIsT0FBTzdHLEVBQU1rSCxtQkFBbUJsQixFQUFZckIsR0FHOUMsSUFBSXdDLEVBQXdCOUMsRUFBb0JycEMsTUFNNUMyckMsR0FMYVEsRUFBc0JDLFdBQ3BCRCxFQUFzQkUsYUFJZixDQUN4QnZCLE1BQU9nQixFQUNQUixPQUpXSCxFQUFlRyxPQUsxQk4sV0FBWUEsSUFLZCxNQUFPLENBQ0x4RSxRQUhVeEIsRUFBTTRHLFdBQVdELEVBQXFCSSxFQUFVaHFDLEdBRzNDOG5DLGdCQUduQixJQUFJcEUsRUFBZXJCLEVBQW1COXJDLEVBQU1vdEMsZ0JBQ3hDQyxFQUFnRixRQUF6RFosRUFBd0J6c0MsRUFBTXN0Qyw2QkFBNkQsSUFBMUJiLEdBQW1DQSxFQWEvSCxPQVpBQyxFQUFNc0gscUJBQXNCLEVBQzVCdEgsRUFBTXVHLHFCQUF1QixLQUM3QnZHLEVBQU0wRyxrQkFBb0IsS0FDMUIxRyxFQUFNa0csVUFBWTVHLEVBQTJCbUIsRUFBY1osRUFBZUgsRUFBV3BzQyxFQUFPcXRDLEVBQXFCWCxFQUFNOEIsMkJBQ3ZIOUIsRUFBTXhhLE1BQVEsQ0FDWnRWLEtBQU04dkIsRUFBTWtHLFVBQVU3RixVQUN0QmtILFlBQWE5RyxFQUNiK0csbUJBQW9CL0csRUFDcEJILFVBQVdOLEVBQU15SCxnQkFBZ0JoSCxJQUVuQ1QsRUFBTTBILGNBQWUsRUFDckIxSCxFQUFNMkgsYUFBYyxFQUNiM0gsR0FqR1QsRUFBSWhCLEVBQXlCLFNBQUdXLEVBQVFHLEdBb0d4QyxJQUFJdUIsRUFBUzFCLEVBQU85ekMsVUFvU3BCLE9BbFNBdzFDLEVBQU9wYixrQkFBb0IsV0FDekJyNEIsS0FBSzg1QyxjQUFlLEdBU3RCckcsRUFBT3piLGlDQUFtQyxTQUEwQ21iLEdBQ2xGLElBQUlFLEVBRUFSLEVBQWVyQixFQUFtQjJCLEVBQVVMLGdCQUM1Q0MsRUFBb0YsUUFBN0RNLEVBQXdCRixFQUFVSCw2QkFBNkQsSUFBMUJLLEdBQW1DQSxFQUMvSEMsRUFBVTNCLEVBQXFCRyxFQUFXOXhDLEtBQUswRixPQUMvQzZ0QyxFQUFVNUIsRUFBcUJHLEVBQVdxQixHQUMxQzZHLEVBQW9CekQsRUFBNkJ6RSxFQUFXOXhDLEtBQUswRixPQUNqRXUwQyxFQUFvQjFELEVBQTZCekUsRUFBV3FCLEdBTTVETixFQUFhRCxjQUFnQjV5QyxLQUFLNDNCLE1BQU0raEIsWUFBWS9HLGFBQWdCdEIsRUFBUzBJLEVBQW1CQyxJQUF1QjNJLEVBQVNnQyxFQUFTQyxHQVVqSXZ6QyxLQUFLKzVDLGFBQ2YvNUMsS0FBS3M0QyxVQUFVOUUsU0FBU0wsSUFWeEJuekMsS0FBS2s2QyxXQUdMbDZDLEtBQUtzNEMsVUFBWTVHLEVBQTJCbUIsRUFBY1osRUFBZUgsRUFBV3FCLEVBQVdKLEVBQXFCL3lDLEtBQUtrMEMsMkJBQ3pIbDBDLEtBQUt1eUMsU0FBUyxDQUNab0gsWUFBYTlHLEVBQ2IrRyxtQkFBb0IvRyxFQUNwQkgsVUFBVzF5QyxLQUFLNjVDLGdCQUFnQmhILE1BTXBDLElBQUl2d0IsRUFBT3RpQixLQUFLczRDLFVBQVU3RixVQUV0Qm53QixJQUFTdGlCLEtBQUs0M0IsTUFBTXRWLE1BQ3RCdGlCLEtBQUt1eUMsU0FBUyxDQUNaandCLEtBQU1BLEtBS1pteEIsRUFBT2xPLHFCQUF1QixXQUM1QnZsQyxLQUFLODVDLGNBQWUsRUFFcEI5NUMsS0FBS2s2QyxZQUdQekcsRUFBT2hjLHNCQUF3QixTQUErQjBiLEVBQVdVLEdBRXZFLEdBQUlBLEVBQVV2eEIsT0FBU3RpQixLQUFLNDNCLE1BQU10VixNQUFRdXhCLEVBQVVuQixZQUFjMXlDLEtBQUs0M0IsTUFBTThhLFVBQzNFLE9BQU8sRUFPVCxJQUZBLElBQUl4ekMsRUFBT2xCLE9BQU9rQixLQUFLaTBDLEdBRWQzUyxFQUFLLEVBQUdBLEVBQUt0aEMsRUFBS04sT0FBUTRoQyxJQUFNLENBQ3ZDLElBQUlzVCxFQUFPNTBDLEVBQUtzaEMsR0FFaEIsR0FBYSxtQkFBVHNULEdBQ0YsR0FBSUQsRUFBVThGLFlBQVkvRyxjQUFnQjV5QyxLQUFLNDNCLE1BQU0raEIsWUFBWS9HLFlBQy9ELE9BQU8sT0FHVCxJQUFLZCxFQUFVOXlDLGVBQWU4MEMsS0FBVWxDLEVBQWlCdUIsRUFBVVcsR0FBTzl6QyxLQUFLMEYsTUFBTW91QyxJQUNuRixPQUFPLEVBS2IsT0FBTyxHQUdUTCxFQUFPb0csZ0JBQWtCLFNBQXlCaEgsR0FDaEQsTUFBTyxDQUNMNEYsUUFBU3o0QyxLQUFLbTZDLFNBQ2RDLFVBQVdwNkMsS0FBS3E2QyxXQUNoQkMsU0FBVXQ2QyxLQUFLdTZDLFVBQ2ZDLGtCQUFtQng2QyxLQUFLczVDLG1CQUN4QjFHLFlBQWFDLEVBQWFELGNBUTlCYSxFQUFPK0UsbUJBQXFCLFdBRTFCLElBQUlyRSxFQUFjbjBDLEtBQUswRixNQUVuQiswQyxHQURJdEcsRUFBWUMsY0FDSixFQUFJbEQsRUFBd0MsU0FBR2lELEVBQWEsQ0FBQyxrQkFDekV6dUMsR0FBUSxFQUFJMndDLEVBQXdCLFVBQUcsRUFBSUEsRUFBd0IsU0FBRyxHQUFJb0UsR0FBWXo2QyxLQUFLNDNCLE1BQU10VixNQUNqR2kyQixFQUFpQlgsRUFBdUJseUMsR0FFNUMsR0FBc0IsTUFBbEI2eUMsRUFDRixPQUFPLEtBR1QsSUFBSW1DLEVBQXlCakUsRUFBb0JycEMsTUFDN0N1dEMsRUFBUUQsRUFBdUJDLE1BQy9CQyxFQUFZRixFQUF1QkUsVUFDbkNDLEVBQWdCSCxFQUF1QkcsY0FDdkNDLEVBQWdCSixFQUF1QkksY0FDdkN0QixFQUFha0IsRUFBdUJsQixXQUNwQ0MsRUFBZWlCLEVBQXVCakIsYUFFZCxpQkFBbkJsQixHQUFxUy9CLEdBQVUsR0FDeFQsSUFBSXVFLEVBQVF4QyxFQUFlb0MsR0FDdkJLLEVBQVd6QyxFQUFlcUMsR0FFOUIsR0FBYSxNQUFURyxHQUE2QixNQUFaQyxFQUNuQixPQUFPLEtBR1JwM0MsTUFBTUMsUUFBUWszQyxJQUFpT3ZFLEdBQVUsR0FDcE8saUJBQWJ3RSxHQUF5UHhFLEdBQVUsR0FDNVEsSUFBSWlDLEVBQVVWLElBQWNsQixFQUFVbUUsRUFBU0gsR0FBaUJHLEVBQVNGLEdBQ3JFcEMsRUFBU1gsSUFBY2xCLEVBQVVtRSxFQUFTeEIsR0FBY3dCLEVBQVN2QixHQUVyRSxNQUF1QixrQkFBWmhCLEdBQTBDLElBQWpCc0MsRUFBTW44QyxhQUFrQyxJQUFYODVDLEVBRXhELEtBR0YsQ0FDTEEsT0FBUUEsRUFDUlcsVUFBVzBCLEVBQU1uOEMsT0FDakI2NUMsUUFBU0EsSUFJYmhGLEVBQU93SCxpQkFBbUIsV0FLeEIsT0FKS2o3QyxLQUFLazdDLGdCQUNSbDdDLEtBQUtrN0MsY0FBZ0IsSUFBSTVFLEdBR3BCdDJDLEtBQUtrN0MsZUFHZHpILEVBQU9vRixjQUFnQixTQUF1QnNDLEdBQzVDLE9BQUluN0MsS0FBSzg1QyxjQVFYckcsRUFBT3VGLFdBQWEsU0FBb0JELEVBQXFCSSxFQUFVaHFDLEdBQ3JFLElBV0lpc0MsRUFYQUMsRUFBU3I3QyxLQUdUNHlDLEVBRHNCcEIsRUFBbUJ4eEMsS0FBSzBGLE1BQU1vdEMsZ0JBQ2xCRixZQUVsQzBJLEVBQWV0N0MsS0FBSzBGLE1BSXBCKzBDLEdBSElhLEVBQWFsSCxhQUNBa0gsRUFBYXhJLGVBQ053SSxFQUFhdEksdUJBQ3pCLEVBQUk5QixFQUF3QyxTQUFHb0ssRUFBYyxDQUFDLGVBQWdCLGlCQUFrQiwyQkFDNUc1MUMsR0FBUSxFQUFJMndDLEVBQXdCLFVBQUcsRUFBSUEsRUFBd0IsU0FBRyxHQUFJb0UsR0FBWXo2QyxLQUFLNDNCLE1BQU10VixNQUVqR2k1QixFQUFnQmhGLEVBQTZCekUsRUFBVzJJLEdBRTVEVyxFQUFvQnpFLEVBQXVCN0UsRUFBVzJJLEdBRXREVyxHQUFvQixFQUFJL0UsRUFBd0IsVUFBRyxFQUFJQSxFQUF3QixVQUFHLEVBQUlBLEVBQXdCLFNBQUcsR0FBSWtGLEdBQWdCSCxHQUFvQnA3QyxLQUFLODRDLG1CQUM5SixJQUFJMEMsRUFBaUJyRSxFQUFpQnNFLGFBQWEvMUMsRUFBTyxDQUN4RHd5QyxNQUFPYSxFQUFvQmIsTUFDM0JRLE9BQVFLLEVBQW9CTCxRQUMzQjBDLElBQ3lCLGlCQUFuQkksR0FBa0QsT0FBbkJBLElBQTZOaEYsR0FBVSxHQUUvUWdGLEdBQWlCLEVBQUluRixFQUF3QixVQUFHLEVBQUlBLEVBQXdCLFNBQUcsR0FBSW1GLEdBQWlCeDdDLEtBQUs4NEMsbUJBQ3pHc0MsR0FBb0IsRUFBSS9FLEVBQXdCLFVBQUcsRUFBSUEsRUFBd0IsU0FBRyxHQUFJbUYsR0FBaUJKLEdBQ3ZHLElBQUlNLEVBQWN2c0MsRUFBVSxDQUMxQjhwQyxRQUFTOXBDLEVBQVE4cEMsWUFDZjMxQyxFQUVlLE1BQWZvNEMsR0FBK0YsT0FBdkV2c0MsYUFBeUMsRUFBU0EsRUFBUWtvQyxZQUNwRnFFLEVBQVlyRSxTQUFXbG9DLGFBQXlDLEVBQVNBLEVBQVFrb0MsVUFHbkYsSUFBSWpDLEVBQVVSLEVBQVd1QyxFQUFpQm5DLE9BQ3RDRyxFQUFZUixFQUEwQlMsRUFBU29HLEVBQWdCRSxHQUMvREMsRUFBc0IsS0FFdEIzN0MsS0FBSzI0QyxzQkFDUDM0QyxLQUFLMjRDLHFCQUFxQjFCLGNBRzVCajNDLEtBQUsrNUMsYUFBYyxFQUVuQixJQTRCSTZCLEVBQVUsV0FDUlAsRUFBTzFDLHVCQUF5QmdELElBQ2xDTixFQUFPMUMscUJBQXVCLEtBQzlCMEMsRUFBTzNCLHFCQUFzQixJQXdCakMsT0FwQkExNUMsS0FBSzA1QyxxQkFBc0IsRUFDM0JpQyxFQUFzQjM3QyxLQUFLaTdDLG1CQUFtQlksUUFBUSxDQUNwRGpKLFlBQWFBLEVBQ2J1QyxVQUFXQSxFQUNYMkcsNEJBQTRCLElBQzNCQyxVQUFTLFNBQVU5bEIsR0FDcEIsT0FBT3lnQixFQUFXdFksUUFBTyxTQUFVZ2IsSUF6Q3hCLFNBQWdCbmpCLEVBQVMrZ0IsR0FDcEMsSUFBSWdGLEVBQVdYLEVBQU8vQyxVQUFVN0YsVUFFaEM0SSxFQUFPL0MsVUFBVTJELGFBQWFqRSxFQUFxQm9ELEVBQW1CckMsRUFBb0JYLFlBQWFqRCxFQUFVQyxRQUFRbDRDLE1BRXpILElBQUlnL0MsRUFBV2IsRUFBTy9DLFVBQVU3RixVQVczQm5CLEVBQVMwSyxFQUFVRSxHQVF0QmxGLElBUEFxRSxFQUFPOUksU0FBUyxDQUNkandCLEtBQU00NUIsRUFDTnRDLG1CQUFvQixDQUNsQmhILFlBQWF5SSxFQUFPMzFDLE1BQU1vdEMsZUFBZUYsY0FFMUNvRSxHQW9CSG1GLENBQU9sbUIsR0FBUyxXQUNkbWpCLEVBQUtsa0IsT0FFTGtrQixFQUFLcEMsb0JBSU4sR0FBRSxDQUNMM3pDLE1BQU91NEMsRUFDUDVFLFNBQVU0RSxFQUNWM0UsWUFBYTJFLElBQ1ovZCxVQUFVc2IsR0FBWSxJQUN6Qm41QyxLQUFLMjRDLHFCQUF1QjM0QyxLQUFLMDVDLG9CQUFzQmlDLEVBQXNCLEtBQ3RFQSxHQUdUbEksRUFBT3lHLFNBQVcsV0FDaEJsNkMsS0FBS3M0QyxVQUFVMUUsVUFFZjV6QyxLQUFLODRDLGtCQUFvQixLQUN6Qjk0QyxLQUFLKzVDLGFBQWMsRUFFZi81QyxLQUFLMjRDLHVCQUNQMzRDLEtBQUsyNEMscUJBQXFCMUIsY0FFMUJqM0MsS0FBSzI0QyxxQkFBdUIsS0FDNUIzNEMsS0FBSzA1QyxxQkFBc0IsR0FHekIxNUMsS0FBS2s3QyxlQUNQbDdDLEtBQUtrN0MsY0FBY3RILFdBSXZCSCxFQUFPNXhDLE9BQVMsV0FDZCxJQUFJdTZDLEVBQWVwOEMsS0FBSzBGLE1BQ3BCMHVDLEVBQWVnSSxFQUFhaEksYUFHNUIxdUMsR0FGaUIwMkMsRUFBYXRKLGVBQ05zSixFQUFhcEosdUJBQzdCLEVBQUk5QixFQUF3QyxTQUFHa0wsRUFBYyxDQUFDLGVBQWdCLGlCQUFrQiwyQkFDNUcsT0FBb0J2TCxFQUFNem9DLGNBQWNvc0MsRUFBa0IyQixTQUFVLENBQ2xFdG9DLE1BQU83TixLQUFLNDNCLE1BQU1naUIsb0JBQ0ovSSxFQUFNem9DLGNBQWN3dUIsR0FBVyxFQUFJd2YsRUFBbUIsU0FBRyxHQUFJMXdDLEVBQU8xRixLQUFLNDNCLE1BQU10VixLQUFNLENBQ25Ha1csSUFBSzRiLEVBQ0xDLE1BQU9yMEMsS0FBSzQzQixNQUFNOGEsZUFJZlgsRUF6WTRCLENBMFluQ2xCLEVBQU1qYSxZQUFZLEVBQUl5YSxFQUEwQixTQUFHVSxFQUFRLGNBQWVFLEdBQWdCRCxFQWNuRkgsQ0FBNkJ1RixFQUFnQnRGLEVBQVdxRixTLDRCQ3ZwQm5FLElBRUk5RixFQUZ5QixFQUFRLEtBRWRMLENBQXVCLEVBQVEsT0FFbER3RixFQUFZLEVBQVEsTUFFcEI5QixFQUFXLEVBQVEsTUFDbkJDLEVBQTRCRCxFQUFTQywwQkFDckMwSCxFQUEyQjNILEVBQVMySCx5QkFDcENDLEVBQWE1SCxFQUFTM0QsV0FBV3VMLFdBRWpDaEcsRUFBc0MsV0FDeEMsU0FBU0EsRUFBdUI5eUMsSUFDOUIsRUFBSTZ0QyxFQUEwQixTQUFHcnhDLEtBQU0sdUJBQXdCLEtBQy9ELEVBQUlxeEMsRUFBMEIsU0FBR3J4QyxLQUFNLDRCQUE0QixHQUV2RCxNQUFSd0QsSUFDRnhELEtBQUt1OEMseUJBQTJCLzRDLEVBQUtnNUMsd0JBQ3JDeDhDLEtBQUt5OEMscUJBQXVCajVDLEVBQUtrNUMscUJBSXJDLElBQUlqSixFQUFTNkMsRUFBdUJyNEMsVUFnUnBDLE9BOVFBdzFDLEVBQU9rSix1QkFBeUIsV0FDOUIsTUFBTyxDQUNMSCx3QkFBeUJ4OEMsS0FBS3U4Qyx5QkFDOUJHLG9CQUFxQjE4QyxLQUFLeThDLHVCQUk5QmhKLEVBQU9tSixjQUFnQixTQUF1QmhLLEVBQWF1QyxFQUFXMEgsR0FDcEUsTUFBb0Isc0JBQWhCQSxHQUF1RCxxQkFBaEJBLEdBQ0csY0FBeENqSyxFQUFZNkMsTUFBTU4sR0FBVzJILE9BTzVCLE1BTkg5OEMsS0FBSys4Qyx1QkFBdUJuSyxFQUFhdUMsR0FFbEN2QyxFQUFZK0MsT0FBT1IsRUFBVVMsWUFPMUNuQyxFQUFPb0ksUUFBVSxTQUFpQm1CLEdBQ2hDLElBQUk1SyxFQUFRcHlDLEtBRVI0eUMsRUFBY29LLEVBQUtwSyxZQUNuQnVDLEVBQVk2SCxFQUFLN0gsVUFDakI4SCxFQUF3QkQsRUFBS2xCLDJCQUM3QkEsT0FBdUQsSUFBMUJtQixHQUEyQ0EsRUFDeEVDLEVBQVl0SyxFQUFZa0QsT0FBT1gsR0FFL0I5eEMsRUFBUSxXQUdWK3VDLEVBQU1xSyxxQkFBdUJySyxFQUFNcUsscUJBQXFCLzVDLE9BQU93NkMsSUFHN0RsRyxFQUFXLFdBQ1I4RSxHQUNIMUosRUFBTStLLDZCQUdSL0ssRUFBTXFLLHFCQUF1QnJLLEVBQU1xSyxxQkFBcUIvNUMsT0FBT3c2QyxJQUc3RGpHLEVBQWMsV0FHaEI3RSxFQUFNcUsscUJBQXVCckssRUFBTXFLLHFCQUFxQi81QyxPQUFPdzZDLElBR2pFLE9BQUtiLEVBQXlCekosR0FVdkIwSixFQUFXMUosRUFBYXVDLEdBQWUsR0FBRSxDQUM5Qzl4QyxNQUFPQSxFQUNQMnpDLFNBQVVBLEVBQ1ZDLFlBQWFBLElBWk5yRSxFQUFZaUosUUFBUSxDQUN6QjFHLFVBQVdBLElBQ04sR0FBRSxDQUNQOXhDLE1BQU9BLEVBQ1AyekMsU0FBVUEsRUFDVkMsWUFBYUEsS0FXbkJ4RCxFQUFPMkosZ0JBQWtCLFNBQXlCQyxHQUMvQ3I5QyxLQUFLczlDLGVBQTRLOUcsR0FBVSxHQUVoSyxtQkFBakI2RyxJQUdUcjlDLEtBQUtzOUMsY0FBY0Msc0JBQXdCdjlDLEtBQUtzOUMsY0FBY0MsdUJBQXlCLEdBRXZGdjlDLEtBQUtzOUMsY0FBY0Msc0JBQXNCMStDLEtBQUt3K0MsR0FFMUNyOUMsS0FBS3c5QywyQkFFWSxNQUFmeDlDLEtBQUt5OUMsT0FDUEosRUFBYSxDQUNYaDZDLE1BQU9yRCxLQUFLeTlDLFNBRWEsTUFBbEJ6OUMsS0FBSzA5QyxXQUNkTCxFQUFhLENBQ1g3SCxTQUFVeDFDLEtBQUswOUMsZUFpQnpCakssRUFBT2tLLE1BQVEsU0FBZUMsRUFBY0MsR0FDMUMsSUFPSUosRUFQQXBDLEVBQVNyN0MsS0FFVDR5QyxFQUFjZ0wsRUFBYWhMLFlBQzNCdUMsRUFBWXlJLEVBQWF6SSxVQUN6QmtJLEVBQWVPLEVBQWFQLGFBQzVCUyxHQUFtQixFQUl2Qjk5QyxLQUFLKzlDLGlCQUNMLElBQUlDLEVBQTJCaCtDLEtBQUtzOUMsZUFBaUJ0OUMsS0FBS3M5QyxjQUFjQyxzQkFDeEV2OUMsS0FBS3M5QyxjQUFnQixDQUNuQjFLLFlBQWFBLEVBQ2IySyxzQkFBdUJTLEdBQTRCLEdBQ25EN0ksVUFBV0EsR0FHVGtJLElBQW9GLElBQXBFcjlDLEtBQUtzOUMsY0FBY0Msc0JBQXNCM3BDLFFBQVF5cEMsSUFDbkVyOUMsS0FBS3M5QyxjQUFjQyxzQkFBc0IxK0MsS0FBS3crQyxHQUdoRCxJQUFJWSxFQUFvQkosRUFBc0JsSixFQUEwQlEsRUFBVUMsUUFBUWw0QyxLQUFNaTRDLEVBQVVDLFFBQVFILFVBQVc0SSxHQUF1QjFJLEVBQ2hKQyxFQUFVcDFDLEtBQUs2N0MsUUFBUSxDQUN6QmpKLFlBQWFBLEVBQ2J1QyxVQUFXOEksSUFDRCxTQUFFLFdBQ1o1QyxFQUFPNkMsZ0JBQWtCLFFBQ3hCcmdCLFVBQVUsQ0FDWDNJLEtBQU0sV0FHSm1tQixFQUFPbUMsMEJBQTJCLEVBQ2xDbkMsRUFBT29DLE9BQVMsS0FHaEJwQyxFQUFPOEMsc0JBQXNCLENBQzNCQyxrQkFBbUJOLEtBR3ZCejZDLE1BQU8sU0FBZTBCLEdBR3BCczJDLEVBQU9tQywwQkFBMkIsRUFDbENuQyxFQUFPb0MsT0FBUzE0QyxFQUNoQnMyQyxFQUFPcUMsVUFBWSxLQUNuQixJQUFJSCxFQUF3QmxDLEVBQU9pQyxlQUFpQmpDLEVBQU9pQyxjQUFjQyxzQkFHckVPLEVBQ0VQLEdBQ0ZBLEVBQXNCMTRDLFNBQVEsU0FBVXc0QyxHQUN0Q0EsRUFBYSxDQUNYaDZDLE1BQU8wQixPQUtiMDRDLEVBQVMxNEMsS0FXZixHQVBBL0UsS0FBS2srQyxnQkFBa0IsQ0FDckJ0SyxRQUFTLFdBQ1B3QixFQUFRNkIsZ0JBR1o2RyxHQUFtQixFQUVmTCxFQUNGLE1BQU1BLEVBR1IsT0FBT3o5QyxLQUFLMDlDLFdBR2RqSyxFQUFPNEssTUFBUSxTQUFlUixHQUU1QixPQURDNzlDLEtBQUtzOUMsZUFBMko5RyxHQUFVLEdBQ3BLeDJDLEtBQUsyOUMsTUFBTSxDQUNoQi9LLFlBQWE1eUMsS0FBS3M5QyxjQUFjMUssWUFDaEN1QyxVQUFXbjFDLEtBQUtzOUMsY0FBY25JLFVBQzlCa0ksYUFBYyxNQUViUSxJQUdMcEssRUFBT0csUUFBVSxXQUNmNXpDLEtBQUsrOUMsaUJBQ0wvOUMsS0FBS205Qyw4QkFHUDFKLEVBQU9zSyxlQUFpQixXQUN0Qi85QyxLQUFLeTlDLE9BQVMsS0FDZHo5QyxLQUFLMDlDLFVBQVksS0FFYjE5QyxLQUFLaytDLGlCQUNQbCtDLEtBQUtrK0MsZ0JBQWdCdEssVUFHbkI1ekMsS0FBS3MrQyxvQkFDUHQrQyxLQUFLcytDLGtCQUFrQjFLLFVBRXZCNXpDLEtBQUtzK0Msa0JBQW9CLE9BSTdCN0ssRUFBT3NKLHVCQUF5QixTQUFnQ25LLEVBQWF1QyxHQUMzRW4xQyxLQUFLdStDLGtDQUVMditDLEtBQUt1OEMseUJBQTJCM0osRUFBWWtELE9BQU9YLElBR3JEMUIsRUFBTzhLLGdDQUFrQyxXQUN2Q3YrQyxLQUFLdThDLDBCQUE0QnY4QyxLQUFLdThDLHlCQUF5QjNJLFVBQy9ENXpDLEtBQUt1OEMseUJBQTJCLE1BR2xDOUksRUFBTzBKLDJCQUE2QixXQUNsQ245QyxLQUFLdStDLGtDQUVMditDLEtBQUt5OEMscUJBQXFCNTNDLFNBQVEsU0FBVTJDLEdBQzFDLE9BQU9BLEVBQUVvc0MsYUFHWDV6QyxLQUFLeThDLHFCQUF1QixJQUc5QmhKLEVBQU8wSyxzQkFBd0IsU0FBK0JLLEdBQzVELElBQUlDLEVBQVN6K0MsS0FFVG8rQyxFQUFvQkksRUFBTUosa0JBQzdCcCtDLEtBQUtzOUMsZUFBa0w5RyxHQUFVLEdBQ2xNLElBQUlrSSxFQUFzQjErQyxLQUFLczlDLGNBQzNCMUssRUFBYzhMLEVBQW9COUwsWUFDbEMySyxFQUF3Qm1CLEVBQW9CbkIsc0JBQzVDcEksRUFBWXVKLEVBQW9CdkosVUFJcEMsSUFBSW4xQyxLQUFLMDlDLFlBSVQxOUMsS0FBSzA5QyxVQUFZOUssRUFBWStDLE9BQU9SLEVBQVVTLFVBRTlDNTFDLEtBQUtzK0Msa0JBQW9CMUwsRUFBWS9VLFVBQVU3OUIsS0FBSzA5QyxXQUFXLFNBQVVsSSxHQUV2RSxHQUE0QixNQUF4QmlKLEVBQU9uQixjQUF1QixDQUNoQyxJQUFJcUIsRUFBZ0NGLEVBQU9uQixjQUFjQyxzQkFFckQzNUMsTUFBTUMsUUFBUTg2QyxJQUNoQkEsRUFBOEI5NUMsU0FBUSxTQUFVdzRDLEdBQzlDLE9BQU9BLEVBQWEsQ0FDbEI3SCxTQUFVQSxXQU9oQngxQyxLQUFLMDlDLFdBQWFVLEdBQXFCeDZDLE1BQU1DLFFBQVEwNUMsSUFBd0IsQ0FDL0UsSUFBSS9ILEVBQVd4MUMsS0FBSzA5QyxVQUNwQkgsRUFBc0IxNEMsU0FBUSxTQUFVdzRDLEdBQ3RDLE9BQU9BLEVBQWEsQ0FDbEI3SCxTQUFVQSxTQU1YYyxFQTNSaUMsR0E4UjFDajNDLEVBQU9DLFFBQVVnM0MsRyw0QkN6U2pCLElBQUl0RixFQUF5QixFQUFRLE1BRWpDQyxFQUFpQkQsRUFBdUIsRUFBUSxPQUVoREksRUFBa0JKLEVBQXVCLEVBQVEsT0FFakRILEVBQVEsRUFBUSxNQUVoQjJELEVBQW9CLEVBQVEsTUFFNUI4QixFQUF5QixFQUFRLE1BRWpDN0IsRUFBaUMsRUFBUSxNQUV6Q25ELEVBQVcsRUFBUSxNQUVuQm9ELEVBQVcsRUFBUSxNQUNuQkMsRUFBNEJELEVBQVNDLDBCQUVyQ0MsR0FEYUYsRUFBU0csV0FDVEgsRUFBU0UsWUFPdEJnSyxFQUFlLEdBQ2Y5SixFQUF1QixDQUN6Qi9CLHFCQUFxQixHQWFuQjhMLEVBQXVDLFNBQVUzTSxHQUduRCxTQUFTMk0sRUFBd0JuNUMsR0FDL0IsSUFBSTBzQyxFQUVKQSxFQUFRRixFQUFpQjl6QyxLQUFLNEIsS0FBTTBGLElBQVUxRixLQU85QyxJQUlJOCtDLEVBQ0FDLEVBTEFDLEVBQWlCLENBQ25CQyxpQkFBa0IsS0FDbEJDLHNCQUF1QixNQUt6QixHQUFJeDVDLEVBQU1zdkMsTUFBTyxDQUNmLElBQUlBLEVBQVF0dkMsRUFBTXN2QyxNQUVsQitKLEVBQWtCSSxFQURKdkssRUFBV0ksR0FDb0JvSyxPQUFRMTVDLEVBQU11dkMsV0FDM0Q2SixFQUFlRixFQUFhRyxHQUFtQkgsRUFBYUcsR0FBaUJELGFBQWUsSUFBSXhJLE9BRWhHd0ksRUFBZSxJQUFJeEksRUFVckIsT0FQQWxFLEVBQU14YSxPQUFRLEVBQUlxWixFQUF3QixTQUFHLENBQzNDb08scUJBQXNCMzVDLEVBQU1rdEMsWUFDNUIwTSxtQkFBb0I1NUMsRUFBTXV2QyxVQUMxQnNLLFVBQVc3NUMsRUFBTXN2QyxNQUNqQjhKLGFBQWNBLEVBQ2RFLGVBQWdCQSxHQUNmUSxFQUFtQzk1QyxFQUFPbzVDLEVBQWNFLEVBQWdCRCxJQUNwRTNNLEdBbkNULEVBQUloQixFQUF5QixTQUFHeU4sRUFBeUIzTSxHQXNDekQyTSxFQUF3QmorQyx5QkFBMkIsU0FBa0N1eUMsRUFBV0MsR0FDOUYsR0FBSUEsRUFBVW1NLFlBQWNwTSxFQUFVNkIsT0FBUzVCLEVBQVVpTSx1QkFBeUJsTSxFQUFVUCxjQUFnQnRCLEVBQVM4QixFQUFVa00sbUJBQW9Cbk0sRUFBVThCLFdBQVksQ0FDdkssSUFHSTZKLEVBSEE5SixFQUFRN0IsRUFBVTZCLE1BQ2xCeUssRUFBMEJyTSxFQUFVMEwsYUFBYW5DLHlCQUlyRCxHQUhBdkosRUFBVTBMLGFBQWFmLGlCQUduQi9JLEVBQU8sQ0FDVCxJQUNJK0osRUFBa0JJLEVBRFJ2SyxFQUFXSSxHQUN3Qm9LLE9BQVFqTSxFQUFVOEIsV0FDbkU2SixFQUFlRixFQUFhRyxHQUFtQkgsRUFBYUcsR0FBaUJELGFBQWUsSUFBSXhJLEVBQXVCbUosUUFFdkhYLEVBQWUsSUFBSXhJLEVBQXVCbUosR0FHNUMsT0FBTyxFQUFJeE8sRUFBd0IsU0FBRyxDQUNwQ3NPLFVBQVdwTSxFQUFVNkIsTUFDckJxSyxxQkFBc0JsTSxFQUFVUCxZQUNoQzBNLG1CQUFvQm5NLEVBQVU4QixVQUM5QjZKLGFBQWNBLEdBQ2JVLEVBQW1Dck0sRUFBVzJMLEVBQWMxTCxFQUFVNEwsaUJBSzNFLE9BQU8sTUFHVCxJQUFJdkwsRUFBU29MLEVBQXdCNWdELFVBaUdyQyxPQS9GQXcxQyxFQUFPcGIsa0JBQW9CLFdBQ3pCLElBQUlnakIsRUFBU3I3QyxLQUVUK3pDLEVBQWMvekMsS0FBSzQzQixNQUNuQm9uQixFQUFpQmpMLEVBQVlpTCxlQUM3QkYsRUFBZS9LLEVBQVkrSyxhQUMzQkMsRUFBa0JoTCxFQUFZZ0wsZ0JBRTlCQSxVQUNLSCxFQUFhRyxHQUd0QkMsRUFBZUMsaUJBQW1CLFNBQVVHLEdBQzFDLElBQUkvN0MsRUFBd0IsTUFBaEIrN0MsRUFBTy83QyxNQUFnQixLQUFPKzdDLEVBQU8vN0MsTUFDN0NteUMsRUFBOEIsTUFBbkI0SixFQUFPNUosU0FBbUIsS0FBTzRKLEVBQU81SixTQUV2RDZGLEVBQU85SSxVQUFTLFNBQVVhLEdBQ3hCLElBQUlzTSxFQUFzQnRNLEVBQVUyTCxnQkFPcEMsT0FMSVcsVUFDS2QsRUFBYWMsR0FJbEJsSyxJQUFhcEMsRUFBVW9DLFVBQVlueUMsSUFBVSt2QyxFQUFVL3ZDLE1BQ2xELEtBR0YsQ0FDTHM4QyxZQUFhQyxFQUFldjhDLEVBQU9teUMsRUFBVXBDLEVBQVUwTCxhQUFjMUwsRUFBVTRMLGdCQUMvRXhKLFNBQVVBLEVBQ1Z1SixnQkFBaUIsVUFLdkJDLEVBQWVFLHNCQUF3QixTQUFVNzdDLEdBQy9DLE9BQU9nNEMsRUFBTzlJLFVBQVMsU0FBVWEsR0FDL0IsSUFBSXNNLEVBQXNCdE0sRUFBVTJMLGdCQU1wQyxPQUpJVyxVQUNLZCxFQUFhYyxHQUdmLENBQ0xDLFlBc0RELENBQ0x0OEMsTUFBTyxLQUNQcUMsTUFBTyxLQUVQMjRDLE1BQU8sTUF6RERVLGdCQUFpQixVQU9uQi8rQyxLQUFLMEYsTUFBTXN2QyxPQUNiOEosRUFBYTFCLGdCQUFnQjRCLEVBQWVDLG1CQUloRHhMLEVBQU90UyxtQkFBcUIsV0FFMUIsSUFBSTRkLEVBQWtCLytDLEtBQUs0M0IsTUFBTW1uQixnQkFFN0JBLFdBQ0tILEVBQWFHLFVBRWIvK0MsS0FBSzQzQixNQUFNbW5CLGtCQUl0QnRMLEVBQU9sTyxxQkFBdUIsV0FDNUJ2bEMsS0FBSzQzQixNQUFNa25CLGFBQWFsTCxXQUcxQkgsRUFBT2hjLHNCQUF3QixTQUErQjBiLEVBQVdVLEdBQ3ZFLE9BQU9WLEVBQVV0eEMsU0FBVzdCLEtBQUswRixNQUFNN0QsUUFBVWd5QyxFQUFVOEwsY0FBZ0IzL0MsS0FBSzQzQixNQUFNK25CLGFBR3hGbE0sRUFBTzV4QyxPQUFTLFdBQ2QsSUFBSWcrQyxFQUFlNy9DLEtBQUs0M0IsTUFDcEIrbkIsRUFBY0UsRUFBYUYsWUFDM0I5TSxFQUFlZ04sRUFBYWhOLGFBUWhDLE9BQW9CaEMsRUFBTXpvQyxjQUFjb3NDLEVBQWtCMkIsU0FBVSxDQUNsRXRvQyxNQUFPZ2xDLEdBQ09oQyxFQUFNem9DLGNBQWNxc0MsRUFBK0IwQixTQUFVLENBQzNFdG9DLE1BQU9pbkMsR0FDTjkwQyxLQUFLMEYsTUFBTTdELE9BQU84OUMsTUFHaEJkLEVBcEtrQyxDQXFLekNoTyxFQUFNamEsV0FvQlIsU0FBU2dwQixFQUFldjhDLEVBQU9teUMsRUFBVXNKLEVBQWNFLEdBQ3JELE1BQU8sQ0FDTDM3QyxNQUFPQSxHQUFnQixLQUN2QnFDLE1BQU84dkMsRUFBV0EsRUFBU2x6QixLQUFPLEtBQ2xDKzdCLE1BQU8sU0FBZVIsR0FDcEIsSUFBSWlDLEVBQWVoQixFQUFhVCxNQUFNUixHQUVsQ2lDLEdBQTJELG1CQUFwQ2QsRUFBZUMsaUJBQ3hDRCxFQUFlQyxpQkFBaUIsQ0FDOUJ6SixTQUFVc0ssSUFFSHo4QyxHQUF5RCxtQkFBekMyN0MsRUFBZUUsdUJBR3hDRixFQUFlRSxzQkFBc0I3N0MsS0FNN0MsU0FBUzg3QyxFQUFtQi9KLEVBQVNILEdBQ25DLE9BQU94SSxLQUFLQyxVQUFVLENBQ3BCN3VCLEdBQUl1M0IsRUFBUTJLLFFBQVUzSyxFQUFRMkssUUFBVTNLLEVBQVF2M0IsR0FDaERvM0IsVUFBV0EsSUFJZixTQUFTdUssRUFBbUM5NUMsRUFBT281QyxFQUFjRSxFQUFnQkQsR0FDL0UsSUFBSW5NLEVBQWNsdEMsRUFBTWt0QyxZQUNwQm9DLEVBQVF0dkMsRUFBTXN2QyxNQUNkQyxFQUFZdnZDLEVBQU11dkMsVUFDbEJ5RyxFQUFjaDJDLEVBQU1nMkMsWUFDcEJzRSxFQUFxQnBOLEVBRXpCLElBQUlvQyxFQWdGRixPQUpBOEosRUFBYWxMLFVBSU4sQ0FDTHZ3QyxNQUFPLEtBQ1B3dkMsYUFMa0IsQ0FDbEJELFlBQWFvTixHQUtiTCxZQTdIRyxDQUNMdDhDLE1BQU8sS0FDUHFDLE1BQU8sR0FFUDI0QyxNQUFPLE1BMEhMVSxnQkFBaUIsTUFuRm5CLElBQUkzSixFQUFVUixFQUFXSSxHQUNyQkcsRUFBWVIsRUFBMEJTLEVBQVNILEVBQVd5RyxHQUMxRDdJLEVBQWUsQ0FDakJELFlBQWFvTixHQUdmLEdBQStCLGlCQUFwQmpCLEdBQWdDSCxFQUFhRyxHQUFrQixDQUV4RSxJQUFJdkosRUFBV29KLEVBQWFHLEdBQWlCdkosU0FFN0MsT0FBSUEsRUFFSyxDQUNMbnlDLE1BQU8sS0FDUHd2QyxhQUFjQSxFQUNkOE0sWUFBYUMsRUFBZSxLQUFNcEssRUFBVXNKLEVBQWNFLEdBQzFEeEosU0FBVUEsRUFDVnVKLGdCQUFpQkEsR0FJWixDQUNMMTdDLE1BQU8sS0FDUHd2QyxhQUFjQSxFQUNkOE0sWUE1RUQsQ0FDTHQ4QyxNQUFPLEtBQ1BxQyxNQUFPLEtBRVAyNEMsTUFBTyxNQXlFRDdJLFNBQVUsS0FDVnVKLGdCQUFpQkEsR0FLdkIsSUFDRSxJQUFJa0IsRUFBZ0JuQixFQUFhbEMsY0FBY29ELEVBQW9CN0ssRUFBV3p2QyxFQUFNbTNDLGFBT2hGYSxFQU5nQm9CLEVBQWFuQixNQUFNLENBQ3JDL0ssWUFBYW9OLEVBQ2IzQyxhQUFjMkIsRUFBZUMsaUJBQzdCOUosVUFBV0EsS0FHb0I4SyxFQVNqQyxPQU5BbEIsRUFBa0JBLEdBQW1CSSxFQUFtQi9KLEVBQVFnSyxPQUFRMTVDLEVBQU11dkMsV0FDOUUySixFQUFhRyxHQUFtQixDQUM5QkQsYUFBY0EsRUFDZHRKLFNBQVVrSSxHQUdQQSxFQVVFLENBQ0xyNkMsTUFBTyxLQUNQd3ZDLGFBQWNBLEVBQ2Q4TSxZQUFhQyxFQUFlLEtBQU1sQyxFQUFXb0IsRUFBY0UsR0FDM0R4SixTQUFVa0ksRUFDVnFCLGdCQUFpQkEsR0FkVixDQUNMMTdDLE1BQU8sS0FDUHd2QyxhQUFjQSxFQUNkOE0sWUF4R0QsQ0FDTHQ4QyxNQUFPLEtBQ1BxQyxNQUFPLEtBRVAyNEMsTUFBTyxNQXFHRDdJLFNBQVUsS0FDVnVKLGdCQUFpQkEsR0FXckIsTUFBTzE3QyxHQUNQLE1BQU8sQ0FDTEEsTUFBT0EsRUFDUHd2QyxhQUFjQSxFQUNkOE0sWUFBYUMsRUFBZXY4QyxFQUFPLEtBQU15N0MsRUFBY0UsR0FDdkR4SixTQUFVLEtBQ1Z1SixnQkFBaUJBLElBa0J6QjEvQyxFQUFPQyxRQUFVdS9DLEcsNEJDOVZqQixJQUFJaE8sRUFBUSxFQUFRLE1BRXBCeHhDLEVBQU9DLFFBQVV1eEMsRUFBTXFQLGNBQWMsQ0FDbkNuTixxQkFBcUIsSyw0QkNIdkIsSUFBSS9CLEVBQXlCLEVBQVEsTUFFakNvRixFQUFZcEYsRUFBdUIsRUFBUSxPQUUzQ0UsRUFBaUNGLEVBQXVCLEVBQVEsT0FFaEVDLEVBQWlCRCxFQUF1QixFQUFRLE9BRWhERyxFQUEwQkgsRUFBdUIsRUFBUSxPQUV6REksRUFBa0JKLEVBQXVCLEVBQVEsT0FFakRLLEVBQW1CTCxFQUF1QixFQUFRLE9BRWxESCxFQUFRLEVBQVEsTUFFaEIyRCxFQUFvQixFQUFRLE1BRTVCOEIsRUFBeUIsRUFBUSxNQUVqQ2hGLEVBQVcsRUFBUSxNQUVuQkMsRUFBMkIsRUFBUSxNQUVuQ2dGLEVBQStCLEVBQVEsTUFLdkMzRixHQUhVLEVBQVEsTUFFUCxFQUFRLE1BQ1NBLGtCQUc1QlksRUFEWSxFQUFRLE1BQ1dBLG1CQUUvQkMsRUFBWSxFQUFRLE1BQ3BCaUYsRUFBYWpGLEVBQVVpRixXQUN2QmhGLEVBQTZCRCxFQUFVQywyQkFDdkNpRCxFQUE0QmxELEVBQVVrRCwwQkFDdENoRCxFQUF1QkYsRUFBVUUscUJBQ2pDaUQsRUFBYW5ELEVBQVVtRCxXQUV2QitCLEdBRGNsRixFQUFVbUYsWUFDQ25GLEVBQVVrRix3QkFDbkMvRSxFQUFtQkgsRUFBVUcsaUJBb1VqQyxTQUFTZSxFQUFhQyxFQUFhdU4sR0FDakMsTUFBTyxDQUNMdk4sWUFBYUEsRUFDYnVOLFFBQVNBLEdBbUJiOWdELEVBQU9DLFFBQVUsQ0FDZmcxQyxnQkFSRixTQUF5QjFkLEVBQVcyZCxFQUFjNkwsR0FFaEQsT0FBTzdPLEVBQXlCM2EsRUFBVzJkLEdBQWMsU0FBVTZDLEVBQWdCdEYsR0FDakYsT0EvVUosU0FBc0NsYixFQUFXa2IsRUFBV3NPLEdBQzFELElBQUlyTyxFQUFRQyxFQUVSQyxFQUFnQnJCLEVBQWlCaGEsR0FDckMsT0FBT29iLEVBQVFELEVBQXNCLFNBQVVHLEdBRzdDLFNBQVNILEVBQU9yc0MsR0FDZCxJQUFJeXNDLEVBQXVCQyxFQUUzQkEsRUFBUUYsRUFBaUI5ekMsS0FBSzRCLEtBQU0wRixJQUFVMUYsTUFDOUMsRUFBSXF4QyxFQUEwQixVQUFHLEVBQUlGLEVBQWlDLFNBQUdpQixHQUFRLDZCQUE2QixXQUM1RyxJQUFJQyxFQUF5QkQsRUFBTXhhLE1BQU0wYSxTQUV6Q0YsRUFBTUcsVUFBUyxTQUFVQyxHQUN2QixPQUVFSCxJQUEyQkcsRUFBYUYsU0FBVyxDQUNqRGh3QixLQUFNa3dCLEVBQWFGLFNBQVNHLFdBQzFCLFlBSVYsRUFBSXBCLEVBQTBCLFVBQUcsRUFBSUYsRUFBaUMsU0FBR2lCLEdBQVEsWUFBWSxTQUFVd0csRUFBa0J5SCxFQUFpQnRKLEVBQW9CNW5DLEdBQzVKLEdBQUlpakMsRUFBTTBILGFBRVIsTUFBTyxDQUNMbEcsUUFBUyxjQUliLElBQ0loQixFQURzQnBCLEVBQW1CWSxFQUFNMXNDLE1BQU1vdEMsZ0JBQ25CRixZQUVsQzJJLEVBQWdCaEYsRUFBNkJ6RSxFQUFXTSxFQUFNMXNDLE9BQzlEODFDLEVBQTZDLG1CQUFyQjVDLEVBQWtDQSxFQUFpQnhHLEVBQU1rTyx5QkFBMkIxSCxFQUVoSDRDLEdBQWlCLEVBQUl2SyxFQUF3QixVQUFHLEVBQUlBLEVBQXdCLFNBQUcsR0FBSXNLLEdBQWdCQyxHQUNuRyxJQUFJSixFQUFvQmlGLEdBQ3hCLEVBQUlwUCxFQUF3QixVQUFHLEVBQUlBLEVBQXdCLFNBQUcsR0FBSXVLLEdBQWlCNkUsR0FBbUI3RSxFQUNsR0UsRUFBY3ZzQyxFQUFVLENBQzFCOHBDLFFBQVM5cEMsRUFBUThwQyxZQUNmMzFDLEVBRWUsTUFBZm80QyxHQUErRixPQUF2RXZzQyxhQUF5QyxFQUFTQSxFQUFRa29DLFlBQ3BGcUUsRUFBWXJFLFNBQVdsb0MsYUFBeUMsRUFBU0EsRUFBUWtvQyxVQUduRixJQWtCSXNFLEVBbEJBeEMsRUFBeUMsbUJBQXZCcEMsRUFBb0MsQ0FHeEQ3aEIsS0FBTTZoQixFQUNOMXpDLE1BQU8wekMsR0FDTEEsR0FBc0IsR0FDdEIvQixFQUFRSixFQUFXd0wsR0FDbkJqTCxFQUFZUixFQUEwQkssRUFBT3dHLEVBQWdCRSxHQWVqRSxPQVhBdEosRUFBTXhhLE1BQU0yb0IsZUFBaUIvRSxFQUk3QnBKLEVBQU11RyxzQkFBd0J2RyxFQUFNdUcscUJBQXFCMUIsY0FPcEMsTUFGRDdFLEVBQU02SSxtQkFBbUIyQixjQUFjaEssRUFBYXVDLEVBQVdobUMsYUFBeUMsRUFBU0EsRUFBUTB0QyxjQUczSXpLLEVBQU14YSxNQUFNMGEsU0FBUzJKLGFBQWFiLEVBQW1CakcsRUFBVUMsUUFBUWw0QyxNQUV2RWsxQyxFQUFNRyxVQUFTLFNBQVVpTyxHQUN2QixNQUFPLENBQ0xsK0IsS0FBTWsrQixFQUFZbE8sU0FBU0csVUFDM0JtSCxtQkFBb0IsQ0FDbEJoSCxZQUFhUixFQUFNMXNDLE1BQU1vdEMsZUFBZUYsaUJBRzNDLFdBQ0R1RyxFQUFTamtCLE1BQVFpa0IsRUFBU2prQixPQUMxQmlrQixFQUFTbkMsVUFBWW1DLEVBQVNuQyxjQUd6QixDQUNMcEQsUUFBUyxnQkFJYnhCLEVBQU02SSxtQkFBbUJZLFFBQVEsQ0FDL0JqSixZQUFhQSxFQUNidUMsVUFBV0EsRUFFWDJHLDRCQUE0QixJQUMzQkMsVUFBUyxTQUFVMEUsR0FHcEIsT0FGQXJPLEVBQU14YSxNQUFNMGEsU0FBUzJKLGFBQWFiLEVBQW1CakcsRUFBVUMsUUFBUWw0QyxNQUVoRXc1QyxFQUFXdFksUUFBTyxTQUFVZ2IsR0FDakMsT0FBT2hILEVBQU1HLFVBQVMsU0FBVWlPLEdBQzlCLE1BQU8sQ0FDTGwrQixLQUFNaytCLEVBQVlsTyxTQUFTRyxVQUMzQm1ILG1CQUFvQixDQUNsQmhILFlBQWFSLEVBQU0xc0MsTUFBTW90QyxlQUFlRixpQkFHM0MsV0FDRHdHLEVBQUtsa0IsT0FDTGtrQixFQUFLcEMsb0JBR0MsU0FBRSxXQUdSNUUsRUFBTXVHLHVCQUF5QmdELElBQ2pDdkosRUFBTXVHLHFCQUF1QixTQUU5QjlhLFdBQVUsRUFBSW9ULEVBQXdCLFVBQUcsRUFBSUEsRUFBd0IsU0FBRyxHQUFJa0ksR0FBVyxHQUFJLENBQzVGaHRCLE1BQU8sU0FBZStxQixHQUNwQjlFLEVBQU11RyxxQkFBdUJnRCxFQUFzQnpFLEVBQ25EaUMsRUFBU2h0QixPQUFTZ3RCLEVBQVNodEIsTUFBTStxQixPQUk5QixDQUNMdEQsUUFBUyxXQUNQK0gsR0FBdUJBLEVBQW9CMUUsb0JBSWpELElBQUlwRSxFQUFlckIsRUFBbUI5ckMsRUFBTW90QyxnQkFDeENDLEVBQWdGLFFBQXpEWixFQUF3QnpzQyxFQUFNc3RDLDZCQUE2RCxJQUExQmIsR0FBbUNBLEVBQy9IQyxFQUFNdUcscUJBQXVCLEtBSzdCLElBQUlyRyxFQUFXWixFQUEyQm1CLEVBQWNaLEVBQWVILEVBQVdwc0MsRUFBT3F0QyxHQVd6RixPQVZBWCxFQUFNeGEsTUFBUSxDQUNadFYsS0FBTWd3QixFQUFTRyxVQUNmOE4sZUFBZ0IsS0FDaEJ0TixVQUFXdnRDLEVBQ1h3dEMsaUJBQWtCTCxFQUNsQitHLG1CQUFvQi9HLEVBQ3BCSCxVQUFXQyxFQUFhRSxFQUFhRCxZQUFhUixFQUFNc08sVUFDeERwTyxTQUFVQSxHQUVaRixFQUFNMEgsY0FBZSxFQUNkMUgsR0EvSVQsRUFBSWhCLEVBQXlCLFNBQUdXLEVBQVFHLEdBa0p4QyxJQUFJdUIsRUFBUzFCLEVBQU85ekMsVUFrS3BCLE9BaEtBdzFDLEVBQU9wYixrQkFBb0IsV0FDekJyNEIsS0FBSzg1QyxjQUFlLEVBRXBCOTVDLEtBQUswekMsMkJBR1BELEVBQU90UyxtQkFBcUIsU0FBNEI4UixFQUFXRyxHQU03RHB6QyxLQUFLNDNCLE1BQU0wYSxXQUFhYyxFQUFVZCxXQUNwQ2MsRUFBVWQsU0FBU3NCLFVBQ25CNXpDLEtBQUtrN0MsZUFBaUJsN0MsS0FBS2s3QyxjQUFjdEgsVUFDekM1ekMsS0FBSzI0QyxzQkFBd0IzNEMsS0FBSzI0QyxxQkFBcUIxQixjQUV2RGozQyxLQUFLMHpDLDRCQVNUM0IsRUFBT254Qyx5QkFBMkIsU0FBa0N1eUMsRUFBV0MsR0FDN0UsSUFBSUMsRUFJQUosRUFBWUcsRUFBVUgsVUFDdEJKLEVBQWVyQixFQUFtQjJCLEVBQVVMLGdCQUM1Q0MsRUFBb0YsUUFBN0RNLEVBQXdCRixFQUFVSCw2QkFBNkQsSUFBMUJLLEdBQW1DQSxFQUMvSEMsRUFBVTNCLEVBQXFCRyxFQUFXbUIsR0FDMUNNLEVBQVU1QixFQUFxQkcsRUFBV3FCLEdBQzFDNkcsRUFBb0J6RCxFQUE2QnpFLEVBQVdtQixHQUM1RGdILEVBQW9CMUQsRUFBNkJ6RSxFQUFXcUIsR0FDNURiLEVBQVdjLEVBQVVkLFNBTXpCLEdBQUljLEVBQVVGLGlCQUFpQk4sY0FBZ0JDLEVBQWFELGNBQWdCdEIsRUFBUzBJLEVBQW1CQyxLQUF1QjNJLEVBQVNnQyxFQUFTQyxHQU0vSSxNQUFPLENBQ0xqeEIsTUFGRmd3QixFQUFXWixFQUEyQm1CLEVBQWNaLEVBQWVILEVBQVdxQixFQUFXSixJQUV4RU4sVUFDZjhOLGVBQWdCLEtBQ2hCdE4sVUFBV0UsRUFDWEQsaUJBQWtCTCxFQUNsQitHLG1CQUFvQi9HLEVBQ3BCSCxVQUFXQyxFQUFhRSxFQUFhRCxZQUFhUSxFQUFVVixVQUFVeU4sU0FDdEU3TixTQUFVQSxHQUVGYyxFQUFVbU4sZ0JBQ3BCak8sRUFBU2tCLFNBQVNMLEdBR3BCLElBQUk3d0IsRUFBT2d3QixFQUFTRyxVQUVwQixPQUFJbndCLElBQVM4d0IsRUFBVTl3QixLQUNkLENBQ0xBLEtBQU1BLEVBQ04yd0IsVUFBV0UsR0FJUixNQUdUTSxFQUFPbE8scUJBQXVCLFdBQzVCdmxDLEtBQUs4NUMsY0FBZSxFQUNwQjk1QyxLQUFLNDNCLE1BQU0wYSxTQUFTc0IsVUFDcEI1ekMsS0FBS2s3QyxlQUFpQmw3QyxLQUFLazdDLGNBQWN0SCxVQUN6QzV6QyxLQUFLMjRDLHNCQUF3QjM0QyxLQUFLMjRDLHFCQUFxQjFCLGVBR3pEeEQsRUFBT2hjLHNCQUF3QixTQUErQjBiLEVBQVdVLEdBRXZFLEdBQUlBLEVBQVV2eEIsT0FBU3RpQixLQUFLNDNCLE1BQU10VixNQUFRdXhCLEVBQVVuQixZQUFjMXlDLEtBQUs0M0IsTUFBTThhLFVBQzNFLE9BQU8sRUFPVCxJQUZBLElBQUl4ekMsRUFBT2xCLE9BQU9rQixLQUFLaTBDLEdBRWQzUyxFQUFLLEVBQUdBLEVBQUt0aEMsRUFBS04sT0FBUTRoQyxJQUFNLENBQ3ZDLElBQUlzVCxFQUFPNTBDLEVBQUtzaEMsR0FFaEIsR0FBYSxtQkFBVHNULEdBQ0YsR0FBSTl6QyxLQUFLNDNCLE1BQU1zYixpQkFBaUJOLGNBQWdCaUIsRUFBVVgsaUJBQWlCTixZQUN6RSxPQUFPLE9BR1QsSUFBS2QsRUFBVTl5QyxlQUFlODBDLEtBQVVsQyxFQUFpQnVCLEVBQVVXLEdBQU85ekMsS0FBSzBGLE1BQU1vdUMsSUFDbkYsT0FBTyxFQUtiLE9BQU8sR0FHVEwsRUFBT0Msd0JBQTBCLFdBQy9CLElBQUlLLEVBQWMvekMsS0FBSzQzQixNQUNuQnRWLEVBQU95eEIsRUFBWXp4QixLQUNuQmd3QixFQUFXeUIsRUFBWXpCLFNBRzNCQSxFQUFTMkIsWUFBWWowQyxLQUFLazBDLDJCQUcxQixJQUFJRixFQUFlMUIsRUFBU0csVUFFeEJud0IsSUFBUzB4QixHQUNYaDBDLEtBQUt1eUMsU0FBUyxDQUNaandCLEtBQU0weEIsS0FTWlAsRUFBTzZNLHNCQUF3QixXQUM3QixPQUFPM0osRUFBdUI3RSxFQUFXOXhDLEtBQUswRixRQUdoRCt0QyxFQUFPd0gsaUJBQW1CLFdBS3hCLE9BSktqN0MsS0FBS2s3QyxnQkFDUmw3QyxLQUFLazdDLGNBQWdCLElBQUk1RSxHQUdwQnQyQyxLQUFLazdDLGVBR2R6SCxFQUFPNXhDLE9BQVMsV0FDZCxJQUFJc3lDLEVBQWNuMEMsS0FBSzBGLE1BQ25CMHVDLEVBQWVELEVBQVlDLGFBRzNCMXVDLEdBRmlCeXVDLEVBQVlyQixlQUNMcUIsRUFBWW5CLHVCQUM1QixFQUFJOUIsRUFBd0MsU0FBR2lELEVBQWEsQ0FBQyxlQUFnQixpQkFBa0IsMkJBQ3ZHMEwsRUFBZTcvQyxLQUFLNDNCLE1BQ3BCOGEsRUFBWW1OLEVBQWFuTixVQUN6QmtILEVBQXFCaUcsRUFBYWpHLG1CQUN0QyxPQUFvQi9JLEVBQU16b0MsY0FBY29zQyxFQUFrQjJCLFNBQVUsQ0FDbEV0b0MsTUFBTytyQyxHQUNPL0ksRUFBTXpvQyxjQUFjd3VCLEdBQVcsRUFBSXdmLEVBQW1CLFNBQUcsR0FBSTF3QyxFQUFPMUYsS0FBSzQzQixNQUFNdFYsS0FBTSxDQUNuR2tXLElBQUs0YixFQUNMQyxNQUFPM0IsT0FJSlgsRUFyVDRCLENBc1RuQ2xCLEVBQU1qYSxZQUFZLEVBQUl5YSxFQUEwQixTQUFHVSxFQUFRLGNBQWVFLEdBQWdCRCxFQXFCbkZILENBQTZCdUYsRUFBZ0J0RixFQUFXc08sUyw0QkNoWW5FLElBQUk1SixFQUFZLEVBQVEsTUFFcEJtSyxFQUFxQixFQUFRLE1BZ0JqQyxTQUFTQyxFQUFlNXJCLEdBQ3RCLE1BQTBCLGlCQUFaQSxHQUFvQyxPQUFaQSxJQUFxQnB4QixNQUFNQyxRQUFRbXhCLElBQVkyckIsRUFBbUIzckIsRUFBUTRkLGFBR2xIdnpDLEVBQU9DLFFBQVUsQ0FDZmt5QyxtQkFmRixTQUE0QjZDLEdBRTFCLE9BREN1TSxFQUFldk0sSUFBZ01tQyxHQUFVLEdBQ25ObkMsR0FjUHVNLGVBQWdCQSxJLDRCQ3hCbEIsSUFBSXBLLEVBQVksRUFBUSxNQWdCeEJuM0MsRUFBT0MsUUFYUCxTQUEyQnNHLEVBQWUydUMsR0FHeEMsSUFBSyxJQUFJMXhDLEtBRlAweEMsR0FBd0MsaUJBQWpCQSxHQUErTmlDLEdBQVUsR0FFbFBqQyxFQUNkLEdBQUlBLEVBQWF2MUMsZUFBZTZELEdBQU0sQ0FDcEMsSUFBSSt5QyxFQUFXckIsRUFBYTF4QyxLQUMxQit5QyxHQUFpQyxpQkFBYkEsR0FBNkMsbUJBQWJBLElBQW9QWSxHQUFVLE0sNEJDWDFULElBRUlKLEVBRnlCLEVBQVEsS0FFckJwRixDQUF1QixFQUFRLE9BRTNDSCxFQUFRLEVBQVEsTUFFaEIyRCxFQUFvQixFQUFRLE1BRTVCQyxFQUFpQyxFQUFRLE1BRXpDb00sRUFBb0IsRUFBUSxNQUU1QnJLLEVBQVksRUFBUSxNQUVwQnBYLEVBQWMsRUFBUSxNQUV0QnNWLEVBQVcsRUFBUSxNQUNuQi9ELEVBQW1CK0QsRUFBUy9ELGlCQUM1QkMsRUFBbUI4RCxFQUFTOUQsaUJBRzVCa1EsRUFEWSxFQUFRLE1BQ0lBLFlBNkM1QnpoRCxFQUFPQyxRQXZDUCxTQUFrQzgzQyxFQUFnQjdDLEVBQWMxQyxHQUU5RCxJQUFJSSxFQUFnQnJCLEVBQWlCd0csR0FDckN5SixFQUFrQmxRLEVBQWlCeUcsR0FBaUI3QyxHQUNwRCxJQUFJekMsRUFBWSxHQUVoQixJQUFLLElBQUlqdkMsS0FBTzB4QyxFQUNkekMsRUFBVWp2QyxHQUFPaStDLEVBQVl2TSxFQUFhMXhDLElBRzVDLElBQUlrK0MsRUFBWWxQLEVBQTZCdUYsRUFBZ0J0RixHQUc3RCxTQUFTa1AsRUFBV3Q3QyxFQUFPOHlCLEdBQ3pCLElBQUl5b0IsRUFFQWpzQixFQUFVb0ssRUFBWW9WLEdBQ2IsTUFBWHhmLEdBQXFPd2hCLEdBQVUsR0FDalAsSUFBSTFCLEVBQXVCMVYsRUFBWXFWLEdBQ3ZDLE9BQW9CNUQsRUFBTXpvQyxjQUFjMjRDLEdBQVcsRUFBSTNLLEVBQW1CLFNBQUcsR0FBSTF3QyxFQUFPLENBQ3RGb3RDLGVBQWdCOWQsRUFDaEJnZSxzQkFBMEssUUFBbEppTyxFQUF3Qm5NLGFBQW1FLEVBQVNBLEVBQXFCL0IsMkJBQTJELElBQTFCa08sR0FBbUNBLEVBQ3JON00sYUFBYzF1QyxFQUFNMHVDLGNBQWdCNWIsS0FjeEMsT0F6QkF1b0IsRUFBVXRnRCxZQUFjd3hDLEVBZXhCK08sRUFBV3ZnRCxZQUFjd3hDLEVBQ0ZwQixFQUFNbVEsV0FBV0EsSyw0QkN0RDFDLElBRUkvUCxFQUZ5QixFQUFRLEtBRWhCRCxDQUF1QixFQUFRLE9BR2hENEYsRUFEVyxFQUFRLE1BQ0lBLFlBb0IzQnYzQyxFQUFPQyxRQWxCUCxTQUFzQ3d5QyxFQUFXcHNDLEdBQy9DLElBQUk2MUMsRUFBZ0IsR0FjcEIsT0FWQXY5QyxPQUFPa0IsS0FBSzR5QyxHQUFXanRDLFNBQVEsU0FBVWhDLEdBQ3ZDLElBQUlxK0MsRUFBc0JDLEVBQXVCQyxFQUU3Q0MsRUFBZXZQLEVBQVVqdkMsR0FDekJ5K0MsRUFBYzU3QyxFQUFNN0MsR0FDcEIwK0MsRUFBVzNLLEVBQVl5SyxFQUFjQyxHQUNyQ0UsRUFBcUMsTUFBWkQsR0FBc0MseUJBQWxCQSxFQUFTRSxLQUE2TSxRQUExS1AsRUFBMkUsUUFBbkRDLEVBQXdCSSxFQUFTRyxVQUFVLFVBQTBDLElBQTFCUCxPQUFtQyxFQUFTQSxFQUFzQlEsTUFBTTFNLGlCQUFnRCxJQUF6QmlNLEVBQWtDQSxFQUF1QixHQUFnSCxRQUExR0UsRUFBd0JHLGFBQTJDLEVBQVNBLEVBQVNJLE1BQU0xTSxpQkFBaUQsSUFBMUJtTSxFQUFtQ0EsRUFBd0IsR0FFM2Y3RixHQUFnQixFQUFJdEssRUFBd0IsVUFBRyxFQUFJQSxFQUF3QixTQUFHLEdBQUlzSyxHQUFnQmlHLE1BRTdGakcsSSwyQkN0QlQsSUFBSXFHLEVBQXNCLEVBQVEsTUFFOUJDLEVBQTJCLEVBQVEsTUFFbkNDLEVBQWUsRUFBUSxNQUV2QkMsRUFBaUIsRUFBUSxNQUV6QkMsRUFBc0IsRUFBUSxNQUU5QkMsRUFBYyxFQUFRLE1BRXRCQyxFQUFtQixFQUFRLE1BRTNCQyxFQUFjLEVBQVEsTUFFdEJDLEVBQXdCLEVBQVEsTUFFaENDLEVBQW9CLEVBQVEsTUFFNUJDLEVBQWlCLEVBQVEsTUFFekJDLEVBQXlCLEVBQVEsS0FFakNDLEVBQXNCLEVBQVEsTUFFOUJDLEVBQWtDLEVBQVEsTUFFMUNDLEVBQWtCLEVBQVEsTUFHMUJDLEVBRFcsRUFBUSxNQUNFQSxVQU16QnRqRCxFQUFPQyxRQUFVLENBQ2ZzakQsa0JBQW1CZCxFQUFhYyxrQkFDaENDLHdCQUF5QmYsRUFBYWUsd0JBQ3RDQyxrQkFBbUJoQixFQUFhZ0Isa0JBQ2hDQyxlQUFnQmpCLEVBQWFpQixlQUM3QkMsUUFBU2xCLEVBQWFrQixRQUN0QkMsZUFBZ0JuQixFQUFhbUIsZUFDN0JDLG9CQUFxQnBCLEVBQWFvQixvQkFDbEN0QixvQkFBcUJBLEVBQ3JCQyx5QkFBMEJBLEVBQzFCdkYsV0FBWXdGLEVBQWF4RixXQUN6QnFHLFVBQVdBLEVBQ1haLGVBQWdCQSxFQUNoQkUsWUFBYUEsRUFDYkMsaUJBQWtCQSxFQUNsQkYsb0JBQXFCQSxFQUNyQk0sZUFBZ0JBLEVBQ2hCSCxZQUFhQSxFQUNiQyxzQkFBdUJBLEVBQ3ZCQyxrQkFBbUJBLEVBQ25CRSx1QkFBd0JBLEVBQ3hCQyxvQkFBcUJBLEVBQ3JCQyxnQ0FBaUNBLEVBQ2pDQyxnQkFBaUJBLEksMkJDNURuQixJQUFJZCxFQUFzQixFQUFRLE1BRTlCcE4sRUFBb0IsRUFBUSxNQUU1QjJPLEVBQThCLEVBQVEsTUFFdENDLEVBQStCLEVBQVEsTUFFdkNDLEVBQWdDLEVBQVEsTUFFeEN4RSxFQUEwQixFQUFRLE1BRWxDeUUsRUFBNkIsRUFBUSxNQUVyQ3pCLEVBQTJCLEVBQVEsTUFFbkNDLEVBQWUsRUFBUSxNQUV2QkMsRUFBaUIsRUFBUSxNQUV6QkMsRUFBc0IsRUFBUSxNQUU5QkMsRUFBYyxFQUFRLE1BRXRCQyxFQUFtQixFQUFRLE1BRTNCQyxFQUFjLEVBQVEsTUFFdEJDLEVBQXdCLEVBQVEsTUFFaENDLEVBQW9CLEVBQVEsTUFFNUJDLEVBQWlCLEVBQVEsTUFFekJDLEVBQXlCLEVBQVEsS0FFakNDLEVBQXNCLEVBQVEsTUFFOUJDLEVBQWtDLEVBQVEsTUFFMUNDLEVBQWtCLEVBQVEsTUFHMUJDLEVBRFcsRUFBUSxNQUNFQSxVQU96QnRqRCxFQUFPQyxRQUFVLENBQ2ZzakQsa0JBQW1CZCxFQUFhYyxrQkFDaENXLGNBQWUxRSxFQUNmMkUsbUJBQW9CSixFQUNwQkssY0FBZTNCLEVBQWEyQixjQUM1QkMsZ0JBQWlCNUIsRUFBYTRCLGdCQUM5QmxQLGtCQUFtQkEsRUFDbkJxTyx3QkFBeUJmLEVBQWFlLHdCQUN0Q0Msa0JBQW1CaEIsRUFBYWdCLGtCQUNoQ0MsZUFBZ0JqQixFQUFhaUIsZUFDN0JZLHdCQUF5QlIsRUFBNEI3TyxnQkFDckRzUCwwQkFBMkJQLEVBQThCL08sZ0JBQ3pEdVAsdUJBQXdCUCxFQUEyQmhQLGdCQUNuRHdQLHNCQUF1QmhDLEVBQWFnQyxzQkFDcENkLFFBQVNsQixFQUFha0IsUUFDdEJDLGVBQWdCbkIsRUFBYW1CLGVBQzdCQyxvQkFBcUJwQixFQUFhb0Isb0JBRWxDdEIsb0JBQXFCQSxFQUNyQkMseUJBQTBCQSxFQUMxQnZGLFdBQVl3RixFQUFheEYsV0FDekJxRyxVQUFXQSxFQUNYWixlQUFnQkEsRUFDaEJFLFlBQWFBLEVBQ2JDLGlCQUFrQkEsRUFDbEJGLG9CQUFxQkEsRUFDckJNLGVBQWdCQSxFQUNoQkgsWUFBYUEsRUFDYkMsc0JBQXVCQSxFQUN2QkMsa0JBQW1CQSxFQUNuQkUsdUJBQXdCQSxFQUN4QkMsb0JBQXFCQSxFQUNyQkMsZ0NBQWlDQSxFQUNqQ0MsZ0JBQWlCQSxJLHNCQzFFbkJyakQsRUFBT0MsUUFMUCxTQUE0QnN6QyxHQUMxQixNQUE4QixpQkFBaEJBLEdBQTRDLE9BQWhCQSxHQUNiLG1CQUF0QkEsRUFBWTZDLE9BQXNELG1CQUF2QjdDLEVBQVkrQyxRQUF1RCxtQkFBdkIvQyxFQUFZa0QsUUFBd0QsbUJBQXhCbEQsRUFBWWlKLFNBQTJELG1CQUExQmpKLEVBQVkvVSxZLDRCQ05yTSxJQUVJa21CLEVBRlEsRUFBUSxNQUtkNzVDLG1EQUNGdXhCLEVBQXlCc29CLEVBQXNCdG9CLHVCQUMvQzJFLEVBQW9CMmpCLEVBQXNCM2pCLGtCQU85Qy9nQyxFQUFPQyxRQUxQLFNBQXFCMGtELEdBRW5CLE9BRDJDLE1BQTFCdm9CLEVBQWlDQSxFQUF1QnhqQixRQUFVbW9CLEVBQWtCNmpCLG1CQUNuRjdrQixZQUFZNGtCLEssNEJDVmhDLElBQUlFLEVBQWtCLEVBQVEsTUFFMUJyVCxFQUFRLEVBQVEsTUFFaEIyUixFQUFzQixFQUFRLE1BSTlCOU4sR0FGVSxFQUFRLE1BRVAsRUFBUSxPQUNuQnBWLEVBQWFvVixFQUFTcFYsV0FDdEJ4QixFQUFZNFcsRUFBUzVXLFVBNkJ6QnorQixFQUFPQyxRQTNCUCxTQUE2QjA5QyxHQUMzQixJQUFJbUgsRUFBc0JuSCxFQUFLbUgsb0JBQzNCeitDLEVBQVFzM0MsRUFBS3QzQyxNQUViMCtDLEVBQWVELEVBQW9CQyxhQUNuQ0MsRUFBVUYsRUFBb0JFLFFBQzlCQyxFQUFjSCxFQUFvQkcsWUFDbENDLEVBQWFKLEVBQW9CSSxXQUNqQ0MsRUFBZUwsRUFBb0JLLGFBQ25DNXRCLEVBQVl3dEIsSUFDWkssRUFBa0JubEIsRUFBVzRrQixHQUM3QnRSLEVBQWM0UCxJQVFsQixPQVBBMWtCLEdBQVUsV0FDUjhVLEVBQVk4UixNQUFNLENBQ2hCempELEtBQU0sMEJBQ053akQsZ0JBQWlCQSxFQUNqQkQsYUFBY0EsTUFFZixDQUFDNVIsRUFBYTZSLEVBQWlCRCxJQUNkM1QsRUFBTXpvQyxjQUFjd3VCLEVBQVcsQ0FDakQwdEIsWUFBYUEsRUFDYkMsV0FBWUEsRUFDWjcrQyxNQUFPQSxFQUNQMitDLFFBQVNBLE0sNEJDbkNiLElBQUlyVCxFQUF5QixFQUFRLE1BRWpDQyxFQUFpQkQsRUFBdUIsRUFBUSxPQUVoRDJULEVBQXNCM1QsRUFBdUIsRUFBUSxPQUVyRDRULEVBQVcsRUFBUSxNQUVuQnBPLEVBQVksRUFBUSxNQUVwQjlCLEVBQVcsRUFBUSxNQUNuQm1RLEVBQTZCblEsRUFBUzNELFdBQVc4VCwyQkFDakRDLEVBQXdCcFEsRUFBU29RLHNCQUNqQ2xPLEVBQWNsQyxFQUFTa0MsWUFDdkJtTyxFQUFZclEsRUFBU3FRLFVBQ3JCQyxFQUFtQnRRLEVBQVNzUSxpQkFDNUJDLEVBQThCdlEsRUFBU3VRLDRCQUV2Q0MsRUFBdUMsbUJBQVpqaEIsUUFNM0JraEIsRUFBZ0NubkQsT0FBT29uRCxPQUFPLElBWWxELFNBQVNDLEVBQWtCQyxFQUFVOVAsR0FDbkMsT0FBSTV4QyxNQUFNQyxRQUFRMnhDLEdBQ1QsQ0FDTDhQLFNBQVVBLEVBQ1Y5UCxTQUFVQSxFQUNWbHpCLEtBQU1rekIsRUFBU2h4QyxLQUFJLFNBQVVhLEdBQzNCLE9BQU9BLEVBQUVpZCxTQUtSLENBQ0xnakMsU0FBVUEsRUFDVjlQLFNBQVVBLEVBQ1ZsekIsS0FBTWt6QixFQUFTbHpCLE1BUW5CLElBQUlpakMsRUFBb0MsV0FDdEMsU0FBU0EsRUFBcUIzUyxHQUM1QjV5QyxLQUFLd2xELGFBQWU1UyxFQUNwQjV5QyxLQUFLeWxELE9BQVNiLEVBQVN4bUIsT0F2Q04sS0FnRG5CLElBQUlxVixFQUFTOFIsRUFBcUJ0bkQsVUFtVGxDLE9BalRBdzFDLEVBQU9pUyxLQUFPLFNBQWNyRSxFQUFjQyxFQUFhcUUsRUFBc0JDLEdBQzNFLE9BQU81bEQsS0FBSzZsRCxtQkFBbUJ4RSxFQUFjQyxFQUFhd0QsRUFBc0J6RCxFQUFjQyxHQUFjcUUsRUFBc0JDLElBU3BJblMsRUFBT29TLG1CQUFxQixTQUE0QnhFLEVBQWNDLEVBQWF3RSxFQUFvQkgsRUFBc0JDLEdBQzNILElBQUlHLEVBRUFuVCxFQUFjNXlDLEtBQUt3bEQsYUFJdkIsR0FBbUIsTUFBZmxFLEVBQ0YsTUFBTyxDQUNMZ0UsU0FBVVEsRUFDVnhqQyxLQUFNLEtBQ05rekIsU0FBVSxNQU1kLElBQTJNLEtBQXRNNkwsU0FBZ0gsUUFBbkQwRSxFQUF3QjFFLEVBQWFoSyxnQkFBZ0QsSUFBMUIwTyxPQUFyRSxFQUFpSEEsRUFBc0JDLFVBQzVMcGlELE1BQU1DLFFBQVF5OUMsSUFBOFg5SyxHQUFVLEdBRTVYLElBQXZCOEssRUFBWTFpRCxRQUNkLE1BQU8sQ0FDTDBtRCxTQUFVUSxFQUNWeGpDLEtBQU02aUMsRUFDTjNQLFNBQVUyUCxHQU9oQixJQUFJYyxFQUFjam1ELEtBQUt5bEQsT0FBT3I0QyxJQUFJMDRDLEdBRWxDLEdBQW1CLE1BQWZHLEVBQXFCLENBQ3ZCLEdBQUlsQixFQUFVa0IsR0FDWixNQUFNQSxFQUdSLEdBQUlBLEVBQVl6USxTQUdkLE9BRkF4MUMsS0FBS2ttRCx1Q0FBdUNELEVBQVl6USxVQUVqRHlRLEVBTVgsSUFBSUUsRUFBbUJ2UCxFQUFZeUssRUFBY0MsR0FDM0IsTUFBcEI2RSxHQUF5NEIzUCxHQUFVLEdBQ3I1QixJQUFJaEIsRUFBcUMseUJBQTFCMlEsRUFBaUIxRSxLQUFrQzBFLEVBQWlCekUsVUFBVWw5QyxLQUFJLFNBQVVhLEdBQ3pHLE9BQU91dEMsRUFBWStDLE9BQU90d0MsTUFDdkJ1dEMsRUFBWStDLE9BQU93USxHQUNwQkMsRUFBMEMseUJBQTFCRCxFQUFpQjFFLEtBQWtDMEUsRUFBaUJ6RSxVQUFVLEdBQUdDLE1BQVF3RSxFQUFpQnhFLE1BRTlILElBOUdKLFNBQXVCbk0sR0FDckIsT0FBSTV4QyxNQUFNQyxRQUFRMnhDLEdBQ1RBLEVBQVM2USxNQUFLLFNBQVVoaEQsR0FDN0IsT0FBT0EsRUFBRWloRCxpQkFJTjlRLEVBQVM4USxjQXVHVEEsQ0FBYzlRLEdBQVcsQ0FDNUJ4MUMsS0FBS2ttRCx1Q0FBdUMxUSxHQUU1QyxJQUFJK1EsRUFBaUJsQixFQUFrQlMsRUFBb0J0USxHQUkzRCxPQUZBeDFDLEtBQUt5bEQsT0FBT3Y1QyxJQUFJNDVDLEVBQW9CUyxHQUU3QkEsRUFRVCxJQUFJQyxFQUFpQnhtRCxLQUFLeW1ELDZDQUE2Q1gsRUFBb0J6RSxFQUFjK0UsR0FFekcsR0FBc0IsTUFBbEJJLEVBQ0YsTUFBTUEsRUFLUixPQUZBeG1ELEtBQUtrbUQsdUNBQXVDMVEsR0FFckM2UCxFQUFrQlMsRUFBb0J0USxJQUcvQy9CLEVBQU95Uyx1Q0FBeUMsU0FBZ0QxUSxHQUM5RixJQUFJcEQsRUFBUXB5QyxLQUVSNEQsTUFBTUMsUUFBUTJ4QyxHQUNoQkEsRUFBUzN3QyxTQUFRLFNBQVVRLEdBQ00sTUFBM0JBLEVBQUVxaEQsdUJBQ0p6QixFQUE0QjdTLEVBQU1vVCxhQUFjbmdELEVBQUVxaEQsMEJBSWhCLE1BQWxDbFIsRUFBU2tSLHVCQUNYekIsRUFBNEJqbEQsS0FBS3dsRCxhQUFjaFEsRUFBU2tSLHdCQUs5RGpULEVBQU9rVCxTQUFXLFNBQWtCQyxFQUFlQyxFQUFjbEIsR0FDL0QsSUFBSXBtRCxFQUFTLEdBRWIsSUFBSyxJQUFJdTBDLEtBQVE4UyxFQUNmcm5ELEVBQU91MEMsR0FBUTl6QyxLQUFLMGxELEtBQUtrQixFQUFjOVMsR0FBTytTLEVBQWEvUyxHQUFPNlIsRUFBc0I3UixHQUcxRixPQUFPdjBDLEdBR1RrMEMsRUFBTzVWLFVBQVksU0FBbUIwb0IsRUFBZ0Jyd0IsR0FDcEQsSUFBSW1sQixFQUFTcjdDLEtBRVQ0eUMsRUFBYzV5QyxLQUFLd2xELGFBQ25CRixFQUFXaUIsRUFBZWpCLFNBQzFCd0IsRUFBbUJQLEVBQWUvUSxTQUV0QyxJQUFLc1IsRUFDSCxNQUFPLENBQ0xsVCxRQUFTLGNBTWIsSUFBSW1ULEVBQXdCL21ELEtBQUtnbkQsbUJBQW1CVCxHQUNoRFUsRUFBaUJGLEVBQXNCLEdBQ3ZDRyxFQUFrQkgsRUFBc0IsR0FJeENFLEdBQ0Yvd0IsSUFJRixJQUFJaXhCLEVBQW9CLEdBb0J4QixPQWxCSXZqRCxNQUFNQyxRQUFRaWpELElBQ2ZsakQsTUFBTUMsUUFBUXFqRCxJQUFvTDFRLEdBQVUsR0FDN00wUSxFQUFnQnJpRCxTQUFRLFNBQVUyd0MsRUFBVTRSLEdBQzFDRCxFQUFrQnRvRCxLQUFLK3pDLEVBQVkvVSxVQUFVMlgsR0FBVSxTQUFVNlIsR0FDL0RoTSxFQUFPaU0sc0JBQXNCaEMsRUFBVTRCLEVBQWlCRyxFQUFnQkQsR0FFeEVseEIsY0FJaUIsTUFBbkJneEIsR0FBNEJ0akQsTUFBTUMsUUFBUXFqRCxLQUFzTDFRLEdBQVUsR0FDNU8yUSxFQUFrQnRvRCxLQUFLK3pDLEVBQVkvVSxVQUFVcXBCLEdBQWlCLFNBQVVHLEdBQ3RFaE0sRUFBT29LLE9BQU92NUMsSUFBSW81QyxFQUFVRCxFQUFrQkMsRUFBVStCLElBRXhEbnhCLFNBSUcsQ0FDTDBkLFFBQVMsV0FDUHVULEVBQWtCM2lELEtBQUksU0FBVWEsR0FDOUIsT0FBT0EsRUFBRXV1QyxhQUdYeUgsRUFBT29LLE9BQWUsT0FBRUgsTUFLOUI3UixFQUFPOFQsY0FBZ0IsU0FBdUJDLEVBQWlCdHhCLEdBQzdELElBQUl1b0IsRUFBU3orQyxLQUVUeW5ELEVBQWN6cEQsT0FBT2tCLEtBQUtzb0QsR0FBaUJoakQsS0FBSSxTQUFVM0IsR0FDM0QsT0FBTzQ3QyxFQUFPNWdCLFVBQVUycEIsRUFBZ0Iza0QsR0FBTXF6QixNQUVoRCxNQUFPLENBQ0wwZCxRQUFTLFdBQ1A2VCxFQUFZNWlELFNBQVEsU0FBVTZpRCxHQUM1QkEsRUFBVzlULGdCQU1uQkgsRUFBT3VULG1CQUFxQixTQUE0QlQsR0FDdEQsSUFBSTNULEVBQWM1eUMsS0FBS3dsRCxhQUNuQkYsRUFBV2lCLEVBQWVqQixTQUMxQndCLEVBQW1CUCxFQUFlL1EsU0FFdEMsSUFBS3NSLEVBQ0gsTUFBTyxFQUFDLEVBQU8sTUFHakIsSUFBSUcsR0FBaUIsRUFFckIsR0FBSXJqRCxNQUFNQyxRQUFRaWpELEdBQW1CLENBQ25DLElBQUlhLEVBQW1CLEdBcUJ2QixPQXBCQWIsRUFBaUJqaUQsU0FBUSxTQUFVMndDLEVBQVU0UixHQUMzQyxJQUFJRixFQUFrQnRVLEVBQVkrQyxPQUFPSCxFQUFTK0wsVUFDOUNxRyxFQUFhcFMsRUFBU2x6QixLQUN0QnVsQyxFQUFjWCxFQUFnQjVrQyxLQUM5QndsQyxFQUFjOUMsRUFBaUI0QyxFQUFZQyxHQUUzQ0MsSUFBZ0JGLElBQ2xCVixHQUFrQixFQUFJalcsRUFBd0IsVUFBRyxFQUFJQSxFQUF3QixTQUFHLEdBQUlpVyxHQUFrQixHQUFJLENBQ3hHNWtDLEtBQU13bEMsSUFFUmIsR0FBaUIsR0FHbkJVLEVBQWlCUCxHQUFPRixLQUd0QkQsR0FDRmpuRCxLQUFLeWxELE9BQU92NUMsSUFBSW81QyxFQUFVRCxFQUFrQkMsRUFBVXFDLElBR2pELENBQUNWLEVBQWdCVSxHQUcxQixJQUFJVCxFQUFrQnRVLEVBQVkrQyxPQUFPbVIsRUFBaUJ2RixVQUN0RHFHLEVBQWFkLEVBQWlCeGtDLEtBQzlCdWxDLEVBQWNYLEVBQWdCNWtDLEtBQzlCd2xDLEVBQWM5QyxFQUFpQjRDLEVBQVlDLEdBZS9DLE9BZEFYLEVBQWtCLENBQ2hCNWtDLEtBQU13bEMsRUFDTnhCLGNBQWVZLEVBQWdCWixjQUMvQnlCLFlBQWFiLEVBQWdCYSxZQUM3QnhHLFNBQVUyRixFQUFnQjNGLFNBQzFCbUYsc0JBQXVCUSxFQUFnQlIsdUJBR3JDb0IsSUFBZ0JGLElBQ2xCNW5ELEtBQUt5bEQsT0FBT3Y1QyxJQUFJbzVDLEVBQVVELEVBQWtCQyxFQUFVNEIsSUFFdERELEdBQWlCLEdBR1osQ0FBQ0EsRUFBZ0JDLElBRzFCelQsRUFBT3VVLHVCQUF5QixTQUFnQ1IsR0FDOUQsSUFBSVMsRUFBU2pvRCxLQUViLE9BQU9oQyxPQUFPa0IsS0FBS3NvRCxHQUFpQm5CLE1BQUssU0FBVXhqRCxHQUNqRCxPQUFPb2xELEVBQU9qQixtQkFBbUJRLEVBQWdCM2tELElBQU0sT0FJM0Q0d0MsRUFBT2dULDZDQUErQyxTQUFzRG5CLEVBQVVqRSxFQUFjK0UsR0FDbEksSUFFSThCLEVBRkFDLEVBQVNub0QsS0FJVDR5QyxFQUFjNXlDLEtBQUt3bEQsYUFDbkJnQixFQUFzRyxRQUFwRjBCLEVBQXdCckQsRUFBMkJqUyxFQUFhd1QsVUFBc0QsSUFBMUI4QixFQUFtQ0EsRUFyUnpKLFNBQXFEdFYsRUFBYXdDLEdBQ2hFLE9BQU94QyxFQUFZd1Ysc0JBQXNCQyw2Q0FBNkNqVCxHQW9SeUZrVCxDQUE0QzFWLEVBQWF3VCxHQUV0TyxJQUFLSSxFQUNILE9BQU8sS0FNVCxJQUFJK0IsRUFBVS9CLEVBQWVwZ0IsTUFBSyxXQUNoQytoQixFQUFPMUMsT0FBZSxPQUFFSCxNQUNoQixPQUFFLFNBQVVqaUQsR0FDcEI4a0QsRUFBTzFDLE9BQWUsT0FBRUgsTUFHMUJ0bEQsS0FBS3lsRCxPQUFPdjVDLElBQUlvNUMsRUFBVWlELEdBRTFCLElBQUlDLEVBQVlwQyxFQUFjbHBELEtBQUtraUQsT0FBT24rQyxLQUN0Q3UyQyxFQUFlNkosRUFBYXBnRCxLQUM1QnduRCxFQUFxQkQsSUFBY2hSLEVBQWUsU0FBUzkwQyxPQUFPOGxELEVBQVcsS0FBTyxTQUFTOWxELE9BQU84bEQsRUFBVyxLQUFLOWxELE9BQU84MEMsRUFBYyxLQUc3SSxPQURBK1EsRUFBUTluRCxZQUFjZ29ELEVBQ2ZGLEdBR1Q5VSxFQUFPNlQsc0JBQXdCLFNBQStCaEMsRUFBVW9ELEVBQWVyQixFQUFnQkQsR0FDckcsSUFBSXVCLEVBQXdCM29ELEtBQUt5bEQsT0FBT3I0QyxJQUFJazRDLEdBRTVDLEdBQUlQLEVBQVU0RCxHQUNaQyxFQUF3QnZCLEVBQWU5RixTQUFTcmtELEtBQUsrRCxVQUR2RCxDQUtBLElBQUlpbUQsRUFBa0J5QixhQUFxRSxFQUFTQSxFQUFzQm5ULFNBRTFILElBQUkwUixHQUFvQnRqRCxNQUFNQyxRQUFRcWpELEdBQXRDLENBS0EsSUFBSTJCLEVBQWdCM0IsR0FBa0IsRUFBSXZDLEVBQTZCLFNBQUd1QyxJQUFtQixFQUFJdkMsRUFBNkIsU0FBRytELEdBQ2pJRyxFQUFjekIsR0FBT0MsRUFFckJybkQsS0FBS3lsRCxPQUFPdjVDLElBQUlvNUMsRUFBVUQsRUFBa0JDLEVBQVV1RCxTQVBwREQsRUFBd0J2QixFQUFlOUYsU0FBU3JrRCxLQUFLK0QsUUFVbERza0QsRUEvVCtCLEdBa1V4QyxTQUFTcUQsRUFBd0IzN0MsR0FDOE11cEMsR0FBVSxHQUd6UCxTQUFTc1MsRUFBdUJsVyxHQUM5QixPQUFPLElBQUkyUyxFQUFxQjNTLEdBR2xDLElBQUltVyxFQUFnQjdELEVBQW9CLElBQUlqaEIsUUFBWSxJQUFJbnJCLElBYzVEelosRUFBT0MsUUFBVSxDQUNmd3BELHVCQUF3QkEsRUFDeEJFLGtDQWRGLFNBQTJDcFcsR0FDekMsSUFBSXFXLEVBQVNGLEVBQWMzN0MsSUFBSXdsQyxHQUUvQixHQUFJcVcsRUFDRixPQUFPQSxFQUdULElBQUlDLEVBQWtCSixFQUF1QmxXLEdBRTdDLE9BREFtVyxFQUFjNzhDLElBQUkwbUMsRUFBYXNXLEdBQ3hCQSxLLDRCQy9ZVCxJQUFJMVMsRUFBWSxFQUFRLE1BYXBCb08sRUFBd0IsV0FDMUIsU0FBU0EsRUFBU3VFLEdBQ2hCbnBELEtBQUtvcEQsVUFBWUQsRUFDZm5wRCxLQUFLb3BELFVBQVksR0FBZ0o1UyxHQUFVLEdBQzdLeDJDLEtBQUtxcEQsS0FBTyxJQUFJdndDLElBR2xCLElBQUkyNkIsRUFBU21SLEVBQVMzbUQsVUFnRHRCLE9BOUNBdzFDLEVBQU92bkMsSUFBTSxTQUFhckosRUFBS2dMLEdBSzdCLEdBSkE3TixLQUFLcXBELEtBQWEsT0FBRXhtRCxHQUVwQjdDLEtBQUtxcEQsS0FBS245QyxJQUFJckosRUFBS2dMLEdBRWY3TixLQUFLcXBELEtBQUt2cUQsS0FBT2tCLEtBQUtvcEQsVUFBVyxDQUNuQyxJQUFJRSxFQUFXdHBELEtBQUtxcEQsS0FBS25xRCxPQUFPZzJCLE9BRTNCbzBCLEVBQVM5dkIsTUFDWng1QixLQUFLcXBELEtBQWEsT0FBRUMsRUFBU3o3QyxTQUtuQzRsQyxFQUFPcm1DLElBQU0sU0FBYXZLLEdBQ3hCLElBQUlnTCxFQUFRN04sS0FBS3FwRCxLQUFLajhDLElBQUl2SyxHQVExQixPQU5hLE1BQVRnTCxJQUNGN04sS0FBS3FwRCxLQUFhLE9BQUV4bUQsR0FFcEI3QyxLQUFLcXBELEtBQUtuOUMsSUFBSXJKLEVBQUtnTCxJQUdkQSxHQUdUNGxDLEVBQU9sbUIsSUFBTSxTQUFhMXFCLEdBQ3hCLE9BQU83QyxLQUFLcXBELEtBQUs5N0IsSUFBSTFxQixJQUd2QjR3QyxFQUFlLE9BQUksU0FBaUI1d0MsR0FDbEM3QyxLQUFLcXBELEtBQWEsT0FBRXhtRCxJQUd0QjR3QyxFQUFPMzBDLEtBQU8sV0FDWixPQUFPa0IsS0FBS3FwRCxLQUFLdnFELE1BR25CMjBDLEVBQU8wVixTQUFXLFdBQ2hCLE9BQU9ucEQsS0FBS29wRCxVQUFZcHBELEtBQUtxcEQsS0FBS3ZxRCxNQUdwQzIwQyxFQUFPOFYsTUFBUSxXQUNidnBELEtBQUtxcEQsS0FBS0UsU0FHTDNFLEVBdkRtQixHQThENUJ2bEQsRUFBT0MsUUFBVSxDQUNmOCtCLE9BTEYsU0FBZ0IrcUIsR0FDZCxPQUFPLElBQUl2RSxFQUFTdUUsTSw0QkNyRXRCLElBRUlqRixFQUZRLEVBQVEsTUFFUWhFLGNBQWMsQ0FDeENzSix5QkFBMEIsU0FBa0M1NkMsR0FDMUQsT0FBT0EsT0FHWHZQLEVBQU9DLFFBQVU0a0QsRyw0QkNWakIsSUFBSWxULEVBQXlCLEVBQVEsTUFFakNDLEVBQWlCRCxFQUF1QixFQUFRLE9BRWhESyxFQUFtQkwsRUFBdUIsRUFBUSxPQUVsRDRULEVBQVcsRUFBUSxNQUVuQnBPLEVBQVksRUFBUSxNQUdwQnVPLEVBRFcsRUFBUSxNQUNFQSxVQUdyQjBFLEVBQXVCLG1CQUV2QnZFLEVBQXVDLG1CQUFaamhCLFFBRS9CLFNBQVN5bEIsRUFBd0I5VyxFQUFhdUMsRUFBV3dVLEVBQWtCQyxFQUFtQkMsR0FDNUYsSUFBSWhOLEVBQWM4TSxRQUEyREEsRUFBbUJGLEVBQzVGSyxFQUFlRixRQUE2REEsRUFBb0JoWCxFQUFZbVgsa0NBQzVHQyxFQUFrQixHQUFHdG5ELE9BQU9tNkMsRUFBYSxLQUFLbjZDLE9BQU9vbkQsRUFBYyxLQUFLcG5ELE9BQU95eUMsRUFBVUMsUUFBUTZVLFlBRXJHLE9BQW9CLE1BQWhCSixFQUNLLEdBQUdubkQsT0FBT3NuRCxFQUFpQixLQUFLdG5ELE9BQU9tbkQsR0FHekNHLEVBR1QsU0FBU0UsRUFBZS9VLEVBQVc2VSxHQUNqQyxJQUFJRyxFQUFrQixDQUNwQkMsS0FBTWpWLEVBQVVTLFNBQVN5VSxPQUN6QkMsYUFBYSxFQUFJalosRUFBMEIsU0FBRyxHQUFJOEQsRUFBVVMsU0FBUzE0QyxLQUFLK0QsS0FBTWswQyxFQUFVQyxRQUFRSCxXQUNsR3NWLGdCQUFpQnBWLEVBQVVDLFNBRTdCLE1BQU8sQ0FDTDRVLGdCQUFpQkEsRUFDakIzSSxhQUFjbE0sRUFBVUMsUUFBUWw0QyxLQUFLMDRDLFNBQ3JDMEwsWUFBYTZJLEVBQ2JoVixVQUFXQSxHQUlmLElBQUlxVixFQUFTLElBRWIsU0FBU0MsRUFBaUJULEVBQWlCN1UsRUFBV3RuQyxFQUFPNjhDLEVBQXFCQyxHQUNoRixJQUFJQyxFQUFlLzhDLEVBQ2ZnOUMsRUFBYyxFQUNkaFYsRUFBbUIsS0FDbkJpVixFQUF5QixLQUN6QkMsRUFBNkJMLEVBRTdCNVUsRUFBUyxTQUFnQmxELEdBTzNCLE9BSm9CLEtBRnBCaVksSUFHRWhWLEVBQW1CakQsRUFBWWtELE9BQU9YLElBR2pDLENBQ0x2QixRQUFTLFdBR2EsS0FGcEJpWCxFQUFjNXRDLEtBQUsrdEMsSUFBSSxFQUFHSCxFQUFjLE1BR2hCLE1BQXBCaFYsR0FBK01XLEdBQVUsR0FDM05YLEVBQWlCakMsVUFDakJpQyxFQUFtQixNQUdyQjhVLEVBQVVNLE1BS1pBLEVBQWEsQ0FDZmpCLGdCQUFpQkEsRUFDakJuc0MsR0FBSTJzQyxJQUNKajlDLFNBQVUsV0FDUixPQUFPcTlDLEdBRVRwOUMsU0FBVSxTQUFrQnRKLEdBQzFCMG1ELEVBQWUxbUQsR0FFakJnbkQsZUFBZ0IsV0FDZCxPQUFPTCxHQUVUTSx1QkFBd0IsV0FDdEIsT0FBT0osR0FFVEssdUJBQXdCLFNBQWdDbFUsR0FDcEIsTUFBOUI2VCxHQUNGQSxFQUEyQjlULGNBRzdCOFQsRUFBNkI3VCxHQUUvQm1VLGdCQUFpQixTQUF5QnpZLEdBR3hDLEdBQUlBLEVBQVkwWSxXQUNkLE1BQU8sQ0FDTDFYLFFBQVMsY0FVYixJQUFJOFQsRUFBYTVSLEVBQU9sRCxHQUNwQjJZLEVBQXNCLEtBRXRCQyxFQUE4QixXQUNoQzE3QixhQUFheTdCLEdBQ2JBLEVBQXNCLEtBQ3RCVCxFQUF5QixLQUN6QnBELEVBQVc5VCxVQUlQaVgsR0FBZSxHQUFtQyxNQUE5QkUsR0FDdEJBLEVBQTJCOVQsZUFpQi9CLE9BYkFzVSxFQUFzQjM3QixXQUFXNDdCLEVBakhWLEtBeUhPLE1BQTFCVixHQUNGQSxJQUdGQSxFQUF5QlUsRUFDbEIsQ0FDTDVYLFFBQVMsV0FDUGtYLEdBQTBCQSxPQUloQ1csZ0JBQWlCLFNBQXlCN1ksR0FDeEMsSUFBSThVLEVBQWE1UixFQUFPbEQsR0FPeEIsT0FMOEIsTUFBMUJrWSxJQUNGQSxJQUNBQSxFQUF5QixNQUdwQixDQUNMbFgsUUFBUyxXQUNQOFQsRUFBVzlULFVBRVBpWCxHQUFlLEdBQW1DLE1BQTlCRSxHQUN0QkEsRUFBMkI5VCxrQkFNckMsT0FBT2dVLEVBR1QsSUFBSVMsRUFBaUMsV0FDbkMsU0FBU0EsRUFBa0I5WSxHQUN6QixJQUFJUixFQUFRcHlDLE1BRVosRUFBSXF4QyxFQUEwQixTQUFHcnhDLEtBQU0sb0JBQW9CLFNBQVVpckQsR0FDL0RBLEVBQVdDLGtCQUFvQixHQUNqQzlZLEVBQU1xVCxPQUFlLE9BQUV3RixFQUFXakIsb0JBR3RDaHFELEtBQUt3bEQsYUFBZTVTLEVBQ3BCNXlDLEtBQUt5bEQsT0FBU2IsRUFBU3htQixPQXRLTixLQXlLbkIsSUFBSXFWLEVBQVNpWSxFQUFrQnp0RCxVQTZQL0IsT0EzUEF3MUMsRUFBT2tZLFFBQVUsU0FBaUJ4VyxFQUFXeVcsRUFBaUJqQyxFQUFrQkMsRUFBbUJ6USxFQUFVMFEsRUFBY3BGLEdBQ3pILElBQUl1RixFQUFrQk4sRUFBd0IxcEQsS0FBS3dsRCxhQUFjclEsRUFBV3dVLEVBQWtCQyxFQUFtQkMsR0FDakgsT0FBTzdwRCxLQUFLNnJELHNCQUFzQjdCLEVBQWlCN1UsRUFBV3lXLEVBQWlCakMsRUFBa0JDLEVBQW1CelEsRUFBVXNMLElBU2hJaFIsRUFBT29ZLHNCQUF3QixTQUErQjdCLEVBQWlCN1UsRUFBV3lXLEVBQWlCakMsRUFBa0JDLEVBQW1CelEsRUFBVXNMLEdBQ3hKLElBQUk3UixFQUFjNXlDLEtBQUt3bEQsYUFDbkIzSSxFQUFjOE0sUUFBMkRBLEVBQW1CRixFQUM1RkssRUFBZUYsUUFBNkRBLEVBQW9CaFgsRUFBWW1YLGtDQUc1R2tCLEVBQWFqckQsS0FBS3lsRCxPQUFPcjRDLElBQUk0OEMsR0FFN0I4QixFQUE0QixLQUVkLE1BQWRiLElBSUZBLEVBQWFqckQsS0FBSytyRCxtQkFBbUIvQixFQUFpQjdVLEVBQVd5VyxFQUFpQi9PLEVBQWFpTixFQUFjckYsR0FBaUIsRUFBSXhULEVBQXdCLFVBQUcsRUFBSUEsRUFBd0IsU0FBRyxHQUFJa0ksR0FBVyxHQUFJLENBQzdNbEMsWUFBYSxTQUFxQkMsR0FNQyxNQUE3QjRVLEdBQ0ZBLEVBQTBCbFksVUFHNUIsSUFBSW9ZLEVBQXNCN1MsYUFBMkMsRUFBU0EsRUFBU2xDLFlBQ3ZGK1UsR0FBdUJBLEVBQW9COVUsUUFVakQ0VSxFQUE0QmIsRUFBV0ksZ0JBQWdCelksR0FDdkQsSUFBSXFULEVBQWNnRixFQUFXMTlDLFdBRTdCLEdBQUl3M0MsRUFBVWtCLElBQWdCQSxhQUF1QjFpRCxNQUNuRCxNQUFNMGlELEVBR1IsT0FBT0EsR0FTVHhTLEVBQU9xQyxPQUFTLFNBQWdCbVcsRUFBYXhILEdBQzNDLElBQUk3UixFQUFjNXlDLEtBQUt3bEQsYUFDbkJ3RSxFQUFrQmlDLEVBQVlqQyxnQkFDOUI3VSxFQUFZOFcsRUFBWTlXLFVBRXhCOFYsRUFBYWpyRCxLQUFLa3NELHVCQUF1QmxDLEVBQWlCN1UsRUFBVzhXLEVBQWEsTUFFbEZ2RSxFQUFhdUQsRUFBV1EsZ0JBQWdCN1ksR0FRNUMsT0FOQUEsRUFBWThSLE1BQU0sQ0FDaEJ6akQsS0FBTSx1QkFDTndqRCxnQkFBaUJBLEVBQ2pCMEgsV0FBWWxCLEVBQVdwdEMsS0FHbEIsQ0FDTCsxQixRQUFTLFdBQ1A4VCxFQUFXOVQsYUFLakJILEVBQU8yWSwwQkFBNEIsU0FBbUNqWCxFQUFXd1UsRUFBa0JDLEVBQW1CQyxHQUNwSCxJQUNJRyxFQUFrQk4sRUFESjFwRCxLQUFLd2xELGFBQ29DclEsRUFBV3dVLEVBQWtCQyxFQUFtQkMsR0FDM0csT0FBTzdwRCxLQUFLeWxELE9BQU9yNEMsSUFBSTQ4QyxJQUd6QnZXLEVBQU95WSx1QkFBeUIsU0FBZ0NsQyxFQUFpQjdVLEVBQVd0bkMsRUFBTzY4QyxHQUNqRyxJQUFJTyxFQUFhanJELEtBQUt5bEQsT0FBT3I0QyxJQUFJNDhDLEdBUWpDLE9BTmtCLE1BQWRpQixJQUNGQSxFQUFhUixFQUFpQlQsRUFBaUI3VSxFQUFXdG5DLEVBQU82OEMsRUFBcUIxcUQsS0FBS3FzRCxrQkFFM0Zyc0QsS0FBS3lsRCxPQUFPdjVDLElBQUk4OUMsRUFBaUJpQixJQUc1QkEsR0FHVHhYLEVBQU9zWSxtQkFBcUIsU0FBNEIvQixFQUFpQjdVLEVBQVd5VyxFQUFpQi9PLEVBQWFpTixFQUFjckYsRUFBaUJ0TCxHQUMvSSxJQVdJbVQsRUFDQUMsRUFaQWxSLEVBQVNyN0MsS0FFVDR5QyxFQUFjNXlDLEtBQUt3bEQsYUFLbkJnSCxFQUFvQjVaLEVBQVk2QyxNQUFNTixHQUN0Q3NYLEVBQWNELEVBQWtCMVAsT0FDaEM0UCxFQUErQixjQUFoQkQsRUFDZkUsRUFBbUJELEdBQWlDLFlBQWpCNUMsR0FBOEMsVUFBaEIyQyxFQUlqRUcsRUFBd0IsYUFFNUIsT0FBUS9QLEdBQ04sSUFBSyxhQUVEeVAsR0FBYyxFQUNkQyxHQUFvQixFQUNwQixNQUdKLElBQUssbUJBRURELEdBQWVJLEVBQ2ZILEVBQW9CSSxFQUNwQixNQUdKLElBQUssb0JBRURMLEdBQWMsRUFDZEMsRUFBb0JJLEVBQ3BCLE1BR0osSUFBSyxlQUNMLFFBRUlMLEdBQWMsRUFDZEMsR0FBb0IsRUFTMUIsR0FBSUEsRUFBbUIsQ0FDckIsSUFBSU4sRUFBYy9CLEVBQWUvVSxFQUFXNlUsR0FFeEM2QyxFQUFjcEMsRUFBaUJULEVBQWlCN1UsRUFBVzhXLEVBQWEsS0FBTWpzRCxLQUFLcXNELGtCQUV2RnJzRCxLQUFLeWxELE9BQU92NUMsSUFBSTg5QyxFQUFpQjZDLEdBR25DLEdBQUlQLEVBQWEsQ0FDZixJQUVJNUIsRUFGQW9DLEVBQWU1QyxFQUFlL1UsRUFBVzZVLEdBRzdDNEIsRUFBZ0IvdEIsVUFBVSxDQUN4QjFSLE1BQU8sU0FBZStxQixHQUNwQndULEVBQXNCeFQsRUFFdEIsSUFBSStULEVBQWE1UCxFQUFPb0ssT0FBT3I0QyxJQUFJNDhDLEdBRS9CaUIsR0FDRkEsRUFBV0csdUJBQXVCVixHQUdwQyxJQUFJcUMsRUFBZ0I1VCxhQUEyQyxFQUFTQSxFQUFTaHRCLE1BQ2pGNGdDLEdBQWlCQSxFQUFjN1YsSUFFakNoaUIsS0FBTSxXQUNKLElBQUlzZ0IsRUFBVzVDLEVBQVkrQyxPQUFPUixFQUFVUyxVQUUzQnlGLEVBQU82USx1QkFBdUJsQyxFQUFpQjdVLEVBQVcyWCxFQUFjcEMsR0FFOUVsOUMsU0FBU3MvQyxHQUNwQkYsSUFDQSxJQUFJSSxFQUFlN1QsYUFBMkMsRUFBU0EsRUFBU2prQixLQUNoRjgzQixHQUFnQkEsRUFBYXhYLElBRS9CbnlDLE1BQU8sU0FBZW82QyxHQUNwQixJQUFJd04sRUFBYTVQLEVBQU82USx1QkFBdUJsQyxFQUFpQjdVLEVBQVdzSSxFQUFRaU4sR0FFbkZPLEVBQVd6OUMsU0FBU2l3QyxHQUNwQm1QLElBQ0FsQyxFQUFzQixLQUN0Qk8sRUFBV0csdUJBQXVCLE1BQ2xDLElBQUk2QixFQUFnQjlULGFBQTJDLEVBQVNBLEVBQVM5MUMsTUFDakY0cEQsR0FBaUJBLEVBQWN4UCxJQUVqQ3pHLFNBQVUsV0FDUjRWLElBQ0FsQyxFQUFzQixLQUV0QixJQUFJTyxFQUFhNVAsRUFBT29LLE9BQU9yNEMsSUFBSTQ4QyxHQUUvQmlCLEdBQ0ZBLEVBQVdHLHVCQUF1QixNQUdwQyxJQUFJOEIsRUFBbUIvVCxhQUEyQyxFQUFTQSxFQUFTbkMsU0FDcEZrVyxHQUFvQkEsS0FFdEJqVyxZQUFha0MsYUFBMkMsRUFBU0EsRUFBU2xDLGNBRzVFLElBQUlrVyxFQUFlbnRELEtBQUt5bEQsT0FBT3I0QyxJQUFJNDhDLEdBRW5DLElBQUttRCxFQUFjLENBQ2pCLElBQUkzRyxFQUFpQixJQUFJNEcsU0FBUSxTQUFVM2EsR0FDekNtYSxFQUF3Qm5hLEtBRzFCK1QsRUFBZS9sRCxZQUFjLFNBQVcwMEMsRUFBVVMsU0FBUzE0QyxLQUFLK0QsS0FBTyxJQUN2RWtzRCxFQUFlMUMsRUFBaUJULEVBQWlCN1UsRUFBV3FSLEVBQWdCa0UsRUFBcUIxcUQsS0FBS3FzRCxrQkFFdEdyc0QsS0FBS3lsRCxPQUFPdjVDLElBQUk4OUMsRUFBaUJtRCxRQUU5QixDQUNMLElBQUlELEVBQW1CL1QsYUFBMkMsRUFBU0EsRUFBU25DLFNBQ3BGa1csR0FBb0JBLElBR3RCLElBQUlqQyxFQUFhanJELEtBQUt5bEQsT0FBT3I0QyxJQUFJNDhDLEdBZWpDLE9BYmdCLE1BQWRpQixHQUFzTnpVLEdBQVUsR0FFbE81RCxFQUFZOFIsTUFBTSxDQUNoQnpqRCxLQUFNLHNCQUNOa3JELFdBQVlsQixFQUFXcHRDLEdBQ3ZCczNCLFVBQVdBLEVBQ1hzUCxnQkFBaUJBLEVBQ2pCNUgsWUFBYUEsRUFDYmlOLGFBQWNBLEVBQ2QwQyxrQkFBbUJBLEVBQ25CRixZQUFhQSxJQUdSckIsR0FHRlMsRUExUTRCLEdBNlFyQyxTQUFTMkIsRUFBb0J6YSxHQUMzQixPQUFPLElBQUk4WSxFQUFrQjlZLEdBRy9CLElBQUltVyxFQUFnQjdELEVBQW9CLElBQUlqaEIsUUFBWSxJQUFJbnJCLElBYzVEelosRUFBT0MsUUFBVSxDQUNmK3RELG9CQUFxQkEsRUFDckJDLCtCQWRGLFNBQXdDMWEsR0FDdEMsSUFBSXFXLEVBQVNGLEVBQWMzN0MsSUFBSXdsQyxHQUUvQixHQUFJcVcsRUFDRixPQUFPQSxFQUdULElBQUlDLEVBQWtCbUUsRUFBb0J6YSxHQUUxQyxPQURBbVcsRUFBYzc4QyxJQUFJMG1DLEVBQWFzVyxHQUN4QkEsR0FNUFEsd0JBQXlCQSxJLDRCQzNjM0IsSUFBSTdZLEVBQVEsRUFBUSxNQUVoQjJELEVBQW9CLEVBQVEsTUFFNUIvVSxFQUFVb1IsRUFBTXBSLFFBZXBCcGdDLEVBQU9DLFFBYlAsU0FBa0NvRyxHQUNoQyxJQUFJcUosRUFBV3JKLEVBQU1xSixTQUNqQjZqQyxFQUFjbHRDLEVBQU1rdEMsWUFDcEI1ZCxFQUFVeUssR0FBUSxXQUNwQixNQUFPLENBQ0xtVCxZQUFhQSxLQUVkLENBQUNBLElBQ0osT0FBb0IvQixFQUFNem9DLGNBQWNvc0MsRUFBa0IyQixTQUFVLENBQ2xFdG9DLE1BQU9tbkIsR0FDTmptQixLLDRCQ2hCTCxJQUFJdytDLEVBQXFCLEVBQVEsTUFFN0IvVyxFQUFZLEVBQVEsTUF5QnhCbjNDLEVBQU9DLFFBdkJQLFNBQStCK2hELEVBQWNzRSxHQUMzQyxJQUFJSSxFQUF1QnlILEVBRXZCQyxFQUFzQkYsRUFBbUJsTSxFQUFjc0UsR0FDdkQrSCxFQUFvQkQsRUFBb0JFLG1CQUN4Q0MsRUFBa0JILEVBQW9CRyxnQkFFdENDLEVBQXFCRCxFQUFnQmxXLFdBQ2pCLE1BQXRCbVcsR0FBc1VyWCxHQUFVLEdBQ2xWLElBQUlzWCxFQUErQkQsRUFBbUJoVyxLQUNsREosR0FBZ00sUUFBektzTyxFQUE2RSxRQUFwRHlILEVBQXlCbk0sRUFBYWhLLGdCQUFpRCxJQUEzQm1XLE9BQW9DLEVBQVNBLEVBQXVCOVYsa0JBQWtELElBQTFCcU8sRUFBbUNBLEVBQXdCLElBQUksR0FDblAsTUFBdEJ0TyxHQUFzVWpCLEdBQVUsR0FDbFYsSUFBSXVYLEVBQWtCSCxFQUFnQkcsZ0JBRXRDLE9BRHFCLE1BQW5CQSxHQUFzRCxpQkFBcEJBLEdBQXNLdlgsR0FBVSxHQUM3TSxDQUNMc1gsNkJBQThCQSxFQUM5QkMsZ0JBQWlCQSxFQUNqQkwsa0JBQW1CQSxFQUNuQkcsbUJBQW9CQSxFQUNwQkcsUUFBc0MsSUFBOUJ2VyxFQUFtQnVXLFUsNEJDdkIvQixJQUFJaGQsRUFBeUIsRUFBUSxNQUVqQ0ssRUFBbUJMLEVBQXVCLEVBQVEsT0FFbERpZCxFQUFpQmpkLEVBQXVCLEVBQVEsT0FFaER3RixFQUFZLEVBQVEsTUFFVixFQUFRLE1BNkN0Qm4zQyxFQUFPQyxRQTNDUCxTQUFnQ3k0QyxFQUFXRyxFQUFPUSxFQUFRd1YsRUFBZUMsRUFBZ0JOLEdBQ3ZGLElBQUl4WCxFQUVBK1gsRUFBbUJQLEVBQW1CUSxTQUN0Q0MsRUFBa0JULEVBQW1CVSxRQUV6QyxHQUFrQixhQUFkeFcsRUFBMEIsQ0FDNUIsSUFBSTlHLEdBRWtCLE1BQXBCbWQsR0FBc0QsTUFBMUJBLEVBQWlCbFcsT0FBNEMsTUFBM0JrVyxFQUFpQjFWLFNBQXlNbEMsR0FBVSxHQUlwUyxJQUFJZ1ksR0FBdUIsRUFBSVAsRUFBd0IsVUFBRyxFQUFJQSxFQUF3QixVQUFHLEVBQUlBLEVBQXdCLFNBQUcsR0FBSUMsR0FBZ0JDLEdBQWlCLElBQUtsZCxFQUFpQixJQUFJLEVBQUlJLEVBQTBCLFNBQUdKLEVBQWdCbWQsRUFBaUIxVixPQUFRQSxJQUFTLEVBQUlySCxFQUEwQixTQUFHSixFQUFnQm1kLEVBQWlCbFcsTUFBT0EsR0FBUWpILElBVTNWLE9BUklxZCxHQUFtQkEsRUFBZ0I1VixTQUNyQzhWLEVBQXFCRixFQUFnQjVWLFFBQVUsTUFHN0M0VixHQUFtQkEsRUFBZ0JwVyxRQUNyQ3NXLEVBQXFCRixFQUFnQnBXLE9BQVMsTUFHekNzVyxHQUdZLE1BQW5CRixHQUFvRCxNQUF6QkEsRUFBZ0JwVyxPQUEyQyxNQUExQm9XLEVBQWdCNVYsU0FBd01sQyxHQUFVLEdBSWhTLElBQUlpWSxHQUFzQixFQUFJUixFQUF3QixVQUFHLEVBQUlBLEVBQXdCLFVBQUcsRUFBSUEsRUFBd0IsU0FBRyxHQUFJQyxHQUFnQkMsR0FBaUIsSUFBSzlYLEVBQWlCLElBQUksRUFBSWhGLEVBQTBCLFNBQUdnRixFQUFnQmlZLEVBQWdCNVYsT0FBUUEsSUFBUyxFQUFJckgsRUFBMEIsU0FBR2dGLEVBQWdCaVksRUFBZ0JwVyxNQUFPQSxHQUFRN0IsSUFVeFYsT0FSSStYLEdBQW9CQSxFQUFpQjFWLFNBQ3ZDK1YsRUFBb0JMLEVBQWlCMVYsUUFBVSxNQUc3QzBWLEdBQW9CQSxFQUFpQmxXLFFBQ3ZDdVcsRUFBb0JMLEVBQWlCbFcsT0FBUyxNQUd6Q3VXLEksNEJDbERULElBQUlqWSxFQUFZLEVBQVEsTUFzQnhCbjNDLEVBQU9DLFFBcEJQLFNBQTRCK2hELEVBQWNzRSxHQUN4QyxJQUFJSSxFQUF1QnlILEdBRWtILEtBQXRGLFFBQW5EekgsRUFBd0IxRSxFQUFhaEssZ0JBQWdELElBQTFCME8sT0FBbUMsRUFBU0EsRUFBc0JDLFNBQW1WeFAsR0FBVSxHQUM5ZCxJQUFJb1gsRUFBdUUsUUFBcERKLEVBQXlCbk0sRUFBYWhLLGdCQUFpRCxJQUEzQm1XLE9BQW9DLEVBQVNBLEVBQXVCck4sUUFDbEksTUFBbkJ5TixHQUE4UnBYLEdBQVUsR0FFMVMsSUFBSW1YLEVBQXFCQyxFQUFnQnpZLFVBQW1CLFFBQUl5WSxFQUFnQnpZLFVBQW1CLFFBQUl5WSxFQUFnQnpZLFVBQ25IdVosRUFBNEJkLEVBQWdCZSxxQkFDaEIsaUJBQXZCaEIsR0FBZ1NuWCxHQUFVLEdBQ25ULElBQUl1WCxFQUFrQkgsRUFBZ0JHLGdCQUV0QyxPQURxQixNQUFuQkEsR0FBc0QsaUJBQXBCQSxHQUFzS3ZYLEdBQVUsR0FDN00sQ0FDTGtZLDBCQUEyQkEsRUFDM0JYLGdCQUFpQkEsRUFDakJKLG1CQUFvQkEsRUFDcEJDLGdCQUFpQkEsSyw0QkNsQnJCLElBRUlnQixFQUZ5QixFQUFRLEtBRUg1ZCxDQUF1QixFQUFRLE9BRTdEd0YsRUFBWSxFQUFRLE1BaUN4Qm4zQyxFQUFPQyxRQS9CUCxTQUF3QmdqQixFQUFNdTFCLEdBQzVCLElBR0lnWCxFQUhBdHZELEVBQVMraUIsRUFFVHdzQyxHQUFZLEVBQUlGLEVBQXFDLFNBQUcvVyxHQUc1RCxJQUNFLElBQUtpWCxFQUFVenBELE1BQU93cEQsRUFBUUMsRUFBVXJxRCxLQUFLKzBCLE1BQU8sQ0FDbEQsSUFBSTMyQixFQUFNZ3NELEVBQU1oaEQsTUFFaEIsR0FBYyxNQUFWdE8sRUFDRixPQUFPLEtBR1UsaUJBQVJzRCxHQUNSZSxNQUFNQyxRQUFRdEUsSUFBMkxpM0MsR0FBVSxHQUNwTmozQyxFQUFTQSxFQUFPc0QsTUFFSSxpQkFBWHRELEdBQXdCcUUsTUFBTUMsUUFBUXRFLEtBQTZMaTNDLEdBQVUsR0FDdFBqM0MsRUFBU0EsRUFBT3NELEtBR3BCLE1BQU9rQyxHQUNQK3BELEVBQVUvckQsRUFBRWdDLEdBQ1osUUFDQStwRCxFQUFVMXJELElBR1osT0FBTzdELEksNEJDbkNULElBQ0lvakQsRUFEVyxFQUFRLE1BQ0VBLFVBa0d6QnRqRCxFQUFPQyxRQWhHUCxTQUFTeWlELEVBQWVnTixFQUFxQkMsRUFBWUMsR0FFdkQsSUFBSUMsRUFBaUIsS0FFd0IsTUFBekNGLEVBQVdHLEtBQUtDLHdCQUNsQkYsRUFBaUJGLEVBQVdHLEtBQUtFLFFBR25DLElBQUlDLEVBQWVOLEVBQVdPLGdCQUFnQk4sR0FDMUM1SyxFQUFVaUwsRUFBYWpMLFFBQ3ZCQyxFQUFjZ0wsRUFBYWhMLFlBQzNCQyxFQUFhK0ssRUFBYS9LLFdBQzFCaUwsRUFBbUIsR0FDbkJDLEVBQXVCLEdBRVosTUFBWHBMLEdBQ3FCcm1ELE9BQU9rQixLQUFLbWxELEdBQ2xCeC9DLFNBQVEsU0FBVTZxRCxHQUNqQyxJQUFJQyxFQUF3QnRMLEVBQVFxTCxHQUNoQ0UsRUFBNkJELEVBQXNCQywyQkFDbkR6Z0QsRUFBVXdnRCxFQUFzQnhnRCxRQUNoQzBnRCxFQUFhRixFQUFzQkUsV0FDbkM1YSxFQUFZMGEsRUFBc0IxYSxVQUNsQ3JDLEVBQWNtYyxFQUFvQmUsZUFBZUYsR0FDckRKLEVBQWlCRSxHQUFpQi9NLEVBQVUvUCxFQUFhaWQsRUFBWTVhLEVBQVcsQ0FDOUU0SCxZQUFhMXRDLGFBQXlDLEVBQVNBLEVBQVEwdEMsWUFDdkVrVCxtQkFBb0I1Z0QsYUFBeUMsRUFBU0EsRUFBUTRnRCxtQkFDOUVDLGlCQUFrQixrQkFDakJKLE1BSVksTUFBZnRMLEdBQ3dCdG1ELE9BQU9rQixLQUFLb2xELEdBQ2xCei9DLFNBQVEsU0FBVW9yRCxHQUNwQyxJQUFJQyxFQUF3QjVMLEVBQVkyTCxHQUV4QyxHQUE2QixNQUF6QkMsRUFBSixDQUlBLElBQUlDLEVBQW1CRCxFQUFzQmxCLFdBQ3pDb0IsRUFBZUYsRUFBc0JqQixpQkFDekNRLEVBQXFCUSxHQUFzQmxPLEVBQWVnTixFQUFxQm9CLEVBQWtCQyxPQUlyRyxJQUFJQyxHQUFhLEVBQ2pCLE1BQU8sQ0FDTHpjLFFBQVMsV0FDSHljLElBSW9CLE1BQXBCYixHQUNGeHhELE9BQU9zeUQsT0FBT2QsR0FBa0IzcUQsU0FBUSxTQUFVbTRDLElBRWhEdVQsRUFEbUJ2VCxFQUFLcEosY0FLQSxNQUF4QjZiLEdBQ0Z6eEQsT0FBT3N5RCxPQUFPYixHQUFzQjVxRCxTQUFRLFNBQVUyNUMsSUFFcEQrUixFQURtQi9SLEVBQU01SyxjQUs3QnljLEdBQWEsSUFFZi9MLFlBQWFtTCxFQUNibEwsV0FBWUEsUUFBK0NBLEVBQWEsS0FDeEVILGFBQWMsV0FDWixJQUdNb00sRUFIRjl1RCxFQUFZc3RELEVBQVdHLEtBQUtDLHNCQUVoQyxHQUFpQixNQUFiMXRELEVBSUYsTUFEQXd0RCxFQUF3RCxRQUF0Q3NCLEVBQWtCdEIsU0FBZ0QsSUFBcEJzQixFQUE2QkEsRUFBa0J4QixFQUFXRyxLQUFLRSxPQUtqSSxPQUFPM3RELEdBSVQsaUJBQ0UsT0FBTzJ1RCxHQUdUaE0sUUFBU21MLEVBQ1RoTCxhQUFjd0ssRUFBV0csS0FBS3NCLGlCLDRCQy9GbEMsSUFFSXhmLEVBRnlCLEVBQVEsS0FFaEJELENBQXVCLEVBQVEsT0FFaERILEVBQVEsRUFBUSxNQUVoQjJGLEVBQVksRUFBUSxNQUlwQjlCLEdBRlUsRUFBUSxNQUVQLEVBQVEsT0FDbkJnYyxFQUEyQmhjLEVBQVNnYyx5QkFDcENDLEVBQWdCamMsRUFBU2ljLGNBQ3pCaGMsRUFBNEJELEVBQVNDLDBCQUNyQ0MsRUFBYUYsRUFBU0UsV0FDdEJnYyxFQUF1QmxjLEVBQVNrYyxxQkFDaENsYSxFQUFhaEMsRUFBU2dDLFdBQ3RCbWEsRUFBb0JuYyxFQUFTbWMsa0JBQzdCQyxFQUFvQnBjLEVBQVMzRCxXQUFXK2Ysa0JBRXhDQyxFQUFtQixLQUNuQkMsRUFBVyxPQStSZjN4RCxFQUFPQyxRQUFVLENBQ2ZxakQsVUFuUkYsU0FBbUIvUCxFQUFhcWUsRUFBb0JoYyxFQUFXOWxDLEVBQVN5Z0QsR0FDdEUsSUFBSXNCLEVBQXdCQyxFQUErQ0MsRUFJYSxRQUF2RkYsRUFBeUJyZ0IsRUFBTTNtQywwREFBMkYsSUFBM0JnbkQsR0FBMEgsUUFBNUVDLEVBQXlCRCxFQUF1QnoxQiw4QkFBK0QsSUFBM0IwMUIsR0FBNkNBLEVBQXVCbDVDLFFBV3RTKzRDLElBQ0EsSUFPSUssRUF3QkFDLEVBcUVBQyxFQW9FQW5TLEVBQ0FvUyxFQUNBQyxFQTFLQTVVLEVBQWlILFFBQWxHdVUsRUFBdUJqaUQsYUFBeUMsRUFBU0EsRUFBUTB0QyxtQkFBa0QsSUFBekJ1VSxFQUFrQ0EsRUFBdUIsbUJBQ2xMckIsR0FBcUIsRUFBSTllLEVBQXdCLFVBQUcsRUFBSUEsRUFBd0IsU0FBRyxHQUFJOWhDLGFBQXlDLEVBQVNBLEVBQVE0Z0Qsb0JBQXFCLEdBQUksQ0FDNUs5VyxPQUFPLElBTUx5WSxHQUEwQixFQUUxQkMsRUFBMkIsU0FBa0N4YyxFQUFXeWMsR0FFMUUsT0FEQUYsR0FBMEIsRUFDbkI5ZSxFQUFZaWYsa0JBQWtCLENBQ25DMWMsVUFBV0EsRUFDWDMyQyxPQUFRb3pELEtBYVJFLEVBQW1CLElBQUluQixFQUN2Qm9CLEVBQXFCcmIsRUFBV3RZLFFBQU8sU0FBVWdiLEdBQ25ELE9BQU8wWSxFQUFpQmowQixVQUFVdWIsTUFHaEM0WSxFQUFlLEtBS2ZDLEdBQXdCLEVBRXhCQyxFQUFxQixTQUE0QjlTLEdBUW5ELElBQUkrUyxFQURKRixHQUF3QixFQUV4QixJQUFJRyxFQUFVLElBQUl6QixFQUVsQixJQUE2RCxJQUF6REUsRUFBa0J3QixtQ0FBNkMsQ0FnQmpFLElBQUlwSSxFQUFhLHVCQUF5QjJHLEVBQXFCeFIsRUFBUW5LLEdBQ3ZFa2QsRUFBYXJCLEVBQWtCbGUsRUFBYXFYLEdBQVksV0FFdEQsT0FEY3JYLEVBQVkwZixhQUNYelcsUUFBUXVELEVBQVFuSyxFQUFXOGEsV0FJNUNvQyxFQURjdmYsRUFBWTBmLGFBQ0x6VyxRQUFRdUQsRUFBUW5LLEVBQVc4YSxHQUdsRCxJQVlJOVksRUFad0JrYixFQUFXdDBCLFVBQVUsQ0FDL0N4NkIsTUFBTyxTQUFlMEIsR0FDcEJpdEQsRUFBZWp0RCxFQUNmcXRELEVBQVEvdUQsTUFBTTBCLElBRWhCbXdCLEtBQU0sU0FBYzVTLEdBQ2xCOHZDLEVBQVFsOUIsS0FBSzVTLElBRWYwMEIsU0FBVSxXQUNSb2IsRUFBUXBiLGNBRzRCQyxZQUd4QyxPQURBcWEsRUFBZ0NyYSxFQUN6QlAsRUFBV3RZLFFBQU8sU0FBVWdiLEdBQ2pDLElBQUltWixFQUFzQkgsRUFBUXYwQixVQUFVdWIsR0FDNUMsT0FBTyxXQUNMbVosRUFBb0J0YixjQUNwQnFhLFNBT0ZrQixFQUFpQixTQUF3QnJkLEVBQVdzZCxJQUNPLElBQXpENUIsRUFBa0J3QixxQ0FTcEJKLEdBQXdCLEdBaUIxQixJQUFJUyxFQUF3QjVCLEVBQWtCbGUsRUFBYXVDLEVBQVVDLFFBQVE2VSxXQUFZd0ksR0FBUzUwQixVQUFVLENBQzFHeDZCLE1BQU8sU0FBZTBCLEdBQ3BCK3NELEVBQWlCenVELE1BQU0wQixJQUV6Qm13QixLQUFNLFNBQWM1UyxHQUNsQnd2QyxFQUFpQjU4QixLQUFLNVMsSUFFeEIwMEIsU0FBVSxXQUNSOGEsRUFBaUI5YSxjQUlyQnVhLEVBQTJCbUIsRUFBc0J6YixhQUcvQzBiLEVBQThCLFNBQXFDQyxHQUNyRSxJQUFJemQsRUFBWVIsRUFBMEJpZSxFQUFpQjNkLEVBQVc4YSxHQUN0RXNCLEVBQWtCemUsRUFBWWtELE9BQU9YLEdBRWpCLGVBQWhCMEgsSUFPOEIscUJBQWhCQSxHQUE4RSxjQUF4Q2pLLEVBQVk2QyxNQUFNTixHQUFXMkgsU0FHbkYwVixFQUFlcmQsR0FBVyxXQUd4QixJQUFJeWMsRUFBb0JNLEVBQW1CVSxFQUFnQnhULFFBRTNELE9BRHdCdVMsRUFBeUJ4YyxFQUFXeWMsT0FVbEUsR0FBZ0MsK0JBQTVCWCxFQUFtQnhQLEtBQXVDLENBSzlDLFFBRGRnUSxHQUZBclMsRUFEaUM2UixFQUNHN1IsUUFFbEJ2aEMsS0FDZ0syNEIsR0FBVSxHQUU1TCxJQUFJcWMsRUFBVW5DLEVBQXlCdGpELElBQUlxa0QsR0FFM0MsR0FBZSxNQUFYb0IsRUFDRkYsRUFBNEJFLE9BQ3ZCLENBUUwsSUFBSWpCLEVBQW9DLGVBQWhCL1UsRUFBK0IsS0FBT3FWLEVBQW1COVMsR0FFN0UwVCxFQUF3QnBDLEVBQXlCcUMsT0FDckR0QixHQUFTLFNBQVV1QixHQUNqQnhCLElBQ0EsSUFBSXJjLEVBQVlSLEVBQTBCcWUsRUFBaUIvZCxFQUFXOGEsR0FDdEVzQixFQUFrQnplLEVBQVlrRCxPQUFPWCxHQUVaLE1BQXJCeWMsR0FDRlksRUFBZXJkLEdBQVcsV0FDeEIsT0FBT3djLEVBQXlCeGMsRUFBV3ljLFNBS2pESixFQUF1QnNCLEVBQXNCbGYsYUFFMUMsQ0FDTCxJQUNJd0IsRUFBVVIsRUFEVXFjLEdBR3hCUSxFQUE0QixPQUQ1QnJTLEVBQVNoSyxFQUFRZ0ssUUFDQVcsUUFBa0JYLEVBQU9XLFFBQVVYLEVBQU92aEMsR0FDM0Q4MEMsRUFBNEJ2ZCxHQUc5QixJQUFJaWIsR0FBYSxFQUNqQixNQUFPLENBQ0w1TyxLQUFNLGlCQUNON08sWUFBYUEsRUFDYmdkLDJCQUE0QkEsRUFDNUJoYyxRQUFTLFdBQ0h5YyxJQUlBcUIsRUFDRkgsR0FBNEJBLElBRTVCRCxHQUFpQ0EsSUFHbkNELEdBQW1CQSxFQUFnQnpkLFVBQ25DNGQsR0FBd0JBLElBQ3hCbkIsR0FBYSxJQUVmVyxTQUFVQSxFQUNWbnpDLEdBQUk0ekMsRUFHSixpQkFDRSxPQUFPcEIsR0FJVCxtQkFDRSxPQUFPMkIsR0FHVC93RCxLQUFNbStDLEVBQU9uK0MsS0FDYjh1RCxtQkFBb0JBLEVBQ3BCbFQsWUFBYUEsRUFDYnIrQyxPQUFReXpELEVBQXdCRixPQUFxQnp1RCxFQUNyRDJ4QyxVQUFXQSxJQU1iZ2UsMEJBL1JGLFdBRUksSUFBSWxQLEVBQXVCbVAsRUFESixPQUFyQm5DLElBS0ZBLEVBQ3VGLFFBQXRGaE4sRUFBd0JsVCxFQUFNM21DLDBEQUEwRixJQUExQjY1QyxHQUF3SCxRQUEzRW1QLEVBQXlCblAsRUFBc0J0b0IsOEJBQStELElBQTNCeTNCLE9BQTdGLEVBQTBJQSxFQUF1Qmo3QyxZLDRCQzdCdlMsSUFFSTIyQyxFQUZ5QixFQUFRLEtBRUg1ZCxDQUF1QixFQUFRLE9BRTdEK1EsRUFBaUIsRUFBUSxNQUV6Qm9SLEVBQWtCLEVBQVEsTUFHMUJGLEVBRFcsRUFBUSxNQUNrQkEsMEJBRXJDRyxFQUFZLEVBQVEsTUFDcEIvekIsRUFBYyt6QixFQUFVL3pCLFlBQ3hCdkIsRUFBWXMxQixFQUFVdDFCLFVBQ3RCNkIsRUFBU3l6QixFQUFVenpCLE9BQ25CaEMsRUFBV3kxQixFQUFVejFCLFNBRXJCMDFCLEVBQXNDLENBQ3hDNVIsS0FBTSwyQkFnS1JwaUQsRUFBT0MsUUE3SlAsU0FBMkJ5dkQsRUFBcUJDLEVBQVk3L0MsR0FDMUQsSUFBSW1rRCxFQUF1QkMsRUFBd0JDLEVBQXdCQyxFQXFCM0VSLElBQ0EsSUFBSVMsRUFBNlIsUUFBdlBKLEVBQXdCbmtELFNBQTBILFFBQXZFb2tELEVBQXlCcGtELEVBQVF3a0Qsd0NBQXlFLElBQTNCSixPQUF6RixFQUFzSUEsRUFBdUJwUCwyQkFBMkQsSUFBMUJtUCxFQUFtQ0EsRUFBd0JELEVBQ2hXTyxFQUF3UixRQUFyUEosRUFBeUJya0QsU0FBMEgsUUFBdkVza0QsRUFBeUJ0a0QsRUFBUXdrRCx3Q0FBeUUsSUFBM0JGLE9BQXpGLEVBQXNJQSxFQUF1QnhFLHdCQUF5RCxJQUEzQnVFLEVBQW9DQSxFQUF5QixLQUM3VkssRUFBZVYsSUFDZlcsRUFBb0NuMEIsRUFBTyxJQUFJLzNCLElBQUksQ0FBQzhyRCxLQUVwREssRUFBWXAyQixFQUFTKzFCLEdBQ3JCdlAsRUFBc0I0UCxFQUFVLEdBQ2hDQyxFQUF5QkQsRUFBVSxHQUVuQ0UsRUFBYXQyQixFQUFTaTJCLEdBQ3RCM0UsRUFBbUJnRixFQUFXLEdBQzlCQyxFQUFzQkQsRUFBVyxHQUVqQ0UsRUFBb0I5MEIsR0FBWSxXQUNsQyxHQUFJdzBCLEVBQWE1N0MsUUFBUyxDQUN4QixJQUFJbThDLEVBQTBCLENBQzVCM1MsS0FBTSwyQkFFUnFTLEVBQWtDNzdDLFFBQVFqUSxJQUFJb3NELEdBQzlDSixFQUF1QkksTUFFeEIsQ0FBQ0osRUFBd0JILElBQ3hCUSxFQUEyQmgxQixHQUFZLFNBQVUrZixHQUNuRCxHQUFJeVUsRUFBYTU3QyxRQUFTLENBQ3hCLElBQUlxOEMsRUFBNkJ2UyxFQUFlZ04sRUFBcUJDLEVBQVk1UCxHQUNqRjBVLEVBQWtDNzdDLFFBQVFqUSxJQUFJc3NELEdBQzlDTixFQUF1Qk0sR0FDdkJKLEVBQW9COVUsTUFFckIsQ0FBQzJQLEVBQXFCQyxFQUFZZ0YsRUFBd0JILElBQ3pEVSxFQUEyQjUwQixHQUFPLEdBcUd0QyxPQXBHQTdCLEdBQVUsV0FDUixPQUFPLFdBUUx5MkIsRUFBeUJ0OEMsU0FBVSxLQUVwQyxJQUNINmxCLEdBQVUsV0FDUixJQUF5QyxJQUFyQ3kyQixFQUF5QnQ4QyxRQWdCM0IsT0FOQXM4QyxFQUF5QnQ4QyxTQUFVLE9BRUYsNEJBQTdCa3NDLEVBQW9CMUMsTUFBMEQsTUFBcEJ3TixHQUM1RG9GLEVBQXlCcEYsSUF5QjdCLElBQUl1RixFQUFpQ1YsRUFBa0M3N0MsUUFFdkUsR0FBSTQ3QyxFQUFhNTdDLFFBQVMsQ0FDeEIsSUFDSTQyQyxFQURBQyxHQUFZLEVBQUlGLEVBQXFDLFNBQUc0RixHQUc1RCxJQUNFLElBQUsxRixFQUFVenBELE1BQU93cEQsRUFBUUMsRUFBVXJxRCxLQUFLKzBCLE1BQU8sQ0FDbEQsSUFBSWk3QixFQUFnQzVGLEVBQU1oaEQsTUFFMUMsR0FBSTRtRCxJQUFrQ3RRLEVBQ3BDLE1BR0ZxUSxFQUF1QyxPQUFFQyxHQUVFLDRCQUF2Q0EsRUFBOEJoVCxNQUNoQ2dULEVBQThCN2dCLFdBR2xDLE1BQU83dUMsR0FDUCtwRCxFQUFVL3JELEVBQUVnQyxHQUNaLFFBQ0ErcEQsRUFBVTFyRCxRQUdiLENBQUMrZ0QsRUFBcUI4SyxFQUFrQm9GLEVBQTBCUixJQUNyRS8xQixHQUFVLFdBQ1IsT0FBTyxXQUdMLElBQ0k0MkIsRUFEQUMsR0FBYSxFQUFJL0YsRUFBcUMsU0FBR2tGLEVBQWtDNzdDLFNBRy9GLElBQ0UsSUFBSzA4QyxFQUFXdHZELE1BQU9xdkQsRUFBU0MsRUFBV2x3RCxLQUFLKzBCLE1BQU8sQ0FDckQsSUFBSW83QixFQUF1QkYsRUFBTzdtRCxNQUVBLDRCQUE5QittRCxFQUFxQm5ULE1BQ3ZCbVQsRUFBcUJoaEIsV0FHekIsTUFBTzd1QyxHQUNQNHZELEVBQVc1eEQsRUFBRWdDLEdBQ2IsUUFDQTR2RCxFQUFXdnhELFFBR2QsSUFDSSxDQUE4Qiw0QkFBN0IrZ0QsRUFBb0IxQyxLQUFxQyxLQUFPMEMsRUFBcUJrUSxFQUEwQkYsSyw0QkMvS3pILElBQUl6ZixFQUFXLEVBQVEsTUFDbkJyVixFQUFjcVYsRUFBU3JWLFlBQ3ZCdkIsRUFBWTRXLEVBQVM1VyxVQUNyQjZCLEVBQVMrVSxFQUFTL1UsT0E2Q3RCdGdDLEVBQU9DLFFBL0JQLFdBQ0UsSUFBSXUxRCxFQUFrQmwxQixFQUFPLE1BQ3pCbTFCLEVBQWdCbjFCLEdBQU8sR0FDdkJvMUIsRUFBZTExQixHQUFZLFdBQ0UsTUFBM0J3MUIsRUFBZ0I1OEMsVUFDbEI0OEMsRUFBZ0I1OEMsUUFBUWcvQixjQUN4QjRkLEVBQWdCNThDLFFBQVUsTUFHNUI2OEMsRUFBYzc4QyxTQUFVLElBQ3ZCLElBQ0MrOEMsRUFBYTMxQixHQUFZLFNBQVU2WCxHQUNyQzJkLEVBQWdCNThDLFFBQVVpL0IsRUFDMUI0ZCxFQUFjNzhDLFNBQVUsSUFDdkIsSUFDQ2c5QyxFQUFnQjUxQixHQUFZLFdBQzlCdzFCLEVBQWdCNThDLFFBQVUsS0FDMUI2OEMsRUFBYzc4QyxTQUFVLElBQ3ZCLElBS0gsT0FIQTZsQixHQUFVLFdBQ1IsT0FBT2kzQixJQUNOLENBQUNBLElBQ0csQ0FDTEQsY0FBZUEsRUFDZkUsV0FBWUEsRUFDWkQsYUFBY0EsRUFDZEUsY0FBZUEsSyw0QkM1Q25CLElBQUlDLEVBQWtCLEVBQVEsTUFFMUJDLEVBQStCLEVBQVEsTUFHdkNsQyxFQURXLEVBQVEsTUFDa0JBLDBCQU1yQ25TLEdBSlksRUFBUSxNQUNNbGhCLGNBRWQsRUFBUSxNQUNJa2hCLGFBdUI1QnpoRCxFQUFPQyxRQXJCUCxTQUFxQjgxRCxFQUFlOVQsR0FHbEMyUixJQUNBLElBQUk1UixFQUFlUCxFQUFZc1UsR0FjL0IsT0FiQUQsRUFBNkI5VCxFQUFjLG1DQUVwQjZULEVBQWdCN1QsRUFBY0MsRUFBYSxpQkFDdENoL0IsTyw0QkNyQjlCLElBQUlrZ0MsRUFBc0IsRUFBUSxNQUs5QndHLEdBSFUsRUFBUSxNQUVQLEVBQVEsTUFDMEJBLG1DQUU3Q29LLEVBQVksRUFBUSxNQUNwQnQxQixFQUFZczFCLEVBQVV0MUIsVUFDdEI2QixFQUFTeXpCLEVBQVV6ekIsT0FDbkJoQyxFQUFXeTFCLEVBQVV6MUIsU0FHckJtbkIsRUFEWSxFQUFRLE1BQ2NBLHNCQTZFdEN6bEQsRUFBT0MsUUEzRVAsU0FBeUIraEQsRUFBY0MsRUFBYXFFLEdBQ2xELElBQUkvUyxFQUFjNFAsSUFDZDZTLEVBQW1Cck0sRUFBa0NwVyxHQUNyRGloQixFQUFlbDBCLEdBQU8sR0FHdEIyVixFQURZM1gsRUFBUyxHQUNHLEdBRXhCbW9CLEVBQXFCaEIsRUFBc0J6RCxFQUFjQyxHQUV6RGlGLEVBQWlCOE8sRUFBaUJ4UCxtQkFBbUJ4RSxFQUFjQyxFQUFhd0UsRUFBb0JILEdBQ3BHMlAsRUFBMkIzMUIsR0FBTyxHQWV0QyxTQUFTNDFCLEtBQ3NCLElBQXpCMUIsRUFBYTU3QyxVQUEwRCxJQUFyQ3E5QyxFQUF5QnI5QyxTQU8vRHE5QixHQUFZLFNBQVU0QyxHQUNwQixPQUFPQSxFQUFRLEtBZ0NuQixPQXZCQXBhLEdBQVUsV0FDUisxQixFQUFhNTdDLFNBQVUsRUFDdkIsSUFBSXl2QyxFQUFhMk4sRUFBaUJ4M0IsVUFBVTBvQixFQUFnQmdQLEdBQzVELE9BQU8sV0FLTDFCLEVBQWE1N0MsU0FBVSxFQUN2Qnl2QyxFQUFXOVQsYUFJWixDQUFDaEIsRUFBYWtULElBVVYsQ0FFTHhqQyxLQUFNaWtDLEVBQWVqa0MsS0FDckJrekMsb0JBaERGLFdBQ0VGLEVBQXlCcjlDLFNBQVUsR0FnRG5DdzlDLG1CQTFERixXQUNFSCxFQUF5QnI5QyxTQUFVLEVBQ2RvOUMsRUFBaUJyTyxtQkFBbUJULEdBQWdCLElBR3ZFZ1AsUSw0QkNqQ04sSUFBSTdnQixFQUFXLEVBQVEsTUFDbkI1VyxFQUFZNFcsRUFBUzVXLFVBQ3JCNkIsRUFBUytVLEVBQVMvVSxPQWF0QnRnQyxFQUFPQyxRQVhQLFdBQ0UsSUFBSXUwRCxFQUFlbDBCLEdBQU8sR0FPMUIsT0FOQTdCLEdBQVUsV0FFUixPQURBKzFCLEVBQWE1N0MsU0FBVSxFQUNoQixXQUNMNDdDLEVBQWE1N0MsU0FBVSxLQUV4QixJQUNJNDdDLEksNEJDYlQsSUFBSWhqQixFQUFRLEVBQVEsTUFFaEIyRixFQUFZLEVBQVEsTUFFcEJnTSxFQUFzQixFQUFRLE1BRTlCOU4sRUFBVyxFQUFRLE1BQ25CZ2hCLEVBQWdDaGhCLEVBQVMzRCxXQUFXMmtCLDhCQUNwRDllLEVBQWNsQyxFQUFTa0MsWUFFdkI5WSxFQUFZK1MsRUFBTS9TLFVBQ2xCSCxFQUFXa1QsRUFBTWxULFNBQ2pCOEIsRUFBVW9SLEVBQU1wUixRQTJDcEJwZ0MsRUFBT0MsUUF6Q1AsU0FBa0MraEQsRUFBY0MsR0FDOUMsSUFBSTFPLEVBQWM0UCxJQUNkMlAsRUFBYTF5QixHQUFRLFdBQ3ZCLElBQUk4aEIsRUFBVzNLLEVBQVl5SyxFQUFjQyxHQUV6QyxPQUFnQixNQUFaQyxFQUNLLE1BR1csMkJBQWxCQSxFQUFTRSxNQUFpS2pMLEdBQVUsR0FDL0trZixFQUE4QjlpQixFQUFhMk8sRUFBU0ksVUFDMUQsQ0FBQy9PLEVBQWF5TyxFQUFjQyxJQUUzQnlTLEVBQVlwMkIsRUFBdUIsTUFBZHcwQixHQUNyQndELEVBQVc1QixFQUFVLEdBQ3JCNkIsRUFBYzdCLEVBQVUsR0F1QjVCLE9BckJBajJCLEdBQVUsV0FDUixJQUFJb1osRUFHSixHQUZBMGUsRUFBMEIsTUFBZHpELEdBRU0sTUFBZEEsRUFBb0IsQ0FDdEIsSUFBSTBELEVBQW9CLFdBQ3RCRCxHQUFZLElBR2QxZSxFQUFlaWIsRUFBV3QwQixVQUFVLENBQ2xDbVosU0FBVTZlLEVBQ1Z4eUQsTUFBT3d5RCxJQUlYLE9BQU8sV0FDRDNlLEdBQ0ZBLEVBQWFELGlCQUdoQixDQUFDa2IsSUFDR3dELEksNEJDbkRULElBQUlHLEVBQXVCLEVBQVEsTUFFL0JDLEVBQTZCLEVBQVEsTUFFckN2VCxFQUFzQixFQUFRLE1BRzlCeVEsRUFEVyxFQUFRLE1BQ2tCQSwwQkFHckMzVyxFQURZLEVBQVEsTUFDR3ZMLFdBQVd1TCxXQXFCdENqOUMsRUFBT0MsUUFuQlAsU0FBMEIwMkQsRUFBVS9nQixFQUFXOWxDLEdBRzdDOGpELElBQ0EsSUFBSXJnQixFQUFjNFAsSUFDZHhOLEVBQVErZ0IsRUFBMkJDLEVBQVUvZ0IsRUFBVzlsQyxHQUFXQSxFQUFRNGdELG1CQUFxQjVnRCxFQUFRNGdELG1CQUFxQixDQUMvSDlXLE9BQU8sSUFVVCxPQVJXNmMsRUFBcUIsQ0FDOUJuUSxxQkFBc0IscUJBQ3RCcUwsU0FBVTdoRCxhQUF5QyxFQUFTQSxFQUFRNmhELFNBQ3BFcEYsZ0JBQWlCdFAsRUFBVzFKLEVBQWFvQyxHQUN6QzZILFlBQWExdEMsYUFBeUMsRUFBU0EsRUFBUTB0QyxZQUN2RTdILE1BQU9BLEVBQ1A4VSxhQUFjMzZDLGFBQXlDLEVBQVNBLEVBQVE4bUQsMEIsNEJDMUI1RSxJQUFJL1IsRUFBa0IsRUFBUSxNQUUxQnJULEVBQVEsRUFBUSxNQUVoQnFsQixFQUFzQixFQUFRLE1BRTlCaEIsRUFBa0IsRUFBUSxNQUUxQjFTLEVBQXNCLEVBQVEsTUFFOUI5TixFQUFXLEVBQVEsTUFDbkI0WSxFQUFpQzVZLEVBQVM0WSwrQkFDMUM1RCxFQUEwQmhWLEVBQVNnVix3QkFFbkNwcUIsRUFBYXVSLEVBQU12UixXQUNuQnhCLEVBQVkrUyxFQUFNL1MsVUFDbEJILEVBQVdrVCxFQUFNbFQsU0FDakJnQyxFQUFTa1IsRUFBTWxSLE9BNkVuQnRnQyxFQUFPQyxRQTNFUCxTQUE4QjA5QyxHQUM1QixJQUFJaEksRUFBUWdJLEVBQUtoSSxNQUNiMlEsRUFBdUIzSSxFQUFLMkkscUJBQzVCaUcsRUFBa0I1TyxFQUFLNE8sZ0JBQ3ZCL08sRUFBY0csRUFBS0gsWUFDbkJtVSxFQUFXaFUsRUFBS2dVLFNBQ2hCbEgsRUFBZTlNLEVBQUs4TSxhQUNwQmxYLEVBQWM0UCxJQUNkaUMsRUFBa0JubEIsRUFBVzRrQixHQUM3QmlTLEVBQWdCN0ksRUFBK0IxYSxHQUUvQ21oQixFQUFZcDJCLEVBQVMsR0FDckJ5NEIsRUFBaUJyQyxFQUFVLEdBQzNCemUsRUFBY3llLEVBQVUsR0FFeEJzQyxFQUF1QkgsSUFDdkJsQixFQUFhcUIsRUFBcUJyQixXQUNsQ0MsRUFBZ0JvQixFQUFxQnBCLGNBRXJDcEwsRUFBZSxHQUFHbm5ELE9BQU8wekQsRUFBZ0IsS0FBSzF6RCxPQUFPc3VELFFBQTJDQSxFQUFXLElBQzNHaEgsRUFBa0JOLEVBQXdCOVcsRUFBYW9DLEVBQU82SCxFQUFhaU4sRUFBY0QsR0FDekZ5TSxFQUFzQjdSLEVBQWdCK0UsMEJBQXlCLFdBQ2pFLE9BQU8yTSxFQUFjdEssc0JBQXNCN0IsRUFBaUJoVixFQUFPNFcsRUFBaUIvTyxFQUFhaU4sRUFBYyxDQUM3RzM5QixNQUFPNm9DLEVBQ1BoZSxTQUFVaWUsRUFDVjV4RCxNQUFPNHhELEdBQ054USxNQUVEOFAsRUFBMkI1MEIsR0FBTyxHQUN0QzdCLEdBQVUsV0FDUixPQUFPLFdBUUx5MkIsRUFBeUJ0OEMsU0FBVSxLQUVwQyxJQUNINmxCLEdBQVUsV0FDUixJQUF5QyxJQUFyQ3kyQixFQUF5QnQ4QyxRQWEzQixPQUpBczhDLEVBQXlCdDhDLFNBQVUsT0FDbkNxOUIsR0FBWSxTQUFVN3dDLEdBQ3BCLE9BQU9BLEVBQUksS0FLZixJQUFJaWpELEVBQWF5TyxFQUFjcmdCLE9BQU93Z0IsRUFBcUI3UixHQUMzRCxPQUFPLFdBQ0xpRCxFQUFXOVQsYUFLWixDQUFDaEIsRUFBYW9YLElBQ2pCLElBQUkzSSxFQUFlaVYsRUFBb0JqVixhQUNuQ0MsRUFBY2dWLEVBQW9CaFYsWUFLdEMsT0FIdUI0VCxFQUFnQjdULEVBQWNDLEVBQWFxRSxHQUN0Q3JqQyxPLDRCQ3pGOUIsSUFFSTJ1QixFQUZ5QixFQUFRLEtBRWhCRCxDQUF1QixFQUFRLE9BRWhEdWxCLEVBQXlCLEVBQVEsTUFFakNDLEVBQWlCLEVBQVEsTUFFekJoZ0IsRUFBWSxFQUFRLE1BRXBCMGYsRUFBc0IsRUFBUSxNQUU5Qi9DLEVBQWtCLEVBQVEsTUFFMUJzRCxFQUEyQixFQUFRLE1BRW5DalUsRUFBc0IsRUFBUSxNQUk5QjlOLEdBRlUsRUFBUSxNQUVQLEVBQVEsT0FDbkJyVixFQUFjcVYsRUFBU3JWLFlBQ3ZCdkIsRUFBWTRXLEVBQVM1VyxVQUNyQkgsRUFBVytXLEVBQVMvVyxTQUVwQnkxQixFQUFZLEVBQVEsTUFDcEIzYyxFQUFzQjJjLEVBQVUzYyxvQkFDaEM2RixFQUFhOFcsRUFBVXJpQixXQUFXdUwsV0FDbEMzSCxFQUE0QnllLEVBQVV6ZSwwQkFDdENpQyxFQUFjd2MsRUFBVXhjLFlBc0w1QnYzQyxFQUFPQyxRQXBMUCxTQUE2QmtFLEdBQzNCLElBQUl1MEMsRUFBWXYwQyxFQUFLdTBDLFVBQ2pCc0osRUFBZTc5QyxFQUFLNjlDLGFBQ3BCQyxFQUFjOTlDLEVBQUs4OUMsWUFDbkJ3RSxFQUFxQnRpRCxFQUFLc2lELG1CQUMxQjRRLEVBQWVsekQsRUFBS2t6RCxhQUNwQjVJLEVBQStCdHFELEVBQUtzcUQsNkJBQ3BDSixFQUFvQmxxRCxFQUFLa3FELGtCQUN6QkcsRUFBcUJycUQsRUFBS3FxRCxtQkFDMUJsSSxFQUF1Qm5pRCxFQUFLbWlELHFCQUM1QnhNLEVBQVczMUMsRUFBSzIxQyxTQUNoQndkLEVBQVVuekQsRUFBS216RCxRQUNmNUksRUFBa0J2cUQsRUFBS3VxRCxnQkFDdkJuYixFQUFjNFAsSUFFZDZULEVBQXVCSCxJQUN2QnBCLEVBQWdCdUIsRUFBcUJ2QixjQUNyQ0UsRUFBYXFCLEVBQXFCckIsV0FDbENELEVBQWVzQixFQUFxQnRCLGFBQ3BDRSxFQUFnQm9CLEVBQXFCcEIsY0FFckMyQixFQUFxQyxNQUFuQjdJLEdBQTJDLE1BQWhCMkksR0FBZ0QsaUJBQWpCQSxFQUE0QkEsRUFBYTNJLEdBQW1CLEtBQ3hJOEYsRUFBZVYsSUFFZlksRUFBWXAyQixFQUFTaVYsR0FDckJpa0IsRUFBc0I5QyxFQUFVLEdBQ2hDK0MsRUFBeUIvQyxFQUFVLEdBRW5DRSxFQUFhdDJCLEVBQVNtb0IsR0FDdEJpUixFQUE2QjlDLEVBQVcsR0FDeEMrQyxFQUFnQy9DLEVBQVcsR0FFM0NnRCxFQUFzQlIsRUFBeUJwVixFQUFjQyxJQUMvQzFPLElBQWdCaWtCLEdBQXVCL1EsSUFBdUJpUixLQUc5RWhDLElBQ0E0QixJQUNBRyxFQUF1QmxrQixHQUN2Qm9rQixFQUE4QmxSLElBR2hDLElBQUlvUixFQXlGTixTQUE0Qm5mLEVBQVdzSixFQUFjcVYsRUFBYzVJLEdBQ2pFLElBQUlxSixFQUFzQkMsRUFFdEI3ZCxFQUF3QjlDLEVBQW9CcnBDLE1BQzVDdXRDLEVBQVFwQixFQUFzQm9CLE1BQzlCQyxFQUFZckIsRUFBc0JxQixVQUNsQ0MsRUFBZ0J0QixFQUFzQnNCLGNBQ3RDQyxFQUFnQnZCLEVBQXNCdUIsY0FDdEN0QixFQUFhRCxFQUFzQkMsV0FDbkNDLEVBQWVGLEVBQXNCRSxhQUVyQy9CLEVBQWE4ZSxFQUFlRSxFQUFjNUksR0FFOUMsR0FBa0IsTUFBZHBXLEVBQ0YsTUFBTyxDQUNMZ0IsT0FBUSxLQUNSRCxTQUFTLEdBSVcsaUJBQWZmLEdBQStRbEIsR0FBVSxHQUNsUyxJQUFJdUUsRUFBUXJELEVBQVdpRCxHQUNuQkssRUFBV3RELEVBQVdrRCxHQUUxQixHQUFhLE1BQVRHLEdBQTZCLE1BQVpDLEVBQ25CLE1BQU8sQ0FDTHRDLE9BQVEsS0FDUkQsU0FBUyxHQUlaNzBDLE1BQU1DLFFBQVFrM0MsSUFBd012RSxHQUFVLEdBQzNNLGlCQUFid0UsR0FBd054RSxHQUFVLEdBQzNPLElBQUlrQyxFQUF1QixZQUFkWCxFQUE0RSxRQUFqRG9mLEVBQXVCbmMsRUFBU3hCLFVBQWtELElBQXpCMmQsRUFBa0NBLEVBQXVCLEtBQTRELFFBQXBEQyxFQUF3QnBjLEVBQVN2QixVQUFxRCxJQUExQjJkLEVBQW1DQSxFQUF3QixLQVV6UixPQVRhLE9BQVgxZSxHQUFxQyxpQkFBWEEsR0FBcU9sQyxHQUFVLEdBU3BRLENBQ0xrQyxPQUFRQSxFQUNSRCxRQVJnQixZQUFkVixFQUNrQixNQUFWVyxJQUE4QyxJQUE1QnNDLEVBQVNILEdBRWpCLE1BQVZuQyxJQUE4QyxJQUE1QnNDLEVBQVNGLElBaklidWMsQ0FBbUJ0ZixFQUFXc0osRUFBY3FWLEVBQWM1SSxHQUNoRnBWLEVBQVN3ZSxFQUFvQnhlLE9BQzdCRCxFQUFVeWUsRUFBb0J6ZSxRQW9GbEMsT0FqRkEzYSxHQUFVLFdBQ1IsT0FBTyxXQUNMaTNCLE9BRUQsQ0FBQ0EsSUE2RUcsQ0E1RVExMUIsR0FBWSxTQUFVNlksRUFBTy9vQyxHQUUxQyxJQUFJbW9ELEVBQWFub0QsYUFBeUMsRUFBU0EsRUFBUW1vRCxXQUUzRSxJQUE2QixJQUF6QnpELEVBQWE1N0MsUUFJZixNQUFPLENBQ0wyN0IsUUFBUyxjQUliLElBQUl1UyxFQUFtQnZQLEVBQVl5SyxFQUFjQyxHQUVqRCxJQUE4QixJQUExQndULEVBQWM3OEMsU0FBb0MsTUFBaEJ5K0MsR0FBd0JPLEVBUzVELE9BSklLLEdBQ0ZBLEVBQVcsTUFHTixDQUNMMWpCLFFBQVMsZUFJUyxNQUFwQnVTLEdBQXNELHlCQUExQkEsRUFBaUIxRSxPQUE0U2pMLEdBQVUsR0FDclcsSUFBSStnQixFQUFrQnBSLEVBQWlCeEUsTUFBTTFNLFVBQ3pDbUcsRUFBb0IrSyxFQUFpQmxSLFVBQ3JDa1osRUFBaUJoL0MsYUFBeUMsRUFBU0EsRUFBUXFvRCx3QkFFM0V0SixHQUFnQixFQUFJamQsRUFBd0IsVUFBRyxFQUFJQSxFQUF3QixTQUFHLEdBQUlzbUIsR0FBa0JuYyxHQUNwR3FULEVBQXNCOEgsRUFBdUJ4ZSxFQUFXRyxFQUFPUSxFQUFRd1YsR0FDM0UsRUFBSWpkLEVBQXdCLFNBQUcsR0FBSWtkLEdBQWlCTixHQUc3QixNQUFuQkUsSUFRRlUsRUFBb0I1d0MsR0FBSys0QyxHQUczQixJQUFJYSxFQUFrQjlpQixFQUEwQitZLEVBQW1CZSxFQUFxQixDQUN0RnhWLE9BQU8sSUFrQlQsT0FoQkFxRCxFQUFXMUosRUFBYTZrQixHQUFpQjU1QixXQUFVLEVBQUlvVCxFQUF3QixVQUFHLEVBQUlBLEVBQXdCLFNBQUcsR0FBSWtJLEdBQVcsR0FBSSxDQUNsSWh0QixNQUFPLFNBQWUrcUIsR0FDcEI4ZCxFQUFXOWQsR0FDWGlDLEVBQVNodEIsT0FBU2d0QixFQUFTaHRCLE1BQU0rcUIsSUFFbkNGLFNBQVUsV0FDUmllLElBQ0E5YixFQUFTbkMsVUFBWW1DLEVBQVNuQyxXQUM5QnNnQixHQUFjQSxFQUFXLE9BRTNCajBELE1BQU8sU0FBZW82QyxHQUNwQndYLElBQ0E5YixFQUFTOTFDLE9BQVM4MUMsRUFBUzkxQyxNQUFNbzZDLEdBQ2pDNlosR0FBY0EsRUFBVzdaLE9BR3RCLENBQ0w3SixRQUFTbWhCLEtBS2IsQ0FBQ25pQixFQUFhZ2tCLEVBQWlCN2UsRUFBV1csRUFBUXNjLEVBQVlELEVBQWNFLEVBQWVILEVBQWVtQyxFQUFxQlAsRUFBY3JWLEVBQWFwZ0QsS0FBTXFnRCxFQUFhcUUsSUFDM0psTixFQUFTc2MsSyw0QkMvSjdCLElBQUlsa0IsRUFBUSxFQUFRLE1BRWhCNm1CLEVBQW1CLEVBQVEsTUFFM0JoakIsRUFBVyxFQUFRLE1BQ25CQyxFQUE0QkQsRUFBU0MsMEJBQ3JDQyxFQUFhRixFQUFTRSxXQUV0Qm5WLEVBQVVvUixFQUFNcFIsUUFjcEJwZ0MsRUFBT0MsUUFaUCxTQUFvQzAyRCxFQUFVL2dCLEVBQVd5RyxHQUN2RCxJQUNJaWMsRUFEb0JELEVBQWlCemlCLEdBQ0gsR0FHbEMyaUIsRUFEcUJGLEVBQWlCaGMsR0FBZSxJQUNoQixHQUV6QyxPQUFPamMsR0FBUSxXQUNiLE9BQU9rVixFQUEwQkMsRUFBV29oQixHQUFXMkIsRUFBZUMsS0FDckUsQ0FBQzVCLEVBQVUyQixFQUFlQyxNLDRCQ25CL0IsSUFBSS9tQixFQUFRLEVBQVEsTUFFaEJTLEVBQVcsRUFBUSxNQUVuQjdSLEVBQVVvUixFQUFNcFIsUUFDaEJFLEVBQVNrUixFQUFNbFIsT0FDZmhDLEVBQVdrVCxFQUFNbFQsU0FpQ3JCdCtCLEVBQU9DLFFBL0JQLFNBQTBCMjFDLEdBQ3hCLElBQUk0aUIsRUFlRUMsRUFURkMsRUFBZ0NwNEIsRUFBTyxHQUV2Q28wQixFQUFZcDJCLEVBQVNzWCxHQUNyQitpQixFQUFvQmpFLEVBQVUsR0FDOUJrRSxFQUF1QmxFLEVBQVUsR0FpQnJDLE9BZndCemlCLEVBQVMyRCxFQUFXK2lCLEtBSzFDRCxFQUE4QjkvQyxTQUErRSxRQUFuRTYvQyxFQUF3QkMsRUFBOEI5L0MsZUFBK0MsSUFBMUI2L0MsRUFBbUNBLEVBQXdCLEdBQUssRUFDckxHLEVBQXFCaGpCLElBU2hCLENBSGF4VixHQUFRLFdBQzFCLE9BQU93VixJQUNOLENBQUM4aUIsRUFBOEI5L0MsVUFDMEQsUUFBcEU0L0MsRUFBeUJFLEVBQThCOS9DLGVBQWdELElBQTNCNC9DLEVBQW9DQSxFQUF5QixLLDRCQ3BDbkssSUFFSTVtQixFQUZ5QixFQUFRLEtBRWhCRCxDQUF1QixFQUFRLE9BRWhESCxFQUFRLEVBQVEsTUFFaEIyUixFQUFzQixFQUFRLE1BRzlCMFYsRUFEVyxFQUFRLE1BQ2NuVixlQUVqQ3BsQixFQUFXa1QsRUFBTWxULFNBQ2pCRyxFQUFZK1MsRUFBTS9TLFVBQ2xCNkIsRUFBU2tSLEVBQU1sUixPQUNmTixFQUFjd1IsRUFBTXhSLFlBRXBCOHpCLEVBQWtCLEVBQVEsTUE4RDlCOXpELEVBQU9DLFFBNURQLFNBQXFCNjRELEdBQ25CLElBQUlDLEVBQW1CaDNELFVBQVV4QyxPQUFTLFFBQXNCMEUsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUs4MkQsRUFDdkZ0bEIsRUFBYzRQLElBQ2RxUixFQUFlVixJQUNma0YsRUFBaUIxNEIsRUFBT2lULEdBQ3hCMGxCLEVBQWMzNEIsRUFBT3c0QixHQUNyQkksRUFBdUI1NEIsRUFBTyxJQUFJLzNCLEtBRWxDbXNELEVBQVlwMkIsR0FBUyxHQUNyQjY2QixFQUFxQnpFLEVBQVUsR0FDL0IwRSxFQUFzQjFFLEVBQVUsR0FFaENuWSxFQUFVdmMsR0FBWSxTQUFVcW9CLEdBQzlCMlEsRUFBZXBnRCxVQUFZMjZCLEdBQWUwbEIsRUFBWXJnRCxVQUFZa2dELElBQ3BFSSxFQUFxQnRnRCxRQUFnQixPQUFFeXZDLEdBRW5DbU0sRUFBYTU3QyxTQUNmd2dELEVBQW9CRixFQUFxQnRnRCxRQUFRblosS0FBTyxNQUczRCxDQUFDOHpDLEVBQWFpaEIsRUFBY3NFLElBQy9CcjZCLEdBQVUsV0FDSnU2QixFQUFlcGdELFVBQVkyNkIsR0FBZTBsQixFQUFZcmdELFVBQVlrZ0QsSUFDcEVJLEVBQXFCdGdELFFBQVUsSUFBSXJRLElBRS9CaXNELEVBQWE1N0MsU0FDZndnRCxHQUFvQixHQUd0QkosRUFBZXBnRCxRQUFVMjZCLEVBQ3pCMGxCLEVBQVlyZ0QsUUFBVWtnRCxLQUV2QixDQUFDdmxCLEVBQWFpaEIsRUFBY3NFLElBQy9CLElBQUlPLEVBQVNyNUIsR0FBWSxTQUFVczVCLEdBQ2pDLElBQUlqUixFQUFhMFEsRUFBaUJ4bEIsR0FBYSxFQUFJM0IsRUFBd0IsVUFBRyxFQUFJQSxFQUF3QixTQUFHLEdBQUkwbkIsR0FBUyxHQUFJLENBQzVIUixTQUFVQSxFQUNWUyxZQUFhLFNBQXFCblksRUFBVW9ZLEdBQzFDamQsRUFBUThMLEdBQ1JpUixFQUFPQyxhQUFlRCxFQUFPQyxZQUFZblksRUFBVW9ZLElBRXJEOWhELFFBQVMsU0FBaUIxVCxHQUN4QnU0QyxFQUFROEwsR0FDUmlSLEVBQU81aEQsU0FBVzRoRCxFQUFPNWhELFFBQVExVCxJQUVuQ3kxRCxjQUFlLFdBQ2JsZCxFQUFROEwsR0FDUmlSLEVBQU9HLGVBQWlCSCxFQUFPRyxvQkFTbkMsT0FOQVAsRUFBcUJ0Z0QsUUFBUWpRLElBQUkwL0MsR0FFN0JtTSxFQUFhNTdDLFNBQ2Z3Z0QsR0FBb0IsR0FHZi9RLElBQ04sQ0FBQzlMLEVBQVN3YyxFQUFrQnhsQixFQUFhaWhCLEVBQWNzRSxJQUMxRCxNQUFPLENBQUNPLEVBQVFGLEssNEJDM0VsQixJQUVJdm5CLEVBRnlCLEVBQVEsS0FFaEJELENBQXVCLEVBQVEsT0FFaEQrbkIsRUFBd0IsRUFBUSxNQUVoQ0MsRUFBc0IsRUFBUSxNQUU5QkMsRUFBNkIsRUFBUSxNQUVyQzlELEVBQStCLEVBQVEsTUFFdkN6Z0IsRUFBVyxFQUFRLE1BQ25CclYsRUFBY3FWLEVBQVNyVixZQUV2QjFCLEdBRGdCK1csRUFBUzlVLGNBQ2Q4VSxFQUFTL1csVUFFcEJ5MUIsRUFBWSxFQUFRLE1BQ3BCdFMsRUFBY3NTLEVBQVV0UyxZQUN4QmdFLEVBQXdCc08sRUFBVXRPLHNCQXVGdEMsU0FBU29VLEVBQVkxMUQsR0FDbkIsSUFBSXV3RCxFQUFZcDJCLEdBQVMsR0FDckJ3N0IsRUFBZ0JwRixFQUFVLEdBQzFCcUYsRUFBbUJyRixFQUFVLEdBRTdCNWEsRUFBVyxDQUNiaHRCLE1BQU8sV0FDTCxPQUFPaXRDLEdBQWlCLElBRTFCcGlCLFNBQVUsV0FDUixPQUFPb2lCLEdBQWlCLElBRTFCLzFELE1BQU8sV0FDTCxPQUFPKzFELEdBQWlCLEtBUXhCQyxFQUF1QkwsR0FBb0IsRUFBSS9uQixFQUF3QixVQUFHLEVBQUlBLEVBQXdCLFNBQUcsR0FBSXp0QyxHQUFPLEdBQUksQ0FDMUgyMUMsU0FBVUEsRUFDVndkLFFBTmdCLFdBQ2hCLE9BQU95QyxHQUFpQixPQVcxQixNQUFPLENBSlFDLEVBQXFCLEdBQ3RCQSxFQUFxQixHQUdSRixFQUZSRSxFQUFxQixJQUsxQ2g2RCxFQUFPQyxRQXJIUCxTQUErQjgxRCxFQUFla0UsR0FDNUMsSUFBSWpZLEVBQWVQLEVBQVlzVSxHQUMvQkQsRUFBNkI5VCxFQUFjLDZDQUMzQyxJQUFJc0UsRUFBdUIsMEJBRXZCNFQsRUFBd0JSLEVBQXNCMVgsRUFBY3NFLEdBQzVEbUksRUFBK0J5TCxFQUFzQnpMLDZCQUNyREosRUFBb0I2TCxFQUFzQjdMLGtCQUMxQ0csRUFBcUIwTCxFQUFzQjFMLG1CQUMzQ0UsRUFBa0J3TCxFQUFzQnhMLGdCQUV4Q3lMLEVBQXdCUCxFQUEyQjVYLEVBQWNpWSxFQUFtQjNULEdBQ3BGK1EsRUFBZThDLEVBQXNCOUMsYUFDckNwVixFQUFja1ksRUFBc0JsWSxZQUNwQ25CLEVBQVVxWixFQUFzQnJaLFFBRWhDMkYsRUFBcUJoQixFQUFzQnpELEVBQWNDLEdBRXpEbVksRUFBZVAsRUFBWSxDQUM3QnZULHFCQUFzQkEsRUFDdEJtSSw2QkFBOEJBLEVBQzlCL1YsVUFBVyxXQUNYMmUsYUFBY0EsRUFDZDVRLG1CQUFvQkEsRUFDcEJ6RSxhQUFjQSxFQUNkQyxZQUFhQSxFQUNieU0sZ0JBQWlCQSxFQUNqQkYsbUJBQW9CQSxFQUNwQkgsa0JBQW1CQSxJQUVqQmdNLEVBQWVELEVBQWEsR0FDNUJFLEVBQWNGLEVBQWEsR0FDM0JHLEVBQW9CSCxFQUFhLEdBQ2pDSSxFQUF1QkosRUFBYSxHQUdwQ0ssRUFBZ0JaLEVBQVksQ0FDOUJ2VCxxQkFBc0JBLEVBQ3RCbUksNkJBQThCQSxFQUM5Qi9WLFVBQVcsVUFDWDJlLGFBQWNBLEVBQ2Q1USxtQkFBb0JBLEVBQ3BCekUsYUFBY0EsRUFDZEMsWUFBYUEsRUFDYnlNLGdCQUFpQkEsRUFDakJGLG1CQUFvQkEsRUFDcEJILGtCQUFtQkEsSUFFakJxTSxFQUFXRCxFQUFjLEdBQ3pCRSxFQUFVRixFQUFjLEdBQ3hCRyxFQUFnQkgsRUFBYyxHQUM5QkksRUFBbUJKLEVBQWMsR0FzQnJDLE1BQU8sQ0FDTHgzQyxLQUFNbzBDLEVBQ05xRCxTQUFVQSxFQUNWTCxhQUFjQSxFQUNkTSxRQUFTQSxFQUNUTCxZQUFhQSxFQUNiTSxjQUFlQSxFQUNmTCxrQkFBbUJBLEVBQ25CelosUUE1QnNCOWdCLEdBQVksU0FBVTRWLEVBQVc5bEMsR0FHdkQsT0FGQStxRCxJQUNBTCxJQUNPMVosRUFBUWxMLEdBQVcsRUFBSWhFLEVBQXdCLFVBQUcsRUFBSUEsRUFBd0IsU0FBRyxHQUFJOWhDLEdBQVUsR0FBSSxDQUN4R2dyRCxtQkFBZTcyRCxPQUVoQixDQUFDNDJELEVBQWtCTCxFQUFzQjFaLE8sNEJDaEY5QyxJQUFJM0osRUFBWSxFQUFRLE1BRXBCc2YsRUFBdUIsRUFBUSxNQUUvQkMsRUFBNkIsRUFBUSxNQUVyQ3ZULEVBQXNCLEVBQVEsTUFLOUJ5USxHQUhVLEVBQVEsTUFFUCxFQUFRLE1BQ2tCQSwyQkFNckNtSCxHQUpZLEVBQVEsTUFDTXg2QixjQUVkLEVBQVEsTUFDYW1SLFlBQ2pDK2YsRUFBb0JzSixFQUFxQnRKLGtCQUN6Q3hVLEVBQWE4ZCxFQUFxQjlkLFdBMEZ0Q2o5QyxFQUFPQyxRQXhGUCxTQUEyQjAyRCxFQUFVcUUsRUFBZ0JsckQsR0FHbkQ4akQsSUFDQSxJQU9JcUgsRUFQQTFuQixFQUFjNFAsSUFDZHdPLEVBQVdxSixFQUFlckosU0FDMUJuVSxFQUFjd2QsRUFBZXhkLFlBQzdCcitDLEVBQVM2N0QsRUFBZTc3RCxPQUN4QnkyQyxFQUFZb2xCLEVBQWVwbEIsVUFDM0I4YSxFQUFxQnNLLEVBQWV0SyxtQkFDcEM1YSxFQUFZNGdCLEVBQTJCQyxFQUFVL2dCLEVBQVc4YSxHQUdoRSxHQUE0Qiw4QkFBeEJzSyxFQUFlNVksS0FDZnRNLEVBQVVDLFFBQVFsNEMsS0FBS2tpRCxPQUFPbitDLE9BQVNvNUQsRUFBZXA1RCxNQUE2T3UxQyxHQUFVLEdBQy9TOGpCLEVBQTZCLENBQzNCM1UscUJBQXNCLHNCQUN0QnFMLFNBQVVBLEVBQ1ZwRixnQkFBaUJrRixFQUFrQmxlLEVBQWF1QyxFQUFVQyxRQUFRNlUsWUFBWSxXQUM1RSxPQUFJclgsSUFBZ0J5bkIsRUFBZXpuQixhQUF5QixNQUFWcDBDLEVBQ3pDbzBDLEVBQVlpZixrQkFBa0IsQ0FDbkMxYyxVQUFXQSxFQUNYMzJDLE9BQVFBLElBR0hvMEMsRUFBWWlKLFFBQVEsQ0FDekIxRyxVQUFXQSxPQUlqQjBILFlBQWFBLEVBQ2I3SCxNQUFPRyxFQUNQMlUsYUFBYzM2QyxhQUF5QyxFQUFTQSxFQUFROG1ELDJCQUVyRSxDQUVMLElBQUlzRSxFQUEwQmplLEVBQVcxSixFQUFhdUMsR0F5QnREbWxCLEVBQTZCLENBQzNCM1UscUJBQXNCLHNCQUN0QmlHLGdCQXhCWSxNQUFWcHRELEdBQWtCbzBDLElBQWdCeW5CLEVBQWV6bkIsWUFLakNwMEMsRUFBT2c4RCxRQUFRRCxJQUNSRixFQUFlem5CLFlBUXRCMm5CLEdBV2xCdkosU0FBVUEsRUFDVm5VLFlBQWFBLEVBQ2I3SCxNQUFPRyxFQUNQMlUsYUFBYzM2QyxhQUF5QyxFQUFTQSxFQUFROG1ELHVCQWtCNUUsT0FkV0gsRUFBcUJ3RSxLLDRCQzVGbEMsSUFFSTFMLEVBRnlCLEVBQVEsS0FFSDVkLENBQXVCLEVBQVEsT0FFN0RtaUIsRUFBa0IsRUFBUSxNQUUxQjNRLEVBQXNCLEVBQVEsTUFFOUI5TixFQUFXLEVBQVEsTUFDbkJpTyxFQUFZak8sRUFBU2lPLFVBQ3JCc1EsRUFBNEJ2ZSxFQUFTdWUsMEJBRXJDRyxFQUFZLEVBQVEsTUFDcEIvekIsRUFBYyt6QixFQUFVL3pCLFlBQ3hCdkIsRUFBWXMxQixFQUFVdDFCLFVBQ3RCNkIsRUFBU3l6QixFQUFVenpCLE9BQ25CaEMsRUFBV3kxQixFQUFVejFCLFNBRXJCODhCLEVBQWlDLENBQ25DaFosS0FBTSxzQkFvTFJwaUQsRUFBT0MsUUFqTFAsU0FBd0IyeEQsRUFBb0J5SixHQW9CMUMsSUFBSUMsRUFBZ0NELFFBQXFFQSxFQUF3QkQsRUFDN0g3bkIsRUFBYzRQLElBQ2xCeVEsSUFDQSxJQUFJWSxFQUFlVixJQUNmeUgsRUFBK0JqN0IsRUFBTyxJQUFJLzNCLElBQUksQ0FBQyt5RCxLQUUvQzVHLEVBQVlwMkIsR0FBUyxXQUN2QixPQUFPZzlCLEtBRUxFLEVBQWlCOUcsRUFBVSxHQUMzQitHLEVBQW9CL0csRUFBVSxHQUU5QkUsRUFBYXQyQixHQUFTLFdBQ3hCLE9BQU9nOUIsS0FFTEksRUFBZ0M5RyxFQUFXLEdBQzNDK0csRUFBbUMvRyxFQUFXLEdBRTlDMEcsSUFBa0NJLElBTXBDSCxFQUE2QjNpRCxRQUFRalEsSUFBSTJ5RCxHQUN6Q0ssRUFBaUNMLEdBQ2pDRyxFQUFrQkgsSUFHcEIsSUFBSU0sRUFBZTU3QixHQUFZLFdBQ3pCdzBCLEVBQWE1N0MsVUFDZjJpRCxFQUE2QjNpRCxRQUFRalEsSUFBSXl5RCxHQUN6Q0ssRUFBa0JMLE1BRW5CLENBQUM1RyxJQUNBcUgsRUFBc0I3N0IsR0FBWSxTQUFVNFYsRUFBVzlsQyxHQUN6RCxJQUFJZ3NELEVBQTJCLE1BQVhoc0QsR0FBbUJBLEVBQVFuUSxlQUFlLGlCQUFtQixDQUMvRTY5QyxZQUFhMXRDLEVBQVEwdEMsWUFDckJrVCxtQkFBb0I1Z0QsRUFBUTRnRCxtQkFDNUJDLGlCQUFrQjdnRCxFQUFRNmdELGtCQUN4QjdnRCxFQUVKLEdBQUkwa0QsRUFBYTU3QyxRQUFTLENBQ3hCLElBQUltakQsRUFFQUMsRUFBd0IxWSxFQUFnSCxRQUFyR3lZLEVBQXdCanNELGFBQXlDLEVBQVNBLEVBQVFnckQscUJBQXFELElBQTFCaUIsRUFBbUNBLEVBQXdCeG9CLEVBQWFxZSxFQUFvQmhjLEVBQVdrbUIsR0FDM1BQLEVBQTZCM2lELFFBQVFqUSxJQUFJcXpELEdBQ3pDUCxFQUFrQk8sTUFFbkIsQ0FBQ3pvQixFQUFhcWUsRUFBb0I2SixFQUFtQmpILElBQ3BEVSxFQUEyQjUwQixHQUFPLEdBd0d0QyxPQXZHQTdCLEdBQVUsV0FDUixPQUFPLFdBUUx5MkIsRUFBeUJ0OEMsU0FBVSxLQUVwQyxJQUNINmxCLEdBQVUsV0FDUixJQUF5QyxJQUFyQ3kyQixFQUF5QnQ4QyxRQW1CM0IsT0FUQXM4QyxFQUF5QnQ4QyxTQUFVLE9BRVAsdUJBQXhCNGlELEVBQWVwWixNQUNqQnlaLEVBQW9CTCxFQUFlNWxCLFVBQVcsQ0FDNUM0SCxZQUFhZ2UsRUFBZWhlLFlBQzVCa1QsbUJBQW9COEssRUFBZTlLLHNCQTBCekMsSUFBSXVMLEVBQTRCVixFQUE2QjNpRCxRQUU3RCxHQUFJNDdDLEVBQWE1N0MsUUFBUyxDQUN4QixJQUNJNDJDLEVBREFDLEdBQVksRUFBSUYsRUFBcUMsU0FBRzBNLEdBRzVELElBQ0UsSUFBS3hNLEVBQVV6cEQsTUFBT3dwRCxFQUFRQyxFQUFVcnFELEtBQUsrMEIsTUFBTyxDQUNsRCxJQUFJK2hDLEVBQTJCMU0sRUFBTWhoRCxNQUVyQyxHQUFJMHRELElBQTZCVixFQUMvQixNQUdGUyxFQUFrQyxPQUFFQyxHQUVFLHVCQUFsQ0EsRUFBeUI5WixNQUMzQjhaLEVBQXlCM25CLFNBQVcybkIsRUFBeUIzbkIsV0FHakUsTUFBTzd1QyxHQUNQK3BELEVBQVUvckQsRUFBRWdDLEdBQ1osUUFDQStwRCxFQUFVMXJELFFBR2IsQ0FBQ3kzRCxFQUFnQmhILEVBQWNxSCxJQUNsQ3A5QixHQUFVLFdBQ1IsT0FBTyxXQUdMLElBQ0k0MkIsRUFEQUMsR0FBYSxFQUFJL0YsRUFBcUMsU0FBR2dNLEVBQTZCM2lELFNBRzFGLElBQ0UsSUFBSzA4QyxFQUFXdHZELE1BQU9xdkQsRUFBU0MsRUFBV2x3RCxLQUFLKzBCLE1BQU8sQ0FDckQsSUFBSW83QixFQUF1QkYsRUFBTzdtRCxNQUVBLHVCQUE5QittRCxFQUFxQm5ULE1BQ3ZCbVQsRUFBcUJoaEIsU0FBV2doQixFQUFxQmhoQixXQUd6RCxNQUFPN3VDLEdBQ1A0dkQsRUFBVzV4RCxFQUFFZ0MsR0FDYixRQUNBNHZELEVBQVd2eEQsUUFHZCxJQUNJLENBQXlCLHVCQUF4QnkzRCxFQUFlcFosS0FBZ0MsS0FBT29aLEVBQWdCSyxFQUFxQkQsSywyQkNwTXJHLElBQUloQyxFQUE2QixFQUFRLE1BRXJDOUQsRUFBK0IsRUFBUSxNQU12Q3JVLEdBSlcsRUFBUSxNQUNNbGhCLGNBRWIsRUFBUSxNQUNJa2hCLGFBd0I1QnpoRCxFQUFPQyxRQXRCUCxTQUFnQzgxRCxFQUFlOVQsR0FDN0MsSUFBSUQsRUFBZVAsRUFBWXNVLEdBQy9CRCxFQUE2QjlULEVBQWMsOENBRTNDLElBQUltWSxFQUF3QlAsRUFBMkI1WCxFQUFjQyxFQUFhLDRCQWVsRixNQUFPLENBZFlrWSxFQUFzQjlDLGFBQzNCOEMsRUFBc0JyWixXLDRCQ2hCdEMsSUFFSWxQLEVBRnlCLEVBQVEsS0FFaEJELENBQXVCLEVBQVEsT0FFaERrVCxFQUFrQixFQUFRLE1BRTFCcUosRUFBcUIsRUFBUSxNQUU3QmlKLEVBQWlCLEVBQVEsTUFFekJoZ0IsRUFBWSxFQUFRLE1BRXBCMGUsRUFBa0IsRUFBUSxNQUUxQi9CLEVBQWtCLEVBQVEsTUFFMUI3USxFQUFpQixFQUFRLE1BRXpCRSxFQUFzQixFQUFRLE1BSzlCd0csR0FIVSxFQUFRLE1BRVAsRUFBUSxNQUMwQkEsbUNBRzdDc0UsRUFEWSxFQUFRLE1BQ3VCQSwrQkFFM0M3YixFQUFZLEVBQVEsTUFDcEJwUyxFQUFjb1MsRUFBVXBTLFlBQ3hCQyxFQUFhbVMsRUFBVW5TLFdBQ3ZCSSxFQUFhK1IsRUFBVS9SLFdBRXZCODdCLEVBQVksRUFBUSxNQUNwQmxmLEVBQWFrZixFQUFVenFCLFdBQVd1TCxXQUNsQzNILEVBQTRCNm1CLEVBQVU3bUIsMEJBQ3RDbVEsRUFBd0IwVyxFQUFVMVcsc0JBQ2xDbE8sRUFBYzRrQixFQUFVNWtCLFlBRTVCLFNBQVM2a0IsRUFBUTdqQyxFQUFPbUYsR0FDdEIsT0FBUUEsRUFBT2g4QixNQUNiLElBQUssVUFFRCxJQUFJMjZELEVBRUosT0FBTyxFQUFJenFCLEVBQXdCLFVBQUcsRUFBSUEsRUFBd0IsU0FBRyxHQUFJclosR0FBUSxHQUFJLENBQ25GaWxCLFlBQWE5ZixFQUFPOGYsWUFDcEJnYSxvQkFBNkUsUUFBdkQ2RSxFQUF3QjMrQixFQUFPNCtCLDBCQUEwRCxJQUExQkQsRUFBbUNBLEVBQXdCOWpDLEVBQU1pL0Isb0JBQ3RKUyxXQUFZdjZCLEVBQU91NkIsV0FDbkJxRSxtQkFBb0I1K0IsRUFBTzQrQixtQkFDM0JDLGFBQWM3K0IsRUFBTzYrQixhQUNyQjlSLGFBQWMvc0IsRUFBTytzQixlQUkzQixJQUFLLFFBRUQsTUFBTyxDQUNMak4saUJBQWF2NUMsRUFDYnV6RCxvQkFBcUI5NUIsRUFBTzZWLFlBQzVCbWtCLDJCQUE0Qmg2QixFQUFPK29CLG1CQUNuQ3dSLGdCQUFZaDBELEVBQ1pzNEQsYUFBYyxLQUNkOVIsa0JBQWN4bUQsR0FJcEIsUUFHSSxNQURBeTVCLEVBQU9oOEIsS0FDRCxJQUFJd0MsTUFBTSx1REF3U3hCbEUsRUFBT0MsUUFuU1AsU0FBb0MraEQsRUFBY2lZLEVBQW1CM1QsR0FDbkUsSUFBSWtXLEVBQW9CclosSUFFcEJpTCxFQUFzQkYsRUFBbUJsTSxFQUFjc0UsR0FDdkRnSSxFQUFxQkYsRUFBb0JFLG1CQUN6Q2UsRUFBNEJqQixFQUFvQmlCLDBCQUNoRFgsRUFBa0JOLEVBQW9CTSxnQkFFdENqSSxFQUFxQmhCLEVBQXNCekQsRUFBY2lZLEdBRXpEd0MsRUFBY3A4QixFQUFXKzdCLEVBQVMsQ0FDcEM1ZSxpQkFBYXY1QyxFQUNidXpELG9CQUFxQmdGLEVBQ3JCOUUsMkJBQTRCalIsRUFDNUJ3UixnQkFBWWgwRCxFQUNacTRELG1CQUFvQixLQUNwQkMsYUFBYyxLQUNkOVIsa0JBQWN4bUQsSUFFWnk0RCxFQUFlRCxFQUFZLEdBQzNCMytCLEVBQVcyK0IsRUFBWSxHQUV2QmpmLEVBQWNrZixFQUFhbGYsWUFDM0JnYSxFQUFzQmtGLEVBQWFsRixvQkFDbkNFLEVBQTZCZ0YsRUFBYWhGLDJCQUMxQ08sRUFBYXlFLEVBQWF6RSxXQUMxQnFFLEVBQXFCSSxFQUFhSixtQkFDbENDLEVBQWVHLEVBQWFILGFBQzVCOVIsRUFBZWlTLEVBQWFqUyxhQUM1QmxYLEVBQWMrb0IsUUFBK0RBLEVBQXFCRSxFQUNsRzFGLEVBQWdCN0ksRUFBK0IxYSxHQUMvQ3lpQixFQUFtQnJNLEVBQWtDcFcsR0FDckQ2UixFQUFrQm5sQixFQUFXNGtCLEdBQzdCOFgsRUFBY3BwQixJQUFnQmlrQixHQUF1Qi9RLElBQXVCaVIsRUFFNUVrRixFQUFrQjNaLEVBQWVxTCxHQUNqQ3VPLEVBQVdELEVBQWdCLEdBQzNCdFosRUFBWXNaLEVBQWdCLEdBQzVCaEIsRUFBZWdCLEVBQWdCLEdBRS9CM2EsRUFBY2dZLEVBRWxCLEdBQUkwQyxFQUNGNytCLEVBQVMsQ0FDUHA4QixLQUFNLFFBQ042eEMsWUFBYUEsRUFDYmtULG1CQUFvQkEsSUFFdEJtVixTQUNLLEdBQW9CLE1BQWhCVyxHQUFvQyxNQUFaTSxFQUFrQixDQWtCbkQsSUFBSUMsRUFBdUIsU0FBOEJDLEdBQ3ZEOUUsR0FBY0EsRUFBVzhFLFFBQStDQSxFQUFhLE9BV25GeFEsRUFBcUMsTUFBbkJzUSxFQUFTMTlELE9BQWlCMDlELEVBQVMxOUQsT0FBUzg5QyxFQUFXMUosRUFBYWdwQixHQU10RjNQLEVBQWN4SCxFQUFnQitFLDBCQUF5QixXQUN6RCxPQUFPMk0sRUFBY3hLLFFBQVFpUSxFQUFjaFEsRUFBaUIvTyxFQUFhaU4sRUFBYyxDQUNyRnptRCxNQUFPODRELEVBQ1BubEIsU0FBVSxXQU9SbWxCLE1BRURELEVBQVNsTCxTQUFVdk0sTUFFcEI0WCxFQUFZaEgsRUFBaUIzUCxLQUFLdUcsRUFBWTVLLGFBQWM0SyxFQUFZM0ssWUFBYXFFLEdBQXNCcmpDLEtBQ2hHLE1BQWIrNUMsR0FBeU03bEIsR0FBVSxHQU1yTjhLLEVBRDJCa1YsRUFBZTZGLEVBQVczTixHQWdCdkQsSUFBSTROLEVBQW1CcEgsRUFBZ0I3VCxFQUFjQyxFQUFhcUUsR0FDOUQrUSxFQUFlNEYsRUFBaUJoNkMsS0FDaENrekMsR0FBc0I4RyxFQUFpQjlHLG9CQUN2Q0MsR0FBcUI2RyxFQUFpQjdHLG1CQUcxQyxNQUFPLENBQ0xpQixhQUFjQSxFQUNkcFYsWUFBYUEsRUFDYm5CLFFBTUosU0FBNEJ3RixFQUFzQnhvQixFQUFVODlCLEVBQWN2RSxFQUFjNVEsRUFBb0J6RSxFQUFjcU4sRUFBMkJYLEVBQWlCcEwsRUFBVzJXLEVBQW1CM0wsR0FDbE0sSUFBSWtHLEVBQWVWLElBQ2Z5RCxFQUFxQyxNQUFuQjdJLEdBQTJDLE1BQWhCMkksR0FBZ0QsaUJBQWpCQSxFQUE0QkEsRUFBYTNJLEdBQW1CLEtBQzVJLE9BQU8xdUIsR0FBWSxTQUFVazlCLEVBQTBCcHRELEdBR3JELElBQTZCLElBQXpCMGtELEVBQWE1N0MsUUFFZixNQUFPLENBQ0wyN0IsUUFBUyxjQVFiLElBS0kyakIsRUFDQW5jLEVBTkF1Z0IsRUFBcUJ4c0QsYUFBeUMsRUFBU0EsRUFBUWdyRCxjQUMvRXRkLEVBQWMxdEMsYUFBeUMsRUFBU0EsRUFBUTB0QyxZQUN4RWlOLEVBQWUzNkMsYUFBeUMsRUFBU0EsRUFBUThtRCxzQkFDekVxQixFQUFhbm9ELGFBQXlDLEVBQVNBLEVBQVFtb0QsV0FDdkVuUixFQUFtQnZQLEVBQVl5SyxFQUFjaVksR0FJakQsR0FBd0IsTUFBcEJuVCxFQUNGb1IsRUFBa0IsR0FDbEJuYyxFQUFvQixRQUNmLEdBQThCLHlCQUExQitLLEVBQWlCMUUsS0FBaUMsQ0FDM0QsSUFBSSthLEVBQXVCQyxFQUF3QkMsRUFBd0JDLEVBRTNFcEYsRUFBeU0sUUFBdExpRixFQUFxRixRQUE1REMsRUFBeUJ0VyxFQUFpQnpFLFVBQVUsVUFBMkMsSUFBM0IrYSxPQUFvQyxFQUFTQSxFQUF1QjlhLE1BQU0xTSxpQkFBaUQsSUFBMUJ1bkIsRUFBbUNBLEVBQXdCLEdBQzVRcGhCLEVBQXNNLFFBQWpMc2hCLEVBQXNGLFFBQTVEQyxFQUF5QnhXLEVBQWlCekUsVUFBVSxVQUEyQyxJQUEzQmliLE9BQW9DLEVBQVNBLEVBQXVCMW5CLGlCQUFrRCxJQUEzQnluQixFQUFvQ0EsRUFBeUIsUUFFM1FuRixFQUFrQnBSLEVBQWlCeEUsTUFBTTFNLFVBQ3pDbUcsRUFBb0IrSyxFQUFpQmxSLFVBUXZDLElBQUkyRCxHQUFtQixFQUFJM0gsRUFBd0IsVUFBRyxFQUFJQSxFQUF3QixVQUFHLEVBQUlBLEVBQXdCLFNBQUcsR0FBSXNtQixHQUFrQm5jLEdBQW9CbWhCLEdBR3ZJLE1BQW5CeE8sR0FBNEJ3TyxFQUF5QnY5RCxlQUFlLFFBUXRFNDVDLEVBQWlCLzZCLEdBQUsrNEMsR0FHeEIsSUFBSWdGLEVBQWVqbkIsRUFBMEJnWixFQUFvQi9VLEVBQWtCLENBQ2pGSyxPQUFPLElBc0JULE9BYkEwSixFQUFVaVosRUFBYXhtQixRQUFRSCxVQUFXLENBQ3hDNEgsWUFBYUEsRUFDYnNkLGNBQWV3QixFQUNmM0wsaUJBQWtCLFlBRXBCN3lCLEVBQVMsQ0FDUHA4QixLQUFNLFVBQ044N0MsWUFBYUEsRUFDYnlhLFdBQVlBLEVBQ1pxRSxtQkFBb0JBLEVBQ3BCQyxhQUFjQSxFQUNkOVIsYUFBY0EsSUFFVCxDQUNMbFcsUUFBU3FuQixLQVNiLENBQUNuVixFQUFvQjNvQixFQUFVODlCLEVBQWNyRSxJQXBHL0JnRyxDQUFtQmpYLEVBQXNCeG9CLEVBQVU4OUIsRUFBY3ZFLEVBQWM1USxFQUFvQnpFLEVBQWNxTixFQUEyQlgsRUFBaUJwTCxFQUFXMlcsRUFBbUIzTCxHQUt2TTZILG9CQUFxQkEsR0FDckJDLG1CQUFvQkEsTSw0QkMvTXhCLElBQUlqaEIsRUFBb0IsRUFBUSxNQUU1QmdDLEVBQVksRUFBUSxNQUdwQmxYLEVBRFcsRUFBUSxNQUNHQSxXQVExQmpnQyxFQUFPQyxRQU5QLFdBQ0UsSUFBSTAxQixFQUFVc0ssRUFBV2tWLEdBRXpCLE9BRGEsTUFBWHhmLEdBQWlkd2hCLEdBQVUsR0FDdGR4aEIsRUFBUTRkLGMsNEJDVkgsRUFBUSxNQUVQLEVBQVEsTUFDRGpULE9BYXRCdGdDLEVBQU9DLFFBWFAsU0FBc0MraEQsRUFBY3diLE0sNEJDTHBELElBQUlyYSxFQUFzQixFQUFRLE1BRTlCOU4sRUFBVyxFQUFRLE1BQ25CNVcsRUFBWTRXLEVBQVM1VyxVQUNyQjZCLEVBQVMrVSxFQUFTL1UsT0FtQ3RCdGdDLEVBQU9DLFFBeEJQLFNBQXlDdzlELEVBQVM1bUMsR0FDaEQsSUFBSTBjLEVBQWM0UCxJQUNkdWEsRUFBZ0JwOUIsRUFBTyxNQUN2QnE5QixFQUFnQnA1RCxNQUFNc0IsS0FBSzQzRCxHQUFTRyxPQUFPdjRELEtBQUssSUFZcEQsT0FYQW81QixHQUFVLFdBQ1IsSUFBSW8vQixFQUFRdHFCLEVBQVl1cUIsV0FDcEJDLEVBQW9CRixFQUFNRyx3QkFBd0JQLEdBQ2xEcFYsRUFBYXdWLEVBQU1JLDZCQUE2QkYsRUFBbUJsbkMsR0FFdkUsT0FEQTZtQyxFQUFjOWtELFFBQVV5dkMsRUFDakIsV0FDTCxPQUFPQSxFQUFXOVQsYUFJbkIsQ0FBQ29wQixFQUFlOW1DLEVBQVUwYyxJQUN0QixDQUNMZ0IsUUFBUyxXQUNzQixNQUF6Qm1wQixFQUFjOWtELFNBQ2hCOGtELEVBQWM5a0QsUUFBUTI3QixjLDRCQ2xDOUIsSUFBSS9DLEVBQVEsRUFBUSxNQUVoQjJSLEVBQXNCLEVBQVEsTUFHOUJVLEVBRFcsRUFBUSxNQUNZQSxvQkFnQm5DN2pELEVBQU9DLFFBZFAsU0FBeUJxNUQsRUFBUTRFLEdBSS9CLElBQUlDLEVBQTRCRCxRQUFxRUEsRUFBd0JyYSxFQUN6SHRRLEVBQWM0UCxJQUNsQjNSLEVBQU0vUyxXQUFVLFdBSWQsT0FIMkJvbEIsRUFBb0J0USxFQUFhK2xCLEdBQ3pCL2tCLFVBR2xDLENBQUNoQixFQUFhK2xCLEVBQVE2RSxNLFNDcEIzQm4rRCxFQUFPQyxRQVZQLFNBQTJCd0UsRUFBSzI1RCxJQUNuQixNQUFQQSxHQUFlQSxFQUFNMzVELEVBQUlsRixVQUFRNitELEVBQU0zNUQsRUFBSWxGLFFBRS9DLElBQUssSUFBSU8sRUFBSSxFQUFHdStELEVBQU8sSUFBSTk1RCxNQUFNNjVELEdBQU10K0QsRUFBSXMrRCxFQUFLdCtELElBQzlDdStELEVBQUt2K0QsR0FBSzJFLEVBQUkzRSxHQUdoQixPQUFPdStELEdBSVRyK0QsRUFBT0MsUUFBUCxRQUE0QkQsRUFBT0MsUUFBU0QsRUFBT0MsUUFBUXErRCxZQUFhLEcsZUNYeEUsSUFBSUMsRUFBbUIsRUFBUSxNQU0vQnYrRCxFQUFPQyxRQUpQLFNBQTRCd0UsR0FDMUIsR0FBSUYsTUFBTUMsUUFBUUMsR0FBTSxPQUFPODVELEVBQWlCOTVELElBSWxEekUsRUFBT0MsUUFBUCxRQUE0QkQsRUFBT0MsUUFBU0QsRUFBT0MsUUFBUXErRCxZQUFhLEcsU0NDeEV0K0QsRUFBT0MsUUFSUCxTQUFnQ3UrRCxHQUM5QixRQUFhLElBQVRBLEVBQ0YsTUFBTSxJQUFJQyxlQUFlLDZEQUczQixPQUFPRCxHQUlUeCtELEVBQU9DLFFBQVAsUUFBNEJELEVBQU9DLFFBQVNELEVBQU9DLFFBQVFxK0QsWUFBYSxHLGVDVHhFLElBQUlJLEVBQTZCLEVBQVEsTUEyRHpDMStELEVBQU9DLFFBekRQLFNBQW9DMCtELEVBQUdDLEdBQ3JDLElBQUlDLEVBQXVCLG9CQUFYOXlELFFBQTBCNHlELEVBQUU1eUQsT0FBT0ssV0FBYXV5RCxFQUFFLGNBRWxFLElBQUtFLEVBQUksQ0FDUCxHQUFJdDZELE1BQU1DLFFBQVFtNkQsS0FBT0UsRUFBS0gsRUFBMkJDLEtBQU9DLEdBQWtCRCxHQUF5QixpQkFBYkEsRUFBRXAvRCxPQUFxQixDQUMvR3MvRCxJQUFJRixFQUFJRSxHQUNaLElBQUkvK0QsRUFBSSxFQUVKOGMsRUFBSSxhQUVSLE1BQU8sQ0FDTDVXLEVBQUc0VyxFQUNIeFgsRUFBRyxXQUNELE9BQUl0RixHQUFLNitELEVBQUVwL0QsT0FBZSxDQUN4QjQ2QixNQUFNLEdBRUQsQ0FDTEEsTUFBTSxFQUNOM3JCLE1BQU9td0QsRUFBRTcrRCxPQUdiNEQsRUFBRyxTQUFXbzdELEdBQ1osTUFBTUEsR0FFUi82RCxFQUFHNlksR0FJUCxNQUFNLElBQUk5WCxVQUFVLHlJQUd0QixJQUVJWSxFQUZBcTVELEdBQW1CLEVBQ25CQyxHQUFTLEVBRWIsTUFBTyxDQUNMaDVELEVBQUcsV0FDRDY0RCxFQUFLQSxFQUFHOS9ELEtBQUs0L0QsSUFFZnY1RCxFQUFHLFdBQ0QsSUFBSTY1RCxFQUFPSixFQUFHaHBDLE9BRWQsT0FEQWtwQyxFQUFtQkUsRUFBSzlrQyxLQUNqQjhrQyxHQUVUdjdELEVBQUcsU0FBV3c3RCxHQUNaRixHQUFTLEVBQ1R0NUQsRUFBTXc1RCxHQUVSbjdELEVBQUcsV0FDRCxJQUNPZzdELEdBQW9DLE1BQWhCRixFQUFXLFFBQVdBLEVBQVcsU0FDMUQsUUFDQSxHQUFJRyxFQUFRLE1BQU10NUQsTUFPMUIxRixFQUFPQyxRQUFQLFFBQTRCRCxFQUFPQyxRQUFTRCxFQUFPQyxRQUFRcStELFlBQWEsRyxTQzdDeEV0K0QsRUFBT0MsUUFmUCxTQUF5QmsvRCxFQUFLMzdELEVBQUtnTCxHQVlqQyxPQVhJaEwsS0FBTzI3RCxFQUNUeGdFLE9BQU8rRCxlQUFleThELEVBQUszN0QsRUFBSyxDQUM5QmdMLE1BQU9BLEVBQ1BQLFlBQVksRUFDWkQsY0FBYyxFQUNkb3hELFVBQVUsSUFHWkQsRUFBSTM3RCxHQUFPZ0wsRUFHTjJ3RCxHQUlUbi9ELEVBQU9DLFFBQVAsUUFBNEJELEVBQU9DLFFBQVNELEVBQU9DLFFBQVFxK0QsWUFBYSxHLFNDaEJ4RSxTQUFTZSxJQWdCUCxPQWZBci9ELEVBQU9DLFFBQVVvL0QsRUFBVzFnRSxPQUFPb0csUUFBVSxTQUFVYSxHQUNyRCxJQUFLLElBQUk5RixFQUFJLEVBQUdBLEVBQUlpQyxVQUFVeEMsT0FBUU8sSUFBSyxDQUN6QyxJQUFJWCxFQUFTNEMsVUFBVWpDLEdBRXZCLElBQUssSUFBSTBELEtBQU9yRSxFQUNWUixPQUFPQyxVQUFVZSxlQUFlWixLQUFLSSxFQUFRcUUsS0FDL0NvQyxFQUFPcEMsR0FBT3JFLEVBQU9xRSxJQUszQixPQUFPb0MsR0FHVDVGLEVBQU9DLFFBQVAsUUFBNEJELEVBQU9DLFFBQVNELEVBQU9DLFFBQVFxK0QsWUFBYSxFQUNqRWUsRUFBUzVuRCxNQUFNOVcsS0FBTW9CLFdBRzlCL0IsRUFBT0MsUUFBVW8vRCxFQUNqQnIvRCxFQUFPQyxRQUFQLFFBQTRCRCxFQUFPQyxRQUFTRCxFQUFPQyxRQUFRcStELFlBQWEsRyxlQ3BCeEUsSUFBSWdCLEVBQWlCLEVBQVEsSUFRN0J0L0QsRUFBT0MsUUFOUCxTQUF3QnMvRCxFQUFVQyxHQUNoQ0QsRUFBUzNnRSxVQUFZRCxPQUFPb2dDLE9BQU95Z0MsRUFBVzVnRSxXQUM5QzJnRSxFQUFTM2dFLFVBQVVjLFlBQWM2L0QsRUFDakNELEVBQWVDLEVBQVVDLElBSTNCeC9ELEVBQU9DLFFBQVAsUUFBNEJELEVBQU9DLFFBQVNELEVBQU9DLFFBQVFxK0QsWUFBYSxHLFNDSHhFdCtELEVBQU9DLFFBTlAsU0FBZ0NrL0QsR0FDOUIsT0FBT0EsR0FBT0EsRUFBSWIsV0FBYWEsRUFBTSxDQUNuQyxRQUFXQSxJQUtmbi9ELEVBQU9DLFFBQVAsUUFBNEJELEVBQU9DLFFBQVNELEVBQU9DLFFBQVFxK0QsWUFBYSxHLFNDSHhFdCtELEVBQU9DLFFBSlAsU0FBMEJ3L0QsR0FDeEIsR0FBc0Isb0JBQVgxekQsUUFBbUQsTUFBekIwekQsRUFBSzF6RCxPQUFPSyxXQUEyQyxNQUF0QnF6RCxFQUFLLGNBQXVCLE9BQU9sN0QsTUFBTXNCLEtBQUs0NUQsSUFJdEh6L0QsRUFBT0MsUUFBUCxRQUE0QkQsRUFBT0MsUUFBU0QsRUFBT0MsUUFBUXErRCxZQUFhLEcsU0NEeEV0K0QsRUFBT0MsUUFKUCxXQUNFLE1BQU0sSUFBSTZFLFVBQVUseUlBSXRCOUUsRUFBT0MsUUFBUCxRQUE0QkQsRUFBT0MsUUFBU0QsRUFBT0MsUUFBUXErRCxZQUFhLEcsZUNMeEUsSUFBSTU3RCxFQUFpQixFQUFRLE1BRTdCLFNBQVNnOUQsRUFBUXg0RCxFQUFReTRELEdBQ3ZCLElBQUk5L0QsRUFBT2xCLE9BQU9rQixLQUFLcUgsR0FFdkIsR0FBSXZJLE9BQU9pRSxzQkFBdUIsQ0FDaEMsSUFBSWtELEVBQVVuSCxPQUFPaUUsc0JBQXNCc0UsR0FFdkN5NEQsSUFDRjc1RCxFQUFVQSxFQUFRODVELFFBQU8sU0FBVUMsR0FDakMsT0FBT2xoRSxPQUFPa0UseUJBQXlCcUUsRUFBUTI0RCxHQUFLNXhELGVBSXhEcE8sRUFBS0wsS0FBS2lZLE1BQU01WCxFQUFNaUcsR0FHeEIsT0FBT2pHLEVBdUJURyxFQUFPQyxRQXBCUCxTQUF3QjJGLEdBQ3RCLElBQUssSUFBSTlGLEVBQUksRUFBR0EsRUFBSWlDLFVBQVV4QyxPQUFRTyxJQUFLLENBQ3pDLElBQUlYLEVBQXlCLE1BQWhCNEMsVUFBVWpDLEdBQWFpQyxVQUFVakMsR0FBSyxHQUUvQ0EsRUFBSSxFQUNONC9ELEVBQVEvZ0UsT0FBT1EsSUFBUyxHQUFNcUcsU0FBUSxTQUFVaEMsR0FDOUNkLEVBQWVrRCxFQUFRcEMsRUFBS3JFLEVBQU9xRSxPQUU1QjdFLE9BQU9taEUsMEJBQ2hCbmhFLE9BQU9vaEUsaUJBQWlCbjZELEVBQVFqSCxPQUFPbWhFLDBCQUEwQjNnRSxJQUVqRXVnRSxFQUFRL2dFLE9BQU9RLElBQVNxRyxTQUFRLFNBQVVoQyxHQUN4QzdFLE9BQU8rRCxlQUFla0QsRUFBUXBDLEVBQUs3RSxPQUFPa0UseUJBQXlCMUQsRUFBUXFFLE9BS2pGLE9BQU9vQyxHQUlUNUYsRUFBT0MsUUFBUCxRQUE0QkQsRUFBT0MsUUFBU0QsRUFBT0MsUUFBUXErRCxZQUFhLEcsU0MxQnhFdCtELEVBQU9DLFFBZlAsU0FBdUNkLEVBQVE2Z0UsR0FDN0MsR0FBYyxNQUFWN2dFLEVBQWdCLE1BQU8sR0FDM0IsSUFFSXFFLEVBQUsxRCxFQUZMOEYsRUFBUyxHQUNUcTZELEVBQWF0aEUsT0FBT2tCLEtBQUtWLEdBRzdCLElBQUtXLEVBQUksRUFBR0EsRUFBSW1nRSxFQUFXMWdFLE9BQVFPLElBQ2pDMEQsRUFBTXk4RCxFQUFXbmdFLEdBQ2JrZ0UsRUFBU3pyRCxRQUFRL1EsSUFBUSxJQUM3Qm9DLEVBQU9wQyxHQUFPckUsRUFBT3FFLElBR3ZCLE9BQU9vQyxHQUlUNUYsRUFBT0MsUUFBUCxRQUE0QkQsRUFBT0MsUUFBU0QsRUFBT0MsUUFBUXErRCxZQUFhLEcsT0NoQnhFLFNBQVM0QixFQUFnQnZCLEVBQUd6bkMsR0FPMUIsT0FOQWwzQixFQUFPQyxRQUFVaWdFLEVBQWtCdmhFLE9BQU8yZ0UsZ0JBQWtCLFNBQXlCWCxFQUFHem5DLEdBRXRGLE9BREF5bkMsRUFBRXdCLFVBQVlqcEMsRUFDUHluQyxHQUdUMytELEVBQU9DLFFBQVAsUUFBNEJELEVBQU9DLFFBQVNELEVBQU9DLFFBQVFxK0QsWUFBYSxFQUNqRTRCLEVBQWdCdkIsRUFBR3puQyxHQUc1QmwzQixFQUFPQyxRQUFVaWdFLEVBQ2pCbGdFLEVBQU9DLFFBQVAsUUFBNEJELEVBQU9DLFFBQVNELEVBQU9DLFFBQVFxK0QsWUFBYSxHLGVDWHhFLElBQUk4QixFQUFvQixFQUFRLE1BRTVCQyxFQUFrQixFQUFRLE1BRTFCM0IsRUFBNkIsRUFBUSxNQUVyQzRCLEVBQW9CLEVBQVEsTUFNaEN0Z0UsRUFBT0MsUUFKUCxTQUE0QndFLEdBQzFCLE9BQU8yN0QsRUFBa0IzN0QsSUFBUTQ3RCxFQUFnQjU3RCxJQUFRaTZELEVBQTJCajZELElBQVE2N0QsS0FJOUZ0Z0UsRUFBT0MsUUFBUCxRQUE0QkQsRUFBT0MsUUFBU0QsRUFBT0MsUUFBUXErRCxZQUFhLEcsZUNieEUsSUFBSUMsRUFBbUIsRUFBUSxNQVcvQnYrRCxFQUFPQyxRQVRQLFNBQXFDMCtELEVBQUc0QixHQUN0QyxHQUFLNUIsRUFBTCxDQUNBLEdBQWlCLGlCQUFOQSxFQUFnQixPQUFPSixFQUFpQkksRUFBRzRCLEdBQ3RELElBQUluN0QsRUFBSXpHLE9BQU9DLFVBQVVDLFNBQVNFLEtBQUs0L0QsR0FBR3gwRCxNQUFNLEdBQUksR0FFcEQsTUFEVSxXQUFOL0UsR0FBa0J1NUQsRUFBRWovRCxjQUFhMEYsRUFBSXU1RCxFQUFFai9ELFlBQVlrQyxNQUM3QyxRQUFOd0QsR0FBcUIsUUFBTkEsRUFBb0JiLE1BQU1zQixLQUFLODRELEdBQ3hDLGNBQU52NUQsR0FBcUIsMkNBQTJDa0YsS0FBS2xGLEdBQVdtNUQsRUFBaUJJLEVBQUc0QixRQUF4RyxJQUlGdmdFLEVBQU9DLFFBQVAsUUFBNEJELEVBQU9DLFFBQVNELEVBQU9DLFFBQVFxK0QsWUFBYSxHLGVDWnhFLElBQUlrQyxFQUFVLEVBQVEsTUFLdEJ4Z0UsRUFBT0MsUUFtWlAsU0FBU3dnRSxFQUFjam9CLEVBQU0zNEMsRUFBTWlRLEdBUWpDLE9BUEswd0QsRUFBUTNnRSxLQUNYaVEsRUFBa0NqUSxHQUFRaVEsRUFDMUNqUSxFQUFPLElBR1RpUSxFQUFVQSxHQUFXLEdBRWpCMG9DLGFBQWdCa29CLE9BbEp0QixTQUF5QmxvQixFQUFNMzRDLEdBRTdCLElBQUk4Z0UsRUFBU25vQixFQUFLcjVDLE9BQU9zTixNQUFNLGFBRS9CLEdBQUlrMEQsRUFDRixJQUFLLElBQUk3Z0UsRUFBSSxFQUFHQSxFQUFJNmdFLEVBQU9waEUsT0FBUU8sSUFDakNELEVBQUtMLEtBQUssQ0FDUm9DLEtBQU05QixFQUNOOGdFLE9BQVEsS0FDUkMsVUFBVyxLQUNYQyxVQUFVLEVBQ1ZsNkMsUUFBUSxFQUNSbTZDLFNBQVMsRUFDVEMsVUFBVSxFQUNWQyxRQUFTLE9BS2YsT0FBT0MsRUFBVzFvQixFQUFNMzRDLEdBZ0lmc2hFLENBQWUzb0IsRUFBNEIsR0FHaERnb0IsRUFBUWhvQixHQXhIZCxTQUF3QkEsRUFBTTM0QyxFQUFNaVEsR0FHbEMsSUFGQSxJQUFJc3hELEVBQVEsR0FFSHRoRSxFQUFJLEVBQUdBLEVBQUkwNEMsRUFBS2o1QyxPQUFRTyxJQUMvQnNoRSxFQUFNNWhFLEtBQUtpaEUsRUFBYWpvQixFQUFLMTRDLEdBQUlELEVBQU1pUSxHQUFTM1EsUUFLbEQsT0FBTytoRSxFQUZNLElBQUlSLE9BQU8sTUFBUVUsRUFBTS83RCxLQUFLLEtBQU8sSUFBSytTLEVBQU10SSxJQUVuQ2pRLEdBZ0hqQndoRSxDQUFvQyxFQUE4QixFQUFRdnhELEdBckdyRixTQUF5QjBvQyxFQUFNMzRDLEVBQU1pUSxHQUNuQyxPQUFPd3hELEVBQWVDLEVBQU0vb0IsRUFBTTFvQyxHQUFValEsRUFBTWlRLEdBdUczQzB4RCxDQUFxQyxFQUE4QixFQUFRMXhELElBbGFwRjlQLEVBQU9DLFFBQVFzaEUsTUFBUUEsRUFDdkJ2aEUsRUFBT0MsUUFBUXdoRSxRQXNHZixTQUFrQkMsRUFBSzV4RCxHQUNyQixPQUFPNnhELEVBQWlCSixFQUFNRyxFQUFLNXhELEdBQVVBLElBdEcvQzlQLEVBQU9DLFFBQVEwaEUsaUJBQW1CQSxFQUNsQzNoRSxFQUFPQyxRQUFRcWhFLGVBQWlCQSxFQU9oQyxJQUFJTSxFQUFjLElBQUlsQixPQUFPLENBRzNCLFVBT0EsMEdBQ0FyN0QsS0FBSyxLQUFNLEtBU2IsU0FBU2s4RCxFQUFPRyxFQUFLNXhELEdBUW5CLElBUEEsSUFLSXVtQyxFQUxBd3JCLEVBQVMsR0FDVHIrRCxFQUFNLEVBQ05tMkIsRUFBUSxFQUNSNmUsRUFBTyxHQUNQc3BCLEVBQW1CaHlELEdBQVdBLEVBQVErd0QsV0FBYSxJQUdmLE9BQWhDeHFCLEVBQU11ckIsRUFBWUcsS0FBS0wsS0FBZSxDQUM1QyxJQUFJeDVELEVBQUltdUMsRUFBSSxHQUNSMnJCLEVBQVUzckIsRUFBSSxHQUNkeHFCLEVBQVN3cUIsRUFBSTFjLE1BS2pCLEdBSkE2ZSxHQUFRa3BCLEVBQUl2M0QsTUFBTXd2QixFQUFPOU4sR0FDekI4TixFQUFROU4sRUFBUzNqQixFQUFFM0ksT0FHZnlpRSxFQUNGeHBCLEdBQVF3cEIsRUFBUSxPQURsQixDQUtBLElBQUluc0MsRUFBTzZyQyxFQUFJL25DLEdBQ1hpbkMsRUFBU3ZxQixFQUFJLEdBQ2J6MEMsRUFBT3kwQyxFQUFJLEdBQ1g3bkIsRUFBVTZuQixFQUFJLEdBQ2Q0ckIsRUFBUTVyQixFQUFJLEdBQ1o2ckIsRUFBVzdyQixFQUFJLEdBQ2YycUIsRUFBVzNxQixFQUFJLEdBR2ZtQyxJQUNGcXBCLEVBQU9yaUUsS0FBS2c1QyxHQUNaQSxFQUFPLElBR1QsSUFBSXVvQixFQUFvQixNQUFWSCxHQUEwQixNQUFSL3FDLEdBQWdCQSxJQUFTK3FDLEVBQ3JEaDZDLEVBQXNCLE1BQWJzN0MsR0FBaUMsTUFBYkEsRUFDN0JwQixFQUF3QixNQUFib0IsR0FBaUMsTUFBYkEsRUFDL0JyQixFQUFZeHFCLEVBQUksSUFBTXlyQixFQUN0QmIsRUFBVXp5QyxHQUFXeXpDLEVBRXpCSixFQUFPcmlFLEtBQUssQ0FDVm9DLEtBQU1BLEdBQVE0QixJQUNkbzlELE9BQVFBLEdBQVUsR0FDbEJDLFVBQVdBLEVBQ1hDLFNBQVVBLEVBQ1ZsNkMsT0FBUUEsRUFDUm02QyxRQUFTQSxFQUNUQyxXQUFZQSxFQUNaQyxRQUFTQSxFQUFVa0IsRUFBWWxCLEdBQVlELEVBQVcsS0FBTyxLQUFPb0IsRUFBYXZCLEdBQWEsU0FjbEcsT0FUSWxuQyxFQUFRK25DLEVBQUluaUUsU0FDZGk1QyxHQUFRa3BCLEVBQUlXLE9BQU8xb0MsSUFJakI2ZSxHQUNGcXBCLEVBQU9yaUUsS0FBS2c1QyxHQUdQcXBCLEVBb0JULFNBQVNTLEVBQTBCWixHQUNqQyxPQUFPYSxVQUFVYixHQUFLcjlELFFBQVEsV0FBVyxTQUFVUixHQUNqRCxNQUFPLElBQU1BLEVBQUUyK0QsV0FBVyxHQUFHM2pFLFNBQVMsSUFBSW9MLGlCQW1COUMsU0FBUzAzRCxFQUFrQkUsRUFBUS94RCxHQUtqQyxJQUhBLElBQUkyeUQsRUFBVSxJQUFJbCtELE1BQU1zOUQsRUFBT3RpRSxRQUd0Qk8sRUFBSSxFQUFHQSxFQUFJK2hFLEVBQU90aUUsT0FBUU8sSUFDUixpQkFBZCtoRSxFQUFPL2hFLEtBQ2hCMmlFLEVBQVEzaUUsR0FBSyxJQUFJNGdFLE9BQU8sT0FBU21CLEVBQU8vaEUsR0FBR21oRSxRQUFVLEtBQU03b0QsRUFBTXRJLEtBSXJFLE9BQU8sU0FBVXF2RCxFQUFLdUQsR0FNcEIsSUFMQSxJQUFJbHFCLEVBQU8sR0FDUHYxQixFQUFPazhDLEdBQU8sR0FFZHdELEdBRFVELEdBQVEsSUFDREUsT0FBU04sRUFBMkJqNkQsbUJBRWhEdkksRUFBSSxFQUFHQSxFQUFJK2hFLEVBQU90aUUsT0FBUU8sSUFBSyxDQUN0QyxJQUFJK2lFLEVBQVFoQixFQUFPL2hFLEdBRW5CLEdBQXFCLGlCQUFWK2lFLEVBQVgsQ0FNQSxJQUNJQyxFQURBdDBELEVBQVF5VSxFQUFLNC9DLEVBQU1qaEUsTUFHdkIsR0FBYSxNQUFUNE0sRUFBZSxDQUNqQixHQUFJcTBELEVBQU0vQixTQUFVLENBRWQrQixFQUFNOUIsVUFDUnZvQixHQUFRcXFCLEVBQU1qQyxRQUdoQixTQUVBLE1BQU0sSUFBSTk3RCxVQUFVLGFBQWUrOUQsRUFBTWpoRSxLQUFPLG1CQUlwRCxHQUFJNCtELEVBQVFoeUQsR0FBWixDQUNFLElBQUtxMEQsRUFBTWo4QyxPQUNULE1BQU0sSUFBSTloQixVQUFVLGFBQWUrOUQsRUFBTWpoRSxLQUFPLGtDQUFvQ3dyQyxLQUFLQyxVQUFVNytCLEdBQVMsS0FHOUcsR0FBcUIsSUFBakJBLEVBQU1qUCxPQUFjLENBQ3RCLEdBQUlzakUsRUFBTS9CLFNBQ1IsU0FFQSxNQUFNLElBQUloOEQsVUFBVSxhQUFlKzlELEVBQU1qaEUsS0FBTyxxQkFJcEQsSUFBSyxJQUFJbWhFLEVBQUksRUFBR0EsRUFBSXYwRCxFQUFNalAsT0FBUXdqRSxJQUFLLENBR3JDLEdBRkFELEVBQVVILEVBQU9uMEQsRUFBTXUwRCxLQUVsQk4sRUFBUTNpRSxHQUFHd0ssS0FBS3c0RCxHQUNuQixNQUFNLElBQUloK0QsVUFBVSxpQkFBbUIrOUQsRUFBTWpoRSxLQUFPLGVBQWlCaWhFLEVBQU01QixRQUFVLG9CQUFzQjd6QixLQUFLQyxVQUFVeTFCLEdBQVcsS0FHdkl0cUIsSUFBZSxJQUFOdXFCLEVBQVVGLEVBQU1qQyxPQUFTaUMsRUFBTWhDLFdBQWFpQyxPQXBCekQsQ0E0QkEsR0FGQUEsRUFBVUQsRUFBTTdCLFNBNUVidUIsVUE0RXVDL3pELEdBNUV4Qm5LLFFBQVEsU0FBUyxTQUFVUixHQUMvQyxNQUFPLElBQU1BLEVBQUUyK0QsV0FBVyxHQUFHM2pFLFNBQVMsSUFBSW9MLGlCQTJFVzA0RCxFQUFPbjBELElBRXJEaTBELEVBQVEzaUUsR0FBR3dLLEtBQUt3NEQsR0FDbkIsTUFBTSxJQUFJaCtELFVBQVUsYUFBZSs5RCxFQUFNamhFLEtBQU8sZUFBaUJpaEUsRUFBTTVCLFFBQVUsb0JBQXNCNkIsRUFBVSxLQUduSHRxQixHQUFRcXFCLEVBQU1qQyxPQUFTa0MsUUFyRHJCdHFCLEdBQVFxcUIsRUF3RFosT0FBT3JxQixHQVVYLFNBQVM0cEIsRUFBY1YsR0FDckIsT0FBT0EsRUFBSXI5RCxRQUFRLDZCQUE4QixRQVNuRCxTQUFTODlELEVBQWFGLEdBQ3BCLE9BQU9BLEVBQU01OUQsUUFBUSxnQkFBaUIsUUFVeEMsU0FBUzY4RCxFQUFZNTJDLEVBQUl6cUIsR0FFdkIsT0FEQXlxQixFQUFHenFCLEtBQU9BLEVBQ0h5cUIsRUFTVCxTQUFTbFMsRUFBT3RJLEdBQ2QsT0FBT0EsR0FBV0EsRUFBUWt6RCxVQUFZLEdBQUssSUF3RTdDLFNBQVMxQixFQUFnQk8sRUFBUWhpRSxFQUFNaVEsR0FDaEMwd0QsRUFBUTNnRSxLQUNYaVEsRUFBa0NqUSxHQUFRaVEsRUFDMUNqUSxFQUFPLElBVVQsSUFMQSxJQUFJb2pFLEdBRkpuekQsRUFBVUEsR0FBVyxJQUVBbXpELE9BQ2pCajJDLEdBQXNCLElBQWhCbGQsRUFBUWtkLElBQ2RrMkMsRUFBUSxHQUdIcGpFLEVBQUksRUFBR0EsRUFBSStoRSxFQUFPdGlFLE9BQVFPLElBQUssQ0FDdEMsSUFBSStpRSxFQUFRaEIsRUFBTy9oRSxHQUVuQixHQUFxQixpQkFBVitpRSxFQUNUSyxHQUFTZCxFQUFhUyxPQUNqQixDQUNMLElBQUlqQyxFQUFTd0IsRUFBYVMsRUFBTWpDLFFBQzVCcHlDLEVBQVUsTUFBUXEwQyxFQUFNNUIsUUFBVSxJQUV0Q3BoRSxFQUFLTCxLQUFLcWpFLEdBRU5BLEVBQU1qOEMsU0FDUjRILEdBQVcsTUFBUW95QyxFQUFTcHlDLEVBQVUsTUFheEMwMEMsR0FOSTEwQyxFQUpBcTBDLEVBQU0vQixTQUNIK0IsRUFBTTlCLFFBR0NILEVBQVMsSUFBTXB5QyxFQUFVLEtBRnpCLE1BQVFveUMsRUFBUyxJQUFNcHlDLEVBQVUsTUFLbkNveUMsRUFBUyxJQUFNcHlDLEVBQVUsS0FPekMsSUFBSXF5QyxFQUFZdUIsRUFBYXR5RCxFQUFRK3dELFdBQWEsS0FDOUNzQyxFQUFvQkQsRUFBTS80RCxPQUFPMDJELEVBQVV0aEUsVUFBWXNoRSxFQWtCM0QsT0FaS29DLElBQ0hDLEdBQVNDLEVBQW9CRCxFQUFNLzRELE1BQU0sR0FBSTAyRCxFQUFVdGhFLFFBQVUyakUsR0FBUyxNQUFRckMsRUFBWSxXQUk5RnFDLEdBREVsMkMsRUFDTyxJQUlBaTJDLEdBQVVFLEVBQW9CLEdBQUssTUFBUXRDLEVBQVksTUFHM0RLLEVBQVcsSUFBSVIsT0FBTyxJQUFNd0MsRUFBTzlxRCxFQUFNdEksSUFBV2pRLEssNEJDalloRCxJQUFJMlgsRUFBRSxFQUFRLE1BQWlCcFMsRUFBRSxNQUFNOHhCLEVBQUUsTUFBTWozQixFQUFRaXdDLFNBQVMsTUFBTWp3QyxFQUFRcXdDLFdBQVcsTUFBTXJ3QyxFQUFRb3dDLFNBQVMsTUFBTSxJQUFJdGhCLEVBQUUsTUFBTTVtQixFQUFFLE1BQU02bUIsRUFBRSxNQUFNL3VCLEVBQVFzd0MsU0FBUyxNQUFNLElBQUl6aEIsRUFBRSxNQUFNRyxFQUFFLE1BQ3BNLEdBQUcsbUJBQW9CbGpCLFFBQVFBLE9BQU9DLElBQUksQ0FBQyxJQUFJNGlCLEVBQUU3aUIsT0FBT0MsSUFBSTVHLEVBQUV3cEIsRUFBRSxpQkFBaUJzSSxFQUFFdEksRUFBRSxnQkFBZ0IzdUIsRUFBUWl3QyxTQUFTdGhCLEVBQUUsa0JBQWtCM3VCLEVBQVFxd0MsV0FBVzFoQixFQUFFLHFCQUFxQjN1QixFQUFRb3dDLFNBQVN6aEIsRUFBRSxrQkFBa0JHLEVBQUVILEVBQUUsa0JBQWtCem1CLEVBQUV5bUIsRUFBRSxpQkFBaUJJLEVBQUVKLEVBQUUscUJBQXFCM3VCLEVBQVFzd0MsU0FBUzNoQixFQUFFLGtCQUFrQkUsRUFBRUYsRUFBRSxjQUFjSyxFQUFFTCxFQUFFLGNBQWMsSUFBSUQsRUFBRSxtQkFBb0I1aUIsUUFBUUEsT0FBT0ssU0FDdFIsU0FBU3lpQixFQUFFdndCLEdBQUcsSUFBSSxJQUFJQyxFQUFFLHlEQUF5REQsRUFBRXVGLEVBQUUsRUFBRUEsRUFBRTlCLFVBQVV4QyxPQUFPc0UsSUFBSXRGLEdBQUcsV0FBVzhKLG1CQUFtQnRHLFVBQVU4QixJQUFJLE1BQU0seUJBQXlCdkYsRUFBRSxXQUFXQyxFQUFFLGlIQUNwVSxJQUFJMDRCLEVBQUUsQ0FBQ1UsVUFBVSxXQUFXLE9BQU0sR0FBSU8sbUJBQW1CLGFBQWFELG9CQUFvQixhQUFhSixnQkFBZ0IsY0FBY3p1QixFQUFFLEdBQUcsU0FBUyt0QixFQUFFNzRCLEVBQUVDLEVBQUVzRixHQUFHbEQsS0FBSzBGLE1BQU0vSCxFQUFFcUMsS0FBS2cxQixRQUFRcDNCLEVBQUVvQyxLQUFLNjJCLEtBQUtwdUIsRUFBRXpJLEtBQUs2M0IsUUFBUTMwQixHQUFHb3pCLEVBQ3BOLFNBQVNwdEIsS0FBNkIsU0FBU29DLEVBQUUzTixFQUFFQyxFQUFFc0YsR0FBR2xELEtBQUswRixNQUFNL0gsRUFBRXFDLEtBQUtnMUIsUUFBUXAzQixFQUFFb0MsS0FBSzYyQixLQUFLcHVCLEVBQUV6SSxLQUFLNjNCLFFBQVEzMEIsR0FBR296QixFQURzR0UsRUFBRXY0QixVQUFVaXRDLGlCQUFpQixHQUFHMVUsRUFBRXY0QixVQUFVczBDLFNBQVMsU0FBUzUwQyxFQUFFQyxHQUFHLEdBQUcsaUJBQWtCRCxHQUFHLG1CQUFvQkEsR0FBRyxNQUFNQSxFQUFFLE1BQU00RixNQUFNMnFCLEVBQUUsS0FBS2x1QixLQUFLNjNCLFFBQVFYLGdCQUFnQmwzQixLQUFLckMsRUFBRUMsRUFBRSxhQUFhNDRCLEVBQUV2NEIsVUFBVXEzQyxZQUFZLFNBQVMzM0MsR0FBR3FDLEtBQUs2M0IsUUFBUU4sbUJBQW1CdjNCLEtBQUtyQyxFQUFFLGdCQUNuZHVMLEVBQUVqTCxVQUFVdTRCLEVBQUV2NEIsVUFBc0YsSUFBSWdlLEVBQUUzUSxFQUFFck4sVUFBVSxJQUFJaUwsRUFBRStTLEVBQUVsZCxZQUFZdU0sRUFBRXVMLEVBQUVvRixFQUFFdWEsRUFBRXY0QixXQUFXZ2UsRUFBRXliLHNCQUFxQixFQUFHLElBQUlySyxFQUFFLENBQUNwVixRQUFRLE1BQU0wWSxFQUFFM3lCLE9BQU9DLFVBQVVlLGVBQWU0eEIsRUFBRSxDQUFDL3RCLEtBQUksRUFBRzIxQixLQUFJLEVBQUdpcUMsUUFBTyxFQUFHQyxVQUFTLEdBQ2hTLFNBQVM5ekMsRUFBRWp4QixFQUFFQyxFQUFFc0YsR0FBRyxJQUFJSCxFQUFFSSxFQUFFLEdBQUdrSixFQUFFLEtBQUtDLEVBQUUsS0FBSyxHQUFHLE1BQU0xTyxFQUFFLElBQUltRixVQUFLLElBQVNuRixFQUFFNDZCLE1BQU1sc0IsRUFBRTFPLEVBQUU0NkIsVUFBSyxJQUFTNTZCLEVBQUVpRixNQUFNd0osRUFBRSxHQUFHek8sRUFBRWlGLEtBQUtqRixFQUFFK3lCLEVBQUV2eUIsS0FBS1IsRUFBRW1GLEtBQUs2dEIsRUFBRTV4QixlQUFlK0QsS0FBS0ksRUFBRUosR0FBR25GLEVBQUVtRixJQUFJLElBQUkyRixFQUFFdEgsVUFBVXhDLE9BQU8sRUFBRSxHQUFHLElBQUk4SixFQUFFdkYsRUFBRTRMLFNBQVM3TCxPQUFPLEdBQUcsRUFBRXdGLEVBQUUsQ0FBQyxJQUFJLElBQUl0RixFQUFFUSxNQUFNOEUsR0FBR25CLEVBQUUsRUFBRUEsRUFBRW1CLEVBQUVuQixJQUFJbkUsRUFBRW1FLEdBQUduRyxVQUFVbUcsRUFBRSxHQUFHcEUsRUFBRTRMLFNBQVMzTCxFQUFFLEdBQUd6RixHQUFHQSxFQUFFNkMsYUFBYSxJQUFJdUMsS0FBSzJGLEVBQUUvSyxFQUFFNkMsa0JBQWUsSUFBUzJDLEVBQUVKLEtBQUtJLEVBQUVKLEdBQUcyRixFQUFFM0YsSUFBSSxNQUFNLENBQUM0SixTQUFTbEksRUFBRTFELEtBQUtwRCxFQUFFa0YsSUFBSXdKLEVBQUVtc0IsSUFBSWxzQixFQUFFNUcsTUFBTXZDLEVBQUVzMUIsT0FBT3BMLEVBQUVwVixTQUN4VSxTQUFTOFcsRUFBRXB4QixHQUFHLE1BQU0saUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUVnUCxXQUFXbEksRUFBcUcsSUFBSXFzQixFQUFFLE9BQU8sU0FBU0MsRUFBRXB6QixFQUFFQyxHQUFHLE1BQU0saUJBQWtCRCxHQUFHLE9BQU9BLEdBQUcsTUFBTUEsRUFBRWtGLElBQTdLLFNBQWdCbEYsR0FBRyxJQUFJQyxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksTUFBTSxNQUFNLElBQUlELEVBQUUrRixRQUFRLFNBQVEsU0FBUy9GLEdBQUcsT0FBT0MsRUFBRUQsTUFBbUZnbEUsQ0FBTyxHQUFHaGxFLEVBQUVrRixLQUFLakYsRUFBRU0sU0FBUyxJQUM1VyxTQUFTcTFCLEVBQUU1MUIsRUFBRUMsRUFBRXNGLEVBQUVILEVBQUVJLEdBQUcsSUFBSWtKLFNBQVMxTyxFQUFLLGNBQWMwTyxHQUFHLFlBQVlBLElBQUUxTyxFQUFFLE1BQUssSUFBSTJPLEdBQUUsRUFBRyxHQUFHLE9BQU8zTyxFQUFFMk8sR0FBRSxPQUFRLE9BQU9ELEdBQUcsSUFBSyxTQUFTLElBQUssU0FBU0MsR0FBRSxFQUFHLE1BQU0sSUFBSyxTQUFTLE9BQU8zTyxFQUFFZ1AsVUFBVSxLQUFLbEksRUFBRSxLQUFLOHhCLEVBQUVqcUIsR0FBRSxHQUFJLEdBQUdBLEVBQUUsT0FBV25KLEVBQUVBLEVBQU5tSixFQUFFM08sR0FBU0EsRUFBRSxLQUFLb0YsRUFBRSxJQUFJZ3VCLEVBQUV6a0IsRUFBRSxHQUFHdkosRUFBRWEsTUFBTUMsUUFBUVYsSUFBSUQsRUFBRSxHQUFHLE1BQU12RixJQUFJdUYsRUFBRXZGLEVBQUUrRixRQUFRb3RCLEVBQUUsT0FBTyxLQUFLeUMsRUFBRXB3QixFQUFFdkYsRUFBRXNGLEVBQUUsSUFBRyxTQUFTdkYsR0FBRyxPQUFPQSxNQUFLLE1BQU13RixJQUFJNHJCLEVBQUU1ckIsS0FBS0EsRUFEL1csU0FBV3hGLEVBQUVDLEdBQUcsTUFBTSxDQUFDK08sU0FBU2xJLEVBQUUxRCxLQUFLcEQsRUFBRW9ELEtBQUs4QixJQUFJakYsRUFBRTQ2QixJQUFJNzZCLEVBQUU2NkIsSUFBSTl5QixNQUFNL0gsRUFBRStILE1BQU0reUIsT0FBTzk2QixFQUFFODZCLFFBQzRSNUosQ0FBRTFyQixFQUFFRCxJQUFJQyxFQUFFTixLQUFLeUosR0FBR0EsRUFBRXpKLE1BQU1NLEVBQUVOLElBQUksSUFBSSxHQUFHTSxFQUFFTixLQUFLYSxRQUFRb3RCLEVBQUUsT0FBTyxLQUFLbnpCLElBQUlDLEVBQUVpQixLQUFLc0UsSUFBSSxFQUF5QixHQUF2Qm1KLEVBQUUsRUFBRXZKLEVBQUUsS0FBS0EsRUFBRSxJQUFJQSxFQUFFLElBQU9hLE1BQU1DLFFBQVFsRyxHQUFHLElBQUksSUFBSStLLEVBQ3pmLEVBQUVBLEVBQUUvSyxFQUFFaUIsT0FBTzhKLElBQUksQ0FBUSxJQUFJdEYsRUFBRUwsRUFBRWd1QixFQUFmMWtCLEVBQUUxTyxFQUFFK0ssR0FBZUEsR0FBRzRELEdBQUdpbkIsRUFBRWxuQixFQUFFek8sRUFBRXNGLEVBQUVFLEVBQUVELFFBQVEsR0FBVSxtQkFBUEMsRUFOaEUsU0FBV3pGLEdBQUcsT0FBRyxPQUFPQSxHQUFHLGlCQUFrQkEsRUFBUyxLQUFzQyxtQkFBakNBLEVBQUVxd0IsR0FBR3J3QixFQUFFcXdCLElBQUlyd0IsRUFBRSxlQUEwQ0EsRUFBRSxLQU1sRDhKLENBQUU5SixJQUF5QixJQUFJQSxFQUFFeUYsRUFBRWhGLEtBQUtULEdBQUcrSyxFQUFFLElBQUkyRCxFQUFFMU8sRUFBRXUzQixRQUFRc0UsTUFBNkJsdEIsR0FBR2luQixFQUExQmxuQixFQUFFQSxFQUFFd0IsTUFBMEJqUSxFQUFFc0YsRUFBdEJFLEVBQUVMLEVBQUVndUIsRUFBRTFrQixFQUFFM0QsS0FBa0J2RixRQUFRLEdBQUcsV0FBV2tKLEVBQUUsTUFBTXpPLEVBQUUsR0FBR0QsRUFBRTRGLE1BQU0ycUIsRUFBRSxHQUFHLG9CQUFvQnR3QixFQUFFLHFCQUFxQkksT0FBT2tCLEtBQUt2QixHQUFHK0csS0FBSyxNQUFNLElBQUk5RyxJQUFJLE9BQU8wTyxFQUFFLFNBQVNndUIsRUFBRTM4QixFQUFFQyxFQUFFc0YsR0FBRyxHQUFHLE1BQU12RixFQUFFLE9BQU9BLEVBQUUsSUFBSW9GLEVBQUUsR0FBR0ksRUFBRSxFQUFtRCxPQUFqRG93QixFQUFFNTFCLEVBQUVvRixFQUFFLEdBQUcsSUFBRyxTQUFTcEYsR0FBRyxPQUFPQyxFQUFFUSxLQUFLOEUsRUFBRXZGLEVBQUV3RixRQUFjSixFQUMxWixTQUFTK3JCLEVBQUVueEIsR0FBRyxJQUFJLElBQUlBLEVBQUVpbEUsUUFBUSxDQUFDLElBQUlobEUsRUFBRUQsRUFBRWtsRSxRQUFRamxFLEVBQUVBLElBQUlELEVBQUVpbEUsUUFBUSxFQUFFamxFLEVBQUVrbEUsUUFBUWpsRSxFQUFFQSxFQUFFd29DLE1BQUssU0FBU3hvQyxHQUFHLElBQUlELEVBQUVpbEUsVUFBVWhsRSxFQUFFQSxFQUFFa2xFLFFBQVFubEUsRUFBRWlsRSxRQUFRLEVBQUVqbEUsRUFBRWtsRSxRQUFRamxFLE1BQUksU0FBU0EsR0FBRyxJQUFJRCxFQUFFaWxFLFVBQVVqbEUsRUFBRWlsRSxRQUFRLEVBQUVqbEUsRUFBRWtsRSxRQUFRamxFLE1BQUssR0FBRyxJQUFJRCxFQUFFaWxFLFFBQVEsT0FBT2psRSxFQUFFa2xFLFFBQVEsTUFBTWxsRSxFQUFFa2xFLFFBQVMsSUFBSWpuQyxFQUFFLENBQUMzakIsUUFBUSxNQUFNLFNBQVM0akIsSUFBSSxJQUFJbCtCLEVBQUVpK0IsRUFBRTNqQixRQUFRLEdBQUcsT0FBT3RhLEVBQUUsTUFBTTRGLE1BQU0ycUIsRUFBRSxNQUFNLE9BQU92d0IsRUFBRSxJQUFJbStCLEVBQUUsQ0FBQ0wsdUJBQXVCRyxFQUFFN0gsd0JBQXdCLENBQUN6WSxXQUFXLEdBQUc4a0Isa0JBQWtCL1MsRUFBRTAxQyxxQkFBcUIsQ0FBQzlxRCxTQUFRLEdBQUk3VCxPQUFPeVMsR0FDamV2WCxFQUFRMFAsU0FBUyxDQUFDeEssSUFBSTgxQixFQUFFejFCLFFBQVEsU0FBU2xILEVBQUVDLEVBQUVzRixHQUFHbzNCLEVBQUUzOEIsR0FBRSxXQUFXQyxFQUFFa1osTUFBTTlXLEtBQUtvQixhQUFZOEIsSUFBSWcxQyxNQUFNLFNBQVN2NkMsR0FBRyxJQUFJQyxFQUFFLEVBQXVCLE9BQXJCMDhCLEVBQUUzOEIsR0FBRSxXQUFXQyxPQUFhQSxHQUFHb2xFLFFBQVEsU0FBU3JsRSxHQUFHLE9BQU8yOEIsRUFBRTM4QixHQUFFLFNBQVNBLEdBQUcsT0FBT0EsTUFBSyxJQUFJc2xFLEtBQUssU0FBU3RsRSxHQUFHLElBQUlveEIsRUFBRXB4QixHQUFHLE1BQU00RixNQUFNMnFCLEVBQUUsTUFBTSxPQUFPdndCLElBQUkyQixFQUFRczNCLFVBQVVKLEVBQUVsM0IsRUFBUTRqRSxjQUFjNTNELEVBQUVoTSxFQUFRNEssbURBQW1ENHhCLEVBQ2hYeDhCLEVBQVE2akUsYUFBYSxTQUFTeGxFLEVBQUVDLEVBQUVzRixHQUFHLEdBQUcsTUFBT3ZGLEVBQWMsTUFBTTRGLE1BQU0ycUIsRUFBRSxJQUFJdndCLElBQUksSUFBSW9GLEVBQUU4VCxFQUFFLEdBQUdsWixFQUFFK0gsT0FBT3ZDLEVBQUV4RixFQUFFa0YsSUFBSXdKLEVBQUUxTyxFQUFFNjZCLElBQUlsc0IsRUFBRTNPLEVBQUU4NkIsT0FBTyxHQUFHLE1BQU03NkIsRUFBRSxDQUFvRSxRQUFuRSxJQUFTQSxFQUFFNDZCLE1BQU1uc0IsRUFBRXpPLEVBQUU0NkIsSUFBSWxzQixFQUFFK2dCLEVBQUVwVixjQUFTLElBQVNyYSxFQUFFaUYsTUFBTU0sRUFBRSxHQUFHdkYsRUFBRWlGLEtBQVFsRixFQUFFb0QsTUFBTXBELEVBQUVvRCxLQUFLUCxhQUFhLElBQUlrSSxFQUFFL0ssRUFBRW9ELEtBQUtQLGFBQWEsSUFBSTRDLEtBQUt4RixFQUFFK3lCLEVBQUV2eUIsS0FBS1IsRUFBRXdGLEtBQUt3dEIsRUFBRTV4QixlQUFlb0UsS0FBS0wsRUFBRUssUUFBRyxJQUFTeEYsRUFBRXdGLFNBQUksSUFBU3NGLEVBQUVBLEVBQUV0RixHQUFHeEYsRUFBRXdGLElBQUksSUFBSUEsRUFBRWhDLFVBQVV4QyxPQUFPLEVBQUUsR0FBRyxJQUFJd0UsRUFBRUwsRUFBRWdNLFNBQVM3TCxPQUFPLEdBQUcsRUFBRUUsRUFBRSxDQUFDc0YsRUFBRTlFLE1BQU1SLEdBQUcsSUFBSSxJQUFJbUUsRUFBRSxFQUFFQSxFQUFFbkUsRUFBRW1FLElBQUltQixFQUFFbkIsR0FBR25HLFVBQVVtRyxFQUFFLEdBQUd4RSxFQUFFZ00sU0FBU3JHLEVBQUUsTUFBTSxDQUFDaUUsU0FBU2xJLEVBQUUxRCxLQUFLcEQsRUFBRW9ELEtBQ3hmOEIsSUFBSU0sRUFBRXExQixJQUFJbnNCLEVBQUUzRyxNQUFNM0MsRUFBRTAxQixPQUFPbnNCLElBQUloTixFQUFRNGdELGNBQWMsU0FBU3ZpRCxFQUFFQyxHQUE4SyxZQUEzSyxJQUFTQSxJQUFJQSxFQUFFLE9BQU1ELEVBQUUsQ0FBQ2dQLFNBQVNuRixFQUFFNmtDLHNCQUFzQnp1QyxFQUFFMjJCLGNBQWM1MkIsRUFBRXlsRSxlQUFlemxFLEVBQUUwbEUsYUFBYSxFQUFFbHRCLFNBQVMsS0FBS210QixTQUFTLE9BQVFudEIsU0FBUyxDQUFDeHBDLFNBQVN5aEIsRUFBRXhoQixTQUFTalAsR0FBVUEsRUFBRTJsRSxTQUFTM2xFLEdBQUcyQixFQUFROEksY0FBY3dtQixFQUFFdHZCLEVBQVFpa0UsY0FBYyxTQUFTNWxFLEdBQUcsSUFBSUMsRUFBRWd4QixFQUFFOVEsS0FBSyxLQUFLbmdCLEdBQVksT0FBVEMsRUFBRW1ELEtBQUtwRCxFQUFTQyxHQUFHMEIsRUFBUWtrRSxVQUFVLFdBQVcsTUFBTSxDQUFDdnJELFFBQVEsT0FBTzNZLEVBQVEwaEQsV0FBVyxTQUFTcmpELEdBQUcsTUFBTSxDQUFDZ1AsU0FBUzBoQixFQUFFeHNCLE9BQU9sRSxJQUFJMkIsRUFBUW1rRSxlQUFlMTBDLEVBQzNlenZCLEVBQVFva0UsS0FBSyxTQUFTL2xFLEdBQUcsTUFBTSxDQUFDZ1AsU0FBUzJoQixFQUFFemhCLFNBQVMsQ0FBQysxRCxTQUFTLEVBQUVDLFFBQVFsbEUsR0FBR21QLE1BQU1naUIsSUFBSXh2QixFQUFRcWtFLEtBQUssU0FBU2htRSxFQUFFQyxHQUFHLE1BQU0sQ0FBQytPLFNBQVN3aEIsRUFBRXB0QixLQUFLcEQsRUFBRTRELGFBQVEsSUFBUzNELEVBQUUsS0FBS0EsSUFBSTBCLEVBQVErL0IsWUFBWSxTQUFTMWhDLEVBQUVDLEdBQUcsT0FBT2krQixJQUFJd0QsWUFBWTFoQyxFQUFFQyxJQUFJMEIsRUFBUWdnQyxXQUFXLFNBQVMzaEMsRUFBRUMsR0FBRyxPQUFPaStCLElBQUl5RCxXQUFXM2hDLEVBQUVDLElBQUkwQixFQUFRc2dDLGNBQWMsYUFBYXRnQyxFQUFRdytCLFVBQVUsU0FBU25nQyxFQUFFQyxHQUFHLE9BQU9pK0IsSUFBSWlDLFVBQVVuZ0MsRUFBRUMsSUFBSTBCLEVBQVFpZ0Msb0JBQW9CLFNBQVM1aEMsRUFBRUMsRUFBRXNGLEdBQUcsT0FBTzI0QixJQUFJMEQsb0JBQW9CNWhDLEVBQUVDLEVBQUVzRixJQUM5YzVELEVBQVFrZ0MsZ0JBQWdCLFNBQVM3aEMsRUFBRUMsR0FBRyxPQUFPaStCLElBQUkyRCxnQkFBZ0I3aEMsRUFBRUMsSUFBSTBCLEVBQVFtZ0MsUUFBUSxTQUFTOWhDLEVBQUVDLEdBQUcsT0FBT2krQixJQUFJNEQsUUFBUTloQyxFQUFFQyxJQUFJMEIsRUFBUW9nQyxXQUFXLFNBQVMvaEMsRUFBRUMsRUFBRXNGLEdBQUcsT0FBTzI0QixJQUFJNkQsV0FBVy9oQyxFQUFFQyxFQUFFc0YsSUFBSTVELEVBQVFxZ0MsT0FBTyxTQUFTaGlDLEdBQUcsT0FBT2srQixJQUFJOEQsT0FBT2hpQyxJQUFJMkIsRUFBUXErQixTQUFTLFNBQVNoZ0MsR0FBRyxPQUFPaytCLElBQUk4QixTQUFTaGdDLElBQUkyQixFQUFRNHRDLFFBQVEsVSw0QkNuQm5UN3RDLEVBQU9DLFFBQVUsRUFBakIsTyxlQ01GRCxFQUFPQyxRQUFVLEVBQWpCLE8sNEJDR0EsSUFBSXNqRCxFQUFvQixFQUFRLE1BRTVCZ2hCLEVBQW1CLEVBQVEsTUFFM0JwdEIsRUFBWSxFQUFRLE1BNkJ4Qm4zQyxFQUFPQyxRQTNCUCxTQUFxQ3VrRSxHQUNuQyxPQUFRQSxHQUNOLElBQUssYUFDSCxPQUFPamhCLEVBRVQsSUFBSyxlQUNILE9BQU9naEIsRUFBaUJFLG9CQUUxQixJQUFLLGFBQ0gsT0FBT0YsRUFBaUJHLGtCQUUxQixJQUFLLGFBQ0gsT0FBT0gsRUFBaUJJLGtCQUUxQixJQUFLLGNBQ0gsT0FBT0osRUFBaUJLLG1CQUUxQixJQUFLLGFBQ0gsT0FBT0wsRUFBaUJNLGtCQUUxQixJQUFLLGNBQ0gsT0FBT04sRUFBaUJPLG1CQUc4RzN0QixHQUFVLEssNEJDOUJ0SixJQUFJQyxFQUFzQixFQUFRLE1BRTlCMnRCLEVBQW9CLEVBQVEsTUFFNUI1dEIsRUFBWSxFQUFRLE1BS3BCNnRCLEdBSFUsRUFBUSxNQUVQLEVBQVEsTUFDU0Esa0JBRzVCQyxFQURZLEVBQVEsTUFDWUEsb0JBRWhDQyxFQUFhLGFBRWJDLEVBQWtCLCtCQW1mdEIsU0FBU0MsRUFBb0J2SCxFQUFPeGxCLEVBQVlndEIsR0FDOUMsR0FBWSxNQUFSQSxFQUNGLE9BQU9BLEVBR1QsSUFDSS9wQixFQUR5QmxFLEVBQW9CcnBDLE1BQ2R1dEMsTUFFL0JncUIsRUFBWWp0QixFQUFXbnFDLFNBQVNpM0QsR0FDYixpQkFBZEcsR0FBNktudUIsR0FBVSxHQUNoTSxJQUFJb3VCLEVBQVNQLEVBQWlCM3NCLEVBQVdtdEIsWUFBYWxxQixFQUFPZ3FCLEdBQ3pERyxFQUFpQjVILEVBQU05K0IsT0FBT3dtQyxFQUFRRixFQUFLSyxXQVUvQyxPQVRBRCxFQUFlRSxlQUFlTixHQUVXLE1BQXJDSSxFQUFldjNELFNBQVMsV0FHMUJ1M0QsRUFBZXQzRCxTQUFTLEtBQU0sVUFHaENrcUMsRUFBV2xxQyxTQUFTbTNELEVBQVksRUFBR0gsR0FDNUJNLEVBVVQsU0FBU0csRUFBV0MsRUFBYUMsRUFBYUMsR0FJNUMsSUFIQSxJQUNJQyxFQUR5QjV1QixFQUFvQnJwQyxNQUNmaTRELEtBRXpCN2tDLEVBQUssRUFBR0EsRUFBSzBrQyxFQUFZdG1FLE9BQVE0aEMsSUFBTSxDQUM5QyxJQUFJa2tDLEVBQU9RLEVBQVkxa0MsR0FFdkIsR0FBS2trQyxFQUFMLENBSUEsSUFBSXhuRSxFQUFPd25FLEVBQUtZLGdCQUFnQkQsR0FDNUJFLEVBQVNyb0UsR0FBUUEsRUFBSzJuRSxZQUUxQixHQUFJVSxFQUFRLENBQ1YsR0FBSUgsRUFBUTczQyxJQUFJZzRDLEdBQ2QsU0FHRkgsRUFBUXA5RCxJQUFJdTlELEdBR2RKLEVBQVl0bUUsS0FBSzZsRSxLQUlyQnJsRSxFQUFPQyxRQUFVLENBQ2ZtbEUsb0JBQXFCQSxFQUNyQmUsV0F4TkYsU0FBb0J0SSxFQUFPdUksRUFBUXZvRSxFQUFNd29FLEdBQ3ZDLElBQ0lMLEVBRHlCNXVCLEVBQW9CcnBDLE1BQ2ZpNEQsS0FROUJULEVBQVNQLEVBQWlCb0IsRUFBT1osWUFBYTNuRSxFQUFLMm5FLGFBQ25ESCxFQUFPeEgsRUFBTTl2RCxJQUFJdzNELEdBY3JCLE9BWktGLElBQ0hBLEVBQU94SCxFQUFNOStCLE9BQU93bUMsRUFBUWMsSUFHOUJoQixFQUFLaUIsZ0JBQWdCem9FLEVBQU1tb0UsR0FFSSxNQUEzQlgsRUFBS24zRCxTQUFTLFdBR2hCbTNELEVBQUtsM0QsU0FBUyxLQUFNLFVBR2ZrM0QsR0FnTVBrQixXQXpHRixTQUFvQkgsRUFBUUYsR0FDMUIsSUFBSU0sRUFBeUJwdkIsRUFBb0JycEMsTUFDN0N1dEMsRUFBUWtyQixFQUF1QmxyQixNQUMvQjBxQixFQUFPUSxFQUF1QlIsS0FFOUJ0cUIsRUFBUTBxQixFQUFPSyxpQkFBaUJuckIsR0FFcEMsR0FBS0ksRUFBTCxDQU1BLElBRkEsSUFBSWdyQixFQUVLdmxDLEVBQUssRUFBR0EsRUFBS3VhLEVBQU1uOEMsT0FBUTRoQyxJQUFNLENBQ3hDLElBQUlra0MsRUFBTzNwQixFQUFNdmEsR0FDYnRqQyxFQUFPd25FLEdBQVFBLEVBQUtZLGdCQUFnQkQsR0FFNUIsTUFBUm5vRSxHQUFnQkEsRUFBSzJuRSxjQUFnQlUsT0FDckJqaUUsSUFBZHlpRSxJQUNGQSxFQUFZaHJCLEVBQU12eEMsTUFBTSxFQUFHZzNCLFNBRU5sOUIsSUFBZHlpRSxHQUNUQSxFQUFVbG5FLEtBQUs2bEUsUUFJRHBoRSxJQUFkeWlFLEdBQ0ZOLEVBQU9PLGlCQUFpQkQsRUFBV3ByQixLQStFckNzckIsY0ExVkYsU0FBdUJSLEVBQVE1aUUsRUFBS3FqRSxHQUNsQyxJQUFJQyxFQUFZL0IsRUFBa0JHLEVBQVkxaEUsRUFBSyxNQUNuRCxPQUFPNGlFLEVBQU9ILGdCQUFnQmEsRUFBV0QsSUF5VnpDRSxnQkF0VEYsU0FBeUJDLEVBQVV4akUsRUFBS3FqRSxHQUN0QyxJQUFJQyxFQUFZL0IsRUFBa0JHLEVBQVkxaEUsRUFBSyxNQUMvQ3lqRSxFQUFhaEMsRUFBb0I2QixFQUFXRCxHQUNoRCxPQUFPN0IsRUFBaUJnQyxFQUFVQyxJQW9UbENDLGdCQTlRRixTQUF5QmQsRUFBUWUsRUFBUzl0QixHQUN4QyxJQUFJZ0MsRUFBeUJqRSxFQUFvQnJwQyxNQUM3Q3E1RCxFQUFTL3JCLEVBQXVCK3JCLE9BQ2hDOXJCLEVBQVFELEVBQXVCQyxNQUUvQkksRUFBUTBxQixFQUFPSyxpQkFBaUJuckIsR0FFcEMsR0FBS0ksRUFBTCxDQUtBLElBQUlnckIsRUFFSixHQUFjLE1BQVZydEIsRUFDRnF0QixFQUFZaHJCLEVBQU1yNEMsT0FBTzhqRSxPQUNwQixDQUNMVCxFQUFZLEdBR1osSUFGQSxJQUFJVyxHQUFjLEVBRVRsbUMsRUFBSyxFQUFHQSxFQUFLdWEsRUFBTW44QyxPQUFRNGhDLElBQU0sQ0FDeEMsSUFBSWtrQyxFQUFPM3BCLEVBQU12YSxHQUNqQnVsQyxFQUFVbG5FLEtBQUs2bEUsR0FFSCxNQUFSQSxHQU1BaHNCLElBRmFnc0IsRUFBS24zRCxTQUFTazVELEtBRzdCVixFQUFVbG5FLEtBQUsybkUsR0FDZkUsR0FBYyxHQUliQSxHQUNIWCxFQUFVbG5FLEtBQUsybkUsR0FJbkJmLEVBQU9PLGlCQUFpQkQsRUFBV3ByQixRQWpDakM4cUIsRUFBT08saUJBQWlCLENBQUNRLEdBQVU3ckIsSUF1UXJDZ3NCLGlCQTlKRixTQUEwQmxCLEVBQVFlLEVBQVM5dEIsR0FDekMsSUFBSWt1QixFQUF5Qm53QixFQUFvQnJwQyxNQUM3Q3E1RCxFQUFTRyxFQUF1QkgsT0FDaEM5ckIsRUFBUWlzQixFQUF1QmpzQixNQUUvQkksRUFBUTBxQixFQUFPSyxpQkFBaUJuckIsR0FFcEMsR0FBS0ksRUFBTCxDQUtBLElBQUlnckIsRUFFSixHQUFjLE1BQVZydEIsRUFDRnF0QixFQUFZLENBQUNTLEdBQVM5akUsT0FBT3E0QyxPQUN4QixDQUNMZ3JCLEVBQVksR0FHWixJQUZBLElBQUlXLEdBQWMsRUFFVGxtQyxFQUFLLEVBQUdBLEVBQUt1YSxFQUFNbjhDLE9BQVE0aEMsSUFBTSxDQUN4QyxJQUFJa2tDLEVBQU8zcEIsRUFBTXZhLEdBRUwsTUFBUmtrQyxHQUdFaHNCLElBRmFnc0IsRUFBS24zRCxTQUFTazVELEtBRzdCVixFQUFVbG5FLEtBQUsybkUsR0FDZkUsR0FBYyxHQUlsQlgsRUFBVWxuRSxLQUFLNmxFLEdBR1pnQyxHQUNIWCxFQUFVNTJDLFFBQVFxM0MsR0FJdEJmLEVBQU9PLGlCQUFpQkQsRUFBV3ByQixRQWhDakM4cUIsRUFBT08saUJBQWlCLENBQUNRLEdBQVU3ckIsSUF1SnJDa3NCLE9BM2lCRixTQUFnQjNKLEVBQU9qbkMsR0FDckIsSUFBSXd2QyxFQUFTdkksRUFBTTl2RCxJQUFJNm9CLEVBQVFvMEIsUUFFL0IsR0FBS29iLEVBQUwsQ0FJQSxJQUFJbHNCLEVBQXdCOUMsRUFBb0JycEMsTUFDNUN1dEMsRUFBUXBCLEVBQXNCb0IsTUFDOUJuQixFQUFhRCxFQUFzQkMsV0FDbkNxQixFQUFnQnRCLEVBQXNCc0IsY0FDdENDLEVBQWdCdkIsRUFBc0J1QixjQUN0Q0YsRUFBWXJCLEVBQXNCcUIsVUFDbENrc0IsRUFBaUJ2dEIsRUFBc0J1dEIsZUFDdkNydEIsRUFBZUYsRUFBc0JFLGFBRXJDc3RCLEVBQW1CdEIsRUFBT0gsZ0JBQWdCcnZDLEVBQVErd0MsVUFDbERDLEVBQWlCRixHQUFvQkEsRUFBaUJ6QixnQkFBZ0IxcUIsR0FFMUUsR0FBS21zQixFQUFMLENBU0EsSUFBSUcsRUFBcUI3QyxFQUFpQm9CLEVBQU9aLFlBQWE1dUMsRUFBUWt3QyxXQUNsRWdCLEVBQXdCMUIsRUFBT0gsZ0JBQWdCcnZDLEVBQVFrd0MsV0FDdkRpQixFQUFtQkQsUUFBcUVBLEVBQXdCakssRUFBTTl2RCxJQUFJODVELEdBQzFIRyxFQUFpQkQsR0FBb0JBLEVBQWlCOUIsZ0JBQWdCMXFCLEdBRTFFLEdBQUt3c0IsRUEwQkUsQ0FDd0IsTUFBekJELEdBR0YxQixFQUFPRSxnQkFBZ0J5QixFQUFrQm54QyxFQUFRa3dDLFdBR25ELElBQUltQixFQUFjRixFQUtkRyxFQUFlUixFQUFpQmpCLGlCQUFpQm5yQixHQUVqRDRzQixJQUNGQSxFQUFlQSxFQUFhL2lFLEtBQUksU0FBVWtnRSxHQUN4QyxPQUFPRCxFQUFvQnZILEVBQU9vSyxFQUFhNUMsT0FJbkQsSUFBSThDLEVBQVlGLEVBQVl4QixpQkFBaUJuckIsR0FFekM4c0IsRUFBZUgsRUFBWWhDLGdCQUFnQjFxQixHQUUvQzBzQixFQUFZdEMsZUFBZStCLEdBR3ZCUyxHQUNGRixFQUFZdEIsaUJBQWlCd0IsRUFBVzdzQixHQUd0QzhzQixHQUNGSCxFQUFZM0IsZ0JBQWdCOEIsRUFBYzdzQixHQUc1QyxJQUFJbXJCLEVBQVksR0FDWnZpRSxFQUFPeXlCLEVBQVF6eUIsS0FFbkIsR0FBSWdrRSxHQUFhRCxFQUVmLEdBQWtCLE1BQWQvakUsRUFBS2trRSxNQUFlLENBRXRCLElBQUlMLEdBQ0o3akUsRUFBS2trRSxRQUFVTCxFQUFlOTVELFNBQVNpc0MsR0FNckMsT0FMQSxJQUFJNHJCLEVBQVUsSUFBSXg5RCxJQUNsQnE5RCxFQUFXdUMsRUFBV3pCLEVBQVdYLEdBQ2pDSCxFQUFXc0MsRUFBY3hCLEVBQVdYLFFBTWpDLEdBQW1CLE1BQWY1aEUsRUFBS21rRSxPQUFnQixDQUU5QixJQUFJTixHQUNKN2pFLEVBQUtta0UsU0FBV04sRUFBZTk1RCxTQUFTa3NDLEdBT3RDLE9BTkEsSUFBSW11QixFQUFXLElBQUloZ0UsSUFFbkJxOUQsRUFBV3NDLEVBQWN4QixFQUFXNkIsR0FDcEMzQyxFQUFXdUMsRUFBV3pCLEVBQVc2QixRQU9uQzdCLEVBQVl3QixPQUdkeEIsRUFEU3dCLEdBR0dDLEVBVWQsR0FMaUIsTUFBYnpCLEdBQXFCQSxJQUFjeUIsR0FDckNGLEVBQVl0QixpQkFBaUJELEVBQVdwckIsR0FJdEMwc0IsR0FBa0JKLEVBRXBCLEdBQWtCLE1BQWR6akUsRUFBS2trRSxPQUFnQyxNQUFmbGtFLEVBQUtta0UsT0FHN0JOLEVBQWVyQyxlQUFlaUMsUUFDekIsR0FBbUIsTUFBZnpqRSxFQUFLbWtFLFFBQWdDLE1BQWRua0UsRUFBS2trRSxPQUFpQmxrRSxFQUFLaS9CLEtBQU0sQ0FDakU0a0MsRUFBZTc1RCxXQUFXeTVELEVBQWUxNUQsU0FBU3V0QyxHQUFnQkEsR0FDbEUsSUFBSStzQixFQUFjWixFQUFlMTVELFNBQVNrc0MsR0FFZixpQkFBaEJvdUIsR0FDVFIsRUFBZTc1RCxTQUFTcTZELEVBQWFwdUIsUUFHbEMsR0FBa0IsTUFBZGoyQyxFQUFLa2tFLE9BQWdDLE1BQWZsa0UsRUFBS21rRSxRQUFrQm5rRSxFQUFLc2tFLE1BQU8sQ0FDbEVULEVBQWU3NUQsV0FBV3k1RCxFQUFlMTVELFNBQVNzdEMsR0FBZ0JBLEdBQ2xFLElBQUlrdEIsRUFBWWQsRUFBZTE1RCxTQUFTaXNDLEdBRWYsaUJBQWR1dUIsR0FDVFYsRUFBZTc1RCxTQUFTdTZELEVBQVd2dUIsUUE5SHBCLENBRXJCLElBQUk5QixFQUFhd2xCLEVBQU05K0IsT0FBTzhvQyxFQUFvQkgsRUFBaUJoQyxXQUNuRXJ0QixFQUFXbHFDLFNBQVMsRUFBR2czRCxHQUN2QjlzQixFQUFXc3RCLGVBQWUrQixHQUMxQixJQUFJaUIsRUFBY2pCLEVBQWlCakIsaUJBQWlCbnJCLEdBRWhEcXRCLElBQ0ZBLEVBQWNBLEVBQVl4akUsS0FBSSxTQUFVa2dFLEdBQ3RDLE9BQU9ELEVBQW9CdkgsRUFBT3hsQixFQUFZZ3RCLE1BRWhEaHRCLEVBQVdzdUIsaUJBQWlCZ0MsRUFBYXJ0QixJQUczQzhxQixFQUFPRSxnQkFBZ0JqdUIsRUFBWXpoQixFQUFRa3dDLFlBQzNDa0IsRUFBaUJuSyxFQUFNOStCLE9BQU9pbUMsRUFBaUIzc0IsRUFBV210QixZQUFhanFCLEdBQVlrc0IsSUFDcEV0NUQsVUFBUyxFQUFPcXRDLEdBQy9Cd3NCLEVBQWU3NUQsVUFBUyxFQUFPc3RDLEdBQy9CdXNCLEVBQWU3NUQsU0FBUyxLQUFNZ3NDLEdBQzlCNnRCLEVBQWU3NUQsU0FBUyxLQUFNaXNDLEdBRTFCd3RCLEdBQ0ZJLEVBQWVyQyxlQUFlaUMsR0FHaEN2dkIsRUFBV2l1QixnQkFBZ0IwQixFQUFnQnpzQixTQXRDM0M2cUIsRUFBT2o0RCxTQUFTLEtBQU15b0IsRUFBUWt3QyxlLHNCQzdDbEMsSUFBSThCLEVBQW1CLENBQ3JCUCxPQUFPLEVBQ1BDLFFBQVEsRUFDUk8sTUFBTSxFQUNOSixPQUFPLEVBQ1BybEMsTUFBTSxFQUNOMGxDLFdBQVcsR0FFVHhQLEVBQVMsQ0FDWHlQLG1CQUFvQixtQkFDcEIzQixPQUFRLFNBQ1I5ckIsTUFBTyxRQUNQbkIsV0FBWSxZQUNacUIsY0FBZSxjQUNmQyxjQUFlLGtCQUNmdXFCLEtBQU0sT0FDTnlCLGVBQWdCLFdBQ2hCbHNCLFVBQVcsV0FDWG5CLGFBQWMsZUFRWmhELEVBQXNCLENBQ3hCaEksT0FBUSxTQUFnQjQ1QixHQUN0QjFQLEVBQVMwUCxHQUVYajdELElBQUssV0FDSCxPQUFPdXJELEdBUVQyUCxpQkFBa0IsU0FBMEJscUUsR0FDMUMsT0FBTzZwRSxFQUFpQmpwRSxlQUFlWixFQUFLNkMsUUFHaEQ1QixFQUFPQyxRQUFVbTNDLEcsNEJDM0NqQixJQUVJbVksRUFGeUIsRUFBUSxLQUVINWQsQ0FBdUIsRUFBUSxPQUU3RDRSLEVBQW9CLEVBQVEsTUFFNUJuTSxFQUFzQixFQUFRLE1BRTlCRCxFQUFZLEVBQVEsTUFJcEJzdEIsR0FGVSxFQUFRLE1BRUksQ0FDeEIrQyxPQUFRLFNBQWdCM0osRUFBT2puQyxHQUM3QixJQUFJd3ZDLEVBQVN2SSxFQUFNOXZELElBQUk2b0IsRUFBUW8wQixRQUUvQixHQUFjLE1BQVZvYixFQUFnQixDQUNsQixJQUFJOEMsRUFBVTlDLEVBQU9sNEQsU0FBUzBvQixFQUFRK3dDLFVBRWYsaUJBQVp1QixFQUNUckwsRUFBYyxPQUFFcUwsR0FDUDNrRSxNQUFNQyxRQUFRMGtFLElBQ3ZCQSxFQUFRMWpFLFNBQVEsU0FBVWdaLEdBQ04saUJBQVBBLEdBQ1RxL0MsRUFBYyxPQUFFci9DLFVBT3hCa21ELEVBQW9CLENBQ3RCOEMsT0FBUSxTQUFnQjNKLEVBQU9qbkMsR0FDN0IsSUFBSXd2QyxFQUFTdkksRUFBTTl2RCxJQUFJNm9CLEVBQVFvMEIsUUFFL0IsR0FBYyxNQUFWb2IsRUFBSixDQUtBLElBQUkrQyxFQUFjdnlDLEVBQVF3eUMsV0FBV0QsWUFDcEIsTUFBZkEsR0FBZ0poeUIsR0FBVSxHQUM1SixJQUFJK3hCLEVBQVU5QyxFQUFPbDRELFNBQVMwb0IsRUFBUSt3QyxXQUN6QnBqRSxNQUFNQyxRQUFRMGtFLEdBQVdBLEVBQVUsQ0FBQ0EsSUFDMUMxakUsU0FBUSxTQUFVZ1osR0FDdkIsR0FBa0IsaUJBQVBBLEVBQWlCLENBQzFCLElBQ0lneEMsRUFEQUMsR0FBWSxFQUFJRixFQUFxQyxTQUFHNFosR0FHNUQsSUFDRSxJQUFLMVosRUFBVXpwRCxNQUFPd3BELEVBQVFDLEVBQVVycUQsS0FBSyswQixNQUFPLENBQ2xELElBQUlrdkMsRUFBZTdaLEVBQU1oaEQsTUFDckI2cEMsRUFBYXdsQixFQUFNOXZELElBQUlzN0QsR0FFVCxNQUFkaHhCLEdBS0prTCxFQUFrQmdqQixXQUFXbHVCLEVBQVk3NUIsSUFFM0MsTUFBTzlZLEdBQ1ArcEQsRUFBVS9yRCxFQUFFZ0MsR0FDWixRQUNBK3BELEVBQVUxckQsWUFNaEI0Z0UsRUFBb0IsQ0FDdEI2QyxPQUFROEIsRUFBWS9sQixFQUFrQjJqQixrQkFFcEN0QyxFQUFxQixDQUN2QjRDLE9BQVE4QixFQUFZL2xCLEVBQWtCK2pCLG1CQUVwQ3pDLEVBQW9CLENBQ3RCMkMsT0FBUStCLEVBQVlobUIsRUFBa0IyakIsa0JBRXBDcEMsRUFBcUIsQ0FDdkIwQyxPQUFRK0IsRUFBWWhtQixFQUFrQitqQixtQkFHeEMsU0FBU2dDLEVBQVlFLEdBQ25CLE9BQU8sU0FBVTNMLEVBQU9qbkMsR0FDdEIsSUFBSXN4QyxFQUVBOUIsRUFBU3ZJLEVBQU05dkQsSUFBSTZvQixFQUFRbzBCLFFBRS9CLEdBQWMsTUFBVm9iLEVBQUosQ0FLQSxJQUVJcUQsRUFBa0JkLEVBRmxCUSxFQUFjdnlDLEVBQVF3eUMsV0FBV0QsWUFDcEIsTUFBZkEsR0FBZ0poeUIsR0FBVSxHQUc1SixJQUNFc3lCLEVBQW1CckQsRUFBT0gsZ0JBQWdCcnZDLEVBQVErd0MsU0FBVS93QyxFQUFRenlCLE1BQ3BFLE1BQU91bEUsSUFFVCxJQUFLRCxFQUNILElBQ0VkLEVBQWN2QyxFQUFPSyxpQkFBaUI3dkMsRUFBUSt3QyxTQUFVL3dDLEVBQVF6eUIsTUFDaEUsTUFBT3dsRSxJQUdYLEdBQXdCLE1BQXBCRixHQUEyQyxNQUFmZCxFQUFoQyxDQUtBLElBT0l0VCxFQVBBbmIsRUFBd0I5QyxFQUFvQnJwQyxNQUM1Q2k0RCxFQUFPOXJCLEVBQXNCOHJCLEtBQzdCMXFCLEVBQVFwQixFQUFzQm9CLE1BRTlCc3VCLEVBQWtELFFBQWhDMUIsRUFBZVMsU0FBMEMsSUFBakJULEVBQTBCQSxFQUFlLENBQUN1QixHQUVwR25VLEdBQWEsRUFBSS9GLEVBQXFDLFNBQUdxYSxHQUc3RCxJQUNFLElBQUlDLEVBQVEsV0FDVixJQUFJQyxFQUFhelUsRUFBTzdtRCxNQUV4QixHQUFrQixNQUFkczdELEVBQ0YsTUFBTyxXQUdULElBQUlDLEVBQWFELEVBQVc3RCxnQkFBZ0IsUUFFNUMsSUFBSzhELEVBQ0gsTUFBTyxXQUdULElBR0lDLEVBSEFDLEVBQWVGLEVBQVd2RSxZQUUxQjBFLEdBQWEsRUFBSTNhLEVBQXFDLFNBQUc0WixHQUc3RCxJQUNFLElBQUtlLEVBQVdsa0UsTUFBT2drRSxFQUFTRSxFQUFXOWtFLEtBQUsrMEIsTUFBTyxDQUNyRCxJQUFJa3ZDLEVBQWVXLEVBQU94N0QsTUFDdEI2cEMsRUFBYXdsQixFQUFNOXZELElBQUlzN0QsR0FFM0IsR0FBa0IsTUFBZGh4QixLQUtpRyxRQUFoRTh4QixFQUF3Qjl4QixFQUFXb3VCLGlCQUFpQm5yQixVQUE4QyxJQUExQjZ1QixPQUFtQyxFQUFTQSxFQUFzQm5qQixNQUFLLFNBQVVxZSxHQUM1TCxJQUFJK0UsRUFFSixPQUFRL0UsU0FBcUcsUUFBeEQrRSxFQUF3Qi9FLEVBQUtZLGdCQUFnQkQsVUFBNkMsSUFBMUJvRSxPQUExRSxFQUFzSEEsRUFBc0I1RSxlQUFpQnlFLE1BRzFNLENBSUEsSUFBSUksRUFBYTltQixFQUFrQjZoQixvQkFBb0J2SCxFQUFPeGxCLEVBQVl5eEIsR0FDMUQsTUFBZE8sR0FBZ0lsekIsR0FBVSxHQUM1SXF5QixFQUFTbnhCLEVBQVlneUIsS0FFdkIsTUFBTzNrRSxHQUNQd2tFLEVBQVd4bUUsRUFBRWdDLEdBQ2IsUUFDQXdrRSxFQUFXbm1FLE1BSWYsSUFBS3V4RCxFQUFXdHZELE1BQU9xdkQsRUFBU0MsRUFBV2x3RCxLQUFLKzBCLE1BQzlDLEtBQUlnd0MsRUFFT04sS0FJYixNQUFPbmtFLEdBQ1A0dkQsRUFBVzV4RCxFQUFFZ0MsR0FDYixRQUNBNHZELEVBQVd2eEQsUUFLakIsU0FBU3dsRSxFQUFZQyxHQUNuQixPQUFPLFNBQVUzTCxFQUFPam5DLEdBQ3RCLElBQUkwekMsRUFFQWxFLEVBQVN2SSxFQUFNOXZELElBQUk2b0IsRUFBUW8wQixRQUUvQixHQUFjLE1BQVZvYixFQUFKLENBS0EsSUFLSW1FLEVBQ0FDLEVBTkFDLEVBQXNCN3pDLEVBQVF3eUMsV0FDOUJELEVBQWNzQixFQUFvQnRCLFlBQ2xDdUIsRUFBZUQsRUFBb0JDLGFBQ3RCLE1BQWZ2QixHQUFnSmh5QixHQUFVLEdBQzFJLE1BQWhCdXpCLEdBQWdKdnpCLEdBQVUsR0FJNUosSUFDRW96QixFQUFtQm5FLEVBQU9ILGdCQUFnQnJ2QyxFQUFRK3dDLFNBQVUvd0MsRUFBUXp5QixNQUNwRSxNQUFPd21FLElBRVQsSUFBS0osRUFDSCxJQUNFQyxFQUFjcEUsRUFBT0ssaUJBQWlCN3ZDLEVBQVErd0MsU0FBVS93QyxFQUFRenlCLE1BQ2hFLE1BQU95bUUsSUFHWCxHQUF3QixNQUFwQkwsR0FBMkMsTUFBZkMsRUFBaEMsQ0FLQSxJQU9JSyxFQVBBeHZCLEVBQXlCakUsRUFBb0JycEMsTUFDN0NpNEQsRUFBTzNxQixFQUF1QjJxQixLQUM5QjFxQixFQUFRRCxFQUF1QkMsTUFFL0J3dkIsRUFBa0QsUUFBaENSLEVBQWVFLFNBQTBDLElBQWpCRixFQUEwQkEsRUFBZSxDQUFDQyxHQUVwR1EsR0FBYSxFQUFJeGIsRUFBcUMsU0FBR3ViLEdBRzdELElBQ0UsSUFBSUUsRUFBUyxXQUNYLElBQUlqQixFQUFhYyxFQUFPcjhELE1BRXhCLEdBQWtCLE1BQWR1N0QsRUFDRixNQUFPLFdBR1QsSUFHSWtCLEVBSEFoQixFQUFlRixFQUFXdkUsWUFFMUIwRixHQUFhLEVBQUkzYixFQUFxQyxTQUFHNFosR0FHN0QsSUFDRSxJQUFLK0IsRUFBV2xsRSxNQUFPaWxFLEVBQVNDLEVBQVc5bEUsS0FBSyswQixNQUFPLENBQ3JELElBQUlrdkMsRUFBZTRCLEVBQU96OEQsTUFDdEI2cEMsRUFBYXdsQixFQUFNOXZELElBQUlzN0QsR0FFM0IsR0FBa0IsTUFBZGh4QixLQUtrRyxRQUFqRTh5QixFQUF5Qjl5QixFQUFXb3VCLGlCQUFpQm5yQixVQUErQyxJQUEzQjZ2QixPQUFvQyxFQUFTQSxFQUF1Qm5rQixNQUFLLFNBQVVxZSxHQUMvTCxJQUFJK0YsRUFFSixPQUFRL0YsU0FBc0csUUFBekQrRixFQUF5Qi9GLEVBQUtZLGdCQUFnQkQsVUFBOEMsSUFBM0JvRixPQUEzRSxFQUF3SEEsRUFBdUI1RixlQUFpQnlFLE1BRzdNLENBSUEsSUFBSUksRUFBYTltQixFQUFrQjRpQixXQUFXdEksRUFBT3hsQixFQUFZMHhCLEVBQVlXLEdBQzdELE1BQWRMLEdBQWdJbHpCLEdBQVUsR0FDNUlxeUIsRUFBU254QixFQUFZZ3lCLEtBRXZCLE1BQU8za0UsR0FDUHdsRSxFQUFXeG5FLEVBQUVnQyxHQUNiLFFBQ0F3bEUsRUFBV25uRSxNQUlmLElBQUtnbkUsRUFBVy9rRSxNQUFPNmtFLEVBQVNFLEVBQVczbEUsS0FBSyswQixNQUM5QyxLQUFJZ3hDLEVBRVFILEtBSWQsTUFBT3RsRSxHQUNQcWxFLEVBQVdybkUsRUFBRWdDLEdBQ2IsUUFDQXFsRSxFQUFXaG5FLFFBS2pCL0QsRUFBT0MsUUFBVSxDQUNmMGtFLGtCQUFtQkEsRUFDbkJGLG9CQUFxQkEsRUFDckJHLG1CQUFvQkEsRUFDcEJDLGtCQUFtQkEsRUFDbkJDLG1CQUFvQkEsRUFDcEJKLGtCQUFtQkEsSSw0QkN2U3JCLElBQUluaEIsRUFBb0IsRUFBUSxNQUU1Qm5NLEVBQXNCLEVBQVEsTUFFOUJpMEIsRUFBYSxFQUFRLE1BRXJCOUcsRUFBbUIsRUFBUSxNQUUzQmxULEVBQTJCLEVBQVEsTUFFbkNpYSxFQUFvQixFQUFRLEtBRTVCQyxFQUF5QixFQUFRLE1BRWpDQyxFQUFpQyxFQUFRLE1BRXpDQyxFQUF3QixFQUFRLE1BRWhDQyxFQUE4QixFQUFRLE1BRXRDQyxFQUFhLEVBQVEsTUFFckJuYSxFQUFvQixFQUFRLE1BRTVCb2EsRUFBeUIsRUFBUSxNQUVqQ0MsRUFBaUMsRUFBUSxNQUV6Q0MsRUFBb0IsRUFBUSxNQUU1QkMsRUFBc0IsRUFBUSxNQUU5QkMsRUFBbUIsRUFBUSxNQUUzQkMsRUFBZSxFQUFRLE1BRXZCQyxFQUFrQixFQUFRLE1BRTFCQyxFQUF3QixFQUFRLE1BRWhDQyxFQUFnQixFQUFRLE1BRXhCQyxFQUEwQixFQUFRLE1BRWxDQyxFQUFvQixFQUFRLE1BRTVCQyxFQUFxQixFQUFRLE1BRTdCQyxFQUFrQixFQUFRLE1BRTFCQyxFQUFnQixFQUFRLE1BRXhCanBCLEVBQTBCLEVBQVEsS0FFbENDLEVBQW9CLEVBQVEsTUFFNUJDLEVBQWlCLEVBQVEsTUFFekJyUixFQUE2QixFQUFRLEtBRXJDcTZCLEVBQTBCLEVBQVEsTUFFbENqN0IsRUFBcUIsRUFBUSxLQUU3QitELEVBQWEsRUFBUSxNQUVyQnlILEVBQWEsRUFBUSxNQUVyQjB2QixFQUFxQixFQUFRLE1BRTdCbG9CLEVBQXdCLEVBQVEsTUFFaENnQixFQUF3QixFQUFRLE1BRWhDc2YsRUFBb0IsRUFBUSxNQUU1QnhULEVBQXVCLEVBQVEsS0FFL0I3TCxFQUFZLEVBQVEsTUFFcEIxSSxFQUEyQixFQUFRLEtBRW5DekssRUFBbUIsRUFBUSxNQUUzQnFSLEVBQWlCLEVBQVEsTUFFekIrQixFQUFtQixFQUFRLE1BRTNCQyxFQUE4QixFQUFRLE1BRXRDL0IsRUFBc0IsRUFBUSxNQUU5QitvQixFQUFhLEVBQVEsTUFFckJ2M0IsRUFBVyxFQUFRLE1BQ25CMnZCLEVBQW1CM3ZCLEVBQVMydkIsaUJBQzVCNkgsRUFBeUJ4M0IsRUFBU3czQix1QkFDbENDLEVBQWF6M0IsRUFBU3kzQixXQW1CMUI5c0UsRUFBT0MsUUFBVSxDQUVmOHNFLFlBQWFuQixFQUNib0IsUUFBU2YsRUFDVDUwQixXQUFZNjBCLEVBQ1plLG1CQUFvQlosRUFDcEJhLGFBQWNaLEVBQ2RhLE9BQVFyQixFQUNSeGEsY0FBZWliLEVBQ2ZhLE1BQU9wQixFQUNQcUIsa0JBQW1CdEIsRUFBb0JzQixrQkFDdkNoN0IsMkJBQTRCQSxFQUM1Qmk3Qiw0QkFBNkJ2QixFQUFvQnVCLDRCQUNqRGg0QiwwQkFBMkJ1MkIsRUFBK0J2MkIsMEJBQzFEaTRCLHFCQUFzQnhCLEVBQW9Cd0IscUJBQzFDQyx3QkFBeUIzQixFQUErQjJCLHdCQUN4REMsdUJBQXdCMUIsRUFBb0IwQix1QkFDNUNuN0IscUJBQXNCeTVCLEVBQW9CejVCLHFCQUMxQ283QixRQUFTckMsRUFBV3FDLFFBQ3BCanNCLFlBQWE0cEIsRUFBVzVwQixZQUN4QmtzQixzQkFBdUJ0QyxFQUFXc0Msc0JBQ2xDQyxzQkFBdUJwQixFQUFnQm9CLHNCQUN2Q0Msc0JBQXVCckIsRUFBZ0JxQixzQkFDdkNDLHNCQUF1QnpDLEVBQVd5QyxzQkFDbENDLGtCQUFtQmhDLEVBQW9CZ0Msa0JBQ3ZDQyx1QkFBd0IzQyxFQUFXMkMsdUJBQ25DejRCLFdBQVk4MUIsRUFBVzkxQixXQUN2QmdjLHFCQUFzQkEsRUFDdEJoYSxZQUFhdzBCLEVBQW9CeDBCLFlBQ2pDMDJCLHVCQUF3QmxDLEVBQW9Ca0MsdUJBQzVDQyxvQkFBcUJuQyxFQUFvQm1DLG9CQUN6Q0MsY0FBZTNCLEVBQWdCMkIsY0FDL0JDLHlCQUEwQnJDLEVBQW9CcUMseUJBQzlDOTJCLHVCQUF3QnkwQixFQUFvQnowQix1QkFDNUMrMkIsK0JBQWdDdEMsRUFBb0JzQywrQkFDcERDLGlDQUFrQ3ZDLEVBQW9CdUMsaUNBQ3REMW9CLDRCQUE2QkEsRUFDN0JqQyxRQUFTMG5CLEVBQVcxbkIsUUFDcEI3UyxXQUFZdTZCLEVBQVd2NkIsV0FDdkJ5OUIscUJBQXNCbEQsRUFBV2tELHFCQUNqQ0MsVUFBV25ELEVBQVdtRCxVQUN0QjVxQixlQUFnQkEsRUFFaEJRLGNBQWVvbkIsRUFBK0JwbkIsY0FDOUNDLGdCQUFpQm1uQixFQUErQm5uQixnQkFFaERvcUIsdUJBQXdCL0MsRUFDeEJub0Isa0JBQW1CQSxFQUNuQmdoQixpQkFBa0JBLEVBQ2xCbUssVUFBV2pDLEVBQWNpQyxVQUN6QkMsWUFBYWxDLEVBQWNrQyxZQUUzQm5yQix3QkFBeUJBLEVBQ3pCQyxrQkFBbUJBLEVBQ25CQyxlQUFnQkEsRUFDaEJ6RyxXQUFZQSxFQUNad0gsc0JBQXVCQSxFQUN2QnpILHlCQUEwQkEsRUFDMUI2RyxvQkFBcUJBLEVBRXJCek0sb0JBQXFCQSxFQUVyQmlhLHlCQUEwQkEsRUFDMUIrYSxjQUFlQSxFQUNmTSx3QkFBeUJBLEVBRXpCcEIsa0JBQW1CQSxFQUNuQkssV0FBWUEsRUFDWm5hLGtCQUFtQkEsRUFDbkJvZCxtQkFBb0JuRCxFQUFzQm1ELG1CQUMxQ0MsY0FBZXJDLEVBQWdCcUMsY0FDL0JDLG1CQUFvQnRDLEVBQWdCc0MsbUJBQ3BDQyxPQUFRdkMsRUFBZ0J1QyxPQUN4QkMsUUFBU3hDLEVBQWdCd0MsUUFDekJDLFNBQVV6QyxFQUFnQnlDLFNBQzFCQyxRQUFTMUMsRUFBZ0IwQyxRQUN6QkMsVUFBVzNDLEVBQWdCMkMsVUFDM0JDLGFBQWM1QyxFQUFnQjRDLGFBQzlCNTVCLFdBQVlBLEVBQ1p3dkIsaUJBQWtCQSxFQUNsQjZILHVCQUF3QkEsRUFDeEI5SCxrQkFBbUJBLEVBQ25CK0gsV0FBWUEsRUFDWnBuQixVQUFXQSxFQUNYblQsaUJBQWtCQSxFQUNsQm9ULGlCQUFrQkEsRUFDbEJpbkIsV0FBWUEsRUFDWm5uQixzQkFBdUJBLEVBQ3ZCL1QsV0FBWSxDQUNWMjlCLGlCQUFrQmxELEVBQ2xCMTZCLG1CQUFvQkEsRUFDcEI2OUIsc0JBQXVCL0QsRUFBdUIrRCxzQkFDOUNyeUIsV0FBWTB2QixFQUFtQjF2QixXQUMvQndVLGtCQUFtQmtiLEVBQW1CbGIsa0JBQ3RDak0sMkJBQTRCbW5CLEVBQW1Cbm5CLDJCQUMvQzZRLDhCQUErQnNXLEVBQW1CdFcsaUMsNEJDbk50RCxJQUVJOUcsRUFGeUIsRUFBUSxLQUVINWQsQ0FBdUIsRUFBUSxPQUU3RDRSLEVBQW9CLEVBQVEsTUFJNUJhLEdBRlUsRUFBUSxNQUVGemxELE9BQU9vbkQsT0FBTyxDQUNoQ3dwQixVQUFXLFlBQ1hDLGFBQWMsZUFDZEMsWUFBYSxpQkFFWHByQixFQUFrQjFsRCxPQUFPb25ELE9BQU8sQ0FDbEMycEIsT0FBUSxTQUNSQyxRQUFTLFlBb1JYLFNBQVNDLEVBQWE3NUIsR0FDcEIsT0FBSUEsRUFBUVEsU0FBU3M1QixZQUFjOTVCLEVBQVFRLFNBQVNzNUIsV0FBV3R3RSxPQUFTLEdBQTZDLGdCQUF4Q3cyQyxFQUFRUSxTQUFTczVCLFdBQVcsR0FBR3p0QixLQUNuR3JNLEVBQVFRLFNBQVNzNUIsV0FBVyxHQUFHanVFLEtBR2pDLEtBR1Q1QixFQUFPQyxRQUFVLENBQ2Zta0QsY0FBZUEsRUFDZkMsZ0JBQWlCQSxFQUNqQnlyQixRQTVSRixTQUFpQkMsRUFBU2g2QixFQUFTaTZCLEVBQW1CeDNDLEdBQ3BELElBQUl5M0MsRUFBMEJELEVBQW9CLENBQUNBLEdBQXFCLEdBQ3BFRSxFQUFnQjEzQyxFQUFVLENBQUNBLEdBQVcsR0FrQzFDLE9BakNBdTNDLEVBQVF2cUUsU0FBUSxTQUFVOHpELEdBQ3hCLE9BQVFBLEVBQU81M0QsTUFDYixJQUFLLGNBQ0gsSUFBSXl1RSxFQTRDWixTQUFvQjdXLEVBQVF2akIsR0FDMUIsSUFBSXE2QixFQUFxQjlXLEVBQU84VyxtQkFDNUJDLEVBQVlULEVBQWE3NUIsR0FFN0IsT0FBS3M2QixFQUlFLFNBQVV4UyxFQUFPNTZDLEdBQ3RCLElBQUkyVCxFQUFVaW5DLEVBQU0rUixhQUFhUyxHQUVqQyxHQUFLejVDLEVBQUwsQ0FJQSxJQUFJMDVDLEVBQVcxNUMsRUFBUTFvQixTQUFTa2lFLElBQ2hCN3JFLE1BQU1DLFFBQVE4ckUsR0FBWUEsRUFBVyxDQUFDQSxJQUM1QzlxRSxTQUFRLFNBQVVnWixHQUN0QkEsR0FBb0IsaUJBQVBBLEdBQ2ZxL0MsRUFBYyxPQUFFci9DLFFBZGIsS0FqRG9CK3hELENBQVdqWCxFQUFRdmpCLEdBRXRDbzZCLElBQ0ZGLEVBQXdCendFLEtBQUsyd0UsR0FDN0JELEVBQWMxd0UsS0FBSzJ3RSxJQUdyQixNQUVGLElBQUssWUFDSCxJQUFJSyxFQTJEWixTQUFrQmxYLEVBQVF2akIsR0FDeEIsSUFBSTA2QixFQUFXblgsRUFBT21YLFNBQ2xCQyxFQUFpQnBYLEVBQU9vWCxlQUN4QkMsRUFBV3JYLEVBQU9xWCxTQUV0QixJQUFLRixFQUVILE9BQU8sS0FHVCxJQUFJSixFQUFZVCxFQUFhNzVCLEdBRTdCLE9BQUsyNkIsR0FBbUJMLEVBSWpCLFNBQVV4UyxFQUFPNTZDLEdBQ3RCLElBQUkydEQsRUFBUy9TLEVBQU05dkQsSUFBSTBpRSxHQUV2QixHQUFLRyxFQUFMLENBSUEsSUFBSWg2QyxFQUFVaW5DLEVBQU0rUixhQUFhUyxHQUVqQyxHQUFLejVDLEVBQUwsQ0FJQSxJQUdJNDRCLEVBSEFzYSxFQUFhbHpDLEVBQVFxdkMsZ0JBQWdCMEssR0FFckNsaEIsR0FBWSxFQUFJRixFQUFxQyxTQUFHbWhCLEdBRzVELElBQ0UsSUFBS2poQixFQUFVenBELE1BQU93cEQsRUFBUUMsRUFBVXJxRCxLQUFLKzBCLE1BQU8sQ0FDbEQsSUFBSTAyQyxFQUFPcmhCLEVBQU1oaEQsTUFFakIsR0FBS3M3RCxFQUFMLENBSUEsSUFBSXp4QixFQUFha0wsRUFBa0JxakIsY0FBY2dLLEVBQVFDLEVBQUtydEUsSUFBS3F0RSxFQUFLaEssU0FFeEUsR0FBS3h1QixFQUFMLENBSUEsSUFBSWd5QixFQUFhOW1CLEVBQWtCNmhCLG9CQUFvQnZILEVBQU94bEIsRUFBWXl4QixHQUUxRSxHQUFLTyxFQUlMLE9BQVF3RyxFQUFLQyxlQUNYLElBQUssU0FDSHZ0QixFQUFrQjJqQixnQkFBZ0I3dUIsRUFBWWd5QixHQUM5QyxNQUVGLElBQUssVUFDSDltQixFQUFrQitqQixpQkFBaUJqdkIsRUFBWWd5QixPQVFyRCxNQUFPM2tFLEdBQ1ArcEQsRUFBVS9yRCxFQUFFZ0MsR0FDWixRQUNBK3BELEVBQVUxckQsUUExREwsS0F4RWtCZ3RFLENBQVN6WCxFQUFRdmpCLEdBRWxDeTZCLElBQ0ZQLEVBQXdCendFLEtBQUtneEUsR0FDN0JOLEVBQWMxd0UsS0FBS2d4RSxJQUdyQixNQUVGLElBQUssZUFDSCxJQUFJUSxFQTZIWixTQUFxQjFYLEVBQVF2akIsR0FDM0IsSUFBSTA2QixFQUFXblgsRUFBT21YLFNBQ2xCUSxFQUFpQjNYLEVBQU8yWCxlQUN4QkMsRUFBbUI1WCxFQUFPNFgsaUJBQzFCZCxFQUFxQjlXLEVBQU84VyxtQkFFaEMsSUFBS0ssRUFFSCxPQUFPLEtBR1QsSUFBSUosRUFBWVQsRUFBYTc1QixHQUU3QixPQUFLczZCLEVBSUUsU0FBVXhTLEVBQU81NkMsR0FDdEIsR0FBS0EsRUFBTCxDQUlBLElBQUlrdUQsRUFBWSxHQUNaQyxFQUFpQm51RCxFQUFLb3RELEdBRTFCLEdBQUllLEdBQWtCN3NFLE1BQU1DLFFBQVE0ckUsR0FBcUIsQ0FDdkQsSUFDSS9hLEVBREFDLEdBQWEsRUFBSS9GLEVBQXFDLFNBQUc2Z0IsR0FHN0QsSUFDRSxJQUFLOWEsRUFBV3R2RCxNQUFPcXZELEVBQVNDLEVBQVdsd0QsS0FBSyswQixNQUFPLENBQ3JELElBQUlrM0MsRUFBWWhjLEVBQU83bUQsTUFFbkI0aUUsR0FBNEMsaUJBQW5CQSxJQUMzQkEsRUFBaUJBLEVBQWVDLEtBR3BDLE1BQU8zckUsR0FDUDR2RCxFQUFXNXhELEVBQUVnQyxHQUNiLFFBQ0E0dkQsRUFBV3Z4RCxJQUdUUSxNQUFNQyxRQUFRNHNFLEdBQ2hCQSxFQUFlNXJFLFNBQVEsU0FBVThyRSxHQUMzQkEsR0FBWUEsRUFBUzl5RCxJQUEwQixpQkFBYjh5RCxHQUFnRCxpQkFBaEJBLEVBQVM5eUQsSUFDN0UyeUQsRUFBVTN4RSxLQUFLOHhFLEVBQVM5eUQsT0FHbkI0eUQsR0FBa0JBLEVBQWU1eUQsSUFBbUMsaUJBQXRCNHlELEVBQWU1eUQsSUFDdEUyeUQsRUFBVTN4RSxLQUFLNHhFLEVBQWU1eUQsU0FFdkI0eUQsR0FBZ0QsaUJBQXZCaEIsR0FBNkQsaUJBQW5CZ0IsSUFHOUMsaUJBRjlCQSxFQUFpQkEsRUFBZWhCLElBRzlCZSxFQUFVM3hFLEtBQUs0eEUsR0FDTjdzRSxNQUFNQyxRQUFRNHNFLElBQ3ZCQSxFQUFlNXJFLFNBQVEsU0FBVWdaLEdBQ2IsaUJBQVBBLEdBQ1QyeUQsRUFBVTN4RSxLQUFLZ2YsUUFVM0IsU0FBb0JpeUQsRUFBVVEsRUFBZ0JDLEVBQWtCclQsRUFBT3NULEdBRXJFLElBQUlQLEVBQVMvUyxFQUFNOXZELElBQUkwaUUsR0FFdkIsR0FBS0csS0FJRE0sRUFBaUIzeEUsT0FBUyxHQUE5QixDQU9BLElBRkEsSUFBSWd5RSxFQUFjWCxFQUVUOXdFLEVBQUksRUFBR0EsRUFBSW94RSxFQUFpQjN4RSxPQUFTLEVBQUdPLElBQzNDeXhFLElBQ0ZBLEVBQWNBLEVBQVl0TCxnQkFBZ0JpTCxFQUFpQnB4RSxLQUsvRCxHQUFLbXhFLEdBQW1CTSxFQUF4QixDQUtBLElBQ0l2SCxFQURBRSxHQUFhLEVBQUkzYSxFQUFxQyxTQUFHMGhCLEdBRzdELElBQ0UsSUFBSXBILEVBQVEsV0FDVixJQUFJcm1FLEVBQU13bUUsRUFBT3g3RCxNQUNiNnBDLEVBQWFrTCxFQUFrQnFqQixjQUFjMkssRUFBYS90RSxFQUFJQSxJQUFLQSxFQUFJcWpFLFNBRXZFeHVCLEdBQ0Y4NEIsRUFBVTNyRSxTQUFRLFNBQVU4cUUsR0FDMUIvc0IsRUFBa0JnakIsV0FBV2x1QixFQUFZaTRCLE9BSy9DLElBQUtwRyxFQUFXbGtFLE1BQU9na0UsRUFBU0UsRUFBVzlrRSxLQUFLKzBCLE1BQzlDMHZDLElBRUYsTUFBT25rRSxHQUNQd2tFLEVBQVd4bUUsRUFBRWdDLEdBQ2IsUUFDQXdrRSxFQUFXbm1FLE9BcERYd2lFLENBQVdrSyxFQUFVUSxFQUFnQkMsRUFBa0JyVCxFQUFPc1QsS0FwRHZELEtBM0lxQkssQ0FBWWxZLEVBQVF2akIsR0FFeENpN0IsSUFDRmYsRUFBd0J6d0UsS0FBS3d4RSxHQUM3QmQsRUFBYzF3RSxLQUFLd3hFLFFBTXBCLENBQ0xoQixrQkFBbUIsU0FBMkJuUyxFQUFPNTZDLEdBQ25EZ3RELEVBQXdCenFFLFNBQVEsU0FBVWlzRSxHQUN4Q0EsRUFBc0I1VCxFQUFPNTZDLE9BR2pDdVYsUUFBUyxTQUFpQnFsQyxFQUFPNTZDLEdBQy9CaXRELEVBQWMxcUUsU0FBUSxTQUFVa3NFLEdBQzlCQSxFQUFZN1QsRUFBTzU2QyxXLDRCQzlEM0IsSUFBSWswQixFQUFZLEVBQVEsTUFHcEI2dEIsRUFEVyxFQUFRLE1BQ1NBLGlCQUc1QkMsRUFEWSxFQUFRLE1BQ1lBLG9CQVFoQzBNLEVBQWdDLFdBQ2xDLFNBQVNBLEVBQWlCeHlFLEVBQVF5eUUsRUFBUzVtQixHQUN6Q3JxRCxLQUFLa3hFLFFBQVU3bUIsRUFDZnJxRCxLQUFLbXhFLFNBQVdGLEVBQ2hCanhFLEtBQUt1OUIsUUFBVS8rQixFQUdqQixJQUFJaTFDLEVBQVN1OUIsRUFBaUIveUUsVUFrRzlCLE9BaEdBdzFDLEVBQU91eEIsZUFBaUIsU0FBd0J4bUUsR0FDOUN3QixLQUFLbXhFLFNBQVNDLFdBQVc1eUUsRUFBT3FtRSxZQUFhN2tFLEtBQUtreEUsVUFHcER6OUIsRUFBT294QixVQUFZLFdBQ2pCLE9BQU83a0UsS0FBS2t4RSxTQUdkejlCLEVBQU9zeEIsUUFBVSxXQUNmLElBQUloa0UsRUFBT2YsS0FBS214RSxTQUFTcE0sUUFBUS9rRSxLQUFLa3hFLFNBR3RDLE9BRFUsTUFBUm53RSxHQUEwSnkxQyxHQUFVLEdBQy9KejFDLEdBR1QweUMsRUFBT2xtQyxTQUFXLFNBQWtCdE0sRUFBTXVDLEdBQ3hDLElBQUk4aUUsRUFBYWhDLEVBQW9CcmpFLEVBQU11QyxHQUMzQyxPQUFPeEQsS0FBS214RSxTQUFTNWpFLFNBQVN2TixLQUFLa3hFLFFBQVM1SyxJQUc5Qzd5QixFQUFPam1DLFNBQVcsU0FBa0JLLEVBQU81TSxFQUFNdUMsR0FDOUM2dEUsRUFBaUJ4akUsSUFBaUwyb0MsR0FBVSxHQUM3TSxJQUFJOHZCLEVBQWFoQyxFQUFvQnJqRSxFQUFNdUMsR0FJM0MsT0FGQXhELEtBQUtteEUsU0FBUzNqRSxTQUFTeE4sS0FBS2t4RSxRQUFTNUssRUFBWXo0RCxHQUUxQzdOLE1BR1R5ekMsRUFBTzZ4QixnQkFBa0IsU0FBeUJya0UsRUFBTXVDLEdBQ3RELElBQUk4aUUsRUFBYWhDLEVBQW9CcmpFLEVBQU11QyxHQUV2Qzh0RSxFQUFXdHhFLEtBQUtteEUsU0FBU0ksa0JBQWtCdnhFLEtBQUtreEUsUUFBUzVLLEdBRTdELE9BQW1CLE1BQVpnTCxFQUFtQnR4RSxLQUFLdTlCLFFBQVFud0IsSUFBSWtrRSxHQUFZQSxHQUd6RDc5QixFQUFPa3lCLGdCQUFrQixTQUF5QkYsRUFBUXhrRSxFQUFNdUMsR0FDNURpaUUsYUFBa0J1TCxHQUEySng2QixHQUFVLEdBQ3pMLElBQUk4dkIsRUFBYWhDLEVBQW9CcmpFLEVBQU11QyxHQUN2Qzh0RSxFQUFXN0wsRUFBT1osWUFJdEIsT0FGQTdrRSxLQUFLbXhFLFNBQVNLLGtCQUFrQnh4RSxLQUFLa3hFLFFBQVM1SyxFQUFZZ0wsR0FFbkR0eEUsTUFHVHl6QyxFQUFPZytCLHdCQUEwQixTQUFpQ3h3RSxFQUFNeXdFLEVBQVVsdUUsR0FDaEYsSUFBSW11RSxFQUFlM3hFLEtBQUtzbEUsZ0JBQWdCcmtFLEVBQU11QyxHQUU5QyxJQUFLbXVFLEVBQWMsQ0FDakIsSUFBSUMsRUFFQXRMLEVBQWFoQyxFQUFvQnJqRSxFQUFNdUMsR0FDdkNxdUUsRUFBV3hOLEVBQWlCcmtFLEtBQUs2a0UsWUFBYXlCLEdBR2xEcUwsRUFBb0UsUUFBcERDLEVBQW9CNXhFLEtBQUt1OUIsUUFBUW53QixJQUFJeWtFLFVBQTZDLElBQXRCRCxFQUErQkEsRUFBb0I1eEUsS0FBS3U5QixRQUFRYSxPQUFPeXpDLEVBQVVILEdBQzdKMXhFLEtBQUsybEUsZ0JBQWdCZ00sRUFBYzF3RSxFQUFNdUMsR0FHM0MsT0FBT211RSxHQUdUbCtCLEVBQU9xeUIsaUJBQW1CLFNBQTBCN2tFLEVBQU11QyxHQUN4RCxJQUFJNHVDLEVBQVFweUMsS0FFUnNtRSxFQUFhaEMsRUFBb0JyakUsRUFBTXVDLEdBRXZDc3VFLEVBQVk5eEUsS0FBS214RSxTQUFTWSxtQkFBbUIveEUsS0FBS2t4RSxRQUFTNUssR0FFL0QsT0FBaUIsTUFBYndMLEVBQ0tBLEVBR0ZBLEVBQVV0dEUsS0FBSSxTQUFVOHNFLEdBQzdCLE9BQW1CLE1BQVpBLEVBQW1CbC9CLEVBQU03VSxRQUFRbndCLElBQUlra0UsR0FBWUEsTUFJNUQ3OUIsRUFBT3V5QixpQkFBbUIsU0FBMEJnTSxFQUFTL3dFLEVBQU11QyxHQUNoRUksTUFBTUMsUUFBUW11RSxJQUFrS3g3QixHQUFVLEdBQzNMLElBQUk4dkIsRUFBYWhDLEVBQW9CcmpFLEVBQU11QyxHQUN2Q3N1RSxFQUFZRSxFQUFReHRFLEtBQUksU0FBVWloRSxHQUNwQyxPQUFPQSxHQUFVQSxFQUFPWixlQUsxQixPQUZBN2tFLEtBQUtteEUsU0FBU2MsbUJBQW1CanlFLEtBQUtreEUsUUFBUzVLLEVBQVl3TCxHQUVwRDl4RSxNQUdUeXpDLEVBQU95K0IsaUJBQW1CLFdBQ3hCbHlFLEtBQUt1OUIsUUFBUTQwQyxzQkFBc0JueUUsS0FBS2t4RSxVQUduQ0YsRUF6RzJCLEdBNEdwQyxTQUFTSyxFQUFpQnhqRSxHQUN4QixPQUFnQixNQUFUQSxHQUFrQyxpQkFBVkEsR0FBc0JqSyxNQUFNQyxRQUFRZ0ssSUFBVUEsRUFBTXVrRSxNQUFNZixHQUczRmh5RSxFQUFPQyxRQUFVMHhFLEcsNEJDOUhqQixJQUFJN0YsRUFBb0IsRUFBUSxNQUU1QjMwQixFQUFZLEVBQVEsTUFHcEI2N0IsRUFEVyxFQUFRLE1BQ0NBLFNBY3BCQyxFQUF3QyxXQUMxQyxTQUFTQSxFQUF5Qm4rRCxFQUFNaWxDLEdBQ3RDcDVDLEtBQUt1eUUsVUFBWSxDQUFDbjVCLEVBQU1qbEMsR0FDeEJuVSxLQUFLd3lFLE1BQVFyK0QsRUFDYm5VLEtBQUt5eUUsTUFBUXI1QixFQVVmLElBQUkzRixFQUFTNitCLEVBQXlCcjBFLFVBaUx0QyxPQS9LQXcxQyxFQUFPaS9CLGlDQUFtQyxTQUEwQ3JvQixHQUNsRixJQUFJc29CLEVBQWEzeUUsS0FBS3d5RSxNQUFNcGxFLElBQUlpOUMsR0FFNUJ1b0IsRUFBYTV5RSxLQUFLeXlFLE1BQU1ybEUsSUFBSWk5QyxHQUVoQyxZQUFtQi9tRCxJQUFmc3ZFLEVBQ2dCLE1BQWRELEVBQ0tBLEVBR1F4SCxFQUFrQjBILE1BQU1GLEdBUWpCLE9BQWZDLEVBQ0YsS0FDZ0IsTUFBZEQsRUFDU3hILEVBQWtCdEUsT0FBTzhMLEVBQVlDLEdBV3BDekgsRUFBa0IwSCxNQUFNRCxJQVcvQ24vQixFQUFPcS9CLGVBQWlCLFNBQXdCem9CLEdBQzlDLElBQUl1b0IsRUFBYTV5RSxLQUFLeXlFLE1BQU1ybEUsSUFBSWk5QyxHQUVoQyxJQUFLdW9CLEVBQVksQ0FDZixJQUFJRCxFQUFhM3lFLEtBQUt3eUUsTUFBTXBsRSxJQUFJaTlDLEdBRS9Cc29CLEdBQXFKbjhCLEdBQVUsR0FDaEtvOEIsRUFBYXpILEVBQWtCL3NDLE9BQU9pc0IsRUFBUThnQixFQUFrQnBHLFFBQVE0TixJQUV4RTN5RSxLQUFLeXlFLE1BQU12bUUsSUFBSW0rQyxFQUFRdW9CLEdBR3pCLE9BQU9BLEdBR1RuL0IsRUFBTzI5QixXQUFhLFNBQW9CMkIsRUFBVUMsR0FDaEQsSUFBSUMsRUFBYWp6RSxLQUFLeXlFLE1BQU1ybEUsSUFBSTJsRSxHQUU1QkcsRUFBYWx6RSxLQUFLd3lFLE1BQU1wbEUsSUFBSTJsRSxHQUU5QkUsR0FBY0MsR0FBb0wxOEIsR0FBVSxHQUU5TSxJQUFJNEMsRUFBT3A1QyxLQUFLOHlFLGVBQWVFLEdBRTNCRSxHQUNGL0gsRUFBa0JpRyxXQUFXOEIsRUFBWTk1QixHQUd2QzY1QixHQUNGOUgsRUFBa0JpRyxXQUFXNkIsRUFBWTc1QixJQUk3QzNGLEVBQU8wL0IscUJBQXVCLFNBQThCMU4sRUFBUXVOLEdBQ2xFLElBQUk1NUIsRUFBT3A1QyxLQUFLOHlFLGVBQWVFLEdBRS9CN0gsRUFBa0JpRyxXQUFXM0wsRUFBUXJzQixJQUd2QzNGLEVBQU9yVixPQUFTLFNBQWdCaXNCLEVBQVFxbkIsSUFDcEMxeEUsS0FBS3d5RSxNQUFNWSxVQUFVL29CLEtBQVlnb0IsR0FBWXJ5RSxLQUFLeXlFLE1BQU1XLFVBQVUvb0IsS0FBWWdvQixJQUEyTDc3QixHQUFVLEdBQ3JSLElBQUlpdkIsRUFBUzBGLEVBQWtCL3NDLE9BQU9pc0IsRUFBUXFuQixHQUU5QzF4RSxLQUFLeXlFLE1BQU12bUUsSUFBSW0rQyxFQUFRb2IsSUFHekJoeUIsRUFBZSxPQUFJLFNBQWlCNFcsR0FDbENycUQsS0FBS3l5RSxNQUFjLE9BQUVwb0IsSUFHdkI1VyxFQUFPMi9CLFVBQVksU0FBbUIvb0IsR0FDcEMsT0FBT3JxRCxLQUFLeXlFLE1BQU1sbEQsSUFBSTg4QixHQUFVcnFELEtBQUt5eUUsTUFBTVcsVUFBVS9vQixHQUFVcnFELEtBQUt3eUUsTUFBTVksVUFBVS9vQixJQUd0RjVXLEVBQU9zeEIsUUFBVSxTQUFpQjFhLEdBQ2hDLElBQUssSUFBSTdwQixFQUFLLEVBQUdBLEVBQUt4Z0MsS0FBS3V5RSxVQUFVM3pFLE9BQVE0aEMsSUFBTSxDQUNqRCxJQUFJaWxDLEVBQVN6bEUsS0FBS3V5RSxVQUFVL3hDLEdBQUlwekIsSUFBSWk5QyxHQUVwQyxHQUFJb2IsRUFDRixPQUFPMEYsRUFBa0JwRyxRQUFRVSxHQUM1QixHQUFlLE9BQVhBLEVBQ1QsT0FBTyxPQUtiaHlCLEVBQU9sbUMsU0FBVyxTQUFrQjg4QyxFQUFRaWMsR0FDMUMsSUFBSyxJQUFJOWxDLEVBQUssRUFBR0EsRUFBS3hnQyxLQUFLdXlFLFVBQVUzekUsT0FBUTRoQyxJQUFNLENBQ2pELElBQUlpbEMsRUFBU3psRSxLQUFLdXlFLFVBQVUveEMsR0FBSXB6QixJQUFJaTlDLEdBRXBDLEdBQUlvYixFQUFRLENBQ1YsSUFBSTUzRCxFQUFRczlELEVBQWtCNTlELFNBQVNrNEQsRUFBUWEsR0FFL0MsUUFBY2hqRSxJQUFWdUssRUFDRixPQUFPQSxPQUVKLEdBQWUsT0FBWDQzRCxFQUNULE9BQU8sT0FLYmh5QixFQUFPam1DLFNBQVcsU0FBa0I2OEMsRUFBUWljLEVBQVl6NEQsR0FDdEQsSUFBSStrRSxFQUFhNXlFLEtBQUs4eUUsZUFBZXpvQixHQUVyQzhnQixFQUFrQjM5RCxTQUFTb2xFLEVBQVl0TSxFQUFZejRELElBR3JENGxDLEVBQU84OUIsa0JBQW9CLFNBQTJCbG5CLEVBQVFpYyxHQUM1RCxJQUFLLElBQUk5bEMsRUFBSyxFQUFHQSxFQUFLeGdDLEtBQUt1eUUsVUFBVTN6RSxPQUFRNGhDLElBQU0sQ0FDakQsSUFBSWlsQyxFQUFTemxFLEtBQUt1eUUsVUFBVS94QyxHQUFJcHpCLElBQUlpOUMsR0FFcEMsR0FBSW9iLEVBQVEsQ0FDVixJQUFJNkwsRUFBV25HLEVBQWtCb0csa0JBQWtCOUwsRUFBUWEsR0FFM0QsUUFBaUJoakUsSUFBYmd1RSxFQUNGLE9BQU9BLE9BRUosR0FBZSxPQUFYN0wsRUFDVCxPQUFPLE9BS2JoeUIsRUFBTys5QixrQkFBb0IsU0FBMkJubkIsRUFBUWljLEVBQVlnTCxHQUN4RSxJQUFJc0IsRUFBYTV5RSxLQUFLOHlFLGVBQWV6b0IsR0FFckM4Z0IsRUFBa0JxRyxrQkFBa0JvQixFQUFZdE0sRUFBWWdMLElBRzlENzlCLEVBQU9zK0IsbUJBQXFCLFNBQTRCMW5CLEVBQVFpYyxHQUM5RCxJQUFLLElBQUk5bEMsRUFBSyxFQUFHQSxFQUFLeGdDLEtBQUt1eUUsVUFBVTN6RSxPQUFRNGhDLElBQU0sQ0FDakQsSUFBSWlsQyxFQUFTemxFLEtBQUt1eUUsVUFBVS94QyxHQUFJcHpCLElBQUlpOUMsR0FFcEMsR0FBSW9iLEVBQVEsQ0FDVixJQUFJcU0sRUFBWTNHLEVBQWtCNEcsbUJBQW1CdE0sRUFBUWEsR0FFN0QsUUFBa0JoakUsSUFBZHd1RSxFQUNGLE9BQU9BLE9BRUosR0FBZSxPQUFYck0sRUFDVCxPQUFPLE9BS2JoeUIsRUFBT3crQixtQkFBcUIsU0FBNEI1bkIsRUFBUWljLEVBQVl3TCxHQUMxRSxJQUFJYyxFQUFhNXlFLEtBQUs4eUUsZUFBZXpvQixHQUVyQzhnQixFQUFrQjhHLG1CQUFtQlcsRUFBWXRNLEVBQVl3TCxJQUd4RFEsRUEvTG1DLEdBa001Q2p6RSxFQUFPQyxRQUFVZ3pFLEcsNEJDck5qQixJQUFJbkgsRUFBb0IsRUFBUSxNQUU1QjZGLEVBQW1CLEVBQVEsTUFFM0J4NkIsRUFBWSxFQUFRLE1BRXBCOUIsRUFBVyxFQUFRLE1BQ25CMjlCLEVBQVczOUIsRUFBUzI5QixTQUNwQmdCLEVBQWMzK0IsRUFBUzIrQixZQUV2QmpnQixFQUFZLEVBQVEsTUFDcEJtYixFQUFVbmIsRUFBVW1iLFFBQ3BCQyxFQUFZcGIsRUFBVW9iLFVBT3RCOEUsRUFBc0MsV0FDeEMsU0FBU0EsRUFBdUJyQyxFQUFTcE0sRUFBVzBPLEdBQ2xEdnpFLEtBQUt3ekUsVUFBWXZDLEVBQ2pCanhFLEtBQUt5ekUsaUJBQW1CRixHQUFtQixLQUMzQ3Z6RSxLQUFLMHpFLFNBQVcsR0FDaEIxekUsS0FBSzJ6RSxXQUFhOU8sRUFDbEI3a0UsS0FBSzR6RSxtQkFBb0IsRUFDekI1ekUsS0FBSzZ6RSwwQkFBNEIsSUFBSWpzRSxJQUd2QyxJQUFJNnJDLEVBQVM2L0IsRUFBdUJyMUUsVUE0RnBDLE9BMUZBdzFDLEVBQU9xZ0MsY0FBZ0IsU0FBdUJ0MUUsRUFBUXUxRSxHQUNwRCxJQUFJM2hDLEVBQVFweUMsS0FFRXhCLEVBQU93MUUsZUFDYm52RSxTQUFRLFNBQVV3bEQsR0FDeEIsSUFBSXZOLEVBQVN0K0MsRUFBTzQwRSxVQUFVL29CLEdBRTlCLEdBQUl2TixJQUFXdTFCLEVBQVUsQ0FDdkIsSUFBSTRCLEVBQWV6MUUsRUFBTzRPLElBQUlpOUMsR0FFMUI0cEIsSUFDRTdoQyxFQUFNb2hDLFVBQVVKLFVBQVUvb0IsS0FBWWdvQixHQUN4Q2pnQyxFQUFNaFUsT0FBT2lzQixFQUFROGdCLEVBQWtCcEcsUUFBUWtQLElBR2pEN2hDLEVBQU1vaEMsVUFBVUwscUJBQXFCYyxFQUFjNXBCLFNBRTVDdk4sSUFBV3UyQixHQUNwQmpoQyxFQUFjLE9BQUVpWSxNQUloQjBwQixHQUFpQkEsRUFBY24xRSxRQUNqQ20xRSxFQUFjbHZFLFNBQVEsU0FBVXF2RSxHQUM5QixJQUFJQyxFQUFVL2hDLEVBQU1xaEMsa0JBQW9CcmhDLEVBQU1xaEMsaUJBQWlCUyxFQUFhclEsUUFFM0VzUSxHQUF3SzM5QixHQUFVLEdBQ25MMjlCLEVBQVF0TixPQUFPejBCLEVBQU84aEMsT0FLNUJ6Z0MsRUFBT3JWLE9BQVMsU0FBZ0Jpc0IsRUFBUXFuQixHQUN0QzF4RSxLQUFLd3pFLFVBQVVwMUMsT0FBT2lzQixFQUFRcW5CLFVBRXZCMXhFLEtBQUswekUsU0FBU3JwQixHQUNyQixJQUFJb2IsRUFBU3psRSxLQUFLb04sSUFBSWk5QyxHQUd0QixPQURDb2IsR0FBOElqdkIsR0FBVSxHQUNsSml2QixHQUdUaHlCLEVBQWUsT0FBSSxTQUFpQjRXLEdBQ2hDQSxJQUFXa2tCLEdBQXlJLzNCLEdBQVUsVUFDekp4MkMsS0FBSzB6RSxTQUFTcnBCLEdBRXJCcnFELEtBQUt3ekUsVUFBa0IsT0FBRW5wQixJQUczQjVXLEVBQU9ybUMsSUFBTSxTQUFhaTlDLEdBQ3hCLElBQUtycUQsS0FBSzB6RSxTQUFTMTBFLGVBQWVxckQsR0FBUyxDQUN6QyxJQUFJdk4sRUFBUzk4QyxLQUFLd3pFLFVBQVVKLFVBQVUvb0IsR0FHcENycUQsS0FBSzB6RSxTQUFTcnBCLEdBRFp2TixJQUFXdTFCLEVBQ1csSUFBSXJCLEVBQWlCaHhFLEtBQU1BLEtBQUt3ekUsVUFBV25wQixHQUUzQ3ZOLElBQVd1MkIsRUFBYyxVQUFPL3ZFLEVBSTVELE9BQU90RCxLQUFLMHpFLFNBQVNycEIsSUFHdkI1VyxFQUFPMmdDLFFBQVUsV0FDZixJQUFJamxCLEVBQU9udkQsS0FBS29OLElBQUltaEUsR0FPcEIsT0FMS3BmLElBQ0hBLEVBQU9udkQsS0FBS28rQixPQUFPbXdDLEVBQVNDLElBRzVCcmYsR0FBUUEsRUFBSzRWLFlBQWN5SixHQUF5UWg0QixHQUFVLEdBQ3pTMlksR0FHVDFiLEVBQU80Z0MsZ0JBQWtCLFdBQ3ZCcjBFLEtBQUs0ekUsbUJBQW9CLEdBRzNCbmdDLEVBQU82Z0MsNkJBQStCLFdBQ3BDLE9BQU90MEUsS0FBSzR6RSxtQkFHZG5nQyxFQUFPMCtCLHNCQUF3QixTQUErQjluQixHQUM1RHJxRCxLQUFLNnpFLDBCQUEwQjdyRSxJQUFJcWlELElBR3JDNVcsRUFBTzhnQyw0QkFBOEIsV0FDbkMsT0FBT3YwRSxLQUFLNnpFLDJCQUdQUCxFQXRHaUMsR0F5RzFDajBFLEVBQU9DLFFBQVVnMEUsRyw0QkM1SGpCLElBQUk5OEIsRUFBWSxFQUFRLE1BRXBCOUIsRUFBVyxFQUFRLE1BQ25CODRCLEVBQWdCOTRCLEVBQVM4NEIsY0FDekJnQixFQUFZOTVCLEVBQVM4NUIsVUFVckJnRyxFQUE4QyxXQUNoRCxTQUFTQSxFQUErQnZELEVBQVN3RCxFQUFjQyxHQUM3RDEwRSxLQUFLd3pFLFVBQVl2QyxFQUNqQmp4RSxLQUFLMjBFLGVBQWlCRixFQUN0QnowRSxLQUFLNDBFLGNBQWdCRixFQUd2QixJQUFJamhDLEVBQVMrZ0MsRUFBK0J2MkUsVUF1RDVDLE9BckRBdzFDLEVBQU9yVixPQUFTLFNBQWdCaXNCLEVBQVFxbkIsR0FDdEMsT0FBTzF4RSxLQUFLMjBFLGVBQWV2MkMsT0FBT2lzQixFQUFRcW5CLElBRzVDaitCLEVBQWUsT0FBSSxTQUFpQjRXLEdBQ2xDcnFELEtBQUsyMEUsZUFBdUIsT0FBRXRxQixJQUdoQzVXLEVBQU9ybUMsSUFBTSxTQUFhaTlDLEdBQ3hCLE9BQU9ycUQsS0FBSzIwRSxlQUFldm5FLElBQUlpOUMsSUFHakM1VyxFQUFPMmdDLFFBQVUsV0FDZixPQUFPcDBFLEtBQUsyMEUsZUFBZVAsV0FHN0IzZ0MsRUFBT29oQyxpQkFBbUIsV0FDeEIsSUFBSTFsQixFQUFPbnZELEtBQUsyMEUsZUFBZXZuRSxJQUFJcE4sS0FBSzQwRSxjQUFjdnFCLFFBTXRELE9BSks4RSxJQUNIQSxFQUFPbnZELEtBQUsyMEUsZUFBZXYyQyxPQUFPcCtCLEtBQUs0MEUsY0FBY3ZxQixPQUFRbWtCLElBR3hEcmYsR0FHVDFiLEVBQU9xaEMsY0FBZ0IsU0FBdUJ2ekIsRUFBVXd6QixFQUFXL3VCLEdBQ2pFLElBQUlndkIsRUFBUXp6QixFQUFTcmtELEtBQUtneUUsV0FBV2hILE1BQUssU0FBVStNLEdBQ2xELE1BQTBCLGdCQUFuQkEsRUFBVXh6QixNQUEwQnd6QixFQUFVaDBFLE9BQVM4ekUsS0FJaEUsT0FGRUMsR0FBd0IsZ0JBQWZBLEVBQU12ekIsTUFBMlBqTCxHQUFVLEdBQ3BSdytCLEVBQU1odkIsU0FBV0EsR0FBME14UCxHQUFVLEdBQ2hPdytCLEdBR1R2aEMsRUFBT3c3QixhQUFlLFNBQXNCOEYsR0FDMUMsSUFBSUMsRUFBUWgxRSxLQUFLODBFLGNBQWM5MEUsS0FBSzQwRSxjQUFlRyxHQUFXLEdBRTFEek8sRUFBYWtILEVBQWN3SCxFQUFPaDFFLEtBQUs0MEUsY0FBYzMvQixXQUN6RCxPQUFPajFDLEtBQUs2MEUsbUJBQW1CdlAsZ0JBQWdCZ0IsSUFHakQ3eUIsRUFBT3loQyxtQkFBcUIsU0FBNEJILEdBQ3RELElBQUlDLEVBQVFoMUUsS0FBSzgwRSxjQUFjOTBFLEtBQUs0MEUsY0FBZUcsR0FBVyxHQUUxRHpPLEVBQWFrSCxFQUFjd0gsRUFBT2gxRSxLQUFLNDBFLGNBQWMzL0IsV0FDekQsT0FBT2oxQyxLQUFLNjBFLG1CQUFtQi9PLGlCQUFpQlEsSUFHbEQ3eUIsRUFBTzRnQyxnQkFBa0IsV0FDdkJyMEUsS0FBSzIwRSxlQUFlTixtQkFHZkcsRUE5RHlDLEdBaUVsRG4xRSxFQUFPQyxRQUFVazFFLEcsMkJDL0VqQixJQUFJM0osRUFBaUMsRUFBUSxNQUV6Q3IwQixFQUFZLEVBQVEsTUFFcEI2RixFQUEyQixFQUFRLEtBR25DekgsRUFEVyxFQUFRLE1BQ0dBLFdBR3RCRCxFQURZLEVBQVEsTUFDa0JBLDBCQWlDMUN0MUMsRUFBT0MsUUEzQlAsU0FBaUNzekMsRUFBYStsQixHQUMzQ3RjLEVBQXlCekosSUFBd0s0RCxHQUFVLEdBQzVNLElBQUkyaEIsRUFBV3ZqQixFQUFXK2pCLEVBQU9SLFVBRWpDLEdBQXNDLGFBQWxDQSxFQUFTL1ksT0FBTysxQixjQUNsQixNQUFNLElBQUk1eEUsTUFBTSwrQ0FHbEIsSUFBSThyRSxFQUFvQjFXLEVBQU8wVyxrQkFDM0JELEVBQVV6VyxFQUFPeVcsUUFDakJnRyxFQUFxQnpjLEVBQU95YyxtQkFDNUJuZ0MsRUFBWTBqQixFQUFPMWpCLFVBQ25CRSxFQUFZUixFQUEwQndqQixFQUFVbGpCLEdBUXBELE9BTkltNkIsSUFHRkMsRUFGNEJ4RSxFQUErQnNFLFFBQVFDLEVBQVNqWCxFQUFVa1gsR0FFNUNBLG1CQUdyQ3o4QixFQUFZeWlDLGNBQWMsQ0FDL0JsZ0MsVUFBV0EsRUFDWHNMLFNBQVUyMEIsRUFDVnY5QyxRQUFTdzNDLE0sc0JDbkNiaHdFLEVBQU9DLFFBSlAsU0FBMkJzekMsRUFBYS9hLEdBQ3RDK2EsRUFBWTBpQyxhQUFhejlDLEssNEJDRDNCLElBRUk4c0IsRUFGeUIsRUFBUSxLQUVYM1QsQ0FBdUIsRUFBUSxPQUVyRDY1QixFQUFpQyxFQUFRLE1BRXpDcjBCLEVBQVksRUFBUSxNQUVwQjZGLEVBQTJCLEVBQVEsS0FPbkN6SCxHQUxtQixFQUFRLE1BRWpCLEVBQVEsTUFFUCxFQUFRLE1BQ0dBLFlBR3RCczNCLEVBRFksRUFBUSxNQUNlQSx1QkFHbkN2M0IsRUFEWSxFQUFRLE1BQ2tCQSwwQkFvRjFDdDFDLEVBQU9DLFFBOUVQLFNBQXdCc3pDLEVBQWErbEIsR0FDbEN0YyxFQUF5QnpKLElBQXdLNEQsR0FBVSxHQUM1TSxJQUFJMmhCLEVBQVd2akIsRUFBVytqQixFQUFPUixVQUVqQyxHQUFzQyxhQUFsQ0EsRUFBUy9ZLE9BQU8rMUIsY0FDbEIsTUFBTSxJQUFJNXhFLE1BQU0sK0NBR2xCLEdBQXNCLFlBQWxCNDBELEVBQVMxVyxLQUNYLE1BQU0sSUFBSWwrQyxNQUFNLDJEQUdsQixJQUFJNnhFLEVBQXFCemMsRUFBT3ljLG1CQUM1Qi9GLEVBQW9CMVcsRUFBTzBXLGtCQUMzQngzQyxFQUFVOGdDLEVBQU85Z0MsUUFDakJ1M0MsRUFBVXpXLEVBQU95VyxRQUNqQjF6QixFQUFjaWQsRUFBT2pkLFlBQ3JCM2tDLEVBQVU0aEQsRUFBTzVoRCxRQUNqQitoRCxFQUFnQkgsRUFBT0csY0FDdkI3akIsRUFBWTBqQixFQUFPMWpCLFVBQ25Cc2dDLEVBQWM1YyxFQUFPNGMsWUFDckJwZ0MsRUFBWVIsRUFBMEJ3akIsRUFBVWxqQixFQUFXeUcsRUFBYXd3QixLQWE1RSxHQVhrQyxtQkFBdkJrSixJQUNUQSxFQUFxQkEsS0FVbkJoRyxFQUFTLENBQ1gsSUFBSW9HLEVBQXdCM0ssRUFBK0JzRSxRQUFRQyxFQUFTalgsRUFBVWtYLEVBQW1CeDNDLEdBRXpHdzNDLEVBQW9CbUcsRUFBc0JuRyxrQkFDMUN4M0MsRUFBVTI5QyxFQUFzQjM5QyxRQUdsQyxJQUFJZ2hDLEVBQVMsR0FnQ2IsTUFBTyxDQUNMamxCLFFBaENpQmhCLEVBQVk2aUMsZ0JBQWdCLENBQzdDdGdDLFVBQVdBLEVBQ1hpZ0MsbUJBQW9CQSxFQUNwQi9GLGtCQUFtQkEsRUFDbkJ4M0MsUUFBU0EsRUFDVDA5QyxZQUFhQSxJQUNaMTNDLFVBQVUsQ0FDWDNJLEtBQU0sU0FBY2UsR0FDZHJ5QixNQUFNQyxRQUFRb3lCLEdBQ2hCQSxFQUFRcHhCLFNBQVEsU0FBVTZ3RSxHQUNwQkEsRUFBSzdjLFFBQ1BBLEVBQU9oNkQsS0FBS2lZLE1BQU0raEQsR0FBUSxFQUFJbFUsRUFBNkIsU0FBRyt3QixFQUFLN2MsWUFJbkU1aUMsRUFBUTRpQyxRQUNWQSxFQUFPaDZELEtBQUtpWSxNQUFNK2hELEdBQVEsRUFBSWxVLEVBQTZCLFNBQUcxdUIsRUFBUTRpQyxVQUk1RTdoQixTQUFVLFdBQ1IsSUFBSTRoQixFQUFjRCxFQUFPQyxZQUVyQkEsR0FFRkEsRUFEZWhtQixFQUFZK0MsT0FBT1IsRUFBVVMsVUFDdkJ0ekIsS0FBd0IsSUFBbEJ1MkMsRUFBT2o2RCxPQUFlaTZELEVBQVMsT0FHOUR4MUQsTUFBTzBULEVBQ1BrZ0MsWUFBYTZoQixJQUdTN2hCLGUsNEJDckdHLEVBQVEsS0FFaEJqRyxDQUF1QixFQUFRLE9BRXRDLEVBQVEsTUFFRGh6QyxPQUFPQyxVQUFVZSxlQU50QyxJQVFJMDFDLEVBQVcsRUFBUSxLQUNQQSxFQUFTaWhDLFVBQ0ZqaEMsRUFBU2toQyxpQkFDVGxoQyxFQUFTbWhDLGlCQUNwQm5oQyxFQUFTb2hDLE1BQ0ZwaEMsRUFBU3FoQyxhQUNOcmhDLEVBQVNzaEMsZ0JBQ1R0aEMsRUFBU3VoQyxnQkFDWnZoQyxFQUFTd2hDLGFBQ1J4aEMsRUFBU3loQyxjQUNUemhDLEVBQVMwaEMsY0FDVjFoQyxFQUFTMmhDLGFBQ1IzaEMsRUFBUzRoQyxjQUNoQjVoQyxFQUFTNmhDLE9BQ0c3aEMsRUFBUzhoQyxtQkEwTGxDbjNFLEVBQU9DLFFBeExnQixjLDRCQ3hCdkIsSUFBSWlzRSxFQUFrQixFQUFRLE1BcUI5QmxzRSxFQUFPQyxRQUFVLENBQ2ZtM0UsYUFqQkYsU0FBc0JDLEdBQ3BCLE9BQU8sU0FBZXRoQyxFQUFTSCxFQUFXeUcsRUFBYTY1QixFQUFhb0IsR0FDbEUsSUFBSXAzRSxFQUFTbTNFLEVBQUd0aEMsRUFBU0gsRUFBV3lHLEVBQWE2NUIsRUFBYW9CLEdBSTlELE9BQUlwM0UsYUFBa0JnRSxNQUNiZ29FLEVBQWdCbnRDLFFBQU8sU0FBVWdiLEdBQ3RDLE9BQU9BLEVBQUsvMUMsTUFBTTlELE1BSWZnc0UsRUFBZ0JybUUsS0FBSzNGLE8sNEJDakJoQyxJQUFJaTNDLEVBQVksRUFBUSxNQUdwQmlnQyxFQURXLEVBQVEsTUFDS0EsYUFrQzVCcDNFLEVBQU9DLFFBQVUsQ0FDZjgrQixPQTdCRixTQUFnQnEwQixFQUFTNTBCLEdBRXZCLElBQUkrNEMsRUFBZUgsRUFBYWhrQixHQXFCaEMsTUFBTyxDQUNMNVcsUUFwQkYsU0FBaUJ6RyxFQUFTSCxFQUFXeUcsRUFBYTY1QixFQUFhb0IsR0FDN0QsR0FBOEIsaUJBQTFCdmhDLEVBQVErL0IsY0FHVixPQUZDdDNDLEdBQXNNMlksR0FBVSxHQUMvTSsrQixHQUF3SS8rQixHQUFVLEdBQzdJM1ksRUFBVXVYLEVBQVNILEVBQVd5RyxHQUd2QyxJQUFJbTdCLEVBQWVuN0IsRUFBWW83QixLQUUvQixPQUFvQixNQUFoQkQsR0FDQXRCLEdBQW9JLytCLEdBQVUsR0FDeklvZ0MsRUFBYXhoQyxFQUFTSCxFQUFXLENBQ3RDZ0UsT0FBTyxJQUNONjlCLEtBQUtELElBR0hELEVBQWF4aEMsRUFBU0gsRUFBV3lHLEVBQWE2NUIsRUFBYW9CLFEsNEJDN0J0RSxJQUFJNXhCLEVBQVksRUFBUSxNQU9wQmd5QixFQXNrQkosU0FBc0J0NUIsRUFBUXU1QixLQXpqQjFCekwsRUFBK0IsV0FNakMsU0FBU0EsRUFBZ0Ivc0UsR0FRdkJ3QixLQUFLdTlCLFFBQVUvK0IsRUFiakIrc0UsRUFBZ0JudEMsT0FBUyxTQUFnQjUvQixHQUN2QyxPQUFPLElBQUkrc0UsRUFBZ0Ivc0UsSUF5QzdCK3NFLEVBQWdCMEwsaUJBQW1CLFNBQTBCL2dELEdBQzNENmdELEVBQWtCN2dELEdBUXBCcTFDLEVBQWdCcm1FLEtBQU8sU0FBY3M1RCxHQUNuQyxPQWdXSixTQUFzQkEsR0FDcEIsTUFBc0IsaUJBQVJBLEdBQTRCLE9BQVJBLEdBQXlDLG1CQUFsQkEsRUFBSTNnQyxVQWpXcERxNUMsQ0FBYTFZLEdBQU8yWSxFQUFlM1ksR0FBT3paLEVBQVV5WixHQUFPNFksRUFBWTVZLEdBQU82WSxFQUFVN1ksSUFXakcsSUFBSS9xQixFQUFTODNCLEVBQWdCdHRFLFVBaVY3QixPQS9VQXcxQyxFQUFjLE1BQUksU0FBZ0JpakMsR0FDaEMsSUFBSXRrQyxFQUFRcHlDLEtBRVosT0FBT3VyRSxFQUFnQm50QyxRQUFPLFNBQVVnYixHQUN0QyxJQUFJbEMsRUEwQkosT0F4QkE5RSxFQUFNdlUsVUFBVSxDQUNkMVIsTUFBTyxTQUFlbXJELEdBQ3BCcGdDLEVBQWVvZ0MsR0FFakJwaUQsS0FBTWtrQixFQUFLbGtCLEtBQ1g4aEIsU0FBVW9DLEVBQUtwQyxTQUNmM3pDLE1BQU8sU0FBZWswRSxHQUNwQixJQUNFYixFQUFHYSxHQUFTMTVDLFVBQVUsQ0FDcEIxUixNQUFPLFNBQWVtckQsR0FDcEJwZ0MsRUFBZW9nQyxHQUVqQnBpRCxLQUFNa2tCLEVBQUtsa0IsS0FDWDhoQixTQUFVb0MsRUFBS3BDLFNBQ2YzekMsTUFBTysxQyxFQUFLLzFDLFFBRWQsTUFBT20wRSxHQUNQcCtCLEVBQUsvMUMsTUFBTW0wRSxHQUFRLE9BT2xCLFdBQ0wsT0FBT3RnQyxFQUFhRCxtQkFXMUJ4RCxFQUFPL3dDLE9BQVMsU0FBZ0J3eUIsR0FDOUIsSUFBSW1tQixFQUFTcjdDLEtBRWIsT0FBT3VyRSxFQUFnQm50QyxRQUFPLFNBQVVnYixHQUN0QyxJQUFJbmhDLEVBYUosT0FYQW9qQyxFQUFPeGQsVUFBVSxDQUNmMVIsTUFBTyxTQUFlK3FCLEdBQ3BCai9CLEVBQVVpL0IsR0FFWmhpQixLQUFNa2tCLEVBQUtsa0IsS0FDWDd4QixNQUFPKzFDLEVBQUsvMUMsTUFDWjJ6QyxTQUFVLFdBQ1IvK0IsRUFBVWlkLEVBQUsySSxVQUFVdWIsTUFJdEIsV0FDTG5oQyxHQUFXQSxFQUFRZy9CLG1CQWlCekJ4RCxFQUFXLEdBQUksU0FBYTBGLEdBQzFCLElBQUlzRixFQUFTeitDLEtBRWIsT0FBT3VyRSxFQUFnQm50QyxRQUFPLFNBQVVnYixHQUN0QyxJQUFJcStCLEVBQU8sU0FBYzE2QyxHQUN2QixPQUFPLFdBQ0wsSUFDRW9jLEVBQVNwYyxJQUFXb2MsRUFBU3BjLEdBQVFqbUIsTUFBTXFpQyxFQUFVLzNDLFdBQ3JELE1BQU9pQyxHQUNQMHpFLEVBQWdCMXpFLEdBQU8sR0FLekIrMUMsRUFBS3JjLElBQVdxYyxFQUFLcmMsR0FBUWptQixNQUFNc2lDLEVBQU1oNEMsYUFJN0MsT0FBT3E5QyxFQUFPNWdCLFVBQVUsQ0FDdEIxUixNQUFPc3JELEVBQUssU0FDWnZpRCxLQUFNdWlELEVBQUssUUFDWHAwRSxNQUFPbzBFLEVBQUssU0FDWnpnQyxTQUFVeWdDLEVBQUssWUFDZnhnQyxZQUFhd2dDLEVBQUsscUJBYXhCaGtDLEVBQWdCLFFBQUksU0FBa0JpakMsR0FDcEMsSUFBSXp1QixFQUFTam9ELEtBRWIsT0FBT3VyRSxFQUFnQm50QyxRQUFPLFNBQVVnYixHQUN0QyxJQUFJbEMsRUFBZStRLEVBQU9wcUIsVUFBVXViLEdBRXBDLE9BQU8sV0FDTGxDLEVBQWFELGNBQ2J5L0IsU0FnQk5qakMsRUFBTyttQixRQUFVLFNBQWlCampELEdBQ2hDLElBQUk0d0MsRUFBU25vRCxLQUViLE9BQU91ckUsRUFBZ0JudEMsUUFBTyxTQUFVZ2IsR0FDdEMsSUFBSXMrQixHQUFXLEVBRVh6L0QsRUFBVWt3QyxFQUFPdHFCLFVBQVUsQ0FDN0IzSSxLQUFNLFNBQWNybkIsR0FDbEI2cEUsR0FBVyxFQUNYdCtCLEVBQUtsa0IsS0FBS3JuQixJQUVaeEssTUFBTysxQyxFQUFLLzFDLE1BQ1oyekMsU0FBVSxXQUNKMGdDLEVBQ0Z0K0IsRUFBS3BDLFdBRUwvK0IsRUFBVVYsRUFBVXNtQixVQUFVdWIsTUFLcEMsT0FBTyxXQUNMbmhDLEVBQVFnL0IsbUJBYWR4RCxFQUFPNVYsVUFBWSxTQUFtQnNiLEdBUXBDLE9BMExKLFNBQW9CMzZDLEVBQVEyNkMsR0FDMUIsSUFDSXlDLEVBREErN0IsR0FBUyxFQU1UQyxFQUFhLFNBQW9CcFosR0FDbkMsT0FBT3hnRSxPQUFPK0QsZUFBZXk4RCxFQUFLLFNBQVUsQ0FDMUNweEQsSUFBSyxXQUNILE9BQU91cUUsTUFLYixTQUFTRSxJQUNQLEdBQUlqOEIsRUFBUyxDQUNYLEdBQUlBLEVBQVEzRSxZQUNWMkUsRUFBUTNFLG1CQUVSLElBQ0UyRSxJQUNBLE1BQU92NEMsR0FDUDB6RSxFQUFnQjF6RSxHQUFPLEdBTTNCdTRDLE9BQVV0NEMsR0FLZCxJQUFJNHpDLEVBQWUwZ0MsRUFBVyxDQUM1QjNnQyxZQUFhLFdBQ1gsSUFBSzBnQyxFQUFRLENBQ1hBLEdBQVMsRUFFVCxJQUNFeCtCLEVBQVNsQyxhQUFla0MsRUFBU2xDLFlBQVlDLEdBQzdDLE1BQU83ekMsR0FDUDB6RSxFQUFnQjF6RSxHQUFPLEdBR3ZCLFFBQ0F3MEUsU0FNUixJQUNFMStCLEVBQVNodEIsT0FBU2d0QixFQUFTaHRCLE1BQU0rcUIsR0FDakMsTUFBTzd6QyxHQUNQMHpFLEVBQWdCMXpFLEdBQU8sR0FNekIsR0FBSXMwRSxFQUNGLE9BQU96Z0MsRUFJVCxJQUFJa0MsRUFBT3crQixFQUFXLENBQ3BCMWlELEtBQU0sU0FBY3JuQixHQUNsQixJQUFLOHBFLEdBQVV4K0IsRUFBU2prQixLQUN0QixJQUNFaWtCLEVBQVNqa0IsS0FBS3JuQixHQUNkLE1BQU94SyxHQUNQMHpFLEVBQWdCMXpFLEdBQU8sS0FNN0JBLE1BQU8sU0FBZXkwRSxFQUFTQyxHQUM3QixHQUFJSixJQUFXeCtCLEVBQVM5MUMsTUFDdEJzMEUsR0FBUyxFQUNUWixFQUFnQmUsRUFBU0MsSUFBeUIsR0FDbERGLFFBQ0ssQ0FDTEYsR0FBUyxFQUVULElBQ0V4K0IsRUFBUzkxQyxNQUFNeTBFLEdBQ2YsTUFBT04sR0FDUFQsRUFBZ0JTLEdBQVEsR0FHeEIsUUFDQUssT0FJTjdnQyxTQUFVLFdBQ1IsSUFBSzJnQyxFQUFRLENBQ1hBLEdBQVMsRUFFVCxJQUNFeCtCLEVBQVNuQyxVQUFZbUMsRUFBU25DLFdBQzlCLE1BQU8zekMsR0FDUDB6RSxFQUFnQjF6RSxHQUFPLEdBR3ZCLFFBQ0F3MEUsU0FNUixJQUNFajhCLEVBQVVwOUMsRUFBTzQ2QyxHQUNqQixNQUFPLzFDLEdBQ1ArMUMsRUFBSy8xQyxNQUFNQSxHQUFPLEdBaUJwQixPQUpJczBFLEdBQ0ZFLElBR0szZ0MsRUFoVUU4Z0MsQ0FBV2g0RSxLQUFLdTlCLFFBQVM0YixJQVFsQzFGLEVBQU9qdkMsSUFBTSxTQUFha3lFLEdBQ3hCLElBQUl1QixFQUFTajRFLEtBRWIsT0FBT3VyRSxFQUFnQm50QyxRQUFPLFNBQVVnYixHQUN0QyxJQUFJbEMsRUFBZStnQyxFQUFPcDZDLFVBQVUsQ0FDbENtWixTQUFVb0MsRUFBS3BDLFNBQ2YzekMsTUFBTysxQyxFQUFLLzFDLE1BQ1o2eEIsS0FBTSxTQUFjcm5CLEdBQ2xCLElBQ0UsSUFBSXFxRSxFQUFXeEIsRUFBRzdvRSxHQUNsQnVyQyxFQUFLbGtCLEtBQUtnakQsR0FDVixNQUFPNzBFLEdBQ1ArMUMsRUFBSy8xQyxNQUFNQSxHQUFPLE9BT3hCLE9BQU8sV0FDTDZ6QyxFQUFhRCxtQkFXbkJ4RCxFQUFPc0ksU0FBVyxTQUFrQjI2QixHQUNsQyxJQUFJeUIsRUFBU240RSxLQUViLE9BQU91ckUsRUFBZ0JudEMsUUFBTyxTQUFVZ2IsR0FDdEMsSUFBSWcvQixFQUFnQixHQUVwQixTQUFTanNELEVBQU0rcUIsR0FDYmwzQyxLQUFLcTRFLEtBQU9uaEMsRUFDWmtoQyxFQUFjdjVFLEtBQUtxNEMsR0FHckIsU0FBU0YsSUFDUG9oQyxFQUFjRSxPQUFPRixFQUFjeGtFLFFBQVE1VCxLQUFLcTRFLE1BQU8sR0FFMUIsSUFBekJELEVBQWN4NUUsUUFDaEJ3NkMsRUFBS3BDLFdBMEJULE9BdEJBbWhDLEVBQU90NkMsVUFBVSxDQUNmMVIsTUFBT0EsRUFDUCtJLEtBQU0sU0FBY3JuQixHQUNsQixJQUNPdXJDLEVBQUt1K0IsUUFDUnBNLEVBQWdCcm1FLEtBQUt3eEUsRUFBRzdvRSxJQUFRZ3dCLFVBQVUsQ0FDeEMxUixNQUFPQSxFQUNQK0ksS0FBTWtrQixFQUFLbGtCLEtBQ1g3eEIsTUFBTysxQyxFQUFLLzFDLE1BQ1oyekMsU0FBVUEsSUFHZCxNQUFPM3pDLEdBQ1ArMUMsRUFBSy8xQyxNQUFNQSxHQUFPLEtBS3RCQSxNQUFPKzFDLEVBQUsvMUMsTUFDWjJ6QyxTQUFVQSxJQUdMLFdBQ0xvaEMsRUFBY3Z6RSxTQUFRLFNBQVV5eUUsR0FDOUIsT0FBT0EsRUFBSXJnQyxpQkFFYm1oQyxFQUFjeDVFLE9BQVMsT0FhN0I2MEMsRUFBT3FqQyxLQUFPLFNBQWNELEdBQzFCLElBQUkwQixFQUFTdjRFLEtBUWIsT0FBT3VyRSxFQUFnQm50QyxRQUFPLFNBQVVnYixHQUN0QyxJQUFJbEMsRUFDQXNoQyxFQWFKLE9BWFcsU0FBUzFCLElBQ2xCNS9CLEVBQWVxaEMsRUFBTzE2QyxVQUFVLENBQzlCM0ksS0FBTWtrQixFQUFLbGtCLEtBQ1g3eEIsTUFBTysxQyxFQUFLLzFDLE1BQ1oyekMsU0FBVSxXQUNSd2hDLEVBQVU1b0QsV0FBV2tuRCxFQUFNRCxNQUtqQ0MsR0FDTyxXQUNMaG5ELGFBQWEwb0QsR0FDYnRoQyxFQUFhRCxtQkFhbkJ4RCxFQUFPZ2xDLFVBQVksV0FDakIsSUFBSUMsRUFBUzE0RSxLQUViLE9BQU8sSUFBSW90RCxTQUFRLFNBQVUzYSxFQUFTa21DLEdBQ3BDLElBQUlDLEdBQVcsRUFFZkYsRUFBTzc2QyxVQUFVLENBQ2YzSSxLQUFNLFNBQWNoeEIsR0FDYjAwRSxJQUNIQSxHQUFXLEVBQ1hubUMsRUFBUXZ1QyxLQUdaYixNQUFPczFFLEVBQ1AzaEMsU0FBVXZFLFFBS1Q4NEIsRUFqWjBCLEdBeVpuQyxTQUFTNEwsRUFBZTNZLEdBQ3RCLE9BQU9BLGFBQWUrTSxFQUFrQi9NLEVBQU0rTSxFQUFnQm50QyxRQUFPLFNBQVVnYixHQUM3RSxPQUFPb2xCLEVBQUkzZ0MsVUFBVXViLE1BSXpCLFNBQVNnK0IsRUFBWTd1QixHQUNuQixPQUFPZ2pCLEVBQWdCbnRDLFFBQU8sU0FBVWdiLEdBRXRDbVAsRUFBUW5pQixNQUFLLFNBQVV2NEIsR0FDckJ1ckMsRUFBS2xrQixLQUFLcm5CLEdBQ1Z1ckMsRUFBS3BDLGFBQ0pvQyxFQUFLLzFDLFVBSVosU0FBU2cwRSxFQUFVeHBFLEdBQ2pCLE9BQU8wOUQsRUFBZ0JudEMsUUFBTyxTQUFVZ2IsR0FDdENBLEVBQUtsa0IsS0FBS3JuQixHQUNWdXJDLEVBQUtwQyxjQXFLVDMzQyxFQUFPQyxRQUFVaXNFLEcsNEJDcm1CakIsSUFFSXQ2QixFQUZ5QixFQUFRLEtBRWhCRCxDQUF1QixFQUFRLE9BRWhEd0YsRUFBWSxFQUFRLE1BRXBCeTFCLEVBQWEsRUFBUSxNQU9yQlAsRUFBdUMsV0FDekMsU0FBU0EsRUFBd0IxdUIsR0FDL0IsSUFBSWwrQyxFQUFPaytDLEVBQUtsK0MsS0FDWis1RSxFQUFNNzdCLEVBQUs2N0IsSUFDYi81RSxFQUFPLEdBQXdKMDNDLEdBQVUsR0FDektxaUMsRUFBTSxHQUEySXJpQyxHQUFVLEdBQzdKeDJDLEtBQUs4NEUsV0FBYSxJQUFJaGdFLElBQ3RCOVksS0FBSys0RSxNQUFRajZFLEVBQ2JrQixLQUFLZzVFLEtBQU9ILEVBR2QsSUFBSXBsQyxFQUFTaTRCLEVBQXdCenRFLFVBaURyQyxPQS9DQXcxQyxFQUFPOFYsTUFBUSxXQUNidnBELEtBQUs4NEUsV0FBV3Z2QixTQUdsQjlWLEVBQU9ybUMsSUFBTSxTQUFhNnJFLEVBQVNoa0MsR0FDakMsSUFBSTdDLEVBQVFweUMsS0FFUnNsRCxFQUFXNHpCLEVBQVlELEVBQVNoa0MsR0FFcENqMUMsS0FBSzg0RSxXQUFXajBFLFNBQVEsU0FBVTQ3QyxFQUFVNTlDLEdBQzNCNDlDLEVBQVMwNEIsVUFBVy9tQyxFQUFNNG1DLE1BcURuQmo1RCxLQUFLQyxPQXBEekJveUIsRUFBTTBtQyxXQUFtQixPQUFFajJFLE1BSS9CLElBQUk0OUMsRUFBV3pnRCxLQUFLODRFLFdBQVcxckUsSUFBSWs0QyxHQUVuQyxPQUFtQixNQUFaN0UsR0FDUCxFQUFJeFAsRUFBd0IsVUFBRyxFQUFJQSxFQUF3QixTQUFHLEdBQUl3UCxFQUFTeHFCLFNBQVUsR0FBSSxDQUN2Rm1qRCxZQUFZLEVBQUlub0MsRUFBd0IsVUFBRyxFQUFJQSxFQUF3QixTQUFHLEdBQUl3UCxFQUFTeHFCLFFBQVFtakQsWUFBYSxHQUFJLENBQzlHQyxlQUFnQjU0QixFQUFTMDRCLGNBRXhCLE1BR1AxbEMsRUFBT3ZuQyxJQUFNLFNBQWErc0UsRUFBU2hrQyxFQUFXaGYsR0FDNUMsSUFBSWtqRCxFQUFZcDVELEtBQUtDLE1BQ2pCc2xDLEVBQVc0ekIsRUFBWUQsRUFBU2hrQyxHQVdwQyxHQVRBajFDLEtBQUs4NEUsV0FBbUIsT0FBRXh6QixHQUcxQnRsRCxLQUFLODRFLFdBQVc1c0UsSUFBSW81QyxFQUFVLENBQzVCNnpCLFVBQVdBLEVBQ1hsakQsUUFBU0EsSUFJUGoyQixLQUFLODRFLFdBQVdoNkUsS0FBT2tCLEtBQUsrNEUsTUFBTyxDQUNyQyxJQUFJenZCLEVBQVd0cEQsS0FBSzg0RSxXQUFXNTVFLE9BQU9nMkIsT0FFakNvMEIsRUFBUzl2QixNQUNaeDVCLEtBQUs4NEUsV0FBbUIsT0FBRXh2QixFQUFTejdDLFNBS2xDNjlELEVBNURrQyxHQStEM0MsU0FBU3dOLEVBQVlELEVBQVNoa0MsR0FDNUIsT0FBT3hJLEtBQUtDLFVBQVV1L0IsRUFBVyxDQUMvQmdOLFFBQVNBLEVBQ1Roa0MsVUFBV0EsS0FhZjUxQyxFQUFPQyxRQUFVb3NFLEcsNEJDNUZqQixJQUFJZixFQUFvQixFQUFRLEtBRTVCbjBCLEVBQVksRUFBUSxNQVl4QixTQUFTdTJCLEVBQVEzc0IsR0FDZixJQUFJbGpELEVBQU9rakQsRUFVWCxNQVJvQixtQkFBVGxqRCxFQUNUQSxFQUFPQSxJQUVFQSxFQUFjLFVBRXZCQSxFQUFPQSxFQUFjLFNBR2hCQSxFQUdULFNBQVNpekMsRUFBV2p6QyxHQUNsQixJQUFJMDRDLEVBQVdtM0IsRUFBUTd2RSxHQUN2QixNQUEyQixpQkFBYjA0QyxHQUFzQyxPQUFiQSxHQUFxQkEsRUFBUzZMLE9BQVNrcEIsRUFBa0IyTyxTQUdsRyxTQUFTekwsRUFBVTN3RSxHQUNqQixJQUFJazRDLEVBQVUyM0IsRUFBUTd2RSxHQUN0QixNQUEwQixpQkFBWms0QyxHQUFvQyxPQUFaQSxHQUFvQkEsRUFBUXFNLE9BQVNrcEIsRUFBa0I0TyxRQUcvRixTQUFTM0wsRUFBcUIxd0UsR0FDNUIsSUFBSTA0QyxFQUFXbTNCLEVBQVE3dkUsR0FDdkIsTUFBMkIsaUJBQWIwNEMsR0FBc0MsT0FBYkEsR0FBcUJBLEVBQVM2TCxPQUFTa3BCLEVBQWtCNk8scUJBR2xHLFNBQVMxNEIsRUFBWVYsR0FDbkIsSUFBSXhLLEVBQVdtM0IsRUFBUTNzQixHQUV2QixPQURDalEsRUFBV3lGLElBQStJWSxHQUFVLEdBQzlKWixFQTFDSyxFQUFRLE1Bb0Z0QnYyQyxFQUFPQyxRQUFVLENBQ2Z3aEQsWUFBYUEsRUFDYmlzQixRQUFTQSxFQUNUSSxzQkExQ0YsU0FBK0Ivc0IsR0FDN0IsSUFBSXE1QixFQUVBN2pDLEVBQVdrTCxFQUFZVixHQUN2QkQsRUFBdUQsUUFBNUNzNUIsRUFBcUI3akMsRUFBU3lCLGdCQUE2QyxJQUF2Qm9pQyxPQUFnQyxFQUFTQSxFQUFtQnQ1QixRQUMzSHpJLEVBQWF5SSxhQUF5QyxFQUFTQSxFQUFRekksV0FFM0UsT0FBZ0IsT0FBWnlJLEdBQXVDLGlCQUFaQSxHQUF1QyxPQUFmekksR0FBNkMsaUJBQWZBLEVBQzVFLEtBR0Y5QixHQWdDUHkzQix1QkE3QkYsU0FBZ0NqdEIsR0FDOUIsSUFBSXM1QixFQUVBOWpDLEVBQVdrTCxFQUFZVixHQUN2QkQsRUFBd0QsUUFBN0N1NUIsRUFBc0I5akMsRUFBU3lCLGdCQUE4QyxJQUF4QnFpQyxPQUFpQyxFQUFTQSxFQUFvQnY1QixRQUVsSSxPQUFnQixPQUFaQSxHQUF1QyxpQkFBWkEsRUFDdEIsS0FHRnZLLEdBb0JQaEIsV0FqQkYsU0FBb0J3TCxHQUNsQixJQUFJaEwsRUFBVTIzQixFQUFRM3NCLEdBRXRCLE9BREN5dEIsRUFBVXo0QixJQUE0SW9CLEdBQVUsR0FDMUpwQixHQWVQNDNCLHNCQVpGLFNBQStCNXNCLEdBQzdCLElBQUl4SyxFQUFXbTNCLEVBQVEzc0IsR0FFdkIsT0FEQ3d0QixFQUFxQmg0QixJQUE0SlksR0FBVSxHQUNyTFosR0FVUG9OLFFBckZGLFNBQWlCMjJCLEdBQzhVbmpDLEdBQVUsSUFxRnZXckcsV0FBWUEsRUFDWjA5QixVQUFXQSxFQUNYRCxxQkFBc0JBLEksc0JDbEd4QixJQXdESWdNLEVBQTJCLElBeERhLFdBQzFDLFNBQVNscEIsSUFDUDF3RCxLQUFLNjVFLG9CQUFzQixJQUFJL2dFLElBQy9COVksS0FBSzg1RSxXQUFhLElBQUloaEUsSUFHeEIsSUFBSTI2QixFQUFTaWQsRUFBeUJ6eUQsVUErQ3RDLE9BN0NBdzFDLEVBQU92bkMsSUFBTSxTQUFhckosRUFBS2dMLEdBQzdCN04sS0FBSzY1RSxvQkFBb0IzdEUsSUFBSXJKLEVBQUtnTCxHQUVsQyxJQUFJa3NFLEVBQVkvNUUsS0FBSzg1RSxXQUFXMXNFLElBQUl2SyxHQUVuQixNQUFiazNFLEdBQ0ZBLEVBQVVsMUUsU0FBUSxTQUFVK0osR0FDMUIsSUFDRUEsRUFBR2YsR0FDSCxNQUFPOUssR0FHUDZzQixZQUFXLFdBQ1QsTUFBTTdzQixJQUNMLFFBTVgwd0MsRUFBT3JtQyxJQUFNLFNBQWF2SyxHQUN4QixPQUFPN0MsS0FBSzY1RSxvQkFBb0J6c0UsSUFBSXZLLElBR3RDNHdDLEVBQU9zZixPQUFTLFNBQWdCbHdELEVBQUtxekIsR0FDbkMsSUFBSThqRCxFQUVBRCxFQUFrRSxRQUFyREMsRUFBdUJoNkUsS0FBSzg1RSxXQUFXMXNFLElBQUl2SyxVQUEyQyxJQUF6Qm0zRSxFQUFrQ0EsRUFBdUIsSUFBSXB5RSxJQVMzSSxPQVJBbXlFLEVBQVUveEUsSUFBSWt1QixHQU1kbDJCLEtBQUs4NUUsV0FBVzV0RSxJQUFJckosRUFBS2szRSxHQUVsQixDQUNMbm1DLFFBUFksV0FDWm1tQyxFQUFrQixPQUFFN2pELE1BVXhCdWQsRUFBTzhWLE1BQVEsV0FDYnZwRCxLQUFLNjVFLG9CQUFvQnR3QixTQUdwQm1ILEVBckRtQyxJQXlENUNyeEQsRUFBT0MsUUFBVXM2RSxHLDRCQ3hEakIsSUFFSTNvQyxFQUZ5QixFQUFRLEtBRWhCRCxDQUF1QixFQUFRLE9BRWhEdTZCLEVBQWtCLEVBQVEsTUFFMUJTLEVBQXFCLEVBQVEsTUFFN0J4MUIsRUFBWSxFQUFRLE1BRXBCeU8sRUFBOEIsRUFBUSxNQUd0Q3RRLEVBRFcsRUFBUSxNQUNrQkEsMEJBR3JDQyxFQURZLEVBQVEsTUFDR0EsV0F1SDNCLFNBQVNxbEMsRUFBcUJybkMsRUFBYXVDLEdBQ3pDLE9BQU82MkIsRUFBbUIxdkIsV0FBVzFKLEVBQWF1QyxHQUFXM3dDLEtBQUksV0FDL0QsT0FBT291QyxFQUFZK0MsT0FBT1IsRUFBVVMsYUFJeEN2MkMsRUFBT0MsUUE5Q1AsU0FBb0JzekMsRUFBYW9DLEVBQU9DLEVBQVc5bEMsR0FDakQsSUFBSWlpRCxFQUVBOG9CLEVBQVl0bEMsRUFBV0ksR0FDVSxVQUFuQ2tsQyxFQUFVOTZCLE9BQU8rMUIsZUFBZ0kzK0IsR0FBVSxHQUM3SixJQUFJdVosR0FBcUIsRUFBSTllLEVBQXdCLFNBQUcsQ0FDdERnSSxPQUFPLEdBQ045cEMsYUFBeUMsRUFBU0EsRUFBUTRnRCxvQkFDekQ1YSxFQUFZUixFQUEwQnVsQyxFQUFXamxDLEVBQVc4YSxHQUM1RGxULEVBQWlILFFBQWxHdVUsRUFBdUJqaUQsYUFBeUMsRUFBU0EsRUFBUTB0QyxtQkFBa0QsSUFBekJ1VSxFQUFrQ0EsRUFBdUIsZUFFdEwsU0FBUytvQixFQUFTM2tDLEdBS2hCLE9BSnNDLE1BQWxDQSxFQUFTa1IsdUJBQ1h6QixFQUE0QnJTLEVBQWE0QyxFQUFTa1IsdUJBRzdDbFIsRUFBU2x6QixLQUdsQixPQUFRdTZCLEdBQ04sSUFBSyxlQUVELE9BQU9vOUIsRUFBcUJybkMsRUFBYXVDLEdBQVczd0MsSUFBSTIxRSxHQUc1RCxJQUFLLG1CQUVELE1BQTRDLGNBQXhDdm5DLEVBQVk2QyxNQUFNTixHQUFXMkgsT0FDeEJ5dUIsRUFBZ0JybUUsS0FBSzB0QyxFQUFZK0MsT0FBT1IsRUFBVVMsV0FBV3B4QyxJQUFJMjFFLEdBR25FRixFQUFxQnJuQyxFQUFhdUMsR0FBVzN3QyxJQUFJMjFFLEdBRzVELFFBRUUsTUFBTSxJQUFJNTJFLE1BQU0sbUNBQXFDczVDLE0sNEJDcEkzRCxJQUFJbkcsRUFBYSxFQUFRLE1BRXJCazFCLEVBQXFCLEVBQVEsTUFFN0JwMUIsRUFBWSxFQUFRLE1BR3BCNGpDLEVBRHVDLG1CQUFabjJDLFFBQ3NCLElBQUlBLFFBQVksSUFBSW5yQixJQWdGekUsU0FBU2c0QyxFQUFrQmxlLEVBQWFxWCxFQUFZd0ksR0FDbEQsT0FBTy9iLEVBQVd0WSxRQUFPLFNBQVVnYixHQUNqQyxJQUFJd0YsRUFBZXk3QixFQUFnQnpuQyxHQUMvQjBuQyxFQUFnQjE3QixFQUFheHhDLElBQUk2OEMsR0F1Q3JDLE9BckNLcXdCLEdBQ0g3bkIsSUFBbUIsU0FBRSxXQUNuQixPQUFPN1QsRUFBcUIsT0FBRXFMLE1BQzdCcHNCLFVBQVUsQ0FDWDFSLE1BQU8sU0FBZStxQixHQUNwQm9qQyxFQUFnQixDQUNkcndCLFdBQVlBLEVBQ1ptSSxRQUFTLElBQUl3WixFQUNiMk8seUJBQTBCLElBQUkzTyxFQUM5QjEwQixhQUFjQSxHQUVoQjBILEVBQWExeUMsSUFBSSs5QyxFQUFZcXdCLElBRS9CcGxELEtBQU0sU0FBY3VyQixHQUNsQixJQUFJKzVCLEVBQVlDLEVBQWlCNzdCLEVBQWNxTCxHQUMvQ3V3QixFQUFVcG9CLFFBQVFsOUIsS0FBS3VyQixHQUN2Qis1QixFQUFVRCx5QkFBeUJybEQsS0FBS3VyQixJQUUxQ3A5QyxNQUFPLFNBQWVvNkMsR0FDcEIsSUFBSSs4QixFQUFZQyxFQUFpQjc3QixFQUFjcUwsR0FDL0N1d0IsRUFBVXBvQixRQUFRL3VELE1BQU1vNkMsR0FDeEIrOEIsRUFBVUQseUJBQXlCbDNFLE1BQU1vNkMsSUFFM0N6RyxTQUFVLFdBQ1IsSUFBSXdqQyxFQUFZQyxFQUFpQjc3QixFQUFjcUwsR0FDL0N1d0IsRUFBVXBvQixRQUFRcGIsV0FDbEJ3akMsRUFBVUQseUJBQXlCdmpDLFlBRXJDQyxZQUFhLFNBQXFCQyxHQUNoQyxJQUFJc2pDLEVBQVlDLEVBQWlCNzdCLEVBQWNxTCxHQUMvQ3V3QixFQUFVcG9CLFFBQVFuYixjQUNsQnVqQyxFQUFVRCx5QkFBeUJ0akMsaUJBS3RCLE1BQWpCcWpDLEdBQWdMOWpDLEdBQVUsR0FTaE0sU0FBdUNvSSxFQUFjMDdCLEdBQ25ELE9BQU81akMsRUFBV3RZLFFBQU8sU0FBVWdiLEdBQ2pDLElBQUlsQyxFQUFlb2pDLEVBQWNsb0IsUUFBUXYwQixVQUFVdWIsR0FDbkQsT0FBTyxXQUNMbEMsRUFBYUQsY0FDYixJQUFJeWpDLEVBQXdCOTdCLEVBQWF4eEMsSUFBSWt0RSxFQUFjcndCLFlBRTNELEdBQUl5d0IsRUFBdUIsQ0FDekIsSUFBSXgzQixFQUFzQnczQixFQUFzQnhqQyxhQUVyQixNQUF2QmdNLEdBQW9GLElBQXJEdzNCLEVBQXNCdG9CLFFBQVF1b0IscUJBQy9EejNCLEVBQW9Cak0sY0FDcEIySCxFQUFxQixPQUFFMDdCLEVBQWNyd0Isa0JBcEJwQzJ3QixDQUE4Qmg4QixFQUFjMDdCLEdBQWV6OEMsVUFBVXViLE1BK0JoRixTQUFTeWhDLEVBQTBDam9DLEVBQWFnTSxFQUFjMDdCLEdBQzVFLE9BQU81akMsRUFBV3RZLFFBQU8sU0FBVWdiLEdBQ2pDLElBQUlsQyxFQUFlb2pDLEVBQWNDLHlCQUF5QjE4QyxVQUFVLENBQ2xFeDZCLE1BQU8rMUMsRUFBSy8xQyxNQUNaNnhCLEtBQU0sU0FBY3VyQixHQUNiN04sRUFBWWtvQyxnQkFBZ0JSLEVBQWNyd0IsWUFLL0M3USxFQUFLbGtCLE9BSkhra0IsRUFBS3BDLFlBTVRBLFNBQVVvQyxFQUFLcEMsU0FDZkMsWUFBYW1DLEVBQUtwQyxXQUVwQixPQUFPLFdBQ0xFLEVBQWFELGtCQXdFbkIsU0FBU29qQyxFQUFnQnpuQyxHQUN2QixJQUFJcVcsRUFBU214QixFQUEyQmh0RSxJQUFJd2xDLEdBRTVDLEdBQWMsTUFBVnFXLEVBQ0YsT0FBT0EsRUFHVCxJQUFJckssRUFBZSxJQUFJOWxDLElBRXZCLE9BREFzaEUsRUFBMkJsdUUsSUFBSTBtQyxFQUFhZ00sR0FDckNBLEVBT1QsU0FBUzY3QixFQUFpQjc3QixFQUFjcUwsR0FDdEMsSUFBSWhCLEVBQVNySyxFQUFheHhDLElBQUk2OEMsR0FFOUIsT0FEWSxNQUFWaEIsR0FBcUp6UyxHQUFVLEdBQzFKeVMsRUFHVDVwRCxFQUFPQyxRQUFVLENBQ2ZnOUMsV0F4TUYsU0FBb0IxSixFQUFhdUMsR0FDL0IsT0FBTzJiLEVBQWtCbGUsRUFBYXVDLEVBQVVDLFFBQVE2VSxZQUFZLFdBQ2xFLE9BQU9yWCxFQUFZaUosUUFBUSxDQUN6QjFHLFVBQVdBLFFBc01mMmIsa0JBQW1CQSxFQUNuQmpNLDJCQXBGRixTQUFvQ2pTLEVBQWF3QyxHQUMvQyxJQUNJa2xDLEVBRGVELEVBQWdCem5DLEdBQ0Z4bEMsSUFBSWdvQyxFQUFRNlUsWUFFN0MsT0FBS3F3QixHQUlBMW5DLEVBQVlrb0MsZ0JBQWdCUixFQUFjcndCLFlBSXhDLElBQUltRCxTQUFRLFNBQVUzYSxFQUFTa21DLEdBQ3BDLElBQUlvQyxHQUFnQixFQUNwQkYsRUFBMENqb0MsRUFBYWdNLEVBQWMwN0IsR0FBZXo4QyxVQUFVLENBQzVGbVosU0FBVXZFLEVBQ1ZwdkMsTUFBT3MxRSxFQUNQempELEtBQU0sU0FBY3VyQixHQU1kczZCLEdBQ0Z0b0MsRUFBUWdPLE1BSWRzNkIsR0FBZ0IsS0F2QlQsTUFnRlRybEIsOEJBN0NGLFNBQXVDOWlCLEVBQWF3QyxHQUNsRCxJQUNJa2xDLEVBRGVELEVBQWdCem5DLEdBQ0Z4bEMsSUFBSWdvQyxFQUFRNlUsWUFFN0MsT0FBS3F3QixHQUlBMW5DLEVBQVlrb0MsZ0JBQWdCUixFQUFjcndCLFlBSXhDNHdCLEVBQTBDam9DLEVBQWFnTSxFQUFjMDdCLEdBUG5FLFEsNEJDMU9YLElBQ0kzbEMsRUFEVyxFQUFRLE1BQ2tCQSwwQkFHckNDLEVBRFksRUFBUSxNQUNHQSxXQXNCM0J2MUMsRUFBT0MsUUFmUCxTQUErQnN6QyxFQUFhd04sRUFBWW5MLEVBQVd5RyxHQUNqRSxJQUFJMUcsRUFBUUosRUFBV3dMLEdBRXZCLEdBQW1DLFVBQS9CcEwsRUFBTW9LLE9BQU8rMUIsY0FDZixNQUFNLElBQUk1eEUsTUFBTSx3Q0FHbEIsSUFBSTR4QyxFQUFZUixFQUEwQkssRUFBT0MsRUFBV3lHLEdBQzVELE9BQU85SSxFQUFZaUosUUFBUSxDQUN6QjFHLFVBQVdBLElBQ1Yzd0MsS0FBSSxXQUNMLE9BQU9vdUMsRUFBWStDLE9BQU9SLEVBQVVTLFVBQVV0ekIsUUFDN0NtMkQsYyxzQkN2QkwsSUFBSXVDLEVBQVMsVUFvQlRDLEVBQVUsRUFNZDU3RSxFQUFPQyxRQUFVLENBQ2Yra0UsaUJBekJGLFNBQTBCeG1ELEVBQUl5b0QsRUFBWXR0QyxHQUN4QyxJQUFJbjJCLEVBQU1nYixFQUFLLElBQU15b0QsRUFVckIsT0FSYSxNQUFUdHRDLElBQ0ZuMkIsR0FBTyxJQUFNbTJCLEdBR2EsSUFBeEJuMkIsRUFBSStRLFFBQVFvbkUsS0FDZG40RSxFQUFNbTRFLEVBQVNuNEUsR0FHVkEsR0FlUHFwRSx1QkFORixXQUNFLE1BQU8sR0FBR3hwRSxPQUFPczRFLEVBQVEsVUFBVXQ0RSxPQUFPdTRFLE1BTTFDOU8sV0FiRixTQUFvQnR1RCxHQUNsQixPQUE4QixJQUF2QkEsRUFBR2pLLFFBQVFvbkUsTSw0QkNoQnBCLElBRUlwc0IsRUFGeUIsRUFBUSxLQUVINWQsQ0FBdUIsRUFBUSxPQUU3RDI1QixFQUFvQixFQUFRLEtBRTVCOVosRUFBb0IsRUFBUSxNQUU1QnNhLEVBQW9CLEVBQVEsTUFFNUJtSCxFQUEyQixFQUFRLE1BRW5DZ0IsRUFBeUIsRUFBUSxNQUVqQzRILEVBQTZCLEVBQVEsTUFFckNyUCxFQUFrQixFQUFRLE1BRTFCc1AsRUFBOEIsRUFBUSxNQUV0Q0MsRUFBb0MsRUFBUSxNQUU1Q0MsRUFBZSxFQUFRLE1BRXZCN2tDLEVBQVksRUFBUSxNQUdwQjIxQixFQURXLEVBQVEsTUFDR0EsV0FFdEIvWSxFQUFZLEVBQVEsTUFDcEJpZixFQUFXamYsRUFBVWlmLFNBQ3JCaUosRUFBVWxvQixFQUFVa29CLFFBR3BCQyxFQURZLEVBQVEsTUFDT0EsZUFFM0I1RixFQUFZaEwsRUFBa0JnTCxVQUM5QkMsRUFBbUJqTCxFQUFrQmlMLGlCQUNyQ0MsRUFBbUJsTCxFQUFrQmtMLGlCQUNyQ0MsRUFBUW5MLEVBQWtCbUwsTUFDMUJDLEVBQWVwTCxFQUFrQm9MLGFBQ2pDQyxFQUFrQnJMLEVBQWtCcUwsZ0JBQ3BDQyxFQUFrQnRMLEVBQWtCc0wsZ0JBQ3BDQyxFQUFldkwsRUFBa0J1TCxhQUNqQ0MsRUFBZ0J4TCxFQUFrQndMLGNBQ2xDQyxFQUFnQnpMLEVBQWtCeUwsY0FDbENDLEVBQWUxTCxFQUFrQjBMLGFBQ2pDQyxFQUFnQjNMLEVBQWtCMkwsY0FDbENDLEVBQVM1TCxFQUFrQjRMLE9BQzNCQyxFQUFxQjdMLEVBQWtCNkwsbUJBQ3ZDakksRUFBVTFDLEVBQWdCMEMsUUFDMUJyQixFQUF3QnJCLEVBQWdCcUIsc0JBQ3hDTSxFQUFnQjNCLEVBQWdCMkIsY0FDaENnTyxFQUFvQjNQLEVBQWdCMlAsa0JBd0JwQ0MsRUFBMkIsV0FDN0IsU0FBU0EsRUFBWWo5RSxFQUFReUcsRUFBUWd3QyxFQUFXeW1DLEVBQVVDLEVBQWlCOVcsRUFBVytXLEdBQ3BGLElBQUkzSyxFQUFVLElBQUlxQixFQUF5Qjl6RSxFQUFReUcsR0FDbkRqRixLQUFLNjdFLDJCQUE2QixLQUNsQzc3RSxLQUFLODdFLFVBQVlKLEVBQ2pCMTdFLEtBQUtteEUsU0FBV0YsRUFDaEJqeEUsS0FBSys3RSxpQkFBbUJKLFFBQXlEQSxFQUFrQixLQUNuRzM3RSxLQUFLZzhFLG1CQUFxQixJQUFJMUksRUFBdUJyQyxFQUFTcE0sR0FDOUQ3a0UsS0FBS2k4RSxtQkFBb0IsRUFDekJqOEUsS0FBS3U5QixRQUFVLytCLEVBQ2Z3QixLQUFLazhFLFdBQWFqbkMsRUFDbEJqMUMsS0FBS204RSwrQkFBaUNQLEVBR3hDLElBQUlub0MsRUFBU2dvQyxFQUFZeDlFLFVBd2R6QixPQXRkQXcxQyxFQUFPZ0MsTUFBUSxTQUFldjRDLEVBQU1tdEQsR0FHbEMsT0FGQXJxRCxLQUFLbzhFLFVBQVVsL0UsRUFBTW10RCxJQUVhLElBQTNCcnFELEtBQUtpOEUsa0JBQTZCLENBQ3ZDbi9CLE9BQVEsVUFDUnUvQiwwQkFBMkJyOEUsS0FBSzY3RSw0QkFDOUIsQ0FDRi8rQixPQUFRLFlBQ1J1L0IsMEJBQTJCcjhFLEtBQUs2N0UsNkJBSXBDcG9DLEVBQU82b0Msa0JBQW9CLFNBQTJCcjdFLEdBR3BELE9BRkNqQixLQUFLazhFLFdBQVdsOUUsZUFBZWlDLElBQXlIdTFDLEdBQVUsR0FFNUp4MkMsS0FBS2s4RSxXQUFXajdFLElBR3pCd3lDLEVBQU84b0MsZUFBaUIsV0FDdEJ2OEUsS0FBS2k4RSxtQkFBb0IsR0FHM0J4b0MsRUFBTytvQyxvQkFBc0IsU0FBNkJ4SCxFQUFPM3FCLEdBQy9ELE1BQU8sQ0FDTDdtRCxLQUFNd3hFLEVBQU14eEUsS0FBT2c0RSxFQUFrQnhHLEVBQU14eEUsS0FBTXhELEtBQUtrOEUsWUFBYyxHQU9wRXpXLE9BQVF6bEUsS0FBS3U5QixRQUFRbndCLElBQUlpOUMsS0FJN0I1VyxFQUFPZ3BDLDBCQUE0QixTQUFtQ3pILEVBQU8zcUIsR0FDM0UsR0FBbUIsT0FBZjJxQixFQUFNL3pFLE1BQWdDLE1BQWYrekUsRUFBTTBILFFBQWlCdlEsRUFBVzloQixHQUE3RCxDQUlBLElBS0l3RSxFQUxBOHRCLEVBQXdCMzhFLEtBQUt3OEUsb0JBQW9CeEgsRUFBTzNxQixHQUN4RDdtRCxFQUFPbTVFLEVBQXNCbjVFLEtBQzdCaWlFLEVBQVNrWCxFQUFzQmxYLE9BRS9CM1csR0FBWSxFQUFJRixFQUFxQyxTQUFHNXVELEtBQUs4N0UsV0FHakUsSUFDRSxJQUFLaHRCLEVBQVV6cEQsTUFBT3dwRCxFQUFRQyxFQUFVcnFELEtBQUsrMEIsTUFBTyxDQUNsRCxJQUFJMjZDLEVBQVV0bEIsRUFBTWhoRCxNQUVwQixHQUFxQixXQUFqQnNtRSxFQUFRMXlCLEtBQW1CLENBQzdCLElBQUltN0IsRUFBV3pJLEVBQVF0USxPQUFPbVIsRUFBT3ZQLEVBQVFqaUUsRUFBTXhELEtBQUtnOEUsb0JBRXhELFFBQWlCMTRFLElBQWJzNUUsRUFDRixPQUFPQSxJQUliLE1BQU83M0UsR0FDUCtwRCxFQUFVL3JELEVBQUVnQyxHQUNaLFFBQ0ErcEQsRUFBVTFyRCxJQUdacEQsS0FBS3U4RSxtQkFHUDlvQyxFQUFPb3BDLHdCQUEwQixTQUFpQzdILEVBQU8zcUIsR0FDdkUsSUFLSXFLLEVBTEFvb0IsRUFBeUI5OEUsS0FBS3c4RSxvQkFBb0J4SCxFQUFPM3FCLEdBQ3pEN21ELEVBQU9zNUUsRUFBdUJ0NUUsS0FDOUJpaUUsRUFBU3FYLEVBQXVCclgsT0FFaEM5USxHQUFhLEVBQUkvRixFQUFxQyxTQUFHNXVELEtBQUs4N0UsV0FHbEUsSUFDRSxJQUFLbm5CLEVBQVd0dkQsTUFBT3F2RCxFQUFTQyxFQUFXbHdELEtBQUsrMEIsTUFBTyxDQUNyRCxJQUFJMjZDLEVBQVV6ZixFQUFPN21ELE1BRXJCLEdBQXFCLFdBQWpCc21FLEVBQVExeUIsS0FBbUIsQ0FDN0IsSUFBSW03QixFQUFXekksRUFBUXRRLE9BQU9tUixFQUFPdlAsRUFBUWppRSxFQUFNeEQsS0FBS2c4RSxvQkFFeEQsUUFBaUIxNEUsSUFBYnM1RSxJQUF3QyxPQUFiQSxHQUFxQjU4RSxLQUFLbXhFLFNBQVNpQyxVQUFVd0osS0FBY3ZLLEdBQ3hGLE9BQU91SyxJQUliLE1BQU83M0UsR0FDUDR2RCxFQUFXNXhELEVBQUVnQyxHQUNiLFFBQ0E0dkQsRUFBV3Z4RCxJQUdicEQsS0FBS3U4RSxrQkFHUDlvQyxFQUFPc3BDLDhCQUFnQyxTQUF1Qy9ILEVBQU8zcUIsR0FDbkYsSUFPSWdmLEVBUEFqM0IsRUFBUXB5QyxLQUVSZzlFLEVBQXlCaDlFLEtBQUt3OEUsb0JBQW9CeEgsRUFBTzNxQixHQUN6RDdtRCxFQUFPdzVFLEVBQXVCeDVFLEtBQzlCaWlFLEVBQVN1WCxFQUF1QnZYLE9BRWhDOEQsR0FBYSxFQUFJM2EsRUFBcUMsU0FBRzV1RCxLQUFLODdFLFdBR2xFLElBQ0UsSUFBS3ZTLEVBQVdsa0UsTUFBT2drRSxFQUFTRSxFQUFXOWtFLEtBQUsrMEIsTUFBTyxDQUNyRCxJQUFJMjZDLEVBQVU5SyxFQUFPeDdELE1BRXJCLEdBQXFCLGlCQUFqQnNtRSxFQUFRMXlCLEtBQXlCLENBQ25DLElBQUltN0IsRUFBV3pJLEVBQVF0USxPQUFPbVIsRUFBT3ZQLEVBQVFqaUUsRUFBTXhELEtBQUtnOEUsb0JBRXhELEdBQWdCLE1BQVpZLEdBS0YsR0FKb0JBLEVBQVN4SyxPQUFNLFNBQVVkLEdBQzNDLE9BQW1CLE1BQVpBLEdBQW9CbC9CLEVBQU0rK0IsU0FBU2lDLFVBQVU5QixLQUFjZSxLQUlsRSxPQUFPdUssT0FFSixHQUFpQixPQUFiQSxFQUNULE9BQU8sT0FJYixNQUFPNzNFLEdBQ1B3a0UsRUFBV3htRSxFQUFFZ0MsR0FDYixRQUNBd2tFLEVBQVdubUUsSUFHYnBELEtBQUt1OEUsa0JBR1A5b0MsRUFBTzJvQyxVQUFZLFNBQW1CbC9FLEVBQU1tdEQsR0FDMUMsSUFBSXZOLEVBQVM5OEMsS0FBS214RSxTQUFTaUMsVUFBVS9vQixHQU1yQyxHQUpJdk4sSUFBV3crQixHQUNidDdFLEtBQUt1OEUsaUJBR0h6L0IsSUFBV3UxQixFQUFVLENBQ3ZCLElBQUk1TSxFQUFTemxFLEtBQUt1OUIsUUFBUW53QixJQUFJaTlDLEdBRTFCNHlCLEVBQWdCOVIsRUFBa0IrUixxQkFBcUJ6WCxHQUV0QyxNQUFqQndYLElBQ0ZqOUUsS0FBSzY3RSwyQkFBZ0UsTUFBbkM3N0UsS0FBSzY3RSwyQkFBcUM1K0QsS0FBSyt0QyxJQUFJaHJELEtBQUs2N0UsMkJBQTRCb0IsR0FBaUJBLEdBR3pJajlFLEtBQUttOUUsb0JBQW9CamdGLEVBQUtneUUsV0FBWTdrQixLQUk5QzVXLEVBQU8wcEMsb0JBQXNCLFNBQTZCak8sRUFBWTdrQixHQUNwRSxJQUFJaFAsRUFBU3I3QyxLQUVia3ZFLEVBQVdycUUsU0FBUSxTQUFVb3dFLEdBQzNCLE9BQVFBLEVBQVV4ekIsTUFDaEIsS0FBSzQwQixFQUNIaDdCLEVBQU8raEMsYUFBYW5JLEVBQVc1cUIsR0FFL0IsTUFFRixLQUFLNnJCLEVBQ0NqQixFQUFVanZCLE9BQ1ozSyxFQUFPZ2lDLGlCQUFpQnBJLEVBQVc1cUIsR0FFbkNoUCxFQUFPaWlDLFdBQVdySSxFQUFXNXFCLEdBRy9CLE1BRUYsS0FBS3NyQixFQUNrQnQ2QixFQUFPaWhDLGtCQUFrQnJILEVBQVVqeUUsYUFFakNpeUUsRUFBVXNJLGNBQy9CbGlDLEVBQU84aEMsb0JBQW9CbEksRUFBVS9GLFdBQVk3a0IsR0FHbkQsTUFFRixLQUFLNHJCLEVBRUQsSUFBSXVILEVBQWN2SSxFQUFVdUksWUFFNUIsR0FBbUIsTUFBZkEsRUFFYW5pQyxFQUFPODFCLFNBQVNwTSxRQUFRMWEsS0FFdEI0cUIsRUFBVWwwRSxNQUN6QnM2QyxFQUFPOGhDLG9CQUFvQmxJLEVBQVUvRixXQUFZN2tCLFFBRTlDLEdBQUl3RyxFQUFrQjRzQiwrQkFBZ0MsQ0FRM0QsSUFBSUMsRUFBYXJpQyxFQUFPODFCLFNBQVNwTSxRQUFRMWEsR0FFekIsTUFBZHF6QixHQUFtSmxuQyxHQUFVLEdBQy9KLElBQUltbkMsRUFBU3BDLEVBQWVtQyxHQUV4QkUsRUFBc0J2aUMsRUFBTzgxQixTQUFTNWpFLFNBQVNvd0UsRUFBUUgsSUFFL0IsSUFBeEJJLEVBQ0Z2aUMsRUFBTzhoQyxvQkFBb0JsSSxFQUFVL0YsV0FBWTdrQixHQUNqQixNQUF2QnV6QixHQUdUdmlDLEVBQU9raEMsc0JBTVRsaEMsRUFBTzhoQyxvQkFBb0JsSSxFQUFVL0YsV0FBWTdrQixHQUduRCxNQUdKLEtBQUs4ckIsRUFJRCxJQUFJMEgsRUFBYzFDLEVBQTRCbEcsRUFBVy9GLEVBQVk3ekIsRUFBTzZnQyxZQUV4RTJCLEVBQVk3M0IsT0FDZDNLLEVBQU9naUMsaUJBQWlCUSxFQUFheHpCLEdBRXJDaFAsRUFBT2lpQyxXQUFXTyxFQUFheHpCLEdBR2pDLE1BR0osS0FBS2lzQixFQUVELElBQUl3SCxFQUFlMUMsRUFBa0NuRyxFQUFXL0YsRUFBWTd6QixFQUFPNmdDLFlBRW5GN2dDLEVBQU8raEMsYUFBYVUsRUFBY3p6QixHQUVsQyxNQUdKLEtBQUsrckIsRUFDSC82QixFQUFPMGlDLG1CQUFtQjlJLEVBQVc1cUIsR0FFckMsTUFFRixLQUFLeXJCLEVBQ0wsS0FBS1MsRUFDSGw3QixFQUFPOGhDLG9CQUFvQmxJLEVBQVUvRixXQUFZN2tCLEdBRWpELE1BR0YsS0FBSzJyQixFQUNIMzZCLEVBQU84aEMsb0JBQW9CbEksRUFBVXIvQixTQUFTczVCLFdBQVk3a0IsR0FFMUQsTUFFRixLQUFLd3JCLEVBQ0gsSUFBSW1JLEVBQW1CM2lDLEVBQU80Z0Msa0JBRTlCNWdDLEVBQU84aEMsb0JBQW9CbEksRUFBVS9GLFdBQVk3a0IsR0FFakRoUCxFQUFPNGdDLGtCQUFvQitCLEVBQzNCLE1BRUYsS0FBS3hILEVBQ0gsR0FBSTNsQixFQUFrQjRzQiwrQkFBZ0MsQ0FDcEQsSUFBSVEsRUFBZWhKLEVBQVV1SSxZQUV6QlUsRUFBYzdpQyxFQUFPODFCLFNBQVNwTSxRQUFRMWEsR0FFekIsTUFBZjZ6QixHQUFvSjFuQyxHQUFVLEdBRWhLLElBQUkybkMsRUFBVTVDLEVBQWUyQyxHQUlELE1BRkQ3aUMsRUFBTzgxQixTQUFTNWpFLFNBQVM0d0UsRUFBU0YsSUFLM0Q1aUMsRUFBT2toQyxpQkFLWCxNQUVGLEtBQUt4RyxFQUNILElBQUlsbEIsRUFBa0J1dEIsb0NBR3BCLE1BQU0sSUFBSTc2RSxNQUFNLHdDQUZoQjgzQyxFQUFPZ2pDLGtCQUFrQnBKLEVBQVc1cUIsR0FLdEMsTUFFRixLQUFLdXJCLEVBQ0gsSUFBOEMsSUFBMUN2NkIsRUFBTzhnQywrQkFDVCxNQUdGOWdDLEVBQU84aEMsb0JBQW9CbEksRUFBVXIvQixTQUFTczVCLFdBQVk3a0IsR0FFMUQsTUFFRixRQUV1STdULEdBQVUsUUFLdkovQyxFQUFPc3FDLG1CQUFxQixTQUE0Qk8sRUFBY2owQixHQUNwRSxJQUFJc3hCLEVBQWtCMzdFLEtBQUsrN0UsaUJBQ0wsT0FBcEJKLEdBQTBLbmxDLEdBQVUsR0FDdEwsSUFBSStuQyxFQUFlclIsRUFBc0JvUixFQUFhRSxjQUVsREMsRUFBcUJ6K0UsS0FBS214RSxTQUFTNWpFLFNBQVM4OEMsRUFBUWswQixHQUV4RCxHQUEwQixNQUF0QkUsRUFBSixDQVFBLElBQUlDLEVBQXdCL0MsRUFBZ0J2dUUsSUFBSXF4RSxHQUVoRCxHQUE2QixNQUF6QkMsRUFBK0IsQ0FDakMsSUFBSXZwQyxFQUFZa21DLEVBQWFxRCxHQUU3QjErRSxLQUFLbzhFLFVBQVVqbkMsRUFBV2tWLFFBSTFCcnFELEtBQUt1OEUsMkJBaEJzQmo1RSxJQUF2Qm03RSxHQUNGeitFLEtBQUt1OEUsa0JBbUJYOW9DLEVBQU8ycEMsYUFBZSxTQUFzQnBJLEVBQU8zcUIsR0FDakQsSUFBSWljLEVBQWFrSCxFQUFjd0gsRUFBT2gxRSxLQUFLazhFLFlBRXZDeUMsRUFBYTMrRSxLQUFLbXhFLFNBQVM1akUsU0FBUzg4QyxFQUFRaWMsUUFFN0JoakUsSUFBZnE3RSxRQUdpQnI3RSxLQUZuQnE3RSxFQUFhMytFLEtBQUt5OEUsMEJBQTBCekgsRUFBTzNxQixLQUdqRHJxRCxLQUFLbXhFLFNBQVMzakUsU0FBUzY4QyxFQUFRaWMsRUFBWXFZLElBS2pEbHJDLEVBQU82cEMsV0FBYSxTQUFvQnRJLEVBQU8zcUIsR0FDN0MsSUFBSWljLEVBQWFrSCxFQUFjd0gsRUFBT2gxRSxLQUFLazhFLFlBRXZDNUssRUFBV3R4RSxLQUFLbXhFLFNBQVNJLGtCQUFrQmxuQixFQUFRaWMsUUFFdENoakUsSUFBYmd1RSxJQUdjLE9BRmhCQSxFQUFXdHhFLEtBQUs2OEUsd0JBQXdCN0gsRUFBTzNxQixJQUc3Q3JxRCxLQUFLbXhFLFNBQVNLLGtCQUFrQm5uQixFQUFRaWMsRUFBWWdMLEdBQzlCLE9BQWJBLEdBQ1R0eEUsS0FBS214RSxTQUFTM2pFLFNBQVM2OEMsRUFBUWljLEVBQVksT0FJL0IsTUFBWmdMLEdBQ0Z0eEUsS0FBS284RSxVQUFVcEgsRUFBTzFELElBSTFCNzlCLEVBQU80cEMsaUJBQW1CLFNBQTBCckksRUFBTzNxQixHQUN6RCxJQUFJNUwsRUFBU3orQyxLQUVUc21FLEVBQWFrSCxFQUFjd0gsRUFBT2gxRSxLQUFLazhFLFlBRXZDcEssRUFBWTl4RSxLQUFLbXhFLFNBQVNZLG1CQUFtQjFuQixFQUFRaWMsUUFFdkNoakUsSUFBZHd1RSxJQUdlLE9BRmpCQSxFQUFZOXhFLEtBQUsrOEUsOEJBQThCL0gsRUFBTzNxQixJQUdwRHJxRCxLQUFLbXhFLFNBQVNjLG1CQUFtQjVuQixFQUFRaWMsRUFBWXdMLEdBQzlCLE9BQWRBLEdBQ1Q5eEUsS0FBS214RSxTQUFTM2pFLFNBQVM2OEMsRUFBUWljLEVBQVksT0FJM0N3TCxHQUNGQSxFQUFVanRFLFNBQVEsU0FBVXlzRSxHQUNWLE1BQVpBLEdBQ0Y3eUIsRUFBTzI5QixVQUFVcEgsRUFBTzFELE9BTWhDNzlCLEVBQU80cUMsa0JBQW9CLFNBQTJCckosRUFBTzNxQixHQUMzRCxJQUFJaWMsRUFBYWtILEVBQWN3SCxFQUFPaDFFLEtBQUtrOEUsWUFFdkM1SyxFQUFXdHhFLEtBQUtteEUsU0FBU0ksa0JBQWtCbG5CLEVBQVFpYyxHQUV2RCxHQUFnQixNQUFaZ0wsRUFDRixZQUFpQmh1RSxJQUFiZ3VFLE9BQ0Z0eEUsS0FBS3U4RSxzQkFLUCxFQUdGLElBQUlxQyxFQUFPNStFLEtBQUtteEUsU0FBUzVqRSxTQUFTK2pFLEVBQVU0SixFQUEyQjJELCtCQUVuRUMsRUFBaUM5K0UsS0FBS214RSxTQUFTNWpFLFNBQVMrakUsRUFBVTRKLEVBQTJCNkQsaURBRWpHLEdBQVksTUFBUkgsR0FBaUJoN0UsTUFBTUMsUUFBUWk3RSxHQUFuQyxDQU1BLElBQUluRCxFQUFrQjM3RSxLQUFLKzdFLGlCQUNMLE9BQXBCSixHQUFrTG5sQyxHQUFVLEdBRzlMLElBR0kwekIsRUFIQThVLEVBQWdCaC9FLEtBQUtrOEUsV0FFckI5UixHQUFhLEVBQUl4YixFQUFxQyxTQUFHa3dCLEdBRzdELElBQ0UsSUFBSzFVLEVBQVcva0UsTUFBTzZrRSxFQUFTRSxFQUFXM2xFLEtBQUsrMEIsTUFBTyxDQUNyRCxJQUFJeWxELEVBQWEvVSxFQUFPcjhELE1BQ3hCN04sS0FBS2s4RSxXQUFhK0MsRUFBV2hxQyxVQUM3QixJQUFJeXBDLEVBQXdCL0MsRUFBZ0J2dUUsSUFBSTZ4RSxFQUFXNS9FLFFBRTNELEdBQTZCLE1BQXpCcS9FLEVBQStCLENBQ2pDLElBQUl2cEMsRUFBWWttQyxFQUFhcUQsR0FFN0IxK0UsS0FBS205RSxvQkFBb0Job0MsRUFBVSs1QixXQUFZWCxRQUkvQ3Z1RSxLQUFLdThFLGtCQUdULE1BQU94M0UsR0FDUHFsRSxFQUFXcm5FLEVBQUVnQyxHQUNiLFFBQ0FxbEUsRUFBV2huRSxJQUdicEQsS0FBS2s4RSxXQUFhOEMsT0FwQ2hCaC9FLEtBQUt1OEUsa0JBdUNGZCxFQXRlc0IsR0F5ZS9CcDhFLEVBQU9DLFFBQVUsQ0FDZm0yQyxNQXRmRixTQUFlajNDLEVBQVF5RyxFQUFRczhDLEVBQVVtNkIsRUFBVUMsRUFBaUI5VyxFQUFXK1csR0FDN0UsSUFBSXZ4QixFQUFTOUksRUFBUzhJLE9BQ2xCbnRELEVBQU9xa0QsRUFBU3JrRCxLQUNoQiszQyxFQUFZc00sRUFBU3RNLFVBRXpCLE9BRGMsSUFBSXdtQyxFQUFZajlFLEVBQVF5RyxFQUFRZ3dDLEVBQVd5bUMsRUFBVUMsRUFBaUI5VyxFQUFXK1csR0FDaEZubUMsTUFBTXY0QyxFQUFNbXRELE0sNEJDdEU3QixJQUFJclosRUFBeUIsRUFBUSxNQUVqQ0MsRUFBaUJELEVBQXVCLEVBQVEsT0FFaEQ0ZCxFQUE4QjVkLEVBQXVCLEVBQVEsT0FFN0QyVCxFQUFzQjNULEVBQXVCLEVBQVEsT0FFckRnNkIsRUFBYSxFQUFRLE1BRXJCbmEsRUFBb0IsRUFBUSxNQUU1QnNhLEVBQW9CLEVBQVEsTUFFNUJJLEVBQWtCLEVBQVEsTUFFMUJJLEVBQW9CLEVBQVEsTUFFNUJ1VCxFQUEwQixFQUFRLE1BRWxDN0QsRUFBZSxFQUFRLE1BRXZCN2tDLEVBQVksRUFBUSxNQUVwQnkxQixFQUFhLEVBQVEsTUFJckJ2M0IsR0FGVSxFQUFRLE1BRVAsRUFBUSxPQUNuQjJ2QixFQUFtQjN2QixFQUFTMnZCLGlCQUM1QjZILEVBQXlCeDNCLEVBQVN3M0IsdUJBRWxDOVksRUFBWSxFQUFRLE1BQ3BCdVosRUFBOEJ2WixFQUFVdVosNEJBQ3hDQyxFQUF1QnhaLEVBQVV3WixxQkFFakNuN0IsRUFBWSxFQUFRLE1BQ3BCKzhCLEVBQVkvOEIsRUFBVSs4QixVQUN0QkMsRUFBZWg5QixFQUFVZzlCLGFBQ3pCakIsRUFBZ0IvN0IsRUFBVSs3QixjQVkxQjJSLEVBQXdCLFdBQzFCLFNBQVNBLEVBQVNuaUMsR0FDaEIsSUFBSTVLLEVBQVFweUMsS0FFUm0xQyxFQUFZNkgsRUFBSzdILFVBQ2pCaXFDLEVBQXNCcGlDLEVBQUtvaUMsb0JBQzNCekQsRUFBa0IzK0IsRUFBSzIrQixnQkFDdkIwRCxFQUFtQnJpQyxFQUFLcWlDLGlCQUN4QkMsRUFBZXRpQyxFQUFLc2lDLGFBQ3BCQyxFQUFZdmlDLEVBQUt1aUMsVUFDakJubUMsRUFBTzRELEVBQUs1RCxLQUNaNTZDLEVBQVN3K0MsRUFBS3grQyxPQUNkMCtELEVBQVFsZ0IsRUFBS2tnQixNQUNicmxDLEVBQVVtbEIsRUFBS25sQixRQUNmMm5ELEVBQW1CeGlDLEVBQUt3aUMsaUJBQ3hCQyxFQUEyQnppQyxFQUFLeWlDLHlCQUNoQzVhLEVBQVk3bkIsRUFBSzZuQixVQUNqQjZhLEVBQWtCMWlDLEVBQUswaUMsZ0JBQ3ZCQyxFQUFpQzNpQyxFQUFLMmlDLCtCQUN0Q0MsRUFBZ0M1aUMsRUFBSzRpQyw4QkFDckNoRSxFQUFnQzUrQixFQUFLNCtCLDhCQUN6QzU3RSxLQUFLMnpFLFdBQWE5TyxFQUNsQjdrRSxLQUFLNi9FLDBCQUE0QkosRUFDakN6L0UsS0FBSzgvRSw2QkFBOEIsRUFDbkM5L0UsS0FBSysvRSxvQkFBc0IsSUFBSWpuRSxJQUMvQjlZLEtBQUtnZ0Ysb0JBQXNCLEVBQzNCaGdGLEtBQUtpZ0YsV0FBYTlxQyxFQUNsQm4xQyxLQUFLa2dGLHFCQUF1QmQsRUFDNUJwL0UsS0FBSys3RSxpQkFBbUJKLEVBQ3hCMzdFLEtBQUttZ0Ysa0JBQW9CWCxFQUN6QngvRSxLQUFLb2dGLHVCQUF5QixJQUFJdG5FLElBQ2xDOVksS0FBS3FnRixtQkFBcUIsS0FDMUJyZ0YsS0FBS3NnRiw0QkFBOEIsRUFDbkN0Z0YsS0FBS3VnRixjQUFnQmpCLEVBQ3JCdC9FLEtBQUt3Z0YsV0FBYWpCLEVBQ2xCdi9FLEtBQUt5eUUsTUFBUXI1QixFQUNicDVDLEtBQUt1OUIsUUFBVSxJQUFJemtCLElBQ25COVksS0FBS3lnRixPQUFTLFVBQ2R6Z0YsS0FBSzBnRixPQUFTeGpCLEVBQ2RsOUQsS0FBSzJnRixlQUFpQixJQUFJN25FLElBQzFCOVksS0FBSzRnRixTQUFXL29ELEVBQ2hCNzNCLEtBQUs2Z0Ysa0JBQXVDLElBQXBCbkIsRUFDeEIxL0UsS0FBSzhnRixnQ0FBa0NuQixFQUN2QzMvRSxLQUFLK2dGLCtCQUFpQ25CLEVBQ3RDNS9FLEtBQUtnaEYseUJBQWlGLGlCQUF0RGhoRixLQUFLaWdGLFdBQVc3cUMsUUFBUWw0QyxLQUFLa2lELE9BQU8rMUIsY0FDcEVuMUUsS0FBS204RSwrQkFBaUNQLEVBQ3RDLElBQUkvOUQsRUFBSzdkLEtBQUtnZ0Ysc0JBQ2R4aEYsRUFBT3EvQixVQUFVLENBQ2ZtWixTQUFVLFdBQ1IsT0FBTzVFLEVBQU02dUMsVUFBVXBqRSxJQUV6QnhhLE1BQU8sU0FBZWswRSxHQUNwQixPQUFPbmxDLEVBQU1xTCxPQUFPODVCLElBRXRCcmlELEtBQU0sU0FBY3VyQixHQUNsQixJQUNFck8sRUFBTTh1QyxNQUFNcmpFLEVBQUk0aUMsR0FDaEIsTUFBT3A5QyxHQUNQKzFDLEVBQUsvMUMsTUFBTUEsS0FHZjhvQixNQUFPLFNBQWUrcUIsR0FDcEIsT0FBTzlFLEVBQU0rdUMsT0FBT3RqRSxFQUFJcTVCLE1BSUosTUFBcEJtb0MsR0FDRnIvRSxLQUFLb2hGLDJCQUF3RCxNQUE3Qi9CLEVBQWlCNStCLFNBQW1CLENBQ2xFbitCLEtBQU0rOEQsRUFBaUI1K0IsVUFDckIsS0FBTTQrQixFQUFpQnhuRCxTQUFTLEdBS3hDLElBQUk0YixFQUFTMHJDLEVBQVNsaEYsVUErZ0N0QixPQTdnQ0F3MUMsRUFBTzR0QyxPQUFTLFdBQ2QsSUFBSWhtQyxFQUFTcjdDLEtBRWIsR0FBb0IsY0FBaEJBLEtBQUt5Z0YsT0FBVCxDQUlBemdGLEtBQUt5Z0YsT0FBUyxZQUVkemdGLEtBQUtrZ0YscUJBQTZCLE9BQUVsZ0YsS0FBS2lnRixXQUFXN3FDLFFBQVE2VSxZQUUzQixJQUE3QmpxRCxLQUFLMmdGLGVBQWU3aEYsT0FDdEJrQixLQUFLMmdGLGVBQWU5N0UsU0FBUSxTQUFVeXlFLEdBQ3BDLE9BQU9BLEVBQUlyZ0MsaUJBR2JqM0MsS0FBSzJnRixlQUFlcDNCLFNBR3RCLElBQUkrM0IsRUFBb0J0aEYsS0FBS3FnRixtQkFFSCxPQUF0QmlCLElBQ0Z0aEYsS0FBS3FnRixtQkFBcUIsS0FDMUJpQixFQUFrQno4RSxTQUFRLFNBQVVnaUUsR0FDbEMsT0FBT3hyQixFQUFPa2xDLGNBQWNnQixhQUFhMWEsTUFHM0M3bUUsS0FBS3VnRixjQUFjaUIsT0FHckJ4aEYsS0FBSysvRSxvQkFBb0J4MkIsUUFFekJ2cEQsS0FBS3loRiw0QkFFRHpoRixLQUFLMGhGLG9CQUNQMWhGLEtBQUswaEYsa0JBQWtCOXRDLFVBRXZCNXpDLEtBQUswaEYsa0JBQW9CLFFBSTdCanVDLEVBQU9rdUMsbUJBQXFCLFdBQzFCLElBQUlDLEVBRUosT0FBUTVoRixLQUFLeWdGLFFBQ1gsSUFBSyxVQU1MLElBQUssc0JBRURtQixFQUFjLFNBQ2QsTUFHSixJQUFLLFlBRURBLEVBQWMsV0FDZCxNQUdKLElBQUssZ0JBRURBLEVBQWM1aEYsS0FBS3NnRiw0QkFBOEIsRUFBSSxTQUFXLFdBQ2hFLE1BR0osUUFDRXRnRixLQUFLeWdGLE9BQzZHanFDLEdBQVUsR0FHaEl4MkMsS0FBS2tnRixxQkFBcUJoMEUsSUFBSWxNLEtBQUtpZ0YsV0FBVzdxQyxRQUFRNlUsV0FBWTIzQixJQUdwRW51QyxFQUFPb3VDLFVBQVksU0FBbUJDLEdBQ3BDLElBQUlyakMsRUFBU3orQyxLQUVUdS9FLEVBQVl2L0UsS0FBS3dnRixXQUVyQixHQUFpQixNQUFiakIsRUFBbUIsQ0FDckIsSUFBSXdDLEVBQU8vaEYsS0FBS2dnRixzQkFFaEJ6VSxFQUFnQm50QyxRQUFPLFNBQVVnYixHQUMvQixJQUFJNG9DLEVBQW9CekMsRUFBVTBDLFVBQVMsV0FDekMsSUFDRUgsSUFDQTFvQyxFQUFLcEMsV0FDTCxNQUFPM3pDLEdBQ1ArMUMsRUFBSy8xQyxNQUFNQSxPQUdmLE9BQU8sV0FDTCxPQUFPazhFLEVBQVU4QixPQUFPVyxPQUV6Qm5rRCxVQUFVLENBQ1htWixTQUFVLFdBQ1IsT0FBT3lILEVBQU93aUMsVUFBVWMsSUFFMUIxK0UsTUFBTyxTQUFleTBFLEdBQ3BCLE9BQU9yNUIsRUFBT2hCLE9BQU9xNkIsSUFFdkIzckQsTUFBTyxTQUFlK3FCLEdBQ3BCLE9BQU91SCxFQUFPMGlDLE9BQU9ZLEVBQU03cUMsV0FJL0I0cUMsS0FJSnJ1QyxFQUFPd3RDLFVBQVksU0FBbUJwakUsR0FDcEM3ZCxLQUFLMmdGLGVBQXVCLE9BQUU5aUUsR0FFRyxJQUE3QjdkLEtBQUsyZ0YsZUFBZTdoRixPQUN0QmtCLEtBQUtxaEYsU0FFTHJoRixLQUFLeXlFLE1BQU16N0IsYUFJZnZELEVBQU9nSyxPQUFTLFNBQWdCcDZDLEdBQzlCckQsS0FBS3FoRixTQUVMcmhGLEtBQUt5eUUsTUFBTXB2RSxNQUFNQSxJQUduQm93QyxFQUFPMHRDLE9BQVMsU0FBZ0J0akUsRUFBSXE1QixHQUNsQ2wzQyxLQUFLMmdGLGVBQWV6MEUsSUFBSTJSLEVBQUlxNUIsR0FFNUJsM0MsS0FBSzJoRixzQkFJUGx1QyxFQUFPeXRDLE1BQVEsU0FBZWdCLEVBQUt6aEMsR0FDakMsSUFBSXdILEVBQVNqb0QsS0FFYkEsS0FBSzZoRixXQUFVLFdBQ2I1NUIsRUFBT2s2QixZQUFZMWhDLEdBRW5Cd0gsRUFBT202QixrREFJWDN1QyxFQUFPNHVDLHFCQUF1QixTQUE4QkMsR0FDMUQsSUFBSW42QixFQUFTbm9ELEtBRVR1aUYsRUFBVSxHQTRCZCxPQTNCQUQsRUFBVXo5RSxTQUFRLFNBQVU0N0MsR0FDMUIsR0FBc0IsT0FBbEJBLEVBQVNuK0IsTUFBd0MsTUFBdkJtK0IsRUFBUzI0QixZQUF1QjM0QixFQUFTemhELGVBQWUsVUFBdEYsQ0FHTyxHQUFxQixNQUFqQnloRCxFQUFTbitCLEtBQWMsQ0FHaEMsSUFBSXUyQyxFQUFTcFksRUFBU3poRCxlQUFlLFdBQWdDLE1BQW5CeWhELEVBQVNvWSxPQUFpQnBZLEVBQVNvWSxPQUFTLEtBQzFGMnBCLEVBQVczcEIsRUFBU0EsRUFBT3IwRCxLQUFJLFNBQVVnNkMsR0FFM0MsT0FEY0EsRUFBTTNhLFdBRW5Cbi9CLEtBQUssTUFBUSxjQUNackIsRUFBUTJuRSxFQUFXNXNDLE9BQU8sZUFBZ0IsbUNBQXFDK3BCLEVBQU84M0IsV0FBVzdxQyxRQUFRbDRDLEtBQUtraUQsT0FBT24rQyxLQUFPLHFCQUF1QnVoRixFQUFXLDZEQVNsSyxNQVJBbi9FLEVBQU03RSxPQUFTLENBQ2JxNkQsT0FBUUEsRUFDUjFqQixVQUFXZ1QsRUFBTzgzQixXQUFXN3FDLFFBQVFsNEMsS0FDckMrM0MsVUFBV2tULEVBQU84M0IsV0FBVzdxQyxRQUFRSCxXQUl2QzV4QyxFQUFNdUksTUFDQXZJLEVBRU4sSUFBSW8vRSxFQUFtQmhpQyxFQUN2QjhoQyxFQUFRMWpGLEtBQUs0akYsT0FHVkYsR0FRVDl1QyxFQUFPaXZDLDJCQUE2QixTQUFvQ0osR0FDdEUsSUFBSUssRUFFSixHQUFJTCxFQUFVMWpGLE9BQVMsRUFTckIsT0FSSTBqRixFQUFVajhCLE1BQUssU0FBVXU4QixHQUMzQixJQUFJQyxFQUVKLE9BQTBKLEtBQTVGLFFBQXJEQSxFQUF3QkQsRUFBYXhKLGtCQUFrRCxJQUExQnlKLE9BQW1DLEVBQVNBLEVBQXNCQyxrQkFFekJ0c0MsR0FBVSxJQUdwSCxFQUdULElBQUlpSyxFQUFXNmhDLEVBQVUsR0FDckJRLEdBQTJKLEtBQTFGLFFBQWhESCxFQUF1QmxpQyxFQUFTMjRCLGtCQUFpRCxJQUF6QnVKLE9BQWtDLEVBQVNBLEVBQXFCRyxjQU03SSxPQUpJQSxHQUFnQyxZQUFoQjlpRixLQUFLeWdGLFFBQ3FIanFDLEdBQVUsS0FHcEpzc0MsSUFDRjlpRixLQUFLb2hGLDJCQUEyQjNnQyxFQUFVLEtBQU16Z0QsS0FBSzYvRSwyQkFFckQ3L0UsS0FBS3l5RSxNQUFNdjlDLEtBQUt1ckIsSUFFVCxJQU1YaE4sRUFBTzB1QyxZQUFjLFNBQXFCMWhDLEdBQ3hDLEdBQW9CLGNBQWhCemdELEtBQUt5Z0YsT0FBVCxDQUlBLElBQUk2QixFQUFZMStFLE1BQU1DLFFBQVE0OEMsR0FBWUEsRUFBVyxDQUFDQSxHQUVsRHNpQyxFQUFvQi9pRixLQUFLcWlGLHFCQUFxQkMsR0FFbEQsR0FBaUMsSUFBN0JTLEVBQWtCbmtGLE9BbUJwQixPQWhCYzBqRixFQUFVajhCLE1BQUssU0FBVXI0QixHQUNyQyxJQUFJZzFELEVBRUosT0FBbUgsS0FBeEUsUUFBbENBLEVBQWdCaDFELEVBQUVvckQsa0JBQTBDLElBQWxCNEosT0FBMkIsRUFBU0EsRUFBY0MsZUFJckdqakYsS0FBS3lnRixPQUFTLGdCQUVkemdGLEtBQUsyaEYscUJBRUwzaEYsS0FBSzgvRSw2QkFBOEIsUUFHckM5L0UsS0FBS3l5RSxNQUFNdjlDLEtBQUt1ckIsR0FRbEIsSUFGbUJ6Z0QsS0FBSzBpRiwyQkFBMkJLLEdBRW5ELENBSUEsSUFBSUcsRUFneEJSLFNBQW1DWixHQUNqQyxJQUFJYSxFQUEwQixHQUMxQkMsRUFBdUIsR0FtQjNCLE9BbEJBZCxFQUFVejlFLFNBQVEsU0FBVTQ3QyxHQUMxQixHQUFxQixNQUFqQkEsRUFBUzVJLE1BQWtDLE1BQWxCNEksRUFBUzRpQyxNQUFlLENBQ25ELElBQUlBLEVBQVE1aUMsRUFBUzRpQyxNQUNqQnhyQyxFQUFPNEksRUFBUzVJLEtBRVAsTUFBVHdyQyxHQUF5QixNQUFSeHJDLEdBQzJQckIsR0FBVSxHQUcxUjRzQyxFQUFxQnZrRixLQUFLLENBQ3hCd2tGLE1BQU9BLEVBQ1B4ckMsS0FBTUEsRUFDTjRJLFNBQVVBLFNBR1owaUMsRUFBd0J0a0YsS0FBSzRoRCxNQUcxQixDQUFDMGlDLEVBQXlCQyxHQXJ5QkhFLENBQTBCUCxHQUNsREksRUFBMEJELEVBQXNCLEdBQ2hERSxFQUF1QkYsRUFBc0IsR0FFN0NLLEVBQTZCSixFQUF3QnZrRixPQUFTLEVBUWxFLEdBQUkya0YsRUFBNEIsQ0FDOUIsSUFBSUMsRUFBbUJ4akYsS0FBS3lqRixrQkFBa0JOLEdBRTlDLElBQUt0eUIsRUFBa0I2eUIsNkJBQThCLENBQ25ELElBQUlDLEVBQWdCM2pGLEtBQUt1Z0YsY0FBY2lCLElBQUl4aEYsS0FBS2lnRixZQUVoRGpnRixLQUFLNGpGLHdCQUF3QkQsR0FHL0IzakYsS0FBSzZqRix5QkFBeUJMLEdBRXpCM3lCLEVBQWtCNnlCLDhCQUNqQjFqRixLQUFLOC9FLDhCQUFnQzkvRSxLQUFLMGhGLG9CQUM1QzFoRixLQUFLMGhGLGtCQUFvQjFoRixLQUFLMGdGLE9BQU81cUMsT0FBTzkxQyxLQUFLaWdGLGFBS3ZELEdBQUltRCxFQUFxQnhrRixPQUFTLEVBQUcsQ0FDbkMsSUFBSWtsRixFQUFvQjlqRixLQUFLK2pGLDZCQUE2QlgsR0FFMUQsSUFBS3Z5QixFQUFrQjZ5Qiw2QkFBOEIsQ0FJbkQsSUFBSU0sRUFBaUJoa0YsS0FBS3VnRixjQUFjaUIsTUFFeEN4aEYsS0FBSzRqRix3QkFBd0JJLEdBRy9CaGtGLEtBQUs2akYseUJBQXlCQyxHQWdCaEMsR0FiSTlqRixLQUFLZ2hGLDBCQUE0Qm53QixFQUFrQm96QixrQ0FHZCxNQUFuQ2xCLEVBQWtCLEdBQUczSixXQUV2QjJKLEVBQWtCLEdBQUczSixXQUFhLENBQ2hDOEssNkJBQThCbGtGLEtBQUtpZ0YsV0FBV3JxQyxTQUFTeVUsUUFHekQwNEIsRUFBa0IsR0FBRzNKLFdBQVc4Syw2QkFBK0Jsa0YsS0FBS2lnRixXQUFXcnFDLFNBQVN5VSxRQUl4RndHLEVBQWtCNnlCLDZCQUE4QixDQUtsRCxJQUFJUyxFQUFrQm5rRixLQUFLdWdGLGNBQWNpQixJQUFJK0IsRUFBNkJ2akYsS0FBS2lnRixnQkFBYTM4RSxHQUV4RmlnRixHQUNFdmpGLEtBQUs4L0UsOEJBQWdDOS9FLEtBQUswaEYsb0JBQzVDMWhGLEtBQUswaEYsa0JBQW9CMWhGLEtBQUswZ0YsT0FBTzVxQyxPQUFPOTFDLEtBQUtpZ0YsYUFJckRqZ0YsS0FBSzRqRix3QkFBd0JPLEdBRy9CbmtGLEtBQUt5eUUsTUFBTXY5QyxLQUFLdXJCLE1BR2xCaE4sRUFBTzJ0QywyQkFBNkIsU0FBb0MzZ0MsRUFBVTVvQixFQUFTNG5ELEdBQ3pGLElBQUl4SCxFQUFTajRFLEtBSWIsR0FGOEIsT0FBNUJBLEtBQUtxZ0Ysb0JBQXlLN3BDLEdBQVUsR0FFMUssTUFBWmlLLEdBQStCLE1BQVg1b0IsRUFBeEIsQ0FJQSxJQUFJeXBELEVBQW9CLEdBRXhCLEdBQUk3Z0MsRUFBVSxDQUNaLElBQUl4cUIsRUFBVW11RCxFQUFrQjNqQyxFQUFVemdELEtBQUtpZ0YsV0FBVzl3QixLQUFNcWYsRUFBVyxDQUN6RTNKLFVBQVc3a0UsS0FBSzJ6RSxXQUNoQjk3QixLQUFNLEdBQ044bkMsK0JBQWdDMy9FLEtBQUs4Z0YsZ0NBQ3JDbEIsOEJBQStCNS9FLEtBQUsrZ0YsK0JBQ3BDbkYsOEJBQStCNTdFLEtBQUttOEUsK0JBQ3BDc0QseUJBQTBCQSxJQUU1QjRFLEVBQWtDcHVELEdBQ2xDcXJELEVBQWtCemlGLEtBQUssQ0FDckJzMkMsVUFBV24xQyxLQUFLaWdGLFdBQ2hCaHFELFFBQVNBLEVBQ1Q0QixRQUFTQSxJQUdYNzNCLEtBQUtza0YsNEJBQTRCcnVELEVBQVNxckQsUUFDakN6cEQsR0FDVHlwRCxFQUFrQnppRixLQUFLLENBQ3JCczJDLFVBQVduMUMsS0FBS2lnRixXQUNoQmhxRCxRQUFTLENBQ1A0aUMsT0FBUSxLQUNSa2IsY0FBZSxLQUNmd1Esd0JBQXlCLEtBQ3pCQyxxQkFBc0IsS0FDdEJobUYsT0FBUW10RSxFQUFrQnZ0QyxTQUMxQnFtRCxTQUFTLEdBRVg1c0QsUUFBU0EsSUFJYjczQixLQUFLcWdGLG1CQUFxQmlCLEVBQzFCQSxFQUFrQno4RSxTQUFRLFNBQVVnaUUsR0FDbEMsT0FBT29SLEVBQU9zSSxjQUFjbUUsWUFBWTdkLE1BSTFDN21FLEtBQUt1Z0YsY0FBY2lCLFFBR3JCL3RDLEVBQU82d0MsNEJBQThCLFNBQXFDcnVELEVBQVNxckQsR0FDakYsR0FBSXJyRCxFQUFRdXVELHNCQUF3QnZ1RCxFQUFRdXVELHFCQUFxQjVsRixPQUFRLENBQ3ZFLElBQUk0bEYsRUFBdUJ2dUQsRUFBUXV1RCxxQkFDL0I3SSxFQUFrQjM3RSxLQUFLKzdFLGlCQUMxQkosR0FBK0tubEMsR0FBVSxHQUUxTCxJQUNJcVksRUFEQUMsR0FBWSxFQUFJRixFQUFxQyxTQUFHNDFCLEdBRzVELElBQ0UsSUFBSzExQixFQUFVenBELE1BQU93cEQsRUFBUUMsRUFBVXJxRCxLQUFLKzBCLE1BQU8sQ0FDbEQsSUFBSW1yRCxFQUFzQjkxQixFQUFNaGhELE1BQzVCc25DLEVBQVl3bUMsRUFBZ0J2dUUsSUFBSXUzRSxFQUFvQmxHLG9CQUV4RCxHQUFpQixNQUFidHBDLEVBQ0ZuMUMsS0FBSzRrRixvQ0FBb0NqSixFQUFpQmdKLE9BQ3JELENBQ0wsSUFBSUUsRUFBZ0M3a0YsS0FBSzhrRiwrQkFBK0IzdkMsRUFBV3d2QyxHQUVuRnJELEVBQWtCemlGLEtBQUtpWSxNQUFNd3FFLEdBQW1CLEVBQUkzOEIsRUFBNkIsU0FBR2tnQyxNQUd4RixNQUFPOS9FLEdBQ1ArcEQsRUFBVS9yRCxFQUFFZ0MsR0FDWixRQUNBK3BELEVBQVUxckQsT0FLaEJxd0MsRUFBT3N4Qyx1QkFBeUIsU0FBZ0NKLEVBQXFCeHZDLEdBQ25GLElBQUlvTSxFQUFXb3JCLEVBQTRCeDNCLEVBQVd3dkMsRUFBb0J0NkIsT0FBUXM2QixFQUFvQjF2QyxXQUN0RyxPQUFPbXZDLEVBQWtCLENBQ3ZCOWhFLEtBQU1xaUUsRUFBb0JyaUUsTUFDekJpL0IsRUFBVW9qQyxFQUFvQmpULFNBQVUsQ0FDekM3TSxVQUFXN2tFLEtBQUsyekUsV0FDaEI5N0IsS0FBTThzQyxFQUFvQjlzQyxLQUMxQjhuQywrQkFBZ0MzL0UsS0FBSzhnRixnQ0FDckNsQiw4QkFBK0I1L0UsS0FBSytnRiwrQkFDcEN0Qix5QkFBMEJ6L0UsS0FBSzYvRSwwQkFDL0JqRSw4QkFBK0I1N0UsS0FBS204RSxrQ0FJeEMxb0MsRUFBT3F4QywrQkFBaUMsU0FBd0NwRyxFQUF1QmlHLEdBQ3JHLElBQUl4dkMsRUFBWWttQyxFQUFhcUQsR0FDekI0QyxFQUFvQixHQUVwQjBELEVBQWdCaGxGLEtBQUsra0YsdUJBQXVCSixFQUFxQnh2QyxHQVdyRSxPQVRBa3ZDLEVBQWtDVyxHQUNsQzFELEVBQWtCemlGLEtBQUssQ0FDckJzMkMsVUFBV24xQyxLQUFLaWdGLFdBQ2hCaHFELFFBQVMrdUQsRUFDVG50RCxRQUFTLE9BR1g3M0IsS0FBS3NrRiw0QkFBNEJVLEVBQWUxRCxHQUV6Q0EsR0FHVDd0QyxFQUFPbXhDLG9DQUFzQyxTQUE2Q2pKLEVBQWlCZ0osR0FDekcsSUFBSXhNLEVBQVNuNEUsS0FFYjI3RSxFQUFnQnRzQixLQUFLczFCLEVBQW9CbEcsb0JBQW9CcjRDLE1BQUssU0FBVStPLEdBQzFFLEdBQWlCLE1BQWJBLEdBQXVDLFlBQWxCZ2pDLEVBQU9zSSxPQUFoQyxDQUlBLElBU013RSxFQVRGSixFQUFnQzFNLEVBQU8yTSwrQkFBK0IzdkMsRUFBV3d2QyxHQUVyRkUsRUFBOEJoZ0YsU0FBUSxTQUFVZ2lFLEdBQzlDLE9BQU9zUixFQUFPb0ksY0FBY21FLFlBQVk3ZCxNQUdULE1BQTdCc1IsRUFBT2tJLHNCQUtSNEUsRUFBd0I5TSxFQUFPa0ksb0JBQW9CeGhGLEtBQUtpWSxNQUFNbXVFLEdBQXVCLEVBQUl0Z0MsRUFBNkIsU0FBR2tnQyxJQUcxSDFNLEVBQU9vSSxjQUFjaUIsWUFLM0IvdEMsRUFBT2d3QyxrQkFBb0IsU0FBMkJuQixHQUNwRCxJQUFJL0osRUFBU3Y0RSxLQWdCYixPQWRnQyxPQUE1QkEsS0FBS3FnRixxQkFDUHJnRixLQUFLcWdGLG1CQUFtQng3RSxTQUFRLFNBQVVnaUUsR0FDeEMsT0FBTzBSLEVBQU9nSSxjQUFjZ0IsYUFBYTFhLE1BRzNDN21FLEtBQUtxZ0YsbUJBQXFCLE1BRzVCcmdGLEtBQUs4L0UsNkJBQThCLEVBRW5DOS9FLEtBQUsrL0Usb0JBQW9CeDJCLFFBRXpCdnBELEtBQUt1OUIsUUFBUWdzQixRQUVOKzRCLEVBQVU5OUUsS0FBSSxTQUFVMGdGLEdBQzdCLElBQUlDLEVBQWVmLEVBQWtCYyxFQUFhM00sRUFBTzBILFdBQVc5d0IsS0FBTXFmLEVBQVcsQ0FDbkYzSixVQUFXMFQsRUFBTzVFLFdBQ2xCOTdCLEtBQU0sR0FDTjhuQywrQkFBZ0NwSCxFQUFPdUksZ0NBQ3ZDbEIsOEJBQStCckgsRUFBT3dJLCtCQUN0Q3RCLHlCQUEwQmxILEVBQU9zSCwwQkFDakNqRSw4QkFBK0JyRCxFQUFPNEQsaUNBS3hDLE9BRkE1RCxFQUFPZ0ksY0FBYzZFLGNBQWM3TSxFQUFPMEgsV0FBWWtGLEVBQWM1TSxFQUFPcUksVUFFcEV1RSxNQVNYMXhDLEVBQU9vd0MseUJBQTJCLFNBQWtDd0IsR0FDbEUsSUFBSTNNLEVBQVMxNEUsS0FFTyxjQUFoQkEsS0FBS3lnRixRQUlUNEUsRUFBU3hnRixTQUFRLFNBQVVveEIsR0FDekIsSUFBSXN1RCxFQUEwQnR1RCxFQUFRc3VELHdCQUNsQ0MsRUFBdUJ2dUQsRUFBUXV1RCxxQkFDL0JDLEVBQVV4dUQsRUFBUXd1RCxRQVN0QixHQVJBL0wsRUFBTytILE9BQVNnRSxFQUFVLGdCQUFrQixzQkFFNUMvTCxFQUFPaUoscUJBRUg4QyxJQUNGL0wsRUFBT29ILDZCQUE4QixHQUduQzBFLEdBQXdELElBQWhDQSxFQUFxQjVsRixPQUFjLENBQzdELElBQUkrOEUsRUFBa0JqRCxFQUFPcUQsaUJBQzVCSixHQUErS25sQyxHQUFVLEdBQzFMZ3VDLEVBQXFCMy9FLFNBQVEsU0FBVTgvRSxHQUNyQ2pNLEVBQU80TSw0QkFBNEJYLEVBQXFCaEosTUFJNUQsR0FBSTRJLEdBQThELElBQW5DQSxFQUF3QjNsRixTQUNyRDg1RSxFQUFPb0gsNEJBQWdELGtCQUFsQnBILEVBQU8rSCxPQUM1QzhELEVBQXdCMS9FLFNBQVEsU0FBVTBnRixHQUN4QzdNLEVBQU84TSwrQkFBK0J2dkQsRUFBU3N2RCxNQUc3QzdNLEVBQU9tSSxrQkFBc0Msa0JBQWxCbkksRUFBTytILFFBQTRCLENBU2hFLElBQUlnRixFQUFnQixHQVNwQixHQVJBbEIsRUFBd0IxL0UsU0FBUSxTQUFVNmdGLEdBQ2YsVUFBckJBLEVBQVlqa0MsTUFDZGdrQyxFQUFjNW1GLEtBQUs2NUUsRUFBT2lOLHNCQUFzQkQsRUFBWXJDLE1BQU9xQyxFQUFZN3RDLEtBQU02dEMsRUFBYSxDQUNoR3BqRSxLQUFNb2pFLEVBQVlwakUsV0FLcEJtakUsRUFBYzdtRixPQUFTLEVBQUcsQ0FDNUIsSUFBS2l5RCxFQUFrQjZ5Qiw2QkFBOEIsQ0FDbkQsSUFBSUMsRUFBZ0JqTCxFQUFPNkgsY0FBY2lCLE1BRXpDOUksRUFBT2tMLHdCQUF3QkQsR0FHakNqTCxFQUFPbUwseUJBQXlCNEIsU0FPMUNoeUMsRUFBTzJ1Qyw0Q0FBOEMsV0FDbkQsR0FBS3BpRixLQUFLZ2hGLDJCQUkrQixJQUFyQ2hoRixLQUFLc2dGLDhCQUEwRSxJQUFyQ3RnRixLQUFLOC9FLDZCQUNqRDkvRSxLQUFLeWhGLDRCQUdINXdCLEVBQWtCb3pCLGlDQUFpQyxDQUNyRCxJQUFJejVCLEVBQVMwaEIsSUFDYmxzRSxLQUFLaWdGLFdBQWEsQ0FDaEI3cUMsUUFBU3AxQyxLQUFLaWdGLFdBQVc3cUMsUUFDekJRLFNBQVVnM0IsRUFBcUI1c0UsS0FBS2lnRixXQUFXcnFDLFNBQVMxNEMsS0FBTXN0RCxFQUFReHFELEtBQUtpZ0YsV0FBV3JxQyxTQUFTWCxVQUFXajFDLEtBQUtpZ0YsV0FBV3JxQyxTQUFTK0wsT0FDbkl3TixLQUFNd2QsRUFBNEIzc0UsS0FBS2lnRixXQUFXOXdCLEtBQUtqeUQsS0FBTXN0RCxFQUFReHFELEtBQUtpZ0YsV0FBVzl3QixLQUFLbGEsY0FhaEd4QixFQUFPNnhDLDRCQUE4QixTQUFxQ1gsRUFBcUJoSixHQUM3RixJQUFJaUssRUFBVTVsRixLQUVWOUMsRUFBT3krRSxFQUFnQnZ1RSxJQUFJdTNFLEVBQW9CbEcsb0JBRW5ELEdBQVksTUFBUnZoRixFQUFjLENBQ2hCLElBQUlpNEMsRUFBWWttQyxFQUFhbitFLEdBRzdCOEMsS0FBSzZsRiwyQkFBMkJsQixFQUFxQnh2QyxHQUVyRG4xQyxLQUFLb2lGLGtEQUNBLENBR0wsSUFBSTBELEVBQU85bEYsS0FBS2dnRixzQkFFaEJoZ0YsS0FBS3NnRiw4QkFFTCxJQUFJeUYsRUFBd0IsV0FDMUJILEVBQVF0Riw4QkFFUnNGLEVBQVF4RCwrQ0FNVjdXLEVBQWdCcm1FLEtBQUssSUFBSWtvRCxTQUFRLFNBQVUzYSxFQUFTa21DLEdBQ2xEZ0QsRUFBZ0J0c0IsS0FBS3MxQixFQUFvQmxHLG9CQUFvQnI0QyxLQUFLcU0sRUFBU2ttQyxPQUN6RW4wRSxLQUFJLFNBQVUyd0MsR0FDQyxNQUFiQSxHQUNGeXdDLEVBQVEvRCxXQUFVLFdBQ2hCK0QsRUFBUUMsMkJBQTJCbEIsRUFBcUJ0SixFQUFhbG1DLElBR3JFLElBQUl3dUMsRUFBZ0JpQyxFQUFRckYsY0FBY2lCLE1BRTFDb0UsRUFBUWhDLHdCQUF3QkQsU0FHbkM5bEQsVUFBVSxDQUNYbVosU0FBVSxXQUNSNHVDLEVBQVEzRSxVQUFVNkUsR0FFbEJDLEtBRUYxaUYsTUFBTyxTQUFlMmlGLEdBQ3BCSixFQUFRbm9DLE9BQU91b0MsR0FFZkQsS0FFRjU1RCxNQUFPLFNBQWUrcUIsR0FDcEIsT0FBTzB1QyxFQUFRekUsT0FBTzJFLEVBQU01dUMsUUFNcEN6RCxFQUFPb3lDLDJCQUE2QixTQUFvQ2xCLEVBQXFCeHZDLEdBQzNGLElBQUlnd0MsRUFBZW5sRixLQUFLK2tGLHVCQUF1QkosRUFBcUJ4dkMsR0FJcEUsR0FGQW4xQyxLQUFLdWdGLGNBQWM2RSxjQUFjcGxGLEtBQUtpZ0YsV0FBWWtGLElBRTdDdDBCLEVBQWtCNnlCLDZCQUE4QixDQUNuRCxJQUFJQyxFQUFnQjNqRixLQUFLdWdGLGNBQWNpQixNQUV2Q3hoRixLQUFLNGpGLHdCQUF3QkQsR0FHL0IzakYsS0FBSzZqRix5QkFBeUIsQ0FBQ3NCLEtBZWpDMXhDLEVBQU8reEMsK0JBQWlDLFNBQXdDTCxFQUFjTyxHQUM1RixJQUFJTyxFQUdBNUMsRUFBUXFDLEVBQVlyQyxNQUVwQjZDLEVBRE9SLEVBQVk3dEMsS0FDSnJ6QyxJQUFJbkcsUUFBUXFHLEtBQUssS0FFaEN5aEYsRUFBaUJubUYsS0FBSysvRSxvQkFBb0IzeUUsSUFBSWkyRSxHQUU1QixNQUFsQjhDLElBQ0ZBLEVBQWlCLElBQUlydEUsSUFFckI5WSxLQUFLKy9FLG9CQUFvQjd6RSxJQUFJbTNFLEVBQU84QyxJQUd0QyxJQVNJclcsRUFUQXNXLEVBQWdCRCxFQUFlLzRFLElBQUk4NEUsR0FDbkNHLEVBQW9DLE1BQWpCRCxHQUFnRCxhQUF2QkEsRUFBYzNrQyxLQUFzQjJrQyxFQUFjOUQsVUFBWSxLQUM5RzZELEVBQWVqNkUsSUFBSWc2RSxFQUFTLENBQzFCemtDLEtBQU0sY0FDTmlrQyxZQUFhQSxJQU9VLFdBQXJCQSxFQUFZamtDLEtBQ2RxdUIsRUFBVzRWLEVBQVk1VixTQUNPLFVBQXJCNFYsRUFBWWprQyxLQUNyQnF1QixFQUFXNFYsRUFBWW5rQyxTQUFTOEksT0FHd0c3VCxHQUFVLEdBR3BKLElBWUk4dkMsRUFDQUMsRUFiQUMsRUFBZXJCLEVBQWEzbUYsT0FBTzRPLElBQUkwaUUsR0FDdkMyVyxHQUEyRSxRQUF4RFIsRUFBd0JkLEVBQWFwUixxQkFBcUQsSUFBMUJrUyxFQUFtQ0EsRUFBd0IsSUFBSWhuQixRQUFPLFNBQVVpVixHQUNySyxJQUFJd1MsRUFBVXJpQixFQUFpQjZQLEVBQWE3cEIsT0FBUTZwQixFQUFhbE4sVUFDakUsT0FDRWtOLEVBQWE3cEIsU0FBV3lsQixHQUV4QjRXLElBQVk1VyxLQUtFLE1BQWhCMFcsR0FBdUpod0MsR0FBVSxHQUluSyxJQUFJbXdDLEVBQXNCM21GLEtBQUt1OUIsUUFBUW53QixJQUFJMGlFLEdBRTNDLEdBQTJCLE1BQXZCNlcsRUFBNkIsQ0FHL0JMLEVBQW1CbmIsRUFBa0J0RSxPQUFPOGYsRUFBb0JsaEIsT0FBUStnQixHQUN4RSxJQUFJSSxFQUFpQixJQUFJOXRFLElBRXJCK3RFLEVBQWdCLFNBQXVCNXdELEdBQ3pDLElBMFVpQnBvQixFQUNuQmk1RSxFQTNVTWprRixHQTBVYWdMLEVBMVVTb29CLEVBNlVpQyxRQUF6RDZ3RCxFQUFrQnI2QyxLQUFLQyxVQUFVdS9CLEVBQVdwK0QsV0FBeUMsSUFBcEJpNUUsRUFBNkJBLEVBQWtCLElBNVVsSEYsRUFBZTE2RSxJQUFJckosRUFBS296QixJQUcxQjB3RCxFQUFvQjVTLGNBQWNsdkUsUUFBUWdpRixHQUMxQ0osRUFBZTVoRixRQUFRZ2lGLEdBQ3ZCTixFQUFxQjNpRixNQUFNc0IsS0FBSzBoRixFQUFldDJCLGVBRS9DZzJCLEVBQW1CRSxFQUNuQkQsRUFBcUJFLEVBVXZCLEdBUEF6bUYsS0FBS3U5QixRQUFRcnhCLElBQUk0akUsRUFBVSxDQUN6QnJLLE9BQVE2Z0IsRUFDUnZTLGNBQWV3UyxJQUtPLE1BQXBCRixFQUEwQixDQUM1QixJQUFJN0MsRUFBbUJ4akYsS0FBSytqRiw2QkFBNkJzQyxHQUV6RCxJQUFLeDFCLEVBQWtCNnlCLDZCQUE4QixDQUNuRCxJQUFJQyxFQUFnQjNqRixLQUFLdWdGLGNBQWNpQixNQUV2Q3hoRixLQUFLNGpGLHdCQUF3QkQsR0FHL0IzakYsS0FBSzZqRix5QkFBeUJMLEtBVWxDL3ZDLEVBQU9zd0MsNkJBQStCLFNBQXNDWCxHQUMxRSxJQUFJMkQsRUFBVS9tRixLQUVWeWxGLEVBQWdCLEdBNERwQixPQTNEQXJDLEVBQXFCditFLFNBQVEsU0FBVW1pRixHQUNyQyxJQUFJM0QsRUFBUTJELEVBQW9CM0QsTUFDNUJ4ckMsRUFBT212QyxFQUFvQm52QyxLQUMzQjRJLEVBQVd1bUMsRUFBb0J2bUMsU0FFL0IwbEMsRUFBaUJZLEVBQVFoSCxvQkFBb0IzeUUsSUFBSWkyRSxHQVFyRCxHQU5zQixNQUFsQjhDLElBQ0ZBLEVBQWlCLElBQUlydEUsSUFFckJpdUUsRUFBUWhILG9CQUFvQjd6RSxJQUFJbTNFLEVBQU84QyxLQUdQLElBQTlCOUMsRUFBTXp2RSxRQUFRLFdBQW1CLENBQ25DLElBQUlzeUUsRUFBVXJ1QyxFQUFLcnpDLElBQUluRyxRQUFRcUcsS0FBSyxLQUNoQzBoRixFQUFnQkQsRUFBZS80RSxJQUFJODRFLEdBRXZDLEdBQXFCLE1BQWpCRSxFQU1GLE9BTEFBLEVBQWdCLENBQ2Qza0MsS0FBTSxXQUNONmdDLFVBQVcsQ0FBQzBFLFNBRWRiLEVBQWVqNkUsSUFBSWc2RSxFQUFTRSxHQUV2QixHQUEyQixhQUF2QkEsRUFBYzNrQyxLQUV2QixZQURBMmtDLEVBQWM5RCxVQUFVempGLEtBQUttb0YsR0FJL0IsSUFBSXRCLEVBQWNVLEVBQWNWLFlBQ1QsVUFBckJBLEVBQVlqa0MsTUFBOE5qTCxHQUFVLEdBQ3RQaXZDLEVBQWM1bUYsS0FBS2tvRixFQUFRcEIsc0JBQXNCdEMsRUFBT3hyQyxFQUFNNnRDLEVBQWFqbEMsUUFDdEUsQ0FLTCxJQUFJd21DLEVBQVdwdkMsRUFBS3J1QyxNQUFNLEdBQUksR0FBR2hGLElBQUluRyxRQUFRcUcsS0FBSyxLQUU5Q3dpRixFQUFpQmYsRUFBZS80RSxJQUFJNjVFLEdBRXhDLEdBQXNCLE1BQWxCQyxFQU1GLE9BTEFBLEVBQWlCLENBQ2Z6bEMsS0FBTSxXQUNONmdDLFVBQVcsQ0FBQzBFLFNBRWRiLEVBQWVqNkUsSUFBSSs2RSxFQUFVQyxHQUV4QixHQUE0QixhQUF4QkEsRUFBZXpsQyxLQUd4QixZQUZBeWxDLEVBQWU1RSxVQUFVempGLEtBQUttb0YsR0FLaEMsSUFBSUcsRUFBZUQsRUFBZXhCLFlBQ1YsV0FBdEJ5QixFQUFhMWxDLE1BQWtPakwsR0FBVSxHQUMzUGl2QyxFQUFjNW1GLEtBQUtrb0YsRUFBUUssdUJBQXVCL0QsRUFBT3hyQyxFQUFNc3ZDLEVBQWMxbUMsUUFHMUVnbEMsR0FHVGh5QyxFQUFPa3lDLHNCQUF3QixTQUErQnRDLEVBQU94ckMsRUFBTTZ0QyxFQUFhamxDLEdBQ3RGLElBQUlxdkIsRUFBVzRWLEVBQVlua0MsU0FBUzhJLE9BQ2hDODZCLEVBQWVmLEVBQWtCM2pDLEVBQVVpbEMsRUFBWW5rQyxTQUFVbWtDLEVBQVloVSxTQUFVLENBQ3pGN00sVUFBVzdrRSxLQUFLMnpFLFdBQ2hCOTdCLEtBQU02dEMsRUFBWTd0QyxLQUNsQjhuQywrQkFBZ0MzL0UsS0FBSzhnRixnQ0FDckNsQiw4QkFBK0I1L0UsS0FBSytnRiwrQkFDcEN0Qix5QkFBMEJ6L0UsS0FBSzYvRSwwQkFDL0JqRSw4QkFBK0I1N0UsS0FBS204RSxpQ0FHdENuOEUsS0FBS3VnRixjQUFjNkUsY0FBY3BsRixLQUFLaWdGLFdBQVlrRixHQUlsRCxJQUFJa0MsRUFBY3JuRixLQUFLdTlCLFFBQVFud0IsSUFBSTBpRSxHQUVsQixNQUFmdVgsR0FBc0w3d0MsR0FBVSxHQUNsTSxJQUFJdTlCLEVBQWdCc1QsRUFBWXRULGNBRWhDLEdBQTZCLElBQXpCQSxFQUFjbjFFLE9BQWMsQ0FDOUIsSUFBSTBvRixFQUVBQyxFQUEyQixDQUM3QjF1QixPQUFRLEtBQ1JrYixjQUFlQSxFQUNmd1Esd0JBQXlCLEtBQ3pCQyxxQkFBc0IsS0FDdEJobUYsT0FBUW10RSxFQUFrQnZ0QyxTQUMxQnFtRCxTQUFvSixLQUF4RixRQUFqRDZDLEVBQXdCN21DLEVBQVMyNEIsa0JBQWtELElBQTFCa08sT0FBbUMsRUFBU0EsRUFBc0JyRSxXQUd4SWpqRixLQUFLdWdGLGNBQWM2RSxjQUFjcGxGLEtBQUtpZ0YsV0FBWXNILEdBR3BELE9BQU9wQyxHQU9UMXhDLEVBQU8yekMsdUJBQXlCLFNBQWdDL0QsRUFBT3hyQyxFQUFNNnRDLEVBQWFqbEMsR0FDeEYsSUFBSXF2QixFQUFXNFYsRUFBWTVWLFNBQ3ZCNXlFLEVBQU93b0YsRUFBWXhvRixLQUNuQiszQyxFQUFZeXdDLEVBQVl6d0MsVUFFeEIrL0IsRUFBUTkzRSxFQUFLZ3lFLFdBQVcsSUFDakIsTUFBVDhGLEdBQWdDLGdCQUFmQSxFQUFNdnpCLE9BQTJDLElBQWpCdXpCLEVBQU1odkIsU0FBd0p4UCxHQUFVLEdBRTNOLElBQUlneEMsRUFBd0J4bkYsS0FBS3luRixxQkFBcUJobkMsRUFBVXF2QixFQUFVa0YsRUFBTy8vQixFQUFXNEMsRUFBTTZ0QyxFQUFZN3RDLE1BQzFHazhCLEVBQWdCeVQsRUFBc0J6VCxjQUN0QzJULEVBQVNGLEVBQXNCRSxPQUMvQkMsRUFBWUgsRUFBc0JHLFVBQ2xDcjBDLEVBQVVrMEMsRUFBc0JsMEMsUUFDaEM2eEMsRUFBZXFDLEVBQXNCckMsYUFDckM3ZSxFQUFha2hCLEVBQXNCbGhCLFdBcUN2QyxHQWhDQXRtRSxLQUFLdWdGLGNBQWM2RSxjQUFjcGxGLEtBQUtpZ0YsV0FBWWtGLEdBQWMsU0FBVWpvQixHQUN4RSxJQUFJMHFCLEVBQXNCMXFCLEVBQU05dkQsSUFBSTBpRSxHQUVwQyxHQUEyQixNQUF2QjhYLEVBQUosQ0FLQSxJQUFJQyxFQUFlRCxFQUFvQjloQixpQkFBaUJRLEdBRXhELEdBQW9CLE1BQWhCdWhCLEdBS0FBLEVBQWFqcEYsU0FBVzAwQyxFQUFRMTBDLFNBQVVpcEYsRUFBYXhoQyxNQUFLLFNBQVV5aEMsRUFBYTl1RCxHQUNyRixPQUFPc2EsRUFBUXRhLE1BQVk4dUQsR0FBZUEsRUFBWWpqQixnQkFEeEQsQ0FVQSxJQUFJa2pCLEdBQVksRUFBSXBqQyxFQUE2QixTQUFHa2pDLEdBQ3BERSxFQUFVSixHQUFhenFCLEVBQU05dkQsSUFBSXM2RSxHQUNqQ0UsRUFBb0I1aEIsaUJBQWlCK2hCLEVBQVd6aEIsUUFLckIsSUFBekJ5TixFQUFjbjFFLE9BQWMsQ0FDOUIsSUFBSTJvRixFQUEyQixDQUM3QjF1QixPQUFRLEtBQ1JrYixjQUFlQSxFQUNmd1Esd0JBQXlCLEtBQ3pCQyxxQkFBc0IsS0FDdEJobUYsT0FBUW10RSxFQUFrQnZ0QyxTQUMxQnFtRCxTQUFTLEdBR1h6a0YsS0FBS3VnRixjQUFjNkUsY0FBY3BsRixLQUFLaWdGLFdBQVlzSCxHQUdwRCxPQUFPcEMsR0FHVDF4QyxFQUFPZzBDLHFCQUF1QixTQUE4QmhuQyxFQUFVcXZCLEVBQVVrRixFQUFPLy9CLEVBQVc0QyxFQUFNbXdDLEdBQ3RHLElBQUlDLEVBQWNDLEVBQXFCQyxFQUVuQzdsRSxFQUFPbStCLEVBQVNuK0IsS0FDRixpQkFBVEEsR0FBbUxrMEIsR0FBVSxHQUN0TSxJQUFJNHhDLEVBQStDLFFBQWhDSCxFQUFlalQsRUFBTTBILGFBQW9DLElBQWpCdUwsRUFBMEJBLEVBQWVqVCxFQUFNL3pFLEtBQ3RHcWxFLEVBQWFrSCxFQUFjd0gsRUFBTy8vQixHQUdsQ295QyxFQUFjcm5GLEtBQUt1OUIsUUFBUW53QixJQUFJMGlFLEdBRWxCLE1BQWZ1WCxHQUF1TDd3QyxHQUFVLEdBQ25NLElBQUlnd0MsRUFBZWEsRUFBWTVoQixPQUMzQnNPLEVBQWdCc1QsRUFBWXRULGNBSTVCemdDLEVBQVU2M0IsRUFBa0I0RyxtQkFBbUJ5VSxFQUFjbGdCLEdBQ3BELE1BQVhoekIsR0FBa01rRCxHQUFVLEdBRTlNLElBQUk2eEMsRUFBaUJ4d0MsRUFBS0EsRUFBS2o1QyxPQUFTLEdBQ3BDK29GLEVBQVlXLFNBQVNELEVBQWdCLElBQ3ZDVixJQUFjVSxHQUFrQlYsR0FBYSxHQUF1TG54QyxHQUFVLEdBQ2hQLElBQUlrN0IsRUFBMEQsUUFBOUN3VyxFQUFzQmxULEVBQU11VCxvQkFBa0QsSUFBeEJMLEVBQWlDQSxFQUFzQjVsRSxFQUFLbXNELEdBQzVHLGlCQUFiaUQsR0FBa0xsN0IsR0FBVSxHQUdyTSxJQUFJa3hDLEdBRXNELFFBQXhEUyxFQUFtQm5vRixLQUFLMnpFLFdBQVdyeEQsRUFBTW92RCxVQUE0QyxJQUFyQnlXLEVBQThCQSxFQUFtQjcwQyxHQUFXQSxFQUFRcTBDLEtBQ3RJdGpCLEVBQWlCeUwsRUFBVXhKLEVBQVlxaEIsR0FDbkIsaUJBQVhELEdBQW1MbHhDLEdBQVUsR0FFdE0sSUFBSStLLEVBQVdvckIsRUFBNEJxSSxFQUFPMFMsRUFBUXp5QyxHQUl0RHF4QyxFQUFtQm5iLEVBQWtCMEgsTUFBTTJULEdBQzNDanpDLEdBQVUsRUFBSW9SLEVBQTZCLFNBQUdyUixHQWlCbEQsT0FoQkFDLEVBQVFvMEMsR0FBYUQsRUFDckJ2YyxFQUFrQjhHLG1CQUFtQnFVLEVBQWtCaGdCLEVBQVkveUIsR0FFbkV2ekMsS0FBS3U5QixRQUFRcnhCLElBQUk0akUsRUFBVSxDQUN6QnJLLE9BQVE2Z0IsRUFDUnZTLGNBQWVBLElBV1YsQ0FDTEEsY0FBZUEsRUFDZjJULE9BQVFBLEVBQ1JDLFVBQVdBLEVBQ1hyMEMsUUFBU0EsRUFDVDZ4QyxhQWJpQmYsRUFBa0IzakMsRUFBVWMsRUFBVW13QixFQUFVLENBQ2pFN00sVUFBVzdrRSxLQUFLMnpFLFdBQ2hCOTdCLEtBQU0sR0FBR24xQyxRQUFPLEVBQUlpaUQsRUFBNkIsU0FBR3FqQyxHQUFvQixDQUFDSSxFQUFhL3BGLE9BQU9zcEYsS0FDN0ZoSSwrQkFBZ0MzL0UsS0FBSzhnRixnQ0FDckNsQiw4QkFBK0I1L0UsS0FBSytnRiwrQkFDcEN0Qix5QkFBMEJ6L0UsS0FBSzYvRSwwQkFDL0JqRSw4QkFBK0I1N0UsS0FBS204RSxpQ0FRcEM3VixXQUFZQSxJQUloQjd5QixFQUFPbXdDLHdCQUEwQixTQUFpQ0QsR0FDM0MsTUFBakJBLEdBQXlCQSxFQUFjL2tGLE9BQVMsR0FDbERvQixLQUFLbWdGLGtCQUFrQnRaLE9BQU83bUUsS0FBS2lnRixXQUFXN3FDLFFBQVMsSUFBSXh0QyxJQUFJKzdFLEtBSW5FbHdDLEVBQU9ndUMsMEJBQTRCLFdBQ2pDemhGLEtBQUttZ0Ysa0JBQWtCbnBDLFNBQVNoM0MsS0FBS2lnRixXQUFXN3FDLFVBRzNDK3BDLEVBemxDbUIsR0FvbkM1QixTQUFTaUYsRUFBa0IzakMsRUFBVWMsRUFBVW13QixFQUFVdmlFLEdBQ3ZELElBQUlxNUUsRUFFQWxtRSxFQUFPbStCLEVBQVNuK0IsS0FDaEJ1MkMsRUFBU3BZLEVBQVNvWSxPQUNsQnI2RCxFQUFTbXRFLEVBQWtCdnRDLFNBQzNCcW5DLEVBQVMwRixFQUFrQi9zQyxPQUFPbWpCLEVBQVM4SSxPQUFRcW5CLEdBQ3ZEbHpFLEVBQU8wTixJQUFJcTFDLEVBQVM4SSxPQUFRb2IsR0FDNUIsSUFBSTBmLEVBQWVqRyxFQUF3QnVKLFVBQVVqcUYsRUFBUStpRCxFQUFVai9CLEVBQU1uVCxHQUM3RSxPQUFPLEVBQUk4aEMsRUFBd0IsVUFBRyxFQUFJQSxFQUF3QixTQUFHLEdBQUlrMEMsR0FBZSxHQUFJLENBQzFGdHNCLE9BQVFBLEVBQ1I0ckIsU0FBb0osS0FBeEYsUUFBakQrRCxFQUF3Qi9uQyxFQUFTMjRCLGtCQUFrRCxJQUExQm9QLE9BQW1DLEVBQVNBLEVBQXNCdkYsWUFVMUksU0FBU29CLEVBQWtDcHVELEdBQ3pDLElBQUlzdUQsRUFBMEJ0dUQsRUFBUXN1RCx3QkFFUCxNQUEzQkEsR0FBc0UsSUFBbkNBLEVBQXdCM2xGLFFBQzRLNDNDLEdBQVUsR0FJdlBuM0MsRUFBT0MsUUFBVSxDQUNmdThDLFFBNXBDRixTQUFpQjhjLEdBQ2YsT0FBTyxJQUFJd21CLEVBQVN4bUIsTSw0QkMzQ3RCLElBRUkxbkIsRUFGeUIsRUFBUSxLQUVoQkQsQ0FBdUIsRUFBUSxPQUVoRHdGLEVBQVksRUFBUSxNQTBFeEJuM0MsRUFBT0MsUUFBVSxDQUNmMDRDLHFCQWxFRixTQUE4QnBDLEVBQVUyRixFQUFlbXRDLEdBQ3JELElBQUl6ekMsRUF3Q0osT0F2Q0FXLEVBQVMreUMsb0JBQW9COWpGLFNBQVEsU0FBVW82RSxHQUM3QyxJQUFJeUosRUFBa0IxcEYsZUFBZWlnRixFQUFXaCtFLE1BT2hELE9BRkFnMEMsRUFBWUEsSUFBYSxFQUFJaEUsRUFBd0IsU0FBRyxHQUFJeTNDLEdBRXBEekosRUFBV3g5QixNQUNqQixJQUFLLGdCQUNIeE0sRUFBVWdxQyxFQUFXaCtFLE1BQVFnK0UsRUFBVzl3RSxhQUN4QyxNQUVGLElBQUssZUFDSCxJQUFLb3RDLEVBQWN2OEMsZUFBZWlnRixFQUFXaCtFLE1BQU8sQ0FXbERnMEMsRUFBVWdxQyxFQUFXaCtFLFdBQVFxQyxFQUM3QixNQUtGMnhDLEVBQVVncUMsRUFBV2grRSxNQUFRczZDLEVBQWMwakMsRUFBV2grRSxNQUN0RCxNQUVGLFFBRTZLdTFDLEdBQVUsT0FHcEx2QixHQUFheXpDLEdBMEJwQi9aLHNCQWhCRixTQUErQng1QixFQUFXRixHQUN4QyxJQUFJMnpDLEVBQXFCLEdBVXpCLE9BVEF6ekMsRUFBVXd6QyxvQkFBb0I5akYsU0FBUSxTQUFVZ2tGLEdBQzlDLElBQUloN0UsRUFBUWc3RSxFQUFJMTZFLGFBRVcsTUFBdkI4bUMsRUFBVTR6QyxFQUFJNW5GLFFBQ2hCNE0sRUFBUW9uQyxFQUFVNHpDLEVBQUk1bkYsT0FHeEIybkYsRUFBbUJDLEVBQUk1bkYsTUFBUTRNLEtBRTFCKzZFLEssNEJDMUVULElBRUkzM0MsRUFGeUIsRUFBUSxLQUVoQkQsQ0FBdUIsRUFBUSxPQUVoRDgzQyxFQUFvQixFQUFRLE1BRTVCL2QsRUFBOEIsRUFBUSxNQUV0Q2xhLEVBQW9CLEVBQVEsTUFFNUIwYSxFQUFrQixFQUFRLE1BRTFCQyxFQUF3QixFQUFRLE1BRWhDdWQsRUFBb0IsRUFBUSxNQUU1QnBkLEVBQW9CLEVBQVEsTUFFNUJxZCxFQUFtQixFQUFRLE1BRTNCQyxFQUE2QixFQUFRLE1BRXJDQyxFQUFhLEVBQVEsTUFJckJqZSxHQUZZLEVBQVEsTUFFa0IsV0FDeEMsU0FBU0EsRUFBdUJ0UyxHQUM5QixJQUVJd3dCLEVBQWFDLEVBQXVCQyxFQUF1QkMsRUFBbUJDLEVBQXVCQyxFQUFtQkMsRUFBa0JDLEVBRjFJdDNDLEVBQVFweUMsS0FJWkEsS0FBSzJwRixXQUFhaHhCLEVBQU9neEIsV0FDekIzcEYsS0FBSzYvRSwyQkFBZ0UsSUFBcENsbkIsRUFBTzhtQix5QkFDeEMsSUFBSTlELEVBQWtCaGpCLEVBQU9nakIsZ0JBQ3pCZ0UsRUFBaUNobkIsRUFBT2duQiwrQkFDeENDLEVBQWdDam5CLEVBQU9pbkIsOEJBWTNDNS9FLEtBQUswa0QsTUFBdUMsUUFBOUJ5a0MsRUFBY3h3QixFQUFPdDdDLFdBQWlDLElBQWhCOHJFLEVBQXlCQSxFQUFjenBGLEVBQzNGTSxLQUFLNHBGLG9CQUErRSxRQUF4RFIsRUFBd0J6d0IsRUFBT2l4QiwyQkFBMkQsSUFBMUJSLEVBQW1DQSxFQUF3QkgsRUFDdkpqcEYsS0FBSzZwRixzQkFBMEYsUUFBakVSLEVBQXdCMXdCLEVBQU9teEIsb0NBQW9FLElBQTFCVCxFQUFtQ0EsR0FBK0UsSUFBdkR4NEIsRUFBa0JrNUIsa0NBQTZDLFVBQVksT0FDN08vcEYsS0FBSys3RSxpQkFBbUJKLEVBQ3hCMzdFLEtBQUtrZ0YscUJBQXVCLElBQUlwbkUsSUFDaEM5WSxLQUFLZ3FGLFNBQVdocUYsS0FBS2lxRiw2QkFBNkJ0eEIsRUFBT3V4QixTQUN6RGxxRixLQUFLMnpFLFdBQXdELFFBQTFDMlYsRUFBb0Izd0IsRUFBT2tNLGlCQUE2QyxJQUF0QnlrQixFQUErQkEsRUFBb0JOLEVBQ3hIaHBGLEtBQUt1Z0YsY0FBZ0IsSUFBSXdJLEVBQWtCcHdCLEVBQU91RSxNQUE0RCxRQUFwRHFzQixFQUF3QjV3QixFQUFPNGEsdUJBQXVELElBQTFCZ1csRUFBbUNBLEVBQXdCeGUsRUFBNkIvcUUsS0FBSzJ6RSxZQUNuTjN6RSxLQUFLd2dGLFdBQXdELFFBQTFDZ0osRUFBb0I3d0IsRUFBTzRtQixpQkFBNkMsSUFBdEJpSyxFQUErQkEsRUFBb0IsS0FDeEh4cEYsS0FBSzBnRixPQUFTL25CLEVBQU91RSxNQUNyQmw5RCxLQUFLbVAsUUFBVXdwRCxFQUFPeHBELFFBQ3RCblAsS0FBS21xRixVQUFxRCxRQUF4Q1YsRUFBbUI5d0IsRUFBT3JOLGdCQUEyQyxJQUFyQm0rQixHQUE4QkEsRUFFaEd6cEYsS0FBS29xRixTQUFXLFNBQVVDLEdBQ3hCLE9BQU9qNEMsRUFBTTQzQyxTQUFXNTNDLEVBQU02M0MsNkJBQTZCSSxJQWM3RCxJQUFJQyxPQUE0QixJQUFYLEVBQUE1aEYsRUFBeUIsRUFBQUEsRUFBMkIsb0JBQVhSLE9BQXlCQSxZQUFTNUUsRUFFNUZpbkYsRUFBZUQsR0FBV0EsRUFBUUUsd0JBRWxDRCxHQUNGQSxFQUFhRSxvQkFBb0J6cUYsTUFHbkNBLEtBQUswcUYsc0JBQXdCL3hCLEVBQU9neUIscUJBQ3BDM3FGLEtBQUttZ0Ysa0JBQTBFLFFBQXJEdUosRUFBd0Ivd0IsRUFBTzZtQix3QkFBd0QsSUFBMUJrSyxFQUFtQ0EsRUFBd0IsSUFBSWxlLEVBQ3RKeHJFLEtBQUs4Z0YsZ0NBQWtDbkIsRUFDdkMzL0UsS0FBSytnRiwrQkFBaUNuQixFQUN0QzUvRSxLQUFLbThFLCtCQUFpQ3hqQixFQUFPaWpCLDhCQUcvQyxJQUFJbm9DLEVBQVN3M0IsRUFBdUJodEUsVUF5V3BDLE9BdldBdzFDLEVBQU8wcEIsU0FBVyxXQUNoQixPQUFPbjlELEtBQUswZ0YsUUFHZGp0QyxFQUFPNmUsV0FBYSxXQUNsQixPQUFPdHlELEtBQUtncUYsVUFHZHYyQyxFQUFPMlUsb0JBQXNCLFdBQzNCLE9BQU9wb0QsS0FBS21nRixtQkFHZDFzQyxFQUFPcW5DLGdCQUFrQixTQUF5QjhQLEdBR2hELE1BQXVCLFdBRkw1cUYsS0FBS2tnRixxQkFBcUI5eUUsSUFBSXc5RSxJQUtsRG4zQyxFQUFPc1csZ0NBQWtDLFdBQ3ZDLE9BQU8vcEQsS0FBSzZwRixzQkFHZHAyQyxFQUFPaXhDLFlBQWMsU0FBcUJtRyxHQUN4QyxJQUFJeHZDLEVBQVNyN0MsS0FnQmIsT0FOQUEsS0FBSzhxRixrQkFBaUIsV0FDcEJ6dkMsRUFBT2tsQyxjQUFjbUUsWUFBWW1HLEdBRWpDeHZDLEVBQU9rbEMsY0FBY2lCLFNBR2hCLENBQ0w1dEMsUUFmWSxXQUNaeUgsRUFBT3l2QyxrQkFBaUIsV0FDdEJ6dkMsRUFBT2tsQyxjQUFjZ0IsYUFBYXNKLEdBRWxDeHZDLEVBQU9rbEMsY0FBY2lCLFlBZTNCL3RDLEVBQU84dEMsYUFBZSxTQUFzQjFhLEdBQzFDLElBQUlwb0IsRUFBU3orQyxLQUViQSxLQUFLOHFGLGtCQUFpQixXQUNwQnJzQyxFQUFPOGhDLGNBQWNnQixhQUFhMWEsR0FFbENwb0IsRUFBTzhoQyxjQUFjaUIsVUFJekIvdEMsRUFBT3MzQyxjQUFnQixTQUF1QmxrQixFQUFRbWtCLEdBQ3BELElBQUkvaUMsRUFBU2pvRCxLQUViQSxLQUFLOHFGLGtCQUFpQixXQUNwQjdpQyxFQUFPczRCLGNBQWNnQixhQUFhMWEsR0FFbEM1ZSxFQUFPczRCLGNBQWNtRSxZQUFZc0csR0FFakMvaUMsRUFBT3M0QixjQUFjaUIsVUFJekIvdEMsRUFBTzRoQyxjQUFnQixTQUF1QmdLLEdBQzVDLElBQUlub0MsRUFBZWwzQyxLQUFLaXJGLFNBQVMsQ0FDL0JDLGFBQWMsV0FDWixPQUFPM2YsRUFBZ0JudEMsUUFBTyxTQUFVcTBDLFFBRTFDaU4saUJBQWlCLEVBQ2pCdnFDLFVBQVdrcUMsRUFBaUJscUMsVUFDNUJrcUMsaUJBQWtCQSxFQUNsQnhuRCxRQUFTLE9BQ1JnRyxVQUFVLElBRWIsTUFBTyxDQUNMK1YsUUFBUyxXQUNQLE9BQU9zRCxFQUFhRCxpQkFLMUJ4RCxFQUFPZ0MsTUFBUSxTQUFlTixHQUM1QixPQUFrQyxNQUE5Qm4xQyxLQUFLMHFGLHVCQUF1RSxJQUF0QzFxRixLQUFLMHFGLHNCQUFzQjlyRixPQUM1RG9CLEtBQUswZ0YsT0FBT2pyQyxNQUFNTixHQUdwQm4xQyxLQUFLbXJGLHFDQUFxQ2gyQyxFQUFXbjFDLEtBQUswcUYsd0JBR25FajNDLEVBQU8yeEMsY0FBZ0IsU0FBdUJqd0MsRUFBV2xmLEdBQ3ZEajJCLEtBQUtpckYsU0FBUyxDQUNaQyxhQUFjLFdBQ1osT0FBTzNmLEVBQWdCcm1FLEtBQUssQ0FDMUJvZCxLQUFNMlQsS0FHVnlwRCxpQkFBaUIsRUFDakJ2cUMsVUFBV0EsRUFDWGtxQyxpQkFBa0IsS0FDbEJ4bkQsUUFBUyxPQUNSZ0csVUFBVSxLQUdmNFYsRUFBTzZoQyxhQUFlLFNBQXNCejlDLEdBQzFDLElBQUlzd0IsRUFBU25vRCxLQUViQSxLQUFLOHFGLGtCQUFpQixXQUNwQjNpQyxFQUFPbzRCLGNBQWNqTCxhQUFhejlDLEdBRWxDc3dCLEVBQU9vNEIsY0FBY2lCLFVBSXpCL3RDLEVBQU9rQyxPQUFTLFNBQWdCKytCLEdBQzlCLE9BQU8xMEUsS0FBSzBnRixPQUFPL3FDLE9BQU8rK0IsSUFHNUJqaEMsRUFBTzVWLFVBQVksU0FBbUIyWCxFQUFVdGYsR0FDOUMsT0FBT2wyQixLQUFLMGdGLE9BQU83aUQsVUFBVTJYLEVBQVV0ZixJQUd6Q3VkLEVBQU9xQyxPQUFTLFNBQWdCWCxHQUM5QixPQUFPbjFDLEtBQUswZ0YsT0FBTzVxQyxPQUFPWCxJQUc1QjFCLEVBQU82WCxTQUFXLFdBQ2hCLE9BQU90ckQsS0FBS21xRixXQUdkMTJDLEVBQU8wM0MscUNBQXVDLFNBQThDaDJDLEVBQVd1bUMsR0FDckcsSUFBSXpELEVBQVNqNEUsS0FFVGlGLEVBQVMwbUUsRUFBa0J2dEMsU0FFM0I3K0IsRUFBU1MsS0FBSzBnRixPQUFPanJDLE1BQU1OLEVBQVcsQ0FDeENsd0MsT0FBUUEsRUFDUnkyRSxTQUFVQSxJQVdaLE9BUkl6MkUsRUFBT25HLE9BQVMsR0FDbEJrQixLQUFLOHFGLGtCQUFpQixXQUNwQjdTLEVBQU9zSSxjQUFjNkssYUFBYW5tRixHQUVsQ2d6RSxFQUFPc0ksY0FBY2lCLFNBSWxCamlGLEdBR1RrMEMsRUFBT3EzQyxpQkFBbUIsU0FBMEJoSixHQUNsRCxJQUFJdkMsRUFBWXYvRSxLQUFLd2dGLFdBRUosTUFBYmpCLEVBQ0ZBLEVBQVUwQyxTQUFTSCxHQUVuQkEsS0FhSnJ1QyxFQUFPb0ksUUFBVSxTQUFpQm1CLEdBQ2hDLElBQUltN0IsRUFBU240RSxLQUVUbTFDLEVBQVk2SCxFQUFLN0gsVUFDakJ0ZCxFQUFVbWxCLEVBQUtubEIsUUFDbkIsT0FBTzczQixLQUFLaXJGLFNBQVMsQ0FDbkJDLGFBQWMsV0FDWixPQUFPL1MsRUFBTzZSLFNBQVNudUMsUUFBUTFHLEVBQVVDLFFBQVFsNEMsS0FBS2tpRCxPQUFRakssRUFBVUMsUUFBUUgsVUFBV0UsRUFBVUMsUUFBUXNHLGFBQWUsR0FBSSxPQUVsSWdrQyxpQkFBaUIsRUFDakJ2cUMsVUFBV0EsRUFDWGtxQyxpQkFBa0IsS0FDbEJ4bkQsUUFBU0EsS0FlYjRiLEVBQU9naUMsZ0JBQWtCLFNBQXlCajNCLEdBQ2hELElBT0k2Z0MsRUFQQTlHLEVBQVN2NEUsS0FFVG0xQyxFQUFZcUosRUFBTXJKLFVBQ2xCaWdDLEVBQXFCNTJCLEVBQU00MkIsbUJBQzNCL0YsRUFBb0I3d0IsRUFBTTZ3QixrQkFDMUJ4M0MsRUFBVTJtQixFQUFNM21CLFFBQ2hCMDlDLEVBQWMvMkIsRUFBTSsyQixZQVd4QixPQVJJSCxHQUFzQi9GLEtBQ3hCZ1EsRUFBbUIsQ0FDakJscUMsVUFBV0EsRUFDWHNMLFNBQVUyMEIsRUFDVnY5QyxRQUFTdzNDLElBSU5ydkUsS0FBS2lyRixTQUFTLENBQ25CQyxhQUFjLFdBQ1osT0FBTzNTLEVBQU95UixTQUFTbnVDLFFBQVExRyxFQUFVQyxRQUFRbDRDLEtBQUtraUQsT0FBUWpLLEVBQVVDLFFBQVFILFdBQVcsRUFBSWhFLEVBQXdCLFVBQUcsRUFBSUEsRUFBd0IsU0FBRyxHQUFJa0UsRUFBVUMsUUFBUXNHLGFBQWMsR0FBSSxDQUMvTHpDLE9BQU8sSUFDTHM4QixJQUVObUssaUJBQWlCLEVBQ2pCdnFDLFVBQVdBLEVBQ1hrcUMsaUJBQWtCQSxFQUNsQnhuRCxRQUFTQSxLQWNiNGIsRUFBT29lLGtCQUFvQixTQUEyQnc1QixHQUNwRCxJQUFJbDJDLEVBQVlrMkMsRUFBTWwyQyxVQUNsQjMyQyxFQUFTNnNGLEVBQU03c0YsT0FDbkIsT0FBT3dCLEtBQUtpckYsU0FBUyxDQUNuQkMsYUFBYyxXQUNaLE9BQU8xc0YsR0FFVGtoRixpQkFBaUIsRUFDakJ2cUMsVUFBV0EsRUFDWGtxQyxpQkFBa0IsS0FDbEJ4bkQsUUFBUyxRQUliNGIsRUFBTzYzQyxPQUFTLFdBQ2QsSUFBSUMsRUFFSixNQUFPLDBCQUEwQjdvRixPQUFnRCxRQUF4QzZvRixFQUFtQnZyRixLQUFLMnBGLGtCQUE2QyxJQUFyQjRCLEVBQThCQSxFQUFtQixHQUFJLE1BR2hKOTNDLEVBQU93M0MsU0FBVyxTQUFrQk8sR0FDbEMsSUFBSTlTLEVBQVMxNEUsS0FFVGtyRixFQUFlTSxFQUFNTixhQUNyQnhMLEVBQWtCOEwsRUFBTTlMLGdCQUN4QnZxQyxFQUFZcTJDLEVBQU1yMkMsVUFDbEJrcUMsRUFBbUJtTSxFQUFNbk0saUJBQ3pCeG5ELEVBQVUyekQsRUFBTTN6RCxRQUNwQixPQUFPMHpDLEVBQWdCbnRDLFFBQU8sU0FBVWdiLEdBQ3RDLElBQUlxeUMsRUFBVzNDLEVBQWtCanRDLFFBQVEsQ0FDdkNncEIsVUFBVzZULEVBQU8vRSxXQUNsQitMLGdCQUFpQkEsRUFDakJ2cUMsVUFBV0EsRUFDWGlxQyxvQkFBcUIxRyxFQUFPd0gscUJBQzVCdkUsZ0JBQWlCakQsRUFBT3FELGlCQUN4QnlELGlCQUFrQjlHLEVBQU95SCxrQkFDekJkLGlCQUFrQkEsRUFDbEJDLGFBQWM1RyxFQUFPNkgsY0FDckJaLCtCQUFnQ2pILEVBQU9vSSxnQ0FDdkNsQiw4QkFBK0JsSCxFQUFPcUksK0JBQ3RDeEIsVUFBVzdHLEVBQU84SCxXQUNsQjVFLDhCQUErQmxELEVBQU95RCwrQkFDdEMvaUMsS0FBTUEsRUFHTjU2QyxPQUFRMHNGLElBQ1JodUIsTUFBT3diLEVBQU9nSSxPQUNkakIseUJBQTBCL0csRUFBT21ILDBCQUNqQ2hvRCxRQUFTQSxJQUVYLE9BQU8sV0FDTCxPQUFPNHpELEVBQVNwSyxjQVd0QjV0QyxFQUFPdzJDLDZCQUErQixTQUFzQ0MsR0FDMUUsSUFBSXdCLEVBQU8xckYsS0FDWCxNQUFPLENBQ0w2N0MsUUFBUyxTQUFpQnVELEVBQVFuSyxFQUFXeUcsRUFBYTY1QixHQUN4RCxJQUFJb1csRUFBZ0J6QyxJQUNoQjdyRSxFQUFNcXVFLEVBQUtobkMsTUFDWGtuQyxFQUFjLENBQ2hCei9ELE1BQU8sU0FBZStxQixHQUNwQjc1QixFQUFJLENBQ0ZwYyxLQUFNLGdCQUNOMHFGLGNBQWVBLEVBQ2Z2c0MsT0FBUUEsRUFDUm5LLFVBQVdBLEVBQ1h5RyxZQUFhQSxLQUdqQnhtQixLQUFNLFNBQWN1ckIsR0FDbEJwakMsRUFBSSxDQUNGcGMsS0FBTSxlQUNOMHFGLGNBQWVBLEVBQ2ZsckMsU0FBVUEsS0FHZHA5QyxNQUFPLFNBQWVvNkMsR0FDcEJwZ0MsRUFBSSxDQUNGcGMsS0FBTSxnQkFDTjBxRixjQUFlQSxFQUNmdG9GLE1BQU9vNkMsS0FHWHpHLFNBQVUsV0FDUjM1QixFQUFJLENBQ0ZwYyxLQUFNLG1CQUNOMHFGLGNBQWVBLEtBR25CMTBDLFlBQWEsV0FDWDU1QixFQUFJLENBQ0ZwYyxLQUFNLHNCQUNOMHFGLGNBQWVBLE1BYXJCLE9BQU96QixFQUFRcnVDLFFBQVF1RCxFQUFRbkssRUFBV3lHLEVBQWE2NUIsR0FSbEMsU0FBd0JyRixHQUMzQzd5RCxFQUFJLENBQ0ZwYyxLQUFNLGVBQ04wcUYsY0FBZUEsRUFDZnpiLEtBQU1BLE9BSThFLEdBQUUwYixNQUt6RjNnQixFQTFhaUMsSUFrYjFDLFNBQVN2ckUsS0FGVHVyRSxFQUF1Qmh0RSxVQUFVLDZCQUE4QixFQUkvRG9CLEVBQU9DLFFBQVUyckUsRyw0QkMvY2pCLElBQUlqNkIsRUFBeUIsRUFBUSxNQUVqQ0MsRUFBaUJELEVBQXVCLEVBQVEsT0FFaERLLEVBQW1CTCxFQUF1QixFQUFRLE9BRWxENmYsRUFBb0IsRUFBUSxNQUU1QnZmLEVBQVcsRUFBUSxNQUVuQmtGLEVBQVksRUFBUSxNQUVwQjVFLEVBQW1CLEVBQVEsTUFFM0JxVCxFQUE4QixFQUFRLE1BS3RDSixHQUhVLEVBQVEsTUFFUCxFQUFRLE1BQ21CQSw0QkFHdENnb0IsRUFEWSxFQUFRLE1BQ2dCQSx3QkFFcENwN0IsRUFBWSxFQUFRLE1BQ3BCaTdCLEVBQW9CajdCLEVBQVVpN0Isa0JBQzlCRSxFQUF1Qm43QixFQUFVbTdCLHFCQUNqQ1UsRUFBeUI3N0IsRUFBVTY3Qix1QkFxQm5DdWUsRUFBK0MsV0FDakQsU0FBU0EsRUFBZ0M3MkQsRUFBUzhjLEVBQVdwc0MsRUFBT3d3QixFQUFVNmMsR0FDNUUsSUFBSVgsRUFBUXB5QyxNQUVaLEVBQUlxeEMsRUFBMEIsU0FBR3J4QyxLQUFNLGFBQWEsV0FDbERveUMsRUFBTTA1QyxRQUFTLEVBRWdCLG1CQUFwQjE1QyxFQUFNMjVDLFdBQ2YzNUMsRUFBTTI1QyxlQUdWL3JGLEtBQUsrckYsVUFBWTcxRCxFQUNqQmwyQixLQUFLNE0sU0FBV29vQixFQUNoQmgxQixLQUFLZ3NGLE1BQVEsR0FDYmhzRixLQUFLaXNGLFdBQWFuNkMsRUFDbEI5eEMsS0FBS2tzRixPQUFTLEdBQ2Rsc0YsS0FBS21zRixXQUFhLEdBQ2xCbnNGLEtBQUs4ckYsUUFBUyxFQUNkOXJGLEtBQUtvc0YscUJBQXVCcjVDLEVBQzVCL3lDLEtBQUt3ekMsU0FBUzl0QyxHQUdoQixJQUFJK3RDLEVBQVNvNEMsRUFBZ0M1dEYsVUEwRzdDLE9BeEdBdzFDLEVBQU9HLFFBQVUsV0FDZixJQUFLLElBQUlFLEtBQVE5ekMsS0FBS21zRixXQUNoQm5zRixLQUFLbXNGLFdBQVdudEYsZUFBZTgwQyxJQUNqQ3U0QyxFQUFnQnJzRixLQUFLbXNGLFdBQVdyNEMsS0FLdENMLEVBQU9oQixRQUFVLFdBQ2YsR0FBSXp5QyxLQUFLOHJGLE9BQVEsQ0FHZixJQUNJNXZDLEVBREFGLEVBQVdoOEMsS0FBS2dzRixNQUdwQixJQUFLLElBQUlNLEtBQVN0c0YsS0FBS21zRixXQUNyQixHQUFJbnNGLEtBQUttc0YsV0FBV250RixlQUFlc3RGLEdBQVEsQ0FDekMsSUFBSWg2QyxFQUFXdHlDLEtBQUttc0YsV0FBV0csR0FDM0JDLEVBQVd2d0MsRUFBU3N3QyxHQUV4QixHQUFJaDZDLEVBQVUsQ0FDWixJQUFJazZDLEVBQVdsNkMsRUFBU0csV0FFcEJ5SixHQUFZc3dDLElBQWFELE1BQzNCcndDLEVBQVdBLElBQVksRUFBSWpMLEVBQXdCLFNBQUcsR0FBSStLLElBQ2pEc3dDLEdBQVNFLE9BRWYsQ0FDTCxJQUFJQyxFQUFPenNGLEtBQUtrc0YsT0FBT0ksR0FFbkJJLE9BQXFCcHBGLElBQVRtcEYsRUFBcUJBLEVBQU8sTUFFeEN2d0MsR0FBYXRLLEVBQWlCODZDLEVBQVdILE1BQzNDcndDLEVBQVdBLElBQVksRUFBSWpMLEVBQXdCLFNBQUcsR0FBSStLLElBQ2pEc3dDLEdBQVNJLElBTTFCMXNGLEtBQUtnc0YsTUFBUTl2QyxHQUFZRixFQUN6Qmg4QyxLQUFLOHJGLFFBQVMsRUFHaEIsT0FBTzlyRixLQUFLZ3NGLE9BR2R2NEMsRUFBT1EsWUFBYyxTQUFxQi9kLEdBQ3hDbDJCLEtBQUsrckYsVUFBWTcxRCxHQUduQnVkLEVBQU9ELFNBQVcsU0FBa0I5dEMsR0FDbEMsSUFBSWluRixFQUFpQnJmLEVBQXVCdHRFLEtBQUtpc0YsV0FBWXZtRixHQUc3RCxJQUFLLElBQUlrbkYsS0FGVDVzRixLQUFLa3NGLE9BQVMsR0FFSVMsRUFDaEIsR0FBSUEsRUFBZTN0RixlQUFlNHRGLEdBQVEsQ0FDeEMsSUFBSUMsRUFBZ0JGLEVBQWVDLEdBQy9CdDZDLEVBQVd0eUMsS0FBS21zRixXQUFXUyxHQUVWLE1BQWpCQyxHQUNjLE1BQVp2NkMsR0FDRkEsRUFBU3NCLFVBR1h0QixFQUFXLE1BQ3FCLHlCQUF2QnU2QyxFQUFjcHJDLEtBQ1AsTUFBWm5QLEVBQ0ZBLEVBQVcsSUFBSXc2QyxFQUFxQjlzRixLQUFLNE0sU0FBU2dtQyxZQUFhNXlDLEtBQUtvc0YscUJBQXNCUyxFQUFlN3NGLEtBQUsrc0YsWUFFNUd6NkMsYUFBb0J3NkMsR0FBd0t0MkMsR0FBVSxHQUN4TWxFLEVBQVMwNkMsWUFBWUgsSUFHUCxNQUFadjZDLEVBQ0ZBLEVBQVcsSUFBSTI2QyxFQUFpQmp0RixLQUFLNE0sU0FBU2dtQyxZQUFhNXlDLEtBQUtvc0YscUJBQXNCUyxFQUFlN3NGLEtBQUsrc0YsWUFFeEd6NkMsYUFBb0IyNkMsR0FBcUt6MkMsR0FBVSxHQUNyTWxFLEVBQVMwNkMsWUFBWUgsSUFJekI3c0YsS0FBS2tzRixPQUFPVSxHQUFTbG5GLEVBQU1rbkYsR0FDM0I1c0YsS0FBS21zRixXQUFXUyxHQUFTdDZDLEVBSTdCdHlDLEtBQUs4ckYsUUFBUyxHQUdoQnI0QyxFQUFPd0ksYUFBZSxTQUFzQmhILEVBQVdHLEdBQ3JELElBQUssSUFBSTgzQyxLQUFTbHRGLEtBQUttc0YsV0FDckIsR0FBSW5zRixLQUFLbXNGLFdBQVdudEYsZUFBZWt1RixHQUFRLENBQ3pDLElBQUk1NkMsRUFBV3R5QyxLQUFLbXNGLFdBQVdlLEdBRTNCNTZDLEdBQ0ZBLEVBQVMySixhQUFhaEgsRUFBV0csR0FLdkNwMUMsS0FBSzhyRixRQUFTLEdBR1RELEVBaEkwQyxHQXVJL0NvQixFQUFnQyxXQUNsQyxTQUFTQSxFQUFpQnI2QyxFQUFhRyxFQUFxQndPLEVBQVVyckIsR0FDcEUsSUFBSW1sQixFQUFTcjdDLE1BRWIsRUFBSXF4QyxFQUEwQixTQUFHcnhDLEtBQU0sYUFBYSxTQUFVdzFDLEdBQzVENkYsRUFBTzJ3QyxNQUFReDJDLEVBQVNsekIsS0FDeEIrNEIsRUFBTzh4QyxlQUFpQjMzQyxFQUFTOFEsY0FDakNqTCxFQUFPK3hDLHVCQUF5QjUzQyxFQUFTa1Isc0JBRXpDckwsRUFBTzB3QyxlQUdULElBQUlydUMsRUFBWTlLLEVBQVkrQyxPQUFPNEwsR0FFbkN2aEQsS0FBSytyRixVQUFZNzFELEVBQ2pCbDJCLEtBQUtnc0YsTUFBUXR1QyxFQUFVcDdCLEtBQ3ZCdGlCLEtBQUttdEYsZUFBaUJ6dkMsRUFBVTRJLGNBQ2hDdG1ELEtBQUtvdEYsdUJBQXlCMXZDLEVBQVVnSixzQkFDeEMxbUQsS0FBS3dsRCxhQUFlNVMsRUFDcEI1eUMsS0FBS29zRixxQkFBdUJyNUMsRUFDNUIveUMsS0FBS3F0RixVQUFZOXJDLEVBQ2pCdmhELEtBQUtzdEYsY0FBZ0IxNkMsRUFBWS9VLFVBQVU2ZixFQUFXMTlDLEtBQUsrc0YsV0FHN0QsSUFBSVEsRUFBVU4sRUFBaUJodkYsVUE4Ri9CLE9BNUZBc3ZGLEVBQVEzNUMsUUFBVSxXQUNaNXpDLEtBQUtzdEYsZ0JBQ1B0dEYsS0FBS3N0RixjQUFjMTVDLFVBRW5CNXpDLEtBQUtzdEYsY0FBZ0IsT0FJekJDLEVBQVE5NkMsUUFBVSxXQUNoQixJQUEyRCxJQUF2RG9lLEVBQWtCMjhCLG1DQUFxRSxJQUF4Qnh0RixLQUFLbXRGLGVBQXlCLENBQy9GLElBQUlqbEMsRUF1QkFLLEVBQTRHLFFBQWpHTCxFQUF3QnJELEVBQTJCN2tELEtBQUt3bEQsYUFBY3hsRCxLQUFLcXRGLFVBQVUxckMsY0FBOEMsSUFBMUJ1RyxFQUFtQ0EsRUFBd0Jsb0QsS0FBS3dsRCxhQUFhNEMsc0JBQXNCQyw2Q0FBNkNyb0QsS0FBS3F0RixVQUFVMXJDLE9BRXZSLEdBQWUsTUFBWDRHLElBQ0V2b0QsS0FBS29zRixxQkFJUCxNQUFNN2pDLEVBU1osT0FKbUMsTUFBL0J2b0QsS0FBS290Rix3QkFDUG5vQyxFQUE0QmpsRCxLQUFLd2xELGFBQWN4bEQsS0FBS290Rix3QkFHL0NwdEYsS0FBS2dzRixPQUdkdUIsRUFBUVAsWUFBYyxTQUFxQnpyQyxHQUN6QyxHQUEwQixNQUF0QnZoRCxLQUFLc3RGLGdCQUF5QjVnQixFQUFrQm5yQixFQUFVdmhELEtBQUtxdEYsV0FBbkUsQ0FJQXJ0RixLQUFLNHpDLFVBRUwsSUFBSTRCLEVBQVd4MUMsS0FBS3dsRCxhQUFhN1AsT0FBTzRMLEdBRXhDdmhELEtBQUtnc0YsTUFBUXgyQyxFQUFTbHpCLEtBQ3RCdGlCLEtBQUttdEYsZUFBaUIzM0MsRUFBUzhRLGNBQy9CdG1ELEtBQUtvdEYsdUJBQXlCNTNDLEVBQVNrUixzQkFDdkMxbUQsS0FBS3F0RixVQUFZOXJDLEVBQ2pCdmhELEtBQUtzdEYsY0FBZ0J0dEYsS0FBS3dsRCxhQUFhM25CLFVBQVUyWCxFQUFVeDFDLEtBQUsrc0YsYUFHbEVRLEVBQVF0eEMsYUFBZSxTQUFzQmhILEVBQVdHLEdBQ3RELElBQUk5RCxFQUFTMkQsRUFBV2oxQyxLQUFLcXRGLFVBQVVwNEMsV0FBdkMsQ0FrQkEsSUFBSXc0QyxFQUFvQjVnQixFQUF3QnozQixFQUFTSCxHQUNyRHNNLEVBQVdxckIsRUFBcUI1c0UsS0FBS3F0RixVQUFVbndGLEtBQU04QyxLQUFLcXRGLFVBQVVoakMsT0FBUXBWLEVBQVd3NEMsR0FDM0Z6dEYsS0FBS2d0RixZQUFZenJDLEtBR1owckMsRUF0SDJCLEdBNkhoQ0gsRUFBb0MsV0FDdEMsU0FBU0EsRUFBcUJsNkMsRUFBYUcsRUFBcUJ3TyxFQUFVcnJCLEdBQ3hFLElBQUl1b0IsRUFBU3orQyxNQUViLEVBQUlxeEMsRUFBMEIsU0FBR3J4QyxLQUFNLGFBQWEsU0FBVXNpQixHQUM1RG04QixFQUFPcXRDLFFBQVMsRUFFaEJydEMsRUFBT3N0QyxlQUVUL3JGLEtBQUsrckYsVUFBWTcxRCxFQUNqQmwyQixLQUFLZ3NGLE1BQVEsR0FDYmhzRixLQUFLd2xELGFBQWU1UyxFQUNwQjV5QyxLQUFLbXNGLFdBQWEsR0FDbEJuc0YsS0FBSzhyRixRQUFTLEVBQ2Q5ckYsS0FBS29zRixxQkFBdUJyNUMsRUFDNUIveUMsS0FBS2d0RixZQUFZenJDLEdBR25CLElBQUltc0MsRUFBVVosRUFBcUI3dUYsVUErRG5DLE9BN0RBeXZGLEVBQVE5NUMsUUFBVSxXQUNoQjV6QyxLQUFLbXNGLFdBQVd0bkYsUUFBUXduRixJQUcxQnFCLEVBQVFqN0MsUUFBVSxXQUNoQixHQUFJenlDLEtBQUs4ckYsT0FBUSxDQU1mLElBSEEsSUFDSTV2QyxFQURBRixFQUFXaDhDLEtBQUtnc0YsTUFHWHhyRCxFQUFLLEVBQUdBLEVBQUt4Z0MsS0FBS21zRixXQUFXdnRGLE9BQVE0aEMsSUFBTSxDQUNsRCxJQUFJK3JELEVBQVd2d0MsRUFBU3hiLEdBRXBCZ3NELEVBQVd4c0YsS0FBS21zRixXQUFXM3JELEdBQUlpUyxXQUUvQnlKLEdBQVlzd0MsSUFBYUQsS0FDM0Jyd0MsRUFBV0EsR0FBWUYsRUFBU3h5QyxNQUFNLEVBQUdnM0IsSUFDaEMzaEMsS0FBSzJ0RixHQUlidHdDLEdBQVlsOEMsS0FBS21zRixXQUFXdnRGLFNBQVdvOUMsRUFBU3A5QyxTQUNuRHM5QyxFQUFXRixFQUFTeHlDLE1BQU0sRUFBR3hKLEtBQUttc0YsV0FBV3Z0RixTQUcvQ29CLEtBQUtnc0YsTUFBUTl2QyxHQUFZRixFQUN6Qmg4QyxLQUFLOHJGLFFBQVMsRUFHaEIsT0FBTzlyRixLQUFLZ3NGLE9BR2QwQixFQUFRVixZQUFjLFNBQXFCenJDLEdBR3pDLElBRkEsSUFBSUcsRUFBWUgsRUFBU0csVUFFbEIxaEQsS0FBS21zRixXQUFXdnRGLE9BQVM4aUQsRUFBVTlpRCxRQUN6Qm9CLEtBQUttc0YsV0FBVy9zRixNQUV0QncwQyxVQUdYLElBQUssSUFBSXBULEVBQUssRUFBR0EsRUFBS2toQixFQUFVOWlELE9BQVE0aEMsSUFDbENBLEVBQUt4Z0MsS0FBS21zRixXQUFXdnRGLE9BQ3ZCb0IsS0FBS21zRixXQUFXM3JELEdBQUl3c0QsWUFBWXRyQyxFQUFVbGhCLElBRTFDeGdDLEtBQUttc0YsV0FBVzNyRCxHQUFNLElBQUl5c0QsRUFBaUJqdEYsS0FBS3dsRCxhQUFjeGxELEtBQUtvc0YscUJBQXNCMXFDLEVBQVVsaEIsR0FBS3hnQyxLQUFLK3NGLFdBSWpIL3NGLEtBQUs4ckYsUUFBUyxHQUdoQjRCLEVBQVF6eEMsYUFBZSxTQUFzQmhILEVBQVdHLEdBQ3REcDFDLEtBQUttc0YsV0FBV3RuRixTQUFRLFNBQVV5dEMsR0FDaEMsT0FBT0EsRUFBUzJKLGFBQWFoSCxFQUFXRyxNQUcxQ3AxQyxLQUFLOHJGLFFBQVMsR0FHVGdCLEVBakYrQixHQW9GeEMsU0FBU1QsRUFBZ0Iza0MsR0FDdkJBLEdBQWNBLEVBQVc5VCxVQUczQnYwQyxFQUFPQyxRQUFVdXNGLEcsNEJDNVlBLEVBQVEsTUFBekIsSUFFSWo3QixFQUF1QixFQUFRLEtBRy9CK2QsRUFEVyxFQUFRLE1BQ2NBLHNCQUVqQ3ZiLEVBQVksRUFBUSxNQUNwQnVaLEVBQThCdlosRUFBVXVaLDRCQUN4Q0MsRUFBdUJ4WixFQUFVd1oscUJBR2pDMkIsRUFEWSxFQUFRLE1BQ0FBLFFBK0J4QixTQUFTMUIsRUFBd0J6M0IsRUFBU0gsRUFBV3lHLEdBY25ELE1BYndCLENBQ3RCdU8sV0FBWTJHLEVBQXFCeGIsRUFBUWdLLE9BQVFuSyxHQUNqRC8zQyxLQUFNazRDLEVBQ05ILFVBQVdBLEVBQ1h5RyxZQUFhQSxHQVlqQnI4QyxFQUFPQyxRQUFVLENBQ2ZxMUMsMEJBekNGLFNBQW1DUyxFQUFTSCxFQUFXeUcsR0FDckQsSUFBSTJPLEVBQVNqcEQsVUFBVXhDLE9BQVMsUUFBc0IwRSxJQUFqQmxDLFVBQVUsR0FBbUJBLFVBQVUsR0FBS210RSxFQUM3RXA1QixFQUFZQyxFQUFRRCxVQUNwQnl6QyxFQUFxQmphLEVBQXNCeDVCLEVBQVdGLEdBQ3REdzRDLEVBQW9CNWdCLEVBQXdCejNCLEVBQVN3ekMsRUFBb0JsdEMsR0FDekVpeUMsRUFBc0IsQ0FDeEIvM0MsU0FBVWczQixFQUFxQngzQixFQUFRUSxTQUFVeVUsRUFBUXUrQixFQUFvQjZFLEdBQzdFcjRDLFFBQVNxNEMsRUFDVHQrQixLQUFNd2QsRUFBNEJ4M0IsRUFBV2tWLEVBQVF1K0IsSUFZdkQsT0FBTytFLEdBc0JQOWdCLHdCQUF5QkEsSSw0QkM5RDNCLElBRUk1N0IsRUFGeUIsRUFBUSxLQUVoQkQsQ0FBdUIsRUFBUSxPQUVoRE0sRUFBVyxFQUFRLE1BRW5CdUQsRUFBYSxFQUFRLE1BRXJCMkIsRUFBWSxFQUFRLE1BT3BCNGMsR0FMVSxFQUFRLE1BRVAsRUFBUSxNQUNHK1ksV0FFVixFQUFRLE9BQ3BCaUMsRUFBU2hiLEVBQVVnYixPQUNuQkMsRUFBVWpiLEVBQVVpYixRQUNwQkMsRUFBV2xiLEVBQVVrYixTQUNyQkcsRUFBZXJiLEVBQVVxYixhQUN6Qm1mLEVBQXFCeDZCLEVBQVV3NkIsbUJBQ3JCeDZCLEVBQVVtYixRQWtUeEJsdkUsRUFBT0MsUUFBVSxDQUNmdXpFLE1BaFFGLFNBQWVwTixHQUNiLE9BQU8sRUFBSXgwQixFQUF3QixTQUFHLEdBQUl3MEIsSUFnUTFDMkwsV0FsUEYsU0FBb0I1eUUsRUFBUTQ2QyxHQUMxQixJQUFLLElBQUl2MkMsS0FBT3JFLEVBQ1ZBLEVBQU9RLGVBQWU2RCxJQUNwQkEsSUFBUXVyRSxHQUFVdnJFLElBQVE0ckUsSUFDNUJyMUIsRUFBS3YyQyxHQUFPckUsRUFBT3FFLEtBK096QnU3QixPQW5PRixTQUFnQmlzQixFQUFRcW5CLEdBRXRCLElBQUlqTSxFQUFTLEdBR2IsT0FGQUEsRUFBTzJJLEdBQVUvakIsRUFDakJvYixFQUFPZ0osR0FBZ0JpRCxFQUNoQmpNLEdBK05QcmdCLE9BM0RGLFNBQWdCcWdCLEdBQ2Q1d0IsRUFBVzR3QixJQTJEWFosVUF2TkYsU0FBbUJZLEdBQ2pCLE9BQU9BLEVBQU8ySSxJQXVOZDhPLHFCQTlJRixTQUE4QnpYLEdBQzVCLEdBQWMsTUFBVkEsRUFDRixPQUFPLEtBR1QsSUFBSXdYLEVBQWdCeFgsRUFBT21vQixHQUUzQixNQUE2QixpQkFBbEIzUSxFQUVGLEtBR0ZBLEdBbUlQMUwsa0JBcExGLFNBQTJCOUwsRUFBUWEsR0FDakMsSUFBSTN4RCxFQUFPOHdELEVBQU9hLEdBRWxCLE9BQVksTUFBUjN4RCxFQUNLQSxHQUdTLGlCQUFUQSxHQUFxQkEsR0FBaUMsaUJBQWxCQSxFQUFLMDVELElBQW1PNzNCLEdBQVUsR0FDeFI3aEMsRUFBSzA1RCxLQTZLWjBELG1CQW5LRixTQUE0QnRNLEVBQVFhLEdBQ2xDLElBQUl1bkIsRUFBUXBvQixFQUFPYSxHQUVuQixPQUFhLE1BQVR1bkIsRUFDS0EsR0FHVSxpQkFBVkEsR0FBc0JqcUYsTUFBTUMsUUFBUWdxRixFQUFNdmYsS0FBME85M0IsR0FBVSxHQUVoU3EzQyxFQUFNdmYsS0EySmJ2SixRQWpORixTQUFpQlUsR0FDZixPQUFPQSxFQUFPZ0osSUFpTmRsaEUsU0F4TUYsU0FBa0JrNEQsRUFBUWEsR0FDeEIsSUFBSXo0RCxFQUFRNDNELEVBQU9hLEdBTW5CLE9BSkl6NEQsR0FBMEIsaUJBQVZBLElBQ2ZBLEVBQU03TyxlQUFlcXZFLElBQWF4Z0UsRUFBTTdPLGVBQWVzdkUsS0FBb1I5M0IsR0FBVSxHQUduVjNvQyxHQWtNUGlnRixNQXpGRixTQUFlQyxFQUFTQyxHQWF0QixPQUFPaHdGLE9BQU9vRyxPQUFPLEdBQUkycEYsRUFBU0MsSUE2RWxDeGdGLFNBekRGLFNBQWtCaTRELEVBQVFhLEVBQVl6NEQsR0FnQnBDNDNELEVBQU9hLEdBQWN6NEQsR0EwQ3JCMmpFLGtCQWpDRixTQUEyQi9MLEVBQVFhLEVBQVlnTCxHQUU3QyxJQUFJMzhELEVBQU8sR0FDWEEsRUFBSzA1RCxHQUFXaUQsRUFDaEI3TCxFQUFPYSxHQUFjM3hELEdBOEJyQnM5RCxtQkFyQkYsU0FBNEJ4TSxFQUFRYSxFQUFZd0wsR0FFOUMsSUFBSStiLEVBQVEsR0FDWkEsRUFBTXZmLEdBQVl3RCxFQUNsQnJNLEVBQU9hLEdBQWN1bkIsR0FrQnJCaG5CLE9BaElGLFNBQWdCb25CLEVBQVlDLEdBZ0IxQixJQWYyQyxJQVl2Q0MsRUFBVSxLQUNWanZGLEVBQU9sQixPQUFPa0IsS0FBS2d2RixHQUVkMXRELEVBQUssRUFBR0EsRUFBS3RoQyxFQUFLTixPQUFRNGhDLElBQU0sQ0FDdkMsSUFBSTM5QixFQUFNM0QsRUFBS3NoQyxJQUVYMnRELEdBQVk3OEMsRUFBUzI4QyxFQUFXcHJGLEdBQU1xckYsRUFBV3JyRixPQUNuRHNyRixFQUFzQixPQUFaQSxFQUFtQkEsR0FBVSxFQUFJbDlDLEVBQXdCLFNBQUcsR0FBSWc5QyxJQUNsRXByRixHQUFPcXJGLEVBQVdyckYsSUFJOUIsT0FBbUIsT0FBWnNyRixFQUFtQkEsRUFBVUYsSyw0QkMvT3RDLElBQUkzOEMsRUFBVyxFQUFRLE1BRW5Ca0YsRUFBWSxFQUFRLE1BS3BCd0IsR0FIVSxFQUFRLE1BRVAsRUFBUSxNQUNhQSxzQkFFaENvYixFQUFZLEVBQVEsTUFDcEIrYSxFQUFxQi9hLEVBQVUrYSxtQkFDL0JELEVBQWdCOWEsRUFBVThhLGNBQzFCRSxFQUFTaGIsRUFBVWdiLE9BQ25CZ2dCLEVBQXNDaDdCLEVBQVVnN0Isb0NBK0JwRCxTQUFTN2dCLEVBQW9CMzNCLEVBQVU4L0IsSUFDbkIsaUJBQVRBLEdBQThCLE9BQVRBLEdBQWtCOXhFLE1BQU1DLFFBQVE2eEUsS0FBa01sL0IsR0FBVSxHQUMxUSxJQUFJNlQsRUFBU3FyQixFQUFLdEgsR0FDZHQ4QixFQUFZNGpDLEVBQUt4SCxHQUNqQm1nQixFQUFhM1ksRUFBS3ZILEdBQ2xCbWdCLEdBQWdGLElBQTlDNVksRUFBSzBZLEdBRTNDLEdBQXNCLGlCQUFYL2pDLEdBQTRDLGlCQUFkdlksR0FBd0MsT0FBZEEsR0FBMEQsaUJBQTdCQSxFQUFVOEQsRUFBUzMwQyxPQUFtRCxPQUE3QjZ3QyxFQUFVOEQsRUFBUzMwQyxPQUF3QyxpQkFBZm90RixHQUEwQyxPQUFmQSxFQUFxQixDQUNuTyxJQUFJMXNDLEVBQVEwc0MsRUFDUjNGLEVBQW9CNTJDLEVBQVU4RCxFQUFTMzBDLE1BRTNDLE9BQU8yckUsRUFBcUJoM0IsRUFBVXlVLEVBRGRyUyxFQUFxQnBDLEVBQVUrTCxFQUFNMU0sVUFBV3l6QyxHQUNQL21DLEVBQU8yc0MsR0FhMUUsT0FBTyxLQVlULFNBQVNsaEIsRUFBa0J4M0IsRUFBVTI0QyxHQUNuQyxJQUFJN3NDLEVBQVksS0FVaEIsT0FUQTZzQyxFQUFNMXBGLFNBQVEsU0FBVTZ3RSxFQUFNbDFDLEdBQzVCLElBQUkrZ0IsRUFBbUIsTUFBUm0wQixFQUFlbkksRUFBb0IzM0IsRUFBVTgvQixHQUFRLEtBRXBELE1BQVpuMEIsSUFDRkcsRUFBWUEsR0FBYSxJQUNmN2lELEtBQUswaUQsTUFJRixNQUFiRyxFQUNLLEtBRUEsQ0FDTEQsS0FBTSx1QkFDTkMsVUFBV0EsR0FLakIsU0FBUzlLLEVBQVloQixFQUFVOC9CLEdBQzdCLE9BQVksTUFBUkEsRUFDS0EsRUFDRTkvQixFQUFTeUIsV0FBeUMsSUFBN0J6QixFQUFTeUIsU0FBUzJPLFFBQy9DcGlELE1BQU1DLFFBQVE2eEUsSUFBbVNsL0IsR0FBVSxHQUNyVDQyQixFQUFrQngzQixFQUFVOC9CLEtBRWpDOXhFLE1BQU1DLFFBQVE2eEUsSUFBdVNsL0IsR0FBVSxHQUMxVCsyQixFQUFvQjMzQixFQUFVOC9CLElBcUR6QyxTQUFTNUksRUFBdUJsM0IsRUFBVTgvQixHQUN4QyxPQUFZLE1BQVJBLEVBQ0tBLEVBQ0U5L0IsRUFBU3lCLFdBQXlDLElBQTdCekIsRUFBU3lCLFNBQVMyTyxRQUMvQ3BpRCxNQUFNQyxRQUFRNnhFLElBQW1TbC9CLEdBQVUsR0FhMVRnNEMsRUFBTSxLQVpvQjlZLEVBYXhCN3dFLFNBQVEsU0FBVTZ3RSxHQUN0QixJQUFJNzNELEVBQWEsTUFBUjYzRCxFQUFlN1EsRUFBVWp2QixFQUFVOC9CLEdBQVEsS0FFMUMsTUFBTjczRCxJQUNGMndFLEVBQU1BLEdBQU8sSUFDVDN2RixLQUFLZ2YsTUFHTjJ3RSxJQW5CSDVxRixNQUFNQyxRQUFRNnhFLElBQW1UbC9CLEdBQVUsR0FDdFVxdUIsRUFBVWp2QixFQUFVOC9CLElBUS9CLElBQ004WSxFQWdCTixTQUFTM3BCLEVBQVVqdkIsRUFBVTgvQixJQUNULGlCQUFUQSxHQUE4QixPQUFUQSxHQUFrQjl4RSxNQUFNQyxRQUFRNnhFLEtBQWtNbC9CLEdBQVUsR0FDMVEsSUFBSTZULEVBQVNxckIsRUFBS3RILEdBRWxCLE1BQXNCLGlCQUFYL2pCLEVBQ0ZBLEVBSUYsS0E2QlQsU0FBU29qQixFQUF5QjczQixFQUFVOC9CLEdBQzFDLElBQUkrRCxFQUVKLE9BQVksTUFBUi9ELEVBQ0ssSUFDZ0ksS0FBaEYsUUFBNUMrRCxFQUFxQjdqQyxFQUFTeUIsZ0JBQTZDLElBQXZCb2lDLE9BQWdDLEVBQVNBLEVBQW1CenpCLFNBQzFIcGlELE1BQU1DLFFBQVE2eEUsSUFBbVNsL0IsR0FBVSxHQUNyVGszQixFQUErQjkzQixFQUFVOC9CLEtBRTlDOXhFLE1BQU1DLFFBQVE2eEUsSUFBbVRsL0IsR0FBVSxHQUN0VW0zQixFQUFpQy8zQixFQUFVOC9CLElBQVMsSUFJL0QsU0FBUy9ILEVBQWlDLzNCLEVBQVU4L0IsR0FDbEQsSUFBSW4wQixFQUFXZ3NCLEVBQW9CMzNCLEVBQVU4L0IsR0FFN0MsT0FBS24wQixFQUlFQSxFQUFTdE0sVUFIUCxLQU1YLFNBQVN5NEIsRUFBK0I5M0IsRUFBVTI0QyxHQUNoRCxJQUFJdDVDLEVBQVksR0FVaEIsT0FUQXM1QyxFQUFNMXBGLFNBQVEsU0FBVWdKLEVBQU8yeUIsR0FDN0IsR0FBYSxNQUFUM3lCLEVBQWUsQ0FDakIsSUFBSTRnRixFQUFnQjlnQixFQUFpQy8zQixFQUFVL25DLEdBRTFDLE1BQWpCNGdGLEdBQ0Z6d0YsT0FBT29HLE9BQU82d0MsRUFBV3c1QyxPQUl4Qng1QyxFQWVULFNBQVMyM0IsRUFBcUJoM0IsRUFBVXlVLEVBQVFwVixFQUFXRyxHQUN6RCxJQUFJazVDLEVBQWtDbHRGLFVBQVV4QyxPQUFTLFFBQXNCMEUsSUFBakJsQyxVQUFVLElBQW1CQSxVQUFVLEdBQ3JHLE1BQU8sQ0FDTHFnRCxLQUFNLHlCQUNONEksT0FBUUEsRUFDUmlrQyxnQ0FBaUNBLEVBQ2pDcHhGLEtBQU0wNEMsRUFDTlgsVUFBV0EsRUFDWDBNLE1BQU92TSxHQVlYLzFDLEVBQU9DLFFBQVUsQ0FDZm90RSxrQkF6QkYsU0FBMkJnaUIsRUFBY0MsR0FDdkMsT0FBT0QsRUFBYS9zQyxRQUFVZ3RDLEVBQWFodEMsT0FBUytzQyxFQUFhcmtDLFNBQVdza0MsRUFBYXRrQyxRQUFVcWtDLEVBQWF4eEYsT0FBU3l4RixFQUFhenhGLE1BQVFvMEMsRUFBU285QyxFQUFhejVDLFVBQVcwNUMsRUFBYTE1QyxZQXlCNUwyM0IscUJBQXNCQSxFQUN0QkQsNEJBWEYsU0FBcUN6dkUsRUFBTW10RCxFQUFRcFYsR0FDakQsTUFBTyxDQUNMb1YsT0FBUUEsRUFDUm50RCxLQUFNQSxFQUNOKzNDLFVBQVdBLElBUWI2M0IsdUJBQXdCQSxFQUN4Qm43QixxQkFoS0YsU0FBOEJHLEVBQVd2ckMsR0FDdkMsSUFBSWlvRixFQUFNLEdBRVYsSUFBSyxJQUFJbEMsS0FBU3g2QyxFQUNoQixHQUFJQSxFQUFVOXlDLGVBQWVzdEYsR0FBUSxDQUNuQyxJQUFJMTJDLEVBQVc5RCxFQUFVdzZDLEdBQ3JCNVcsRUFBT252RSxFQUFPK2xGLEdBQ2xCa0MsRUFBSWxDLEdBQVN4ZixFQUF1QmwzQixFQUFVOC9CLEdBSWxELE9BQU84WSxHQXNKUGpoQixvQkFBcUJBLEVBQ3JCSCxrQkFBbUJBLEVBQ25CeDJCLFlBQWFBLEVBQ2IwMkIsdUJBNUxGLFNBQWdDeDdCLEVBQVd2ckMsR0FDekMsSUFBSW03QyxFQUFZLEdBRWhCLElBQUssSUFBSTVOLEtBQVFoQyxFQUNmLEdBQUlBLEVBQVU5eUMsZUFBZTgwQyxHQUFPLENBQ2xDLElBQUk4QixFQUFXOUQsRUFBVWdDLEdBQ3JCNGhDLEVBQU9udkUsRUFBT3V0QyxHQUNsQjROLEVBQVU1TixHQUFROEMsRUFBWWhCLEVBQVU4L0IsR0FJNUMsT0FBT2gwQixHQWtMUGlzQixpQ0FBa0NBLEVBQ2xDRCwrQkFBZ0NBLEVBQ2hDRCx5QkFBMEJBLEVBQzFCOTJCLHVCQWxHRixTQUFnQzdFLEVBQVd2ckMsR0FDekMsSUFBSTB1QyxFQUFZLEdBRWhCLElBQUssSUFBSTIzQyxLQUFTOTZDLEVBQ2hCLEdBQUlBLEVBQVU5eUMsZUFBZTR0RixHQUFRLENBQ25DLElBRUk2QixFQUFnQmhoQixFQUZMMzdCLEVBQVU4NkMsR0FDZHJtRixFQUFPcW1GLElBRWxCNXVGLE9BQU9vRyxPQUFPNndDLEVBQVd3NUMsR0FJN0IsT0FBT3g1QyxLLDRCQ3RPVCxJQUFJakUsRUFBeUIsRUFBUSxNQUVqQzRkLEVBQThCNWQsRUFBdUIsRUFBUSxPQUU3REssRUFBbUJMLEVBQXVCLEVBQVEsT0FFbER5cUMsRUFBYyxFQUFRLE1BRXRCNXFCLEVBQW9CLEVBQVEsTUFFNUJzYSxFQUFvQixFQUFRLE1BRTVCeWpCLEVBQThCLEVBQVEsTUFFdENDLEVBQWMsRUFBUSxNQUV0QkMsRUFBdUIsRUFBUSxNQUUvQjVULEVBQTZCLEVBQVEsTUFFckM2VCxFQUEwQixFQUFRLE1BRWxDQyxFQUFzQyxFQUFRLE1BRTlDbmpCLEVBQWtCLEVBQVEsTUFJMUJtZCxHQUZhLEVBQVEsTUFFRixFQUFRLE9BRTNCeHlDLEVBQVksRUFBUSxNQUVwQnk0QyxFQUFtQixFQUFRLE1BRTNCdjZDLEVBQVcsRUFBUSxNQUNuQjY1QixFQUFVNzVCLEVBQVM2NUIsUUFDbkJDLEVBQVk5NUIsRUFBUzg1QixVQWdCckJuRCxFQUFnQyxXQUNsQyxTQUFTQSxFQUFpQjdzRSxFQUFRMlEsR0FDaEMsSUFFSSsvRSxFQUF1QkMsRUFBc0JDLEVBQW9CQyxFQUFjQyxFQUYvRWw5QyxFQUFRcHlDLE1BSVosRUFBSXF4QyxFQUEwQixTQUFHcnhDLEtBQU0sV0FBVyxXQUM1Q295QyxFQUFNbTlDLFNBQ0puOUMsRUFBTW05QyxPQUFPcjZELE9BQU9zRSxLQUN0QjRZLEVBQU1tOUMsT0FBUyxLQUVmbjlDLEVBQU1vOUMsYUFBYXA5QyxFQUFNcTlDLGFBa0IvQnp2RixLQUFLMHZGLG1CQUFxQixFQUMxQjF2RixLQUFLMnZGLGVBQWlCLEVBQ3RCM3ZGLEtBQUs0dkYscUJBQW1JLFFBQTNHVixFQUF3Qi8vRSxhQUF5QyxFQUFTQSxFQUFRMGdGLDJCQUEyRCxJQUExQlgsRUFBbUNBLEVBN0NySixHQThDOUJsdkYsS0FBS3V2RixPQUFTLEtBQ2R2dkYsS0FBS3d2RixhQUFrSCxRQUFsR0wsRUFBdUJoZ0YsYUFBeUMsRUFBU0EsRUFBUTJnRixtQkFBa0QsSUFBekJYLEVBQWtDQSxFQUF1QkYsRUFDeExqdkYsS0FBSzJ6RSxXQUE0RyxRQUE5RnliLEVBQXFCamdGLGFBQXlDLEVBQVNBLEVBQVEwMUQsaUJBQThDLElBQXZCdXFCLEVBQWdDQSxFQUFxQnBHLEVBQzlLaHBGLEtBQUsrdkYseUJBQTJCLEtBQ2hDL3ZGLEtBQUtnd0YsMkJBQTZCLElBQUlwb0YsSUFDdEM1SCxLQUFLaXdGLHNCQUF3QixJQUFJcm9GLElBQ2pDNUgsS0FBSzBrRCxNQUEyRixRQUFsRjJxQyxFQUFlbGdGLGFBQXlDLEVBQVNBLEVBQVFrTyxXQUFrQyxJQUFqQmd5RSxFQUEwQkEsRUFBZSxLQUNqSnJ2RixLQUFLa3dGLDBCQUE0Qi9nRixhQUF5QyxFQUFTQSxFQUFRZ2hGLHlCQUMzRm53RixLQUFLKzdFLGlCQUEySCxRQUF2R3VULEVBQXdCbmdGLGFBQXlDLEVBQVNBLEVBQVF3c0UsdUJBQXVELElBQTFCMlQsRUFBbUNBLEVBQXdCLEtBQ25NdHZGLEtBQUtvd0Ysa0JBQW9CLEtBQ3pCcHdGLEtBQUtxd0YsY0FBZ0I3eEYsRUFDckJ3QixLQUFLc3dGLGVBQWlCLEdBQ3RCdHdGLEtBQUt1d0YsT0FBUyxJQUFJejNFLElBQ2xCOVksS0FBS3d3RixtQkFBb0IsRUFDekJ4d0YsS0FBS3l3RixxQkFBZ0YsSUFBMUQ1L0IsRUFBa0I2L0Isb0NBQStDLElBQUkxQixFQUFvQzcvRSxhQUF5QyxFQUFTQSxFQUFRa08sS0FBTyxJQUFJMHhFLEVBQXdCNS9FLGFBQXlDLEVBQVNBLEVBQVFrTyxLQUMzUnJkLEtBQUsyd0Ysa0JBQW9CLElBQUkvb0YsSUFDN0I1SCxLQUFLbThFLCtCQUFpQ2h0RSxhQUF5QyxFQUFTQSxFQUFReXNFLDhCQXFlcEcsU0FBZ0MzMkUsR0FDOUIsSUFBS0EsRUFBT3NvQixJQUFJZ2hELEdBQVUsQ0FDeEIsSUFBSXFpQixFQUFhemxCLEVBQWtCL3NDLE9BQU9td0MsRUFBU0MsR0FDbkR2cEUsRUFBT2lILElBQUlxaUUsRUFBU3FpQixJQXZlcEJDLENBQXVCN3dGLEtBQUtxd0YsZUFHOUIsSUFBSTU4QyxFQUFTNDNCLEVBQWlCcHRFLFVBOGQ5QixPQTVkQXcxQyxFQUFPcTlDLFVBQVksV0FDakIsSUFBSUMsRUFFSixPQUE0RCxRQUFwREEsRUFBd0Ivd0YsS0FBS293Rix5QkFBeUQsSUFBMUJXLEVBQW1DQSxFQUF3Qi93RixLQUFLcXdGLGVBR3RJNThDLEVBQU9nQyxNQUFRLFNBQWVOLEVBQVdobUMsR0FDdkMsSUFBSTZoRixFQUF3QkMsRUFBaUJDLEVBRXpDM3ZDLEVBQVdwTSxFQUFVZ2EsS0FDckIzd0QsRUFBK0QsUUFBckR3eUYsRUFBeUJoeEYsS0FBS293Rix5QkFBMEQsSUFBM0JZLEVBQW9DQSxFQUF5Qmh4RixLQUFLcXdGLGNBQ3pJYyxFQUEwQm54RixLQUFLK3ZGLHlCQUUvQnFCLEVBQVlweEYsS0FBS3V3RixPQUFPbmpGLElBQUkrbkMsRUFBVUMsUUFBUTZVLFlBRTlDb25DLEVBQXNDLE1BQWJELEVBQW9CQSxFQUFVRSxNQUFRLEtBRW5FLEdBQStCLE1BQTNCSCxJQUc0QixNQUExQkUsR0FBa0NBLEdBQTBCRixHQUs5RCxNQUFPLENBQ0xyMEMsT0FBUSxTQUtkLElBQUk3M0MsRUFBa0csUUFBeEZnc0YsRUFBa0I5aEYsYUFBeUMsRUFBU0EsRUFBUWxLLGNBQXdDLElBQXBCZ3NGLEVBQTZCQSxFQUFrQnp5RixFQUN6Sms5RSxFQUF3RyxRQUE1RndWLEVBQW9CL2hGLGFBQXlDLEVBQVNBLEVBQVF1c0UsZ0JBQTRDLElBQXRCd1YsRUFBK0JBLEVBQW9CLEdBRXZLLE9BNGlCSixTQUErQkssRUFBdUJGLEVBQXdCRyxFQUFvQnJCLEdBQ2hHLElBQUk5VCxFQUE0QmtWLEVBQXNCbFYsMEJBQ2xEdi9CLEVBQVN5MEMsRUFBc0J6MEMsT0FFbkMsTUFBeUMsaUJBQTlCdS9CLElBSXFCLE1BQTFCZ1YsR0FBa0NoVixFQUE0QmdWLEdBQ3pELENBQ0x2MEMsT0FBUSxTQUtDLFlBQVhBLEVBQ0ssQ0FDTEEsT0FBUSxXQUljLE1BQXRCMDBDLEdBQTBELE1BQTVCckIsR0FDbEJxQixHQUFzQnp4RSxLQUFLQyxNQUFRbXdFLEVBR3hDLENBQ0xyekMsT0FBUSxTQU9QLENBQ0xBLE9BQVEsWUFDUnE4QixVQUFXcVksUUFBK0RBLEVBQXFCLE1BL2tCeEZDLENBRHFCaFcsRUFBWWhtQyxNQUFNajNDLEVBQVF5RyxFQUFRczhDLEVBQVVtNkIsRUFBVTE3RSxLQUFLKzdFLGlCQUFrQi83RSxLQUFLMnpFLFdBQVkzekUsS0FBS204RSxnQ0FDM0VrVixFQUF3QkQsYUFBNkMsRUFBU0EsRUFBVWpZLFVBQVduNUUsS0FBS2t3Riw0QkFHOUp6OEMsRUFBT3FDLE9BQVMsU0FBZ0JYLEdBQzlCLElBQUlrRyxFQUFTcjdDLEtBRVQ2ZCxFQUFLczNCLEVBQVVDLFFBQVE2VSxXQUN2QmhVLEdBQVcsRUE4Q1htN0MsRUFBWXB4RixLQUFLdXdGLE9BQU9uakYsSUFBSXlRLEdBd0JoQyxPQXRCaUIsTUFBYnV6RSxHQUN5QixJQUF2QkEsRUFBVU0sV0FJWjF4RixLQUFLc3dGLGVBQWlCdHdGLEtBQUtzd0YsZUFBZXJ4QixRQUFPLFNBQVVpakIsR0FDekQsT0FBT0EsSUFBUXJrRSxNQUtuQnV6RSxFQUFVTSxVQUFZLEdBR3RCMXhGLEtBQUt1d0YsT0FBT3JrRixJQUFJMlIsRUFBSSxDQUNsQnMzQixVQUFXQSxFQUNYdThDLFNBQVUsRUFDVkosTUFBTyxLQUNQblksVUFBVyxPQUlSLENBQ0x2bEMsUUFyRVksV0FFWixJQUFJcUMsRUFBSixDQUlBQSxHQUFXLEVBRVgsSUFBSW03QyxFQUFZLzFDLEVBQU9rMUMsT0FBT25qRixJQUFJeVEsR0FFbEMsR0FBaUIsTUFBYnV6RSxJQU1KQSxFQUFVTSxXQUVpQixJQUF2Qk4sRUFBVU0sVUFBZ0IsQ0FDNUIsSUFBSXhCLEVBQTRCNzBDLEVBQU82MEMsMEJBSXZDLEdBRjhDLE1BQXZCa0IsRUFBVWpZLFdBQWtELE1BQTdCK1csR0FBcUNrQixFQUFValksV0FBYXA1RCxLQUFLQyxNQUFRa3dFLEVBRzdINzBDLEVBQU9rMUMsT0FBZSxPQUFFMXlFLEdBRXhCdzlCLEVBQU9zMkMsa0JBT1AsR0FMQXQyQyxFQUFPaTFDLGVBQWV6eEYsS0FBS2dmLEdBS3ZCdzlCLEVBQU9pMUMsZUFBZTF4RixPQUFTeThDLEVBQU91MEMscUJBQXNCLENBQzlELElBQUkxTixFQUFNN21DLEVBQU9pMUMsZUFBZWoyRSxRQUVoQ2doQyxFQUFPazFDLE9BQWUsT0FBRXJPLEdBRXhCN21DLEVBQU9zMkMsbUJBbUNqQmwrQyxFQUFPa0MsT0FBUyxTQUFnQjRMLEdBQzlCLElBQUkvaUQsRUFBU3dCLEtBQUs4d0YsWUFPbEIsT0FOZWpDLEVBQVlucEMsS0FBS2xuRCxFQUFRK2lELElBVTFDOU4sRUFBT20rQyxPQUFTLFNBQWdCQyxFQUFpQnhkLEdBQy9DLElBQUk1MUIsRUFBU3orQyxLQUVUcWQsRUFBTXJkLEtBQUswa0QsTUFFSixNQUFQcm5DLEdBQ0ZBLEVBQUksQ0FDRnBjLEtBQU0scUJBQ040d0YsZ0JBQWlCQSxJQU1yQjd4RixLQUFLMHZGLHNCQUVtQixJQUFwQnJiLElBQ0ZyMEUsS0FBSyt2Rix5QkFBMkIvdkYsS0FBSzB2RixvQkFHdkMsSUFBSWx4RixFQUFTd0IsS0FBSzh3RixZQUNkbk4sRUFBZ0IsR0F3QnBCLEdBdEJBM2pGLEtBQUt5d0Ysb0JBQW9CcUIsb0JBQW9CdHpGLEVBQVF3QixLQUFLMndGLGtCQUFtQmhOLEVBQWVrTyxHQUU1Rjd4RixLQUFLZ3dGLDJCQUEyQm5yRixTQUFRLFNBQVVxeUMsR0FDaER1SCxFQUFPc3pDLGdDQUFnQzc2QyxHQUFrQyxJQUFwQm05QixNQUc1QyxNQUFQaDNELEdBQ0ZBLEVBQUksQ0FDRnBjLEtBQU0sd0JBQ040d0YsZ0JBQWlCQSxFQUNqQkcsaUJBQWtCaHlGLEtBQUsyd0Ysa0JBQ3ZCc0IscUJBQXNCanlGLEtBQUtpd0Ysd0JBSS9CandGLEtBQUsyd0Ysa0JBQWtCcG5DLFFBRXZCdnBELEtBQUtpd0Ysc0JBQXNCMW1DLFFBS0osTUFBbkJzb0MsRUFBeUIsQ0FNM0IsSUFBSWgwRSxFQUFLZzBFLEVBQWdCejhDLFFBQVE2VSxXQUU3Qm1uQyxFQUFZcHhGLEtBQUt1d0YsT0FBT25qRixJQUFJeVEsR0FFaEMsR0FBaUIsTUFBYnV6RSxFQUNGQSxFQUFVRSxNQUFRdHhGLEtBQUswdkYsbUJBQ3ZCMEIsRUFBVWpZLFVBQVlwNUQsS0FBS0MsV0FDdEIsR0FBMEQsVUFBdEQ2eEUsRUFBZ0J6OEMsUUFBUWw0QyxLQUFLa2lELE9BQU8rMUIsZUFBNkJuMUUsS0FBSzR2RixxQkFBdUIsR0FBSzV2RixLQUFLc3dGLGVBQWUxeEYsT0FBU29CLEtBQUs0dkYscUJBQXNCLENBR25LLElBQUlzQyxFQUFxQixDQUN2Qi84QyxVQUFXMDhDLEVBQ1hILFNBQVUsRUFDVkosTUFBT3R4RixLQUFLMHZGLG1CQUNadlcsVUFBV3A1RCxLQUFLQyxPQUdsQmhnQixLQUFLc3dGLGVBQWV6eEYsS0FBS2dmLEdBRXpCN2QsS0FBS3V3RixPQUFPcmtGLElBQUkyUixFQUFJcTBFLElBSXhCLE9BQU92TyxHQUdUbHdDLEVBQU8wK0MsUUFBVSxTQUFpQjN6RixFQUFRNHpGLEdBQ3hDLElBQUlDLEVBRUFwdEYsRUFBK0QsUUFBckRvdEYsRUFBeUJyeUYsS0FBS293Rix5QkFBMEQsSUFBM0JpQyxFQUFvQ0EsRUFBeUJyeUYsS0FBS3F3RixlQTZSakosU0FBZ0NwckYsRUFBUXpHLEVBQVE4ekYsRUFBbUJGLEVBQTBCSixFQUFrQkMsR0FLekdHLEdBQ0ZBLEVBQXlCdnRGLFNBQVEsU0FBVXdsRCxHQUN6QyxJQVFJNmpDLEVBUkFxRSxFQUFldHRGLEVBQU9tSSxJQUFJaTlDLEdBQzFCNHBCLEVBQWV6MUUsRUFBTzRPLElBQUlpOUMsR0FHVCxPQUFqQjRwQixJQVdGaWEsRUFMa0IsTUFBaEJxRSxFQUtXcG5CLEVBQWtCMEgsTUFBTTBmLEdBT1IsTUFBaEJ0ZSxFQUF1QjlJLEVBQWtCMEgsTUFBTW9CLEdBQWdCLFFBTzlFOUksRUFBa0IzOUQsU0FBUzBnRixFQUFZcmlCLEVBQWdCK2hCLG1CQUFvQjBFLEdBQzNFTCxFQUFxQmpxRixJQUFJcWlELEdBRXpCcGxELEVBQU9pSCxJQUFJbStDLEVBQVE2akMsT0FPdkIsSUFGQSxJQUFJcHhCLEVBQVV0K0QsRUFBT3cxRSxlQUVaeHpDLEVBQUssRUFBR0EsRUFBS3M4QixFQUFRbCtELE9BQVE0aEMsSUFBTSxDQUMxQyxJQUFJNnBCLEVBQVN5UyxFQUFRdDhCLEdBQ2pCeXpDLEVBQWV6MUUsRUFBTzRPLElBQUlpOUMsR0FDMUJrb0MsRUFBZXR0RixFQUFPbUksSUFBSWk5QyxHQVE5QixHQUFJNHBCLEdBQWdCc2UsRUFBYyxDQUtoQyxJQUFJckUsRUFBYS9pQixFQUFrQnBHLFFBQVF3dEIsS0FBa0JyWCxFQUEyQnNYLHVCQUF5QnZlLEVBQWU5SSxFQUFrQnRFLE9BQU8wckIsRUFBY3RlLEdBRW5LaWEsSUFBZXFFLElBTWpCUCxFQUFpQmhxRixJQUFJcWlELEdBQ3JCcGxELEVBQU9pSCxJQUFJbStDLEVBQVE2akMsU0FFSyxPQUFqQmphLEdBQ1RodkUsRUFBZSxPQUFFb2xELEdBRUksT0FBakJrb0MsR0FDRlAsRUFBaUJocUYsSUFBSXFpRCxJQUVkNHBCLElBQ1RodkUsRUFBT2lILElBQUltK0MsRUFBUTRwQixHQUNuQitkLEVBQWlCaHFGLElBQUlxaUQsS0E3V3ZCb29DLENBQXVCeHRGLEVBQVF6RyxFQUcvQndCLEtBQUswdkYsbUJBQXFCLEVBQUcwQyxFQUEwQnB5RixLQUFLMndGLGtCQUFtQjN3RixLQUFLaXdGLHVCQUdwRixJQUFJNXlFLEVBQU1yZCxLQUFLMGtELE1BRUosTUFBUHJuQyxHQUNGQSxFQUFJLENBQ0ZwYyxLQUFNLGdCQUNOekMsT0FBUUEsRUFDUmswRixXQUFZenRGLElBQVdqRixLQUFLb3dGLHFCQUtsQzM4QyxFQUFPNVYsVUFBWSxTQUFtQjJYLEVBQVV0ZixHQUM5QyxPQUFPbDJCLEtBQUt5d0Ysb0JBQW9CNXlELFVBQVUyWCxFQUFVdGYsSUFHdER1ZCxFQUFPay9DLE9BQVMsV0FDZCxJQUFJMXFDLEVBQVNqb0QsS0FxQmIsT0FuQklBLEtBQUt1dkYsU0FDUHZ2RixLQUFLdXZGLE9BQVMsS0FDZHZ2RixLQUFLd3dGLG1CQUFvQixHQUczQnh3RixLQUFLMnZGLGlCQWNFLENBQ0wvN0MsUUFiWSxXQUNScVUsRUFBTzBuQyxlQUFpQixJQUMxQjFuQyxFQUFPMG5DLGlCQUV1QixJQUExQjFuQyxFQUFPMG5DLGdCQUF3QjFuQyxFQUFPdW9DLG9CQUN4Q3ZvQyxFQUFPMHBDLGFBRVAxcEMsRUFBT3VvQyxtQkFBb0IsT0FVbkMvOEMsRUFBTzYzQyxPQUFTLFdBQ2QsTUFBTyxzQkFJVDczQyxFQUFPbS9DLHNCQUF3QixXQUM3QixPQUFPNXlGLEtBQUsyd0YsbUJBR2RsOUMsRUFBTzRwQix3QkFBMEIsU0FBaUNQLEdBQ2hFLElBQUkzVSxFQUFTbm9ELEtBRVQ2eUYsRUFBZ0IsSUFBSS81RSxJQVN4QixPQVJBZ2tELEVBQVFqNEQsU0FBUSxTQUFVd2xELEdBQ3hCLElBQUl5b0MsRUFFQXJ0QixFQUFTdGQsRUFBTzJvQyxZQUFZMWpGLElBQUlpOUMsR0FFcEN3b0MsRUFBYzNtRixJQUFJbStDLEVBQXFGLFFBQTVFeW9DLEVBQXdCM25CLEVBQWtCK1IscUJBQXFCelgsVUFBK0MsSUFBMUJxdEIsRUFBbUNBLEVBQXdCLFNBRTVLRCxFQUFjM21GLElBQUksU0FBVWxNLEtBQUsrdkYsMEJBQzFCLENBQ0xqekIsUUFBU0EsRUFDVCsxQixjQUFlQSxJQUluQnAvQyxFQUFPcy9DLHVCQUF5QixTQUFnQ0MsR0FDOUQsSUFDSUMsRUFEMEJqekYsS0FBS3E5RCx3QkFBd0IyMUIsRUFBc0JsMkIsU0FDOUIrMUIsY0FDL0NLLEVBQW9CRixFQUFzQkgsY0FFOUMsR0FBSUksRUFBcUI3bEYsSUFBSSxZQUFjOGxGLEVBQWtCOWxGLElBQUksVUFDL0QsT0FBTyxFQUlULElBQ0l5aEQsRUFEQUMsR0FBWSxFQUFJRixFQUFxQyxTQUFHb2tDLEVBQXNCbDJCLFNBR2xGLElBQ0UsSUFBS2hPLEVBQVV6cEQsTUFBT3dwRCxFQUFRQyxFQUFVcnFELEtBQUsrMEIsTUFBTyxDQUNsRCxJQUFJNndCLEVBQVN3RSxFQUFNaGhELE1BRW5CLEdBQUlvbEYsRUFBcUI3bEYsSUFBSWk5QyxLQUFZNm9DLEVBQWtCOWxGLElBQUlpOUMsR0FDN0QsT0FBTyxHQUdYLE1BQU90bEQsR0FDUCtwRCxFQUFVL3JELEVBQUVnQyxHQUNaLFFBQ0ErcEQsRUFBVTFyRCxJQUdaLE9BQU8sR0FHVHF3QyxFQUFPNnBCLDZCQUErQixTQUFzQ0YsRUFBbUJsbkMsR0FDN0YsSUFBSStoRCxFQUFTajRFLEtBRVRrM0MsRUFBZSxDQUNqQmhoQixTQUFVQSxFQUNWa25DLGtCQUFtQkEsR0FTckIsT0FGQXA5RCxLQUFLZ3dGLDJCQUEyQmhvRixJQUFJa3ZDLEdBRTdCLENBQ0x0RCxRQVBZLFdBQ1pxa0MsRUFBTytYLDJCQUFtQyxPQUFFOTRDLE1BVWhEekQsRUFBT3MrQyxnQ0FBa0MsU0FBeUM3NkMsRUFBY2k4QyxHQUM5RixJQUFJaGIsRUFBU240RSxLQUVUazJCLEVBQVdnaEIsRUFBYWhoQixTQUV4QjRtQyxFQURvQjVsQixFQUFha21CLGtCQUNMTixTQUNHcTJCLEdBQW9CcjJCLEVBQVF6VyxNQUFLLFNBQVVnRSxHQUM1RSxPQUFPOHRCLEVBQU84WCxzQkFBc0IxaUUsSUFBSTg4QixRQU8xQ24wQixLQUdGdWQsRUFBTytCLFNBQVcsV0FDWSxNQUExQngxQyxLQUFLb3dGLG1CQUFrTDU1QyxHQUFVLEdBQ25NLElBQUluNUIsRUFBTXJkLEtBQUswa0QsTUFFSixNQUFQcm5DLEdBQ0ZBLEVBQUksQ0FDRnBjLEtBQU0sbUJBSVZqQixLQUFLeXdGLG9CQUFvQjJDLHNCQUFzQnB6RixLQUFLOHdGLGFBRWhEOXdGLEtBQUt1dkYsU0FDUHZ2RixLQUFLdXZGLE9BQVMsS0FDZHZ2RixLQUFLd3dGLG1CQUFvQixHQUczQnh3RixLQUFLb3dGLGtCQUFvQnhCLEVBQTRCeHdELE9BQU9wK0IsS0FBSzh3RixjQUduRXI5QyxFQUFPNC9DLFFBQVUsV0FDYSxNQUExQnJ6RixLQUFLb3dGLG1CQUE2TTU1QyxHQUFVLEdBQzlOLElBQUluNUIsRUFBTXJkLEtBQUswa0QsTUFFSixNQUFQcm5DLEdBQ0ZBLEVBQUksQ0FDRnBjLEtBQU0sa0JBSVZqQixLQUFLb3dGLGtCQUFvQixLQUVyQnB3RixLQUFLd3dGLG1CQUNQeHdGLEtBQUsyeEYsYUFHUDN4RixLQUFLeXdGLG9CQUFvQjZDLHdCQUczQjcvQyxFQUFPaytDLFdBQWEsV0FDZDN4RixLQUFLMnZGLGVBQWlCLEVBQ3hCM3ZGLEtBQUt3d0YsbUJBQW9CLEVBSXZCeHdGLEtBQUt1dkYsU0FJVHZ2RixLQUFLdXZGLE9BQVN2dkYsS0FBS3V6RixXQUVuQnZ6RixLQUFLd3ZGLGFBQWF4dkYsS0FBS3l2RixXQU96Qmg4QyxFQUFPKy9DLEtBQU8sV0FFWixHQUE4QixNQUExQnh6RixLQUFLb3dGLGtCQU1ULElBRkEsSUFBSXFELEVBQVF6ekYsS0FBS3V6RixZQUVURSxFQUFNditELE9BQU9zRSxTQUd2QmlhLEVBQU84L0MsU0FBVyxZQUVoQjNvRCxFQUFLLE9BQWEsQ0FDaEIsSUFJSThwQixFQUpBZy9CLEVBQWExekYsS0FBSzB2RixtQkFDbEJpRSxFQUFhLElBQUkvckYsSUFFakIrc0QsR0FBYSxFQUFJL0YsRUFBcUMsU0FBRzV1RCxLQUFLdXdGLE9BQU9qZ0MsVUFHekUsSUFDRSxJQUFLcUUsRUFBV3R2RCxNQUFPcXZELEVBQVNDLEVBQVdsd0QsS0FBSyswQixNQUFPLENBQ3JELElBQ0krbkIsRUFEWW1ULEVBQU83bUQsTUFBTXNuQyxVQUNKZ2EsS0FLekIsR0FKQTIvQixFQUFxQjhFLEtBQUs1ekYsS0FBS3F3RixjQUFlOXVDLEVBQVVveUMsRUFBWTN6RixLQUFLKzdFLGlCQUFrQi83RSxLQUFLbThFLHNDQUk1RnVYLElBQWUxekYsS0FBSzB2RixtQkFDdEIsU0FBUzlrRCxHQUdiLE1BQU83bEMsR0FDUDR2RCxFQUFXNXhELEVBQUVnQyxHQUNiLFFBQ0E0dkQsRUFBV3Z4RCxJQUdiLElBQUlpYSxFQUFNcmQsS0FBSzBrRCxNQVVmLEdBUlcsTUFBUHJuQyxHQUNGQSxFQUFJLENBQ0ZwYyxLQUFNLFdBQ04weUYsV0FBWUEsSUFLUSxJQUFwQkEsRUFBVzcwRixLQUVia0IsS0FBS3F3RixjQUFjOW1DLGFBS25CLElBRkEsSUFBSXNxQyxFQUFXN3pGLEtBQUtxd0YsY0FBY3JjLGVBRXpCeHpDLEVBQUssRUFBR0EsRUFBS3F6RCxFQUFTajFGLE9BQVE0aEMsSUFBTSxDQUMzQyxJQUFJNnBCLEVBQVN3cEMsRUFBU3J6RCxHQUVqQm16RCxFQUFXcG1FLElBQUk4OEIsSUFDbEJycUQsS0FBS3F3RixjQUFjeUQsT0FBT3pwQyxHQUtoQyxTQUlHZ2hCLEVBbGhCMkIsR0EycUJwQ2hzRSxFQUFPQyxRQUFVK3JFLEcsNEJDL3RCakIsSUFFSXpjLEVBRnlCLEVBQVEsS0FFSDVkLENBQXVCLEVBQVEsT0FFN0R3RixFQUFZLEVBQVEsTUFFcEJnMUIsRUFBcUMsV0FDdkMsU0FBU0EsSUFDUHhyRSxLQUFLK3pGLHFDQUF1QyxJQUFJajdFLElBQ2hEOVksS0FBS2cwRixxQ0FBdUMsSUFBSWw3RSxJQUNoRDlZLEtBQUtpMEYsMkJBQTZCLElBQUluN0UsSUFReEMsSUFBSTI2QixFQUFTKzNCLEVBQXNCdnRFLFVBaU1uQyxPQS9MQXcxQyxFQUFPb3pCLE9BQVMsU0FBZ0JxdEIsRUFBa0JDLEdBQ2hELEdBQTRCLElBQXhCQSxFQUFlcjFGLEtBQW5CLENBSUEsSUFJSSt2RCxFQUpBdWxDLEVBQTZCRixFQUFpQmpxQyxXQUM5Q29xQyxFQUFnQyxJQUFJenNGLElBRXBDa25ELEdBQVksRUFBSUYsRUFBcUMsU0FBR3VsQyxHQUc1RCxJQUNFLElBQUtybEMsRUFBVXpwRCxNQUFPd3BELEVBQVFDLEVBQVVycUQsS0FBSyswQixNQUFPLENBQ2xELElBQ0k4NkQsRUFEUXpsQyxFQUFNaGhELE1BQ1VvOEMsV0FFeEJzcUMsRUFBa0N2MEYsS0FBSyt6RixxQ0FBcUMzbUYsSUFBSWtuRixHQUU3QyxNQUFuQ0MsRUFJR0EsRUFBZ0NobkUsSUFBSTZtRSxLQUN2Q0csRUFBZ0N2c0YsSUFBSW9zRixHQUNwQ0MsRUFBOEJyc0YsSUFBSXNzRixLQUlwQ3QwRixLQUFLK3pGLHFDQUFxQzduRixJQUFJb29GLEVBQWlCLElBQUkxc0YsSUFBSSxDQUFDd3NGLEtBRXhFQyxFQUE4QnJzRixJQUFJc3NGLEtBSXRDLE1BQU92dkYsR0FDUCtwRCxFQUFVL3JELEVBQUVnQyxHQUNaLFFBQ0ErcEQsRUFBVTFyRCxJQUdaLEdBQTJDLElBQXZDaXhGLEVBQThCdjFGLEtBQWxDLENBTUEsSUFHSTQxRCxFQUhBOC9CLEVBQXNDeDBGLEtBQUtnMEYscUNBQXFDNW1GLElBQUlnbkYsSUFBK0IsSUFBSXhzRixJQUV2SCtzRCxHQUFhLEVBQUkvRixFQUFxQyxTQUFHeWxDLEdBRzdELElBQ0UsSUFBSzEvQixFQUFXdHZELE1BQU9xdkQsRUFBU0MsRUFBV2x3RCxLQUFLKzBCLE1BQU8sQ0FDckQsSUFBSWk3RCxFQUFtQi8vQixFQUFPN21ELE1BRTlCN04sS0FBSzAwRix1QkFBdUJELEdBRTVCRCxFQUFvQ3hzRixJQUFJeXNGLElBRTFDLE1BQU8xdkYsR0FDUDR2RCxFQUFXNXhELEVBQUVnQyxHQUNiLFFBQ0E0dkQsRUFBV3Z4RCxJQUdicEQsS0FBS2cwRixxQ0FBcUM5bkYsSUFBSWtvRixFQUE0QkksTUFRNUUvZ0QsRUFBT3VELFNBQVcsU0FBa0JrOUMsR0FDbEMsSUFBSUUsRUFBNkJGLEVBQWlCanFDLFdBRTlDMHFDLEVBQTJCMzBGLEtBQUtnMEYscUNBQXFDNW1GLElBQUlnbkYsR0FFN0UsR0FBZ0MsTUFBNUJPLEVBQUosQ0FLQSxJQU1JdHJCLEVBTkF1ckIsRUFBNEIsSUFBSWh0RixJQUdoQ2l0RixFQUEwQixJQUFJanRGLElBRTlCMmhFLEdBQWEsRUFBSTNhLEVBQXFDLFNBQUcrbEMsR0FHN0QsSUFDRSxJQUFLcHJCLEVBQVdsa0UsTUFBT2drRSxFQUFTRSxFQUFXOWtFLEtBQUsrMEIsTUFBTyxDQUNyRCxJQUFJODZELEVBQWtCanJCLEVBQU94N0QsTUFFekIwbUYsRUFBa0N2MEYsS0FBSyt6RixxQ0FBcUMzbUYsSUFBSWtuRixHQUUvRUMsSUFJTEEsRUFBd0MsT0FBRUgsR0FFdENHLEVBQWdDejFGLEtBQU8sRUFDekMrMUYsRUFBd0I3c0YsSUFBSXNzRixHQUU1Qk0sRUFBMEI1c0YsSUFBSXNzRixLQUlsQyxNQUFPdnZGLEdBQ1B3a0UsRUFBV3htRSxFQUFFZ0MsR0FDYixRQUNBd2tFLEVBQVdubUUsSUFHYixJQUNJOG1FLEVBREFFLEdBQWEsRUFBSXhiLEVBQXFDLFNBQUdnbUMsR0FHN0QsSUFDRSxJQUFLeHFCLEVBQVcva0UsTUFBTzZrRSxFQUFTRSxFQUFXM2xFLEtBQUsrMEIsTUFBTyxDQUNyRCxJQUFJczdELEVBQW9CNXFCLEVBQU9yOEQsTUFFL0I3TixLQUFLMDBGLHVCQUF1QkksR0FFNUI5MEYsS0FBSyt6RixxQ0FBNkMsT0FBRWUsSUFJdEQsTUFBTy92RixHQUNQcWxFLEVBQVdybkUsRUFBRWdDLEdBQ2IsUUFDQXFsRSxFQUFXaG5FLElBR2IsSUFDSWtuRSxFQURBQyxHQUFhLEVBQUkzYixFQUFxQyxTQUFHaW1DLEdBRzdELElBQ0UsSUFBS3RxQixFQUFXbGxFLE1BQU9pbEUsRUFBU0MsRUFBVzlsRSxLQUFLKzBCLE1BQU8sQ0FDckQsSUFBSXU3RCxFQUFvQnpxQixFQUFPejhELE1BRS9CN04sS0FBSzAwRix1QkFBdUJLLElBRzlCLE1BQU9od0YsR0FDUHdsRSxFQUFXeG5FLEVBQUVnQyxHQUNiLFFBQ0F3bEUsRUFBV25uRSxJQUdicEQsS0FBS2cwRixxQ0FBNkMsT0FBRUksS0FHdEQzZ0QsRUFBT2loRCx1QkFBeUIsU0FBZ0NKLEdBQzlELElBQUlVLEVBQWVoMUYsS0FBS2kwRiwyQkFBMkI3bUYsSUFBSWtuRixHQUVuQyxNQUFoQlUsR0FDRkEsRUFBYXZpRCxVQUdmenlDLEtBQUtpMEYsMkJBQW1DLE9BQUVLLElBRzVDN2dELEVBQU80VSw2Q0FBK0MsU0FBc0QxRyxHQUMxRyxJQUFJMnlDLEVBQWtCM3lDLEVBQU1zSSxXQUU1QixJQUFLanFELEtBQUsrekYscUNBQXFDeG1FLElBQUkrbUUsR0FDakQsT0FBTyxLQUdULElBTUk3aEQsRUFOQXdpRCxFQUFxQmoxRixLQUFLaTBGLDJCQUEyQjdtRixJQUFJa25GLEdBRTdELEdBQTBCLE1BQXRCVyxFQUNGLE9BQU9BLEVBQW1CMXNDLFFBSTVCLElBQUlBLEVBQVUsSUFBSTZFLFNBQVEsU0FBVTVsRCxHQUNsQ2lyQyxFQUFVanJDLEtBU1osT0FQYSxNQUFYaXJDLEdBQWtNK0QsR0FBVSxHQUU5TXgyQyxLQUFLaTBGLDJCQUEyQi9uRixJQUFJb29GLEVBQWlCLENBQ25EL3JDLFFBQVNBLEVBQ1Q5VixRQUFTQSxJQUdKOFYsR0FHRmlqQixFQTdNZ0MsR0FnTnpDbnNFLEVBQU9DLFFBQVVrc0UsRyw0QkN0TmpCLElBRUl2NkIsRUFGeUIsRUFBUSxLQUVoQkQsQ0FBdUIsRUFBUSxPQUVoRDI2QixFQUFvQixFQUFRLE1BRTVCdXBCLEVBQTRCbDNGLE9BQU9vbkQsT0FBTyxDQUM1Qyt2Qyw2QkFBNkIsSUFRM0J2RyxFQUEyQyxXQUM3QyxTQUFTQSxFQUE0Qno2RSxHQUNuQ25VLEtBQUt3eUUsTUFBUXIrRCxFQUNiblUsS0FBS3l5RSxNQUFROUcsRUFBa0J2dEMsU0FHakMsSUFBSXFWLEVBQVNtN0MsRUFBNEIzd0YsVUFrRnpDLE9BaEZBdzFDLEVBQU9sbUIsSUFBTSxTQUFhODhCLEdBQ3hCLE9BQUlycUQsS0FBS3l5RSxNQUFNbGxELElBQUk4OEIsR0FDQXJxRCxLQUFLeXlFLE1BQU1ybEUsSUFBSWk5QyxLQUVWNnFDLEVBRWZsMUYsS0FBS3d5RSxNQUFNamxELElBQUk4OEIsSUFJMUI1VyxFQUFPcm1DLElBQU0sU0FBYWk5QyxHQUN4QixHQUFJcnFELEtBQUt5eUUsTUFBTWxsRCxJQUFJODhCLEdBQVMsQ0FDMUIsSUFBSXVvQixFQUFhNXlFLEtBQUt5eUUsTUFBTXJsRSxJQUFJaTlDLEdBRWhDLE9BQUl1b0IsSUFBZXNpQixPQUNqQixFQUVPdGlCLEVBR1QsT0FBTzV5RSxLQUFLd3lFLE1BQU1wbEUsSUFBSWk5QyxJQUkxQjVXLEVBQU8yL0IsVUFBWSxTQUFtQi9vQixHQUNwQyxJQUFJb2IsRUFBU3psRSxLQUFLb04sSUFBSWk5QyxHQUV0QixZQUFlL21ELElBQVhtaUUsRUFDSyxVQUNhLE9BQVhBLEVBQ0YsY0FFQSxZQUlYaHlCLEVBQU84VixNQUFRLFdBQ2J2cEQsS0FBS3d5RSxNQUFRN0csRUFBa0J2dEMsU0FFL0JwK0IsS0FBS3l5RSxNQUFNbHBCLFNBR2I5VixFQUFlLE9BQUksU0FBaUI0VyxHQUNsQ3JxRCxLQUFLeXlFLE1BQWMsT0FBRXBvQixJQUd2QjVXLEVBQU9xZ0QsT0FBUyxTQUFnQnpwQyxHQUM5QnJxRCxLQUFLeXlFLE1BQU12bUUsSUFBSW0rQyxFQUFRNnFDLElBR3pCemhELEVBQU92bkMsSUFBTSxTQUFhbStDLEVBQVFvYixHQUNoQ3psRSxLQUFLeXlFLE1BQU12bUUsSUFBSW0rQyxFQUFRb2IsSUFHekJoeUIsRUFBT3VnQyxhQUFlLFdBQ3BCLE9BQU9oMkUsT0FBT2tCLEtBQUtjLEtBQUtzckYsV0FHMUI3M0MsRUFBTzMwQyxLQUFPLFdBQ1osT0FBT2QsT0FBT2tCLEtBQUtjLEtBQUtzckYsVUFBVTFzRixRQUdwQzYwQyxFQUFPNjNDLE9BQVMsV0FDZCxJQUFJbDVDLEVBQVFweUMsS0FFUm8xRixHQUFTLEVBQUlua0QsRUFBd0IsU0FBRyxHQUFJanhDLEtBQUt3eUUsTUFBTThZLFVBWTNELE9BVkF0ckYsS0FBS3l5RSxNQUFNdUIsZUFBZW52RSxTQUFRLFNBQVV3bEQsR0FDMUMsSUFBSW9iLEVBQVNyekIsRUFBTWhsQyxJQUFJaTlDLFFBRVIvbUQsSUFBWG1pRSxTQUNLMnZCLEVBQU8vcUMsR0FFZCtxQyxFQUFPL3FDLEdBQVVvYixLQUlkMnZCLEdBR0Z4RyxFQXhGc0MsR0ErRi9DdnZGLEVBQU9DLFFBQVUsQ0FDZjgrQixPQUxGLFNBQWdCanFCLEdBQ2QsT0FBTyxJQUFJeTZFLEVBQTRCejZFLE0sNEJDM0d6QyxJQUFJa2hGLEVBQXVCQyxFQUV2QnpHLEVBQWMsRUFBUSxNQUV0QmxqQixFQUFvQixFQUFRLE1BRTVCMkcsRUFBMkIsRUFBUSxNQUVuQ2dCLEVBQXlCLEVBQVEsTUFFakNrQixFQUFpQyxFQUFRLE1BRXpDaCtCLEVBQVksRUFBUSxNQUlwQisrQyxHQUZVLEVBQVEsTUFFNkosUUFBN0pGLEVBQXFFLFFBQTVDQyxFQUFxQixFQUFBNXNGLEVBQU84c0Ysa0JBQStDLElBQXZCRixPQUFnQyxFQUFTQSxFQUFtQkMsc0JBQXNELElBQTFCRixFQUFtQ0EsRUFBd0IsU0FBVW4vRCxFQUFVbEIsRUFBU3h4QixFQUFNdVQsRUFBUzlWLEdBQ2hTLE9BQU9pMUIsRUFBU3BmLE1BQU1rZSxFQUFTeHhCLEtBYzdCdWxGLEVBQWlDLFdBUW5DLFNBQVNBLEVBQWtCN3JCLEVBQU9xVyxFQUFpQjFPLEdBQ2pEN2tFLEtBQUt5MUYsbUJBQW9CLEVBQ3pCejFGLEtBQUt5ekUsaUJBQW1CRixHQUFtQixLQUMzQ3Z6RSxLQUFLMDFGLHNCQUF1QixFQUM1QjExRixLQUFLMjFGLGFBQWUsSUFBSS90RixJQUN4QjVILEtBQUs0MUYsMEJBQTRCLElBQUlodUYsSUFDckM1SCxLQUFLMGdGLE9BQVN4akIsRUFDZGw5RCxLQUFLNjFGLDBCQUE0QixJQUFJanVGLElBQ3JDNUgsS0FBSzgxRixRQUFVLEtBQ2Y5MUYsS0FBSzJ6RSxXQUFhOU8sRUFPcEIsSUFBSXB4QixFQUFTczFDLEVBQWtCOXFGLFVBMlEvQixPQXpRQXcxQyxFQUFPaXhDLFlBQWMsU0FBcUI3c0QsSUFDckM3M0IsS0FBSzYxRiwwQkFBMEJ0b0UsSUFBSXNLLElBQWE3M0IsS0FBSzQxRiwwQkFBMEJyb0UsSUFBSXNLLEtBQXFLMmUsR0FBVSxHQUVyUXgyQyxLQUFLNDFGLDBCQUEwQjV0RixJQUFJNnZCLElBT3JDNGIsRUFBTzh0QyxhQUFlLFNBQXNCMXBELEdBQ3RDNzNCLEtBQUs0MUYsMEJBQTBCcm9FLElBQUlzSyxHQUVyQzczQixLQUFLNDFGLDBCQUFrQyxPQUFFLzlELEdBQ2hDNzNCLEtBQUs2MUYsMEJBQTBCdG9FLElBQUlzSyxLQUM1QzczQixLQUFLMDFGLHNCQUF1QixFQUU1QjExRixLQUFLNjFGLDBCQUFrQyxPQUFFaCtELEtBUTdDNGIsRUFBT3NpRCxVQUFZLFdBQ2pCLzFGLEtBQUswMUYsc0JBQXVCLEVBRTVCMTFGLEtBQUs0MUYsMEJBQTBCcnNDLFFBRS9CdnBELEtBQUs2MUYsMEJBQTBCdHNDLFNBT2pDOVYsRUFBTzJ4QyxjQUFnQixTQUF1Qmp3QyxFQUFXbGYsRUFBUzRCLEdBQ2hFNzNCLEtBQUswMUYsc0JBQXVCLEVBRTVCMTFGLEtBQUsyMUYsYUFBYTN0RixJQUFJLENBQ3BCeTVDLEtBQU0sVUFDTnRNLFVBQVdBLEVBQ1hsZixRQUFTQSxFQUNUNEIsUUFBU0EsS0FTYjRiLEVBQU82aEMsYUFBZSxTQUFzQno5QyxHQUMxQzczQixLQUFLMDFGLHNCQUF1QixFQUU1QjExRixLQUFLMjFGLGFBQWEzdEYsSUFBSSxDQUNwQnk1QyxLQUFNLFVBQ041cEIsUUFBU0EsS0FVYjRiLEVBQU8yM0MsYUFBZSxTQUFzQjVzRixHQUMxQ3dCLEtBQUswMUYsc0JBQXVCLEVBRTVCMTFGLEtBQUsyMUYsYUFBYTN0RixJQUFJLENBQ3BCeTVDLEtBQU0sU0FDTmpqRCxPQUFRQSxLQVFaaTFDLEVBQU8rdEMsSUFBTSxTQUFhcVEsR0FNcEI3eEYsS0FBSzAxRixzQkFDSDExRixLQUFLeTFGLG9CQUNQejFGLEtBQUswZ0YsT0FBTzJTLFVBRVpyekYsS0FBS3kxRixtQkFBb0IsR0FJN0IsSUFBSXRDLEVBQW1CbnpGLEtBQUtnMkYsY0E4QjVCLE9BNUJJaDJGLEtBQUs0MUYsMEJBQTBCOTJGLE1BQVFrQixLQUFLMDFGLHNCQUF3QjExRixLQUFLNjFGLDBCQUEwQi8yRixRQUNoR2tCLEtBQUt5MUYsb0JBQ1J6MUYsS0FBSzBnRixPQUFPbHJDLFdBRVp4MUMsS0FBS3kxRixtQkFBb0IsR0FHM0J6MUYsS0FBS2kyRixpQkFHUGoyRixLQUFLMDFGLHNCQUF1QixFQUV4QjExRixLQUFLNjFGLDBCQUEwQi8yRixLQUFPLEVBQ25Da0IsS0FBSzgxRixVQUNSOTFGLEtBQUs4MUYsUUFBVTkxRixLQUFLMGdGLE9BQU9pUyxVQUd6QjN5RixLQUFLODFGLFVBQ1A5MUYsS0FBSzgxRixRQUFRbGlELFVBRWI1ekMsS0FBSzgxRixRQUFVLE1BUVo5MUYsS0FBSzBnRixPQUFPa1IsT0FBT0MsRUFBaUJzQixJQVE3QzEvQyxFQUFPeWlELDBCQUE0QixTQUFtQ0MsR0FDcEUsSUFBSS9qRCxFQUFRcHlDLEtBRVJpMkIsRUFBVWtnRSxFQUFlbGdFLFFBQ3pCa2YsRUFBWWdoRCxFQUFlaGhELFVBQzNCdGQsRUFBVXMrRCxFQUFldCtELFFBQ3pCcjVCLEVBQVN5M0IsRUFBUXozQixPQUNqQnUxRSxFQUFnQjk5QyxFQUFRODlDLGNBQ3hCOUMsRUFBVSxJQUFJcUIsRUFBeUJ0eUUsS0FBSzBnRixPQUFPb1EsWUFBYXR5RixHQUNoRTQzRixFQUFvQixJQUFJOWlCLEVBQXVCckMsRUFBU2p4RSxLQUFLMnpFLFlBV2pFLEdBVElJLEdBQWlCQSxFQUFjbjFFLFFBQ2pDbTFFLEVBQWNsdkUsU0FBUSxTQUFVcXZFLEdBQzlCLElBQUlDLEVBQVUvaEMsRUFBTXFoQyxrQkFBb0JyaEMsRUFBTXFoQyxpQkFBaUJTLEVBQWFyUSxRQUUzRXNRLEdBQTZLMzlCLEdBQVUsR0FDeEwyOUIsRUFBUXROLE9BQU91dkIsRUFBbUJsaUIsTUFJbENyOEMsRUFBUyxDQUNYLElBQUkwcEIsRUFBV3BNLEVBQVVTLFNBQ1gsTUFBWjJMLEdBQW9LL0ssR0FBVSxHQUdoTDNlLEVBRmdDLElBQUkyOEMsRUFBK0J2RCxFQUFTbWxCLEVBQW1CNzBDLEdBQzVFODBDLEVBQWU3M0YsRUFBUStpRCxJQUk1QyxJQUFJNndDLEVBQTJCZ0UsRUFBa0I3aEIsOEJBSWpELE9BRkF2MEUsS0FBSzBnRixPQUFPeVIsUUFBUTN6RixFQUFRNHpGLEdBRXJCZ0UsRUFBa0I5aEIsZ0NBUTNCN2dDLEVBQU91aUQsWUFBYyxXQUNuQixJQUFJMzZDLEVBQVNyN0MsS0FFYixJQUFLQSxLQUFLMjFGLGFBQWE3MkYsS0FDckIsT0FBTyxFQUdULElBQUlxMEYsR0FBbUIsRUEwQnZCLE9BeEJBbnpGLEtBQUsyMUYsYUFBYTl3RixTQUFRLFNBQVV5ZCxHQUNsQyxHQUFrQixZQUFkQSxFQUFLbS9CLEtBQW9CLENBQzNCLElBQUk2MEMsRUFBMEJqN0MsRUFBTzY2QywwQkFBMEI1ekUsR0FFL0Q2d0UsRUFBbUJBLEdBQW9CbUQsT0FDbEMsR0FBa0IsV0FBZGgwRSxFQUFLbS9CLEtBQW1CLENBQ2pDLElBQUlqakQsRUFBUzhqQixFQUFLOWpCLE9BRWxCNjhDLEVBQU9xbEMsT0FBT3lSLFFBQVEzekYsT0FDakIsQ0FDTCxJQUFJcTVCLEVBQVV2VixFQUFLdVYsUUFDZnVoQixFQUFPdXlCLEVBQWtCdnRDLFNBQ3pCNnlDLEVBQVUsSUFBSXFCLEVBQXlCajNCLEVBQU9xbEMsT0FBT29RLFlBQWExM0MsR0FDbEVnOUMsRUFBb0IsSUFBSTlpQixFQUF1QnJDLEVBQVM1MUIsRUFBT3M0QixZQUNuRTRoQixFQUFlMTlELEVBQVMsS0FBTSxDQUFDdStELEdBQW9CLEtBQU0sZ0NBQ3pEakQsRUFBbUJBLEdBQW9CaUQsRUFBa0I5aEIsK0JBQ3pELElBQUk4ZCxFQUEyQmdFLEVBQWtCN2hCLDhCQUVqRGw1QixFQUFPcWxDLE9BQU95UixRQUFRLzRDLEVBQU1nNUMsT0FJaENweUYsS0FBSzIxRixhQUFhcHNDLFFBRVg0cEMsR0FTVDEvQyxFQUFPd2lELGNBQWdCLFdBQ3JCLElBQUl4M0MsRUFBU3orQyxLQUVUbzVDLEVBQU91eUIsRUFBa0J2dEMsU0FDekI2eUMsRUFBVSxJQUFJcUIsRUFBeUJ0eUUsS0FBSzBnRixPQUFPb1EsWUFBYTEzQyxHQUNoRWc5QyxFQUFvQixJQUFJOWlCLEVBQXVCckMsRUFBU2p4RSxLQUFLMnpFLFdBQVkzekUsS0FBS3l6RSxrQkFFOUU4aUIsRUFBZ0IsU0FBdUIxTCxHQUN6QyxHQUFJQSxFQUFpQjJMLGFBQWMsQ0FDakMsSUFBSUEsRUFBZTNMLEVBQWlCMkwsYUFDcENqQixFQUFlaUIsRUFBYyxLQUFNLENBQUNKLEdBQW9CLEtBQU0sc0NBQ3pELENBQ0wsSUFNSUssRUFOQXRoRCxFQUFZMDFDLEVBQWlCMTFDLFVBQzdCbGYsRUFBVTQwRCxFQUFpQjUwRCxRQUMzQjRCLEVBQVVnekQsRUFBaUJoekQsUUFDM0JyNUIsRUFBU3kzQixFQUFRejNCLE9BQ2pCdTFFLEVBQWdCOTlDLEVBQVE4OUMsY0FDeEIyaUIsRUFBNEIsSUFBSWxpQixFQUErQnZELEVBQVNtbEIsRUFBbUJqaEQsRUFBVVMsVUFHckdwM0MsSUFDRjQzRixFQUFrQnRpQixjQUFjdDFFLEVBQVF1MUUsR0FDeEMwaUIsRUFBZUosRUFBZTczRixFQUFRMjJDLEVBQVVTLFdBRzlDL2QsR0FDRjA5RCxFQUFlMTlELEVBQVMsS0FBTSxDQUFDNitELEVBQTJCRCxHQUFlLEtBQU0sb0NBTWpGejJGLEtBQUswMUYsc0JBQXdCMTFGLEtBQUs2MUYsMEJBQTBCLzJGLE1BQzlEa0IsS0FBSzYxRiwwQkFBMEJoeEYsUUFBUTB4RixHQUlyQ3YyRixLQUFLNDFGLDBCQUEwQjkyRixPQUNqQ2tCLEtBQUs0MUYsMEJBQTBCL3dGLFNBQVEsU0FBVWdtRixHQUMvQzBMLEVBQWMxTCxHQUVkcHNDLEVBQU9vM0MsMEJBQTBCN3RGLElBQUk2aUYsTUFHdkM3cUYsS0FBSzQxRiwwQkFBMEJyc0MsU0FHakN2cEQsS0FBSzBnRixPQUFPeVIsUUFBUS80QyxJQUdmMnZDLEVBblM0QixHQXNTckMsU0FBU3NOLEVBQWU3M0YsRUFBUStpRCxHQVc5QixPQVZtQnN0QyxFQUFZbnBDLEtBQUtsbkQsRUFBUStpRCxHQUFVai9CLEtBYXhEampCLEVBQU9DLFFBQVV5cEYsRyw0QkNuVmpCLElBRUkxM0MsRUFGeUIsRUFBUSxLQUVkTCxDQUF1QixFQUFRLE9BRWxENmYsRUFBb0IsRUFBUSxNQUU1QnNhLEVBQW9CLEVBQVEsTUFFNUIzMEIsRUFBWSxFQUFRLE1BRXBCOUIsRUFBVyxFQUFRLEtBQ25CbWhDLEVBQW1CbmhDLEVBQVNtaEMsaUJBQzVCRixFQUFZamhDLEVBQVNpaEMsVUFDckJHLEVBQVFwaEMsRUFBU29oQyxNQUNqQkMsRUFBZXJoQyxFQUFTcWhDLGFBQ3hCQyxFQUFrQnRoQyxFQUFTc2hDLGdCQUMzQjJnQixFQUE4QmppRCxFQUFTaWlELDRCQUN2QzFnQixFQUFrQnZoQyxFQUFTdWhDLGdCQUMzQkMsRUFBZXhoQyxFQUFTd2hDLGFBQ3hCRSxFQUFnQjFoQyxFQUFTMGhDLGNBQ3pCd2dCLEVBQWlCbGlELEVBQVNraUQsZUFDMUJDLEVBQWlCbmlELEVBQVNtaUQsZUFDMUJ4Z0IsRUFBZTNoQyxFQUFTMmhDLGFBQ3hCRSxFQUFTN2hDLEVBQVM2aEMsT0FHbEJ1Z0IsRUFEWSxFQUFRLE1BQ3FCQSw2QkFFekNybEQsRUFBWSxFQUFRLE1BQ3BCeThCLEVBQWdCejhCLEVBQVV5OEIsY0FDMUJDLEVBQXFCMThCLEVBQVUwOEIsbUJBQy9CNG9CLEVBQXlCdGxELEVBQVVzbEQsdUJBQ25DM29CLEVBQVMzOEIsRUFBVTI4QixPQUNuQmdnQixFQUFzQzM4QyxFQUFVMjhDLG9DQUNoRDRJLEVBQXVCdmxELEVBQVV1bEQscUJBQ2pDem9CLEVBQVU5OEIsRUFBVTg4QixRQUNwQmlOLEVBQW9CL3BDLEVBQVUrcEMsa0JBQzlCaE8sRUFBZ0IvN0IsRUFBVSs3QixjQUMxQlAsRUFBd0J4N0IsRUFBVXc3QixzQkFHbENncUIsRUFEWSxFQUFRLE1BQ1lBLG9CQUdoQzFiLEVBRFksRUFBUSxNQUNPQSxlQVczQnNULEVBQTJCLFdBQzdCLFNBQVNBLEVBQVlwYSxFQUFjbHpCLEdBQ2pDdmhELEtBQUttdEYsZ0JBQWlCLEVBQ3RCbnRGLEtBQUtrM0Ysa0NBQW1DLEVBQ3hDbDNGLEtBQUtvdEYsdUJBQXlCLEtBQzlCcHRGLEtBQUt5NEIsT0FBUzhvQixFQUFTSSxNQUN2QjNoRCxLQUFLcXdGLGNBQWdCNWIsRUFDckJ6MEUsS0FBS20zRixhQUFlLElBQUl2dkYsSUFDeEI1SCxLQUFLcXRGLFVBQVk5ckMsRUFDakJ2aEQsS0FBS2s4RSxXQUFhMzZCLEVBQVN0TSxVQUc3QixJQUFJeEIsRUFBU283QyxFQUFZNXdGLFVBaWpCekIsT0EvaUJBdzFDLEVBQU9pUyxLQUFPLFdBQ1osSUFBSTB4QyxFQUFrQnAzRixLQUFLcXRGLFVBQ3ZCbndGLEVBQU9rNkYsRUFBZ0JsNkYsS0FDdkJtdEQsRUFBUytzQyxFQUFnQi9zQyxPQUN6QmlrQyxFQUFrQzhJLEVBQWdCOUksZ0NBQ2xEOVEsRUFBY3RnRixFQUFLc2dGLFlBRW5CL1gsRUFBU3psRSxLQUFLcXdGLGNBQWNqakYsSUFBSWk5QyxHQVdoQ2d0QyxHQUE2Qi9JLEVBZWpDLEdBWkkrSSxHQUE0QyxNQUFmN1osR0FBaUMsTUFBVi9YLEdBQ3JDMEYsRUFBa0JwRyxRQUFRVSxLQUV4QnZvRSxFQUFLNkQsTUFBUXNwRCxJQUFXa2tCLElBQ3pDOG9CLEdBQTRCLEdBUTVCQSxHQUE0QyxNQUFmN1osR0FBaUMsTUFBVi9YLEdBQWtCNVUsRUFBa0I0c0IsK0JBQWdDLENBQzFILElBQUlTLEVBQWMvUyxFQUFrQnBHLFFBQVFVLEdBRXhDa1ksRUFBU3BDLEVBQWUyQyxHQUV4Qm9aLEVBQWF0M0YsS0FBS3F3RixjQUFjampGLElBQUl1d0UsR0FFcENDLEVBQW9DLE1BQWQwWixFQUFxQm5zQixFQUFrQjU5RCxTQUFTK3BGLEVBQVk5WixHQUFlLE1BRXpFLElBQXhCSSxFQUVGeVosR0FBNEIsRUFDSSxNQUF2QnpaLElBRVQ1OUUsS0FBS210RixnQkFBaUIsR0FRMUIsT0FKQW50RixLQUFLazNGLGtDQUFvQ0csRUFJbEMsQ0FDTC8wRSxLQUhTdGlCLEtBQUtvOEUsVUFBVWwvRSxFQUFNbXRELEVBQVEsTUFJdEMvRCxjQUFldG1ELEtBQUttdEYsZ0JBQWtCa0ssRUFDdEN0dkMsWUFBYS9uRCxLQUFLbTNGLGFBQ2xCNTFDLFNBQVV2aEQsS0FBS3F0RixVQUNmM21DLHNCQUF1QjFtRCxLQUFLb3RGLHlCQUloQzM1QyxFQUFPMm9DLFVBQVksU0FBbUJsL0UsRUFBTW10RCxFQUFRck8sR0FDbEQsSUFBSXlwQixFQUFTemxFLEtBQUtxd0YsY0FBY2pqRixJQUFJaTlDLEdBSXBDLEdBRkFycUQsS0FBS20zRixhQUFhbnZGLElBQUlxaUQsR0FFUixNQUFWb2IsRUFLRixZQUplbmlFLElBQVhtaUUsSUFDRnpsRSxLQUFLbXRGLGdCQUFpQixHQUdqQjFuQixFQUdULElBQUluakQsRUFBTzA1QixHQUFZLEdBSXZCLE9BRnNCaDhDLEtBQUttOUUsb0JBQW9CamdGLEVBQUtneUUsV0FBWXpKLEVBQVFuakQsR0FFL0NBLEVBQU8sTUFHbENteEIsRUFBTzZvQyxrQkFBb0IsU0FBMkJyN0UsR0FHcEQsT0FGQ2pCLEtBQUtrOEUsV0FBV2w5RSxlQUFlaUMsSUFBb0h1MUMsR0FBVSxHQUV2SngyQyxLQUFLazhFLFdBQVdqN0UsSUFHekJ3eUMsRUFBTzhqRCwyQkFBNkIsU0FBb0NDLEVBQVd6NkQsRUFBUTBvQyxHQUN6RixJQUFJZ3lCLEVBRUosR0FBcUosV0FBdEYsUUFBekRBLEVBQXdCejNGLEtBQUtvdEYsOEJBQThELElBQTFCcUssT0FBbUMsRUFBU0EsRUFBc0IxNkQsUUFBekksQ0FPQSxJQUFJNGtCLEVBQVEzaEQsS0FBS3F0RixVQUFVbndGLEtBQUsrRCxLQUVoQyxPQUFRODdCLEdBQ04sSUFBSyxRQVFILFlBUEEvOEIsS0FBS290Rix1QkFBeUIsQ0FDNUJyd0QsT0FBUUEsRUFDUmk0QyxNQUFPLENBQ0xuOUIsS0FBTTIvQyxFQUNONzFDLE1BQU9BLEtBS2IsSUFBSyxNQWFILE9BWm1DLE1BQS9CM2hELEtBQUtvdEYseUJBQ1BwdEYsS0FBS290Rix1QkFBeUIsQ0FDNUJyd0QsT0FBUUEsRUFDUjI2RCxPQUFRLFVBSVoxM0YsS0FBS290Rix1QkFBdUJzSyxPQUFPNzRGLEtBQUssQ0FDdENnNUMsS0FBTTIvQyxFQUNONzFDLE1BQU9BLE9BVWZsTyxFQUFPMHBDLG9CQUFzQixTQUE2QmpPLEVBQVl6SixFQUFRbmpELEdBRzVFLElBQUssSUFBSW5qQixFQUFJLEVBQUdBLEVBQUkrdkUsRUFBV3R3RSxPQUFRTyxJQUFLLENBQzFDLElBQUk4MUUsRUFBWS9GLEVBQVcvdkUsR0FFM0IsT0FBUTgxRSxFQUFVeHpCLE1BQ2hCLEtBQUttMUMsRUFLSCxHQUpDL2xDLEVBQWtCOG1DLDRCQUE0UW5oRCxHQUFVLEdBSXZSLE1BRkR4MkMsS0FBSzQzRixtQkFBbUIzaUIsRUFBV3hQLEVBQVFuakQsR0FFcEMsQ0FDdEIsSUFBSXlhLEVBQVNrNEMsRUFBVWw0QyxPQVN2QixNQVBlLFNBQVhBLEdBQ0YvOEIsS0FBS3UzRiwyQkFBMkJ0aUIsRUFBVXA5QixLQUFNOWEsRUFBUTBvQyxJQU1uRCxFQUdULE1BRUYsS0FBSzRRLEVBQ0hyMkUsS0FBSzYzRixZQUFZNWlCLEVBQVd4UCxFQUFRbmpELEdBRXBDLE1BRUYsS0FBSzR6RCxFQUNDakIsRUFBVWp2QixPQUNaaG1ELEtBQUs4M0YsZ0JBQWdCN2lCLEVBQVd4UCxFQUFRbmpELEdBRXhDdGlCLEtBQUsrM0YsVUFBVTlpQixFQUFXeFAsRUFBUW5qRCxHQUdwQyxNQUVGLEtBQUtxekQsRUFHSCxHQUZxQjMxRSxLQUFLczhFLGtCQUFrQnJILEVBQVVqeUUsYUFFL0JpeUUsRUFBVXNJLGVBQ1R2OUUsS0FBS205RSxvQkFBb0JsSSxFQUFVL0YsV0FBWXpKLEVBQVFuakQsR0FHM0UsT0FBTyxFQUlYLE1BRUYsS0FBSzJ6RCxFQUVELElBQUl1SCxFQUFjdkksRUFBVXVJLFlBRTVCLEdBQW1CLE1BQWZBLEVBQXFCLENBRXZCLElBQUk5TCxFQUFXdkcsRUFBa0JwRyxRQUFRVSxHQUV6QyxHQUFnQixNQUFaaU0sR0FBb0JBLElBQWF1RCxFQUFVbDBFLE9BQ3RCZixLQUFLbTlFLG9CQUFvQmxJLEVBQVUvRixXQUFZekosRUFBUW5qRCxHQUc1RSxPQUFPLE9BR04sR0FBSXV1QyxFQUFrQjRzQiwrQkFBZ0MsQ0FLM0QsSUFBSXVhLEVBQXNCaDRGLEtBQUttdEYsZUFDM0I4SyxFQUF3Q2o0RixLQUFLazNGLGlDQUU3Q2dCLEVBQVkvc0IsRUFBa0JwRyxRQUFRVSxHQUV0Q2tZLEVBQVNwQyxFQUFlMmMsR0FFeEJaLEVBQWF0M0YsS0FBS3F3RixjQUFjampGLElBQUl1d0UsR0FFcENDLEVBQW9DLE1BQWQwWixFQUFxQm5zQixFQUFrQjU5RCxTQUFTK3BGLEVBQVk5WixHQUFlLEtBQ3JHeDlFLEtBQUtrM0YsaUNBQW1DZSxJQUFpRSxJQUF4QnJhLEVBRWpGNTlFLEtBQUttOUUsb0JBQW9CbEksRUFBVS9GLFdBQVl6SixFQUFRbmpELEdBRXZEdGlCLEtBQUtrM0YsaUNBQW1DZSxHQUVaLElBQXhCcmEsRUFFRjU5RSxLQUFLbXRGLGVBQWlCNkssRUFDVSxNQUF2QnBhLElBRVQ1OUUsS0FBS210RixnQkFBaUIsUUFLeEJudEYsS0FBS205RSxvQkFBb0JsSSxFQUFVL0YsV0FBWXpKLEVBQVFuakQsR0FHekQsTUFHSixLQUFLdTBFLEVBRUQsSUFBS2htQyxFQUFrQnNuQyx1QkFDckIsTUFBTSxJQUFJNTBGLE1BQU0sZ0RBR2xCdkQsS0FBS280RixtQkFBbUJuakIsRUFBV3hQLEVBQVFuakQsR0FFM0MsTUFHSixLQUFLMHpELEVBQ0hoMkUsS0FBS3E0Rix1QkFBdUJwakIsRUFBV3hQLEVBQVFuakQsR0FFL0MsTUFFRixLQUFLOHpELEVBQ0hwMkUsS0FBS3M0RixrQkFBa0JyakIsRUFBV3hQLEVBQVFuakQsR0FFMUMsTUFFRixLQUFLcTBFLEVBQ0gzMkYsS0FBS3U0RiwyQ0FBMkN0akIsRUFBV3hQLEVBQVFuakQsR0FFbkUsTUFFRixLQUFLd3pELEVBQ0wsS0FBS0QsRUFFRCxJQUFJdnZCLEVBQWdCdG1ELEtBQUttdEYsZUFFckJxTCxFQUFvQng0RixLQUFLbTlFLG9CQUFvQmxJLEVBQVUvRixXQUFZekosRUFBUW5qRCxHQUkvRSxHQUZBdGlCLEtBQUttdEYsZUFBaUI3bUMsR0FFakJreUMsRUFDSCxPQUFPLEVBR1QsTUFHSixLQUFLamlCLEVBSUQsSUFGd0J2MkUsS0FBS205RSxvQkFBb0JsSSxFQUFVL0YsV0FBWXpKLEVBQVFuakQsR0FHN0UsT0FBTyxFQUdULE1BR0osS0FBS3l6RCxFQUNILElBQUlsbEIsRUFBa0J1dEIsb0NBR3BCLE1BQU0sSUFBSTc2RSxNQUFNLHdDQUZoQnZELEtBQUt5NEYsaUJBQWlCeGpCLEVBQVd4UCxFQUFRbmpELEdBSzNDLE1BRUYsUUFFa0lrMEIsR0FBVSxJQUloSixPQUFPLEdBR1QvQyxFQUFPbWtELG1CQUFxQixTQUE0QjNpQixFQUFXeFAsRUFBUW5qRCxHQUN6RSxPQUFRMnlELEVBQVVELE1BQU12ekIsTUFDdEIsS0FBSzQwQixFQUNILE9BQU9yMkUsS0FBSzYzRixZQUFZNWlCLEVBQVVELE1BQU92UCxFQUFRbmpELEdBRW5ELEtBQUs0ekQsRUFDSCxPQUFJakIsRUFBVUQsTUFBTWh2QixPQUNYaG1ELEtBQUs4M0YsZ0JBQWdCN2lCLEVBQVVELE1BQU92UCxFQUFRbmpELEdBRTlDdGlCLEtBQUsrM0YsVUFBVTlpQixFQUFVRCxNQUFPdlAsRUFBUW5qRCxHQUduRCxRQUNFMnlELEVBQVVELE1BQU12ekIsS0FDZ0hqTCxHQUFVLEtBSWhKL0MsRUFBTzJrRCxtQkFBcUIsU0FBNEJuakIsRUFBV3hQLEVBQVFuakQsR0FDekUsSUFBSTh2QixFQUFRcHlDLEtBRVJpQixFQUFPZzBFLEVBQVVoMEUsS0FDakJ5N0UsRUFBUXpILEVBQVV5SCxNQUNsQmdjLEVBQWlCempCLEVBQVV5akIsZUFDM0I5aUQsRUFBV3EvQixFQUFVci9CLFNBQ3JCL3lDLEVBQU0sQ0FDUnVuRCxLQUFNK2dCLEVBQWtCdEcsVUFBVVksR0FDbENsYixnQkFBaUJ2cUQsS0FBS3k0QixPQUN0QjZ4QixhQUFhLEVBQUlqWixFQUEwQixTQUFHLEdBQUl1RSxFQUFTMzBDLEtBQU0sS0FlL0QwM0YsRUFBaUIxQixFQWJDLENBQ3BCMkIsMkJBQTRCLFNBQW9DQyxHQUM5RCxJQUFJQyxFQUVBQyxFQUF1QixHQUUzQjNtRCxFQUFNbW1ELDJDQUEyQ00sRUFBdUIzN0YsS0FBTXVvRSxFQUFRc3pCLEdBRXRGLElBQUlDLEVBQTJFLFFBQWpFRixFQUF3QkMsRUFBcUI3cUIsVUFBc0QsSUFBMUI0cUIsT0FBbUMsRUFBU0EsRUFBc0JsakQsRUFBUzMwQyxNQUVsSyxPQURvQixpQkFBWCszRixHQUFrQyxPQUFYQSxJQUE4TnhpRCxHQUFVLEdBQ2pRd2lELEtBRytDLFdBQ3hELE9BQ0VOLEVBQWU3MUYsTUFJbkIsT0FEQXlmLEVBQUtvNkQsUUFBcUNBLEVBQVF6N0UsR0FBUTAzRixFQUNuREEsR0FHVGxsRCxFQUFPZ2xELGlCQUFtQixTQUEwQnpqQixFQUFPdlAsRUFBUW5qRCxHQUNqRSxJQUFJMmxFLEVBRUFnUixFQUFtRCxRQUFoQ2hSLEVBQWVqVCxFQUFNMEgsYUFBb0MsSUFBakJ1TCxFQUEwQkEsRUFBZWpULEVBQU0vekUsS0FDMUdxbEUsRUFBYWtILEVBQWN3SCxFQUFPaDFFLEtBQUtrOEUsWUFDdkNnZCxFQUFvQy90QixFQUFrQm9HLGtCQUFrQjlMLEVBQVFhLEdBRXBGLEdBQXlDLE1BQXJDNHlCLEVBT0YsT0FOQTUyRSxFQUFLMjJFLEdBQW1CQyxPQUVrQjUxRixJQUF0QzQxRixJQUNGbDVGLEtBQUttdEYsZ0JBQWlCLEdBR2pCK0wsRUFHVCxJQUFJQyxFQUFrQ241RixLQUFLcXdGLGNBQWNqakYsSUFBSThyRixHQUk3RCxHQUZBbDVGLEtBQUttM0YsYUFBYW52RixJQUFJa3hGLEdBRWlCLE1BQW5DQyxFQU9GLE9BTkE3MkUsRUFBSzIyRSxHQUFtQkUsT0FFZ0I3MUYsSUFBcEM2MUYsSUFDRm41RixLQUFLbXRGLGdCQUFpQixHQUdqQmdNLEVBR1QsSUFBSUMsRUFBaUJ0QyxFQUE2QnFDLEdBRWxELE9BREE3MkUsRUFBSzIyRSxHQUFtQkcsRUFDakJBLEdBR1QzbEQsRUFBT29rRCxZQUFjLFNBQXFCN2lCLEVBQU92UCxFQUFRbmpELEdBQ3ZELElBQUkrMkUsRUFFQUosRUFBb0QsUUFBakNJLEVBQWdCcmtCLEVBQU0wSCxhQUFxQyxJQUFsQjJjLEVBQTJCQSxFQUFnQnJrQixFQUFNL3pFLEtBQzdHcWxFLEVBQWFrSCxFQUFjd0gsRUFBT2gxRSxLQUFLazhFLFlBQ3ZDcnVFLEVBQVFzOUQsRUFBa0I1OUQsU0FBU2s0RCxFQUFRYSxHQU8vQyxZQUxjaGpFLElBQVZ1SyxJQUNGN04sS0FBS210RixnQkFBaUIsR0FHeEI3cUUsRUFBSzIyRSxHQUFtQnByRixFQUNqQkEsR0FHVDRsQyxFQUFPc2tELFVBQVksU0FBbUIvaUIsRUFBT3ZQLEVBQVFuakQsR0FDbkQsSUFBSWczRSxFQUVBTCxFQUFvRCxRQUFqQ0ssRUFBZ0J0a0IsRUFBTTBILGFBQXFDLElBQWxCNGMsRUFBMkJBLEVBQWdCdGtCLEVBQU0vekUsS0FDN0dxbEUsRUFBYWtILEVBQWN3SCxFQUFPaDFFLEtBQUtrOEUsWUFDdkM1SyxFQUFXbkcsRUFBa0JvRyxrQkFBa0I5TCxFQUFRYSxHQUUzRCxHQUFnQixNQUFaZ0wsRUFPRixPQU5BaHZELEVBQUsyMkUsR0FBbUIzbkIsT0FFUGh1RSxJQUFiZ3VFLElBQ0Z0eEUsS0FBS210RixnQkFBaUIsR0FHakI3YixFQUdULElBQUl0MUIsRUFBVzE1QixFQUFLMjJFLEdBQ04sTUFBWmo5QyxHQUF3QyxpQkFBYkEsR0FBa1B4RixHQUFVLEdBRXpSLElBQUkzb0MsRUFBUTdOLEtBQUtvOEUsVUFBVXBILEVBQU8xRCxFQUFVdDFCLEdBRzVDLE9BREExNUIsRUFBSzIyRSxHQUFtQnByRixFQUNqQkEsR0FHVDRsQyxFQUFPcWtELGdCQUFrQixTQUF5QjlpQixFQUFPdlAsRUFBUW5qRCxHQUMvRCxJQUVJaTNFLEVBRkFsK0MsRUFBU3I3QyxLQUlUaTVGLEVBQW9ELFFBQWpDTSxFQUFnQnZrQixFQUFNMEgsYUFBcUMsSUFBbEI2YyxFQUEyQkEsRUFBZ0J2a0IsRUFBTS96RSxLQUM3R3FsRSxFQUFha0gsRUFBY3dILEVBQU9oMUUsS0FBS2s4RSxZQUN2Q3BLLEVBQVkzRyxFQUFrQjRHLG1CQUFtQnRNLEVBQVFhLEdBRTdELEdBQWlCLE1BQWJ3TCxFQU9GLE9BTkF4dkQsRUFBSzIyRSxHQUFtQm5uQixPQUVOeHVFLElBQWR3dUUsSUFDRjl4RSxLQUFLbXRGLGdCQUFpQixHQUdqQnJiLEVBR1QsSUFBSTkxQixFQUFXMTVCLEVBQUsyMkUsR0FDTixNQUFaajlDLEdBQW9CcDRDLE1BQU1DLFFBQVFtNEMsSUFBcU94RixHQUFVLEdBQ25SLElBQUlnakQsRUFBY3g5QyxHQUFZLEdBbUI5QixPQWxCQTgxQixFQUFVanRFLFNBQVEsU0FBVXlzRSxFQUFVbW9CLEdBQ3BDLEdBQWdCLE1BQVpub0IsRUFPRixZQU5pQmh1RSxJQUFiZ3VFLElBQ0ZqMkIsRUFBTzh4QyxnQkFBaUIsUUFJMUJxTSxFQUFZQyxHQUFhbm9CLEdBSTNCLElBQUlpYixFQUFXaU4sRUFBWUMsR0FDYixNQUFabE4sR0FBd0MsaUJBQWJBLEdBQWtQLzFDLEdBQVUsR0FHelJnakQsRUFBWUMsR0FBYXArQyxFQUFPK2dDLFVBQVVwSCxFQUFPMUQsRUFBVWliLE1BRTdEanFFLEVBQUsyMkUsR0FBbUJPLEVBQ2pCQSxHQVFUL2xELEVBQU82a0Qsa0JBQW9CLFNBQTJCaGEsRUFBYzdZLEVBQVFuakQsR0FHMUUsSUFBSW8zRSxFQUFlenNCLEVBQXNCcVIsRUFBYUUsY0FDbEQ5OEUsRUFBWXlwRSxFQUFrQjU5RCxTQUFTazRELEVBQVFpMEIsR0FFbEMsTUFBYmg0RixHQWFKMUIsS0FBS3E0Rix1QkFBdUIsQ0FDMUI1MkMsS0FBTSxpQkFDTnhnRCxLQUFNcTlFLEVBQWE5bUMsYUFDbkJoMEMsS0FBTSxNQUNMaWlFLEVBQVFuakQsR0FFWEEsRUFBS3kwRSxHQUEwQnpZLEVBQWFxYixpQkFDNUNyM0UsRUFBSzAwRSxHQUF3QnQxRixRQW5CVDRCLElBQWQ1QixJQUNGMUIsS0FBS210RixnQkFBaUIsSUFxQjVCMTVDLEVBQU80a0QsdUJBQXlCLFNBQWdDdUIsRUFBZ0JuMEIsRUFBUW5qRCxHQUN0RixJQUFJdTNFLEVBQW1CdjNFLEVBQUs0ckQsR0FFSixNQUFwQjJyQixJQUNGQSxFQUFtQnYzRSxFQUFLNHJELEdBQWlCLEtBR2IsaUJBQXJCMnJCLEdBQXFELE1BQXBCQSxJQUFrTHJqRCxHQUFVLEdBRWxOLE1BQWhCbDBCLEVBQUs4ckQsS0FDUDlyRCxFQUFLOHJELEdBQVVqRCxFQUFrQnRHLFVBQVVZLElBSTdDbzBCLEVBQWlCRCxFQUFlMzRGLE1BQVEyNEYsRUFBZXAyRixLQUFPZzRFLEVBQWtCb2UsRUFBZXAyRixLQUFNeEQsS0FBS2s4RSxZQUFjLEdBQ3hINTVELEVBQUs2ckQsR0FBc0JudUUsS0FBS3k0QixPQUU1Qm80QixFQUFrQjRzQixpQ0FDcEJuN0QsRUFBSzhyRSxHQUF1Q3B1RixLQUFLazNGLG1DQUlyRHpqRCxFQUFPOGtELDJDQUE2QyxTQUFvRHVCLEVBQTBCcjBCLEVBQVFuakQsR0FDeEksSUFBSXUzRSxFQUFtQnYzRSxFQUFLNHJELEdBRUosTUFBcEIyckIsSUFDRkEsRUFBbUJ2M0UsRUFBSzRyRCxHQUFpQixLQUdiLGlCQUFyQjJyQixHQUFxRCxNQUFwQkEsSUFBa0xyakQsR0FBVSxHQUVsTixNQUFoQmwwQixFQUFLOHJELEtBQ1A5ckQsRUFBSzhyRCxHQUFVakQsRUFBa0J0RyxVQUFVWSxJQUc3QyxJQUFJczBCLEVBQWEsR0FFakIvNUYsS0FBS205RSxvQkFBb0IyYyxFQUF5QjVxQixXQUFZekosRUFBUXMwQixHQUd0RUYsRUFBaUJDLEVBQXlCNzRGLE1BQVE4NEYsR0FHN0NsTCxFQTdqQnNCLEdBZ2tCL0J4dkYsRUFBT0MsUUFBVSxDQUNmb21ELEtBMWtCRixTQUFjK3VCLEVBQWNsekIsR0FFMUIsT0FEYSxJQUFJc3RDLEVBQVlwYSxFQUFjbHpCLEdBQzdCbUUsVSw0QkNoRGhCLElBQUlzMEMsRUFBMkIsRUFBUSxNQUVuQ3J1QixFQUFpQyxXQUNuQyxTQUFTQSxFQUFrQnFHLEdBQ3pCLE9BQU9yRyxFQUFrQnZ0QyxPQUFPNHpDLEdBT2xDLE9BSkFyRyxFQUFrQnZ0QyxPQUFTLFNBQWdCNHpDLEdBQ3pDLE9BQU8sSUFBSWdvQixFQUF5QmhvQixJQUcvQnJHLEVBVDRCLEdBWXJDdHNFLEVBQU9DLFFBQVVxc0UsRyw0QkNkakIsSUFFSS9jLEVBRnlCLEVBQVEsS0FFSDVkLENBQXVCLEVBQVEsT0FFN0RpcEQsRUFBbUIsRUFBUSxNQUUzQjVuQixFQUFXNG5CLEVBQWlCNW5CLFNBQzVCZ0IsRUFBYzRtQixFQUFpQjVtQixZQUMvQmlJLEVBQVUyZSxFQUFpQjNlLFFBTTNCNGUsRUFBMkMsV0FDN0MsU0FBU0EsRUFBNEJsb0IsR0FDbkMsSUFBSTUvQixFQUFRcHlDLEtBRVpBLEtBQUttNkYsU0FBVyxJQUFJcmhGLElBRUwsTUFBWGs1RCxHQUNGaDBFLE9BQU9rQixLQUFLOHlFLEdBQVNudEUsU0FBUSxTQUFVaEMsR0FDckN1dkMsRUFBTStuRCxTQUFTanVGLElBQUlySixFQUFLbXZFLEVBQVFudkUsT0FLdEMsSUFBSTR3QyxFQUFTeW1ELEVBQTRCajhGLFVBZ0V6QyxPQTlEQXcxQyxFQUFPOFYsTUFBUSxXQUNidnBELEtBQUttNkYsU0FBVyxJQUFJcmhGLEtBR3RCMjZCLEVBQWUsT0FBSSxTQUFpQjRXLEdBQ2xDcnFELEtBQUttNkYsU0FBU2p1RixJQUFJbStDLEVBQVEsT0FHNUI1VyxFQUFPcm1DLElBQU0sU0FBYWk5QyxHQUN4QixPQUFPcnFELEtBQUttNkYsU0FBUy9zRixJQUFJaTlDLElBRzNCNVcsRUFBT3VnQyxhQUFlLFdBQ3BCLE9BQU9wd0UsTUFBTXNCLEtBQUtsRixLQUFLbTZGLFNBQVNqN0YsU0FHbEN1MEMsRUFBTzIvQixVQUFZLFNBQW1CL29CLEdBQ3BDLE9BQUtycUQsS0FBS202RixTQUFTNXNFLElBQUk4OEIsR0FJYSxNQUE3QnJxRCxLQUFLbTZGLFNBQVMvc0YsSUFBSWk5QyxHQUFrQmdwQixFQUFjaEIsRUFIaERpSixHQU1YN25DLEVBQU9sbUIsSUFBTSxTQUFhODhCLEdBQ3hCLE9BQU9ycUQsS0FBS202RixTQUFTNXNFLElBQUk4OEIsSUFHM0I1VyxFQUFPcWdELE9BQVMsU0FBZ0J6cEMsR0FDOUJycUQsS0FBS202RixTQUFpQixPQUFFOXZDLElBRzFCNVcsRUFBT3ZuQyxJQUFNLFNBQWFtK0MsRUFBUW9iLEdBQ2hDemxFLEtBQUttNkYsU0FBU2p1RixJQUFJbStDLEVBQVFvYixJQUc1Qmh5QixFQUFPMzBDLEtBQU8sV0FDWixPQUFPa0IsS0FBS202RixTQUFTcjdGLE1BR3ZCMjBDLEVBQU82M0MsT0FBUyxXQUNkLElBR0l6OEIsRUFIQTJQLEVBQU0sR0FFTjFQLEdBQVksRUFBSUYsRUFBcUMsU0FBRzV1RCxLQUFLbTZGLFVBR2pFLElBQ0UsSUFBS3JyQyxFQUFVenBELE1BQU93cEQsRUFBUUMsRUFBVXJxRCxLQUFLKzBCLE1BQU8sQ0FDbEQsSUFBSTRnRSxFQUFjdnJDLEVBQU1oaEQsTUFDcEJoTCxFQUFNdTNGLEVBQVksR0FDbEJ2c0YsRUFBUXVzRixFQUFZLEdBQ3hCNTdCLEVBQUkzN0QsR0FBT2dMLEdBRWIsTUFBTzlJLEdBQ1ArcEQsRUFBVS9yRCxFQUFFZ0MsR0FDWixRQUNBK3BELEVBQVUxckQsSUFHWixPQUFPbzdELEdBR0YwN0IsRUE3RXNDLEdBZ0YvQzc2RixFQUFPQyxRQUFVNDZGLEcsc0JDM0VqQjc2RixFQUFPQyxRQW5CZ0IsQ0FLckIreUUsU0FBVSxXQU1WZ0IsWUFBYSxjQU1iaUksUUFBUyxZLDRCQ2pCWCxJQUVJMXNCLEVBRnlCLEVBQVEsS0FFSDVkLENBQXVCLEVBQVEsT0FFN0QyNUIsRUFBb0IsRUFBUSxLQUU1QjlaLEVBQW9CLEVBQVEsTUFFNUJzYSxFQUFvQixFQUFRLE1BRTVCK1AsRUFBNkIsRUFBUSxNQUVyQ3JQLEVBQWtCLEVBQVEsTUFFMUJzUCxFQUE4QixFQUFRLE1BRXRDRSxFQUFlLEVBQVEsTUFFdkI3a0MsRUFBWSxFQUFRLE1BR3BCK2tDLEVBRFcsRUFBUSxNQUNPQSxlQUUxQjVGLEVBQVloTCxFQUFrQmdMLFVBQzlCQyxFQUFtQmpMLEVBQWtCaUwsaUJBQ3JDQyxFQUFtQmxMLEVBQWtCa0wsaUJBQ3JDQyxFQUFRbkwsRUFBa0JtTCxNQUMxQkMsRUFBZXBMLEVBQWtCb0wsYUFDakNDLEVBQWtCckwsRUFBa0JxTCxnQkFDcENDLEVBQWtCdEwsRUFBa0JzTCxnQkFDcENDLEVBQWV2TCxFQUFrQnVMLGFBQ2pDRSxFQUFnQnpMLEVBQWtCeUwsY0FDbENELEVBQWdCeEwsRUFBa0J3TCxjQUNsQ0UsRUFBZTFMLEVBQWtCMEwsYUFDakNDLEVBQWdCM0wsRUFBa0IyTCxjQUNsQ0MsRUFBUzVMLEVBQWtCNEwsT0FDM0JDLEVBQXFCN0wsRUFBa0I2TCxtQkFDdkNqSSxFQUFVMUMsRUFBZ0IwQyxRQUMxQmYsRUFBZ0IzQixFQUFnQjJCLGNBQ2hDTixFQUF3QnJCLEVBQWdCcUIsc0JBY3hDNGhCLEVBQW9DLFdBQ3RDLFNBQVNBLEVBQXFCcmEsRUFBY3gvQixFQUFXMCtDLEVBQVloWSxFQUFpQkMsR0FDbEY1N0UsS0FBSys3RSxpQkFBbUJKLFFBQXlEQSxFQUFrQixLQUNuRzM3RSxLQUFLcTZGLGVBQWlCLEtBQ3RCcjZGLEtBQUtxd0YsY0FBZ0I1YixFQUNyQnowRSxLQUFLczZGLFlBQWMzRyxFQUNuQjN6RixLQUFLazhFLFdBQWFqbkMsRUFDbEJqMUMsS0FBS204RSwrQkFBaUNQLEVBR3hDLElBQUlub0MsRUFBU3E3QyxFQUFxQjd3RixVQXNRbEMsT0FwUUF3MUMsRUFBT21nRCxLQUFPLFNBQWMxMkYsRUFBTW10RCxHQUNkLGNBQWRudEQsRUFBS3VrRCxNQUFzQyxtQkFBZHZrRCxFQUFLdWtELE9BQ3BDemhELEtBQUtxNkYsZUFBaUJuOUYsRUFBSytELE1BRzdCakIsS0FBS284RSxVQUFVbC9FLEVBQU1tdEQsSUFHdkI1VyxFQUFPMm9DLFVBQVksU0FBbUJsL0UsRUFBTW10RCxHQUMxQ3JxRCxLQUFLczZGLFlBQVl0eUYsSUFBSXFpRCxHQUVyQixJQUFJb2IsRUFBU3psRSxLQUFLcXdGLGNBQWNqakYsSUFBSWk5QyxHQUV0QixNQUFWb2IsR0FJSnpsRSxLQUFLbTlFLG9CQUFvQmpnRixFQUFLZ3lFLFdBQVl6SixJQUc1Q2h5QixFQUFPNm9DLGtCQUFvQixTQUEyQnI3RSxHQUdwRCxPQUZDakIsS0FBS2s4RSxXQUFXbDlFLGVBQWVpQyxJQUE2SHUxQyxHQUFVLEdBRWhLeDJDLEtBQUtrOEUsV0FBV2o3RSxJQUd6Qnd5QyxFQUFPMHBDLG9CQUFzQixTQUE2QmpPLEVBQVl6SixHQUNwRSxJQUFJcnpCLEVBQVFweUMsS0FFWmt2RSxFQUFXcnFFLFNBQVEsU0FBVW93RSxHQUUzQixPQUFRQSxFQUFVeHpCLE1BQ2hCLEtBQUt5MEIsRUFDQ2pCLEVBQVVqdkIsT0FDWjVULEVBQU1tb0Qsb0JBQW9CdGxCLEVBQVd4UCxHQUVyQ3J6QixFQUFNb29ELGNBQWN2bEIsRUFBV3hQLEdBR2pDLE1BRUYsS0FBS2tRLEVBQ2tCdmpDLEVBQU1rcUMsa0JBQWtCckgsRUFBVWp5RSxhQUVoQ2l5RSxFQUFVc0ksY0FDL0JuckMsRUFBTStxQyxvQkFBb0JsSSxFQUFVL0YsV0FBWXpKLEdBR2xELE1BRUYsS0FBS3dRLEVBQ0gsR0FBNkIsTUFBekJoQixFQUFVdUksWUFBcUIsQ0FDakMsSUFBSTlMLEVBQVd2RyxFQUFrQnBHLFFBQVFVLEdBRXpCLE1BQVppTSxHQUFvQkEsSUFBYXVELEVBQVVsMEUsTUFDN0NxeEMsRUFBTStxQyxvQkFBb0JsSSxFQUFVL0YsV0FBWXpKLFFBRTdDLEdBQUk1VSxFQUFrQjRzQiwrQkFBZ0MsQ0FDM0QsSUFBSXlhLEVBQVkvc0IsRUFBa0JwRyxRQUFRVSxHQUV0Q2tZLEVBQVNwQyxFQUFlMmMsR0FFNUI5bEQsRUFBTWtvRCxZQUFZdHlGLElBQUkyMUUsR0FFdEJ2ckMsRUFBTStxQyxvQkFBb0JsSSxFQUFVL0YsV0FBWXpKLFFBRWhEcnpCLEVBQU0rcUMsb0JBQW9CbEksRUFBVS9GLFdBQVl6SixHQUdsRCxNQUdGLEtBQUt1USxFQUNINWpDLEVBQU0rcUMsb0JBQW9CbEksRUFBVXIvQixTQUFTczVCLFdBQVl6SixHQUV6RCxNQUVGLEtBQUswUSxFQVVILElBQUkwSCxFQUFjMUMsRUFBNEJsRyxFQUFXL0YsRUFBWTk4QixFQUFNOHBDLFlBRXZFMkIsRUFBWTczQixPQUNkNVQsRUFBTW1vRCxvQkFBb0IxYyxFQUFhcFksR0FFdkNyekIsRUFBTW9vRCxjQUFjM2MsRUFBYXBZLEdBR25DLE1BRUYsS0FBS3FRLEVBQ0wsS0FBS1MsRUFDSG5rQyxFQUFNK3FDLG9CQUFvQmxJLEVBQVUvRixXQUFZekosR0FFaEQsTUFFRixLQUFLNFEsRUFDTCxLQUFLQyxFQUNILE1BRUYsS0FBS0UsRUFFRCxHQUFJM2xCLEVBQWtCNHNCLCtCQUFnQyxDQUNwRCxJQUFJZ2QsRUFBYXR2QixFQUFrQnBHLFFBQVFVLEdBRXZDMFksRUFBVTVDLEVBQWVrZixHQUU3QnJvRCxFQUFNa29ELFlBQVl0eUYsSUFBSW0yRSxHQUd4QixNQUdKLEtBQUsvSCxFQUNIaGtDLEVBQU1zb0Qsc0JBQXNCemxCLEVBQVd4UCxHQUV2QyxNQUVGLEtBQUtvUSxFQUNIempDLEVBQU0rcUMsb0JBQW9CbEksRUFBVS9GLFdBQVl6SixHQUVoRCxNQUVGLEtBQUtzUSxFQUNILElBQUlsbEIsRUFBa0J1dEIsb0NBR3BCLE1BQU0sSUFBSTc2RSxNQUFNLHdDQUZoQjZ1QyxFQUFNdW9ELHFCQUFxQjFsQixFQUFXeFAsR0FLeEMsTUFFRixLQUFLbVEsRUFDSCxJQUE2QyxJQUF6Q3hqQyxFQUFNK3BDLCtCQUNSLE1BR0YvcEMsRUFBTStxQyxvQkFBb0JsSSxFQUFVci9CLFNBQVNzNUIsV0FBWXpKLEdBRXpELE1BRUYsUUFFaUlqdkIsR0FBVSxRQUtqSi9DLEVBQU9pbkQsc0JBQXdCLFNBQStCcGMsRUFBYzdZLEdBQzFFLElBRUlrVyxFQUFrQjM3RSxLQUFLKzdFLGlCQUNMLE9BQXBCSixHQUFrWW5sQyxHQUFVLEdBQzlZLElBQUkrbkMsRUFBZXJSLEVBQXNCb1IsRUFBYUUsY0FDbERDLEVBQXFCdFQsRUFBa0I1OUQsU0FBU2s0RCxFQUFROFksR0FFNUQsR0FBMEIsTUFBdEJFLEVBQUosQ0FJQSxJQUFJQyxFQUF3Qi9DLEVBQWdCdnVFLElBQUlxeEUsR0FFaEQsR0FBNkIsTUFBekJDLEVBQStCLENBQ2pDLElBQUl4UCxFQUFhbU0sRUFBYXFELEdBQXVCeFAsV0FFckRsdkUsS0FBS205RSxvQkFBb0JqTyxFQUFZekosTUFPekNoeUIsRUFBTyttRCxjQUFnQixTQUF1QnhsQixFQUFPdlAsR0FDbkQsSUFBSWEsRUFBYWtILEVBQWN3SCxFQUFPaDFFLEtBQUtrOEUsWUFDdkM1SyxFQUFXbkcsRUFBa0JvRyxrQkFBa0I5TCxFQUFRYSxHQUUzQyxNQUFaZ0wsR0FJSnR4RSxLQUFLbzhFLFVBQVVwSCxFQUFPMUQsSUFHeEI3OUIsRUFBTzhtRCxvQkFBc0IsU0FBNkJ2bEIsRUFBT3ZQLEdBQy9ELElBQUlwcUIsRUFBU3I3QyxLQUVUc21FLEVBQWFrSCxFQUFjd0gsRUFBT2gxRSxLQUFLazhFLFlBQ3ZDcEssRUFBWTNHLEVBQWtCNEcsbUJBQW1CdE0sRUFBUWEsR0FFNUMsTUFBYndMLEdBSUpBLEVBQVVqdEUsU0FBUSxTQUFVeXNFLEdBQ1YsTUFBWkEsR0FDRmoyQixFQUFPK2dDLFVBQVVwSCxFQUFPMUQsT0FLOUI3OUIsRUFBT2tuRCxxQkFBdUIsU0FBOEIzbEIsRUFBT3ZQLEdBQ2pFLElBQUlhLEVBQWFrSCxFQUFjd0gsRUFBT2gxRSxLQUFLazhFLFlBQ3ZDNUssRUFBV25HLEVBQWtCb0csa0JBQWtCOUwsRUFBUWEsR0FFM0QsR0FBZ0IsTUFBWmdMLEVBQUosQ0FJQXR4RSxLQUFLczZGLFlBQVl0eUYsSUFBSXNwRSxHQUVyQixJQUFJNm5CLEVBQWtDbjVGLEtBQUtxd0YsY0FBY2pqRixJQUFJa2tFLEdBRTdELEdBQXVDLE1BQW5DNm5CLEVBQUosQ0FJQSxJQUFJcmEsRUFBaUMzVCxFQUFrQjU5RCxTQUFTNHJGLEVBQWlDamUsRUFBMkI2RCxpREFFNUgsR0FBS243RSxNQUFNQyxRQUFRaTdFLEdBQW5CLENBSUEsSUFBSW5ELEVBQWtCMzdFLEtBQUsrN0UsaUJBQ0wsT0FBcEJKLEdBQWlMbmxDLEdBQVUsR0FHN0wsSUFHSXFZLEVBSEFtd0IsRUFBZ0JoL0UsS0FBS2s4RSxXQUVyQnB0QixHQUFZLEVBQUlGLEVBQXFDLFNBQUdrd0IsR0FHNUQsSUFDRSxJQUFLaHdCLEVBQVV6cEQsTUFBT3dwRCxFQUFRQyxFQUFVcnFELEtBQUsrMEIsTUFBTyxDQUNsRCxJQUFJeWxELEVBQWFwd0IsRUFBTWhoRCxNQUN2QjdOLEtBQUtrOEUsV0FBYStDLEVBQVdocUMsVUFDN0IsSUFBSXdwQyxFQUFxQlEsRUFBVzUvRSxPQUNoQ3EvRSxFQUF3Qi9DLEVBQWdCdnVFLElBQUlxeEUsR0FFaEQsR0FBNkIsTUFBekJDLEVBQStCLENBQ2pDLElBQUl2cEMsRUFBWWttQyxFQUFhcUQsR0FFN0IxK0UsS0FBS284RSxVQUFVam5DLEVBQVdvNUIsS0FHOUIsTUFBT3hwRSxHQUNQK3BELEVBQVUvckQsRUFBRWdDLEdBQ1osUUFDQStwRCxFQUFVMXJELElBR1pwRCxLQUFLazhFLFdBQWE4QyxNQUdiOFAsRUFoUitCLEdBbVJ4Q3p2RixFQUFPQyxRQUFVLENBQ2ZzMEYsS0FoU0YsU0FBY25mLEVBQWNsekIsRUFBVW95QyxFQUFZaFksRUFBaUJDLEdBQ2pFLElBQUl2eEIsRUFBUzlJLEVBQVM4SSxPQUNsQm50RCxFQUFPcWtELEVBQVNya0QsS0FDaEIrM0MsRUFBWXNNLEVBQVN0TSxVQUNaLElBQUk2NUMsRUFBcUJyYSxFQUFjeC9CLEVBQVcwK0MsRUFBWWhZLEVBQWlCQyxHQUNyRmdZLEtBQUsxMkYsRUFBTW10RCxNLDRCQzlDcEIsSUFBSXJaLEVBQXlCLEVBQVEsTUFFakM0ZCxFQUE4QjVkLEVBQXVCLEVBQVEsT0FFN0QyVCxFQUFzQjNULEVBQXVCLEVBQVEsT0FFckQ2ZixFQUFvQixFQUFRLE1BRTVCc2EsRUFBb0IsRUFBUSxNQUk1QjMwQixHQUZXLEVBQVEsTUFFUCxFQUFRLE9BSXBCOUIsR0FGVSxFQUFRLE1BRVAsRUFBUSxNQUNuQmloQyxFQUFZamhDLEVBQVNpaEMsVUFDckJDLEVBQW1CbGhDLEVBQVNraEMsaUJBQzVCQyxFQUFtQm5oQyxFQUFTbWhDLGlCQUM1QkMsRUFBUXBoQyxFQUFTb2hDLE1BQ2pCQyxFQUFlcmhDLEVBQVNxaEMsYUFDeEJDLEVBQWtCdGhDLEVBQVNzaEMsZ0JBQzNCQyxFQUFrQnZoQyxFQUFTdWhDLGdCQUMzQkMsRUFBZXhoQyxFQUFTd2hDLGFBQ3hCQyxFQUFnQnpoQyxFQUFTeWhDLGNBQ3pCQyxFQUFnQjFoQyxFQUFTMGhDLGNBQ3pCQyxFQUFlM2hDLEVBQVMyaEMsYUFDeEJDLEVBQWdCNWhDLEVBQVM0aEMsY0FDekJDLEVBQVM3aEMsRUFBUzZoQyxPQUNsQkMsRUFBcUI5aEMsRUFBUzhoQyxtQkFFOUJwakIsRUFBWSxFQUFRLE1BQ3BCaVIsRUFBbUJqUixFQUFVaVIsaUJBSTdCc0ksR0FIYXZaLEVBQVUrWSxXQUVYLEVBQVEsTUFDb0JRLDZCQUV4Q25SLEVBQVksRUFBUSxNQUNwQm8vQixFQUFpQ3AvQixFQUFVby9CLCtCQUMzQzdiLEVBQWtEdmpCLEVBQVV1akIsZ0RBQzVERixFQUFnQ3JqQixFQUFVcWpCLDhCQUMxQzJULEVBQXlCaDNCLEVBQVVnM0IsdUJBRW5DcUksRUFBWSxFQUFRLE1BQ3BCcmYsRUFBb0JxZixFQUFVcmYsa0JBQzlCc2YsRUFBc0JELEVBQVVDLG9CQUNoQzd0QixFQUF3QjR0QixFQUFVNXRCLHNCQUNsQ0MsRUFBd0IydEIsRUFBVTN0QixzQkFDbENNLEVBQWdCcXRCLEVBQVVydEIsY0FDMUJpQixFQUFlb3NCLEVBQVVwc0IsYUFDekJGLEVBQVVzc0IsRUFBVXRzQixRQUNwQkMsRUFBWXFzQixFQUFVcnNCLFVBRXRCdXNCLEVBQVksRUFBUSxNQUNwQnhmLEVBQWlCd2YsRUFBVXhmLGVBQzNCeWYsRUFBbUJELEVBQVVDLGlCQW9CN0I5YixFQUF1QyxXQUN6QyxTQUFTQSxFQUF3QnpLLEVBQWN4L0IsRUFBVzlsQyxHQUN4RG5QLEtBQUtpN0YsV0FBYTlyRixFQUFRMDFELFVBQzFCN2tFLEtBQUtrN0YscUJBQXVCLEdBQzVCbDdGLEtBQUs2L0UsMEJBQTRCMXdFLEVBQVFzd0UseUJBQ3pDei9FLEtBQUttN0YseUJBQTJCLEdBQ2hDbjdGLEtBQUtvN0Ysb0JBQXFCLEVBQzFCcDdGLEtBQUtxN0YsMEJBQTJCLEVBQ2hDcjdGLEtBQUtzN0Ysc0JBQXdCLEdBQzdCdDdGLEtBQUt1N0YsTUFBUXBzRixFQUFRMG9DLE1BQU8sRUFBSThNLEVBQTZCLFNBQUd4MUMsRUFBUTBvQyxNQUFRLEdBQ2hGNzNDLEtBQUtxd0YsY0FBZ0I1YixFQUNyQnowRSxLQUFLazhFLFdBQWFqbkMsRUFDbEJqMUMsS0FBSzhnRixnQ0FBa0MzeEUsRUFBUXd3RSwrQkFDL0MzL0UsS0FBSytnRiwrQkFBaUM1eEUsRUFBUXl3RSw4QkFDOUM1L0UsS0FBS204RSwrQkFBaUNodEUsRUFBUXlzRSw4QkFHaEQsSUFBSW5vQyxFQUFTeXJDLEVBQXdCamhGLFVBc2xCckMsT0FwbEJBdzFDLEVBQU8yd0Msa0JBQW9CLFNBQTJCbG5GLEVBQU1tdEQsRUFBUS9uQyxHQUNsRSxJQUFJbWpELEVBQVN6bEUsS0FBS3F3RixjQUFjampGLElBQUlpOUMsR0FNcEMsT0FKQ29iLEdBQThJanZCLEdBQVUsR0FFekp4MkMsS0FBS205RSxvQkFBb0JqZ0YsRUFBTXVvRSxFQUFRbmpELEdBRWhDLENBQ0x1MkMsT0FBUSxLQUNSa2IsY0FBZS96RSxLQUFLazdGLHFCQUNwQjNXLHdCQUF5QnZrRixLQUFLbTdGLHlCQUM5QjNXLHFCQUFzQnhrRixLQUFLczdGLHNCQUMzQjk4RixPQUFRd0IsS0FBS3F3RixjQUNiNUwsU0FBUyxJQUliaHhDLEVBQU82b0Msa0JBQW9CLFNBQTJCcjdFLEdBR3BELE9BRkNqQixLQUFLazhFLFdBQVdsOUUsZUFBZWlDLElBQWdJdTFDLEdBQVUsR0FFbkt4MkMsS0FBS2s4RSxXQUFXajdFLElBR3pCd3lDLEVBQU8rbkQsZUFBaUIsU0FBd0JsNUUsR0FDOUMsSUFBSW92RCxFQUFXcHZELEVBQUttc0QsR0FFcEIsT0FEYyxNQUFaaUQsR0FBaUxsN0IsR0FBVSxHQUN0TGs3QixHQUdUaitCLEVBQU8wcEMsb0JBQXNCLFNBQTZCamdGLEVBQU11b0UsRUFBUW5qRCxHQUN0RSxJQUFLLElBQUluakIsRUFBSSxFQUFHQSxFQUFJakMsRUFBS2d5RSxXQUFXdHdFLE9BQVFPLElBQUssQ0FDL0MsSUFBSTgxRSxFQUFZLzNFLEVBQUtneUUsV0FBVy92RSxHQUVoQyxPQUFRODFFLEVBQVV4ekIsTUFDaEIsS0FBSzQwQixFQUNMLEtBQUtILEVBQ0hsMkUsS0FBS3k3RixnQkFBZ0J2K0YsRUFBTSszRSxFQUFXeFAsRUFBUW5qRCxHQUU5QyxNQUVGLEtBQUtxekQsRUFDa0IzMUUsS0FBS3M4RSxrQkFBa0JySCxFQUFVanlFLGFBRS9CaXlFLEVBQVVzSSxjQUMvQnY5RSxLQUFLbTlFLG9CQUFvQmxJLEVBQVd4UCxFQUFRbmpELEdBRzlDLE1BRUYsS0FBSzB6RCxFQUVEaDJFLEtBQUttOUUsb0JBQW9CbEksRUFBVXIvQixTQUFVNnZCLEVBQVFuakQsR0FFckQsTUFHSixLQUFLMnpELEVBRUQsSUFBSXVILEVBQWN2SSxFQUFVdUksWUFFNUIsR0FBbUIsTUFBZkEsRUFDY3JTLEVBQWtCcEcsUUFBUVUsS0FFeEJ3UCxFQUFVbDBFLE1BQzFCZixLQUFLbTlFLG9CQUFvQmxJLEVBQVd4UCxFQUFRbmpELFFBRXpDLEdBQUl1dUMsRUFBa0I0c0IsK0JBQWdDLENBQzNELElBQUlHLEVBQXNCdDdELEVBQUt0akIsZUFBZXcrRSxHQUUxQ2lkLEVBQWF0dkIsRUFBa0JwRyxRQUFRVSxHQUV2Q2tZLEVBQVNwQyxFQUFla2YsR0FFeEJuRCxFQUFhdDNGLEtBQUtxd0YsY0FBY2pqRixJQUFJdXdFLEdBRXRCLE1BQWQyWixJQUNGQSxFQUFhbnNCLEVBQWtCL3NDLE9BQU91L0MsRUFBUXFkLEdBRTlDaDdGLEtBQUtxd0YsY0FBY25rRixJQUFJeXhFLEVBQVEyWixJQUdqQ25zQixFQUFrQjM5RCxTQUFTOHBGLEVBQVk5WixFQUFhSSxHQUVoREEsR0FDRjU5RSxLQUFLbTlFLG9CQUFvQmxJLEVBQVd4UCxFQUFRbmpELE9BRXpDLENBSUwsSUFBSW81RSxFQUF1QnA1RSxFQUFLdGpCLGVBQWV3K0UsR0FFM0NtZSxFQUFnQzM3RixLQUFLcTdGLHlCQUN6Q3I3RixLQUFLcTdGLHlCQUEyQnI3RixLQUFLcTdGLDJCQUE2QkssRUFFbEUxN0YsS0FBS205RSxvQkFBb0JsSSxFQUFXeFAsRUFBUW5qRCxHQUU1Q3RpQixLQUFLcTdGLHlCQUEyQk0sRUFHbEMsTUFHSixLQUFLbmxCLEVBRUQsR0FBSTNsQixFQUFrQjRzQiwrQkFBZ0MsQ0FDcEQsSUFBSVEsRUFBZWhKLEVBQVV1SSxZQUV6Qm9lLEVBQXdCdDVFLEVBQUt0akIsZUFBZWkvRSxHQUU1QzRkLEVBQWExd0IsRUFBa0JwRyxRQUFRVSxHQUV2QzBZLEVBQVU1QyxFQUFlc2dCLEdBRXpCQyxFQUFjOTdGLEtBQUtxd0YsY0FBY2pqRixJQUFJK3dFLEdBRXRCLE1BQWYyZCxJQUNGQSxFQUFjM3dCLEVBQWtCL3NDLE9BQU8rL0MsRUFBUzZjLEdBRWhEaDdGLEtBQUtxd0YsY0FBY25rRixJQUFJaXlFLEVBQVMyZCxJQUdsQzN3QixFQUFrQjM5RCxTQUFTc3VGLEVBQWE3ZCxFQUFjMmQsR0FHeEQsTUFHSixLQUFLemxCLEVBQ0wsS0FBS0csRUFDSCxJQUFJOXlFLEVBQU95eEUsRUFBVXp4RSxLQUFPZzRFLEVBQWtCdkcsRUFBVXp4RSxLQUFNeEQsS0FBS2s4RSxZQUFjLEdBQzdFbFYsRUFBV3dHLEVBQWN5SCxFQUFXajFFLEtBQUtrOEUsWUFDekMvVixFQUFZMjBCLEVBQW9CN2xCLEVBQVdqMUUsS0FBS2s4RSxZQUVwRGw4RSxLQUFLazdGLHFCQUFxQnI4RixLQUFLLENBQzdCMkUsS0FBTUEsRUFDTjZtRCxPQUFROGdCLEVBQWtCdEcsVUFBVVksR0FDcEN1QixTQUFVQSxFQUNWbkQsT0FBUW9SLEVBQVVwUixPQUNsQnNDLFVBQVdBLEVBQ1hzQyxXQUFZd00sRUFBVXhNLFdBQWErUyxFQUFrQnZHLEVBQVV4TSxXQUFZem9FLEtBQUtrOEUsWUFBYyxLQUdoRyxNQUVGLEtBQUs5RixFQUNIcDJFLEtBQUsra0YsdUJBQXVCN25GLEVBQU0rM0UsRUFBV3hQLEVBQVFuakQsR0FFckQsTUFFRixLQUFLd3pELEVBQ0g5MUUsS0FBSys3RixnQkFBZ0I5bUIsRUFBV3hQLEVBQVFuakQsR0FFeEMsTUFFRixLQUFLaTBELEVBQ0h2MkUsS0FBS2c4RixpQkFBaUIvbUIsRUFBV3hQLEVBQVFuakQsR0FFekMsTUFFRixLQUFLdXpELEVBQ0gsSUFBSW9tQixFQUFvQmo4RixLQUFLbzdGLG1CQUM3QnA3RixLQUFLbzdGLG9CQUFxQixFQUUxQnA3RixLQUFLbTlFLG9CQUFvQmxJLEVBQVd4UCxFQUFRbmpELEdBRTVDdGlCLEtBQUtvN0YsbUJBQXFCYSxFQUMxQixNQUVGLEtBQUtybUIsRUFDSCxJQUE0QyxJQUF4QzUxRSxLQUFLbThFLCtCQUNQLE1BR0ZuOEUsS0FBS205RSxvQkFBb0JsSSxFQUFVci9CLFNBQVU2dkIsRUFBUW5qRCxHQUVyRCxNQUVGLEtBQUt5ekQsRUFDSCxJQUFJbGxCLEVBQWtCdXRCLG9DQUdwQixNQUFNLElBQUk3NkUsTUFBTSx3Q0FGaEJ2RCxLQUFLazhGLHNCQUFzQmgvRixFQUFNKzNFLEVBQVd4UCxFQUFRbmpELEdBS3RELE1BRUYsUUFFOElrMEIsR0FBVSxNQUs5Si9DLEVBQU9zb0QsZ0JBQWtCLFNBQXlCSSxFQUFPMTJCLEVBQVFuakQsSUFPNUMsS0FOYyxPQUFoQjY1RSxFQUFVLElBQWNuOEYsS0FBS3M4RSxrQkFBa0I2ZixFQUFVLEtBU3hFbjhGLEtBQUttOUUsb0JBQW9CZ2YsRUFBTzEyQixFQUFRbmpELEdBSXhDdGlCLEtBQUttN0YseUJBQXlCdDhGLEtBQUssQ0FDakM0aUQsS0FBTSxRQUNObi9CLEtBQU1BLEVBQ04rZ0UsTUFBTzhZLEVBQU05WSxNQUNieHJDLE1BQU0sRUFBSThNLEVBQTZCLFNBQUcza0QsS0FBS3U3RixPQUMvQ2g2QyxTQUFVb3JCLEVBQTRCd3ZCLEVBQU9oeEIsRUFBa0J0RyxVQUFVWSxHQUFTemxFLEtBQUtrOEUsWUFDdkZ4SyxTQUFVdkcsRUFBa0JwRyxRQUFRVSxNQUsxQ2h5QixFQUFPdW9ELGlCQUFtQixTQUEwQmh1QyxFQUFReVgsRUFBUW5qRCxHQUlsRXRpQixLQUFLbTlFLG9CQUFvQm52QixFQUFReVgsRUFBUW5qRCxJQVF0QixLQU5lLE9BQWpCMHJDLEVBQVcsSUFBY2h1RCxLQUFLczhFLGtCQUFrQnR1QixFQUFXLE1BUzFFaHVELEtBQUttN0YseUJBQXlCdDhGLEtBQUssQ0FDakM0aUQsS0FBTSxTQUNONGhDLE1BQU9yMUIsRUFBT3ExQixNQUNkeHJDLE1BQU0sRUFBSThNLEVBQTZCLFNBQUcza0QsS0FBS3U3RixPQUMvQ3pyQixTQUFVM0UsRUFBa0J0RyxVQUFVWSxHQUN0Q3ZvRSxLQUFNOHdELEVBQ04vWSxVQUFXajFDLEtBQUtrOEUsY0FLdEJ6b0MsRUFBT3N4Qyx1QkFBeUIsU0FBZ0M5VSxFQUFRcU8sRUFBYzdZLEVBQVFuakQsR0FDMUUsaUJBQVRBLEdBQXFCQSxHQUEwSWswQixHQUFVLEdBQ2xMLElBQUlrN0IsRUFBV3ZHLEVBQWtCcEcsUUFBUVUsR0FDckNpMEIsRUFBZXpzQixFQUFzQnFSLEVBQWFFLGNBQ2xENGQsRUFBcUI5NUUsRUFBS28zRSxHQUM5QnZ1QixFQUFrQjM5RCxTQUFTaTRELEVBQVFpMEIsRUFBYzBDLFFBQStEQSxFQUFxQixNQUNySSxJQUFJN2QsRUFBZXJSLEVBQXNCb1IsRUFBYUUsY0FDbERDLEVBQXFCbjhELEVBQUtpOEQsR0FDOUJwVCxFQUFrQjM5RCxTQUFTaTRELEVBQVE4WSxFQUFjRSxRQUErREEsRUFBcUIsTUFFM0csTUFBdEJBLEdBQ0Z6K0UsS0FBS3M3RixzQkFBc0J6OEYsS0FBSyxDQUM5QnlqQixLQUFNQSxFQUNOK25DLE9BQVE4Z0IsRUFBa0J0RyxVQUFVWSxHQUNwQ2daLG1CQUFvQkEsRUFDcEI1bUMsTUFBTSxFQUFJOE0sRUFBNkIsU0FBRzNrRCxLQUFLdTdGLE9BQy9DN3BCLFNBQVVBLEVBQ1Z6OEIsVUFBV2oxQyxLQUFLazhFLGNBS3RCem9DLEVBQU9nb0QsZ0JBQWtCLFNBQXlCeHJCLEVBQVFnRixFQUFXeFAsRUFBUW5qRCxHQUN6RCxpQkFBVEEsR0FBcUJBLEdBQWtKazBCLEdBQVUsR0FDMUwsSUFBSTR4QyxFQUFjblQsRUFBVXlILE9BQVN6SCxFQUFVaDBFLEtBQzNDcWxFLEVBQWFrSCxFQUFjeUgsRUFBV2oxRSxLQUFLazhFLFlBQzNDeUMsRUFBYXI4RCxFQUFLOGxFLEdBRXRCLEdBQWtCLE1BQWR6SixFQXNDQTFKLEVBQVV4ekIsT0FBUzQwQixFQUtyQmxMLEVBQWtCMzlELFNBQVNpNEQsRUFBUWEsRUFBWXFZLEdBQ3RDMUosRUFBVXh6QixPQUFTeTBCLEdBQzVCbDJFLEtBQUt1N0YsTUFBTTE4RixLQUFLdXBGLEdBRVpuVCxFQUFVanZCLE9BQ1pobUQsS0FBS3E4RixxQkFBcUJwbkIsRUFBV3hQLEVBQVFhLEVBQVlxWSxHQUV6RDMrRSxLQUFLczhGLGVBQWVybkIsRUFBV3hQLEVBQVFhLEVBQVlxWSxHQUdyRDMrRSxLQUFLdTdGLE1BQU1uOEYsT0FHc0pvM0MsR0FBVSxPQXhEN0ssQ0FDRSxRQUFtQmx6QyxJQUFmcTdFLEVBQTBCLENBWTVCLEdBRnNCMytFLEtBQUtvN0Ysb0JBQXNCcDdGLEtBQUtxN0YseUJBS3BELE9BQ0ssSUFBS3I3RixLQUFLNi9FLDBCQU9mLE9BVUoxVSxFQUFrQjM5RCxTQUFTaTRELEVBQVFhLEVBQVksUUEwQm5EN3lCLEVBQU95b0Qsc0JBQXdCLFNBQStCanNCLEVBQVFnRixFQUFXeFAsRUFBUW5qRCxHQUN2RixJQUFJOGxFLEVBQWNuVCxFQUFVeUgsT0FBU3pILEVBQVVoMEUsS0FDM0NxbEUsRUFBYWtILEVBQWN5SCxFQUFXajFFLEtBQUtrOEUsWUFDM0N5QyxFQUFhcjhELEVBQUs4bEUsR0FFdEIsR0FBa0IsTUFBZHpKLEVBQUosQ0E0QkEsSUFBSTRkLEVBQXFCM0IsRUFBK0JqYyxHQUNwRGdCLEVBQWlDMy9FLEtBQUs4Z0YsZ0NBQ2xCLE1BQXRCeWIsR0FBaVEvbEQsR0FBVSxHQUNqTyxtQkFBbkNtcEMsR0FBaVBucEMsR0FBVSxHQUVoUStsRCxFQUFtQjFqQyxPQUFPajZELE9BQVMsR0FDYyxtQkFBeENvQixLQUFLK2dGLGdDQUNkL2dGLEtBQUsrZ0YsK0JBQStCd2IsRUFBbUJ6L0MsT0FBUXkvQyxFQUFtQjFqQyxRQU10RixJQUFJMmpDLEVBQWdCbjRCLEVBQWlCOEcsRUFBa0J0RyxVQUFVWSxHQUFTK0gsRUFBY3lILEVBQVdqMUUsS0FBS2s4RSxhQUVwR2lkLEVBQWtDbjVGLEtBQUtxd0YsY0FBY2pqRixJQUFJb3ZGLEdBUTdELEdBTnVDLE1BQW5DckQsSUFDRkEsRUFBa0NodUIsRUFBa0Ivc0MsT0FBT28rRCxFQUFlaEssR0FFMUV4eUYsS0FBS3F3RixjQUFjbmtGLElBQUlzd0YsRUFBZXJELElBR1QsTUFBM0JvRCxFQUFtQjNkLEtBWXJCLE9BSEF6VCxFQUFrQjM5RCxTQUFTMnJGLEVBQWlDdGEsRUFBK0IsTUFDM0YxVCxFQUFrQjM5RCxTQUFTMnJGLEVBQWlDcGEsRUFBaUQsU0FDN0c1VCxFQUFrQnFHLGtCQUFrQi9MLEVBQVFhLEVBQVlrMkIsR0FPMUQsSUFBSUMsRUFBNEI5YyxFQUErQjRjLEVBQW1CM2QsTUFDbEZ6VCxFQUFrQjM5RCxTQUFTMnJGLEVBQWlDdGEsRUFBK0I0ZCxHQUMzRixJQUdJNXRDLEVBSEFpd0IsRUFBaUMsR0FFakNod0IsR0FBWSxFQUFJRixFQUFxQyxTQUFHMnRDLEVBQW1CbDRDLFNBRy9FLElBQ0UsSUFBS3lLLEVBQVV6cEQsTUFBT3dwRCxFQUFRQyxFQUFVcnFELEtBQUsrMEIsTUFBTyxDQUNsRCxJQUFJd2IsRUFBUTZaLEVBQU1oaEQsTUFFUyxNQUF2Qm1uQyxFQUFNeUwsU0FBU24rQixNQUNqQnRpQixLQUFLczdGLHNCQUFzQno4RixLQUFLLENBQzlCeWpCLEtBQU0weUIsRUFBTXlMLFNBQVNuK0IsS0FDckIrbkMsT0FBUWtrQixFQUNSa1EsbUJBQW9CenBDLEVBQU0zMUMsT0FDMUJ3NEMsS0FBTSxHQUNONjVCLFNBQVVsRCxFQUNWdjVCLFVBQVdELEVBQU1DLFlBSXJCNnBDLEVBQStCamdGLEtBQUssQ0FDbENRLE9BQVEyMUMsRUFBTTMxQyxPQUNkNDFDLFVBQVdELEVBQU1DLGFBR3JCLE1BQU9sd0MsR0FDUCtwRCxFQUFVL3JELEVBQUVnQyxHQUNaLFFBQ0ErcEQsRUFBVTFyRCxJQUdaLElBQ0lzeEQsRUFEQUMsR0FBYSxFQUFJL0YsRUFBcUMsU0FBRzJ0QyxFQUFtQnpxRCxXQUdoRixJQUNFLElBQUs2aUIsRUFBV3R2RCxNQUFPcXZELEVBQVNDLEVBQVdsd0QsS0FBSyswQixNQUFPLENBQ3JELElBQUlvYyxFQUFXOGUsRUFBTzdtRCxNQUVRLE1BQTFCK25DLEVBQVM2SyxTQUFTbitCLE1BQ3BCdGlCLEtBQUtzN0Ysc0JBQXNCejhGLEtBQUssQ0FDOUJ5akIsS0FBTXN6QixFQUFTNkssU0FBU24rQixLQUN4QituQyxPQUFRelUsRUFBU3dVLEtBQ2pCcTBCLG1CQUFvQjdvQyxFQUFTdjJDLE9BQzdCdzRDLEtBQU0sR0FDTjY1QixTQUFVOTdCLEVBQVM4bUQsV0FDbkJ6bkQsVUFBV1csRUFBU1gsWUFJeEI2cEMsRUFBK0JqZ0YsS0FBSyxDQUNsQ1EsT0FBUXUyQyxFQUFTdjJDLE9BQ2pCNDFDLFVBQVdXLEVBQVNYLGFBR3hCLE1BQU9sd0MsR0FDUDR2RCxFQUFXNXhELEVBQUVnQyxHQUNiLFFBQ0E0dkQsRUFBV3Z4RCxJQUdiK25FLEVBQWtCMzlELFNBQVMyckYsRUFBaUNwYSxFQUFpREQsR0FDN0czVCxFQUFrQnFHLGtCQUFrQi9MLEVBQVFhLEVBQVlrMkIsT0FwSXhELENBQ0UsUUFBbUJsNUYsSUFBZnE3RSxFQUEwQixDQVE1QixHQUFJMytFLEtBQUtxN0YseUJBR1AsT0FDSyxJQUFLcjdGLEtBQUs2L0UsMEJBT2YsT0FJSjFVLEVBQWtCMzlELFNBQVNpNEQsRUFBUWEsRUFBWSxRQStHbkQ3eUIsRUFBTzZvRCxlQUFpQixTQUF3QnRuQixFQUFPdlAsRUFBUWEsRUFBWXFZLEdBQ3pFLElBQUl1SixFQUVvQixpQkFBZnZKLEdBQTJCQSxHQUErSm5vQyxHQUFVLEdBQzdNLElBQUlnVSxFQUFTeHFELEtBQUtpN0YsV0FDbEJ0YyxFQUMrQyxRQUE5Q3VKLEVBQXNCbFQsRUFBTXVULG9CQUFrRCxJQUF4QkwsRUFBaUNBLEVBQXNCbG9GLEtBQUt3N0YsZUFBZTdjLEtBQ2xJeFQsRUFBa0JvRyxrQkFBa0I5TCxFQUFRYSxJQUFlakMsRUFBaUI4RyxFQUFrQnRHLFVBQVVZLEdBQVNhLEdBQzdGLGlCQUFYOWIsR0FBb0toVSxHQUFVLEdBTXZMMjBCLEVBQWtCcUcsa0JBQWtCL0wsRUFBUWEsRUFBWTliLEdBRXhELElBQUkwakMsRUFBYWx1RixLQUFLcXdGLGNBQWNqakYsSUFBSW85QyxHQUV4QyxHQUFLMGpDLE9BQVksQ0FFZixJQUFJeU8sRUFBYTNuQixFQUFNdVQsY0FBZ0J2b0YsS0FBS3c3RixlQUFlN2MsR0FFM0R1UCxFQUFhL2lCLEVBQWtCL3NDLE9BQU9vc0IsRUFBUW15QyxHQUU5QzM4RixLQUFLcXdGLGNBQWNua0YsSUFBSXMrQyxFQUFRMGpDLEdBTWpDbHVGLEtBQUttOUUsb0JBQW9CbkksRUFBT2taLEVBQVl2UCxJQUc5Q2xyQyxFQUFPNG9ELHFCQUF1QixTQUE4QnJuQixFQUFPdlAsRUFBUWEsRUFBWXFZLEdBQ3JGLElBQUl2c0MsRUFBUXB5QyxLQUVYNEQsTUFBTUMsUUFBUTg2RSxJQUE4S25vQyxHQUFVLEdBQ3ZNLElBQUlsRCxFQUFVNjNCLEVBQWtCNEcsbUJBQW1CdE0sRUFBUWEsR0FDdkQveUIsRUFBVSxHQUNkb3JDLEVBQVc5NUUsU0FBUSxTQUFVNndFLEVBQU0rakIsR0FDakMsSUFBSW1ELEVBR0osR0FBWSxNQUFSbG5CLEVBQUosQ0FLQXRqQyxFQUFNbXBELE1BQU0xOEYsS0FBS1IsT0FBT283RixJQUVOLGlCQUFUL2pCLEdBQTZLbC9CLEdBQVUsR0FDaE0sSUFBSWdVLEVBQVNwWSxFQUFNNm9ELFdBQ25CdmxCLEVBQ2dELFFBQS9Da25CLEVBQXVCNW5CLEVBQU11VCxvQkFBbUQsSUFBekJxVSxFQUFrQ0EsRUFBdUJ4cUQsRUFBTW9wRCxlQUFlOWxCLEtBQVVwaUMsR0FBV0EsRUFBUW1tRCxJQUNuS3AxQixFQUFpQjhHLEVBQWtCdEcsVUFBVVksR0FBU2EsRUFBWW16QixHQUM5QyxpQkFBWGp2QyxHQUFvTGhVLEdBQVUsR0FDdk1qRCxFQUFRMTBDLEtBQUsyckQsR0FFYixJQUFJMGpDLEVBQWE5N0MsRUFBTWkrQyxjQUFjampGLElBQUlvOUMsR0FFekMsR0FBSzBqQyxPQUFZLENBRWYsSUFBSTJPLEVBQWE3bkIsRUFBTXVULGNBQWdCbjJDLEVBQU1vcEQsZUFBZTlsQixHQUU1RHdZLEVBQWEvaUIsRUFBa0Ivc0MsT0FBT29zQixFQUFRcXlDLEdBRTlDenFELEVBQU1pK0MsY0FBY25rRixJQUFJcytDLEVBQVEwakMsR0FjbEM5N0MsRUFBTStxQyxvQkFBb0JuSSxFQUFPa1osRUFBWXhZLEdBRTdDdGpDLEVBQU1tcEQsTUFBTW44RixXQXRDVm0wQyxFQUFRMTBDLEtBQUs2MkUsTUF3Q2pCdkssRUFBa0I4RyxtQkFBbUJ4TSxFQUFRYSxFQUFZL3lCLElBTzNERSxFQUFPcXBELG9CQUFzQixTQUE2QnIzQixFQUFRdVAsRUFBTy8rQyxHQUN2RSxJQUFJOG1FLEVBRTJELFFBQS9DQSxFQUF1Qi9uQixFQUFNdVQsb0JBQW1ELElBQXpCd1UsR0FBeUQvOEYsS0FBS3c3RixlQUFldmxFLEdBQ3ZJazFDLEVBQWtCdEcsVUFBVVksSUFRM0NoeUIsRUFBT3VwRCwwQ0FBNEMsU0FBbUR2M0IsRUFBUWEsRUFBWXFZLEtBYTFIbHJDLEVBQU93cEQsZ0RBQWtELFNBQXlEeDNCLEVBQVF5M0IsRUFBUTF5QyxFQUFROGIsS0FPbkk0WSxFQXZtQmtDLEdBMG1CM0M3L0UsRUFBT0MsUUFBVSxDQUNmbXBGLFVBem5CRixTQUFtQmhVLEVBQWNsekIsRUFBVWQsRUFBVXR4QyxHQUNuRCxJQUFJazdDLEVBQVM5SSxFQUFTOEksT0FDbEJudEQsRUFBT3FrRCxFQUFTcmtELEtBQ2hCKzNDLEVBQVlzTSxFQUFTdE0sVUFFekIsT0FEaUIsSUFBSWlxQyxFQUF3QnpLLEVBQWN4L0IsRUFBVzlsQyxHQUNwRGkxRSxrQkFBa0JsbkYsRUFBTW10RCxFQUFRNUosTSw0QkNwRXBELElBQUlqSyxFQUFZLEVBQVEsTUFHcEJ1dUIsRUFEVyxFQUFRLE1BQ0FBLFFBTW5CeXRCLEVBQXlCLHVCQXFCN0JuekYsRUFBT0MsUUFBVSxDQUNmeS9FLGdEQXhCb0Qsd0JBeUJwREYsOEJBeEJrQyxPQXlCbEMyVCx1QkFBd0JBLEVBQ3hCc0UsNkJBZkYsU0FBc0NyeEIsR0FDbENWLEVBQVFVLEtBQVkrc0IsR0FBb0xoOEMsR0FBVSxHQUNwTixJQUFJaUssRUFBV2dsQixFQUFvQyxLQUVuRCxPQUFnQixNQUFaaGxCLEVBQ0tBLEVBR0YsTUFRUG02QywrQkF4QkYsU0FBd0Mza0UsR0FDdEMsT0FBZSxNQUFYQSxHQUFzQyxpQkFBWkEsR0FBa0QsaUJBQW5CQSxFQUFRNm1CLFNBQXdCbDVDLE1BQU1DLFFBQVFveUIsRUFBUTJvRCxPQUEwQixPQUFqQjNvRCxFQUFRMm9ELE9BQWtCaDdFLE1BQU1DLFFBQVFveUIsRUFBUW91QixVQUFhemdELE1BQU1DLFFBQVFveUIsRUFBUTZiLFlBQWVsdUMsTUFBTUMsUUFBUW95QixFQUFRNGlDLFFBSTdPNWlDLEVBSEUsUSw0QkNiWCxJQUFJNDZCLEVBQW9CLEVBQVEsTUFFNUJnK0IsRUFBYyxFQUFRLE1BSXRCc08sR0FGYSxFQUFRLE1BRUQsRUFBUSxPQUU1Qm40QyxFQUFtQixFQUFRLE1BRTNCK3BDLEVBQXVDLFdBQ3pDLFNBQVNBLEVBQXdCMXhFLEdBQy9CcmQsS0FBSzJnRixlQUFpQixJQUFJLzRFLElBQzFCNUgsS0FBSzBrRCxNQUFRcm5DLEVBR2YsSUFBSW8yQixFQUFTczdDLEVBQXdCOXdGLFVBNElyQyxPQTFJQXcxQyxFQUFPNVYsVUFBWSxTQUFtQjJYLEVBQVV0ZixHQUM5QyxJQUFJa2MsRUFBUXB5QyxLQUVSazNDLEVBQWUsQ0FDakJrbUQsT0FBUSxLQUNSbG5FLFNBQVVBLEVBQ1ZzZixTQUFVQSxFQUNWNm5ELE9BQU8sR0FTVCxPQUZBcjlGLEtBQUsyZ0YsZUFBZTM0RSxJQUFJa3ZDLEdBRWpCLENBQ0x0RCxRQVBZLFdBQ1p4QixFQUFNdXVDLGVBQXVCLE9BQUV6cEMsTUFVbkN6RCxFQUFPMi9DLHNCQUF3QixTQUErQjUwRixHQUM1RHdCLEtBQUsyZ0YsZUFBZTk3RSxTQUFRLFNBQVVxeUMsR0FhcEMsR0FBS0EsRUFBYW1tRCxNQUFsQixDQUtBLElBQUk3bkQsRUFBVzBCLEVBQWExQixTQUN4QjRuRCxFQUFTdk8sRUFBWW5wQyxLQUFLbG5ELEVBQVFnM0MsRUFBUytMLFVBQzNDckYsRUFBVzhJLEVBQWlCeFAsRUFBU2x6QixLQUFNODZFLEVBQU85NkUsTUFDdEQ4NkUsRUFBTzk2RSxLQUFPNDVCLEVBRWRoRixFQUFha21ELE9BQVNBLE9BVHBCbG1ELEVBQWFrbUQsT0FBU2xtRCxFQUFhMUIsYUFhekMvQixFQUFPNi9DLHFCQUF1QixXQUM1QnR6RixLQUFLMmdGLGVBQWU5N0UsU0FBUSxTQUFVcXlDLEdBQ3BDLElBQUlrbUQsRUFBU2xtRCxFQUFha21ELE9BQzFCbG1ELEVBQWFrbUQsT0FBUyxLQUVsQkEsR0FDRUEsRUFBTzk2RSxPQUFTNDBCLEVBQWExQixTQUFTbHpCLE9BQ3hDNDBCLEVBQWFtbUQsT0FBUSxHQUd2Qm5tRCxFQUFhMUIsU0FBVyxDQUN0Qmx6QixLQUFNNDBCLEVBQWExQixTQUFTbHpCLEtBQzVCZ2tDLGNBQWU4MkMsRUFBTzkyQyxjQUN0QnlCLFlBQWFxMUMsRUFBT3IxQyxZQUNwQnhHLFNBQVU2N0MsRUFBTzc3QyxTQUNqQm1GLHNCQUF1QjAyQyxFQUFPMTJDLHdCQUdoQ3hQLEVBQWFtbUQsT0FBUSxNQUszQjVwRCxFQUFPcStDLG9CQUFzQixTQUE2QnR6RixFQUFRd3pGLEVBQWtCck8sRUFBZWtPLEdBQ2pHLElBQUl4MkMsRUFBU3I3QyxLQUVUczlGLEVBQThDLElBQTFCdEwsRUFBaUJsekYsS0FFekNrQixLQUFLMmdGLGVBQWU5N0UsU0FBUSxTQUFVcXlDLEdBQ3BDLElBQUl5SyxFQUFRdEcsRUFBT2tpRCxvQkFBb0IvK0YsRUFBUTA0QyxFQUFjODZDLEVBQWtCc0wsRUFBbUJ6TCxHQUVyRixNQUFUbHdDLEdBQ0ZnaUMsRUFBYzlrRixLQUFLOGlELE9BY3pCbE8sRUFBTzhwRCxvQkFBc0IsU0FBNkIvK0YsRUFBUTA0QyxFQUFjODZDLEVBQWtCc0wsRUFBbUJ6TCxHQUNuSCxJQUFJdUwsRUFBU2xtRCxFQUFha21ELE9BQ3RCbG5FLEVBQVdnaEIsRUFBYWhoQixTQUN4QnNmLEVBQVcwQixFQUFhMUIsU0FDeEI2bkQsRUFBUW5tRCxFQUFhbW1ELE1BQ3JCRyxFQUF3QkYsR0FBcUJILEVBQWtCM25ELEVBQVN1UyxZQUFhaXFDLEdBRXpGLEdBQUtxTCxHQUFVRyxFQUFmLENBSUEsSUFBSUMsRUFBZUQsSUFBMEJKLEVBQVN2TyxFQUFZbnBDLEtBQUtsbkQsRUFBUWczQyxFQUFTK0wsVUFBWTY3QyxFQWlCcEcsT0FmQUssRUFBZSxDQUNibjdFLEtBRmEwaUMsRUFBaUJ4UCxFQUFTbHpCLEtBQU1tN0UsRUFBYW43RSxNQUcxRGdrQyxjQUFlbTNDLEVBQWFuM0MsY0FDNUJ5QixZQUFhMDFDLEVBQWExMUMsWUFDMUJ4RyxTQUFVazhDLEVBQWFsOEMsU0FDdkJtRixzQkFBdUIrMkMsRUFBYS8yQyx1QkFPdEN4UCxFQUFhMUIsU0FBV2lvRCxFQUN4QnZtRCxFQUFhbW1ELE9BQVEsRUFFakJJLEVBQWFuN0UsT0FBU2t6QixFQUFTbHpCLE1BQzdCdGlCLEtBQUswa0QsT0FBU21NLEVBQWtCNnNDLDRCQUNsQzE5RixLQUFLMGtELE1BQU0sQ0FDVHpqRCxLQUFNLDRCQUNONHdGLGdCQUFpQkEsRUFDakJyOEMsU0FBVUEsRUFDVmlvRCxhQUFjQSxJQUlsQnZuRSxFQUFTdW5FLEdBQ0Zqb0QsRUFBUytMLFNBQVNJLFlBWDNCLElBZUtvdEMsRUFsSmtDLEdBcUozQzF2RixFQUFPQyxRQUFVeXZGLEcsNEJDL0pqQixJQUVJbmdDLEVBRnlCLEVBQVEsS0FFSDVkLENBQXVCLEVBQVEsT0FFN0Q2ZixFQUFvQixFQUFRLE1BRTVCZytCLEVBQWMsRUFBUSxNQUl0QjdwQyxHQUZhLEVBQVEsTUFFRixFQUFRLE9BRTNCZ3FDLEVBQW1ELFdBQ3JELFNBQVNBLEVBQW9DM3hFLEdBQzNDcmQsS0FBSzI5RixrQkFBb0IsRUFDekIzOUYsS0FBSzQ5RixrQkFBb0IsRUFDekI1OUYsS0FBSzY5Rix1QkFBeUIsSUFBSS9rRixJQUNsQzlZLEtBQUs4OUYsb0JBQXNCLElBQUlsMkYsSUFDL0I1SCxLQUFLMGtELE1BQVFybkMsRUFHZixJQUFJbzJCLEVBQVN1N0MsRUFBb0Mvd0YsVUF5UmpELE9BdlJBdzFDLEVBQU81VixVQUFZLFNBQW1CMlgsRUFBVXRmLEdBQzlDLElBb0NJdytCLEVBcENBdGlCLEVBQVFweUMsS0FFUmszQyxFQUFlLENBQ2pCa21ELE9BQVEsS0FDUmxuRSxTQUFVQSxFQUNWNm5FLGlCQUFrQi85RixLQUFLMjlGLGtCQUN2QkssaUJBQWtCaCtGLEtBQUs0OUYsa0JBQ3ZCcG9ELFNBQVVBLEdBNEJSbWYsR0FBYSxFQUFJL0YsRUFBcUMsU0FBR3BaLEVBQVN1UyxhQUd0RSxJQUNFLElBQUs0TSxFQUFXdHZELE1BQU9xdkQsRUFBU0MsRUFBV2x3RCxLQUFLKzBCLE1BQU8sQ0FDckQsSUFBSXlrRSxFQUFTdnBDLEVBQU83bUQsTUFFaEJxd0YsRUFBeUJsK0YsS0FBSzY5Rix1QkFBdUJ6d0YsSUFBSTZ3RixHQUUvQixNQUExQkMsRUFDRkEsRUFBdUJsMkYsSUFBSWt2QyxHQUUzQmwzQyxLQUFLNjlGLHVCQUF1QjN4RixJQUFJK3hGLEVBQVEsSUFBSXIyRixJQUFJLENBQUNzdkMsTUFHckQsTUFBT255QyxHQUNQNHZELEVBQVc1eEQsRUFBRWdDLEdBQ2IsUUFDQTR2RCxFQUFXdnhELElBR2IsTUFBTyxDQUNMd3dDLFFBL0NZLFdBQ1osSUFDSWliLEVBREFDLEdBQVksRUFBSUYsRUFBcUMsU0FBR3BaLEVBQVN1UyxhQUdyRSxJQUNFLElBQUsrRyxFQUFVenBELE1BQU93cEQsRUFBUUMsRUFBVXJxRCxLQUFLKzBCLE1BQU8sQ0FDbEQsSUFBSXlrRSxFQUFTcHZDLEVBQU1oaEQsTUFFZnF3RixFQUF5QjlyRCxFQUFNeXJELHVCQUF1Qnp3RixJQUFJNndGLEdBRWhDLE1BQTFCQyxJQUNGQSxFQUErQixPQUFFaG5ELEdBRUcsSUFBaENnbkQsRUFBdUJwL0YsTUFDekJzekMsRUFBTXlyRCx1QkFBK0IsT0FBRUksS0FJN0MsTUFBT2w1RixHQUNQK3BELEVBQVUvckQsRUFBRWdDLEdBQ1osUUFDQStwRCxFQUFVMXJELFFBOEJoQnF3QyxFQUFPMi9DLHNCQUF3QixTQUErQjUwRixHQUM1RCxJQUFJNjhDLEVBQVNyN0MsS0FFYkEsS0FBSzQ5RixvQkFFTDU5RixLQUFLNjlGLHVCQUF1Qmg1RixTQUFRLFNBQVV1ekUsR0FDNUNBLEVBQWN2ekUsU0FBUSxTQUFVcXlDLEdBQzlCLEdBQUlBLEVBQWE4bUQsbUJBQXFCM2lELEVBQU91aUQsa0JBaUI3QyxHQWJBMW1ELEVBQWE4bUQsaUJBQW1CM2lELEVBQU91aUQsa0JBYWxDdmlELEVBQU95aUQsb0JBQW9CdndFLElBQUkycEIsR0FBcEMsQ0FLQSxJQUFJMUIsRUFBVzBCLEVBQWExQixTQUN4QjRuRCxFQUFTdk8sRUFBWW5wQyxLQUFLbG5ELEVBQVFnM0MsRUFBUytMLFVBQzNDckYsRUFBVzhJLEVBQWlCeFAsRUFBU2x6QixLQUFNODZFLEVBQU85NkUsTUFDdEQ4NkUsRUFBTzk2RSxLQUFPNDVCLEVBRWRoRixFQUFha21ELE9BQVNBLE9BVHBCbG1ELEVBQWFrbUQsT0FBU2xtRCxFQUFhMUIsZ0JBYzNDL0IsRUFBTzYvQyxxQkFBdUIsV0FDNUIsSUFBSTcwQyxFQUFTeitDLEtBRWJBLEtBQUs0OUYsb0JBRUw1OUYsS0FBSzY5Rix1QkFBdUJoNUYsU0FBUSxTQUFVdXpFLEdBQzVDQSxFQUFjdnpFLFNBQVEsU0FBVXF5QyxHQUM5QixHQUFJQSxFQUFhOG1ELG1CQUFxQnYvQyxFQUFPbS9DLGtCQUE3QyxDQUlBMW1ELEVBQWE4bUQsaUJBQW1Cdi9DLEVBQU9tL0Msa0JBQ3ZDLElBQUlSLEVBQVNsbUQsRUFBYWttRCxPQUcxQixHQUZBbG1ELEVBQWFrbUQsT0FBUyxLQUVsQkEsRUFBUSxDQUNOQSxFQUFPOTZFLE9BQVM0MEIsRUFBYTFCLFNBQVNsekIsTUFDeENtOEIsRUFBT3EvQyxvQkFBb0I5MUYsSUFBSWt2QyxHQUdqQyxJQUFJaW5ELEVBQWtCam5ELEVBQWExQixTQUFTdVMsWUFDNUM3USxFQUFhMUIsU0FBVyxDQUN0Qmx6QixLQUFNNDBCLEVBQWExQixTQUFTbHpCLEtBQzVCZ2tDLGNBQWU4MkMsRUFBTzkyQyxjQUN0QnlCLFlBQWFxMUMsRUFBT3IxQyxZQUNwQnhHLFNBQVU2N0MsRUFBTzc3QyxTQUNqQm1GLHNCQUF1QjAyQyxFQUFPMTJDLHVCQUdoQ2pJLEVBQU8yL0Msd0JBQXdCbG5ELEVBQWNpbkQsUUFFN0MxL0MsRUFBT3EvQyxvQkFBb0I5MUYsSUFBSWt2QyxXQU12Q3pELEVBQU9xK0Msb0JBQXNCLFNBQTZCdHpGLEVBQVF3ekYsRUFBa0JyTyxFQUFla08sR0FDakcsSUFBSTVwQyxFQUFTam9ELEtBRWJBLEtBQUsyOUYsb0JBQ0wzTCxFQUFpQm50RixTQUFRLFNBQVV3NUYsR0FDakMsSUFBSUMsRUFBd0JyMkMsRUFBTzQxQyx1QkFBdUJ6d0YsSUFBSWl4RixHQUVqQyxNQUF6QkMsR0FJSkEsRUFBc0J6NUYsU0FBUSxTQUFVcXlDLEdBQ3RDLEdBQUlBLEVBQWE2bUQsbUJBQXFCOTFDLEVBQU8wMUMsa0JBQTdDLENBSUEsSUFBSWg4QyxFQUFRc0csRUFBT3MxQyxvQkFBb0IvK0YsRUFBUTA0QyxHQUFjLEVBQU8yNkMsR0FFdkQsTUFBVGx3QyxHQUNGZ2lDLEVBQWM5a0YsS0FBSzhpRCxVQUt6QjNoRCxLQUFLODlGLG9CQUFvQmo1RixTQUFRLFNBQVVxeUMsR0FDekMsR0FBSUEsRUFBYTZtRCxtQkFBcUI5MUMsRUFBTzAxQyxrQkFBN0MsQ0FJQSxJQUFJaDhDLEVBQVFzRyxFQUFPczFDLG9CQUFvQi8rRixFQUFRMDRDLEdBQWMsRUFBTTI2QyxHQUV0RCxNQUFUbHdDLEdBQ0ZnaUMsRUFBYzlrRixLQUFLOGlELE9BSXZCM2hELEtBQUs4OUYsb0JBQW9CdjBDLFNBYTNCOVYsRUFBTzhwRCxvQkFBc0IsU0FBNkIvK0YsRUFBUTA0QyxFQUFjbW1ELEVBQU94TCxHQUNyRixJQUFJdUwsRUFBU2xtRCxFQUFha21ELE9BQ3RCbG5FLEVBQVdnaEIsRUFBYWhoQixTQUN4QnNmLEVBQVcwQixFQUFhMUIsU0FDeEJpb0QsRUFBZUosR0FBbUIsTUFBVkQsRUFBaUJBLEVBQVN2TyxFQUFZbnBDLEtBQUtsbkQsRUFBUWczQyxFQUFTK0wsVUFFeEZrOEMsRUFBZSxDQUNibjdFLEtBRmEwaUMsRUFBaUJ4UCxFQUFTbHpCLEtBQU1tN0UsRUFBYW43RSxNQUcxRGdrQyxjQUFlbTNDLEVBQWFuM0MsY0FDNUJ5QixZQUFhMDFDLEVBQWExMUMsWUFDMUJ4RyxTQUFVazhDLEVBQWFsOEMsU0FDdkJtRixzQkFBdUIrMkMsRUFBYS8yQyx1QkFPdEMsSUFBSXkzQyxFQUFrQmpuRCxFQUFhMUIsU0FBU3VTLFlBTTVDLEdBTEE3USxFQUFhMUIsU0FBV2lvRCxFQUN4QnZtRCxFQUFhNm1ELGlCQUFtQi85RixLQUFLMjlGLGtCQUVyQzM5RixLQUFLbytGLHdCQUF3QmxuRCxFQUFjaW5ELEdBRXZDVixFQUFhbjdFLE9BQVNrekIsRUFBU2x6QixLQVdqQyxPQVZJdGlCLEtBQUswa0QsT0FBU21NLEVBQWtCNnNDLDRCQUNsQzE5RixLQUFLMGtELE1BQU0sQ0FDVHpqRCxLQUFNLDRCQUNONHdGLGdCQUFpQkEsRUFDakJyOEMsU0FBVUEsRUFDVmlvRCxhQUFjQSxJQUlsQnZuRSxFQUFTdW5FLEdBQ0Zqb0QsRUFBUytMLFNBQVNJLE9BVzdCbE8sRUFBTzJxRCx3QkFBMEIsU0FBaUNsbkQsRUFBY2luRCxHQUM5RSxJQUNJOTBCLEVBREFFLEdBQWEsRUFBSTNhLEVBQXFDLFNBQUd1dkMsR0FHN0QsSUFDRSxJQUFLNTBCLEVBQVdsa0UsTUFBT2drRSxFQUFTRSxFQUFXOWtFLEtBQUsrMEIsTUFBTyxDQUNyRCxJQUFJeWtFLEVBQVM1MEIsRUFBT3g3RCxNQUVoQnF3RixFQUF5QmwrRixLQUFLNjlGLHVCQUF1Qnp3RixJQUFJNndGLEdBRS9CLE1BQTFCQyxJQUNGQSxFQUErQixPQUFFaG5ELEdBRUcsSUFBaENnbkQsRUFBdUJwL0YsTUFDekJrQixLQUFLNjlGLHVCQUErQixPQUFFSSxLQUk1QyxNQUFPbDVGLEdBQ1B3a0UsRUFBV3htRSxFQUFFZ0MsR0FDYixRQUNBd2tFLEVBQVdubUUsSUFHYixJQUNJOG1FLEVBREFFLEdBQWEsRUFBSXhiLEVBQXFDLFNBQUcxWCxFQUFhMUIsU0FBU3VTLGFBR25GLElBQ0UsSUFBS3FpQixFQUFXL2tFLE1BQU82a0UsRUFBU0UsRUFBVzNsRSxLQUFLKzBCLE1BQU8sQ0FDckQsSUFBSStrRSxFQUFVcjBCLEVBQU9yOEQsTUFFakIyd0YsRUFBMEJ4K0YsS0FBSzY5Rix1QkFBdUJ6d0YsSUFBSW14RixHQUUvQixNQUEzQkMsRUFDRkEsRUFBd0J4MkYsSUFBSWt2QyxHQUU1QmwzQyxLQUFLNjlGLHVCQUF1QjN4RixJQUFJcXlGLEVBQVMsSUFBSTMyRixJQUFJLENBQUNzdkMsTUFHdEQsTUFBT255QyxHQUNQcWxFLEVBQVdybkUsRUFBRWdDLEdBQ2IsUUFDQXFsRSxFQUFXaG5FLE1BSVI0ckYsRUFsUzhDLEdBcVN2RDN2RixFQUFPQyxRQUFVMHZGLEcsNEJDalRqQixJQUVJcnFDLEVBRnlCLEVBQVEsS0FFWDNULENBQXVCLEVBQVEsT0FFckQyNUIsRUFBb0IsRUFBUSxLQUU1QnZHLEVBQW9CLEVBQVEsTUFFNUI1dEIsRUFBWSxFQUFRLE1BRXBCeTFCLEVBQWEsRUFBUSxNQUVyQnd5QixFQUFXOXpCLEVBQWtCOHpCLFNBQzdCQyxFQUFVL3pCLEVBQWtCK3pCLFFBQzVCQyxFQUFlaDBCLEVBQWtCZzBCLGFBQ2pDQyxFQUFhajBCLEVBQWtCaTBCLFdBSW5DLFNBQVNDLEVBQWlCcC9GLEVBQUt3MUMsR0FDN0IsR0FBSXgxQyxFQUFJZ2lELE9BQVNnOUMsRUFFZixPQThJSixTQUFnQ3g5RixFQUFNZzBDLEdBR3BDLE9BRkNBLEVBQVVqMkMsZUFBZWlDLElBQXlIdTFDLEdBQVUsR0FFdEp5MUIsRUFBV2gzQixFQUFVaDBDLElBakpuQjY5RixDQUF1QnIvRixFQUFJcy9GLGFBQWM5cEQsR0FDM0MsR0FBSXgxQyxFQUFJZ2lELE9BQVNpOUMsRUFFdEIsT0FBT2ovRixFQUFJb08sTUFDTixHQUFJcE8sRUFBSWdpRCxPQUFTazlDLEVBQWMsQ0FDcEMsSUFBSTl3RixFQUFRLEdBSVosT0FIQXBPLEVBQUlpNEYsT0FBTzd5RixTQUFRLFNBQVVtd0UsR0FDM0JubkUsRUFBTW1uRSxFQUFNL3pFLE1BQVE0OUYsRUFBaUI3cEIsRUFBTy8vQixNQUV2Q3BuQyxFQUNGLEdBQUlwTyxFQUFJZ2lELE9BQVNtOUMsRUFBWSxDQUNsQyxJQUFJSSxFQUFTLEdBSWIsT0FIQXYvRixFQUFJOHVGLE1BQU0xcEYsU0FBUSxTQUFVNndFLEdBQ2xCLE1BQVJBLEdBQWVzcEIsRUFBT25nRyxLQUFLZ2dHLEVBQWlCbnBCLEVBQU16Z0MsT0FFN0MrcEQsR0FTWCxTQUFTeGpCLEVBQWtCaDRFLEVBQU15eEMsR0FDL0IsSUFBSXFiLEVBQVMsR0FJYixPQUhBOXNELEVBQUtxQixTQUFRLFNBQVVwRixHQUNyQjZ3RCxFQUFPN3dELEVBQUl3QixNQUFRNDlGLEVBQWlCcC9GLEVBQUt3MUMsTUFFcENxYixFQXNGVCxTQUFTMnVDLEVBQWlCaCtGLEVBQU1pK0YsR0FDOUIsSUFBS0EsRUFDSCxPQUFPaitGLEVBR1QsSUFBSXF2RCxFQUFTLEdBRWIsSUFBSyxJQUFJNnVDLEtBQVdELEVBQ2xCLEdBQUlBLEVBQVVsZ0csZUFBZW1nRyxHQUFVLENBQ3JDLElBR01yWSxFQUhGajVFLEVBQVFxeEYsRUFBVUMsR0FFVCxNQUFUdHhGLEdBR0Z5aUQsRUFBT3p4RCxLQUFLc2dHLEVBQVUsS0FBcUQsUUFBN0NyWSxFQUFrQnI2QyxLQUFLQyxVQUFVNytCLFVBQXdDLElBQXBCaTVFLEVBQTZCQSxFQUFrQixjQUt4SSxPQUF5QixJQUFsQngyQixFQUFPMXhELE9BQWVxQyxFQUFPQSxFQUFPLElBQUl5QixPQUFPNHRELEVBQU81ckQsS0FBSyxLQUFNLEtBMEIxRSxJQUFJbW5FLEVBQWtCLENBQ3BCcUMsY0FBZSxjQUNmQyxtQkFBb0Isa0JBQ3BCNG9CLHVCQUF3QixxQkFDeEJDLHFCQUFzQixxQkFFdEI1b0IsT0FBUSxPQUNSQyxRQUFTLFFBQ1RDLFNBQVUsU0FDVkMsUUFBUyxjQUNUQyxVQUFXLFNBQ1hDLGFBQWMsYUFDZG1mLG1CQUFvQixtQkFDcEJRLG9DQUFxQyxvQ0FDckM2USxpQkFBa0JBLEVBQ2xCSixpQkFBa0JBLEVBQ2xCcmpCLGtCQUFtQkEsRUFDbkJzZixvQkF2SUYsU0FBNkJqZCxFQUFhNW9DLEdBQ3hDLElBQUltcUQsRUFBYXZoQixFQUFZdWhCLFdBQ3pCdjdCLEVBQVNnYSxFQUFZaGEsT0FDckJoaEUsRUFBTWc3RSxFQUFZaDdFLElBQ2xCNUIsRUFBTzQ4RSxFQUFZNThFLEtBQ25CdUMsRUFBT3E2RSxFQUFZcjZFLEtBQ25CMGlFLEVBQVUyWCxFQUFZM1gsUUFDdEJtNUIsRUFBYWo3QixFQUFrQlAsRUFBUWhoRSxFQUFLNUIsR0FDNUNxK0YsRUFBYSxLQWlCakIsT0FmSTk3RixHQUFRMGlFLEdBQTJCLElBQWhCMWlFLEVBQUs1RSxRQUFtQyxJQUFuQnNuRSxFQUFRdG5FLFNBQ2xEMGdHLEVBQWE5N0YsRUFBS3k3RCxRQUFPLFNBQVV4L0QsR0FDakMsT0FBT3ltRSxFQUFRdHlELFFBQVFuVSxFQUFJd0IsT0FBUyxNQUlwQ20rRixJQU1GRSxFQUEyQixNQUFkQSxFQUFxQixDQUFDRixHQUFZMThGLFFBQU8sRUFBSWlpRCxFQUE2QixTQUFHMjZDLElBQWUsQ0FBQ0YsSUFHekYsT0FBZkUsRUFDS0QsRUFFQUosRUFBaUJJLEVBQVk3akIsRUFBa0I4akIsRUFBWXJxRCxLQTRHcEV1NEIsY0E5RkYsU0FBdUJ3SCxFQUFPLy9CLEdBQzVCLEdBQUkrL0IsRUFBTTFPLFdBRVIsT0FBTzBPLEVBQU0xTyxXQUdmLElBQUk5aUUsRUFBT3d4RSxFQUFNeHhFLEtBQ2J2QyxFQUFPK3pFLEVBQU0vekUsS0FDakIsT0FBT3VDLEdBQXdCLElBQWhCQSxFQUFLNUUsT0FBZXFnRyxFQUFpQmgrRixFQUFNdTZFLEVBQWtCaDRFLEVBQU15eEMsSUFBY2gwQyxHQXVGaEdxakUsb0JBM0VGLFNBQTZCcmpFLEVBQU11QyxHQUNqQyxPQUFPeTdGLEVBQWlCaCtGLEVBQU1nckUsRUFBV3pvRSxLQTJFekN5cEUsc0JBaENGLFNBQStCdVIsR0FDN0IsTUFBTyxHQUFHOTdFLE9BM0pzQix1QkEySmNBLE9BQU84N0UsSUFnQ3JEdFIsc0JBN0JGLFNBQStCc1IsR0FDN0IsTUFBTyxHQUFHOTdFLE9BOUpzQix1QkE4SmNBLE9BQU84N0UsS0E4QnZEbi9FLEVBQU9DLFFBQVV1c0UsRyw0QkM3TWpCLElBQUlyMUIsRUFBWSxFQUFRLE1BR3BCc0ssRUFEVyxFQUFRLE1BQ0lBLFlBR3ZCbEssRUFEWSxFQUFRLE1BQ0lBLFlBRXhCMm9ELEVBQWUsR0FpQ25CbGdHLEVBQU9DLFFBQVUsQ0FDZmtnRyxhQWRGLFNBQXNCcHFDLEVBQWU5VCxHQUNuQyxJQUFLaStDLEVBQWEzZ0csT0FDaEIsTUFBTSxJQUFJMkUsTUFBTSw2RUFHbEIsSUFBSXl4QixFQUFVdXFFLEVBQWFBLEVBQWEzZ0csT0FBUyxHQUM3Q3lpRCxFQUFlUCxFQUFZc1UsR0FDM0JqUCxFQUFtQnZQLEVBQVl5SyxFQUFjQyxHQUdqRCxPQUZzQixNQUFwQjZFLEdBQTZMM1AsR0FBVSxHQUM3SywyQkFBMUIyUCxFQUFpQjFFLE1BQTJOakwsR0FBVSxHQUNqUHhoQixFQUFRNGpFLDJCQUEyQnp5QyxJQUsxQzh3QyxvQkFqQ0YsU0FBNkJqaUUsRUFBU3BtQixHQUNwQzJ3RixFQUFhMWdHLEtBQUttMkIsR0FFbEIsSUFDRSxPQUFPcG1CLElBQ1AsUUFDQTJ3RixFQUFhbmdHLFUsc0JDaEJqQixJQUFJNDdFLEVBQVMsaUJBV2IzN0UsRUFBT0MsUUFBVSxDQUNmaThFLGVBVEYsU0FBd0I3SixHQUN0QixPQUFPc0osRUFBU3RKLEdBU2hCK3RCLFNBTkYsU0FBa0I1aEYsR0FDaEIsT0FBOEIsSUFBdkJBLEVBQUdqSyxRQUFRb25FLElBTWxCZ2dCLGlCQWJxQixpQiw0QkNEdkIsSUFNSWp0QixHQUFZMUosRUFORCxFQUFRLE1BQ1NBLGtCQUVoQixFQUFRLE1BQ0FrSyxRQUVrQixVQUUxQ2x2RSxFQUFPQyxRQUFVLENBQ2Z5dUUsVUFBV0EsRUFDWEMsWUFIZ0IsVyw0QkNQbEIsSUFBSTE4QixFQUFXLEVBQVEsTUFFbkJrRixFQUFZLEVBQVEsTUFHcEIwL0IsRUFEVyxFQUFRLEtBQ0tBLGFBR3hCNGtCLEVBRFksRUFBUSxNQUNZQSxvQkEyQnBDejdGLEVBQU9DLFFBbEJQLFNBQXFDdStFLEVBQWEzTyxFQUFZajZCLEdBQzVELElBQUl5cUQsRUFBY3h3QixFQUFXaEgsTUFBSyxTQUFVMXBFLEdBQzFDLE9BQU9BLEVBQU9pakQsT0FBU3kwQixHQUFnQjEzRSxFQUFPeUMsT0FBUzQ4RSxFQUFZNThFLE1BQVF6QyxFQUFPaytFLFFBQVVtQixFQUFZbkIsT0FBU3ByQyxFQUFTOXlDLEVBQU9nRixLQUFNcTZFLEVBQVlyNkUsU0FFbkprOEYsR0FBZUEsRUFBWWorQyxPQUFTeTBCLEdBQTJMMS9CLEdBQVUsR0FDM08sSUFBSTJ2QixFQUFZMjBCLEVBQW9CamQsRUFBYTVvQyxHQUNqRCxNQUFPLENBQ0x3TSxLQUFNLGNBQ05pN0IsTUFBT2dqQixFQUFZaGpCLE1BQ25CejdFLEtBQU1rbEUsRUFDTkcsV0FBWUgsRUFDWjNpRSxLQUFNLEtBQ04ra0YsYUFBY21YLEVBQVluWCxhQUMxQnZpQyxPQUFRMDVDLEVBQVkxNUMsT0FDcEJrcEIsV0FBWXd3QixFQUFZeHdCLGMsNEJDL0I1QixJQUFJNTlCLEVBQVcsRUFBUSxNQUVuQmtGLEVBQVksRUFBUSxNQUdwQjYvQixFQURXLEVBQVEsS0FDS0EsYUFHeEJ5a0IsRUFEWSxFQUFRLE1BQ1lBLG9CQXVCcEN6N0YsRUFBT0MsUUFmUCxTQUEyQ3UrRSxFQUFhM08sRUFBWWo2QixHQUNsRSxJQUFJeXFELEVBQWN4d0IsRUFBV2hILE1BQUssU0FBVTFwRSxHQUMxQyxPQUFPQSxFQUFPaWpELE9BQVM0MEIsR0FBZ0I3M0UsRUFBT3lDLE9BQVM0OEUsRUFBWTU4RSxNQUFRekMsRUFBT2srRSxRQUFVbUIsRUFBWW5CLE9BQVNwckMsRUFBUzl5QyxFQUFPZ0YsS0FBTXE2RSxFQUFZcjZFLFNBRW5KazhGLEdBQWVBLEVBQVlqK0MsT0FBUzQwQixHQUFpTTcvQixHQUFVLEdBQ2pQLElBQUkydkIsRUFBWTIwQixFQUFvQmpkLEVBQWE1b0MsR0FDakQsTUFBTyxDQUNMd00sS0FBTSxjQUNOaTdCLE1BQU9nakIsRUFBWWhqQixNQUNuQno3RSxLQUFNa2xFLEVBQ05HLFdBQVlILEVBQ1ozaUUsS0FBTSxRLDJCQzNCVixJQUFJcW9GLEVBQWtDLEVBQVEsTUFFaEMsRUFBUSxNQWN0QnhzRixFQUFPQyxRQVpQLFNBQW9DMDFCLEVBQVNpZCxFQUFlSCxFQUFXcHNDLEVBQU9xdEMsRUFBcUI3YyxHQVNqRyxPQUFPLElBQUkyMUQsRUFBZ0M3MkQsRUFBUzhjLEVBQVdwc0MsRUFBT3d3QixFQUFVNmMsSywyQkNibEYsSUFFSUYsRUFDQThzRCxFQUhBbnBELEVBQVksRUFBUSxNQW9CeEJuM0MsRUFBT0MsUUFmUCxTQUE0QnNnRyxHQVkxQixPQVhLL3NELElBQ0hBLEVBQWUrc0QsRUFBTTEvQyxjQUFjLE1BTW5DeS9DLEVBQWFDLEdBR2JBLElBQVVELEdBQTJKbnBELEdBQVUsR0FDMUszRCxJLDRCQ2pCVCxJQUFJNkIsRUFBVyxFQUFRLE1BQ25CcTVCLEVBQVlyNUIsRUFBU3E1QixVQUNyQkMsRUFBY3Q1QixFQUFTczVCLFlBWTNCM3VFLEVBQU9DLFFBVlAsU0FBMEJxL0UsRUFBWWpOLEdBQ3BDLE9BQUlBLElBQWExRCxHQUVTLE1BQWpCMlEsRUFBVzlnRSxHQUFha3dELEVBSTFCNFEsRUFBVzlnRSxLLHNCQ05wQnhlLEVBQU9DLFFBTjBCLFNBQW9DaXFCLE0sc0JDQ3JFLElBQUlzMkUsRUFBZXowRixPQUFPSyxTQW9CMUJwTSxFQUFPQyxRQWxCUCxTQUEyQnlvRCxFQUFhaXFDLEdBS3RDLElBSEEsSUFBSXZtRixFQUFXczhDLEVBQVk4M0MsS0FDdkIzcUUsRUFBT3pwQixFQUFTeXBCLFFBRVpBLEVBQUtzRSxNQUFNLENBQ2pCLElBQUkzMkIsRUFBTXF5QixFQUFLcm5CLE1BRWYsR0FBSW1rRixFQUFpQnprRSxJQUFJMXFCLEdBQ3ZCLE9BQU8sRUFHVHF5QixFQUFPenBCLEVBQVN5cEIsT0FHbEIsT0FBTyxJLHFCQ0xUNzFCLEVBQU9DLFFBSlAsU0FBa0NzekMsR0FDaEMsT0FBT2t0RCxRQUFRbHRELEdBQWVBLEVBQVksK0IsNEJDVDVDLElBQUk0RCxFQUFZLEVBQVEsTUFHcEJ3MkIsRUFEVyxFQUFRLE1BQ2NBLHNCQUdqQ2tCLEVBRFksRUFBUSxNQUNNQSxjQWtCOUI3dUUsRUFBT0MsUUFoQlAsU0FBd0JzMkMsRUFBVTBMLEdBQ2hDLElBQUl5K0MsRUFFQUMsRUFBcUJoekIsRUFBc0JwM0IsR0FFL0MsR0FBbUIsTUFBZjBMLEVBQ0YsT0FBT0EsRUFHZ0IsaUJBQWhCQSxHQUE4SjlLLEdBQVUsR0FFakwsSUFBSXVqRCxFQUFzRSxRQUF4RGdHLEVBQXdCeitDLEVBQVk0c0IsVUFBc0QsSUFBMUI2eEIsT0FBbUMsRUFBU0EsRUFBc0JDLEVBQW1CLytGLE1BRXZLLE9BRGdCLE1BQWQ4NEYsR0FBZ012akQsR0FBVSxHQUNyTXVqRCxJLDRCQ3JCVCxJQUFJbHZCLEVBQWlDLEVBQVEsTUFFekNoYSxFQUFvQixFQUFRLE1BSzVCamMsR0FIVSxFQUFRLE1BRVAsRUFBUSxNQUNHQSxZQUd0QnMzQixFQURZLEVBQVEsTUFDZUEsdUJBR25DdjNCLEVBRFksRUFBUSxNQUNrQkEsMEJBR3RDaTRCLEVBRFksRUFBUSxNQUNhQSxxQkE0RHJDdnRFLEVBQU9DLFFBMURQLFNBQTZCc3pDLEVBQWErbEIsR0FDeEMsSUFBSXpoQixFQUFldEMsRUFBVytqQixFQUFPemhCLGNBRXJDLEdBQTBDLGlCQUF0Q0EsRUFBYWtJLE9BQU8rMUIsY0FDdEIsTUFBTSxJQUFJNXhFLE1BQU0sd0RBR2xCLElBQUk2ckUsRUFBVXpXLEVBQU95VyxRQUNqQnhXLEVBQWNELEVBQU9DLFlBQ3JCN2hELEVBQVU0aEQsRUFBTzVoRCxRQUNqQm9sQyxFQUFTd2MsRUFBT3hjLE9BQ2hCbEgsRUFBWTBqQixFQUFPMWpCLFVBQ25CeUcsRUFBY2lkLEVBQU9qZCxZQUNyQnZHLEVBQVlSLEVBQTBCdUMsRUFBY2pDLEVBQVd5RyxFQUFhbVYsRUFBa0JvekIsZ0NBQWtDL1gsU0FBMkI1b0UsR0FNM0p1MEIsR0FIT3UzQyxFQUFVdkUsRUFBK0JzRSxRQUFRQyxFQUFTbDRCLEVBQWMsS0FFakZ5aEIsRUFBTzlnQyxTQUFXOGdDLEdBQ0Q5Z0MsUUFrQ25CLE1BQU8sQ0FDTCtiLFFBakNRaEIsRUFBWWlKLFFBQVEsQ0FDNUIxRyxVQUFXQSxFQUNYdGQsUUFBU0EsSUFDUnJ6QixLQUFJLFNBQVU4OUUsR0FDZixJQUdNOTNCLEVBR0V5MUMsRUFBYUMsRUFJYkMsRUFWSjUrQyxFQUFXcE0sRUFBVVMsU0FFckJpYixFQUFrQm96QixrQ0FhRSxpQkFQcEJ6NUIsRUFIRTVtRCxNQUFNQyxRQUFReStFLEdBRzBCLFFBQWhDMmQsRUFBYzNkLEVBQVUsVUFBZ0MsSUFBaEIyZCxHQUF1RixRQUFwREMsRUFBd0JELEVBQVk3bUIsa0JBQWtELElBQTFCOG1CLE9BQXRFLEVBQWtIQSxFQUFzQmhjLDZCQUl2SixRQUFsRGljLEVBQXdCN2QsRUFBVWxKLGtCQUFrRCxJQUExQittQixPQUFtQyxFQUFTQSxFQUFzQmpjLGdDQUl0STNpQyxFQUFXcXJCLEVBQXFCcnJCLEVBQVNya0QsS0FBTXN0RCxFQUFRakosRUFBU3RNLFVBQVdzTSxFQUFTSSxTQU14RixPQUZXL08sRUFBWStDLE9BQU80TCxHQUFVai9CLFFBR3ZDdWIsVUFBVSxDQUNYM0ksS0FBTWluQixFQUNOOTRDLE1BQU8wVCxFQUNQaWdDLFNBQVU0aEIsSUFHRzNoQixlLHFCQzVCakI1M0MsRUFBT0MsUUEvQmlCLENBQ3RCcTJFLFVBQVcsWUFDWEMsaUJBQWtCLGtCQUNsQkMsaUJBQWtCLGtCQUNsQkMsTUFBTyxRQUNQdlIsV0FBWSxhQUNad1IsYUFBYyxjQUNkdUQsU0FBVSxXQUNWdEQsZ0JBQWlCLGlCQUNqQjJnQiw0QkFBNkIsMkJBQzdCbmQscUJBQXNCLHFCQUN0QnZELGdCQUFpQixpQkFDakJDLGFBQWMsY0FDZEMsY0FBZSxlQUNmdW9CLFFBQVMsVUFDVEUsV0FBWSxZQUNad0IsZUFBZ0IsZ0JBQ2hCaHFCLGNBQWUsZUFDZnlnQixlQUFnQixnQkFDaEJELGVBQWdCLGdCQUNoQitILGFBQWMsY0FDZDBCLFVBQVcsWUFDWDltQixRQUFTLFVBQ1QrbUIsY0FBZSxlQUNmanFCLGFBQWMsY0FDZEMsY0FBZSxlQUNmaXFCLGdCQUFpQixpQkFDakJocUIsT0FBUSxTQUNSQyxtQkFBb0Isb0JBQ3BCaW9CLFNBQVUsYSxzQkMxQ1pwL0YsRUFBT0MsUUFBVSxDQUNmMnVFLG1CQUFvQixLLHNCQ0V0QixTQUFTdXlCLEVBQVl6L0YsRUFBTUUsRUFBTXcvRixHQUMvQixJQUFLLElBQUlDLEVBQU90L0YsVUFBVXhDLE9BQVEraEcsRUFBZ0IsSUFBSS84RixNQUFNODhGLEVBQU8sRUFBSUEsRUFBTyxFQUFJLEdBQUk1c0QsRUFBTyxFQUFHQSxFQUFPNHNELEVBQU01c0QsSUFDM0c2c0QsRUFBYzdzRCxFQUFPLEdBQUsxeUMsVUFBVTB5QyxHQUd0QyxJQUFJOWEsRUFBUSxFQUNSNkssRUFBVTQ4RCxFQUFjLzhGLFFBQVEsT0FBTyxXQUN6QyxPQUFPckYsT0FBT3NpRyxFQUFjM25FLFNBRTFCajBCLEVBQU0sSUFBSXhCLE1BQU1zZ0MsR0FDaEJ4Z0MsRUFBUXJGLE9BQU9vRyxPQUFPVyxFQUFLLENBQzdCOUQsS0FBTUEsRUFDTncvRixjQUFlQSxFQUNmRSxjQUFlQSxFQUNmNS9GLEtBQU1BLEVBQ042L0YsWUFBYSxDQUFDLEVBQUcsS0FLbkIsUUFBb0J0OUYsSUFBaEJELEVBQU11SSxNQUVSLElBQ0UsTUFBTXZJLEVBQ04sTUFBTzBsRSxJQUdYLE9BQU8xbEUsRUFHVGhFLEVBQU9DLFFBQVUsQ0FDZjgrQixPQUFRLFNBQWdCbjlCLEVBQU13L0YsR0FDNUIsSUFBSyxJQUFJSSxFQUFRei9GLFVBQVV4QyxPQUFRK2hHLEVBQWdCLElBQUkvOEYsTUFBTWk5RixFQUFRLEVBQUlBLEVBQVEsRUFBSSxHQUFJdlUsRUFBUSxFQUFHQSxFQUFRdVUsRUFBT3ZVLElBQ2pIcVUsRUFBY3JVLEVBQVEsR0FBS2xyRixVQUFVa3JGLEdBR3ZDLE9BQU9rVSxFQUFZMXBGLFdBQU0sRUFBUSxDQUFDLFFBQVM3VixFQUFNdy9GLEdBQWUvOUYsT0FBT2krRixLQUV6RUcsY0FBZSxTQUF1QjcvRixFQUFNdy9GLEdBQzFDLElBQUssSUFBSU0sRUFBUTMvRixVQUFVeEMsT0FBUStoRyxFQUFnQixJQUFJLzhGLE1BQU1tOUYsRUFBUSxFQUFJQSxFQUFRLEVBQUksR0FBSW5VLEVBQVEsRUFBR0EsRUFBUW1VLEVBQU9uVSxJQUNqSCtULEVBQWMvVCxFQUFRLEdBQUt4ckYsVUFBVXdyRixHQUd2QyxPQUFPNFQsRUFBWTFwRixXQUFNLEVBQVEsQ0FBQyxPQUFRN1YsRUFBTXcvRixHQUFlLzlGLE9BQU9pK0YsTyxzQkM3QjFFdGhHLEVBQU9DLFFBakJpQixDQUN0QjBoRyxnQ0FBZ0MsRUFDaENqWCxrQ0FBa0MsRUFDbEN5RCxrQ0FBa0MsRUFDbEMvUCxnQ0FBZ0MsRUFDaENXLHFDQUFxQyxFQUNyQ3VaLDRCQUE0QixFQUM1QlEsd0JBQXdCLEVBQ3hCOEksMkNBQTJDLEVBQzNDQyxvQ0FBb0MsRUFDcEN4USxxQ0FBcUMsRUFDckNyK0Isb0NBQW9DLEVBQ3BDOHVDLCtCQUErQixFQUMvQnpELDRCQUE0QixFQUM1QnpaLGlDQUFpQyxFQUNqQ1AsOEJBQThCLEksc0JDZmhDLElBQUkwZCxFQUF3QixHQUN4QkMsRUFBa0IsQ0FDcEJDLEtBQU0sY0ErQko3MUIsRUFBZ0IsQ0FjbEI4MUIsUUFBUyxTQUFpQnRnRyxFQUFNMjJCLEdBQzlCLElBQUk4akQsRUFBVzBsQixFQUFzQm5nRyxHQUVyQyxHQUFJeTZFLEdBQVlBLEVBQVM5OEUsT0FBUyxFQUFHLENBR25DLElBRkEsSUFBSTRpRyxFQUFlLEdBRVZoaEUsRUFBS2s3QyxFQUFTOThFLE9BQVMsRUFBRzRoQyxHQUFNLEVBQUdBLElBQU0sQ0FDaEQsSUFBSWloRSxFQUFjL2xCLEVBQVNsN0MsR0FBSXYvQixFQUFNMjJCLEdBQ3JDNHBFLEVBQWFyeUUsUUFBUXN5RSxHQUd2QixNQUFPLENBQ0xILEtBQU0sU0FBY2orRixHQUNsQm0rRixFQUFhMzhGLFNBQVEsU0FBVTQ4RixHQUM3QixPQUFPQSxFQUFZcCtGLFFBTTNCLE9BQU9nK0YsR0FNVEsscUJBQXNCLFNBQThCemdHLEVBQU1rekUsR0FDbkRpdEIsRUFBc0JwaUcsZUFBZWlDLEtBQ3hDbWdHLEVBQXNCbmdHLEdBQVEsSUFHaENtZ0csRUFBc0JuZ0csR0FBTXBDLEtBQUtzMUUsSUFNbkN3dEIscUJBQXNCLFNBQThCMWdHLEVBQU1rekUsR0FPNUQsSUFBeUJodUUsRUFBT1MsRUFDMUJveUIsRUFQRW9vRSxFQUFzQnBpRyxlQUFlaUMsS0FNYjJGLEVBTG1CdXRFLEdBUWxDLEtBRlhuN0MsR0FEbUI3eUIsRUFMSGk3RixFQUFzQm5nRyxJQU14QjJTLFFBQVFoTixLQUd4QlQsRUFBTW15RSxPQUFPdC9DLEVBQU8sTUFJeEIzNUIsRUFBT0MsUUFBVW1zRSxHLDRCQ25HakIsSUFFSXA2QixFQUZ5QixFQUFRLEtBRWRMLENBQXVCLEVBQVEsT0FFbER1NkIsRUFBa0IsRUFBUSxNQUUxQi8wQixFQUFZLEVBQVEsTUFRcEJvMUIsRUFBa0MsV0FDcEMsU0FBU0EsSUFDUCxJQUFJeDVCLEVBQVFweUMsTUFFWixFQUFJcXhDLEVBQTBCLFNBQUdyeEMsS0FBTSxhQUFhLElBQ3BELEVBQUlxeEMsRUFBMEIsU0FBR3J4QyxLQUFNLFVBQVcsS0FDbEQsRUFBSXF4QyxFQUEwQixTQUFHcnhDLEtBQU0sU0FBVSxJQUFJNEgsTUFDckQsRUFBSXlwQyxFQUEwQixTQUFHcnhDLEtBQU0sZ0JBQWlCLE1BQ3hEQSxLQUFLNGhHLFlBQWNyMkIsRUFBZ0JudEMsUUFBTyxTQUFVZ2IsR0FDbERoSCxFQUFNeXZELE9BQU83NUYsSUFBSW94QyxHQUlqQixJQUZBLElBQUkwb0QsRUFBUzF2RCxFQUFNMnZELFFBRVY1aUcsRUFBSSxFQUFHQSxFQUFJMmlHLEVBQU9sakcsU0FDckJ3NkMsRUFBS3UrQixPQUR3Qng0RSxJQUFLLENBTXRDLElBQUlvcUIsRUFBUXU0RSxFQUFPM2lHLEdBRW5CLE9BQVFvcUIsRUFBTWs0QixNQUNaLElBQUssV0FDSHJJLEVBQUtwQyxXQUNMLE1BRUYsSUFBSyxRQUNIb0MsRUFBSy8xQyxNQUFNa21CLEVBQU1sbUIsT0FDakIsTUFFRixJQUFLLE9BQ0grMUMsRUFBS2xrQixLQUFLM0wsRUFBTWpILE1BQ2hCLE1BRUYsUUFDRWlILEVBQU1rNEIsS0FDMEhqTCxHQUFVLElBSWhKLE9BQU8sV0FDTHBFLEVBQU15dkQsT0FBZSxPQUFFem9ELE9BSzdCLElBQUkzRixFQUFTbTRCLEVBQW1CM3RFLFVBbUVoQyxPQWpFQXcxQyxFQUFPdUQsU0FBVyxZQUNPLElBQW5CaDNDLEtBQUtpaEYsWUFJVGpoRixLQUFLaWhGLFdBQVksRUFFakJqaEYsS0FBSytoRyxRQUFRbGpHLEtBQUssQ0FDaEI0aUQsS0FBTSxhQUdSemhELEtBQUs2aEcsT0FBT2g5RixTQUFRLFNBQVV1MEMsR0FDNUIsT0FBT0EsRUFBS3BDLGdCQUloQnZELEVBQU9wd0MsTUFBUSxTQUFlbzZDLElBQ0wsSUFBbkJ6OUMsS0FBS2loRixZQUlUamhGLEtBQUtpaEYsV0FBWSxFQUVqQmpoRixLQUFLK2hHLFFBQVFsakcsS0FBSyxDQUNoQjRpRCxLQUFNLFFBQ05wK0MsTUFBT282QyxJQUdUejlDLEtBQUs2aEcsT0FBT2g5RixTQUFRLFNBQVV1MEMsR0FDNUIsT0FBT0EsRUFBSy8xQyxNQUFNbzZDLFFBSXRCaEssRUFBT3ZlLEtBQU8sU0FBYzVTLElBQ0gsSUFBbkJ0aUIsS0FBS2loRixZQUlUamhGLEtBQUsraEcsUUFBUWxqRyxLQUFLLENBQ2hCNGlELEtBQU0sT0FDTm4vQixLQUFNQSxJQUdSdGlCLEtBQUs2aEcsT0FBT2g5RixTQUFRLFNBQVV1MEMsR0FDNUIsT0FBT0EsRUFBS2xrQixLQUFLNVMsUUFJckJteEIsRUFBTzVWLFVBQVksU0FBbUJzYixHQUVwQyxPQURBbjVDLEtBQUtzdEYsY0FBZ0J0dEYsS0FBSzRoRyxZQUFZL2pFLFVBQVVzYixHQUN6Q241QyxLQUFLc3RGLGVBR2Q3NUMsRUFBT3dELFlBQWMsV0FDZmozQyxLQUFLc3RGLGdCQUNQdHRGLEtBQUtzdEYsY0FBY3IyQyxjQUVuQmozQyxLQUFLc3RGLGNBQWdCLE9BSXpCNzVDLEVBQU9rbkMsaUJBQW1CLFdBQ3hCLE9BQU8zNkUsS0FBSzZoRyxPQUFPL2lHLE1BR2Q4c0UsRUFqSDZCLEdBb0h0Q3ZzRSxFQUFPQyxRQUFVc3NFLEcsNEJDaklqQixJQUVJMzZCLEVBRnlCLEVBQVEsS0FFaEJELENBQXVCLEVBQVEsT0FFaEQwRCxFQUFXLEVBQVEsTUFDbkJ1NEIsRUFBd0J2NEIsRUFBU3U0QixzQkFDakNDLEVBQXdCeDRCLEVBQVN3NEIsc0JBU3JDN3RFLEVBQU9DLFFBUFAsU0FBaUMyQixFQUFNazBDLEVBQVd6ekMsRUFBVysrQyxHQUMzRCxJQUFJbitCLEdBQU8sRUFBSTJ1QixFQUF3QixTQUFHLEdBQUl3UCxHQUc5QyxPQUZBbitCLEVBQUsycUQsRUFBc0Joc0UsSUFBU1MsRUFDcEM0Z0IsRUFBSzRxRCxFQUFzQmpzRSxJQUFTazBDLEVBQzdCN3lCLEksc0JDTVRqakIsRUFBT0MsUUFiUCxTQUFTdTFDLEVBQVd0dUMsR0FVbEIsT0FUQXZJLE9BQU9vbkQsT0FBTzcrQyxHQUNkdkksT0FBT2dFLG9CQUFvQnVFLEdBQVExQixTQUFRLFNBQVU1RCxHQUVuRCxJQUFJK2dHLEVBQVd6N0YsRUFBT3RGLEdBRWxCK2dHLEdBQWdDLGlCQUFiQSxJQUEwQmhrRyxPQUFPaWtHLFNBQVNELElBQy9EbnRELEVBQVdtdEQsTUFHUno3RixJLHNCQ2hCVCxJQUFJc1gsRUFBSyxJQU1UeGUsRUFBT0MsUUFKUCxXQUNFLE9BQU91ZSxNLDRCQ0ZULElBQUlnekMsRUFBb0IsRUFBUSxNQUU1QnF4QyxFQUFnQixFQUFRLE1BRXhCajJCLEVBQWEsRUFBUSxNQUVyQnYzQixFQUFXLEVBQVEsTUFDbkJvNEIsRUFBeUJwNEIsRUFBU280Qix1QkFDbENXLEVBQTJCLzRCLEVBQVMrNEIseUJBQ3BDNzJCLEVBQWNsQyxFQUFTa0MsWUFtQjNCdjNDLEVBQU9DLFFBakJQLFNBQStCK2hELEVBQWNDLEdBQzNDLElBVU13bEMsRUFWRnZsQyxFQUFXM0ssRUFBWXlLLEVBQWNDLEdBQ3JDNmdELEVBQXNDLE1BQVo1Z0QsRUFBbUIsT0FBMkIsMkJBQWxCQSxFQUFTRSxLQUFvQ0YsRUFBU0ksTUFBTXNJLFdBQWEsSUFBTTFJLEVBQVNHLFVBQVVsOUMsS0FBSSxTQUFVNDlGLEdBQ3hLLE9BQU9BLEVBQUl6Z0QsTUFBTXNJLGNBQ2hCdmxELEtBQUssS0FBTyxJQUNYMDJDLEVBQW9CcXlCLEVBQXlCcHNCLEVBQWNDLEdBQzNEd2IsRUFBVWdRLEVBQXVCenJCLEVBQWNDLEdBRW5ELE9BQUl1UCxFQUFrQm93QywwQ0FDYmtCLEVBQTBCLElBQU05Z0QsRUFBYXBnRCxLQUFPLEtBQTRCLE1BQXJCbTZDLEdBQTZCOG1ELEVBQWM5bUQsR0FBcUIsS0FBTzNPLEtBQUtDLFVBQVV1L0IsRUFBVzd3QixLQUF1QixVQUEwQixJQUFaMGhCLEVBQTBCLFVBQXVCLE1BQVhBLEVBQWtCLE9BQVNsNUQsTUFBTUMsUUFBUWk1RCxHQUFXLElBQU1BLEVBQVFwNEQsS0FBSyxLQUFPLElBQU1vNEQsR0FJM1RxbEMsRUFBMEIsSUFBTTlnRCxFQUFhcGdELEtBQU8sSUFBTXdyQyxLQUFLQyxVQUFVdS9CLEVBQVc3d0IsSUFBc0IsS0FBdUQsUUFBL0MwckMsRUFBa0JyNkMsS0FBS0MsVUFBVW93QixVQUEwQyxJQUFwQmdxQixFQUE2QkEsRUFBa0IsYSw0QkN4Qm5PLElBQUlweUMsRUFBVyxFQUFRLEtBQ25CNmtDLEVBQVU3a0MsRUFBUzZrQyxRQUNuQmduQixFQUFrQjdyRCxFQUFTNnJELGdCQWlCL0JsaEcsRUFBT0MsUUFYUCxTQUFzQnBDLEdBQ3BCLE9BQVFBLEVBQUt1a0QsTUFDWCxLQUFLODNCLEVBQ0gsT0FBT3I4RSxFQUFLaTRDLFVBRWQsS0FBS29yRCxFQUNMLFFBQ0UsT0FBT3JqRyxLLDRCQ2hCYixJQUFJczVDLEVBQVksRUFBUSxNQUdwQnkzQixFQURXLEVBQVEsTUFDV0EsbUJBa0JsQzV1RSxFQUFPQyxRQVRQLFNBQTJCKy9GLEVBQVl4OEYsRUFBS2t5RSxHQUMxQyxPQUFJbHlFLEdBQU9BLElBQVFvckUsRUFDVixLQUFLdnJFLE9BQU9HLEVBQUssS0FBS0gsT0FBTzI4RixJQUd2QixNQUFidHFCLEdBQXNLditCLEdBQVUsR0FDM0ssS0FBSzl6QyxPQUFPcXlFLEVBQVcsS0FBS3J5RSxPQUFPMjhGLE0sMkJDbEI1QyxJQUFJN29ELEVBQVksRUFBUSxNQUVwQnkxQixFQUFhLEVBQVEsTUFZekI1c0UsRUFBT0MsUUFOUCxTQUE4QnV3RCxFQUFZNWEsR0FDeEMsSUFBSW90RCxFQUFrQyxNQUF0Qnh5QyxFQUFXOVAsUUFBa0I4UCxFQUFXOVAsUUFBVThQLEVBQVdoeUMsR0FFN0UsT0FEZSxNQUFid2tGLEdBQXVNN3JELEdBQVUsR0FDNU02ckQsRUFBWTUxRCxLQUFLQyxVQUFVdS9CLEVBQVdoM0IsTSxzQkNYL0MsSUFBSWoyQyxFQUFpQmhCLE9BQU9DLFVBQVVlLGVBWXRDSyxFQUFPQyxRQVZQLFNBQXVCay9ELEdBQ3JCLElBQUssSUFBSTFxQixLQUFRMHFCLEVBQ2YsR0FBSXgvRCxFQUFlWixLQUFLb2dFLEVBQUsxcUIsR0FDM0IsT0FBTyxFQUlYLE9BQU8sSSxzQkNMVHowQyxFQUFPQyxRQUpQLFNBQW1CaTNCLEdBQ2pCLFFBQVNBLEdBQXVCLG1CQUFYQSxFQUFFNlAsTyxzQkNVekIvbUMsRUFBT0MsUUFKUCxTQUEwQmdqRyxFQUFRQyxHQUNoQyxPQUFPRCxJQUFXQyxJQUFzQixPQUFYRCxHQUFxQyxpQkFBWEEsSyxzQkNSekQsSUFBSUUsRUFBdUMsb0JBQVo5OUQsUUFDM0IrOUQsRUFBdUMsb0JBQVp4K0QsUUE2RC9CNWtDLEVBQU9DLFFBeERQLFNBQVMwbEQsRUFBaUJoSixFQUFVRSxHQUNsQyxHQUFJRixJQUFhRSxHQUFnQyxpQkFBYkYsR0FBeUJBLGFBQW9CcDBDLEtBQU9vMEMsYUFBb0JsakMsS0FBTzBwRixHQUFxQnhtRCxhQUFvQnRYLFNBQVcrOUQsR0FBcUJ6bUQsYUFBb0IvWCxVQUFZK1gsR0FBZ0MsaUJBQWJFLEdBQXlCQSxhQUFvQnQwQyxLQUFPczBDLGFBQW9CcGpDLEtBQU8wcEYsR0FBcUJ0bUQsYUFBb0J4WCxTQUFXKzlELEdBQXFCdm1ELGFBQW9CalksVUFBWWlZLEVBQ3JhLE9BQU9BLEVBR1QsSUFBSXdtRCxHQUFhLEVBRWJDLEVBQVkvK0YsTUFBTUMsUUFBUW00QyxHQUFZQSxFQUFXLEtBQ2pENG1ELEVBQVloL0YsTUFBTUMsUUFBUXE0QyxHQUFZQSxFQUFXLEtBRXJELEdBQUl5bUQsR0FBYUMsRUFDZkYsRUFBYUUsRUFBVUMsUUFBTyxTQUFVQyxFQUFVdFcsRUFBVWhzRCxHQUMxRCxJQUNJdWlFLEVBQVkvOUMsRUFEQTI5QyxFQUFVbmlFLEdBQ2tCZ3NELEdBWTVDLE9BVkl1VyxJQUFjSCxFQUFVcGlFLEtBTXhCb2lFLEVBQVVwaUUsR0FBTXVpRSxHQUliRCxHQUFZQyxJQUFjSixFQUFVbmlFLE1BQzFDLElBQVNtaUUsRUFBVS9qRyxTQUFXZ2tHLEVBQVVoa0csWUFDdEMsSUFBSytqRyxJQUFjQyxFQUFXLENBRW5DLElBQUlJLEVBQWFobkQsRUFDYmluRCxFQUFhL21ELEVBQ2JnbkQsRUFBV2xsRyxPQUFPa0IsS0FBSzhqRyxHQUN2QkcsRUFBV25sRyxPQUFPa0IsS0FBSytqRyxHQUMzQlAsRUFBYVMsRUFBU04sUUFBTyxTQUFVQyxFQUFVamdHLEdBQy9DLElBQ0lrZ0csRUFBWS85QyxFQURBZytDLEVBQVduZ0csR0FDaUJvZ0csRUFBV3BnRyxJQWN2RCxPQVpJa2dHLElBQWNFLEVBQVdwZ0csS0FRekJvZ0csRUFBV3BnRyxHQUFPa2dHLEdBSWZELEdBQVlDLElBQWNDLEVBQVduZ0csTUFDM0MsSUFBU3FnRyxFQUFTdGtHLFNBQVd1a0csRUFBU3ZrRyxPQUczQyxPQUFPOGpHLEVBQWExbUQsRUFBV0UsSSxzQkN4QmpDNzhDLEVBQU9DLFFBbkNQLFNBQXFDc3pDLEVBQWE4VCxHQUNoRCxPQUFRQSxFQUFzQjNwQixRQUM1QixJQUFLLFFBRUQsSUFBSXFtRSxFQUF3QjE4QyxFQUFzQnN1QixNQUM5Q245QixFQUFPdXJELEVBQXNCdnJELEtBQzdCOEosRUFBUXloRCxFQUFzQnpoRCxNQU9sQyxNQUxBL08sRUFBWWczQyxvQkFBb0IsQ0FDOUJub0MsS0FBTSxzQkFDTkUsTUFBT0EsRUFDUDYxQyxVQUFXMy9DLElBRVAsSUFBSXQwQyxNQUFNLDJDQUEyQ2IsT0FBT20xQyxFQUFNLFVBQVVuMUMsT0FBT2kvQyxFQUFPLE9BR3BHLElBQUssTUFDSCtFLEVBQXNCZ3hDLE9BQU83eUYsU0FBUSxTQUFVbTRDLEdBQzdDLElBQUluRixFQUFPbUYsRUFBS25GLEtBQ1o4SixFQUFRM0UsRUFBSzJFLE1BQ2pCL08sRUFBWWczQyxvQkFBb0IsQ0FDOUJub0MsS0FBTSxvQkFDTkUsTUFBT0EsRUFDUDYxQyxVQUFXMy9DLE9BR2YsTUFFRixRQUVJNk8sRUFBc0IzcEIsVSxzQkM5QjlCLElBQUlzbUUsRUFBa0JqMkMsUUFBUTNhLFVBUzlCLFNBQVM2d0QsRUFBVWpnRyxHQUNqQnVzQixZQUFXLFdBQ1QsTUFBTXZzQixJQUNMLEdBR0xoRSxFQUFPQyxRQVZQLFNBQTBCNDJCLEdBQ3hCbXRFLEVBQWdCajlELEtBQUtsUSxHQUFpQixNQUFFb3RFLEssc0JDa0IxQ2prRyxFQUFPQyxRQW5CUCxTQUFTMnNFLEVBQVdwK0QsR0FDbEIsSUFBS0EsR0FBMEIsaUJBQVZBLEVBQ25CLE9BQU9BLEVBR1QsR0FBSWpLLE1BQU1DLFFBQVFnSyxHQUNoQixPQUFPQSxFQUFNckosSUFBSXluRSxHQU1uQixJQUhBLElBQUkvc0UsRUFBT2xCLE9BQU9rQixLQUFLMk8sR0FBT292RCxPQUMxQnNtQyxFQUFTLEdBRUpwa0csRUFBSSxFQUFHQSxFQUFJRCxFQUFLTixPQUFRTyxJQUMvQm9rRyxFQUFPcmtHLEVBQUtDLElBQU04c0UsRUFBV3ArRCxFQUFNM08sRUFBS0MsS0FHMUMsT0FBT29rRyxJLFNDdkJUbGtHLEVBQU9DLFFBVlAsU0FBMkJ3RSxFQUFLMjVELElBQ25CLE1BQVBBLEdBQWVBLEVBQU0zNUQsRUFBSWxGLFVBQVE2K0QsRUFBTTM1RCxFQUFJbEYsUUFFL0MsSUFBSyxJQUFJTyxFQUFJLEVBQUd1K0QsRUFBTyxJQUFJOTVELE1BQU02NUQsR0FBTXQrRCxFQUFJcytELEVBQUt0K0QsSUFDOUN1K0QsRUFBS3YrRCxHQUFLMkUsRUFBSTNFLEdBR2hCLE9BQU91K0QsR0FJVHIrRCxFQUFPQyxRQUFQLFFBQTRCRCxFQUFPQyxRQUFTRCxFQUFPQyxRQUFRcStELFlBQWEsRyxlQ1h4RSxJQUFJQyxFQUFtQixFQUFRLE1BTS9CditELEVBQU9DLFFBSlAsU0FBNEJ3RSxHQUMxQixHQUFJRixNQUFNQyxRQUFRQyxHQUFNLE9BQU84NUQsRUFBaUI5NUQsSUFJbER6RSxFQUFPQyxRQUFQLFFBQTRCRCxFQUFPQyxRQUFTRCxFQUFPQyxRQUFRcStELFlBQWEsRyxlQ1B4RSxJQUFJSSxFQUE2QixFQUFRLE1BMkR6QzErRCxFQUFPQyxRQXpEUCxTQUFvQzArRCxFQUFHQyxHQUNyQyxJQUFJQyxFQUF1QixvQkFBWDl5RCxRQUEwQjR5RCxFQUFFNXlELE9BQU9LLFdBQWF1eUQsRUFBRSxjQUVsRSxJQUFLRSxFQUFJLENBQ1AsR0FBSXQ2RCxNQUFNQyxRQUFRbTZELEtBQU9FLEVBQUtILEVBQTJCQyxLQUFPQyxHQUFrQkQsR0FBeUIsaUJBQWJBLEVBQUVwL0QsT0FBcUIsQ0FDL0dzL0QsSUFBSUYsRUFBSUUsR0FDWixJQUFJLytELEVBQUksRUFFSjhjLEVBQUksYUFFUixNQUFPLENBQ0w1VyxFQUFHNFcsRUFDSHhYLEVBQUcsV0FDRCxPQUFJdEYsR0FBSzYrRCxFQUFFcC9ELE9BQWUsQ0FDeEI0NkIsTUFBTSxHQUVELENBQ0xBLE1BQU0sRUFDTjNyQixNQUFPbXdELEVBQUU3K0QsT0FHYjRELEVBQUcsU0FBV283RCxHQUNaLE1BQU1BLEdBRVIvNkQsRUFBRzZZLEdBSVAsTUFBTSxJQUFJOVgsVUFBVSx5SUFHdEIsSUFFSVksRUFGQXE1RCxHQUFtQixFQUNuQkMsR0FBUyxFQUViLE1BQU8sQ0FDTGg1RCxFQUFHLFdBQ0Q2NEQsRUFBS0EsRUFBRzkvRCxLQUFLNC9ELElBRWZ2NUQsRUFBRyxXQUNELElBQUk2NUQsRUFBT0osRUFBR2hwQyxPQUVkLE9BREFrcEMsRUFBbUJFLEVBQUs5a0MsS0FDakI4a0MsR0FFVHY3RCxFQUFHLFNBQVd3N0QsR0FDWkYsR0FBUyxFQUNUdDVELEVBQU13NUQsR0FFUm43RCxFQUFHLFdBQ0QsSUFDT2c3RCxHQUFvQyxNQUFoQkYsRUFBVyxRQUFXQSxFQUFXLFNBQzFELFFBQ0EsR0FBSUcsRUFBUSxNQUFNdDVELE1BTzFCMUYsRUFBT0MsUUFBUCxRQUE0QkQsRUFBT0MsUUFBU0QsRUFBT0MsUUFBUXErRCxZQUFhLEcsU0M3Q3hFdCtELEVBQU9DLFFBZlAsU0FBeUJrL0QsRUFBSzM3RCxFQUFLZ0wsR0FZakMsT0FYSWhMLEtBQU8yN0QsRUFDVHhnRSxPQUFPK0QsZUFBZXk4RCxFQUFLMzdELEVBQUssQ0FDOUJnTCxNQUFPQSxFQUNQUCxZQUFZLEVBQ1pELGNBQWMsRUFDZG94RCxVQUFVLElBR1pELEVBQUkzN0QsR0FBT2dMLEVBR04yd0QsR0FJVG4vRCxFQUFPQyxRQUFQLFFBQTRCRCxFQUFPQyxRQUFTRCxFQUFPQyxRQUFRcStELFlBQWEsRyxTQ1Z4RXQrRCxFQUFPQyxRQU5QLFNBQWdDay9ELEdBQzlCLE9BQU9BLEdBQU9BLEVBQUliLFdBQWFhLEVBQU0sQ0FDbkMsUUFBV0EsSUFLZm4vRCxFQUFPQyxRQUFQLFFBQTRCRCxFQUFPQyxRQUFTRCxFQUFPQyxRQUFRcStELFlBQWEsRyxTQ0h4RXQrRCxFQUFPQyxRQUpQLFNBQTBCdy9ELEdBQ3hCLEdBQXNCLG9CQUFYMXpELFFBQW1ELE1BQXpCMHpELEVBQUsxekQsT0FBT0ssV0FBMkMsTUFBdEJxekQsRUFBSyxjQUF1QixPQUFPbDdELE1BQU1zQixLQUFLNDVELElBSXRIei9ELEVBQU9DLFFBQVAsUUFBNEJELEVBQU9DLFFBQVNELEVBQU9DLFFBQVFxK0QsWUFBYSxHLFNDRHhFdCtELEVBQU9DLFFBSlAsV0FDRSxNQUFNLElBQUk2RSxVQUFVLHlJQUl0QjlFLEVBQU9DLFFBQVAsUUFBNEJELEVBQU9DLFFBQVNELEVBQU9DLFFBQVFxK0QsWUFBYSxHLGVDTHhFLElBQUk1N0QsRUFBaUIsRUFBUSxNQUU3QixTQUFTZzlELEVBQVF4NEQsRUFBUXk0RCxHQUN2QixJQUFJOS9ELEVBQU9sQixPQUFPa0IsS0FBS3FILEdBRXZCLEdBQUl2SSxPQUFPaUUsc0JBQXVCLENBQ2hDLElBQUlrRCxFQUFVbkgsT0FBT2lFLHNCQUFzQnNFLEdBRXZDeTRELElBQ0Y3NUQsRUFBVUEsRUFBUTg1RCxRQUFPLFNBQVVDLEdBQ2pDLE9BQU9saEUsT0FBT2tFLHlCQUF5QnFFLEVBQVEyNEQsR0FBSzV4RCxlQUl4RHBPLEVBQUtMLEtBQUtpWSxNQUFNNVgsRUFBTWlHLEdBR3hCLE9BQU9qRyxFQXVCVEcsRUFBT0MsUUFwQlAsU0FBd0IyRixHQUN0QixJQUFLLElBQUk5RixFQUFJLEVBQUdBLEVBQUlpQyxVQUFVeEMsT0FBUU8sSUFBSyxDQUN6QyxJQUFJWCxFQUF5QixNQUFoQjRDLFVBQVVqQyxHQUFhaUMsVUFBVWpDLEdBQUssR0FFL0NBLEVBQUksRUFDTjQvRCxFQUFRL2dFLE9BQU9RLElBQVMsR0FBTXFHLFNBQVEsU0FBVWhDLEdBQzlDZCxFQUFla0QsRUFBUXBDLEVBQUtyRSxFQUFPcUUsT0FFNUI3RSxPQUFPbWhFLDBCQUNoQm5oRSxPQUFPb2hFLGlCQUFpQm42RCxFQUFRakgsT0FBT21oRSwwQkFBMEIzZ0UsSUFFakV1Z0UsRUFBUS9nRSxPQUFPUSxJQUFTcUcsU0FBUSxTQUFVaEMsR0FDeEM3RSxPQUFPK0QsZUFBZWtELEVBQVFwQyxFQUFLN0UsT0FBT2tFLHlCQUF5QjFELEVBQVFxRSxPQUtqRixPQUFPb0MsR0FJVDVGLEVBQU9DLFFBQVAsUUFBNEJELEVBQU9DLFFBQVNELEVBQU9DLFFBQVFxK0QsWUFBYSxHLGVDekN4RSxJQUFJOEIsRUFBb0IsRUFBUSxNQUU1QkMsRUFBa0IsRUFBUSxNQUUxQjNCLEVBQTZCLEVBQVEsTUFFckM0QixFQUFvQixFQUFRLE1BTWhDdGdFLEVBQU9DLFFBSlAsU0FBNEJ3RSxHQUMxQixPQUFPMjdELEVBQWtCMzdELElBQVE0N0QsRUFBZ0I1N0QsSUFBUWk2RCxFQUEyQmo2RCxJQUFRNjdELEtBSTlGdGdFLEVBQU9DLFFBQVAsUUFBNEJELEVBQU9DLFFBQVNELEVBQU9DLFFBQVFxK0QsWUFBYSxHLGVDYnhFLElBQUlDLEVBQW1CLEVBQVEsTUFXL0J2K0QsRUFBT0MsUUFUUCxTQUFxQzArRCxFQUFHNEIsR0FDdEMsR0FBSzVCLEVBQUwsQ0FDQSxHQUFpQixpQkFBTkEsRUFBZ0IsT0FBT0osRUFBaUJJLEVBQUc0QixHQUN0RCxJQUFJbjdELEVBQUl6RyxPQUFPQyxVQUFVQyxTQUFTRSxLQUFLNC9ELEdBQUd4MEQsTUFBTSxHQUFJLEdBRXBELE1BRFUsV0FBTi9FLEdBQWtCdTVELEVBQUVqL0QsY0FBYTBGLEVBQUl1NUQsRUFBRWovRCxZQUFZa0MsTUFDN0MsUUFBTndELEdBQXFCLFFBQU5BLEVBQW9CYixNQUFNc0IsS0FBSzg0RCxHQUN4QyxjQUFOdjVELEdBQXFCLDJDQUEyQ2tGLEtBQUtsRixHQUFXbTVELEVBQWlCSSxFQUFHNEIsUUFBeEcsSUFJRnZnRSxFQUFPQyxRQUFQLFFBQTRCRCxFQUFPQyxRQUFTRCxFQUFPQyxRQUFRcStELFlBQWEsRyx3QkNKM0QsSUFBSXY2RCxFQUFFc0YsRUFBRTRELEVBQUVELEVBQUUsR0FBRyxpQkFBa0JtM0YsYUFBYSxtQkFBb0JBLFlBQVl4akYsSUFBSSxDQUFDLElBQUluSixFQUFFMnNGLFlBQVlsa0csRUFBUTBjLGFBQWEsV0FBVyxPQUFPbkYsRUFBRW1KLFdBQVcsQ0FBQyxJQUFJdVcsRUFBRXhXLEtBQUtxTyxFQUFFbUksRUFBRXZXLE1BQU0xZ0IsRUFBUTBjLGFBQWEsV0FBVyxPQUFPdWEsRUFBRXZXLE1BQU1vTyxHQUMzTyxHQUFHLG9CQUFxQmxtQixRQUFRLG1CQUFvQnU3RixlQUFlLENBQUMsSUFBSXAxRSxFQUFFLEtBQUtGLEVBQUUsS0FBS0YsRUFBRSxXQUFXLEdBQUcsT0FBT0ksRUFBRSxJQUFJLElBQUkxd0IsRUFBRTJCLEVBQVEwYyxlQUFlcVMsR0FBRSxFQUFHMXdCLEdBQUcwd0IsRUFBRSxLQUFLLE1BQU16d0IsR0FBRyxNQUFNZ3lCLFdBQVczQixFQUFFLEdBQUdyd0IsSUFBS3dGLEVBQUUsU0FBU3pGLEdBQUcsT0FBTzB3QixFQUFFdUIsV0FBV3hzQixFQUFFLEVBQUV6RixJQUFJMHdCLEVBQUUxd0IsRUFBRWl5QixXQUFXM0IsRUFBRSxLQUFLdmxCLEVBQUUsU0FBUy9LLEVBQUVDLEdBQUd1d0IsRUFBRXlCLFdBQVdqeUIsRUFBRUMsSUFBSTBPLEVBQUUsV0FBV3dqQixhQUFhM0IsSUFBSTd1QixFQUFRNnlCLHFCQUFxQixXQUFXLE9BQU0sR0FBSTlsQixFQUFFL00sRUFBUW9rRyx3QkFBd0IsaUJBQWlCLENBQUMsSUFBSTExRSxFQUFFOWxCLE9BQU8wbkIsV0FBV25vQixFQUFFUyxPQUFPNG5CLGFBQWEsR0FBRyxvQkFBcUJpVSxRQUFRLENBQUMsSUFBSTdWLEVBQzdmaG1CLE9BQU95N0YscUJBQXFCLG1CQUFvQno3RixPQUFPMDdGLHVCQUF1QjcvRCxRQUFRMWdDLE1BQU0sc0pBQXNKLG1CQUFvQjZxQixHQUFHNlYsUUFBUTFnQyxNQUFNLHFKQUFxSixJQUFJaXpCLEdBQUUsRUFBRzd0QixFQUFFLEtBQUsrdEIsR0FBRyxFQUFFdHRCLEVBQUUsRUFBRW9DLEVBQUUsRUFBRWhNLEVBQVE2eUIscUJBQXFCLFdBQVcsT0FBTzd5QixFQUFRMGMsZ0JBQ2hnQjFRLEdBQUdlLEVBQUUsYUFBYS9NLEVBQVFva0csd0JBQXdCLFNBQVMvbEcsR0FBRyxFQUFFQSxHQUFHLElBQUlBLEVBQUVvbUMsUUFBUTFnQyxNQUFNLG1IQUFtSDZGLEVBQUUsRUFBRXZMLEVBQUVzZixLQUFLNG1GLE1BQU0sSUFBSWxtRyxHQUFHLEdBQUcsSUFBSXNlLEVBQUUsSUFBSXduRixlQUFlcDJFLEVBQUVwUixFQUFFNm5GLE1BQU03bkYsRUFBRThuRixNQUFNQyxVQUFVLFdBQVcsR0FBRyxPQUFPdjdGLEVBQUUsQ0FBQyxJQUFJOUssRUFBRTJCLEVBQVEwYyxlQUFlMVEsRUFBRTNOLEVBQUV1TCxFQUFFLElBQUlULEdBQUUsRUFBRzlLLEdBQUcwdkIsRUFBRTQyRSxZQUFZLE9BQU8zdEUsR0FBRSxFQUFHN3RCLEVBQUUsTUFBTSxNQUFNN0ssR0FBRyxNQUFNeXZCLEVBQUU0MkUsWUFBWSxNQUFNcm1HLFFBQVMwNEIsR0FBRSxHQUFJbHpCLEVBQUUsU0FBU3pGLEdBQUc4SyxFQUFFOUssRUFBRTI0QixJQUFJQSxHQUFFLEVBQUdqSixFQUFFNDJFLFlBQVksUUFBUXY3RixFQUFFLFNBQVMvSyxFQUFFQyxHQUFHNDRCLEVBQ3RmeEksR0FBRSxXQUFXcndCLEVBQUUyQixFQUFRMGMsa0JBQWlCcGUsSUFBSTBPLEVBQUUsV0FBVzdFLEVBQUUrdUIsR0FBR0EsR0FBRyxHQUFHLFNBQVM3RixFQUFFaHpCLEVBQUVDLEdBQUcsSUFBSXNGLEVBQUV2RixFQUFFaUIsT0FBT2pCLEVBQUVrQixLQUFLakIsR0FBR0QsRUFBRSxPQUFPLENBQUMsSUFBSXdGLEVBQUVELEVBQUUsSUFBSSxFQUFFSCxFQUFFcEYsRUFBRXdGLEdBQUcsVUFBRyxJQUFTSixHQUFHLEVBQUU2dEIsRUFBRTd0QixFQUFFbkYsSUFBMEIsTUFBTUQsRUFBN0JBLEVBQUV3RixHQUFHdkYsRUFBRUQsRUFBRXVGLEdBQUdILEVBQUVHLEVBQUVDLEdBQWdCLFNBQVN5ckIsRUFBRWp4QixHQUFVLFlBQU8sS0FBZEEsRUFBRUEsRUFBRSxJQUFxQixLQUFLQSxFQUNoUCxTQUFTa3hCLEVBQUVseEIsR0FBRyxJQUFJQyxFQUFFRCxFQUFFLEdBQUcsUUFBRyxJQUFTQyxFQUFFLENBQUMsSUFBSXNGLEVBQUV2RixFQUFFeUIsTUFBTSxHQUFHOEQsSUFBSXRGLEVBQUUsQ0FBQ0QsRUFBRSxHQUFHdUYsRUFBRXZGLEVBQUUsSUFBSSxJQUFJd0YsRUFBRSxFQUFFSixFQUFFcEYsRUFBRWlCLE9BQU91RSxFQUFFSixHQUFHLENBQUMsSUFBSXdFLEVBQUUsR0FBR3BFLEVBQUUsR0FBRyxFQUFFc0IsRUFBRTlHLEVBQUU0SixHQUFHK21CLEVBQUUvbUIsRUFBRSxFQUFFQyxFQUFFN0osRUFBRTJ3QixHQUFHLFFBQUcsSUFBUzdwQixHQUFHLEVBQUVtc0IsRUFBRW5zQixFQUFFdkIsUUFBRyxJQUFTc0UsR0FBRyxFQUFFb3BCLEVBQUVwcEIsRUFBRS9DLElBQUk5RyxFQUFFd0YsR0FBR3FFLEVBQUU3SixFQUFFMndCLEdBQUdwckIsRUFBRUMsRUFBRW1yQixJQUFJM3dCLEVBQUV3RixHQUFHc0IsRUFBRTlHLEVBQUU0SixHQUFHckUsRUFBRUMsRUFBRW9FLE9BQVEsV0FBRyxJQUFTQyxHQUFHLEVBQUVvcEIsRUFBRXBwQixFQUFFdEUsSUFBMEIsTUFBTXZGLEVBQTdCQSxFQUFFd0YsR0FBR3FFLEVBQUU3SixFQUFFMndCLEdBQUdwckIsRUFBRUMsRUFBRW1yQixJQUFnQixPQUFPMXdCLEVBQUUsT0FBTyxLQUFLLFNBQVNnekIsRUFBRWp6QixFQUFFQyxHQUFHLElBQUlzRixFQUFFdkYsRUFBRXVtRyxVQUFVdG1HLEVBQUVzbUcsVUFBVSxPQUFPLElBQUloaEcsRUFBRUEsRUFBRXZGLEVBQUVrZ0IsR0FBR2pnQixFQUFFaWdCLEdBQUcsSUFBSWtSLEVBQUUsR0FBRytCLEVBQUUsR0FBR0MsRUFBRSxFQUFFd0MsRUFBRSxLQUFLK0csRUFBRSxFQUFFeEwsR0FBRSxFQUFHOE0sR0FBRSxFQUFHQyxHQUFFLEVBQ2phLFNBQVNDLEVBQUVuK0IsR0FBRyxJQUFJLElBQUlDLEVBQUVneEIsRUFBRWtDLEdBQUcsT0FBT2x6QixHQUFHLENBQUMsR0FBRyxPQUFPQSxFQUFFczRCLFNBQVNySCxFQUFFaUMsT0FBUSxNQUFHbHpCLEVBQUV1bUcsV0FBV3htRyxHQUFnRCxNQUE5Q2t4QixFQUFFaUMsR0FBR2x6QixFQUFFc21HLFVBQVV0bUcsRUFBRXdtRyxlQUFlenpFLEVBQUU1QixFQUFFbnhCLEdBQWNBLEVBQUVneEIsRUFBRWtDLElBQUksU0FBUzRNLEVBQUUvL0IsR0FBYSxHQUFWaytCLEdBQUUsRUFBR0MsRUFBRW4rQixJQUFPaStCLEVBQUUsR0FBRyxPQUFPaE4sRUFBRUcsR0FBRzZNLEdBQUUsRUFBR3g0QixFQUFFaWdDLE9BQU8sQ0FBQyxJQUFJemxDLEVBQUVneEIsRUFBRWtDLEdBQUcsT0FBT2x6QixHQUFHOEssRUFBRWcxQixFQUFFOS9CLEVBQUV1bUcsVUFBVXhtRyxJQUN0UCxTQUFTMGxDLEVBQUUxbEMsRUFBRUMsR0FBR2crQixHQUFFLEVBQUdDLElBQUlBLEdBQUUsRUFBR3Z2QixLQUFLd2lCLEdBQUUsRUFBRyxJQUFJNXJCLEVBQUVvM0IsRUFBRSxJQUFTLElBQUx3QixFQUFFbCtCLEdBQU8yMUIsRUFBRTNFLEVBQUVHLEdBQUcsT0FBT3dFLE1BQU1BLEVBQUU2d0UsZUFBZXhtRyxJQUFJRCxJQUFJMkIsRUFBUTZ5Qix5QkFBeUIsQ0FBQyxJQUFJaHZCLEVBQUVvd0IsRUFBRTJDLFNBQVMsR0FBRyxtQkFBb0IveUIsRUFBRSxDQUFDb3dCLEVBQUUyQyxTQUFTLEtBQUtvRSxFQUFFL0csRUFBRTh3RSxjQUFjLElBQUl0aEcsRUFBRUksRUFBRW93QixFQUFFNndFLGdCQUFnQnhtRyxHQUFHQSxFQUFFMEIsRUFBUTBjLGVBQWUsbUJBQW9CalosRUFBRXd3QixFQUFFMkMsU0FBU256QixFQUFFd3dCLElBQUkzRSxFQUFFRyxJQUFJRixFQUFFRSxHQUFHK00sRUFBRWwrQixRQUFRaXhCLEVBQUVFLEdBQUd3RSxFQUFFM0UsRUFBRUcsR0FBRyxHQUFHLE9BQU93RSxFQUFFLElBQUloc0IsR0FBRSxNQUFPLENBQUMsSUFBSTlDLEVBQUVtcUIsRUFBRWtDLEdBQUcsT0FBT3JzQixHQUFHaUUsRUFBRWcxQixFQUFFajVCLEVBQUUwL0YsVUFBVXZtRyxHQUFHMkosR0FBRSxFQUFHLE9BQU9BLEVBQUUsUUFBUWdzQixFQUFFLEtBQUsrRyxFQUFFcDNCLEVBQUU0ckIsR0FBRSxHQUFJLElBQUkwVSxFQUFFbjNCLEVBQUUvTSxFQUFRMHpCLHNCQUFzQixFQUN0ZTF6QixFQUFRb3pCLDJCQUEyQixFQUFFcHpCLEVBQVF3ekIscUJBQXFCLEVBQUV4ekIsRUFBUW9iLHdCQUF3QixFQUFFcGIsRUFBUWdsRyxtQkFBbUIsS0FBS2hsRyxFQUFRa2UsOEJBQThCLEVBQUVsZSxFQUFRMnlCLHdCQUF3QixTQUFTdDBCLEdBQUdBLEVBQUV1NEIsU0FBUyxNQUFNNTJCLEVBQVFpbEcsMkJBQTJCLFdBQVczb0UsR0FBRzlNLElBQUk4TSxHQUFFLEVBQUd4NEIsRUFBRWlnQyxLQUFLL2pDLEVBQVFrekIsaUNBQWlDLFdBQVcsT0FBTzhILEdBQUdoN0IsRUFBUWtsRyw4QkFBOEIsV0FBVyxPQUFPNTFFLEVBQUVHLElBQ3BhenZCLEVBQVFtbEcsY0FBYyxTQUFTOW1HLEdBQUcsT0FBTzI4QixHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUkxOEIsRUFBRSxFQUFFLE1BQU0sUUFBUUEsRUFBRTA4QixFQUFFLElBQUlwM0IsRUFBRW8zQixFQUFFQSxFQUFFMThCLEVBQUUsSUFBSSxPQUFPRCxJQUFJLFFBQVEyOEIsRUFBRXAzQixJQUFJNUQsRUFBUW9sRyx3QkFBd0IsYUFBYXBsRyxFQUFRK3lCLHNCQUFzQm1SLEVBQUVsa0MsRUFBUXlhLHlCQUF5QixTQUFTcGMsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxRQUFRQSxFQUFFLEVBQUUsSUFBSXVGLEVBQUVvM0IsRUFBRUEsRUFBRTM4QixFQUFFLElBQUksT0FBT0MsSUFBSSxRQUFRMDhCLEVBQUVwM0IsSUFDcFc1RCxFQUFRbWIsMEJBQTBCLFNBQVM5YyxFQUFFQyxFQUFFc0YsR0FBRyxJQUFJQyxFQUFFN0QsRUFBUTBjLGVBQThGLE9BQXRDOVksRUFBekMsaUJBQWtCQSxHQUFHLE9BQU9BLEdBQWUsaUJBQVpBLEVBQUVBLEVBQUV5aEcsUUFBNkIsRUFBRXpoRyxFQUFFQyxFQUFFRCxFQUFPQyxFQUFTeEYsR0FBRyxLQUFLLEVBQUUsSUFBSW9GLEdBQUcsRUFBRSxNQUFNLEtBQUssRUFBRUEsRUFBRSxJQUFJLE1BQU0sS0FBSyxFQUFFQSxFQUFFLFdBQVcsTUFBTSxLQUFLLEVBQUVBLEVBQUUsSUFBSSxNQUFNLFFBQVFBLEVBQUUsSUFBMk0sT0FBak1wRixFQUFFLENBQUNrZ0IsR0FBR2tULElBQUltRixTQUFTdDRCLEVBQUV5bUcsY0FBYzFtRyxFQUFFd21HLFVBQVVqaEcsRUFBRWtoRyxlQUF2RHJoRyxFQUFFRyxFQUFFSCxFQUFvRW1oRyxXQUFXLEdBQUdoaEcsRUFBRUMsR0FBR3hGLEVBQUV1bUcsVUFBVWhoRyxFQUFFeXRCLEVBQUVHLEVBQUVuekIsR0FBRyxPQUFPaXhCLEVBQUVHLElBQUlweEIsSUFBSWl4QixFQUFFa0MsS0FBSytLLEVBQUV2dkIsSUFBSXV2QixHQUFFLEVBQUduekIsRUFBRWcxQixFQUFFeDZCLEVBQUVDLE1BQU14RixFQUFFdW1HLFVBQVVuaEcsRUFBRTR0QixFQUFFNUIsRUFBRXB4QixHQUFHaStCLEdBQUc5TSxJQUFJOE0sR0FBRSxFQUFHeDRCLEVBQUVpZ0MsS0FBWTFsQyxHQUMxZDJCLEVBQVFzbEcsc0JBQXNCLFNBQVNqbkcsR0FBRyxJQUFJQyxFQUFFMDhCLEVBQUUsT0FBTyxXQUFXLElBQUlwM0IsRUFBRW8zQixFQUFFQSxFQUFFMThCLEVBQUUsSUFBSSxPQUFPRCxFQUFFbVosTUFBTTlXLEtBQUtvQixXQUFXLFFBQVFrNUIsRUFBRXAzQixNLDRCQ2hCM0g3RCxFQUFPQyxRQUFVLEVBQWpCLE1DRkV1bEcsRUFBMkIsR0FHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQnpoRyxJQUFqQjBoRyxFQUNILE9BQU9BLEVBQWExbEcsUUFHckIsSUFBSUQsRUFBU3dsRyxFQUF5QkUsR0FBWSxDQUdqRHpsRyxRQUFTLElBT1YsT0FIQTJsRyxFQUFvQkYsR0FBVTFsRyxFQUFRQSxFQUFPQyxRQUFTd2xHLEdBRy9DemxHLEVBQU9DLFFDcEJmd2xHLEVBQW9CcmdHLEVBQUtwRixJQUN4QixJQUFJNmxHLEVBQVM3bEcsR0FBVUEsRUFBT3MrRCxXQUM3QixJQUFPdCtELEVBQWlCLFFBQ3hCLElBQU0sRUFFUCxPQURBeWxHLEVBQW9CM2hHLEVBQUUraEcsRUFBUSxDQUFFdm5HLEVBQUd1bkcsSUFDNUJBLEdDTFJKLEVBQW9CM2hHLEVBQUksQ0FBQzdELEVBQVMyL0UsS0FDakMsSUFBSSxJQUFJcDhFLEtBQU9vOEUsRUFDWDZsQixFQUFvQjltQyxFQUFFaWhCLEVBQVlwOEUsS0FBU2lpRyxFQUFvQjltQyxFQUFFMStELEVBQVN1RCxJQUM1RTdFLE9BQU8rRCxlQUFlekMsRUFBU3VELEVBQUssQ0FBRXlLLFlBQVksRUFBTUYsSUFBSzZ4RSxFQUFXcDhFLE1DSjNFaWlHLEVBQW9CcDhGLEVBQUksV0FDdkIsR0FBMEIsaUJBQWZ5OEYsV0FBeUIsT0FBT0EsV0FDM0MsSUFDQyxPQUFPbmxHLE1BQVEsSUFBSW9sRyxTQUFTLGNBQWIsR0FDZCxNQUFPcmlHLEdBQ1IsR0FBc0IsaUJBQVhtRixPQUFxQixPQUFPQSxRQUxqQixHQ0F4QjQ4RixFQUFvQjltQyxFQUFJLENBQUNRLEVBQUtpdUIsSUFBVXp1RixPQUFPQyxVQUFVZSxlQUFlWixLQUFLb2dFLEVBQUtpdUIsR0NDbEZxWSxFQUFvQnQ5RixFQUFLbEksSUFDSCxvQkFBWDhMLFFBQTBCQSxPQUFPaTZGLGFBQzFDcm5HLE9BQU8rRCxlQUFlekMsRUFBUzhMLE9BQU9pNkYsWUFBYSxDQUFFeDNGLE1BQU8sV0FFN0Q3UCxPQUFPK0QsZUFBZXpDLEVBQVMsYUFBYyxDQUFFdU8sT0FBTyxLLCtEQ0R2RCxNQXFCQSxNQUFtQnUrRCxjQUFZLENBQzdCOGQsUUFBUzdkLGtCQUhRLENBQUNqdEIsRUFBYW5LLElBbkJacXdELE9BQU90d0QsRUFBWUMsS0FHdEMsSUFDRSxNQUFNd0wsUUFBaUI5QyxNQUhBLGdDQUd3QixDQUM3Q3hDLE9BQVEsT0FDUm9xRCxRQUFTLENBQUUsZUFBZ0Isb0JBQzNCdjNGLEtBQU15K0IsS0FBS0MsVUFBVSxDQUFFc0ksUUFBT0MsZ0JBS2hDLGFBRm1Cd0wsRUFBUytrRCxPQUc1QixNQUFPemdHLEdBRVAsT0FEQWcvQixRQUFRMGhFLEtBQUsxZ0csR0FDTixPQUl5QzJnRyxDQUFhdG1ELEVBQU9wMkIsS0FBTWlzQixLQUk1RWlvQixNQUFPLElBQUl1UCxRQUFNLElBQUlGLGtCQzNCUixTQUFTaE4sRUFBZ0J2QixFQUFHem5DLEdBTXpDLE9BTEFncEMsRUFBa0J2aEUsT0FBTzJnRSxnQkFBa0IsU0FBeUJYLEVBQUd6bkMsR0FFckUsT0FEQXluQyxFQUFFd0IsVUFBWWpwQyxFQUNQeW5DLElBR2NBLEVBQUd6bkMsR0NMYixTQUFTb3ZFLEVBQWUvbUMsRUFBVUMsR0FDL0NELEVBQVMzZ0UsVUFBWUQsT0FBT29nQyxPQUFPeWdDLEVBQVc1Z0UsV0FDOUMyZ0UsRUFBUzNnRSxVQUFVYyxZQUFjNi9ELEVBQ2pDLEVBQWVBLEVBQVVDLEcsdUJDSlosU0FBUyxJQWV0QixPQWRBLEVBQVc3Z0UsT0FBT29HLFFBQVUsU0FBVWEsR0FDcEMsSUFBSyxJQUFJOUYsRUFBSSxFQUFHQSxFQUFJaUMsVUFBVXhDLE9BQVFPLElBQUssQ0FDekMsSUFBSVgsRUFBUzRDLFVBQVVqQyxHQUV2QixJQUFLLElBQUkwRCxLQUFPckUsRUFDVlIsT0FBT0MsVUFBVWUsZUFBZVosS0FBS0ksRUFBUXFFLEtBQy9Db0MsRUFBT3BDLEdBQU9yRSxFQUFPcUUsSUFLM0IsT0FBT29DLElBR082UixNQUFNOVcsS0FBTW9CLFdDZjlCLFNBQVN3a0csRUFBV0MsR0FDbEIsTUFBOEIsTUFBdkJBLEVBQVMveEYsT0FBTyxHQUl6QixTQUFTZ3lGLEVBQVVDLEVBQU0vc0UsR0FDdkIsSUFBSyxJQUFJNzVCLEVBQUk2NUIsRUFBTzNzQixFQUFJbE4sRUFBSSxFQUFHc0YsRUFBSXNoRyxFQUFLbm5HLE9BQVF5TixFQUFJNUgsRUFBR3RGLEdBQUssRUFBR2tOLEdBQUssRUFDbEUwNUYsRUFBSzVtRyxHQUFLNG1HLEVBQUsxNUYsR0FHakIwNUYsRUFBSzNtRyxNQ0VQLFFBVkEsU0FBbUI0RCxFQUFXNmdDLEdBQzFCLElBQUk3Z0MsRUFJQSxNQUFNLElBQUlPLE1BTkwscUJDS2IsU0FBU3lpRyxFQUFnQm51RCxHQUN2QixNQUEwQixNQUFuQkEsRUFBSy9qQyxPQUFPLEdBQWErakMsRUFBTyxJQUFNQSxFQVEvQyxTQUFTb3VELEVBQWNwdUQsRUFBTW9vQixHQUMzQixPQUpGLFNBQXFCcG9CLEVBQU1vb0IsR0FDekIsT0FBNEQsSUFBckRwb0IsRUFBSzF1QyxjQUFjeUssUUFBUXFzRCxFQUFPOTJELGlCQUF1RSxJQUEvQyxNQUFNeUssUUFBUWlrQyxFQUFLL2pDLE9BQU9tc0QsRUFBT3JoRSxTQUczRnNuRyxDQUFZcnVELEVBQU1vb0IsR0FBVXBvQixFQUFLNnBCLE9BQU96QixFQUFPcmhFLFFBQVVpNUMsRUFFbEUsU0FBU3N1RCxFQUFtQnR1RCxHQUMxQixNQUF3QyxNQUFqQ0EsRUFBSy9qQyxPQUFPK2pDLEVBQUtqNUMsT0FBUyxHQUFhaTVDLEVBQUtydUMsTUFBTSxHQUFJLEdBQUtxdUMsRUEwQnBFLFNBQVN1dUQsRUFBV3ZnRyxHQUNsQixJQUFJZ2dHLEVBQVdoZ0csRUFBU2dnRyxTQUNwQi84RSxFQUFTampCLEVBQVNpakIsT0FDbEJ2ckIsRUFBT3NJLEVBQVN0SSxLQUNoQnM2QyxFQUFPZ3VELEdBQVksSUFHdkIsT0FGSS84RSxHQUFxQixNQUFYQSxJQUFnQit1QixHQUE2QixNQUFyQi91QixFQUFPaFYsT0FBTyxHQUFhZ1YsRUFBUyxJQUFNQSxHQUM1RXZyQixHQUFpQixNQUFUQSxJQUFjczZDLEdBQTJCLE1BQW5CdDZDLEVBQUt1VyxPQUFPLEdBQWF2VyxFQUFPLElBQU1BLEdBQ2pFczZDLEVBR1QsU0FBUyxFQUFlQSxFQUFNamdCLEVBQU8vMEIsRUFBS3dqRyxHQUN4QyxJQUFJeGdHLEVBRWdCLGlCQUFUZ3lDLEdBRVRoeUMsRUF2Q0osU0FBbUJneUMsR0FDakIsSUFBSWd1RCxFQUFXaHVELEdBQVEsSUFDbkIvdUIsRUFBUyxHQUNUdnJCLEVBQU8sR0FDUCtvRyxFQUFZVCxFQUFTanlGLFFBQVEsTUFFZCxJQUFmMHlGLElBQ0Yvb0csRUFBT3NvRyxFQUFTbmtDLE9BQU80a0MsR0FDdkJULEVBQVdBLEVBQVNua0MsT0FBTyxFQUFHNGtDLElBR2hDLElBQUlDLEVBQWNWLEVBQVNqeUYsUUFBUSxLQU9uQyxPQUxxQixJQUFqQjJ5RixJQUNGejlFLEVBQVMrOEUsRUFBU25rQyxPQUFPNmtDLEdBQ3pCVixFQUFXQSxFQUFTbmtDLE9BQU8sRUFBRzZrQyxJQUd6QixDQUNMVixTQUFVQSxFQUNWLzhFLE9BQW1CLE1BQVhBLEVBQWlCLEdBQUtBLEVBQzlCdnJCLEtBQWUsTUFBVEEsRUFBZSxHQUFLQSxHQWtCZmlwRyxDQUFVM3VELElBQ1pqZ0IsTUFBUUEsUUFJU3QwQixLQUQxQnVDLEVBQVcsRUFBUyxHQUFJZ3lDLElBQ1hndUQsV0FBd0JoZ0csRUFBU2dnRyxTQUFXLElBRXJEaGdHLEVBQVNpakIsT0FDdUIsTUFBOUJqakIsRUFBU2lqQixPQUFPaFYsT0FBTyxLQUFZak8sRUFBU2lqQixPQUFTLElBQU1qakIsRUFBU2lqQixRQUV4RWpqQixFQUFTaWpCLE9BQVMsR0FHaEJqakIsRUFBU3RJLEtBQ3FCLE1BQTVCc0ksRUFBU3RJLEtBQUt1VyxPQUFPLEtBQVlqTyxFQUFTdEksS0FBTyxJQUFNc0ksRUFBU3RJLE1BRXBFc0ksRUFBU3RJLEtBQU8sUUFHSitGLElBQVZzMEIsUUFBMEN0MEIsSUFBbkJ1QyxFQUFTK3hCLFFBQXFCL3hCLEVBQVMreEIsTUFBUUEsSUFHNUUsSUFDRS94QixFQUFTZ2dHLFNBQVdZLFVBQVU1Z0csRUFBU2dnRyxVQUN2QyxNQUFPOWlHLEdBQ1AsTUFBSUEsYUFBYTJqRyxTQUNULElBQUlBLFNBQVMsYUFBZTdnRyxFQUFTZ2dHLFNBQXhCLGlGQUViOWlHLEVBb0JWLE9BaEJJRixJQUFLZ0QsRUFBU2hELElBQU1BLEdBRXBCd2pHLEVBRUd4Z0csRUFBU2dnRyxTQUU2QixNQUFoQ2hnRyxFQUFTZ2dHLFNBQVMveEYsT0FBTyxLQUNsQ2pPLEVBQVNnZ0csU0ZyRmYsU0FBeUJ6Z0csRUFBSUYsUUFDZDVCLElBQVQ0QixJQUFvQkEsRUFBTyxJQUUvQixJQWtCSXloRyxFQWxCQUMsRUFBV3hoRyxHQUFNQSxFQUFHUixNQUFNLE1BQVMsR0FDbkNpaUcsRUFBYTNoRyxHQUFRQSxFQUFLTixNQUFNLE1BQVMsR0FFekNraUcsRUFBVTFoRyxHQUFNd2dHLEVBQVd4Z0csR0FDM0IyaEcsRUFBWTdoRyxHQUFRMGdHLEVBQVcxZ0csR0FDL0I4aEcsRUFBYUYsR0FBV0MsRUFXNUIsR0FUSTNoRyxHQUFNd2dHLEVBQVd4Z0csR0FFbkJ5aEcsRUFBWUQsRUFDSEEsRUFBUWhvRyxTQUVqQmlvRyxFQUFVem5HLE1BQ1Z5bkcsRUFBWUEsRUFBVW5rRyxPQUFPa2tHLEtBRzFCQyxFQUFVam9HLE9BQVEsTUFBTyxJQUc5QixHQUFJaW9HLEVBQVVqb0csT0FBUSxDQUNwQixJQUFJNmpDLEVBQU9va0UsRUFBVUEsRUFBVWpvRyxPQUFTLEdBQ3hDK25HLEVBQTRCLE1BQVRsa0UsR0FBeUIsT0FBVEEsR0FBMEIsS0FBVEEsT0FFcERra0UsR0FBbUIsRUFJckIsSUFEQSxJQUFJTSxFQUFLLEVBQ0E5bkcsRUFBSTBuRyxFQUFVam9HLE9BQVFPLEdBQUssRUFBR0EsSUFBSyxDQUMxQyxJQUFJK25HLEVBQU9MLEVBQVUxbkcsR0FFUixNQUFUK25HLEVBQ0ZwQixFQUFVZSxFQUFXMW5HLEdBQ0gsT0FBVCtuRyxHQUNUcEIsRUFBVWUsRUFBVzFuRyxHQUNyQjhuRyxLQUNTQSxJQUNUbkIsRUFBVWUsRUFBVzFuRyxHQUNyQjhuRyxLQUlKLElBQUtELEVBQVksS0FBT0MsSUFBTUEsRUFBSUosRUFBVTEzRSxRQUFRLE9BR2xENjNFLEdBQ2lCLEtBQWpCSCxFQUFVLElBQ1JBLEVBQVUsSUFBT2pCLEVBQVdpQixFQUFVLEtBRXhDQSxFQUFVMTNFLFFBQVEsSUFFcEIsSUFBSTV2QixFQUFTc25HLEVBQVVuaUcsS0FBSyxLQUk1QixPQUZJaWlHLEdBQTBDLE1BQXRCcG5HLEVBQU9taUUsUUFBUSxLQUFZbmlFLEdBQVUsS0FFdERBLEVFNEJpQixDQUFnQnNHLEVBQVNnZ0csU0FBVVEsRUFBZ0JSLFdBRnZFaGdHLEVBQVNnZ0csU0FBV1EsRUFBZ0JSLFNBTWpDaGdHLEVBQVNnZ0csV0FDWmhnRyxFQUFTZ2dHLFNBQVcsS0FJakJoZ0csRUFNVCxTQUFTc2hHLElBQ1AsSUFBSUMsRUFBUyxLQWlDVDU5RSxFQUFZLEdBNEJoQixNQUFPLENBQ0w2OUUsVUE1REYsU0FBbUJDLEdBR2pCLE9BREFGLEVBQVNFLEVBQ0YsV0FDREYsSUFBV0UsSUFBWUYsRUFBUyxRQXlEdENHLG9CQXJERixTQUE2QjFoRyxFQUFVazNCLEVBQVF5cUUsRUFBcUJ0eEUsR0FJbEUsR0FBYyxNQUFWa3hFLEVBQWdCLENBQ2xCLElBQUk3bkcsRUFBMkIsbUJBQVg2bkcsRUFBd0JBLEVBQU92aEcsRUFBVWszQixHQUFVcXFFLEVBRWpELGlCQUFYN25HLEVBQzBCLG1CQUF4QmlvRyxFQUNUQSxFQUFvQmpvRyxFQUFRMjJCLEdBRzVCQSxHQUFTLEdBSVhBLEdBQW9CLElBQVgzMkIsUUFHWDIyQixHQUFTLElBbUNYdXhFLGVBN0JGLFNBQXdCL3dCLEdBQ3RCLElBQUkvZ0IsR0FBVyxFQUVmLFNBQVN2b0MsSUFDSHVvQyxHQUFVK2dCLEVBQUc1L0QsV0FBTSxFQUFRMVYsV0FJakMsT0FEQW9vQixFQUFVM3FCLEtBQUt1dUIsR0FDUixXQUNMdW9DLEdBQVcsRUFDWG5zQyxFQUFZQSxFQUFVeTFDLFFBQU8sU0FBVXlXLEdBQ3JDLE9BQU9BLElBQVN0b0QsT0FtQnBCczZFLGdCQWRGLFdBQ0UsSUFBSyxJQUFJaEgsRUFBT3QvRixVQUFVeEMsT0FBUTRFLEVBQU8sSUFBSUksTUFBTTg4RixHQUFPNXNELEVBQU8sRUFBR0EsRUFBTzRzRCxFQUFNNXNELElBQy9FdHdDLEVBQUtzd0MsR0FBUTF5QyxVQUFVMHlDLEdBR3pCdHFCLEVBQVUza0IsU0FBUSxTQUFVdW9CLEdBQzFCLE9BQU9BLEVBQVN0VyxXQUFNLEVBQVF0VCxRQVlwQyxJQUFJbWtHLElBQWlDLG9CQUFYei9GLFNBQTBCQSxPQUFPQyxXQUFZRCxPQUFPQyxTQUFTQyxlQUN2RixTQUFTdy9GLEVBQWdCL2pFLEVBQVMzTixHQUNoQ0EsRUFBU2h1QixPQUFPMi9GLFFBQVFoa0UsSUF3QzFCLElBQUlpa0UsRUFBZ0IsV0FDaEJDLEVBQWtCLGFBRXRCLFNBQVNDLElBQ1AsSUFDRSxPQUFPOS9GLE9BQU8rL0YsUUFBUXJ3RSxPQUFTLEdBQy9CLE1BQU83MEIsR0FHUCxNQUFPLElBU1gsU0FBU21sRyxFQUFxQnhpRyxRQUNkLElBQVZBLElBQ0ZBLEVBQVEsSUFHVGlpRyxHQUFzRyxHQUFVLEdBQ2pILElBckRJdDlGLEVBcURBODlGLEVBQWdCamdHLE9BQU8rL0YsUUFDdkJHLElBckQrQixLQUQvQi85RixFQUFLbkMsT0FBT21nRyxVQUFVQyxXQUNsQjEwRixRQUFRLGdCQUF1RCxJQUEvQnZKLEVBQUd1SixRQUFRLGlCQUEyRCxJQUFqQ3ZKLEVBQUd1SixRQUFRLG1CQUFxRCxJQUExQnZKLEVBQUd1SixRQUFRLFlBQXFELElBQWpDdkosRUFBR3VKLFFBQVEsbUJBQ3RKMUwsT0FBTysvRixTQUFXLGNBQWUvL0YsT0FBTysvRixRQXFEM0NNLEtBN0NzRCxJQUFuRHJnRyxPQUFPbWdHLFVBQVVDLFVBQVUxMEYsUUFBUSxZQThDdENzNEUsRUFBU3htRixFQUNUOGlHLEVBQXNCdGMsRUFBT3VjLGFBQzdCQSxPQUF1QyxJQUF4QkQsR0FBeUNBLEVBQ3hERSxFQUF3QnhjLEVBQU9zYixvQkFDL0JBLE9BQWdELElBQTFCa0IsRUFBbUNkLEVBQWtCYyxFQUMzRUMsRUFBbUJ6YyxFQUFPMGMsVUFDMUJBLE9BQWlDLElBQXJCRCxFQUE4QixFQUFJQSxFQUM5Q0UsRUFBV25qRyxFQUFNbWpHLFNBQVcxQyxFQUFtQkgsRUFBZ0J0Z0csRUFBTW1qRyxXQUFhLEdBRXRGLFNBQVNDLEVBQWVDLEdBQ3RCLElBQUkvckQsRUFBTytyRCxHQUFnQixHQUN2QmxtRyxFQUFNbTZDLEVBQUtuNkMsSUFDWCswQixFQUFRb2xCLEVBQUtwbEIsTUFFYm94RSxFQUFtQjlnRyxPQUFPckMsU0FJMUJneUMsRUFIV214RCxFQUFpQm5ELFNBQ25CbUQsRUFBaUJsZ0YsT0FDbkJrZ0YsRUFBaUJ6ckcsS0FJNUIsT0FESXNyRyxJQUFVaHhELEVBQU9vdUQsRUFBY3B1RCxFQUFNZ3hELElBQ2xDLEVBQWVoeEQsRUFBTWpnQixFQUFPLzBCLEdBR3JDLFNBQVNvbUcsSUFDUCxPQUFPaHNGLEtBQUt5USxTQUFTeHZCLFNBQVMsSUFBSXdqRSxPQUFPLEVBQUdrbkMsR0FHOUMsSUFBSU0sRUFBb0IvQixJQUV4QixTQUFTNTBELEVBQVNzQixHQUNoQixFQUFTbzBELEVBQVNwMEQsR0FFbEJvMEQsRUFBUXJwRyxPQUFTdXBHLEVBQWN2cEcsT0FDL0JzcUcsRUFBa0J4QixnQkFBZ0JPLEVBQVFwaUcsU0FBVW9pRyxFQUFRbHJFLFFBRzlELFNBQVNvc0UsRUFBZTUvRSxJQXBFMUIsU0FBbUNBLEdBQ2pDLFlBQXVCam1CLElBQWhCaW1CLEVBQU1xTyxRQUFpRSxJQUExQ3l3RSxVQUFVQyxVQUFVMTBGLFFBQVEsVUFxRTFEdzFGLENBQTBCNy9FLElBQzlCOC9FLEVBQVVQLEVBQWV2L0UsRUFBTXFPLFFBR2pDLFNBQVMweEUsSUFDUEQsRUFBVVAsRUFBZWQsTUFHM0IsSUFBSXVCLEdBQWUsRUFFbkIsU0FBU0YsRUFBVXhqRyxHQUNiMGpHLEdBQ0ZBLEdBQWUsRUFDZmgzRCxLQUdBMjJELEVBQWtCM0Isb0JBQW9CMWhHLEVBRHpCLE1BQzJDMmhHLEdBQXFCLFNBQVU5N0QsR0FDakZBLEVBQ0Y2RyxFQUFTLENBQ1B4VixPQUpPLE1BS1BsM0IsU0FBVUEsSUFTcEIsU0FBbUIyakcsR0FDakIsSUFBSUMsRUFBYXhCLEVBQVFwaUcsU0FJckI2akcsRUFBVUMsRUFBUS8xRixRQUFRNjFGLEVBQVc1bUcsTUFDeEIsSUFBYjZtRyxJQUFnQkEsRUFBVSxHQUM5QixJQUFJRSxFQUFZRCxFQUFRLzFGLFFBQVE0MUYsRUFBYTNtRyxNQUMxQixJQUFmK21HLElBQWtCQSxFQUFZLEdBQ2xDLElBQUlDLEVBQVFILEVBQVVFLEVBRWxCQyxJQUNGTixHQUFlLEVBQ2ZPLEVBQUdELElBbkJDRSxDQUFVbGtHLE1BdUJsQixJQUFJbWtHLEVBQWtCbEIsRUFBZWQsS0FDakMyQixFQUFVLENBQUNLLEVBQWdCbm5HLEtBRS9CLFNBQVNvbkcsRUFBV3BrRyxHQUNsQixPQUFPZ2pHLEVBQVd6QyxFQUFXdmdHLEdBdUUvQixTQUFTaWtHLEVBQUdybEcsR0FDVjBqRyxFQUFjMkIsR0FBR3JsRyxHQVduQixJQUFJeWxHLEVBQWdCLEVBRXBCLFNBQVNDLEVBQWtCTixHQUdILEtBRnRCSyxHQUFpQkwsSUFFb0IsSUFBVkEsR0FDekIzaEcsT0FBT3dPLGlCQUFpQm94RixFQUFlcUIsR0FDbkNaLEdBQXlCcmdHLE9BQU93TyxpQkFBaUJxeEYsRUFBaUJ1QixJQUMzQyxJQUFsQlksSUFDVGhpRyxPQUFPeU8sb0JBQW9CbXhGLEVBQWVxQixHQUN0Q1osR0FBeUJyZ0csT0FBT3lPLG9CQUFvQm94RixFQUFpQnVCLElBSTdFLElBQUljLEdBQVksRUFpQ1puQyxFQUFVLENBQ1pycEcsT0FBUXVwRyxFQUFjdnBHLE9BQ3RCbStCLE9BQVEsTUFDUmwzQixTQUFVbWtHLEVBQ1ZDLFdBQVlBLEVBQ1pwckcsS0FwSUYsU0FBY2c1QyxFQUFNamdCLEdBRWxCLElBQUltRixFQUFTLE9BQ1RsM0IsRUFBVyxFQUFlZ3lDLEVBQU1qZ0IsRUFBT3F4RSxJQUFhaEIsRUFBUXBpRyxVQUNoRXFqRyxFQUFrQjNCLG9CQUFvQjFoRyxFQUFVazNCLEVBQVF5cUUsR0FBcUIsU0FBVTk3RCxHQUNyRixHQUFLQSxFQUFMLENBQ0EsSUFBSWhnQixFQUFPdStFLEVBQVdwa0csR0FDbEJoRCxFQUFNZ0QsRUFBU2hELElBQ2YrMEIsRUFBUS94QixFQUFTK3hCLE1BRXJCLEdBQUl3d0UsRUFNRixHQUxBRCxFQUFja0MsVUFBVSxDQUN0QnhuRyxJQUFLQSxFQUNMKzBCLE1BQU9BLEdBQ04sS0FBTWxNLEdBRUwrOEUsRUFDRnZnRyxPQUFPckMsU0FBUzZsQixLQUFPQSxNQUNsQixDQUNMLElBQUk0K0UsRUFBWVgsRUFBUS8xRixRQUFRcTBGLEVBQVFwaUcsU0FBU2hELEtBQzdDc2dHLEVBQVd3RyxFQUFRbmdHLE1BQU0sRUFBRzhnRyxFQUFZLEdBQzVDbkgsRUFBU3RrRyxLQUFLZ0gsRUFBU2hELEtBQ3ZCOG1HLEVBQVV4RyxFQUNWNXdELEVBQVMsQ0FDUHhWLE9BQVFBLEVBQ1JsM0IsU0FBVUEsU0FLZHFDLE9BQU9yQyxTQUFTNmxCLEtBQU9BLE9BdUczQmhvQixRQWxHRixTQUFpQm0wQyxFQUFNamdCLEdBRXJCLElBQUltRixFQUFTLFVBQ1RsM0IsRUFBVyxFQUFlZ3lDLEVBQU1qZ0IsRUFBT3F4RSxJQUFhaEIsRUFBUXBpRyxVQUNoRXFqRyxFQUFrQjNCLG9CQUFvQjFoRyxFQUFVazNCLEVBQVF5cUUsR0FBcUIsU0FBVTk3RCxHQUNyRixHQUFLQSxFQUFMLENBQ0EsSUFBSWhnQixFQUFPdStFLEVBQVdwa0csR0FDbEJoRCxFQUFNZ0QsRUFBU2hELElBQ2YrMEIsRUFBUS94QixFQUFTK3hCLE1BRXJCLEdBQUl3d0UsRUFNRixHQUxBRCxFQUFjb0MsYUFBYSxDQUN6QjFuRyxJQUFLQSxFQUNMKzBCLE1BQU9BLEdBQ04sS0FBTWxNLEdBRUwrOEUsRUFDRnZnRyxPQUFPckMsU0FBU25DLFFBQVFnb0IsT0FDbkIsQ0FDTCxJQUFJNCtFLEVBQVlYLEVBQVEvMUYsUUFBUXEwRixFQUFRcGlHLFNBQVNoRCxNQUM5QixJQUFmeW5HLElBQWtCWCxFQUFRVyxHQUFhemtHLEVBQVNoRCxLQUNwRDB2QyxFQUFTLENBQ1B4VixPQUFRQSxFQUNSbDNCLFNBQVVBLFNBS2RxQyxPQUFPckMsU0FBU25DLFFBQVFnb0IsUUF1RTVCbytFLEdBQUlBLEVBQ0pVLE9BL0RGLFdBQ0VWLEdBQUksSUErREpXLFVBNURGLFdBQ0VYLEVBQUcsSUE0REhZLE1BekNGLFNBQWV0RCxRQUNFLElBQVhBLElBQ0ZBLEdBQVMsR0FHWCxJQUFJdUQsRUFBVXpCLEVBQWtCN0IsVUFBVUQsR0FPMUMsT0FMS2dELElBQ0hELEVBQWtCLEdBQ2xCQyxHQUFZLEdBR1AsV0FNTCxPQUxJQSxJQUNGQSxHQUFZLEVBQ1pELEdBQW1CLElBR2RRLE1Bd0JUQyxPQXBCRixTQUFnQng5RSxHQUNkLElBQUl5OUUsRUFBVzNCLEVBQWtCekIsZUFBZXI2RSxHQUVoRCxPQURBKzhFLEVBQWtCLEdBQ1gsV0FDTEEsR0FBbUIsR0FDbkJVLE9BaUJKLE9BQU81QyxFQ2hlVCxJQUFJNkMsRUFBd0IsV0FDeEJDLEVBQXVDLG9CQUFmNUYsV0FBNkJBLFdBQStCLG9CQUFYajlGLE9BQXlCQSxZQUEyQixJQUFYLEVBQUFRLEVBQXlCLEVBQUFBLEVBQVMsR0FleEosU0FBU3NpRyxFQUFtQm45RixHQUMxQixJQUFJNnRFLEVBQVcsR0FDZixNQUFPLENBQ0x1dkIsR0FBSSxTQUFZOTJCLEdBQ2R1SCxFQUFTNzhFLEtBQUtzMUUsSUFFaEIrMkIsSUFBSyxTQUFhLzJCLEdBQ2hCdUgsRUFBV0EsRUFBU3pjLFFBQU8sU0FBVTN5RCxHQUNuQyxPQUFPQSxJQUFNNm5FLE1BR2pCL21FLElBQUssV0FDSCxPQUFPUyxHQUVUM0IsSUFBSyxTQUFhMHdFLEVBQVV1dUIsR0FDMUJ0OUYsRUFBUSt1RSxFQUNSbEIsRUFBUzcyRSxTQUFRLFNBQVVzdkUsR0FDekIsT0FBT0EsRUFBUXRtRSxFQUFPczlGLFFBeUk5QixRQUZZLGlCQTdIWixTQUE0Qmg5RixFQUFjaTlGLEdBQ3hDLElBQUlDLEVBQXVCQyxFQXhDdkJ6b0csRUEwQ0Ewb0csRUFBYyw0QkF6Q1hSLEVBREhsb0csRUFBTSx5QkFDb0Jrb0csRUFBZWxvRyxJQUFRLEdBQUssR0F5Q0ksTUFFMURzekMsRUFBd0IsU0FBVXExRCxHQUdwQyxTQUFTcjFELElBQ1AsSUFBSS9ELEVBSUosT0FGQUEsRUFBUW81RCxFQUFXMTBGLE1BQU05VyxLQUFNb0IsWUFBY3BCLE1BQ3ZDeXJHLFFBQVVULEVBQW1CNTRELEVBQU0xc0MsTUFBTW1JLE9BQ3hDdWtDLEVBUFR1ekQsRUFBZXh2RCxFQUFVcTFELEdBVXpCLElBQUkvM0QsRUFBUzBDLEVBQVNsNEMsVUFvQ3RCLE9BbENBdzFDLEVBQU9qaUIsZ0JBQWtCLFdBQ3ZCLElBQUl3ckIsRUFFSixPQUFPQSxFQUFPLElBQVN1dUQsR0FBZXZyRyxLQUFLeXJHLFFBQVN6dUQsR0FHdER2SixFQUFPMWIsMEJBQTRCLFNBQW1Db2IsR0FDcEUsR0FBSW56QyxLQUFLMEYsTUFBTW1JLFFBQVVzbEMsRUFBVXRsQyxNQUFPLENBQ3hDLElBRUlzOUYsRUFGQU8sRUFBVzFyRyxLQUFLMEYsTUFBTW1JLE1BQ3RCK3VFLEVBQVd6cEMsRUFBVXRsQyxRQTlEZm1nQixFQWlFRzA5RSxNQWpFQWprRyxFQWlFVW0xRSxHQS9EZCxJQUFONXVELEdBQVcsRUFBSUEsR0FBTSxFQUFJdm1CLEVBRXpCdW1CLEdBQU1BLEdBQUt2bUIsR0FBTUEsR0E4RGxCMGpHLEVBQWMsR0FFZEEsRUFBOEMsbUJBQXpCQyxFQUFzQ0EsRUFBcUJNLEVBQVU5dUIsR0FBWWt1QixFQVFsRixJQUZwQkssR0FBZSxJQUdibnJHLEtBQUt5ckcsUUFBUXYvRixJQUFJaW5DLEVBQVV0bEMsTUFBT3M5RixJQTdFOUMsSUFBa0JuOUUsRUFBR3ZtQixHQW1GakJnc0MsRUFBTzV4QyxPQUFTLFdBQ2QsT0FBTzdCLEtBQUswRixNQUFNcUosVUFHYm9uQyxFQS9DbUIsQ0FnRDFCLEVBQUF2ZixXQUVGdWYsRUFBUzkxQyxvQkFBcUJnckcsRUFBd0IsSUFBMEJFLEdBQWUsc0JBQTZCRixHQUU1SCxJQUFJL25DLEVBQXdCLFNBQVVxb0MsR0FHcEMsU0FBU3JvQyxJQUNQLElBQUlqb0IsRUFpQkosT0FmQUEsRUFBU3N3RCxFQUFZNzBGLE1BQU05VyxLQUFNb0IsWUFBY3BCLE1BQ3hDNDNCLE1BQVEsQ0FDYi9wQixNQUFPd3RDLEVBQU85dEMsWUFHaEI4dEMsRUFBT3V3RCxTQUFXLFNBQVVodkIsRUFBVXV1QixHQUdDLEtBRkksRUFBdEI5dkQsRUFBT3BtQixjQUVOazJFLElBQ2xCOXZELEVBQU85SSxTQUFTLENBQ2Qxa0MsTUFBT3d0QyxFQUFPOXRDLGNBS2I4dEMsRUFwQlRzcUQsRUFBZXJpQyxFQUFVcW9DLEdBdUJ6QixJQUFJcGUsRUFBVWpxQixFQUFTcmxFLFVBa0N2QixPQWhDQXN2RixFQUFReDFELDBCQUE0QixTQUFtQ29iLEdBQ3JFLElBQUlsZSxFQUFla2UsRUFBVWxlLGFBQzdCajFCLEtBQUtpMUIsYUFBZUEsUUFBc0Q2MUUsRUFBd0I3MUUsR0FHcEdzNEQsRUFBUWwxRCxrQkFBb0IsV0FDdEJyNEIsS0FBS2cxQixRQUFRdTJFLElBQ2Z2ckcsS0FBS2cxQixRQUFRdTJFLEdBQWFOLEdBQUdqckcsS0FBSzRyRyxVQUdwQyxJQUFJMzJFLEVBQWVqMUIsS0FBSzBGLE1BQU11dkIsYUFDOUJqMUIsS0FBS2kxQixhQUFlQSxRQUFzRDYxRSxFQUF3QjcxRSxHQUdwR3M0RCxFQUFRaG9ELHFCQUF1QixXQUN6QnZsQyxLQUFLZzFCLFFBQVF1MkUsSUFDZnZyRyxLQUFLZzFCLFFBQVF1MkUsR0FBYUwsSUFBSWxyRyxLQUFLNHJHLFdBSXZDcmUsRUFBUWhnRixTQUFXLFdBQ2pCLE9BQUl2TixLQUFLZzFCLFFBQVF1MkUsR0FDUnZyRyxLQUFLZzFCLFFBQVF1MkUsR0FBYW4rRixNQUUxQmUsR0FJWG8vRSxFQUFRMXJGLE9BQVMsV0FDZixPQXBIYWtOLEVBb0hJL08sS0FBSzBGLE1BQU1xSixTQW5IekJuTCxNQUFNQyxRQUFRa0wsR0FBWUEsRUFBUyxHQUFLQSxHQW1ITC9PLEtBQUs0M0IsTUFBTS9wQixPQXBIdkQsSUFBbUJrQixHQXVIUnUwRCxFQTFEbUIsQ0EyRDFCLEVBQUExc0MsV0FHRixPQURBMHNDLEVBQVMvaUUsZUFBZ0IrcUcsRUFBd0IsSUFBMEJDLEdBQWUsV0FBa0JELEdBQ3JHLENBQ0xuMUQsU0FBVUEsRUFDVm10QixTQUFVQSxJLHVCQ3pLQyxTQUFTLEVBQThCOWtFLEVBQVE2Z0UsR0FDNUQsR0FBYyxNQUFWN2dFLEVBQWdCLE1BQU8sR0FDM0IsSUFFSXFFLEVBQUsxRCxFQUZMOEYsRUFBUyxHQUNUcTZELEVBQWF0aEUsT0FBT2tCLEtBQUtWLEdBRzdCLElBQUtXLEVBQUksRUFBR0EsRUFBSW1nRSxFQUFXMWdFLE9BQVFPLElBQ2pDMEQsRUFBTXk4RCxFQUFXbmdFLEdBQ2JrZ0UsRUFBU3pyRCxRQUFRL1EsSUFBUSxJQUM3Qm9DLEVBQU9wQyxHQUFPckUsRUFBT3FFLElBR3ZCLE9BQU9vQyxFLG9CQ1NMNG1HLEVBTnFCLFNBQTRCNXFHLEdBQ25ELElBQUkrekIsRUFBVSxJQUVkLE9BREFBLEVBQVF2MEIsWUFNUyxpQkFMVnUwQixFQUtUODJFLEdBVUk5MkUsRUFOdUIsU0FBNEIvekIsR0FDckQsSUFBSSt6QixFQUFVLElBRWQsT0FEQUEsRUFBUXYwQixZQU1XLFNBTFp1MEIsRUFLVCsyRSxHQU1JQyxFQUVKLFNBQVU5NUQsR0FZUixTQUFTODVELEVBQU90bUcsR0FDZCxJQUFJMHNDLEVBMEJKLE9BeEJBQSxFQUFRRixFQUFpQjl6QyxLQUFLNEIsS0FBTTBGLElBQVUxRixNQUN4QzQzQixNQUFRLENBQ1oveEIsU0FBVUgsRUFBTXVpRyxRQUFRcGlHLFVBTzFCdXNDLEVBQU02NUQsWUFBYSxFQUNuQjc1RCxFQUFNODVELGlCQUFtQixLQUVwQnhtRyxFQUFNeW1HLGdCQUNULzVELEVBQU15NEQsU0FBV25sRyxFQUFNdWlHLFFBQVEyQyxRQUFPLFNBQVUva0csR0FDMUN1c0MsRUFBTTY1RCxXQUNSNzVELEVBQU1HLFNBQVMsQ0FDYjFzQyxTQUFVQSxJQUdadXNDLEVBQU04NUQsaUJBQW1Ccm1HLE1BS3hCdXNDLEVBdENUdXpELEVBQWVxRyxFQUFROTVELEdBRXZCODVELEVBQU9JLGlCQUFtQixTQUEwQnZHLEdBQ2xELE1BQU8sQ0FDTGh1RCxLQUFNLElBQ04zdUIsSUFBSyxJQUNMazJCLE9BQVEsR0FDUml0RCxRQUFzQixNQUFieEcsSUFrQ2IsSUFBSXB5RCxFQUFTdTRELEVBQU8vdEcsVUE4QnBCLE9BNUJBdzFDLEVBQU9wYixrQkFBb0IsV0FDekJyNEIsS0FBS2lzRyxZQUFhLEVBRWRqc0csS0FBS2tzRyxrQkFDUGxzRyxLQUFLdXlDLFNBQVMsQ0FDWjFzQyxTQUFVN0YsS0FBS2tzRyxvQkFLckJ6NEQsRUFBT2xPLHFCQUF1QixXQUN4QnZsQyxLQUFLNnFHLFVBQVU3cUcsS0FBSzZxRyxZQUcxQnAzRCxFQUFPNXhDLE9BQVMsV0FDZCxPQUFPLGdCQUFvQm16QixFQUFRbWhCLFNBQVUsQ0FDM0N0b0MsTUFBTyxDQUNMbzZGLFFBQVNqb0csS0FBSzBGLE1BQU11aUcsUUFDcEJwaUcsU0FBVTdGLEtBQUs0M0IsTUFBTS94QixTQUNyQmlHLE1BQU9rZ0csRUFBT0ksaUJBQWlCcHNHLEtBQUs0M0IsTUFBTS94QixTQUFTZ2dHLFVBQ25Ec0csY0FBZW5zRyxLQUFLMEYsTUFBTXltRyxnQkFFM0IsZ0JBQW9CTixFQUFlMTFELFNBQVUsQ0FDOUNwbkMsU0FBVS9PLEtBQUswRixNQUFNcUosVUFBWSxLQUNqQ2xCLE1BQU83TixLQUFLMEYsTUFBTXVpRyxZQUlmK0QsRUF4RVQsQ0F5RUUsYUE2Q0EsWUE0Q0EsWUE0SEYsSUFBSU0sRUFBVSxHQUVWQyxFQUFlLEVBeUJuQixTQUFTQyxFQUFVM0csRUFBVTEyRixRQUNYLElBQVpBLElBQ0ZBLEVBQVUsS0FHVyxpQkFBWkEsR0FBd0J2TCxNQUFNQyxRQUFRc0wsTUFDL0NBLEVBQVUsQ0FDUjBvQyxLQUFNMW9DLElBSVYsSUFBSXM5RixFQUFXdDlGLEVBQ1gwb0MsRUFBTzQwRCxFQUFTNTBELEtBQ2hCNjBELEVBQWlCRCxFQUFTdGxHLE1BQzFCQSxPQUEyQixJQUFuQnVsRyxHQUFvQ0EsRUFDNUNDLEVBQWtCRixFQUFTbnFDLE9BQzNCQSxPQUE2QixJQUFwQnFxQyxHQUFxQ0EsRUFDOUNDLEVBQXFCSCxFQUFTcHFDLFVBQzlCQSxPQUFtQyxJQUF2QnVxQyxHQUF3Q0EsRUFFeEQsTUFEWSxHQUFHbHFHLE9BQU9tMUMsR0FDVGdyRCxRQUFPLFNBQVVnSyxFQUFTaDFELEdBQ3JDLElBQUtBLEdBQWlCLEtBQVRBLEVBQWEsT0FBTyxLQUNqQyxHQUFJZzFELEVBQVMsT0FBT0EsRUFFcEIsSUFBSUMsRUEvQ1IsU0FBdUJqMUQsRUFBTTFvQyxHQUMzQixJQUFJbTJDLEVBQVcsR0FBS24yQyxFQUFRa2QsSUFBTWxkLEVBQVFtekQsT0FBU256RCxFQUFRa3pELFVBQ3ZEMHFDLEVBQVlULEVBQVFobkQsS0FBY2duRCxFQUFRaG5ELEdBQVksSUFDMUQsR0FBSXluRCxFQUFVbDFELEdBQU8sT0FBT2sxRCxFQUFVbDFELEdBQ3RDLElBQUkzNEMsRUFBTyxHQUVQSyxFQUFTLENBQ1h5dEcsT0FGVyxJQUFhbjFELEVBQU0zNEMsRUFBTWlRLEdBR3BDalEsS0FBTUEsR0FRUixPQUxJcXRHLEVBZGEsTUFlZlEsRUFBVWwxRCxHQUFRdDRDLEVBQ2xCZ3RHLEtBR0todEcsRUErQmMwdEcsQ0FBY3AxRCxFQUFNLENBQ3JDeHJCLElBQUtsbEIsRUFDTG03RCxPQUFRQSxFQUNSRCxVQUFXQSxJQUVUMnFDLEVBQVNGLEVBQWFFLE9BQ3RCOXRHLEVBQU80dEcsRUFBYTV0RyxLQUVwQjRNLEVBQVFraEcsRUFBTzVyQyxLQUFLeWtDLEdBQ3hCLElBQUsvNUYsRUFBTyxPQUFPLEtBQ25CLElBQUlvZCxFQUFNcGQsRUFBTSxHQUNad2tELEVBQVN4a0QsRUFBTXRDLE1BQU0sR0FDckI2aUcsRUFBVXhHLElBQWEzOEUsRUFDM0IsT0FBSS9oQixJQUFVa2xHLEVBQWdCLEtBQ3ZCLENBQ0x4MEQsS0FBTUEsRUFFTjN1QixJQUFjLE1BQVQydUIsR0FBd0IsS0FBUjN1QixFQUFhLElBQU1BLEVBRXhDbWpGLFFBQVNBLEVBRVRqdEQsT0FBUWxnRCxFQUFLMmpHLFFBQU8sU0FBVWwvQixFQUFNOWdFLEVBQUttMkIsR0FFdkMsT0FEQTJxQyxFQUFLOWdFLEVBQUk1QixNQUFRcXZELEVBQU90M0IsR0FDakIycUMsSUFDTixPQUVKLE1BaUJMLElBQUl1cEMsRUFFSixTQUFVaDdELEdBR1IsU0FBU2c3RCxJQUNQLE9BQU9oN0QsRUFBaUJwN0IsTUFBTTlXLEtBQU1vQixZQUFjcEIsS0FtQ3BELE9BdENBMmxHLEVBQWV1SCxFQUFPaDdELEdBTVRnN0QsRUFBTWp2RyxVQUVaNEQsT0FBUyxXQUNkLElBQUl1d0MsRUFBUXB5QyxLQUVaLE9BQU8sZ0JBQW9CZzFCLEVBQVFzdUMsU0FBVSxNQUFNLFNBQVU2cEMsR0FDMURBLEdBQXdILEdBQVUsR0FDbkksSUFBSXRuRyxFQUFXdXNDLEVBQU0xc0MsTUFBTUcsVUFBWXNuRyxFQUFVdG5HLFNBSTdDSCxFQUFRLEVBQVMsR0FBSXluRyxFQUFXLENBQ2xDdG5HLFNBQVVBLEVBQ1ZpRyxNQUxVc21DLEVBQU0xc0MsTUFBTTBuRyxjQUFnQmg3RCxFQUFNMXNDLE1BQU0wbkcsY0FDbERoN0QsRUFBTTFzQyxNQUFNbXlDLEtBQU8yMEQsRUFBVTNtRyxFQUFTZ2dHLFNBQVV6ekQsRUFBTTFzQyxPQUFTeW5HLEVBQVVyaEcsUUFPdkVxb0MsRUFBYy9CLEVBQU0xc0MsTUFDcEJxSixFQUFXb2xDLEVBQVlwbEMsU0FDdkJyTixFQUFZeXlDLEVBQVl6eUMsVUFDeEJHLEVBQVNzeUMsRUFBWXR5QyxPQU96QixPQUpJK0IsTUFBTUMsUUFBUWtMLElBQWlDLElBQXBCQSxFQUFTblEsU0FDdENtUSxFQUFXLE1BR04sZ0JBQW9CaW1CLEVBQVFtaEIsU0FBVSxDQUMzQ3RvQyxNQUFPbkksR0FDTkEsRUFBTW9HLE1BQVFpRCxFQUErQixtQkFBYkEsRUFBdUhBLEVBQVNySixHQUFTcUosRUFBV3JOLEVBQVksZ0JBQW9CQSxFQUFXZ0UsR0FBUzdELEVBQVNBLEVBQU82RCxHQUFTLEtBQTJCLG1CQUFicUosRUFBdUhBLEVBQVNySixHQUFTLFVBSXhad25HLEVBdkNULENBd0NFLGFBa0pBLFlBa0JGLElBQUlHLEVBRUosU0FBVW43RCxHQUdSLFNBQVNtN0QsSUFDUCxPQUFPbjdELEVBQWlCcDdCLE1BQU05VyxLQUFNb0IsWUFBY3BCLEtBZ0NwRCxPQW5DQTJsRyxFQUFlMEgsRUFBUW43RCxHQU1WbTdELEVBQU9wdkcsVUFFYjRELE9BQVMsV0FDZCxJQUFJdXdDLEVBQVFweUMsS0FFWixPQUFPLGdCQUFvQmcxQixFQUFRc3VDLFNBQVUsTUFBTSxTQUFVdHVDLEdBQzFEQSxHQUF1SCxHQUFVLEdBQ2xJLElBQ0lwdUIsRUFBU2tGLEVBRFRqRyxFQUFXdXNDLEVBQU0xc0MsTUFBTUcsVUFBWW12QixFQUFRbnZCLFNBZS9DLE9BVEEsbUJBQXVCdXNDLEVBQU0xc0MsTUFBTXFKLFVBQVUsU0FBVWdKLEdBQ3JELEdBQWEsTUFBVGpNLEdBQWlCLGlCQUFxQmlNLEdBQVEsQ0FDaERuUixFQUFVbVIsRUFDVixJQUFJOC9CLEVBQU85L0IsRUFBTXJTLE1BQU1teUMsTUFBUTkvQixFQUFNclMsTUFBTVIsS0FDM0M0RyxFQUFRK3JDLEVBQU8yMEQsRUFBVTNtRyxFQUFTZ2dHLFNBQVUsRUFBUyxHQUFJOXRGLEVBQU1yUyxNQUFPLENBQ3BFbXlDLEtBQU1BLEtBQ0Y3aUIsRUFBUWxwQixVQUdYQSxFQUFRLGVBQW1CbEYsRUFBUyxDQUN6Q2YsU0FBVUEsRUFDVnVuRyxjQUFldGhHLElBQ1osU0FJRnVoRyxFQXBDVCxDQXFDRSxhQTZDRS90RSxFQUFhLGFDMXJCakIsSUFBSWd1RSxFQUVKLFNBQVVwN0QsR0FHUixTQUFTbzdELElBR1AsSUFGQSxJQUFJbDdELEVBRUtzdUQsRUFBT3QvRixVQUFVeEMsT0FBUTRFLEVBQU8sSUFBSUksTUFBTTg4RixHQUFPNXNELEVBQU8sRUFBR0EsRUFBTzRzRCxFQUFNNXNELElBQy9FdHdDLEVBQUtzd0MsR0FBUTF5QyxVQUFVMHlDLEdBS3pCLE9BRkExQixFQUFRRixFQUFpQjl6QyxLQUFLMFksTUFBTW83QixFQUFrQixDQUFDbHlDLE1BQU0wQyxPQUFPYyxLQUFVeEQsTUFDeEVpb0csUUFBVUMsRUFBcUI5MUQsRUFBTTFzQyxPQUNwQzBzQyxFQVlULE9BdkJBdXpELEVBQWUySCxFQUFlcDdELEdBY2pCbzdELEVBQWNydkcsVUFFcEI0RCxPQUFTLFdBQ2QsT0FBTyxnQkFBb0JtcUcsRUFBUSxDQUNqQy9ELFFBQVNqb0csS0FBS2lvRyxRQUNkbDVGLFNBQVUvTyxLQUFLMEYsTUFBTXFKLFlBSWxCdStGLEVBeEJULENBeUJFLGFBK0NBLFlBZUYsSUFBSUMsRUFBb0IsU0FBMkJub0csRUFBSWloRyxHQUNyRCxNQUFxQixtQkFBUGpoRyxFQUFvQkEsRUFBR2loRyxHQUFtQmpoRyxHQUV0RG9vRyxFQUFzQixTQUE2QnBvRyxFQUFJaWhHLEdBQ3pELE1BQXFCLGlCQUFQamhHLEVBQWtCLEVBQWVBLEVBQUksS0FBTSxLQUFNaWhHLEdBQW1CamhHLEdBR2hGcW9HLEVBQWlCLFNBQXdCajNFLEdBQzNDLE9BQU9BLEdBR0x3cUIsRUFBYSxrQkFFUyxJQUFmQSxJQUNUQSxFQUFheXNELEdBT2YsSUFBSUMsRUFBYTFzRCxHQUFXLFNBQVVoRSxFQUFNMndELEdBQzFDLElBQUlDLEVBQVc1d0QsRUFBSzR3RCxTQUNoQkMsRUFBVzd3RCxFQUFLNndELFNBQ2hCQyxFQUFXOXdELEVBQUsvWixRQUNoQjhxRSxFQUFPLEVBQThCL3dELEVBQU0sQ0FBQyxXQUFZLFdBQVksWUFFcEUvM0MsRUFBUzhvRyxFQUFLOW9HLE9BRWRTLEVBQVEsRUFBUyxHQUFJcW9HLEVBQU0sQ0FDN0I5cUUsUUFBUyxTQUFpQjFaLEdBQ3hCLElBQ011a0YsR0FBVUEsRUFBU3ZrRixHQUN2QixNQUFPeWtGLEdBRVAsTUFEQXprRixFQUFNckssaUJBQ0E4dUYsRUFHSHprRixFQUFNeEssa0JBQ00sSUFBakJ3SyxFQUFNbkksUUFDTG5jLEdBQXFCLFVBQVhBLEdBdkJqQixTQUF5QnNrQixHQUN2QixTQUFVQSxFQUFNdEksU0FBV3NJLEVBQU12SSxRQUFVdUksRUFBTXpJLFNBQVd5SSxFQUFNeEksVUF1QjdEa3RGLENBQWdCMWtGLEtBRWJBLEVBQU1ySyxpQkFDTjJ1RixRQWNSLE9BUEVub0csRUFBTTh5QixJQURKaTFFLElBQW1CenNELEdBQ1Qyc0QsR0FFQUMsRUFLUCxnQkFBb0IsSUFBS2xvRyxNQVc5QndvRyxFQUFPbHRELEdBQVcsU0FBVXhDLEVBQU9tdkQsR0FDckMsSUFBSVEsRUFBa0IzdkQsRUFBTTk4QyxVQUN4QkEsT0FBZ0MsSUFBcEJ5c0csRUFBNkJULEVBQWFTLEVBQ3REenFHLEVBQVU4NkMsRUFBTTk2QyxRQUNoQjBCLEVBQUtvNUMsRUFBTXA1QyxHQUNYd29HLEVBQVdwdkQsRUFBTW92RCxTQUNqQkcsRUFBTyxFQUE4QnZ2RCxFQUFPLENBQUMsWUFBYSxVQUFXLEtBQU0sYUFFL0UsT0FBTyxnQkFBb0IsV0FBMEIsTUFBTSxTQUFVeHBCLEdBQ2xFQSxHQUFxSCxHQUFVLEdBQ2hJLElBQUlpekUsRUFBVWp6RSxFQUFRaXpFLFFBQ2xCcGlHLEVBQVcybkcsRUFBb0JELEVBQWtCbm9HLEVBQUk0dkIsRUFBUW52QixVQUFXbXZCLEVBQVFudkIsVUFDaEY2bEIsRUFBTzdsQixFQUFXb2lHLEVBQVFnQyxXQUFXcGtHLEdBQVksR0FFakRILEVBQVEsRUFBUyxHQUFJcW9HLEVBQU0sQ0FDN0JyaUYsS0FBTUEsRUFDTm1pRixTQUFVLFdBQ1IsSUFBSWhvRyxFQUFXMG5HLEVBQWtCbm9HLEVBQUk0dkIsRUFBUW52QixXQUNoQ25DLEVBQVV1a0csRUFBUXZrRyxRQUFVdWtHLEVBQVFwcEcsTUFDMUNnSCxNQVdYLE9BTkk0bkcsSUFBbUJ6c0QsRUFDckJ0N0MsRUFBTTh5QixJQUFNbTFFLEdBQWdCQyxFQUU1QmxvRyxFQUFNa29HLFNBQVdBLEVBR1osZ0JBQW9CbHNHLEVBQVdnRSxTQW1CdEMwb0csRUFBbUIsU0FBd0I1M0UsR0FDN0MsT0FBT0EsR0FHTDYzRSxFQUFlLGtCQUVTLElBQWpCQSxJQUNUQSxFQUFlRCxHQWlCSEMsR0FBYSxTQUFVcnhELEVBQU0yd0QsR0FDekMsSUFBSVcsRUFBbUJ0eEQsRUFBSyxnQkFDeEJ1eEQsT0FBbUMsSUFBckJELEVBQThCLE9BQVNBLEVBQ3JERSxFQUF1Qnh4RCxFQUFLeXhELGdCQUM1QkEsT0FBMkMsSUFBekJELEVBQWtDLFNBQVdBLEVBQy9ERSxFQUFjMXhELEVBQUsweEQsWUFDbkJDLEVBQWdCM3hELEVBQUs3K0MsVUFDckJnSixFQUFRNjFDLEVBQUs3MUMsTUFDYnluRyxFQUFlNXhELEVBQUsyWSxTQUNwQms1QyxFQUFlN3hELEVBQUtuM0MsU0FDcEJ3OEQsRUFBWXJsQixFQUFLcWxCLFVBQ2pCQyxFQUFTdGxCLEVBQUtzbEIsT0FDZHdzQyxFQUFZOXhELEVBQUtycEMsTUFDakJ2TyxFQUFLNDNDLEVBQUs1M0MsR0FDVndvRyxFQUFXNXdELEVBQUs0d0QsU0FDaEJHLEVBQU8sRUFBOEIvd0QsRUFBTSxDQUFDLGVBQWdCLGtCQUFtQixjQUFlLFlBQWEsUUFBUyxXQUFZLFdBQVksWUFBYSxTQUFVLFFBQVMsS0FBTSxhQUV0TCxPQUFPLGdCQUFvQixXQUEwQixNQUFNLFNBQVVob0IsR0FDbEVBLEdBQXdILEdBQVUsR0FDbkksSUFBSXF4RSxFQUFrQndJLEdBQWdCNzVFLEVBQVFudkIsU0FDMUM0akcsRUFBYStELEVBQW9CRCxFQUFrQm5vRyxFQUFJaWhHLEdBQWtCQSxHQUN6RXh1RCxFQUFPNHhELEVBQVc1RCxTQUVsQmtKLEVBQWNsM0QsR0FBUUEsRUFBS24wQyxRQUFRLDRCQUE2QixRQUNoRW9JLEVBQVFpakcsRUFBY3ZDLEVBQVVuRyxFQUFnQlIsU0FBVSxDQUM1RGh1RCxLQUFNazNELEVBQ041bkcsTUFBT0EsRUFDUGs3RCxVQUFXQSxFQUNYQyxPQUFRQSxJQUNMLEtBQ0QzTSxLQUFjaTVDLEVBQWVBLEVBQWE5aUcsRUFBT3U2RixHQUFtQnY2RixHQUNwRTNOLEVBQVl3M0QsRUE3Q3BCLFdBQ0UsSUFBSyxJQUFJK3FDLEVBQU90L0YsVUFBVXhDLE9BQVFvd0csRUFBYSxJQUFJcHJHLE1BQU04OEYsR0FBTzVzRCxFQUFPLEVBQUdBLEVBQU80c0QsRUFBTTVzRCxJQUNyRms3RCxFQUFXbDdELEdBQVExeUMsVUFBVTB5QyxHQUcvQixPQUFPazdELEVBQVcvdkMsUUFBTyxTQUFVOS9ELEdBQ2pDLE9BQU9BLEtBQ051RixLQUFLLEtBc0NxQnVxRyxDQUFlTixFQUFlRixHQUFtQkUsRUFDeEVoN0YsRUFBUWdpRCxFQUFXLEVBQVMsR0FBSW01QyxFQUFXLEdBQUlKLEdBQWVJLEVBRTlEcHBHLEVBQVEsRUFBUyxDQUNuQixlQUFnQml3RCxHQUFZNDRDLEdBQWUsS0FDM0Nwd0csVUFBV0EsRUFDWHdWLE1BQU9BLEVBQ1B2TyxHQUFJcWtHLEdBQ0hzRSxHQVNILE9BTklLLElBQXFCQyxFQUN2QjNvRyxFQUFNOHlCLElBQU1tMUUsR0FBZ0JDLEVBRTVCbG9HLEVBQU1rb0csU0FBV0EsRUFHWixnQkFBb0JNLEVBQU14b0csU0N0UzlCLE1BQU13cEcsRUFBYUMsa0JBQVlELFlBQWMsd0JBR3BELElDaUJBLEVBaEJvQyxLQUNsQyxNQUVNRSxFQUFtQixzREFGUEQsa0JBQVlFLHVDQUNBSCxVQVM5QixPQUNFLHFCQUFHeGpGLEtBQU0wakYsRUFBaUJuc0UsUUFQRmxnQyxJQUN4QkEsRUFBRW1jLGlCQUVGaFgsT0FBT29uRyxLQUFLRixLQUlaLFVDYUosR0F2QjRCLE1BQzFCdHhFLGdCQUFVLEtBQ1IsTUFBTXl4RSxFQUFxQmhtRixJQUN6QixHQUFJQSxFQUFNaW1GLFNBQVdOLEVBQ25CLE9BR0YsTUFBTSxZQUFFTyxHQUFnQmxtRixFQUFNakgsS0FFMUJtdEYsR0FDRkMsYUFBYUMsUUFBUSxjQUFlRixJQU94QyxPQURBdm5HLE9BQU93TyxpQkFBaUIsVUFBVzY0RixHQUFtQixHQUMvQyxJQUFNcm5HLE9BQU95TyxvQkFBb0IsVUFBVzQ0RixHQUFtQixLQUNyRSxJQUVJLGdCQUFDLEVBQUQsTyxPQ2pCVCxNQXVCQSxJQzlCc0JLLEdET2MsS0FDbEMsTUFBTSxPQUFFOW1GLEdMNHNCRHdXLEVBQVd0SyxHQUFTbnZCLFNLMXNCckJtZ0IsRUFEZSxJQUFJNnBGLGdCQUFnQi9tRixHQUNmMWIsSUFBSSxTQUFXLEdBRW5DNG5DLEdBQVFrTiwyQkFBZ0IscUJBTTNCLENBQUVsOEIsU0FTTCxPQVBBOFgsZ0JBQVUsS0FBTSxNQUNkLE1BQU0sWUFBRTJ4RSxHQUFnQno2RCxFQUFNODZELE1BRTlCLFVBQUE1bkcsT0FBTzZuRyxjQUFQLFNBQWU5TCxZQUFZLENBQUV3TCxlQUFlUCxHQUM1Q2huRyxPQUFPOG5HLFVBQ04sSUFFSSxNQzNCa0NDLEdEOEJJLElBQU0scUNDN0I5QixJQUNuQixnQkFBQyxFQUFBcmdFLFNBQUQsQ0FBVS9OLFNBQVUsZ0JBQUNvdUUsR0FBRCxPQUNsQixnQkFBQ0wsR0FBRCxRQUhlLElBQUNBLEdBQXFCSyxHLEdDTzNDLE1BaUJBLElBQWV0c0QsOEJBakJtQixFQUFHdXNELGNBQ25DLCtCQUNFLGlDQUVHQSxFQUFTcnlGLElBRVosK0JBRUdxeUYsRUFBU0MsT0FFWiwrQkFFR0QsRUFBU0UsV0FLaUMsQ0FDL0NGLGNBQVEsSUFBRSxHQUFGLGdCLE9DakJWLE1BOEJBLEdDdENxQk4sSUFDQyxLQUNsQjdyRSxRQUFRMW1CLElBQUksc0JBRUwsZ0JBQUN1eUYsRUFBRCxPRGtDWCxFQTlCOEIsSUFDNUIsZ0JBQUMsRUFBQXJzRCxjQUFELENBQ0UzUSxZQUFhdzVCLEVBQ2JwM0IsV0FBSyxxQkFRTEMsVUFBVyxHQUNYcHpDLE9BQVEsRUFBR3dCLFFBQU9xQyxXQUNYQSxFQUlEckMsRUFDSyxzQ0FJUCwyQkFDR3FDLEVBQU0ycUcsYUFBYTdyRyxLQUFLMHJHLEdBQWEsZ0JBQUMsR0FBRCxDQUFVQSxTQUFVQSxPQVRyRCx5QyxPRWZmLE1BdUJBLElBQWV2c0QsOEJBdkJrQixFQUFHMnNELGFBQ2xDLCtCQUNFLGtDQUVHLElBQ0FBLEVBQVFDLFdBRVgsMkJBQ0dELEVBQVFGLFNBRVgsbUNBRUcsSUFDQUUsRUFBUUUsTUFFWCxtQ0FFRyxJQUNBRixFQUFRRyxXQUtpQyxDQUM5Q0gsYUFBTyxJQUFFLEdBQUYsZ0IsT0NwQlQsTUFBTUksR0FBYyxFQUFHcnRHLFFBQU9xQyxXQUN2QkEsRUFJRHJDLEVBQ0ssc0NBSVAsK0JBQ0UsZ0NBRzJCLElBQTFCcUMsRUFBTWlyRyxTQUFTL3hHLE9BQ1oscUNBRUEsMEJBQ0c4RyxFQUFNaXJHLFNBQVNuc0csS0FBSzhyRyxHQUNuQixzQkFBSXp0RyxJQUFLeXRHLEVBQVF6eUYsSUFDZixnQkFBQyxHQUFELENBQVN5eUYsUUFBU0EsU0FsQnZCLHFDQTZDWCxHQWxCOEIsSUFDNUIsZ0JBQUMsRUFBQS9zRCxjQUFELENBQ0UzUSxZQUFhdzVCLEVBQ2JwM0IsV0FBSyxxQkFRTEMsVUFBVyxDQUNUMjdELFdBQVksR0FFZC91RyxPQUFRNnVHLEssa0JDaERaLE1BQU1HLFFBQWMsSUFBRyxHQUFILGNBZWRDLEdBQVksRUFBR0Msd0JBQ25CLE1BQU16dUYsR0FBTysvQix3QkFBa0J3dUQsR0FBZ0JFLElBRXpDLFVBQUVDLEdBQWMxdUYsRUFFdEIsT0FDRSwwQkFDRzB1RixFQUFVeHNHLEtBQUt5c0csR0FDZCxzQkFBSXB1RyxJQUFLb3VHLEVBQVNwekYsSUFDaEIseUJBQUssTUFBS296RixFQUFTZixTQUFTRSxnQkE2QnRDLEdBdEJnQyxLQUM5QixNQUNFVyxFQUFtQnB1RCxFQUFXc1ksSUFDNUIzWSxxQkFBdUN1dUQsSUFVM0MsT0FUQS95RSxnQkFBVSxLQUNSNmtCLEVBQVUsQ0FDUnV1RCxPQUFRLElBRUgsS0FDTGoyQyxPQUVELENBQUN0WSxFQUFXc1ksSUFFVyxPQUF0QjgxQyxFQUFtQyxLQUdyQyxnQkFBQyxFQUFBbmhFLFNBQUQsQ0FBVS9OLFNBQVUsNkNBQ2xCLGdCQUFDaXZFLEdBQUQsQ0FBV0Msa0JBQW1CQSxNQ2pDcEMsR0Fac0IsSUFDcEIsZ0JBQUN6RCxFQUFELEtBQ0UsZ0JBQUNELEVBQUQsS0FDRSxnQkFBQ0gsRUFBRCxDQUFPL2xHLE9BQUssRUFBQzB3QyxLQUFLLElBQUluMkMsVUFBV3l2RyxLQUNqQyxnQkFBQ2pFLEVBQUQsQ0FBTy9sRyxPQUFLLEVBQUMwd0MsS0FBSyxXQUFXbjJDLFVBQVcwdkcsS0FDeEMsZ0JBQUNsRSxFQUFELENBQU9yMUQsS0FBSyxTQUFTbjJDLFVBQVcydkcsS0FDaEMsZ0JBQUNuRSxFQUFELENBQU9yMUQsS0FBSyxTQUFTbjJDLFVBQVc0dkcsS0FDaEMsZ0JBQUNwRSxFQUFELENBQU9yMUQsS0FBSyxhQUFhbjJDLFVBQVc2dkcsT0NYcENDLEdBQWNycEcsU0FBU3NwRyxjQUFjLFNBRTNDQyxTQUNFLGdCQUFDLEVBQUE3dkQseUJBQUQsQ0FBMEJqUCxZQUFhdzVCLEdBQ3JDLGdCQUFDLEdBQUQsT0FFRm9sQyxLIiwiZmlsZSI6Im1haW4uMjlmMmEzMjM0YzJkZmE4MDJhNGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbmltcG9ydCB7IENvbmNyZXRlUmVxdWVzdCB9IGZyb20gXCJyZWxheS1ydW50aW1lXCI7XG5leHBvcnQgdHlwZSBCb29rbWFya3NQYWdlUXVlcnlWYXJpYWJsZXMgPSB7XG4gICAgdXNlcklkOiBudW1iZXI7XG59O1xuZXhwb3J0IHR5cGUgQm9va21hcmtzUGFnZVF1ZXJ5UmVzcG9uc2UgPSB7XG4gICAgcmVhZG9ubHkgYm9va21hcmtzOiBSZWFkb25seUFycmF5PHtcbiAgICAgICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcbiAgICAgICAgcmVhZG9ubHkgcXVlc3Rpb246IHtcbiAgICAgICAgICAgIHJlYWRvbmx5IGNvbnRlbnQ6IHN0cmluZyB8IG51bGw7XG4gICAgICAgIH0gfCBudWxsO1xuICAgIH0gfCBudWxsPiB8IG51bGw7XG59O1xuZXhwb3J0IHR5cGUgQm9va21hcmtzUGFnZVF1ZXJ5ID0ge1xuICAgIHJlYWRvbmx5IHJlc3BvbnNlOiBCb29rbWFya3NQYWdlUXVlcnlSZXNwb25zZTtcbiAgICByZWFkb25seSB2YXJpYWJsZXM6IEJvb2ttYXJrc1BhZ2VRdWVyeVZhcmlhYmxlcztcbn07XG5cblxuXG4vKlxucXVlcnkgQm9va21hcmtzUGFnZVF1ZXJ5KFxuICAkdXNlcklkOiBJbnQhXG4pIHtcbiAgYm9va21hcmtzKHVzZXJJZDogJHVzZXJJZCkge1xuICAgIGlkXG4gICAgcXVlc3Rpb24ge1xuICAgICAgY29udGVudFxuICAgICAgaWRcbiAgICB9XG4gIH1cbn1cbiovXG5cbmNvbnN0IG5vZGU6IENvbmNyZXRlUmVxdWVzdCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHYwID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiBudWxsLFxuICAgICAgICAgICAgXCJraW5kXCI6IFwiTG9jYWxBcmd1bWVudFwiLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwidXNlcklkXCJcbiAgICAgICAgfSBhcyBhbnlcbiAgICBdLCB2MSA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwiVmFyaWFibGVcIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInVzZXJJZFwiLFxuICAgICAgICAgICAgXCJ2YXJpYWJsZU5hbWVcIjogXCJ1c2VySWRcIlxuICAgICAgICB9IGFzIGFueVxuICAgIF0sIHYyID0ge1xuICAgICAgICBcImFsaWFzXCI6IG51bGwsXG4gICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICBcImtpbmRcIjogXCJTY2FsYXJGaWVsZFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJpZFwiLFxuICAgICAgICBcInN0b3JhZ2VLZXlcIjogbnVsbFxuICAgIH0gYXMgYW55LCB2MyA9IHtcbiAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICBcImFyZ3NcIjogbnVsbCxcbiAgICAgICAgXCJraW5kXCI6IFwiU2NhbGFyRmllbGRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiY29udGVudFwiLFxuICAgICAgICBcInN0b3JhZ2VLZXlcIjogbnVsbFxuICAgIH0gYXMgYW55O1xuICAgIHJldHVybiB7XG4gICAgICAgIFwiZnJhZ21lbnRcIjoge1xuICAgICAgICAgICAgXCJhcmd1bWVudERlZmluaXRpb25zXCI6ICh2MCAvKjogYW55Ki8pLFxuICAgICAgICAgICAgXCJraW5kXCI6IFwiRnJhZ21lbnRcIixcbiAgICAgICAgICAgIFwibWV0YWRhdGFcIjogbnVsbCxcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkJvb2ttYXJrc1BhZ2VRdWVyeVwiLFxuICAgICAgICAgICAgXCJzZWxlY3Rpb25zXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiYWxpYXNcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgXCJhcmdzXCI6ICh2MSAvKjogYW55Ki8pLFxuICAgICAgICAgICAgICAgICAgICBcImNvbmNyZXRlVHlwZVwiOiBcIkJvb2ttYXJrXCIsXG4gICAgICAgICAgICAgICAgICAgIFwia2luZFwiOiBcIkxpbmtlZEZpZWxkXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImJvb2ttYXJrc1wiLFxuICAgICAgICAgICAgICAgICAgICBcInBsdXJhbFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcInNlbGVjdGlvbnNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgKHYyIC8qOiBhbnkqLyksXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29uY3JldGVUeXBlXCI6IFwiUXVlc3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImtpbmRcIjogXCJMaW5rZWRGaWVsZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInF1ZXN0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwbHVyYWxcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3Rpb25zXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHYzIC8qOiBhbnkqLylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RvcmFnZUtleVwiOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIFwic3RvcmFnZUtleVwiOiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIlF1ZXJ5XCIsXG4gICAgICAgICAgICBcImFic3RyYWN0S2V5XCI6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgXCJraW5kXCI6IFwiUmVxdWVzdFwiLFxuICAgICAgICBcIm9wZXJhdGlvblwiOiB7XG4gICAgICAgICAgICBcImFyZ3VtZW50RGVmaW5pdGlvbnNcIjogKHYwIC8qOiBhbnkqLyksXG4gICAgICAgICAgICBcImtpbmRcIjogXCJPcGVyYXRpb25cIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkJvb2ttYXJrc1BhZ2VRdWVyeVwiLFxuICAgICAgICAgICAgXCJzZWxlY3Rpb25zXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiYWxpYXNcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgXCJhcmdzXCI6ICh2MSAvKjogYW55Ki8pLFxuICAgICAgICAgICAgICAgICAgICBcImNvbmNyZXRlVHlwZVwiOiBcIkJvb2ttYXJrXCIsXG4gICAgICAgICAgICAgICAgICAgIFwia2luZFwiOiBcIkxpbmtlZEZpZWxkXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImJvb2ttYXJrc1wiLFxuICAgICAgICAgICAgICAgICAgICBcInBsdXJhbFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcInNlbGVjdGlvbnNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgKHYyIC8qOiBhbnkqLyksXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29uY3JldGVUeXBlXCI6IFwiUXVlc3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImtpbmRcIjogXCJMaW5rZWRGaWVsZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInF1ZXN0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwbHVyYWxcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3Rpb25zXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHYzIC8qOiBhbnkqLyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh2MiAvKjogYW55Ki8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0b3JhZ2VLZXlcIjogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBcInN0b3JhZ2VLZXlcIjogbnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXJhbXNcIjoge1xuICAgICAgICAgICAgXCJjYWNoZUlEXCI6IFwiM2VhOGY0YjljYWRhYjhlNDk1N2Y2N2ZmYmJmYjEzMzFcIixcbiAgICAgICAgICAgIFwiaWRcIjogbnVsbCxcbiAgICAgICAgICAgIFwibWV0YWRhdGFcIjoge30sXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJCb29rbWFya3NQYWdlUXVlcnlcIixcbiAgICAgICAgICAgIFwib3BlcmF0aW9uS2luZFwiOiBcInF1ZXJ5XCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCJxdWVyeSBCb29rbWFya3NQYWdlUXVlcnkoXFxuICAkdXNlcklkOiBJbnQhXFxuKSB7XFxuICBib29rbWFya3ModXNlcklkOiAkdXNlcklkKSB7XFxuICAgIGlkXFxuICAgIHF1ZXN0aW9uIHtcXG4gICAgICBjb250ZW50XFxuICAgICAgaWRcXG4gICAgfVxcbiAgfVxcbn1cXG5cIlxuICAgICAgICB9XG4gICAgfSBhcyBhbnk7XG59KSgpO1xuKG5vZGUgYXMgYW55KS5oYXNoID0gJzNhNzIzYzJlYThlZTliZjU5MzhjYWM2NjMxZDZmZGMzJztcbmV4cG9ydCBkZWZhdWx0IG5vZGU7XG4iLCIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbmltcG9ydCB7IENvbmNyZXRlUmVxdWVzdCB9IGZyb20gXCJyZWxheS1ydW50aW1lXCI7XG5pbXBvcnQgeyBGcmFnbWVudFJlZnMgfSBmcm9tIFwicmVsYXktcnVudGltZVwiO1xuZXhwb3J0IHR5cGUgQ29tbWVudFBhZ2VRdWVyeVZhcmlhYmxlcyA9IHtcbiAgICBxdWVzdGlvbklkPzogbnVtYmVyIHwgbnVsbDtcbn07XG5leHBvcnQgdHlwZSBDb21tZW50UGFnZVF1ZXJ5UmVzcG9uc2UgPSB7XG4gICAgcmVhZG9ubHkgY29tbWVudHM6IFJlYWRvbmx5QXJyYXk8e1xuICAgICAgICByZWFkb25seSBpZDogc3RyaW5nO1xuICAgICAgICByZWFkb25seSBcIiAkZnJhZ21lbnRSZWZzXCI6IEZyYWdtZW50UmVmczxcIkNvbW1lbnRfY29tbWVudFwiPjtcbiAgICB9Pjtcbn07XG5leHBvcnQgdHlwZSBDb21tZW50UGFnZVF1ZXJ5ID0ge1xuICAgIHJlYWRvbmx5IHJlc3BvbnNlOiBDb21tZW50UGFnZVF1ZXJ5UmVzcG9uc2U7XG4gICAgcmVhZG9ubHkgdmFyaWFibGVzOiBDb21tZW50UGFnZVF1ZXJ5VmFyaWFibGVzO1xufTtcblxuXG5cbi8qXG5xdWVyeSBDb21tZW50UGFnZVF1ZXJ5KFxuICAkcXVlc3Rpb25JZDogSW50XG4pIHtcbiAgY29tbWVudHMocXVlc3Rpb25JZDogJHF1ZXN0aW9uSWQpIHtcbiAgICBpZFxuICAgIC4uLkNvbW1lbnRfY29tbWVudFxuICB9XG59XG5cbmZyYWdtZW50IENvbW1lbnRfY29tbWVudCBvbiBDb21tZW50IHtcbiAgaWRcbiAgcXVlc3Rpb25JZFxuICBjcmVhdGVkQXRcbiAgdXNlckVtYWlsXG4gIGNvbnRlbnRcbiAgbGlrZVxuICBkaXNsaWtlXG59XG4qL1xuXG5jb25zdCBub2RlOiBDb25jcmV0ZVJlcXVlc3QgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciB2MCA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogbnVsbCxcbiAgICAgICAgICAgIFwia2luZFwiOiBcIkxvY2FsQXJndW1lbnRcIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInF1ZXN0aW9uSWRcIlxuICAgICAgICB9IGFzIGFueVxuICAgIF0sIHYxID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJWYXJpYWJsZVwiLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwicXVlc3Rpb25JZFwiLFxuICAgICAgICAgICAgXCJ2YXJpYWJsZU5hbWVcIjogXCJxdWVzdGlvbklkXCJcbiAgICAgICAgfSBhcyBhbnlcbiAgICBdLCB2MiA9IHtcbiAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICBcImFyZ3NcIjogbnVsbCxcbiAgICAgICAgXCJraW5kXCI6IFwiU2NhbGFyRmllbGRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiaWRcIixcbiAgICAgICAgXCJzdG9yYWdlS2V5XCI6IG51bGxcbiAgICB9IGFzIGFueTtcbiAgICByZXR1cm4ge1xuICAgICAgICBcImZyYWdtZW50XCI6IHtcbiAgICAgICAgICAgIFwiYXJndW1lbnREZWZpbml0aW9uc1wiOiAodjAgLyo6IGFueSovKSxcbiAgICAgICAgICAgIFwia2luZFwiOiBcIkZyYWdtZW50XCIsXG4gICAgICAgICAgICBcIm1ldGFkYXRhXCI6IG51bGwsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJDb21tZW50UGFnZVF1ZXJ5XCIsXG4gICAgICAgICAgICBcInNlbGVjdGlvbnNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBcImFyZ3NcIjogKHYxIC8qOiBhbnkqLyksXG4gICAgICAgICAgICAgICAgICAgIFwiY29uY3JldGVUeXBlXCI6IFwiQ29tbWVudFwiLFxuICAgICAgICAgICAgICAgICAgICBcImtpbmRcIjogXCJMaW5rZWRGaWVsZFwiLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjb21tZW50c1wiLFxuICAgICAgICAgICAgICAgICAgICBcInBsdXJhbFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcInNlbGVjdGlvbnNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgKHYyIC8qOiBhbnkqLyksXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmdzXCI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJraW5kXCI6IFwiRnJhZ21lbnRTcHJlYWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJDb21tZW50X2NvbW1lbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBcInN0b3JhZ2VLZXlcIjogbnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJRdWVyeVwiLFxuICAgICAgICAgICAgXCJhYnN0cmFjdEtleVwiOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiBcIlJlcXVlc3RcIixcbiAgICAgICAgXCJvcGVyYXRpb25cIjoge1xuICAgICAgICAgICAgXCJhcmd1bWVudERlZmluaXRpb25zXCI6ICh2MCAvKjogYW55Ki8pLFxuICAgICAgICAgICAgXCJraW5kXCI6IFwiT3BlcmF0aW9uXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJDb21tZW50UGFnZVF1ZXJ5XCIsXG4gICAgICAgICAgICBcInNlbGVjdGlvbnNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBcImFyZ3NcIjogKHYxIC8qOiBhbnkqLyksXG4gICAgICAgICAgICAgICAgICAgIFwiY29uY3JldGVUeXBlXCI6IFwiQ29tbWVudFwiLFxuICAgICAgICAgICAgICAgICAgICBcImtpbmRcIjogXCJMaW5rZWRGaWVsZFwiLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjb21tZW50c1wiLFxuICAgICAgICAgICAgICAgICAgICBcInBsdXJhbFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcInNlbGVjdGlvbnNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgKHYyIC8qOiBhbnkqLyksXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwia2luZFwiOiBcIlNjYWxhckZpZWxkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwicXVlc3Rpb25JZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RvcmFnZUtleVwiOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxpYXNcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFyZ3NcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImtpbmRcIjogXCJTY2FsYXJGaWVsZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImNyZWF0ZWRBdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RvcmFnZUtleVwiOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxpYXNcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFyZ3NcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImtpbmRcIjogXCJTY2FsYXJGaWVsZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInVzZXJFbWFpbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RvcmFnZUtleVwiOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxpYXNcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFyZ3NcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImtpbmRcIjogXCJTY2FsYXJGaWVsZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImNvbnRlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0b3JhZ2VLZXlcIjogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFsaWFzXCI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmdzXCI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJraW5kXCI6IFwiU2NhbGFyRmllbGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJsaWtlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdG9yYWdlS2V5XCI6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwia2luZFwiOiBcIlNjYWxhckZpZWxkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGlzbGlrZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RvcmFnZUtleVwiOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIFwic3RvcmFnZUtleVwiOiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiB7XG4gICAgICAgICAgICBcImNhY2hlSURcIjogXCJmYzE5ZjljNjkxNTNkYWY3YzdhMGU0M2VhMTIwYTljMVwiLFxuICAgICAgICAgICAgXCJpZFwiOiBudWxsLFxuICAgICAgICAgICAgXCJtZXRhZGF0YVwiOiB7fSxcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkNvbW1lbnRQYWdlUXVlcnlcIixcbiAgICAgICAgICAgIFwib3BlcmF0aW9uS2luZFwiOiBcInF1ZXJ5XCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCJxdWVyeSBDb21tZW50UGFnZVF1ZXJ5KFxcbiAgJHF1ZXN0aW9uSWQ6IEludFxcbikge1xcbiAgY29tbWVudHMocXVlc3Rpb25JZDogJHF1ZXN0aW9uSWQpIHtcXG4gICAgaWRcXG4gICAgLi4uQ29tbWVudF9jb21tZW50XFxuICB9XFxufVxcblxcbmZyYWdtZW50IENvbW1lbnRfY29tbWVudCBvbiBDb21tZW50IHtcXG4gIGlkXFxuICBxdWVzdGlvbklkXFxuICBjcmVhdGVkQXRcXG4gIHVzZXJFbWFpbFxcbiAgY29udGVudFxcbiAgbGlrZVxcbiAgZGlzbGlrZVxcbn1cXG5cIlxuICAgICAgICB9XG4gICAgfSBhcyBhbnk7XG59KSgpO1xuKG5vZGUgYXMgYW55KS5oYXNoID0gJ2MzOWUxNzdmNTNlOTIxZTg1ZDUzYjg5NmRjNmE0OGRmJztcbmV4cG9ydCBkZWZhdWx0IG5vZGU7XG4iLCIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbmltcG9ydCB7IFJlYWRlckZyYWdtZW50IH0gZnJvbSBcInJlbGF5LXJ1bnRpbWVcIjtcbmltcG9ydCB7IEZyYWdtZW50UmVmcyB9IGZyb20gXCJyZWxheS1ydW50aW1lXCI7XG5leHBvcnQgdHlwZSBDb21tZW50X2NvbW1lbnQgPSB7XG4gICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcbiAgICByZWFkb25seSBxdWVzdGlvbklkOiBudW1iZXIgfCBudWxsO1xuICAgIHJlYWRvbmx5IGNyZWF0ZWRBdDogc3RyaW5nIHwgbnVsbDtcbiAgICByZWFkb25seSB1c2VyRW1haWw6IHN0cmluZyB8IG51bGw7XG4gICAgcmVhZG9ubHkgY29udGVudDogc3RyaW5nIHwgbnVsbDtcbiAgICByZWFkb25seSBsaWtlOiBSZWFkb25seUFycmF5PHN0cmluZyB8IG51bGw+IHwgbnVsbDtcbiAgICByZWFkb25seSBkaXNsaWtlOiBSZWFkb25seUFycmF5PHN0cmluZyB8IG51bGw+IHwgbnVsbDtcbiAgICByZWFkb25seSBcIiAkcmVmVHlwZVwiOiBcIkNvbW1lbnRfY29tbWVudFwiO1xufTtcbmV4cG9ydCB0eXBlIENvbW1lbnRfY29tbWVudCRkYXRhID0gQ29tbWVudF9jb21tZW50O1xuZXhwb3J0IHR5cGUgQ29tbWVudF9jb21tZW50JGtleSA9IHtcbiAgICByZWFkb25seSBcIiAkZGF0YVwiPzogQ29tbWVudF9jb21tZW50JGRhdGE7XG4gICAgcmVhZG9ubHkgXCIgJGZyYWdtZW50UmVmc1wiOiBGcmFnbWVudFJlZnM8XCJDb21tZW50X2NvbW1lbnRcIj47XG59O1xuXG5cblxuY29uc3Qgbm9kZTogUmVhZGVyRnJhZ21lbnQgPSB7XG4gICAgXCJhcmd1bWVudERlZmluaXRpb25zXCI6IFtdLFxuICAgIFwia2luZFwiOiBcIkZyYWdtZW50XCIsXG4gICAgXCJtZXRhZGF0YVwiOiBudWxsLFxuICAgIFwibmFtZVwiOiBcIkNvbW1lbnRfY29tbWVudFwiLFxuICAgIFwic2VsZWN0aW9uc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiYWxpYXNcIjogbnVsbCxcbiAgICAgICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICAgICAgXCJraW5kXCI6IFwiU2NhbGFyRmllbGRcIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImlkXCIsXG4gICAgICAgICAgICBcInN0b3JhZ2VLZXlcIjogbnVsbFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImFsaWFzXCI6IG51bGwsXG4gICAgICAgICAgICBcImFyZ3NcIjogbnVsbCxcbiAgICAgICAgICAgIFwia2luZFwiOiBcIlNjYWxhckZpZWxkXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJxdWVzdGlvbklkXCIsXG4gICAgICAgICAgICBcInN0b3JhZ2VLZXlcIjogbnVsbFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImFsaWFzXCI6IG51bGwsXG4gICAgICAgICAgICBcImFyZ3NcIjogbnVsbCxcbiAgICAgICAgICAgIFwia2luZFwiOiBcIlNjYWxhckZpZWxkXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjcmVhdGVkQXRcIixcbiAgICAgICAgICAgIFwic3RvcmFnZUtleVwiOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiYWxpYXNcIjogbnVsbCxcbiAgICAgICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICAgICAgXCJraW5kXCI6IFwiU2NhbGFyRmllbGRcIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInVzZXJFbWFpbFwiLFxuICAgICAgICAgICAgXCJzdG9yYWdlS2V5XCI6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgXCJhcmdzXCI6IG51bGwsXG4gICAgICAgICAgICBcImtpbmRcIjogXCJTY2FsYXJGaWVsZFwiLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY29udGVudFwiLFxuICAgICAgICAgICAgXCJzdG9yYWdlS2V5XCI6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgXCJhcmdzXCI6IG51bGwsXG4gICAgICAgICAgICBcImtpbmRcIjogXCJTY2FsYXJGaWVsZFwiLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwibGlrZVwiLFxuICAgICAgICAgICAgXCJzdG9yYWdlS2V5XCI6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgXCJhcmdzXCI6IG51bGwsXG4gICAgICAgICAgICBcImtpbmRcIjogXCJTY2FsYXJGaWVsZFwiLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGlzbGlrZVwiLFxuICAgICAgICAgICAgXCJzdG9yYWdlS2V5XCI6IG51bGxcbiAgICAgICAgfVxuICAgIF0sXG4gICAgXCJ0eXBlXCI6IFwiQ29tbWVudFwiLFxuICAgIFwiYWJzdHJhY3RLZXlcIjogbnVsbFxufSBhcyBhbnk7XG4obm9kZSBhcyBhbnkpLmhhc2ggPSAnNDMwMWE3OGQ5ODdiZWQyMTUzMzY0OWIyZDllNTMzOGUnO1xuZXhwb3J0IGRlZmF1bHQgbm9kZTtcbiIsIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxuaW1wb3J0IHsgQ29uY3JldGVSZXF1ZXN0IH0gZnJvbSBcInJlbGF5LXJ1bnRpbWVcIjtcbmltcG9ydCB7IEZyYWdtZW50UmVmcyB9IGZyb20gXCJyZWxheS1ydW50aW1lXCI7XG5leHBvcnQgdHlwZSBFeGFtcGxlUGFnZVF1ZXJ5VmFyaWFibGVzID0ge307XG5leHBvcnQgdHlwZSBFeGFtcGxlUGFnZVF1ZXJ5UmVzcG9uc2UgPSB7XG4gICAgcmVhZG9ubHkgYWxsUXVlc3Rpb25zOiBSZWFkb25seUFycmF5PHtcbiAgICAgICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcbiAgICAgICAgcmVhZG9ubHkgXCIgJGZyYWdtZW50UmVmc1wiOiBGcmFnbWVudFJlZnM8XCJRdWVzdGlvbl9xdWVzdGlvblwiPjtcbiAgICB9Pjtcbn07XG5leHBvcnQgdHlwZSBFeGFtcGxlUGFnZVF1ZXJ5ID0ge1xuICAgIHJlYWRvbmx5IHJlc3BvbnNlOiBFeGFtcGxlUGFnZVF1ZXJ5UmVzcG9uc2U7XG4gICAgcmVhZG9ubHkgdmFyaWFibGVzOiBFeGFtcGxlUGFnZVF1ZXJ5VmFyaWFibGVzO1xufTtcblxuXG5cbi8qXG5xdWVyeSBFeGFtcGxlUGFnZVF1ZXJ5IHtcbiAgYWxsUXVlc3Rpb25zIHtcbiAgICBpZFxuICAgIC4uLlF1ZXN0aW9uX3F1ZXN0aW9uXG4gIH1cbn1cblxuZnJhZ21lbnQgUXVlc3Rpb25fcXVlc3Rpb24gb24gUXVlc3Rpb24ge1xuICBpZFxuICB0aXRsZVxuICBjb250ZW50XG59XG4qL1xuXG5jb25zdCBub2RlOiBDb25jcmV0ZVJlcXVlc3QgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciB2MCA9IHtcbiAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICBcImFyZ3NcIjogbnVsbCxcbiAgICAgICAgXCJraW5kXCI6IFwiU2NhbGFyRmllbGRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiaWRcIixcbiAgICAgICAgXCJzdG9yYWdlS2V5XCI6IG51bGxcbiAgICB9IGFzIGFueTtcbiAgICByZXR1cm4ge1xuICAgICAgICBcImZyYWdtZW50XCI6IHtcbiAgICAgICAgICAgIFwiYXJndW1lbnREZWZpbml0aW9uc1wiOiBbXSxcbiAgICAgICAgICAgIFwia2luZFwiOiBcIkZyYWdtZW50XCIsXG4gICAgICAgICAgICBcIm1ldGFkYXRhXCI6IG51bGwsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJFeGFtcGxlUGFnZVF1ZXJ5XCIsXG4gICAgICAgICAgICBcInNlbGVjdGlvbnNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBcImFyZ3NcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgXCJjb25jcmV0ZVR5cGVcIjogXCJRdWVzdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICBcImtpbmRcIjogXCJMaW5rZWRGaWVsZFwiLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhbGxRdWVzdGlvbnNcIixcbiAgICAgICAgICAgICAgICAgICAgXCJwbHVyYWxcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3Rpb25zXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICh2MCAvKjogYW55Ki8pLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwia2luZFwiOiBcIkZyYWdtZW50U3ByZWFkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiUXVlc3Rpb25fcXVlc3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBcInN0b3JhZ2VLZXlcIjogbnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJRdWVyeVwiLFxuICAgICAgICAgICAgXCJhYnN0cmFjdEtleVwiOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiBcIlJlcXVlc3RcIixcbiAgICAgICAgXCJvcGVyYXRpb25cIjoge1xuICAgICAgICAgICAgXCJhcmd1bWVudERlZmluaXRpb25zXCI6IFtdLFxuICAgICAgICAgICAgXCJraW5kXCI6IFwiT3BlcmF0aW9uXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJFeGFtcGxlUGFnZVF1ZXJ5XCIsXG4gICAgICAgICAgICBcInNlbGVjdGlvbnNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBcImFyZ3NcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgXCJjb25jcmV0ZVR5cGVcIjogXCJRdWVzdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICBcImtpbmRcIjogXCJMaW5rZWRGaWVsZFwiLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhbGxRdWVzdGlvbnNcIixcbiAgICAgICAgICAgICAgICAgICAgXCJwbHVyYWxcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3Rpb25zXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICh2MCAvKjogYW55Ki8pLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxpYXNcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFyZ3NcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImtpbmRcIjogXCJTY2FsYXJGaWVsZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRpdGxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdG9yYWdlS2V5XCI6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwia2luZFwiOiBcIlNjYWxhckZpZWxkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY29udGVudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RvcmFnZUtleVwiOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIFwic3RvcmFnZUtleVwiOiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiB7XG4gICAgICAgICAgICBcImNhY2hlSURcIjogXCIyMzFlYzRjNmFjNDI3NGEwMDY4NTI4MDZkYjJlYjZiYlwiLFxuICAgICAgICAgICAgXCJpZFwiOiBudWxsLFxuICAgICAgICAgICAgXCJtZXRhZGF0YVwiOiB7fSxcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkV4YW1wbGVQYWdlUXVlcnlcIixcbiAgICAgICAgICAgIFwib3BlcmF0aW9uS2luZFwiOiBcInF1ZXJ5XCIsXG4gICAgICAgICAgICBcInRleHRcIjogXCJxdWVyeSBFeGFtcGxlUGFnZVF1ZXJ5IHtcXG4gIGFsbFF1ZXN0aW9ucyB7XFxuICAgIGlkXFxuICAgIC4uLlF1ZXN0aW9uX3F1ZXN0aW9uXFxuICB9XFxufVxcblxcbmZyYWdtZW50IFF1ZXN0aW9uX3F1ZXN0aW9uIG9uIFF1ZXN0aW9uIHtcXG4gIGlkXFxuICB0aXRsZVxcbiAgY29udGVudFxcbn1cXG5cIlxuICAgICAgICB9XG4gICAgfSBhcyBhbnk7XG59KSgpO1xuKG5vZGUgYXMgYW55KS5oYXNoID0gJzQwMjIxZDFiYWM1OTUwMDYxYzRhNDM4YjQ1OWM3M2VjJztcbmV4cG9ydCBkZWZhdWx0IG5vZGU7XG4iLCIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbmltcG9ydCB7IENvbmNyZXRlUmVxdWVzdCB9IGZyb20gXCJyZWxheS1ydW50aW1lXCI7XG5leHBvcnQgdHlwZSBMb2dpbkNhbGxiYWNrUGFnZVF1ZXJ5VmFyaWFibGVzID0ge1xuICAgIGNvZGU6IHN0cmluZztcbn07XG5leHBvcnQgdHlwZSBMb2dpbkNhbGxiYWNrUGFnZVF1ZXJ5UmVzcG9uc2UgPSB7XG4gICAgcmVhZG9ubHkgbG9naW46IHtcbiAgICAgICAgcmVhZG9ubHkgYWNjZXNzVG9rZW46IHN0cmluZyB8IG51bGw7XG4gICAgfTtcbn07XG5leHBvcnQgdHlwZSBMb2dpbkNhbGxiYWNrUGFnZVF1ZXJ5ID0ge1xuICAgIHJlYWRvbmx5IHJlc3BvbnNlOiBMb2dpbkNhbGxiYWNrUGFnZVF1ZXJ5UmVzcG9uc2U7XG4gICAgcmVhZG9ubHkgdmFyaWFibGVzOiBMb2dpbkNhbGxiYWNrUGFnZVF1ZXJ5VmFyaWFibGVzO1xufTtcblxuXG5cbi8qXG5tdXRhdGlvbiBMb2dpbkNhbGxiYWNrUGFnZVF1ZXJ5KFxuICAkY29kZTogU3RyaW5nIVxuKSB7XG4gIGxvZ2luKGNvZGU6ICRjb2RlKSB7XG4gICAgYWNjZXNzVG9rZW5cbiAgfVxufVxuKi9cblxuY29uc3Qgbm9kZTogQ29uY3JldGVSZXF1ZXN0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdjAgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IG51bGwsXG4gICAgICAgICAgICBcImtpbmRcIjogXCJMb2NhbEFyZ3VtZW50XCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjb2RlXCJcbiAgICAgICAgfSBhcyBhbnlcbiAgICBdLCB2MSA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgXCJhcmdzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwia2luZFwiOiBcIlZhcmlhYmxlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImNvZGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ2YXJpYWJsZU5hbWVcIjogXCJjb2RlXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjb25jcmV0ZVR5cGVcIjogXCJBdXRoXCIsXG4gICAgICAgICAgICBcImtpbmRcIjogXCJMaW5rZWRGaWVsZFwiLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwibG9naW5cIixcbiAgICAgICAgICAgIFwicGx1cmFsXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJzZWxlY3Rpb25zXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiYWxpYXNcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgXCJhcmdzXCI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIFwia2luZFwiOiBcIlNjYWxhckZpZWxkXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFjY2Vzc1Rva2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIFwic3RvcmFnZUtleVwiOiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwic3RvcmFnZUtleVwiOiBudWxsXG4gICAgICAgIH0gYXMgYW55XG4gICAgXTtcbiAgICByZXR1cm4ge1xuICAgICAgICBcImZyYWdtZW50XCI6IHtcbiAgICAgICAgICAgIFwiYXJndW1lbnREZWZpbml0aW9uc1wiOiAodjAgLyo6IGFueSovKSxcbiAgICAgICAgICAgIFwia2luZFwiOiBcIkZyYWdtZW50XCIsXG4gICAgICAgICAgICBcIm1ldGFkYXRhXCI6IG51bGwsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJMb2dpbkNhbGxiYWNrUGFnZVF1ZXJ5XCIsXG4gICAgICAgICAgICBcInNlbGVjdGlvbnNcIjogKHYxIC8qOiBhbnkqLyksXG4gICAgICAgICAgICBcInR5cGVcIjogXCJNdXRhdGlvblwiLFxuICAgICAgICAgICAgXCJhYnN0cmFjdEtleVwiOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIFwia2luZFwiOiBcIlJlcXVlc3RcIixcbiAgICAgICAgXCJvcGVyYXRpb25cIjoge1xuICAgICAgICAgICAgXCJhcmd1bWVudERlZmluaXRpb25zXCI6ICh2MCAvKjogYW55Ki8pLFxuICAgICAgICAgICAgXCJraW5kXCI6IFwiT3BlcmF0aW9uXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJMb2dpbkNhbGxiYWNrUGFnZVF1ZXJ5XCIsXG4gICAgICAgICAgICBcInNlbGVjdGlvbnNcIjogKHYxIC8qOiBhbnkqLylcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXJhbXNcIjoge1xuICAgICAgICAgICAgXCJjYWNoZUlEXCI6IFwiZjg3OTE0OTVmMDE4ZWY2MzQwNWVjNTUwNGFlOTdlNGNcIixcbiAgICAgICAgICAgIFwiaWRcIjogbnVsbCxcbiAgICAgICAgICAgIFwibWV0YWRhdGFcIjoge30sXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJMb2dpbkNhbGxiYWNrUGFnZVF1ZXJ5XCIsXG4gICAgICAgICAgICBcIm9wZXJhdGlvbktpbmRcIjogXCJtdXRhdGlvblwiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IFwibXV0YXRpb24gTG9naW5DYWxsYmFja1BhZ2VRdWVyeShcXG4gICRjb2RlOiBTdHJpbmchXFxuKSB7XFxuICBsb2dpbihjb2RlOiAkY29kZSkge1xcbiAgICBhY2Nlc3NUb2tlblxcbiAgfVxcbn1cXG5cIlxuICAgICAgICB9XG4gICAgfSBhcyBhbnk7XG59KSgpO1xuKG5vZGUgYXMgYW55KS5oYXNoID0gJzE5Mzk0MzQwZjIxOTg0MjUzNTYwYjZlYjY5YThlMWE0JztcbmV4cG9ydCBkZWZhdWx0IG5vZGU7XG4iLCIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbmltcG9ydCB7IFJlYWRlckZyYWdtZW50IH0gZnJvbSBcInJlbGF5LXJ1bnRpbWVcIjtcbmltcG9ydCB7IEZyYWdtZW50UmVmcyB9IGZyb20gXCJyZWxheS1ydW50aW1lXCI7XG5leHBvcnQgdHlwZSBRdWVzdGlvbl9xdWVzdGlvbiA9IHtcbiAgICByZWFkb25seSBpZDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHRpdGxlOiBzdHJpbmcgfCBudWxsO1xuICAgIHJlYWRvbmx5IGNvbnRlbnQ6IHN0cmluZyB8IG51bGw7XG4gICAgcmVhZG9ubHkgXCIgJHJlZlR5cGVcIjogXCJRdWVzdGlvbl9xdWVzdGlvblwiO1xufTtcbmV4cG9ydCB0eXBlIFF1ZXN0aW9uX3F1ZXN0aW9uJGRhdGEgPSBRdWVzdGlvbl9xdWVzdGlvbjtcbmV4cG9ydCB0eXBlIFF1ZXN0aW9uX3F1ZXN0aW9uJGtleSA9IHtcbiAgICByZWFkb25seSBcIiAkZGF0YVwiPzogUXVlc3Rpb25fcXVlc3Rpb24kZGF0YTtcbiAgICByZWFkb25seSBcIiAkZnJhZ21lbnRSZWZzXCI6IEZyYWdtZW50UmVmczxcIlF1ZXN0aW9uX3F1ZXN0aW9uXCI+O1xufTtcblxuXG5cbmNvbnN0IG5vZGU6IFJlYWRlckZyYWdtZW50ID0ge1xuICAgIFwiYXJndW1lbnREZWZpbml0aW9uc1wiOiBbXSxcbiAgICBcImtpbmRcIjogXCJGcmFnbWVudFwiLFxuICAgIFwibWV0YWRhdGFcIjogbnVsbCxcbiAgICBcIm5hbWVcIjogXCJRdWVzdGlvbl9xdWVzdGlvblwiLFxuICAgIFwic2VsZWN0aW9uc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiYWxpYXNcIjogbnVsbCxcbiAgICAgICAgICAgIFwiYXJnc1wiOiBudWxsLFxuICAgICAgICAgICAgXCJraW5kXCI6IFwiU2NhbGFyRmllbGRcIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImlkXCIsXG4gICAgICAgICAgICBcInN0b3JhZ2VLZXlcIjogbnVsbFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImFsaWFzXCI6IG51bGwsXG4gICAgICAgICAgICBcImFyZ3NcIjogbnVsbCxcbiAgICAgICAgICAgIFwia2luZFwiOiBcIlNjYWxhckZpZWxkXCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJ0aXRsZVwiLFxuICAgICAgICAgICAgXCJzdG9yYWdlS2V5XCI6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJhbGlhc1wiOiBudWxsLFxuICAgICAgICAgICAgXCJhcmdzXCI6IG51bGwsXG4gICAgICAgICAgICBcImtpbmRcIjogXCJTY2FsYXJGaWVsZFwiLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY29udGVudFwiLFxuICAgICAgICAgICAgXCJzdG9yYWdlS2V5XCI6IG51bGxcbiAgICAgICAgfVxuICAgIF0sXG4gICAgXCJ0eXBlXCI6IFwiUXVlc3Rpb25cIixcbiAgICBcImFic3RyYWN0S2V5XCI6IG51bGxcbn0gYXMgYW55O1xuKG5vZGUgYXMgYW55KS5oYXNoID0gJzM3M2M1ODQ3YzYzN2U1YWUwZGM2ZGE3NDRiYThkZDEzJztcbmV4cG9ydCBkZWZhdWx0IG5vZGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xudmFyIGFTdGFja1Bvb2wgPSBbXTtcbnZhciBiU3RhY2tQb29sID0gW107XG4vKipcbiAqIENoZWNrcyBpZiB0d28gdmFsdWVzIGFyZSBlcXVhbC4gVmFsdWVzIG1heSBiZSBwcmltaXRpdmVzLCBhcnJheXMsIG9yIG9iamVjdHMuXG4gKiBSZXR1cm5zIHRydWUgaWYgYm90aCBhcmd1bWVudHMgaGF2ZSB0aGUgc2FtZSBrZXlzIGFuZCB2YWx1ZXMuXG4gKlxuICogQHNlZSBodHRwOi8vdW5kZXJzY29yZWpzLm9yZ1xuICogQGNvcHlyaWdodCAyMDA5LTIwMTMgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIEluYy5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmZ1bmN0aW9uIGFyZUVxdWFsKGEsIGIpIHtcbiAgdmFyIGFTdGFjayA9IGFTdGFja1Bvb2wubGVuZ3RoID8gYVN0YWNrUG9vbC5wb3AoKSA6IFtdO1xuICB2YXIgYlN0YWNrID0gYlN0YWNrUG9vbC5sZW5ndGggPyBiU3RhY2tQb29sLnBvcCgpIDogW107XG4gIHZhciByZXN1bHQgPSBlcShhLCBiLCBhU3RhY2ssIGJTdGFjayk7XG4gIGFTdGFjay5sZW5ndGggPSAwO1xuICBiU3RhY2subGVuZ3RoID0gMDtcbiAgYVN0YWNrUG9vbC5wdXNoKGFTdGFjayk7XG4gIGJTdGFja1Bvb2wucHVzaChiU3RhY2spO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBlcShhLCBiLCBhU3RhY2ssIGJTdGFjaykge1xuICBpZiAoYSA9PT0gYikge1xuICAgIC8vIElkZW50aWNhbCBvYmplY3RzIGFyZSBlcXVhbC4gYDAgPT09IC0wYCwgYnV0IHRoZXkgYXJlbid0IGlkZW50aWNhbC5cbiAgICByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PSAxIC8gYjtcbiAgfVxuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSB7XG4gICAgLy8gYSBvciBiIGNhbiBiZSBgbnVsbGAgb3IgYHVuZGVmaW5lZGBcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgb2JqVG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICB2YXIgY2xhc3NOYW1lID0gb2JqVG9TdHIuY2FsbChhKTtcblxuICBpZiAoY2xhc3NOYW1lICE9IG9ialRvU3RyLmNhbGwoYikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgICByZXR1cm4gYSA9PSBTdHJpbmcoYik7XG5cbiAgICBjYXNlICdbb2JqZWN0IE51bWJlcl0nOlxuICAgICAgcmV0dXJuIGlzTmFOKGEpIHx8IGlzTmFOKGIpID8gZmFsc2UgOiBhID09IE51bWJlcihiKTtcblxuICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOlxuICAgIGNhc2UgJ1tvYmplY3QgQm9vbGVhbl0nOlxuICAgICAgcmV0dXJuICthID09ICtiO1xuXG4gICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzpcbiAgICAgIHJldHVybiBhLnNvdXJjZSA9PSBiLnNvdXJjZSAmJiBhLmdsb2JhbCA9PSBiLmdsb2JhbCAmJiBhLm11bHRpbGluZSA9PSBiLm11bHRpbGluZSAmJiBhLmlnbm9yZUNhc2UgPT0gYi5pZ25vcmVDYXNlO1xuICB9IC8vIEFzc3VtZSBlcXVhbGl0eSBmb3IgY3ljbGljIHN0cnVjdHVyZXMuXG5cblxuICB2YXIgbGVuZ3RoID0gYVN0YWNrLmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT0gYSkge1xuICAgICAgcmV0dXJuIGJTdGFja1tsZW5ndGhdID09IGI7XG4gICAgfVxuICB9XG5cbiAgYVN0YWNrLnB1c2goYSk7XG4gIGJTdGFjay5wdXNoKGIpO1xuICB2YXIgc2l6ZSA9IDA7IC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuXG4gIGlmIChjbGFzc05hbWUgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICBzaXplID0gYS5sZW5ndGg7XG5cbiAgICBpZiAoc2l6ZSAhPT0gYi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuXG5cblxuICAgIHdoaWxlIChzaXplLS0pIHtcbiAgICAgIGlmICghZXEoYVtzaXplXSwgYltzaXplXSwgYVN0YWNrLCBiU3RhY2spKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGEuY29uc3RydWN0b3IgIT09IGIuY29uc3RydWN0b3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoYS5oYXNPd25Qcm9wZXJ0eSgndmFsdWVPZicpICYmIGIuaGFzT3duUHJvcGVydHkoJ3ZhbHVlT2YnKSkge1xuICAgICAgcmV0dXJuIGEudmFsdWVPZigpID09IGIudmFsdWVPZigpO1xuICAgIH1cblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYSk7XG5cbiAgICBpZiAoa2V5cy5sZW5ndGggIT0gT2JqZWN0LmtleXMoYikubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWVxKGFba2V5c1tpXV0sIGJba2V5c1tpXV0sIGFTdGFjaywgYlN0YWNrKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYVN0YWNrLnBvcCgpO1xuICBiU3RhY2sucG9wKCk7XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFyZUVxdWFsOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cblxuXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gIH0pO1xuXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoICh4KSB7fVxufVxuXG52YXIgd2FybmluZyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGZ1bmN0aW9uIChjb25kaXRpb24sIGZvcm1hdCkge1xuICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgKyAnbWVzc2FnZSBhcmd1bWVudCcpO1xuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBwcmludFdhcm5pbmcuYXBwbHkodm9pZCAwLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICB9XG59IDogZW1wdHlGdW5jdGlvbjtcbm1vZHVsZS5leHBvcnRzID0gd2FybmluZzsiLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHkoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHkoMjI3KSk7dmFyIGJhPW5ldyBTZXQsY2E9e307ZnVuY3Rpb24gZGEoYSxiKXtlYShhLGIpO2VhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBlYShhLGIpe2NhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKyliYS5hZGQoYlthXSl9XG52YXIgZmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGhhPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxpYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuamE9e30sa2E9e307ZnVuY3Rpb24gbGEoYSl7aWYoaWEuY2FsbChrYSxhKSlyZXR1cm4hMDtpZihpYS5jYWxsKGphLGEpKXJldHVybiExO2lmKGhhLnRlc3QoYSkpcmV0dXJuIGthW2FdPSEwO2phW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIG1hKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gbmEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8bWEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBCKGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBCKGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIG9hPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EsXG5wYSk7RFtiXT1uZXcgQihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5ELnhsaW5rSHJlZj1uZXcgQihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiBxYShhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChuYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/bGEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciByYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxzYT02MDEwMyx0YT02MDEwNix1YT02MDEwNyx3YT02MDEwOCx4YT02MDExNCx5YT02MDEwOSx6YT02MDExMCxBYT02MDExMixCYT02MDExMyxDYT02MDEyMCxEYT02MDExNSxFYT02MDExNixGYT02MDEyMSxHYT02MDEyOCxIYT02MDEyOSxJYT02MDEzMCxKYT02MDEzMTtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciBFPVN5bWJvbC5mb3I7c2E9RShcInJlYWN0LmVsZW1lbnRcIik7dGE9RShcInJlYWN0LnBvcnRhbFwiKTt1YT1FKFwicmVhY3QuZnJhZ21lbnRcIik7d2E9RShcInJlYWN0LnN0cmljdF9tb2RlXCIpO3hhPUUoXCJyZWFjdC5wcm9maWxlclwiKTt5YT1FKFwicmVhY3QucHJvdmlkZXJcIik7emE9RShcInJlYWN0LmNvbnRleHRcIik7QWE9RShcInJlYWN0LmZvcndhcmRfcmVmXCIpO0JhPUUoXCJyZWFjdC5zdXNwZW5zZVwiKTtDYT1FKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtEYT1FKFwicmVhY3QubWVtb1wiKTtFYT1FKFwicmVhY3QubGF6eVwiKTtGYT1FKFwicmVhY3QuYmxvY2tcIik7RShcInJlYWN0LnNjb3BlXCIpO0dhPUUoXCJyZWFjdC5vcGFxdWUuaWRcIik7SGE9RShcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7SWE9RShcInJlYWN0Lm9mZnNjcmVlblwiKTtKYT1FKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKX1cbnZhciBLYT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gTGEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUthJiZhW0thXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBNYTtmdW5jdGlvbiBOYShhKXtpZih2b2lkIDA9PT1NYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtNYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTWErYX12YXIgT2E9ITE7XG5mdW5jdGlvbiBQYShhLGIpe2lmKCFhfHxPYSlyZXR1cm5cIlwiO09hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChrKXt2YXIgZD1rfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2goayl7ZD1rfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goayl7ZD1rfWEoKX19Y2F0Y2goayl7aWYoayYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBrLnN0YWNrKXtmb3IodmFyIGU9ay5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXJldHVyblwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e09hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TmEoYSk6XCJcIn1cbmZ1bmN0aW9uIFFhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBOYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE5hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBOYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE5hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1QYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1QYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMjI6cmV0dXJuIGE9UGEoYS50eXBlLl9yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPVBhKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUmEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB0YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgeGE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2Ugd2E6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBCYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBDYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB6YTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSB5YTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBBYTp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtcbnJldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgRGE6cmV0dXJuIFJhKGEudHlwZSk7Y2FzZSBGYTpyZXR1cm4gUmEoYS5fcmVuZGVyKTtjYXNlIEVhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBSYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG0oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gJGEoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZxYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYWIoYSxiKXskYShhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2JiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmJiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGJiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIGRiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIGViKGEsYil7YT1tKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9ZGIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IoeSg5MSkpO3JldHVybiBtKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHkoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih5KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIga2I9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gbGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBtYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/bGIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbmIsb2I9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09a2Iuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bmI9bmJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bmIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bmIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gcGIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBxYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxyYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocWIpLmZvckVhY2goZnVuY3Rpb24oYSl7cmIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtxYltiXT1xYlthXX0pfSk7ZnVuY3Rpb24gc2IoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHFiLmhhc093blByb3BlcnR5KGEpJiZxYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiB0YihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1zYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB1Yj1tKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdmIoYSxiKXtpZihiKXtpZih1YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHkoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHkoNjIpKTt9fVxuZnVuY3Rpb24gd2IoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fWZ1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IoeSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBJYigpe312YXIgSmI9R2IsS2I9ITEsTGI9ITE7ZnVuY3Rpb24gTWIoKXtpZihudWxsIT09emJ8fG51bGwhPT1BYilJYigpLEZiKCl9XG5mdW5jdGlvbiBOYihhLGIsYyl7aWYoTGIpcmV0dXJuIGEoYixjKTtMYj0hMDt0cnl7cmV0dXJuIEpiKGEsYixjKX1maW5hbGx5e0xiPSExLE1iKCl9fVxuZnVuY3Rpb24gT2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcih5KDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIFBiPSExO2lmKGZhKXRyeXt2YXIgUWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFFiLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtQYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpfWNhdGNoKGEpe1BiPSExfWZ1bmN0aW9uIFJiKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChuKXt0aGlzLm9uRXJyb3Iobil9fXZhciBTYj0hMSxUYj1udWxsLFViPSExLFZiPW51bGwsV2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7U2I9ITA7VGI9YX19O2Z1bmN0aW9uIFhiKGEsYixjLGQsZSxmLGcsaCxrKXtTYj0hMTtUYj1udWxsO1JiLmFwcGx5KFdiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBZYihhLGIsYyxkLGUsZixnLGgsayl7WGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKFNiKXtpZihTYil7dmFyIGw9VGI7U2I9ITE7VGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHkoMTk4KSk7VWJ8fChVYj0hMCxWYj1sKX19ZnVuY3Rpb24gWmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiAkYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGFjKGEpe2lmKFpiKGEpIT09YSl0aHJvdyBFcnJvcih5KDE4OCkpO31cbmZ1bmN0aW9uIGJjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVpiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGFjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGFjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IoeSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih5KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHkoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gY2MoYSl7YT1iYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRjKGEsYil7Zm9yKHZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1iOyl7aWYoYj09PWF8fGI9PT1jKXJldHVybiEwO2I9Yi5yZXR1cm59cmV0dXJuITF9dmFyIGVjLGZjLGdjLGhjLGljPSExLGpjPVtdLGtjPW51bGwsbGM9bnVsbCxtYz1udWxsLG5jPW5ldyBNYXAsb2M9bmV3IE1hcCxwYz1bXSxxYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiByYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSxkb21FdmVudE5hbWU6YixldmVudFN5c3RlbUZsYWdzOmN8MTYsbmF0aXZlRXZlbnQ6ZSx0YXJnZXRDb250YWluZXJzOltkXX19ZnVuY3Rpb24gc2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjprYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6bGM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6bWM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOm5jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOm9jLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gdGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1yYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmZmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gdWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4ga2M9dGMoa2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIGxjPXRjKGxjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBtYz10YyhtYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO25jLnNldChmLHRjKG5jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxvYy5zZXQoZix0YyhvYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiB2YyhhKXt2YXIgYj13YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVpiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPSRiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO2hjKGEubGFuZVByaW9yaXR5LGZ1bmN0aW9uKCl7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe2djKGMpfSl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24geGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZmYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiB6YyhhLGIsYyl7eGMoYSkmJmMuZGVsZXRlKGIpfVxuZnVuY3Rpb24gQWMoKXtmb3IoaWM9ITE7MDxqYy5sZW5ndGg7KXt2YXIgYT1qY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9Q2IoYS5ibG9ja2VkT24pO251bGwhPT1hJiZlYyhhKTticmVha31mb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yyl7YS5ibG9ja2VkT249YzticmVha31iLnNoaWZ0KCl9bnVsbD09PWEuYmxvY2tlZE9uJiZqYy5zaGlmdCgpfW51bGwhPT1rYyYmeGMoa2MpJiYoa2M9bnVsbCk7bnVsbCE9PWxjJiZ4YyhsYykmJihsYz1udWxsKTtudWxsIT09bWMmJnhjKG1jKSYmKG1jPW51bGwpO25jLmZvckVhY2goemMpO29jLmZvckVhY2goemMpfVxuZnVuY3Rpb24gQmMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLGljfHwoaWM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksQWMpKSl9XG5mdW5jdGlvbiBDYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBCYyhiLGEpfWlmKDA8amMubGVuZ3RoKXtCYyhqY1swXSxhKTtmb3IodmFyIGM9MTtjPGpjLmxlbmd0aDtjKyspe3ZhciBkPWpjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09a2MmJkJjKGtjLGEpO251bGwhPT1sYyYmQmMobGMsYSk7bnVsbCE9PW1jJiZCYyhtYyxhKTtuYy5mb3JFYWNoKGIpO29jLmZvckVhY2goYik7Zm9yKGM9MDtjPHBjLmxlbmd0aDtjKyspZD1wY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8cGMubGVuZ3RoJiYoYz1wY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOyl2YyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJnBjLnNoaWZ0KCl9XG5mdW5jdGlvbiBEYyhhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBFYz17YW5pbWF0aW9uZW5kOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6RGMoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxGYz17fSxHYz17fTtcbmZhJiYoR2M9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgRWMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgRWMudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBIYyhhKXtpZihGY1thXSlyZXR1cm4gRmNbYV07aWYoIUVjW2FdKXJldHVybiBhO3ZhciBiPUVjW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIEdjKXJldHVybiBGY1thXT1iW2NdO3JldHVybiBhfVxudmFyIEljPUhjKFwiYW5pbWF0aW9uZW5kXCIpLEpjPUhjKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLEtjPUhjKFwiYW5pbWF0aW9uc3RhcnRcIiksTGM9SGMoXCJ0cmFuc2l0aW9uZW5kXCIpLE1jPW5ldyBNYXAsTmM9bmV3IE1hcCxPYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixJYyxcImFuaW1hdGlvbkVuZFwiLEpjLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsS2MsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXG5cImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIixMYyxcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gUGMoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV07ZT1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtOYy5zZXQoZCxiKTtNYy5zZXQoZCxlKTtkYShlLFtkXSl9fXZhciBRYz1yLnVuc3RhYmxlX25vdztRYygpO3ZhciBGPTg7XG5mdW5jdGlvbiBSYyhhKXtpZigwIT09KDEmYSkpcmV0dXJuIEY9MTUsMTtpZigwIT09KDImYSkpcmV0dXJuIEY9MTQsMjtpZigwIT09KDQmYSkpcmV0dXJuIEY9MTMsNDt2YXIgYj0yNCZhO2lmKDAhPT1iKXJldHVybiBGPTEyLGI7aWYoMCE9PShhJjMyKSlyZXR1cm4gRj0xMSwzMjtiPTE5MiZhO2lmKDAhPT1iKXJldHVybiBGPTEwLGI7aWYoMCE9PShhJjI1NikpcmV0dXJuIEY9OSwyNTY7Yj0zNTg0JmE7aWYoMCE9PWIpcmV0dXJuIEY9OCxiO2lmKDAhPT0oYSY0MDk2KSlyZXR1cm4gRj03LDQwOTY7Yj00MTg2MTEyJmE7aWYoMCE9PWIpcmV0dXJuIEY9NixiO2I9NjI5MTQ1NjAmYTtpZigwIT09YilyZXR1cm4gRj01LGI7aWYoYSY2NzEwODg2NClyZXR1cm4gRj00LDY3MTA4ODY0O2lmKDAhPT0oYSYxMzQyMTc3MjgpKXJldHVybiBGPTMsMTM0MjE3NzI4O2I9ODA1MzA2MzY4JmE7aWYoMCE9PWIpcmV0dXJuIEY9MixiO2lmKDAhPT0oMTA3Mzc0MTgyNCZhKSlyZXR1cm4gRj0xLDEwNzM3NDE4MjQ7XG5GPTg7cmV0dXJuIGF9ZnVuY3Rpb24gU2MoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIDE1O2Nhc2UgOTg6cmV0dXJuIDEwO2Nhc2UgOTc6Y2FzZSA5NjpyZXR1cm4gODtjYXNlIDk1OnJldHVybiAyO2RlZmF1bHQ6cmV0dXJuIDB9fWZ1bmN0aW9uIFRjKGEpe3N3aXRjaChhKXtjYXNlIDE1OmNhc2UgMTQ6cmV0dXJuIDk5O2Nhc2UgMTM6Y2FzZSAxMjpjYXNlIDExOmNhc2UgMTA6cmV0dXJuIDk4O2Nhc2UgOTpjYXNlIDg6Y2FzZSA3OmNhc2UgNjpjYXNlIDQ6Y2FzZSA1OnJldHVybiA5NztjYXNlIDM6Y2FzZSAyOmNhc2UgMTpyZXR1cm4gOTU7Y2FzZSAwOnJldHVybiA5MDtkZWZhdWx0OnRocm93IEVycm9yKHkoMzU4LGEpKTt9fVxuZnVuY3Rpb24gVWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gRj0wO3ZhciBkPTAsZT0wLGY9YS5leHBpcmVkTGFuZXMsZz1hLnN1c3BlbmRlZExhbmVzLGg9YS5waW5nZWRMYW5lcztpZigwIT09ZilkPWYsZT1GPTE1O2Vsc2UgaWYoZj1jJjEzNDIxNzcyNywwIT09Zil7dmFyIGs9ZiZ+ZzswIT09az8oZD1SYyhrKSxlPUYpOihoJj1mLDAhPT1oJiYoZD1SYyhoKSxlPUYpKX1lbHNlIGY9YyZ+ZywwIT09Zj8oZD1SYyhmKSxlPUYpOjAhPT1oJiYoZD1SYyhoKSxlPUYpO2lmKDA9PT1kKXJldHVybiAwO2Q9MzEtVmMoZCk7ZD1jJigoMD5kPzA6MTw8ZCk8PDEpLTE7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZykpe1JjKGIpO2lmKGU8PUYpcmV0dXJuIGI7Rj1lfWI9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtVmMoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiBXYyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24gWGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxNTpyZXR1cm4gMTtjYXNlIDE0OnJldHVybiAyO2Nhc2UgMTI6cmV0dXJuIGE9WWMoMjQmfmIpLDA9PT1hP1hjKDEwLGIpOmE7Y2FzZSAxMDpyZXR1cm4gYT1ZYygxOTImfmIpLDA9PT1hP1hjKDgsYik6YTtjYXNlIDg6cmV0dXJuIGE9WWMoMzU4NCZ+YiksMD09PWEmJihhPVljKDQxODYxMTImfmIpLDA9PT1hJiYoYT01MTIpKSxhO2Nhc2UgMjpyZXR1cm4gYj1ZYyg4MDUzMDYzNjgmfmIpLDA9PT1iJiYoYj0yNjg0MzU0NTYpLGJ9dGhyb3cgRXJyb3IoeSgzNTgsYSkpO31mdW5jdGlvbiBZYyhhKXtyZXR1cm4gYSYtYX1mdW5jdGlvbiBaYyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjt2YXIgZD1iLTE7YS5zdXNwZW5kZWRMYW5lcyY9ZDthLnBpbmdlZExhbmVzJj1kO2E9YS5ldmVudFRpbWVzO2I9MzEtVmMoYik7YVtiXT1jfXZhciBWYz1NYXRoLmNsejMyP01hdGguY2x6MzI6YWQsYmQ9TWF0aC5sb2csY2Q9TWF0aC5MTjI7ZnVuY3Rpb24gYWQoYSl7cmV0dXJuIDA9PT1hPzMyOjMxLShiZChhKS9jZHwwKXwwfXZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIGdkKGEsYixjLGQpe0tifHxJYigpO3ZhciBlPWhkLGY9S2I7S2I9ITA7dHJ5e0hiKGUsYSxiLGMsZCl9ZmluYWxseXsoS2I9Zil8fE1iKCl9fWZ1bmN0aW9uIGlkKGEsYixjLGQpe2VkKGRkLGhkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkKXtpZihmZCl7dmFyIGU7aWYoKGU9MD09PShiJjQpKSYmMDxqYy5sZW5ndGgmJi0xPHFjLmluZGV4T2YoYSkpYT1yYyhudWxsLGEsYixjLGQpLGpjLnB1c2goYSk7ZWxzZXt2YXIgZj15YyhhLGIsYyxkKTtpZihudWxsPT09ZillJiZzYyhhLGQpO2Vsc2V7aWYoZSl7aWYoLTE8cWMuaW5kZXhPZihhKSl7YT1yYyhmLGEsYixjLGQpO2pjLnB1c2goYSk7cmV0dXJufWlmKHVjKGYsYSxiLGMsZCkpcmV0dXJuO3NjKGEsZCl9amQoYSxiLGQsbnVsbCxjKX19fX1cbmZ1bmN0aW9uIHljKGEsYixjLGQpe3ZhciBlPXhiKGQpO2U9d2MoZSk7aWYobnVsbCE9PWUpe3ZhciBmPVpiKGUpO2lmKG51bGw9PT1mKWU9bnVsbDtlbHNle3ZhciBnPWYudGFnO2lmKDEzPT09Zyl7ZT0kYihmKTtpZihudWxsIT09ZSlyZXR1cm4gZTtlPW51bGx9ZWxzZSBpZigzPT09Zyl7aWYoZi5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWYudGFnP2Yuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtlPW51bGx9ZWxzZSBmIT09ZSYmKGU9bnVsbCl9fWpkKGEsYixkLGUsYyk7cmV0dXJuIG51bGx9dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO1xuZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9bShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9bSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPW0oe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPW0oe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPW0oe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1tKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9bSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1tKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9bSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1tKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1tKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9bSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9bSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9ZmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWZhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9ZmEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoZmEpe3ZhciB4ZTtpZihmYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO2E9cmU7aWYoS2IpYShiKTtlbHNle0tiPSEwO3RyeXtHYihhLGIpfWZpbmFsbHl7S2I9ITEsTWIoKX19fX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlLEllPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBKZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighSWUuY2FsbChiLGNbZF0pfHwhSGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBLZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZShhLGIpe3ZhciBjPUtlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtlKGMpfX1mdW5jdGlvbiBNZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01lKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgUGU9ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk9lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkplKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cblBjKFwiY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXNpbiBmb2N1cyBmb2N1c291dCBibHVyIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksXG4wKTtQYyhcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTtQYyhPYywyKTtmb3IodmFyIFZlPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxXZT0wO1dlPFZlLmxlbmd0aDtXZSsrKU5jLnNldChWZVtXZV0sMCk7ZWEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtcbmVhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtlYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2RhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZGEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5kYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIFhlPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxZZT1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChYZSkpO1xuZnVuY3Rpb24gWmUoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7WWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfX19aWYoVWIpdGhyb3cgYT1WYixVYj0hMSxWYj1udWxsLGE7fVxuZnVuY3Rpb24gRyhhLGIpe3ZhciBjPSRlKGIpLGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChhZihiLGEsMiwhMSksYy5hZGQoZCkpfXZhciBiZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIGNmKGEpe2FbYmZdfHwoYVtiZl09ITAsYmEuZm9yRWFjaChmdW5jdGlvbihiKXtZZS5oYXMoYil8fGRmKGIsITEsYSxudWxsKTtkZihiLCEwLGEsbnVsbCl9KSl9XG5mdW5jdGlvbiBkZihhLGIsYyxkKXt2YXIgZT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MCxmPWM7XCJzZWxlY3Rpb25jaGFuZ2VcIj09PWEmJjkhPT1jLm5vZGVUeXBlJiYoZj1jLm93bmVyRG9jdW1lbnQpO2lmKG51bGwhPT1kJiYhYiYmWWUuaGFzKGEpKXtpZihcInNjcm9sbFwiIT09YSlyZXR1cm47ZXw9MjtmPWR9dmFyIGc9JGUoZiksaD1hK1wiX19cIisoYj9cImNhcHR1cmVcIjpcImJ1YmJsZVwiKTtnLmhhcyhoKXx8KGImJihlfD00KSxhZihmLGEsZSxiKSxnLmFkZChoKSl9XG5mdW5jdGlvbiBhZihhLGIsYyxkKXt2YXIgZT1OYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWU/MjplKXtjYXNlIDA6ZT1nZDticmVhaztjYXNlIDE6ZT1pZDticmVhaztkZWZhdWx0OmU9aGR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IVBifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGpkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9d2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufU5iKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1NYy5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQseD1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjp4PVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOng9XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlIEljOmNhc2UgSmM6Y2FzZSBLYzprPUhkO2JyZWFrO2Nhc2UgTGM6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdz0wIT09KGImNCksej0hdyYmXCJzY3JvbGxcIj09PWEsdT13P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3c9W107Zm9yKHZhciB0PWQscTtudWxsIT09XG50Oyl7cT10O3ZhciB2PXEuc3RhdGVOb2RlOzU9PT1xLnRhZyYmbnVsbCE9PXYmJihxPXYsbnVsbCE9PXUmJih2PU9iKHQsdSksbnVsbCE9diYmdy5wdXNoKGVmKHQsdixxKSkpKTtpZih6KWJyZWFrO3Q9dC5yZXR1cm59MDx3Lmxlbmd0aCYmKGg9bmV3IGsoaCx4LG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnd9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiYwPT09KGImMTYpJiYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYod2MoeCl8fHhbZmZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCx4PXg/d2MoeCk6bnVsbCxudWxsIT09XG54JiYoej1aYih4KSx4IT09enx8NSE9PXgudGFnJiY2IT09eC50YWcpKXg9bnVsbH1lbHNlIGs9bnVsbCx4PWQ7aWYoayE9PXgpe3c9QmQ7dj1cIm9uTW91c2VMZWF2ZVwiO3U9XCJvbk1vdXNlRW50ZXJcIjt0PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdz1UZCx2PVwib25Qb2ludGVyTGVhdmVcIix1PVwib25Qb2ludGVyRW50ZXJcIix0PVwicG9pbnRlclwiO3o9bnVsbD09az9oOnVlKGspO3E9bnVsbD09eD9oOnVlKHgpO2g9bmV3IHcodix0K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9ejtoLnJlbGF0ZWRUYXJnZXQ9cTt2PW51bGw7d2MoZSk9PT1kJiYodz1uZXcgdyh1LHQrXCJlbnRlclwiLHgsYyxlKSx3LnRhcmdldD1xLHcucmVsYXRlZFRhcmdldD16LHY9dyk7ej12O2lmKGsmJngpYjp7dz1rO3U9eDt0PTA7Zm9yKHE9dztxO3E9Z2YocSkpdCsrO3E9MDtmb3Iodj11O3Y7dj1nZih2KSlxKys7Zm9yKDswPHQtcTspdz1nZih3KSx0LS07Zm9yKDswPHEtdDspdT1cbmdmKHUpLHEtLTtmb3IoO3QtLTspe2lmKHc9PT11fHxudWxsIT09dSYmdz09PXUuYWx0ZXJuYXRlKWJyZWFrIGI7dz1nZih3KTt1PWdmKHUpfXc9bnVsbH1lbHNlIHc9bnVsbDtudWxsIT09ayYmaGYoZyxoLGssdywhMSk7bnVsbCE9PXgmJm51bGwhPT16JiZoZihnLHoseCx3LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBKPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpSj1GZTtlbHNle0o9RGU7dmFyIEs9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihKPUVlKTtpZihKJiYoSj1KKGEsZCkpKXtuZShnLEosYyxlKTticmVhayBhfUsmJksoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJihLPWguX3dyYXBwZXJTdGF0ZSkmJlxuSy5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZiYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9Sz1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZShLKXx8XCJ0cnVlXCI9PT1LLmNvbnRlbnRFZGl0YWJsZSlRZT1LLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgUTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6TD1cIm9uQ29tcG9zaXRpb25FbmRcIjticmVhayBiO1xuY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6TD1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifUw9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKEw9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtMJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1MP1wib25Db21wb3NpdGlvbkVuZFwiPT09TCYmaWUmJihRPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSksSz1vZShkLEwpLDA8Sy5sZW5ndGgmJihMPW5ldyBMZChMLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6TCxsaXN0ZW5lcnM6S30pLFE/TC5kYXRhPVE6KFE9aGUoYyksbnVsbCE9PVEmJihMLmRhdGE9USkpKSk7aWYoUT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSwwPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXG5cImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT1RKX1zZShnLGIpfSl9ZnVuY3Rpb24gZWYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPU9iKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KGVmKGEsZixlKSksZj1PYihhLGIpLG51bGwhPWYmJmQucHVzaChlZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIGdmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBoZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPU9iKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KGVmKGMsayxoKSkpOmV8fChrPU9iKGMsZiksbnVsbCE9ayYmZy5wdXNoKGVmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9ZnVuY3Rpb24gamYoKXt9dmFyIGtmPW51bGwsbGY9bnVsbDtmdW5jdGlvbiBtZihhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBuZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIG9mPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHBmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBxZihhKXsxPT09YS5ub2RlVHlwZT9hLnRleHRDb250ZW50PVwiXCI6OT09PWEubm9kZVR5cGUmJihhPWEuYm9keSxudWxsIT1hJiYoYS50ZXh0Q29udGVudD1cIlwiKSl9XG5mdW5jdGlvbiByZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1mdW5jdGlvbiBzZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgdGY9MDtmdW5jdGlvbiB1ZihhKXtyZXR1cm57JCR0eXBlb2Y6R2EsdG9TdHJpbmc6YSx2YWx1ZU9mOmF9fXZhciB2Zj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSx3Zj1cIl9fcmVhY3RGaWJlciRcIit2Zix4Zj1cIl9fcmVhY3RQcm9wcyRcIit2ZixmZj1cIl9fcmVhY3RDb250YWluZXIkXCIrdmYseWY9XCJfX3JlYWN0RXZlbnRzJFwiK3ZmO1xuZnVuY3Rpb24gd2MoYSl7dmFyIGI9YVt3Zl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbZmZdfHxjW3dmXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPXNmKGEpO251bGwhPT1hOyl7aWYoYz1hW3dmXSlyZXR1cm4gYzthPXNmKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbd2ZdfHxhW2ZmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHkoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbeGZdfHxudWxsfVxuZnVuY3Rpb24gJGUoYSl7dmFyIGI9YVt5Zl07dm9pZCAwPT09YiYmKGI9YVt5Zl09bmV3IFNldCk7cmV0dXJuIGJ9dmFyIHpmPVtdLEFmPS0xO2Z1bmN0aW9uIEJmKGEpe3JldHVybntjdXJyZW50OmF9fWZ1bmN0aW9uIEgoYSl7MD5BZnx8KGEuY3VycmVudD16ZltBZl0semZbQWZdPW51bGwsQWYtLSl9ZnVuY3Rpb24gSShhLGIpe0FmKys7emZbQWZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQ2Y9e30sTT1CZihDZiksTj1CZighMSksRGY9Q2Y7XG5mdW5jdGlvbiBFZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIENmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEZmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gR2YoKXtIKE4pO0goTSl9ZnVuY3Rpb24gSGYoYSxiLGMpe2lmKE0uY3VycmVudCE9PUNmKXRocm93IEVycm9yKHkoMTY4KSk7SShNLGIpO0koTixjKX1cbmZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IoeSgxMDgsUmEoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbSh7fSxjLGQpfWZ1bmN0aW9uIEpmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxDZjtEZj1NLmN1cnJlbnQ7SShNLGEpO0koTixOLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIEtmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih5KDE2OSkpO2M/KGE9SWYoYSxiLERmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChOKSxIKE0pLEkoTSxhKSk6SChOKTtJKE4sYyl9XG52YXIgTGY9bnVsbCxNZj1udWxsLE5mPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LE9mPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxQZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLFFmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsUmY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsU2Y9ci51bnN0YWJsZV9ub3csVGY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxVZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFZmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksV2Y9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxYZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFlmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFpmPXt9LCRmPXZvaWQgMCE9PVJmP1JmOmZ1bmN0aW9uKCl7fSxhZz1udWxsLGJnPW51bGwsY2c9ITEsZGc9U2YoKSxPPTFFND5kZz9TZjpmdW5jdGlvbigpe3JldHVybiBTZigpLWRnfTtcbmZ1bmN0aW9uIGVnKCl7c3dpdGNoKFRmKCkpe2Nhc2UgVWY6cmV0dXJuIDk5O2Nhc2UgVmY6cmV0dXJuIDk4O2Nhc2UgV2Y6cmV0dXJuIDk3O2Nhc2UgWGY6cmV0dXJuIDk2O2Nhc2UgWWY6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGZnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBVZjtjYXNlIDk4OnJldHVybiBWZjtjYXNlIDk3OnJldHVybiBXZjtjYXNlIDk2OnJldHVybiBYZjtjYXNlIDk1OnJldHVybiBZZjtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBnZyhhLGIpe2E9ZmcoYSk7cmV0dXJuIE5mKGEsYil9ZnVuY3Rpb24gaGcoYSxiLGMpe2E9ZmcoYSk7cmV0dXJuIE9mKGEsYixjKX1mdW5jdGlvbiBpZygpe2lmKG51bGwhPT1iZyl7dmFyIGE9Ymc7Ymc9bnVsbDtQZihhKX1qZygpfVxuZnVuY3Rpb24gamcoKXtpZighY2cmJm51bGwhPT1hZyl7Y2c9ITA7dmFyIGE9MDt0cnl7dmFyIGI9YWc7Z2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO2FnPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PWFnJiYoYWc9YWcuc2xpY2UoYSsxKSksT2YoVWYsaWcpLGM7fWZpbmFsbHl7Y2c9ITF9fX12YXIga2c9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gbGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1tKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIG1nPUJmKG51bGwpLG5nPW51bGwsb2c9bnVsbCxwZz1udWxsO2Z1bmN0aW9uIHFnKCl7cGc9b2c9bmc9bnVsbH1cbmZ1bmN0aW9uIHJnKGEpe3ZhciBiPW1nLmN1cnJlbnQ7SChtZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBzZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZigoYS5jaGlsZExhbmVzJmIpPT09YilpZihudWxsPT09Y3x8KGMuY2hpbGRMYW5lcyZiKT09PWIpYnJlYWs7ZWxzZSBjLmNoaWxkTGFuZXN8PWI7ZWxzZSBhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHRnKGEsYil7bmc9YTtwZz1vZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKHVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHZnKGEsYil7aWYocGchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKXBnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1vZyl7aWYobnVsbD09PW5nKXRocm93IEVycm9yKHkoMzA4KSk7b2c9YjtuZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIG9nPW9nLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB3Zz0hMTtmdW5jdGlvbiB4ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB5ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB6ZyhhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1mdW5jdGlvbiBBZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIEJnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBDZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3dnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG49YS5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe249bi51cGRhdGVRdWV1ZTt2YXIgQT1uLmxhc3RCYXNlVXBkYXRlO0EhPT1nJiYobnVsbD09PUE/bi5maXJzdEJhc2VVcGRhdGU9bDpBLm5leHQ9bCxuLmxhc3RCYXNlVXBkYXRlPWspfX1pZihudWxsIT09Zil7QT1lLmJhc2VTdGF0ZTtnPTA7bj1sPWs9bnVsbDtkb3toPWYubGFuZTt2YXIgcD1mLmV2ZW50VGltZTtpZigoZCZoKT09PWgpe251bGwhPT1uJiYobj1uLm5leHQ9e2V2ZW50VGltZTpwLGxhbmU6MCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBDPWEseD1mO2g9YjtwPWM7c3dpdGNoKHgudGFnKXtjYXNlIDE6Qz14LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEMpe0E9Qy5jYWxsKHAsQSxoKTticmVhayBhfUE9QzticmVhayBhO2Nhc2UgMzpDLmZsYWdzPUMuZmxhZ3MmLTQwOTd8NjQ7Y2FzZSAwOkM9eC5wYXlsb2FkO2g9XCJmdW5jdGlvblwiPT09dHlwZW9mIEM/Qy5jYWxsKHAsQSxoKTpDO2lmKG51bGw9PT1ofHx2b2lkIDA9PT1oKWJyZWFrIGE7QT1tKHt9LEEsaCk7YnJlYWsgYTtjYXNlIDI6d2c9ITB9fW51bGwhPT1mLmNhbGxiYWNrJiYoYS5mbGFnc3w9MzIsaD1lLmVmZmVjdHMsbnVsbD09PWg/ZS5lZmZlY3RzPVtmXTpoLnB1c2goZikpfWVsc2UgcD17ZXZlbnRUaW1lOnAsbGFuZTpoLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW4/KGw9bj1wLGs9QSk6bj1uLm5leHQ9cCxnfD1oO2Y9Zi5uZXh0O2lmKG51bGw9PT1cbmYpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2UgZj1oLm5leHQsaC5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1oLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09biYmKGs9QSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bjtEZ3w9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPUF9fWZ1bmN0aW9uIEVnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcih5KDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIEZnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24gR2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm0oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEtnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1piKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9SGcoKSxkPUlnKGEpLGU9emcoYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1cbmIpO0FnKGEsZSk7SmcoYSxkLGMpfX07ZnVuY3Rpb24gTGcoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSmUoYyxkKXx8IUplKGUsZik6ITB9XG5mdW5jdGlvbiBNZyhhLGIsYyl7dmFyIGQ9ITEsZT1DZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj12ZyhmKTooZT1GZihiKT9EZjpNLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9FZihhLGUpOkNmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9S2c7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBPZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUZnO3hnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9dmcoZik6KGY9RmYoYik/RGY6TS5jdXJyZW50LGUuY29udGV4dD1FZihhLGYpKTtDZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoR2coYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksQ2coYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NCl9dmFyIFBnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBRZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHkoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IoeSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RmcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IoeSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IoeSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFJnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHkoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7fVxuZnVuY3Rpb24gU2coYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5mbGFncz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1UZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFncz0yLFxuYyk6ZDtiLmZsYWdzPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1VZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1RZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VmcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5XZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WGcoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBBKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1VZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYz1WZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1RZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgdGE6cmV0dXJuIGI9V2coYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKFBnKGIpfHxMYShiKSlyZXR1cm4gYj1YZyhiLFxuYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1JnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXVhP24oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSB0YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihQZyhjKXx8TGEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bihhLGIsYyxkLG51bGwpO1JnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT11YT9uKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSB0YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihQZyhkKXx8TGEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbihiLGEsZCxlLG51bGwpO1JnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsdT1nLHo9Zz0wLHE9bnVsbDtudWxsIT09dSYmejxoLmxlbmd0aDt6Kyspe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIG49cChlLHUsaFt6XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx6KTtudWxsPT09dD9sPW46dC5zaWJsaW5nPW47dD1uO3U9cX1pZih6PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoO3o8aC5sZW5ndGg7eisrKXU9QShlLGhbel0sayksbnVsbCE9PXUmJihnPWYodSxnLHopLG51bGw9PT10P2w9dTp0LnNpYmxpbmc9dSx0PXUpO3JldHVybiBsfWZvcih1PWQoZSx1KTt6PGgubGVuZ3RoO3orKylxPUModSxlLHosaFt6XSxrKSxudWxsIT09cSYmKGEmJm51bGwhPT1xLmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PXEua2V5P3o6cS5rZXkpLGc9ZihxLGcseiksbnVsbD09PXQ/bD1xOnQuc2libGluZz1xLHQ9cSk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiB3KGUsZyxoLGspe3ZhciBsPUxhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHkoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09XG5oKXRocm93IEVycm9yKHkoMTUxKSk7Zm9yKHZhciB0PWw9bnVsbCx1PWcsej1nPTAscT1udWxsLG49aC5uZXh0KCk7bnVsbCE9PXUmJiFuLmRvbmU7eisrLG49aC5uZXh0KCkpe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIHc9cChlLHUsbi52YWx1ZSxrKTtpZihudWxsPT09dyl7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT13LmFsdGVybmF0ZSYmYihlLHUpO2c9Zih3LGcseik7bnVsbD09PXQ/bD13OnQuc2libGluZz13O3Q9dzt1PXF9aWYobi5kb25lKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDshbi5kb25lO3orKyxuPWgubmV4dCgpKW49QShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO3JldHVybiBsfWZvcih1PWQoZSx1KTshbi5kb25lO3orKyxuPWgubmV4dCgpKW49Qyh1LGUseixuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZcbnUuZGVsZXRlKG51bGw9PT1uLmtleT96Om4ua2V5KSxnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXVhJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHNhOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09dWEpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtcbmQ9ZShrLGYucHJvcHMpO2QucmVmPVFnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09dWE/KGQ9WGcoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVZnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVFnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB0YTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1cbldnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVVnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKFBnKGYpKXJldHVybiB4KGEsZCxmLGgpO2lmKExhKGYpKXJldHVybiB3KGEsZCxmLGgpO2wmJlJnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDIyOmNhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGhyb3cgRXJyb3IoeSgxNTIsUmEoYS50eXBlKXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWWc9U2coITApLFpnPVNnKCExKSwkZz17fSxhaD1CZigkZyksYmg9QmYoJGcpLGNoPUJmKCRnKTtcbmZ1bmN0aW9uIGRoKGEpe2lmKGE9PT0kZyl0aHJvdyBFcnJvcih5KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGVoKGEsYil7SShjaCxiKTtJKGJoLGEpO0koYWgsJGcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bWIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPW1iKGIsYSl9SChhaCk7SShhaCxiKX1mdW5jdGlvbiBmaCgpe0goYWgpO0goYmgpO0goY2gpfWZ1bmN0aW9uIGdoKGEpe2RoKGNoLmN1cnJlbnQpO3ZhciBiPWRoKGFoLmN1cnJlbnQpO3ZhciBjPW1iKGIsYS50eXBlKTtiIT09YyYmKEkoYmgsYSksSShhaCxjKSl9ZnVuY3Rpb24gaGgoYSl7YmguY3VycmVudD09PWEmJihIKGFoKSxIKGJoKSl9dmFyIFA9QmYoMCk7XG5mdW5jdGlvbiBpaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBqaD1udWxsLGtoPW51bGwsbGg9ITE7XG5mdW5jdGlvbiBtaChhLGIpe3ZhciBjPW5oKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmZsYWdzPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBvaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcGgoYSl7aWYobGgpe3ZhciBiPWtoO2lmKGIpe3ZhciBjPWI7aWYoIW9oKGEsYikpe2I9cmYoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFvaChhLGIpKXthLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MjtsaD0hMTtqaD1hO3JldHVybn1taChqaCxjKX1qaD1hO2toPXJmKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MixsaD0hMSxqaD1hfX1mdW5jdGlvbiBxaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47amg9YX1cbmZ1bmN0aW9uIHJoKGEpe2lmKGEhPT1qaClyZXR1cm4hMTtpZighbGgpcmV0dXJuIHFoKGEpLGxoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhbmYoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPWtoO2I7KW1oKGEsYiksYj1yZihiLm5leHRTaWJsaW5nKTtxaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHkoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe2toPXJmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9a2g9bnVsbH19ZWxzZSBraD1qaD9yZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIHNoKCl7a2g9amg9bnVsbDtsaD0hMX12YXIgdGg9W107ZnVuY3Rpb24gdWgoKXtmb3IodmFyIGE9MDthPHRoLmxlbmd0aDthKyspdGhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDt0aC5sZW5ndGg9MH12YXIgdmg9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcix3aD1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyx4aD0wLFI9bnVsbCxTPW51bGwsVD1udWxsLHloPSExLHpoPSExO2Z1bmN0aW9uIEFoKCl7dGhyb3cgRXJyb3IoeSgzMjEpKTt9ZnVuY3Rpb24gQmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIENoKGEsYixjLGQsZSxmKXt4aD1mO1I9YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO3ZoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/RGg6RWg7YT1jKGQsZSk7aWYoemgpe2Y9MDtkb3t6aD0hMTtpZighKDI1PmYpKXRocm93IEVycm9yKHkoMzAxKSk7Zis9MTtUPVM9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7dmguY3VycmVudD1GaDthPWMoZCxlKX13aGlsZSh6aCl9dmguY3VycmVudD1HaDtiPW51bGwhPT1TJiZudWxsIT09Uy5uZXh0O3hoPTA7VD1TPVI9bnVsbDt5aD0hMTtpZihiKXRocm93IEVycm9yKHkoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gSGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWE7cmV0dXJuIFR9XG5mdW5jdGlvbiBJaCgpe2lmKG51bGw9PT1TKXt2YXIgYT1SLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1TLm5leHQ7dmFyIGI9bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlOlQubmV4dDtpZihudWxsIT09YilUPWIsUz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeSgzMTApKTtTPWE7YT17bWVtb2l6ZWRTdGF0ZTpTLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlMuYmFzZVN0YXRlLGJhc2VRdWV1ZTpTLmJhc2VRdWV1ZSxxdWV1ZTpTLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hfXJldHVybiBUfWZ1bmN0aW9uIEpoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gS2goYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1TLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsubGFuZTtpZigoeGgmbCk9PT1sKW51bGwhPT1oJiYoaD1oLm5leHQ9e2xhbmU6MCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2Vsc2V7dmFyIG49e2xhbmU6bCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLFxuZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW4sZj1kKTpoPWgubmV4dD1uO1IubGFuZXN8PWw7RGd8PWx9az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIExoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24gTWgoYSxiLGMpe3ZhciBkPWIuX2dldFZlcnNpb247ZD1kKGIuX3NvdXJjZSk7dmFyIGU9Yi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeTtpZihudWxsIT09ZSlhPWU9PT1kO2Vsc2UgaWYoYT1hLm11dGFibGVSZWFkTGFuZXMsYT0oeGgmYSk9PT1hKWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9ZCx0aC5wdXNoKGIpO2lmKGEpcmV0dXJuIGMoYi5fc291cmNlKTt0aC5wdXNoKGIpO3Rocm93IEVycm9yKHkoMzUwKSk7fVxuZnVuY3Rpb24gTmgoYSxiLGMsZCl7dmFyIGU9VTtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih5KDM0OSkpO3ZhciBmPWIuX2dldFZlcnNpb24sZz1mKGIuX3NvdXJjZSksaD12aC5jdXJyZW50LGs9aC51c2VTdGF0ZShmdW5jdGlvbigpe3JldHVybiBNaChlLGIsYyl9KSxsPWtbMV0sbj1rWzBdO2s9VDt2YXIgQT1hLm1lbW9pemVkU3RhdGUscD1BLnJlZnMsQz1wLmdldFNuYXBzaG90LHg9QS5zb3VyY2U7QT1BLnN1YnNjcmliZTt2YXIgdz1SO2EubWVtb2l6ZWRTdGF0ZT17cmVmczpwLHNvdXJjZTpiLHN1YnNjcmliZTpkfTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3AuZ2V0U25hcHNob3Q9YztwLnNldFNuYXBzaG90PWw7dmFyIGE9ZihiLl9zb3VyY2UpO2lmKCFIZShnLGEpKXthPWMoYi5fc291cmNlKTtIZShuLGEpfHwobChhKSxhPUlnKHcpLGUubXV0YWJsZVJlYWRMYW5lc3w9YSZlLnBlbmRpbmdMYW5lcyk7YT1lLm11dGFibGVSZWFkTGFuZXM7ZS5lbnRhbmdsZWRMYW5lc3w9YTtmb3IodmFyIGQ9XG5lLmVudGFuZ2xlbWVudHMsaD1hOzA8aDspe3ZhciBrPTMxLVZjKGgpLHY9MTw8aztkW2tdfD1hO2gmPX52fX19LFtjLGIsZF0pO2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cmV0dXJuIGQoYi5fc291cmNlLGZ1bmN0aW9uKCl7dmFyIGE9cC5nZXRTbmFwc2hvdCxjPXAuc2V0U25hcHNob3Q7dHJ5e2MoYShiLl9zb3VyY2UpKTt2YXIgZD1JZyh3KTtlLm11dGFibGVSZWFkTGFuZXN8PWQmZS5wZW5kaW5nTGFuZXN9Y2F0Y2gocSl7YyhmdW5jdGlvbigpe3Rocm93IHE7fSl9fSl9LFtiLGRdKTtIZShDLGMpJiZIZSh4LGIpJiZIZShBLGQpfHwoYT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTpufSxhLmRpc3BhdGNoPWw9T2guYmluZChudWxsLFIsYSksay5xdWV1ZT1hLGsuYmFzZVF1ZXVlPW51bGwsbj1NaChlLGIsYyksay5tZW1vaXplZFN0YXRlPWsuYmFzZVN0YXRlPW4pO3JldHVybiBufVxuZnVuY3Rpb24gUGgoYSxiLGMpe3ZhciBkPUloKCk7cmV0dXJuIE5oKGQsYSxiLGMpfWZ1bmN0aW9uIFFoKGEpe3ZhciBiPUhoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gUmgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ui51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxSLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKGEpe3ZhciBiPUhoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9ZnVuY3Rpb24gVGgoKXtyZXR1cm4gSWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIFVoKGEsYixjLGQpe3ZhciBlPUhoKCk7Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIFZoKGEsYixjLGQpe3ZhciBlPUloKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PVMpe3ZhciBnPVMubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmQmgoZCxnLmRlcHMpKXtSaChiLGMsZixkKTtyZXR1cm59fVIuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLGYsZCl9ZnVuY3Rpb24gV2goYSxiKXtyZXR1cm4gVWgoNTE2LDQsYSxiKX1mdW5jdGlvbiBYaChhLGIpe3JldHVybiBWaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFloKGEsYil7cmV0dXJuIFZoKDQsMixhLGIpfWZ1bmN0aW9uIFpoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19XG5mdW5jdGlvbiAkaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFZoKDQsMixaaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBhaSgpe31mdW5jdGlvbiBiaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBjaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGRpKGEsYil7dmFyIGM9ZWcoKTtnZyg5OD5jPzk4OmMsZnVuY3Rpb24oKXthKCEwKX0pO2dnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBjPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXthKCExKSxiKCl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWN9fSl9XG5mdW5jdGlvbiBPaChhLGIsYyl7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9e2xhbmU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIucGVuZGluZztudWxsPT09Zz9mLm5leHQ9ZjooZi5uZXh0PWcubmV4dCxnLm5leHQ9Zik7Yi5wZW5kaW5nPWY7Zz1hLmFsdGVybmF0ZTtpZihhPT09Unx8bnVsbCE9PWcmJmc9PT1SKXpoPXloPSEwO2Vsc2V7aWYoMD09PWEubGFuZXMmJihudWxsPT09Z3x8MD09PWcubGFuZXMpJiYoZz1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWcpKXRyeXt2YXIgaD1iLmxhc3RSZW5kZXJlZFN0YXRlLGs9ZyhoLGMpO2YuZWFnZXJSZWR1Y2VyPWc7Zi5lYWdlclN0YXRlPWs7aWYoSGUoayxoKSlyZXR1cm59Y2F0Y2gobCl7fWZpbmFsbHl7fUpnKGEsZSxkKX19XG52YXIgR2g9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOkFoLHVzZUNvbnRleHQ6QWgsdXNlRWZmZWN0OkFoLHVzZUltcGVyYXRpdmVIYW5kbGU6QWgsdXNlTGF5b3V0RWZmZWN0OkFoLHVzZU1lbW86QWgsdXNlUmVkdWNlcjpBaCx1c2VSZWY6QWgsdXNlU3RhdGU6QWgsdXNlRGVidWdWYWx1ZTpBaCx1c2VEZWZlcnJlZFZhbHVlOkFoLHVzZVRyYW5zaXRpb246QWgsdXNlTXV0YWJsZVNvdXJjZTpBaCx1c2VPcGFxdWVJZGVudGlmaWVyOkFoLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRGg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7SGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6V2gsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFVoKDQsMixaaC5iaW5kKG51bGwsXG5iLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVWgoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1IaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpTaCx1c2VTdGF0ZTpRaCx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9UWgoYSksYz1iWzBdLGQ9YlsxXTtXaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247XG53aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9UWgoITEpLGI9YVswXTthPWRpLmJpbmQobnVsbCxhWzFdKTtTaChhKTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtkLm1lbW9pemVkU3RhdGU9e3JlZnM6e2dldFNuYXBzaG90OmIsc2V0U25hcHNob3Q6bnVsbH0sc291cmNlOmEsc3Vic2NyaWJlOmN9O3JldHVybiBOaChkLGEsYixjKX0sdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe2lmKGxoKXt2YXIgYT0hMSxiPXVmKGZ1bmN0aW9uKCl7YXx8KGE9ITAsYyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSkpO3Rocm93IEVycm9yKHkoMzU1KSk7fSksYz1RaChiKVsxXTswPT09KFIubW9kZSYyKSYmKFIuZmxhZ3N8PTUxNixSaCg1LGZ1bmN0aW9uKCl7YyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSl9LFxudm9pZCAwLG51bGwpKTtyZXR1cm4gYn1iPVwicjpcIisodGYrKykudG9TdHJpbmcoMzYpO1FoKGIpO3JldHVybiBifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEVoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6S2gsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUtoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9S2goSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxGaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOkxoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBMaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1MaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUxoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBMaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sZWk9cmEuUmVhY3RDdXJyZW50T3duZXIsdWc9ITE7ZnVuY3Rpb24gZmkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9aZyhiLG51bGwsYyxkKTpZZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBnaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7dGcoYixlKTtkPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhamkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsa2koYSxiLGcsZCxlLGYpO2E9VmcoYy50eXBlLG51bGwsZCxiLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKDA9PT0oZSZmKSYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpKZSxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBoaShhLGIsZik7Yi5mbGFnc3w9MTthPVRnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24ga2koYSxiLGMsZCxlLGYpe2lmKG51bGwhPT1hJiZKZShhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYpaWYodWc9ITEsMCE9PShmJmUpKTAhPT0oYS5mbGFncyYxNjM4NCkmJih1Zz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLGhpKGEsYixmKTtyZXR1cm4gbGkoYSxiLGMsZCxmKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlfHxcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixjKTtlbHNlIGlmKDAhPT0oYyYxMDczNzQxODI0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLG51bGwhPT1mP2YuYmFzZUxhbmVzOmMpO2Vsc2UgcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YX0sbmkoYixhKSxudWxsO2Vsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLG5pKGIsZCk7ZmkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD0xMjh9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlKXt2YXIgZj1GZihjKT9EZjpNLmN1cnJlbnQ7Zj1FZihiLGYpO3RnKGIsZSk7Yz1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBwaShhLGIsYyxkLGUpe2lmKEZmKGMpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7dGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksTWcoYixjLGQpLE9nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXZnKGwpOihsPUZmKGMpP0RmOk0uY3VycmVudCxsPUVmKGIsbCkpO3ZhciBuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO0F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZOZyhiLGcsZCxsKTt3Zz0hMTt2YXIgcD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxwIT09a3x8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihHZyhiLGMsbixkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9d2d8fExnKGIsYyxoLGQscCxrLGwpKT8oQXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO3lnKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6bGcoYi50eXBlLGgpO2cucHJvcHM9bDtBPWIucGVuZGluZ1Byb3BzO3A9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9dmcoayk6KGs9RmYoYyk/RGY6TS5jdXJyZW50LGs9RWYoYixrKSk7dmFyIEM9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIEN8fFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1BfHxwIT09aykmJk5nKGIsZyxkLGspO3dnPSExO3A9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7aCE9PUF8fHAhPT14fHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyYmKEdnKGIsYyxDLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobD13Z3x8TGcoYixjLGwsZCxwLHgsaykpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fFxuaD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxkPSExKX1yZXR1cm4gcWkoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gcWkoYSxiLGMsZCxlLGYpe29pKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJktmKGIsYywhMSksaGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7ZWkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1ZZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVlnKGIsbnVsbCxoLGYpKTpmaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZLZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHJpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/SGYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmSGYoYSxiLmNvbnRleHQsITEpO2VoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBzaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5TGFuZTowfTtcbmZ1bmN0aW9uIHRpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPVAuY3VycmVudCxmPSExLGc7KGc9MCE9PShiLmZsYWdzJjY0KSl8fChnPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7Zz8oZj0hMCxiLmZsYWdzJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1kLmZhbGxiYWNrfHwhMD09PWQudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChlfD0xKTtJKFAsZSYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZC5mYWxsYmFjayYmcGgoYik7YT1kLmNoaWxkcmVuO2U9ZC5mYWxsYmFjaztpZihmKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LGIubWVtb2l6ZWRTdGF0ZT1zaSxhO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgZC51bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LFxuYi5tZW1vaXplZFN0YXRlPXNpLGIubGFuZXM9MzM1NTQ0MzIsYTtjPXZpKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmF9LGIubW9kZSxjLG51bGwpO2MucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9Y31pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXtpZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9OntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306XG57YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1hLm1vZGUsZj1hLmNoaWxkO2I9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpifTswPT09KGUmMikmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1iKTpmPXZpKGIsZSwwLG51bGwpO2M9WGcoYyxlLGQsbnVsbCk7Zi5yZXR1cm49YTtjLnJldHVybj1hO2Yuc2libGluZz1jO2EuY2hpbGQ9ZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHhpKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7YT1lLnNpYmxpbmc7Yz1UZyhlLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmN9KTswPT09KGIubW9kZSYyKSYmKGMubGFuZXM9ZCk7Yy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGEubmV4dEVmZmVjdD1udWxsLGEuZmxhZ3M9OCxiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1hKTtyZXR1cm4gYi5jaGlsZD1jfVxuZnVuY3Rpb24gd2koYSxiLGMsZCxlKXt2YXIgZj1iLm1vZGUsZz1hLmNoaWxkO2E9Zy5zaWJsaW5nO3ZhciBoPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Y307MD09PShmJjIpJiZiLmNoaWxkIT09Zz8oYz1iLmNoaWxkLGMuY2hpbGRMYW5lcz0wLGMucGVuZGluZ1Byb3BzPWgsZz1jLmxhc3RFZmZlY3QsbnVsbCE9PWc/KGIuZmlyc3RFZmZlY3Q9Yy5maXJzdEVmZmVjdCxiLmxhc3RFZmZlY3Q9ZyxnLm5leHRFZmZlY3Q9bnVsbCk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbCk6Yz1UZyhnLGgpO251bGwhPT1hP2Q9VGcoYSxkKTooZD1YZyhkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHlpKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO3NnKGEucmV0dXJuLGIpfVxuZnVuY3Rpb24gemkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIEFpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7ZmkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1QLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnlpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKXlpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoUCxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt6aShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1paChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9emkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnppKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7RGd8PWIubGFuZXM7aWYoMCE9PShjJmIuY2hpbGRMYW5lcykpe2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih5KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1UZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9VGcoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1yZXR1cm4gbnVsbH12YXIgQmksQ2ksRGksRWk7XG5CaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Q2k9ZnVuY3Rpb24oKXt9O1xuRGk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO2RoKGFoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGUpO2Q9ZWIoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPW0oe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1qZil9dmIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1cbmwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiYoY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8XG4oYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkcoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTpcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09R2E/ay50b1N0cmluZygpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixcbmMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtFaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtmdW5jdGlvbiBGaShhLGIpe2lmKCFsaClzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpcmgoYik/Yi5mbGFnc3w9NDpkLmh5ZHJhdGV8fChiLmZsYWdzfD0yNTYpO0NpKGIpO3JldHVybiBudWxsO2Nhc2UgNTpoaChiKTt2YXIgZT1kaChjaC5jdXJyZW50KTtjPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGkoYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09XG5iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO3JldHVybiBudWxsfWE9ZGgoYWguY3VycmVudCk7aWYocmgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2Rbd2ZdPWI7ZFt4Zl09Zjtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixkKTtHKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPFhlLmxlbmd0aDthKyspRyhYZVthXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZCk7RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxHKFwiaW52YWxpZFwiLGQpfXZiKGMsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWYuaGFzT3duUHJvcGVydHkoZykmJihlPWZbZ10sXCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGU/ZC50ZXh0Q29udGVudCE9PWUmJihhPVtcImNoaWxkcmVuXCIsZV0pOlwibnVtYmVyXCI9PT10eXBlb2YgZSYmZC50ZXh0Q29udGVudCE9PVwiXCIrZSYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2VdKTpjYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9ZSYmXCJvblNjcm9sbFwiPT09ZyYmRyhcInNjcm9sbFwiLGQpKTtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7Y2IoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1cbmpmKX1kPWE7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O2E9PT1rYi5odG1sJiYoYT1sYihjKSk7YT09PWtiLmh0bWw/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW3dmXT1iO2FbeGZdPWQ7QmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9d2IoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixhKTtHKFwiY2xvc2VcIixhKTtcbmU9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxYZS5sZW5ndGg7ZSsrKUcoWGVbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsYSk7RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1cbmdiKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH12YihjLGUpO3ZhciBoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/dGIoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm9iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1jfHxcIlwiIT09aykmJnBiKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZwYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGNhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkcoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZxYShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2NiKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1qZil9bWYoYyxkKSYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKUVpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO1xuYz1kaChjaC5jdXJyZW50KTtkaChhaC5jdXJyZW50KTtyaChiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW3dmXT1iLGQubm9kZVZhbHVlIT09YyYmKGIuZmxhZ3N8PTQpKTooZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbd2ZdPWIsYi5zdGF0ZU5vZGU9ZCl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7Yz0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJnJoKGIpOmM9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZihkJiYhYyYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KFAuY3VycmVudCYxKSkwPT09ViYmKFY9Myk7ZWxzZXtpZigwPT09Vnx8Mz09PVYpVj1cbjQ7bnVsbD09PVV8fDA9PT0oRGcmMTM0MjE3NzI3KSYmMD09PShIaSYxMzQyMTc3MjcpfHxJaShVLFcpfWlmKGR8fGMpYi5mbGFnc3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksQ2koYiksbnVsbD09PWEmJmNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYiksbnVsbDtjYXNlIDE3OnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAxOTpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Y9MCE9PShiLmZsYWdzJjY0KTtnPWQucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGYpRmkoZCwhMSk7ZWxzZXtpZigwIT09Vnx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9aWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTY0O0ZpKGQsITEpO2Y9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKGIudXBkYXRlUXVldWU9ZixiLmZsYWdzfD00KTtcbm51bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MixmLm5leHRFZmZlY3Q9bnVsbCxmLmZpcnN0RWZmZWN0PW51bGwsZi5sYXN0RWZmZWN0PW51bGwsZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLFxuZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztJKFAsUC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1hLnNpYmxpbmd9bnVsbCE9PWQudGFpbCYmTygpPkppJiYoYi5mbGFnc3w9NjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKX1lbHNle2lmKCFmKWlmKGE9aWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTY0LGY9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEZpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFsaClyZXR1cm4gYj1iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKk8oKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5KaSYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD1cbjY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMik7ZC5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGQubGFzdD1nKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9TygpLGMuc2libGluZz1udWxsLGI9UC5jdXJyZW50LEkoUCxmP2ImMXwyOmImMSksYyk6bnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT0obnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSkmJlwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIiE9PWQubW9kZSYmKGIuZmxhZ3N8PTQpLG51bGx9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBMaShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpGZihhLnR5cGUpJiZHZigpO3ZhciBiPWEuZmxhZ3M7cmV0dXJuIGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7Yj1hLmZsYWdzO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IoeSgyODUpKTthLmZsYWdzPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBoaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoUCksYj1hLmZsYWdzLGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChQKSxudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGEpLG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1RYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gTmkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE9pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFBpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1FpfHwoUWk9ITAsUmk9ZCk7TmkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBTaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7TmkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVRpP1RpPW5ldyBTZXQoW3RoaXNdKTpUaS5hZGQodGhpcyksTmkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9dmFyIFVpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O1xuZnVuY3Rpb24gVmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7V2koYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfWZ1bmN0aW9uIFhpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmZsYWdzJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6bGcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmIuZmxhZ3MmMjU2JiZxZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtyZXR1cm47Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBZaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97aWYoMz09PShhLnRhZyYzKSl7dmFyIGQ9YS5jcmVhdGU7YS5kZXN0cm95PWQoKX1hPWEubmV4dH13aGlsZShhIT09Yil9Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97dmFyIGU9YTtkPWUubmV4dDtlPWUudGFnOzAhPT0oZSY0KSYmMCE9PShlJjEpJiYoWmkoYyxhKSwkaShjLGEpKTthPWR9d2hpbGUoYSE9PWIpfXJldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtjLmZsYWdzJjQmJihudWxsPT09Yj9hLmNvbXBvbmVudERpZE1vdW50KCk6KGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6bGcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyksYS5jb21wb25lbnREaWRVcGRhdGUoZCxcbmIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKSkpO2I9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmRWcoYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1FZyhjLGIsYSl9cmV0dXJuO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmZsYWdzJjQmJm1mKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmQ2MoYykpKSk7XG5yZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpjYXNlIDIzOmNhc2UgMjQ6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gYWooYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZD1kLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnNldFByb3BlcnR5P2Quc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6ZC5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PXNiKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKCgyMyE9PWMudGFnJiYyNCE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHxjPT09YSkmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gYmooYSxiKXtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtNZi5vbkNvbW1pdEZpYmVyVW5tb3VudChMZixiKX1jYXRjaChmKXt9c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBjPWE9YS5uZXh0O2Rve3ZhciBkPWMsZT1kLmRlc3Ryb3k7ZD1kLnRhZztpZih2b2lkIDAhPT1lKWlmKDAhPT0oZCY0KSlaaShiLGMpO2Vsc2V7ZD1iO3RyeXtlKCl9Y2F0Y2goZil7V2koZCxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWEpfWJyZWFrO2Nhc2UgMTpWaShiKTthPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXthLnByb3BzPWIubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7V2koYixcbmYpfWJyZWFrO2Nhc2UgNTpWaShiKTticmVhaztjYXNlIDQ6Y2ooYSxiKX19ZnVuY3Rpb24gZGooYSl7YS5hbHRlcm5hdGU9bnVsbDthLmNoaWxkPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnJldHVybj1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBlaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIGZqKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKGVqKGIpKWJyZWFrIGE7Yj1iLnJldHVybn10aHJvdyBFcnJvcih5KDE2MCkpO312YXIgYz1iO2I9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDE2MSkpO31jLmZsYWdzJjE2JiYocGIoYixcIlwiKSxjLmZsYWdzJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8ZWooYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5mbGFncyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PVxuYy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZmxhZ3MmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9naihhLGMsYik6aGooYSxjLGIpfVxuZnVuY3Rpb24gZ2ooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPWpmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspZ2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gaGooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihoaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWhqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGNqKGEsYil7Zm9yKHZhciBjPWIsZD0hMSxlLGY7Oyl7aWYoIWQpe2Q9Yy5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1kKXRocm93IEVycm9yKHkoMTYwKSk7ZT1kLnN0YXRlTm9kZTtzd2l0Y2goZC50YWcpe2Nhc2UgNTpmPSExO2JyZWFrIGE7Y2FzZSAzOmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIDQ6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhfWQ9ZC5yZXR1cm59ZD0hMH1pZig1PT09Yy50YWd8fDY9PT1jLnRhZyl7YTpmb3IodmFyIGc9YSxoPWMsaz1oOzspaWYoYmooZyxrKSxudWxsIT09ay5jaGlsZCYmNCE9PWsudGFnKWsuY2hpbGQucmV0dXJuPWssaz1rLmNoaWxkO2Vsc2V7aWYoaz09PWgpYnJlYWsgYTtmb3IoO251bGw9PT1rLnNpYmxpbmc7KXtpZihudWxsPT09ay5yZXR1cm58fGsucmV0dXJuPT09aClicmVhayBhO2s9ay5yZXR1cm59ay5zaWJsaW5nLnJldHVybj1rLnJldHVybjtrPWsuc2libGluZ31mPyhnPWUsaD1jLnN0YXRlTm9kZSxcbjg9PT1nLm5vZGVUeXBlP2cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChoKTpnLnJlbW92ZUNoaWxkKGgpKTplLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1jLnRhZyl7aWYobnVsbCE9PWMuY2hpbGQpe2U9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztmPSEwO2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKGJqKGEsYyksbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJuOzQ9PT1jLnRhZyYmKGQ9ITEpfWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gaWooYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOnZhciBjPWIudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG8gMz09PShkLnRhZyYzKSYmKGE9ZC5kZXN0cm95LGQuZGVzdHJveT12b2lkIDAsdm9pZCAwIT09YSYmYSgpKSxkPWQubmV4dDt3aGlsZShkIT09Yyl9cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7ZD1iLm1lbW9pemVkUHJvcHM7dmFyIGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbeGZdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJiRhKGMsZCk7d2IoYSxlKTtiPXdiKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPVxuMil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP3RiKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9vYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/cGIoYyxoKTpxYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6YWIoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGY9ZC52YWx1ZSxudWxsIT1mP2ZiKGMsISFkLm11bHRpcGxlLGYsITEpOmEhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9mYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1cbmIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmM9Yi5zdGF0ZU5vZGU7Yy5oeWRyYXRlJiYoYy5oeWRyYXRlPSExLENjKGMuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGwhPT1iLm1lbW9pemVkU3RhdGUmJihqaj1PKCksYWooYi5jaGlsZCwhMCkpO2tqKGIpO3JldHVybjtjYXNlIDE5OmtqKGIpO3JldHVybjtjYXNlIDE3OnJldHVybjtjYXNlIDIzOmNhc2UgMjQ6YWooYixudWxsIT09Yi5tZW1vaXplZFN0YXRlKTtyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9ZnVuY3Rpb24ga2ooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgVWkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1sai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIG1qKGEsYil7cmV0dXJuIG51bGwhPT1hJiYoYT1hLm1lbW9pemVkU3RhdGUsbnVsbD09PWF8fG51bGwhPT1hLmRlaHlkcmF0ZWQpPyhiPWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YiYmbnVsbD09PWIuZGVoeWRyYXRlZCk6ITF9dmFyIG5qPU1hdGguY2VpbCxvaj1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHBqPXJhLlJlYWN0Q3VycmVudE93bmVyLFg9MCxVPW51bGwsWT1udWxsLFc9MCxxaj0wLHJqPUJmKDApLFY9MCxzaj1udWxsLHRqPTAsRGc9MCxIaT0wLHVqPTAsdmo9bnVsbCxqaj0wLEppPUluZmluaXR5O2Z1bmN0aW9uIHdqKCl7Smk9TygpKzUwMH12YXIgWj1udWxsLFFpPSExLFJpPW51bGwsVGk9bnVsbCx4aj0hMSx5aj1udWxsLHpqPTkwLEFqPVtdLEJqPVtdLENqPW51bGwsRGo9MCxFaj1udWxsLEZqPS0xLEdqPTAsSGo9MCxJaj1udWxsLEpqPSExO2Z1bmN0aW9uIEhnKCl7cmV0dXJuIDAhPT0oWCY0OCk/TygpOi0xIT09Rmo/Rmo6Rmo9TygpfVxuZnVuY3Rpb24gSWcoYSl7YT1hLm1vZGU7aWYoMD09PShhJjIpKXJldHVybiAxO2lmKDA9PT0oYSY0KSlyZXR1cm4gOTk9PT1lZygpPzE6MjswPT09R2omJihHaj10aik7aWYoMCE9PWtnLnRyYW5zaXRpb24pezAhPT1IaiYmKEhqPW51bGwhPT12aj92ai5wZW5kaW5nTGFuZXM6MCk7YT1Hajt2YXIgYj00MTg2MTEyJn5IajtiJj0tYjswPT09YiYmKGE9NDE4NjExMiZ+YSxiPWEmLWEsMD09PWImJihiPTgxOTIpKTtyZXR1cm4gYn1hPWVnKCk7MCE9PShYJjQpJiY5OD09PWE/YT1YYygxMixHaik6KGE9U2MoYSksYT1YYyhhLEdqKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZyhhLGIsYyl7aWYoNTA8RGopdGhyb3cgRGo9MCxFaj1udWxsLEVycm9yKHkoMTg1KSk7YT1LaihhLGIpO2lmKG51bGw9PT1hKXJldHVybiBudWxsOyRjKGEsYixjKTthPT09VSYmKEhpfD1iLDQ9PT1WJiZJaShhLFcpKTt2YXIgZD1lZygpOzE9PT1iPzAhPT0oWCY4KSYmMD09PShYJjQ4KT9MaihhKTooTWooYSxjKSwwPT09WCYmKHdqKCksaWcoKSkpOigwPT09KFgmNCl8fDk4IT09ZCYmOTkhPT1kfHwobnVsbD09PUNqP0NqPW5ldyBTZXQoW2FdKTpDai5hZGQoYSkpLE1qKGEsYykpO3ZqPWF9ZnVuY3Rpb24gS2ooYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfVxuZnVuY3Rpb24gTWooYSxiKXtmb3IodmFyIGM9YS5jYWxsYmFja05vZGUsZD1hLnN1c3BlbmRlZExhbmVzLGU9YS5waW5nZWRMYW5lcyxmPWEuZXhwaXJhdGlvblRpbWVzLGc9YS5wZW5kaW5nTGFuZXM7MDxnOyl7dmFyIGg9MzEtVmMoZyksaz0xPDxoLGw9ZltoXTtpZigtMT09PWwpe2lmKDA9PT0oayZkKXx8MCE9PShrJmUpKXtsPWI7UmMoayk7dmFyIG49RjtmW2hdPTEwPD1uP2wrMjUwOjY8PW4/bCs1RTM6LTF9fWVsc2UgbDw9YiYmKGEuZXhwaXJlZExhbmVzfD1rKTtnJj1+a31kPVVjKGEsYT09PVU/VzowKTtiPUY7aWYoMD09PWQpbnVsbCE9PWMmJihjIT09WmYmJlBmKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTApO2Vsc2V7aWYobnVsbCE9PWMpe2lmKGEuY2FsbGJhY2tQcmlvcml0eT09PWIpcmV0dXJuO2MhPT1aZiYmUGYoYyl9MTU9PT1iPyhjPUxqLmJpbmQobnVsbCxhKSxudWxsPT09YWc/KGFnPVtjXSxiZz1PZihVZixqZykpOmFnLnB1c2goYyksXG5jPVpmKToxND09PWI/Yz1oZyg5OSxMai5iaW5kKG51bGwsYSkpOihjPVRjKGIpLGM9aGcoYyxOai5iaW5kKG51bGwsYSkpKTthLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIE5qKGEpe0ZqPS0xO0hqPUdqPTA7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBiPWEuY2FsbGJhY2tOb2RlO2lmKE9qKCkmJmEuY2FsbGJhY2tOb2RlIT09YilyZXR1cm4gbnVsbDt2YXIgYz1VYyhhLGE9PT1VP1c6MCk7aWYoMD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9Yzt2YXIgZT1YO1h8PTE2O3ZhciBmPVBqKCk7aWYoVSE9PWF8fFchPT1kKXdqKCksUWooYSxkKTtkbyB0cnl7UmooKTticmVha31jYXRjaChoKXtTaihhLGgpfXdoaWxlKDEpO3FnKCk7b2ouY3VycmVudD1mO1g9ZTtudWxsIT09WT9kPTA6KFU9bnVsbCxXPTAsZD1WKTtpZigwIT09KHRqJkhpKSlRaihhLDApO2Vsc2UgaWYoMCE9PWQpezI9PT1kJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGM9V2MoYSksMCE9PWMmJihkPVRqKGEsYykpKTtpZigxPT09ZCl0aHJvdyBiPXNqLFFqKGEsMCksSWkoYSxjKSxNaihhLE8oKSksYjthLmZpbmlzaGVkV29yaz1cbmEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWM7c3dpdGNoKGQpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IoeSgzNDUpKTtjYXNlIDI6VWooYSk7YnJlYWs7Y2FzZSAzOklpKGEsYyk7aWYoKGMmNjI5MTQ1NjApPT09YyYmKGQ9amorNTAwLU8oKSwxMDxkKSl7aWYoMCE9PVVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmMpIT09Yyl7SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxkKTticmVha31VaihhKTticmVhaztjYXNlIDQ6SWkoYSxjKTtpZigoYyY0MTg2MTEyKT09PWMpYnJlYWs7ZD1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxjOyl7dmFyIGc9MzEtVmMoYyk7Zj0xPDxnO2c9ZFtnXTtnPmUmJihlPWcpO2MmPX5mfWM9ZTtjPU8oKS1jO2M9KDEyMD5jPzEyMDo0ODA+Yz80ODA6MTA4MD5jPzEwODA6MTkyMD5jPzE5MjA6M0UzPmM/M0UzOjQzMjA+XG5jPzQzMjA6MTk2MCpuaihjLzE5NjApKS1jO2lmKDEwPGMpe2EudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksYyk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA1OlVqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMjkpKTt9fU1qKGEsTygpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1iP05qLmJpbmQobnVsbCxhKTpudWxsfWZ1bmN0aW9uIElpKGEsYil7YiY9fnVqO2ImPX5IaTthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLVZjKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1cbmZ1bmN0aW9uIExqKGEpe2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTtPaigpO2lmKGE9PT1VJiYwIT09KGEuZXhwaXJlZExhbmVzJlcpKXt2YXIgYj1XO3ZhciBjPVRqKGEsYik7MCE9PSh0aiZIaSkmJihiPVVjKGEsYiksYz1UaihhLGIpKX1lbHNlIGI9VWMoYSwwKSxjPVRqKGEsYik7MCE9PWEudGFnJiYyPT09YyYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxiPVdjKGEpLDAhPT1iJiYoYz1UaihhLGIpKSk7aWYoMT09PWMpdGhyb3cgYz1zaixRaihhLDApLElpKGEsYiksTWooYSxPKCkpLGM7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtVaihhKTtNaihhLE8oKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBWaigpe2lmKG51bGwhPT1Dail7dmFyIGE9Q2o7Q2o9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSl7YS5leHBpcmVkTGFuZXN8PTI0JmEucGVuZGluZ0xhbmVzO01qKGEsTygpKX0pfWlnKCl9ZnVuY3Rpb24gV2ooYSxiKXt2YXIgYz1YO1h8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gWGooYSxiKXt2YXIgYz1YO1gmPS0yO1h8PTg7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gbmkoYSxiKXtJKHJqLHFqKTtxanw9Yjt0anw9Yn1mdW5jdGlvbiBLaSgpe3FqPXJqLmN1cnJlbnQ7SChyail9XG5mdW5jdGlvbiBRaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxwZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZHZigpO2JyZWFrO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2JyZWFrO2Nhc2UgNTpoaChkKTticmVhaztjYXNlIDQ6ZmgoKTticmVhaztjYXNlIDEzOkgoUCk7YnJlYWs7Y2FzZSAxOTpIKFApO2JyZWFrO2Nhc2UgMTA6cmcoZCk7YnJlYWs7Y2FzZSAyMzpjYXNlIDI0OktpKCl9Yz1jLnJldHVybn1VPWE7WT1UZyhhLmN1cnJlbnQsbnVsbCk7Vz1xaj10aj1iO1Y9MDtzaj1udWxsO3VqPUhpPURnPTB9XG5mdW5jdGlvbiBTaihhLGIpe2Rve3ZhciBjPVk7dHJ5e3FnKCk7dmguY3VycmVudD1HaDtpZih5aCl7Zm9yKHZhciBkPVIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9eWg9ITF9eGg9MDtUPVM9Uj1udWxsO3poPSExO3BqLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtWPTE7c2o9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1XO2guZmxhZ3N8PTIwNDg7aC5maXJzdEVmZmVjdD1oLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rO2lmKDA9PT0oaC5tb2RlJjIpKXt2YXIgbj1oLmFsdGVybmF0ZTtuPyhoLnVwZGF0ZVF1ZXVlPW4udXBkYXRlUXVldWUsaC5tZW1vaXplZFN0YXRlPW4ubWVtb2l6ZWRTdGF0ZSxoLmxhbmVzPW4ubGFuZXMpOlxuKGgudXBkYXRlUXVldWU9bnVsbCxoLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIEE9MCE9PShQLmN1cnJlbnQmMSkscD1nO2Rve3ZhciBDO2lmKEM9MTM9PT1wLnRhZyl7dmFyIHg9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT14KUM9bnVsbCE9PXguZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciB3PXAubWVtb2l6ZWRQcm9wcztDPXZvaWQgMD09PXcuZmFsbGJhY2s/ITE6ITAhPT13LnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOkE/ITE6ITB9fWlmKEMpe3ZhciB6PXAudXBkYXRlUXVldWU7aWYobnVsbD09PXope3ZhciB1PW5ldyBTZXQ7dS5hZGQobCk7cC51cGRhdGVRdWV1ZT11fWVsc2Ugei5hZGQobCk7aWYoMD09PShwLm1vZGUmMikpe3AuZmxhZ3N8PTY0O2guZmxhZ3N8PTE2Mzg0O2guZmxhZ3MmPS0yOTgxO2lmKDE9PT1oLnRhZylpZihudWxsPT09aC5hbHRlcm5hdGUpaC50YWc9MTc7ZWxzZXt2YXIgdD16ZygtMSwxKTt0LnRhZz0yO0FnKGgsdCl9aC5sYW5lc3w9MTticmVhayBhfWs9XG52b2lkIDA7aD1iO3ZhciBxPWYucGluZ0NhY2hlO251bGw9PT1xPyhxPWYucGluZ0NhY2hlPW5ldyBPaSxrPW5ldyBTZXQscS5zZXQobCxrKSk6KGs9cS5nZXQobCksdm9pZCAwPT09ayYmKGs9bmV3IFNldCxxLnNldChsLGspKSk7aWYoIWsuaGFzKGgpKXtrLmFkZChoKTt2YXIgdj1Zai5iaW5kKG51bGwsZixsLGgpO2wudGhlbih2LHYpfXAuZmxhZ3N8PTQwOTY7cC5sYW5lcz1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7az1FcnJvcigoUmEoaC50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiKX01IT09ViYmKFY9Mik7az1NaShrLGgpO3A9XG5nO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOmY9aztwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEo9UGkocCxmLGIpO0JnKHAsSik7YnJlYWsgYTtjYXNlIDE6Zj1rO3ZhciBLPXAudHlwZSxRPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5mbGFncyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgSy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1RJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgUS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhRKSkpKXtwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEw9U2kocCxmLGIpO0JnKHAsTCk7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WmooYyl9Y2F0Y2godmEpe2I9dmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIFBqKCl7dmFyIGE9b2ouY3VycmVudDtvai5jdXJyZW50PUdoO3JldHVybiBudWxsPT09YT9HaDphfWZ1bmN0aW9uIFRqKGEsYil7dmFyIGM9WDtYfD0xNjt2YXIgZD1QaigpO1U9PT1hJiZXPT09Ynx8UWooYSxiKTtkbyB0cnl7YWsoKTticmVha31jYXRjaChlKXtTaihhLGUpfXdoaWxlKDEpO3FnKCk7WD1jO29qLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcih5KDI2MSkpO1U9bnVsbDtXPTA7cmV0dXJuIFZ9ZnVuY3Rpb24gYWsoKXtmb3IoO251bGwhPT1ZOyliayhZKX1mdW5jdGlvbiBSaigpe2Zvcig7bnVsbCE9PVkmJiFRZigpOyliayhZKX1mdW5jdGlvbiBiayhhKXt2YXIgYj1jayhhLmFsdGVybmF0ZSxhLHFqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/WmooYSk6WT1iO3BqLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFpqKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMjA0OCkpe2M9R2koYyxiLHFqKTtpZihudWxsIT09Yyl7WT1jO3JldHVybn1jPWI7aWYoMjQhPT1jLnRhZyYmMjMhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8MCE9PShxaiYxMDczNzQxODI0KXx8MD09PShjLm1vZGUmNCkpe2Zvcih2YXIgZD0wLGU9Yy5jaGlsZDtudWxsIT09ZTspZHw9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZT1lLnNpYmxpbmc7Yy5jaGlsZExhbmVzPWR9bnVsbCE9PWEmJjA9PT0oYS5mbGFncyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxudWxsIT09Yi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QpLDE8Yi5mbGFncyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iOmEuZmlyc3RFZmZlY3Q9YixhLmxhc3RFZmZlY3Q9YikpfWVsc2V7Yz1MaShiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MjA0NztZPWM7cmV0dXJufW51bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmZsYWdzfD0yMDQ4KX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVYmJihWPTUpfWZ1bmN0aW9uIFVqKGEpe3ZhciBiPWVnKCk7Z2coOTksZGsuYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZGsoYSxiKXtkbyBPaigpO3doaWxlKG51bGwhPT15aik7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih5KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7dmFyIGQ9Yy5sYW5lc3xjLmNoaWxkTGFuZXMsZT1kLGY9YS5wZW5kaW5nTGFuZXMmfmU7YS5wZW5kaW5nTGFuZXM9ZTthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1lO2EubXV0YWJsZVJlYWRMYW5lcyY9ZTthLmVudGFuZ2xlZExhbmVzJj1lO2U9YS5lbnRhbmdsZW1lbnRzO2Zvcih2YXIgZz1hLmV2ZW50VGltZXMsaD1hLmV4cGlyYXRpb25UaW1lczswPGY7KXt2YXIgaz0zMS1WYyhmKSxsPTE8PGs7ZVtrXT0wO2dba109LTE7aFtrXT0tMTtmJj1+bH1udWxsIT09XG5DaiYmMD09PShkJjI0KSYmQ2ouaGFzKGEpJiZDai5kZWxldGUoYSk7YT09PVUmJihZPVU9bnVsbCxXPTApOzE8Yy5mbGFncz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGQ9Yy5maXJzdEVmZmVjdCk6ZD1jOmQ9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZCl7ZT1YO1h8PTMyO3BqLmN1cnJlbnQ9bnVsbDtrZj1mZDtnPU5lKCk7aWYoT2UoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTppZihoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdywobD1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKSkmJjAhPT1sLnJhbmdlQ291bnQpe2g9bC5hbmNob3JOb2RlO2Y9bC5hbmNob3JPZmZzZXQ7az1sLmZvY3VzTm9kZTtsPWwuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsay5ub2RlVHlwZX1jYXRjaCh2YSl7aD1udWxsO1xuYnJlYWsgYX12YXIgbj0wLEE9LTEscD0tMSxDPTAseD0wLHc9Zyx6PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdTs7KXt3IT09aHx8MCE9PWYmJjMhPT13Lm5vZGVUeXBlfHwoQT1uK2YpO3chPT1rfHwwIT09bCYmMyE9PXcubm9kZVR5cGV8fChwPW4rbCk7Mz09PXcubm9kZVR5cGUmJihuKz13Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odT13LmZpcnN0Q2hpbGQpKWJyZWFrO3o9dzt3PXV9Zm9yKDs7KXtpZih3PT09ZylicmVhayBiO3o9PT1oJiYrK0M9PT1mJiYoQT1uKTt6PT09ayYmKyt4PT09bCYmKHA9bik7aWYobnVsbCE9PSh1PXcubmV4dFNpYmxpbmcpKWJyZWFrO3c9ejt6PXcucGFyZW50Tm9kZX13PXV9aD0tMT09PUF8fC0xPT09cD9udWxsOntzdGFydDpBLGVuZDpwfX1lbHNlIGg9bnVsbDtoPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9bnVsbDtsZj17Zm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtJaj1udWxsO0pqPSExO1o9ZDtkbyB0cnl7ZWsoKX1jYXRjaCh2YSl7aWYobnVsbD09PVxuWil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtJaj1udWxsO1o9ZDtkbyB0cnl7Zm9yKGc9YTtudWxsIT09Wjspe3ZhciB0PVouZmxhZ3M7dCYxNiYmcGIoWi5zdGF0ZU5vZGUsXCJcIik7aWYodCYxMjgpe3ZhciBxPVouYWx0ZXJuYXRlO2lmKG51bGwhPT1xKXt2YXIgdj1xLnJlZjtudWxsIT09diYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB2P3YobnVsbCk6di5jdXJyZW50PW51bGwpfX1zd2l0Y2godCYxMDM4KXtjYXNlIDI6ZmooWik7Wi5mbGFncyY9LTM7YnJlYWs7Y2FzZSA2OmZqKFopO1ouZmxhZ3MmPS0zO2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgMTAyNDpaLmZsYWdzJj0tMTAyNTticmVhaztjYXNlIDEwMjg6Wi5mbGFncyY9LTEwMjU7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA0OmlqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgODpoPVo7Y2ooZyxoKTt2YXIgSj1oLmFsdGVybmF0ZTtkaihoKTtudWxsIT09XG5KJiZkaihKKX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO3Y9bGY7cT1OZSgpO3Q9di5mb2N1c2VkRWxlbTtnPXYuc2VsZWN0aW9uUmFuZ2U7aWYocSE9PXQmJnQmJnQub3duZXJEb2N1bWVudCYmTWUodC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx0KSl7bnVsbCE9PWcmJk9lKHQpJiYocT1nLnN0YXJ0LHY9Zy5lbmQsdm9pZCAwPT09diYmKHY9cSksXCJzZWxlY3Rpb25TdGFydFwiaW4gdD8odC5zZWxlY3Rpb25TdGFydD1xLHQuc2VsZWN0aW9uRW5kPU1hdGgubWluKHYsdC52YWx1ZS5sZW5ndGgpKToodj0ocT10Lm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmcS5kZWZhdWx0Vmlld3x8d2luZG93LHYuZ2V0U2VsZWN0aW9uJiYodj12LmdldFNlbGVjdGlvbigpLGg9dC50ZXh0Q29udGVudC5sZW5ndGgsSj1NYXRoLm1pbihnLnN0YXJ0LGgpLGc9dm9pZCAwPT09XG5nLmVuZD9KOk1hdGgubWluKGcuZW5kLGgpLCF2LmV4dGVuZCYmSj5nJiYoaD1nLGc9SixKPWgpLGg9TGUodCxKKSxmPUxlKHQsZyksaCYmZiYmKDEhPT12LnJhbmdlQ291bnR8fHYuYW5jaG9yTm9kZSE9PWgubm9kZXx8di5hbmNob3JPZmZzZXQhPT1oLm9mZnNldHx8di5mb2N1c05vZGUhPT1mLm5vZGV8fHYuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkmJihxPXEuY3JlYXRlUmFuZ2UoKSxxLnNldFN0YXJ0KGgubm9kZSxoLm9mZnNldCksdi5yZW1vdmVBbGxSYW5nZXMoKSxKPmc/KHYuYWRkUmFuZ2UocSksdi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KHEuc2V0RW5kKGYubm9kZSxmLm9mZnNldCksdi5hZGRSYW5nZShxKSkpKSkpO3E9W107Zm9yKHY9dDt2PXYucGFyZW50Tm9kZTspMT09PXYubm9kZVR5cGUmJnEucHVzaCh7ZWxlbWVudDp2LGxlZnQ6di5zY3JvbGxMZWZ0LHRvcDp2LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiB0LmZvY3VzJiZ0LmZvY3VzKCk7Zm9yKHQ9XG4wO3Q8cS5sZW5ndGg7dCsrKXY9cVt0XSx2LmVsZW1lbnQuc2Nyb2xsTGVmdD12LmxlZnQsdi5lbGVtZW50LnNjcm9sbFRvcD12LnRvcH1mZD0hIWtmO2xmPWtmPW51bGw7YS5jdXJyZW50PWM7Wj1kO2RvIHRyeXtmb3IodD1hO251bGwhPT1aOyl7dmFyIEs9Wi5mbGFncztLJjM2JiZZaSh0LFouYWx0ZXJuYXRlLFopO2lmKEsmMTI4KXtxPXZvaWQgMDt2YXIgUT1aLnJlZjtpZihudWxsIT09USl7dmFyIEw9Wi5zdGF0ZU5vZGU7c3dpdGNoKFoudGFnKXtjYXNlIDU6cT1MO2JyZWFrO2RlZmF1bHQ6cT1MfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBRP1EocSk6US5jdXJyZW50PXF9fVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7Wj1udWxsOyRmKCk7WD1lfWVsc2UgYS5jdXJyZW50PWM7aWYoeGopeGo9ITEseWo9YSx6aj1iO2Vsc2UgZm9yKFo9ZDtudWxsIT09WjspYj1cbloubmV4dEVmZmVjdCxaLm5leHRFZmZlY3Q9bnVsbCxaLmZsYWdzJjgmJihLPVosSy5zaWJsaW5nPW51bGwsSy5zdGF0ZU5vZGU9bnVsbCksWj1iO2Q9YS5wZW5kaW5nTGFuZXM7MD09PWQmJihUaT1udWxsKTsxPT09ZD9hPT09RWo/RGorKzooRGo9MCxFaj1hKTpEaj0wO2M9Yy5zdGF0ZU5vZGU7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7TWYub25Db21taXRGaWJlclJvb3QoTGYsYyx2b2lkIDAsNjQ9PT0oYy5jdXJyZW50LmZsYWdzJjY0KSl9Y2F0Y2godmEpe31NaihhLE8oKSk7aWYoUWkpdGhyb3cgUWk9ITEsYT1SaSxSaT1udWxsLGE7aWYoMCE9PShYJjgpKXJldHVybiBudWxsO2lnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBlaygpe2Zvcig7bnVsbCE9PVo7KXt2YXIgYT1aLmFsdGVybmF0ZTtKanx8bnVsbD09PUlqfHwoMCE9PShaLmZsYWdzJjgpP2RjKFosSWopJiYoSmo9ITApOjEzPT09Wi50YWcmJm1qKGEsWikmJmRjKFosSWopJiYoSmo9ITApKTt2YXIgYj1aLmZsYWdzOzAhPT0oYiYyNTYpJiZYaShhLFopOzA9PT0oYiY1MTIpfHx4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKTtaPVoubmV4dEVmZmVjdH19ZnVuY3Rpb24gT2ooKXtpZig5MCE9PXpqKXt2YXIgYT05Nzx6aj85Nzp6ajt6aj05MDtyZXR1cm4gZ2coYSxmayl9cmV0dXJuITF9ZnVuY3Rpb24gJGkoYSxiKXtBai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9ZnVuY3Rpb24gWmkoYSxiKXtCai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9XG5mdW5jdGlvbiBmaygpe2lmKG51bGw9PT15ailyZXR1cm4hMTt2YXIgYT15ajt5aj1udWxsO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMzEpKTt2YXIgYj1YO1h8PTMyO3ZhciBjPUJqO0JqPVtdO2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7dmFyIGU9Y1tkXSxmPWNbZCsxXSxnPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKXRyeXtnKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1jPUFqO0FqPVtdO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKz0yKXtlPWNbZF07Zj1jW2QrMV07dHJ5e3ZhciBoPWUuY3JlYXRlO2UuZGVzdHJveT1oKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1mb3IoaD1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWg7KWE9aC5uZXh0RWZmZWN0LGgubmV4dEVmZmVjdD1udWxsLGguZmxhZ3MmOCYmKGguc2libGluZz1cbm51bGwsaC5zdGF0ZU5vZGU9bnVsbCksaD1hO1g9YjtpZygpO3JldHVybiEwfWZ1bmN0aW9uIGdrKGEsYixjKXtiPU1pKGMsYik7Yj1QaShhLGIsMSk7QWcoYSxiKTtiPUhnKCk7YT1LaihhLDEpO251bGwhPT1hJiYoJGMoYSwxLGIpLE1qKGEsYikpfVxuZnVuY3Rpb24gV2koYSxiKXtpZigzPT09YS50YWcpZ2soYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtnayhjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpe2E9TWkoYixhKTt2YXIgZT1TaShjLGEsMSk7QWcoYyxlKTtlPUhnKCk7Yz1LaihjLDEpO2lmKG51bGwhPT1jKSRjKGMsMSxlKSxNaihjLGUpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXRyeXtkLmNvbXBvbmVudERpZENhdGNoKGIsYSl9Y2F0Y2goZil7fWJyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIFlqKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1IZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztVPT09YSYmKFcmYyk9PT1jJiYoND09PVZ8fDM9PT1WJiYoVyY2MjkxNDU2MCk9PT1XJiY1MDA+TygpLWpqP1FqKGEsMCk6dWp8PWMpO01qKGEsYil9ZnVuY3Rpb24gbGooYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1hLm1vZGUsMD09PShiJjIpP2I9MTowPT09KGImNCk/Yj05OT09PWVnKCk/MToyOigwPT09R2omJihHaj10aiksYj1ZYyg2MjkxNDU2MCZ+R2opLDA9PT1iJiYoYj00MTk0MzA0KSkpO2M9SGcoKTthPUtqKGEsYik7bnVsbCE9PWEmJigkYyhhLGIsYyksTWooYSxjKSl9dmFyIGNrO1xuY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIubGFuZXM7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fE4uY3VycmVudCl1Zz0hMDtlbHNlIGlmKDAhPT0oYyZkKSl1Zz0wIT09KGEuZmxhZ3MmMTYzODQpPyEwOiExO2Vsc2V7dWc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6cmkoYik7c2goKTticmVhaztjYXNlIDU6Z2goYik7YnJlYWs7Y2FzZSAxOkZmKGIudHlwZSkmJkpmKGIpO2JyZWFrO2Nhc2UgNDplaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7dmFyIGU9Yi50eXBlLl9jb250ZXh0O0kobWcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiB0aShhLGIsYyk7SShQLFAuY3VycmVudCYxKTtiPWhpKGEsYixjKTtyZXR1cm4gbnVsbCE9PVxuYj9iLnNpYmxpbmc6bnVsbH1JKFAsUC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmNjQpKXtpZihkKXJldHVybiBBaShhLGIsYyk7Yi5mbGFnc3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtJKFAsUC5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBiLmxhbmVzPTAsbWkoYSxiLGMpfXJldHVybiBoaShhLGIsYyl9ZWxzZSB1Zz0hMTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUVmKGIsTS5jdXJyZW50KTt0ZyhiLGMpO2U9Q2gobnVsbCxiLGQsYSxlLGMpO2IuZmxhZ3N8PTE7aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEZmKGQpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt4ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmR2coYixkLGcsYSk7ZS51cGRhdGVyPUtnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbHM9YjtPZyhiLGQsYSxjKTtiPXFpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLGZpKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTthOntudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTtcbmE9Yi5wZW5kaW5nUHJvcHM7Zj1lLl9pbml0O2U9ZihlLl9wYXlsb2FkKTtiLnR5cGU9ZTtmPWIudGFnPWhrKGUpO2E9bGcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9bGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPXBpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9Z2kobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1paShudWxsLGIsZSxsZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHkoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSkscGkoYSxiLGQsZSxjKTtjYXNlIDM6cmkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih5KDI4MikpO1xuZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lnKGEsYik7Q2coYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlzaCgpLGI9aGkoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihmPWUuaHlkcmF0ZSlraD1yZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLGpoPWIsZj1saD0hMDtpZihmKXthPWUubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YTtpZihudWxsIT1hKWZvcihlPTA7ZTxhLmxlbmd0aDtlKz0yKWY9YVtlXSxmLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWFbZSsxXSx0aC5wdXNoKGYpO2M9WmcoYixudWxsLGQsYyk7Zm9yKGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8MTAyNCxjPWMuc2libGluZ31lbHNlIGZpKGEsYixkLGMpLHNoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZ2goYiksbnVsbD09PWEmJlxucGgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixuZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmbmYoZCxmKSYmKGIuZmxhZ3N8PTE2KSxvaShhLGIpLGZpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmcGgoYiksbnVsbDtjYXNlIDEzOnJldHVybiB0aShhLGIsYyk7Y2FzZSA0OnJldHVybiBlaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1ZZyhiLG51bGwsZCxjKTpmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksZ2koYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKG1nLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9SGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIU4uY3VycmVudCl7Yj1oaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09ayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1cbmsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD16ZygtMSxjJi1jKSxsLnRhZz0yLEFnKGgsbCkpO2gubGFuZXN8PWM7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmKGwubGFuZXN8PWMpO3NnKGgucmV0dXJuLGMpO2subGFuZXN8PWM7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z31maShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbix0ZyhiLGMpLGU9dmcoZSxcbmYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5mbGFnc3w9MSxmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9bGcoZSxiLnBlbmRpbmdQcm9wcyksZj1sZyhlLnR5cGUsZiksaWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGtpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLGIudGFnPTEsRmYoZCk/KGE9ITAsSmYoYikpOmE9ITEsdGcoYixjKSxNZyhiLGQsZSksT2coYixkLGUsYykscWkobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBBaShhLGIsYyk7Y2FzZSAyMzpyZXR1cm4gbWkoYSxiLGMpO2Nhc2UgMjQ6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO1xufTtmdW5jdGlvbiBpayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZmxhZ3M9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gbmgoYSxiLGMsZCl7cmV0dXJuIG5ldyBpayhhLGIsYyxkKX1mdW5jdGlvbiBqaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gaGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGppKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1BYSlyZXR1cm4gMTE7aWYoYT09PURhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFRnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9bmgoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVmcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWppKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHVhOnJldHVybiBYZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIEhhOmc9ODtlfD0xNjticmVhaztjYXNlIHdhOmc9ODtlfD0xO2JyZWFrO2Nhc2UgeGE6cmV0dXJuIGE9bmgoMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT14YSxhLnR5cGU9eGEsYS5sYW5lcz1mLGE7Y2FzZSBCYTpyZXR1cm4gYT1uaCgxMyxjLGIsZSksYS50eXBlPUJhLGEuZWxlbWVudFR5cGU9QmEsYS5sYW5lcz1mLGE7Y2FzZSBDYTpyZXR1cm4gYT1uaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1DYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiB2aShjLGUsZixiKTtjYXNlIEphOnJldHVybiBhPW5oKDI0LGMsYixlKSxhLmVsZW1lbnRUeXBlPUphLGEubGFuZXM9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHlhOmc9MTA7YnJlYWsgYTtjYXNlIHphOmc9OTticmVhayBhO2Nhc2UgQWE6Zz0xMTticmVhayBhO2Nhc2UgRGE6Zz0xNDticmVhayBhO2Nhc2UgRWE6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIEZhOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih5KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPW5oKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gWGcoYSxiLGMsZCl7YT1uaCg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gdmkoYSxiLGMsZCl7YT1uaCgyMyxhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVWcoYSxiLGMpe2E9bmgoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gV2coYSxiLGMpe2I9bmgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBqayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz1aYygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz1aYygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz1aYygwKTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9bnVsbH1cbmZ1bmN0aW9uIGtrKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6dGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBsayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1IZygpLGc9SWcoZSk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxzO2I6e2lmKFpiKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHkoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoRmYoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih5KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihGZihrKSl7Yz1JZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1DZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXpnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PVxuZCYmKGIuY2FsbGJhY2s9ZCk7QWcoZSxiKTtKZyhlLGcsZik7cmV0dXJuIGd9ZnVuY3Rpb24gbWsoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBuayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gb2soYSxiKXtuayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmbmsoYSxiKX1mdW5jdGlvbiBwaygpe3JldHVybiBudWxsfVxuZnVuY3Rpb24gcWsoYSxiLGMpe3ZhciBkPW51bGwhPWMmJm51bGwhPWMuaHlkcmF0aW9uT3B0aW9ucyYmYy5oeWRyYXRpb25PcHRpb25zLm11dGFibGVTb3VyY2VzfHxudWxsO2M9bmV3IGprKGEsYixudWxsIT1jJiYhMD09PWMuaHlkcmF0ZSk7Yj1uaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7Yy5jdXJyZW50PWI7Yi5zdGF0ZU5vZGU9Yzt4ZyhiKTthW2ZmXT1jLmN1cnJlbnQ7Y2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyl7Yj1kW2FdO3ZhciBlPWIuX2dldFZlcnNpb247ZT1lKGIuX3NvdXJjZSk7bnVsbD09Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2MubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYixlXTpjLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChiLGUpfXRoaXMuX2ludGVybmFsUm9vdD1jfVxucWsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtsayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtxay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztsayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbZmZdPW51bGx9KX07ZnVuY3Rpb24gcmsoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gc2soYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBxayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIHRrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7aC5jYWxsKGEpfX1sayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXNrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2suY2FsbChhKX19WGooZnVuY3Rpb24oKXtsayhiLGcsYSxlKX0pfXJldHVybiBtayhnKX1lYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNCxiKTtvayhhLDQpfX07ZmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDY3MTA4ODY0LGIpO29rKGEsNjcxMDg4NjQpfX07XG5nYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpLGM9SWcoYSk7SmcoYSxjLGIpO29rKGEsYyl9fTtoYz1mdW5jdGlvbihhLGIpe3JldHVybiBiKCl9O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjphYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IoeSg5MCkpO1dhKGQpO2FiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1XajtcbkhiPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9WDtYfD00O3RyeXtyZXR1cm4gZ2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7WD1mLDA9PT1YJiYod2ooKSxpZygpKX19O0liPWZ1bmN0aW9uKCl7MD09PShYJjQ5KSYmKFZqKCksT2ooKSl9O0piPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtYfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fTtmdW5jdGlvbiB1ayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiBrayhhLGIsbnVsbCxjKX12YXIgdms9e0V2ZW50czpbQ2IsdWUsRGIsRWIsRmIsT2ose2N1cnJlbnQ6ITF9XX0sd2s9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTcuMC4yXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB4az17YnVuZGxlVHlwZTp3ay5idW5kbGVUeXBlLHZlcnNpb246d2sudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOndrLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6d2sucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWNjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3ay5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5wayxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHlrPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZigheWsuaXNEaXNhYmxlZCYmeWsuc3VwcG9ydHNGaWJlcil0cnl7TGY9eWsuaW5qZWN0KHhrKSxNZj15a31jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dms7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9dWs7XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHkoMTg4KSk7dGhyb3cgRXJyb3IoeSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1jYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtpZigwIT09KGMmNDgpKXJldHVybiBhKGIpO1h8PTE7dHJ5e2lmKGEpcmV0dXJuIGdnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1g9YyxpZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFyayhhKSl0aHJvdyBFcnJvcih5KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWGooZnVuY3Rpb24oKXt0ayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbZmZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1XajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiB1ayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXJrKGMpKXRocm93IEVycm9yKHkoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IoeSgzOCkpO3JldHVybiB0ayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4yXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIFJlbGF5IHYxMS4wLjJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UmVsYXlDb250ZXh0LmpzJyk7XG4iLCIvKipcbiAqIFJlbGF5IHYxMS4wLjJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2hvb2tzLmpzJyk7XG4iLCIvKipcbiAqIFJlbGF5IHYxMS4wLjJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2luZGV4LmpzJyk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnQpIHtcbiAgcmV0dXJuIGNvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBjb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50Jztcbn1cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyTmFtZShDb21wb25lbnQpIHtcbiAgcmV0dXJuICdSZWxheSgnICsgZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpICsgJyknO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29tcG9uZW50TmFtZTogZ2V0Q29tcG9uZW50TmFtZSxcbiAgZ2V0Q29udGFpbmVyTmFtZTogZ2V0Q29udGFpbmVyTmFtZVxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIGNyZWF0ZVJlbGF5Q29udGV4dCA9IF9yZXF1aXJlLl9faW50ZXJuYWwuY3JlYXRlUmVsYXlDb250ZXh0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJlbGF5Q29udGV4dChSZWFjdCk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIGFyZUVxdWFsID0gcmVxdWlyZShcImZianMvbGliL2FyZUVxdWFsXCIpO1xuXG52YXIgYnVpbGRSZWFjdFJlbGF5Q29udGFpbmVyID0gcmVxdWlyZSgnLi9idWlsZFJlYWN0UmVsYXlDb250YWluZXInKTtcblxudmFyIGdldFJvb3RWYXJpYWJsZXNGb3JGcmFnbWVudHMgPSByZXF1aXJlKCcuL2dldFJvb3RWYXJpYWJsZXNGb3JGcmFnbWVudHMnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9SZWFjdFJlbGF5Q29udGFpbmVyVXRpbHMnKSxcbiAgICBnZXRDb250YWluZXJOYW1lID0gX3JlcXVpcmUuZ2V0Q29udGFpbmVyTmFtZTtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vUmVsYXlDb250ZXh0JyksXG4gICAgYXNzZXJ0UmVsYXlDb250ZXh0ID0gX3JlcXVpcmUyLmFzc2VydFJlbGF5Q29udGV4dDtcblxudmFyIF9yZXF1aXJlMyA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBjcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlciA9IF9yZXF1aXJlMy5jcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlcixcbiAgICBnZXREYXRhSURzRnJvbU9iamVjdCA9IF9yZXF1aXJlMy5nZXREYXRhSURzRnJvbU9iamVjdCxcbiAgICBpc1NjYWxhckFuZEVxdWFsID0gX3JlcXVpcmUzLmlzU2NhbGFyQW5kRXF1YWw7XG5cbi8qKlxuICogQ29tcG9zZXMgYSBSZWFjdCBjb21wb25lbnQgY2xhc3MsIHJldHVybmluZyBhIG5ldyBjbGFzcyB0aGF0IGludGVyY2VwdHNcbiAqIHByb3BzLCByZXNvbHZpbmcgdGhlbSB3aXRoIHRoZSBwcm92aWRlZCBmcmFnbWVudHMgYW5kIHN1YnNjcmliaW5nIGZvclxuICogdXBkYXRlcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyV2l0aEZyYWdtZW50cyhDb21wb25lbnQsIGZyYWdtZW50cykge1xuICB2YXIgX2NsYXNzLCBfdGVtcDtcblxuICB2YXIgY29udGFpbmVyTmFtZSA9IGdldENvbnRhaW5lck5hbWUoQ29tcG9uZW50KTtcbiAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgKDAsIF9pbmhlcml0c0xvb3NlMltcImRlZmF1bHRcIl0pKF9jbGFzcywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBfY2xhc3MocHJvcHMpIHtcbiAgICAgIHZhciBfcHJvcHMkX19yb290SXNRdWVyeVIsIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpLCBcIl9oYW5kbGVGcmFnbWVudERhdGFVcGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVzb2x2ZXJGcm9tVGhpc1VwZGF0ZSA9IF90aGlzLnN0YXRlLnJlc29sdmVyO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uICh1cGRhdGVkU3RhdGUpIHtcbiAgICAgICAgICByZXR1cm4gKC8vIElmIHRoaXMgZXZlbnQgYmVsb25ncyB0byB0aGUgY3VycmVudCBkYXRhIHNvdXJjZSwgdXBkYXRlLlxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIHNob3VsZCBpZ25vcmUgaXQuXG4gICAgICAgICAgICByZXNvbHZlckZyb21UaGlzVXBkYXRlID09PSB1cGRhdGVkU3RhdGUucmVzb2x2ZXIgPyB7XG4gICAgICAgICAgICAgIGRhdGE6IHVwZGF0ZWRTdGF0ZS5yZXNvbHZlci5yZXNvbHZlKCksXG4gICAgICAgICAgICAgIHJlbGF5UHJvcDogZ2V0UmVsYXlQcm9wKHVwZGF0ZWRTdGF0ZS5yZWxheVByb3AuZW52aXJvbm1lbnQpXG4gICAgICAgICAgICB9IDogbnVsbFxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgcmVsYXlDb250ZXh0ID0gYXNzZXJ0UmVsYXlDb250ZXh0KHByb3BzLl9fcmVsYXlDb250ZXh0KTtcbiAgICAgIHZhciByb290SXNRdWVyeVJlbmRlcmVyID0gKF9wcm9wcyRfX3Jvb3RJc1F1ZXJ5UiA9IHByb3BzLl9fcm9vdElzUXVlcnlSZW5kZXJlcikgIT09IG51bGwgJiYgX3Byb3BzJF9fcm9vdElzUXVlcnlSICE9PSB2b2lkIDAgPyBfcHJvcHMkX19yb290SXNRdWVyeVIgOiBmYWxzZTsgLy8gRG8gbm90IHByb3ZpZGUgYSBzdWJzY3JpcHRpb24vY2FsbGJhY2sgaGVyZS5cbiAgICAgIC8vIEl0IGlzIHBvc3NpYmxlIGZvciB0aGlzIHJlbmRlciB0byBiZSBpbnRlcnJ1cHRlZCBvciBhYm9ydGVkLFxuICAgICAgLy8gSW4gd2hpY2ggY2FzZSB0aGUgc3Vic2NyaXB0aW9uIHdvdWxkIGNhdXNlIGEgbGVhay5cbiAgICAgIC8vIFdlIHdpbGwgYWRkIHRoZSBzdWJzY3JpcHRpb24gaW4gY29tcG9uZW50RGlkTW91bnQoKS5cblxuICAgICAgdmFyIHJlc29sdmVyID0gY3JlYXRlRnJhZ21lbnRTcGVjUmVzb2x2ZXIocmVsYXlDb250ZXh0LCBjb250YWluZXJOYW1lLCBmcmFnbWVudHMsIHByb3BzLCByb290SXNRdWVyeVJlbmRlcmVyKTtcbiAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICBkYXRhOiByZXNvbHZlci5yZXNvbHZlKCksXG4gICAgICAgIHByZXZQcm9wczogcHJvcHMsXG4gICAgICAgIHByZXZQcm9wc0NvbnRleHQ6IHJlbGF5Q29udGV4dCxcbiAgICAgICAgcmVsYXlQcm9wOiBnZXRSZWxheVByb3AocmVsYXlDb250ZXh0LmVudmlyb25tZW50KSxcbiAgICAgICAgcmVzb2x2ZXI6IHJlc29sdmVyXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGVuIG5ldyBwcm9wcyBhcmUgcmVjZWl2ZWQsIHJlYWQgZGF0YSBmb3IgdGhlIG5ldyBwcm9wcyBhbmQgc3Vic2NyaWJlXG4gICAgICogZm9yIHVwZGF0ZXMuIFByb3BzIG1heSBiZSB0aGUgc2FtZSBpbiB3aGljaCBjYXNlIHByZXZpb3VzIGRhdGEgYW5kXG4gICAgICogc3Vic2NyaXB0aW9ucyBjYW4gYmUgcmV1c2VkLlxuICAgICAqL1xuXG5cbiAgICBfY2xhc3MuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICB2YXIgX25leHRQcm9wcyRfX3Jvb3RJc1F1O1xuXG4gICAgICAvLyBBbnkgcHJvcHMgY2hhbmdlIGNvdWxkIGltcGFjdCB0aGUgcXVlcnksIHNvIHdlIG1pcnJvciBwcm9wcyBpbiBzdGF0ZS5cbiAgICAgIC8vIFRoaXMgaXMgYW4gdW51c3VhbCBwYXR0ZXJuLCBidXQgbmVjZXNzYXJ5IGZvciB0aGlzIGNvbnRhaW5lciB1c2VjYXNlLlxuICAgICAgdmFyIHByZXZQcm9wcyA9IHByZXZTdGF0ZS5wcmV2UHJvcHM7XG4gICAgICB2YXIgcmVsYXlDb250ZXh0ID0gYXNzZXJ0UmVsYXlDb250ZXh0KG5leHRQcm9wcy5fX3JlbGF5Q29udGV4dCk7XG4gICAgICB2YXIgcm9vdElzUXVlcnlSZW5kZXJlciA9IChfbmV4dFByb3BzJF9fcm9vdElzUXUgPSBuZXh0UHJvcHMuX19yb290SXNRdWVyeVJlbmRlcmVyKSAhPT0gbnVsbCAmJiBfbmV4dFByb3BzJF9fcm9vdElzUXUgIT09IHZvaWQgMCA/IF9uZXh0UHJvcHMkX19yb290SXNRdSA6IGZhbHNlO1xuICAgICAgdmFyIHByZXZJRHMgPSBnZXREYXRhSURzRnJvbU9iamVjdChmcmFnbWVudHMsIHByZXZQcm9wcyk7XG4gICAgICB2YXIgbmV4dElEcyA9IGdldERhdGFJRHNGcm9tT2JqZWN0KGZyYWdtZW50cywgbmV4dFByb3BzKTtcbiAgICAgIHZhciByZXNvbHZlciA9IHByZXZTdGF0ZS5yZXNvbHZlcjsgLy8gSWYgdGhlIGVudmlyb25tZW50IGhhcyBjaGFuZ2VkIG9yIHByb3BzIHBvaW50IHRvIG5ldyByZWNvcmRzIHRoZW5cbiAgICAgIC8vIHByZXZpb3VzbHkgZmV0Y2hlZCBkYXRhIGFuZCBhbnkgcGVuZGluZyBmZXRjaGVzIG5vIGxvbmdlciBhcHBseTpcbiAgICAgIC8vIC0gRXhpc3RpbmcgcmVmZXJlbmNlcyBhcmUgb24gdGhlIG9sZCBlbnZpcm9ubWVudC5cbiAgICAgIC8vIC0gRXhpc3RpbmcgcmVmZXJlbmNlcyBhcmUgYmFzZWQgb24gb2xkIHZhcmlhYmxlcy5cbiAgICAgIC8vIC0gUGVuZGluZyBmZXRjaGVzIGFyZSBmb3IgdGhlIHByZXZpb3VzIHJlY29yZHMuXG5cbiAgICAgIGlmIChwcmV2U3RhdGUucHJldlByb3BzQ29udGV4dC5lbnZpcm9ubWVudCAhPT0gcmVsYXlDb250ZXh0LmVudmlyb25tZW50IHx8ICFhcmVFcXVhbChwcmV2SURzLCBuZXh0SURzKSkge1xuICAgICAgICAvLyBEbyBub3QgcHJvdmlkZSBhIHN1YnNjcmlwdGlvbi9jYWxsYmFjayBoZXJlLlxuICAgICAgICAvLyBJdCBpcyBwb3NzaWJsZSBmb3IgdGhpcyByZW5kZXIgdG8gYmUgaW50ZXJydXB0ZWQgb3IgYWJvcnRlZCxcbiAgICAgICAgLy8gSW4gd2hpY2ggY2FzZSB0aGUgc3Vic2NyaXB0aW9uIHdvdWxkIGNhdXNlIGEgbGVhay5cbiAgICAgICAgLy8gV2Ugd2lsbCBhZGQgdGhlIHN1YnNjcmlwdGlvbiBpbiBjb21wb25lbnREaWRVcGRhdGUoKS5cbiAgICAgICAgcmVzb2x2ZXIgPSBjcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlcihyZWxheUNvbnRleHQsIGNvbnRhaW5lck5hbWUsIGZyYWdtZW50cywgbmV4dFByb3BzLCByb290SXNRdWVyeVJlbmRlcmVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRhOiByZXNvbHZlci5yZXNvbHZlKCksXG4gICAgICAgICAgcHJldlByb3BzQ29udGV4dDogcmVsYXlDb250ZXh0LFxuICAgICAgICAgIHByZXZQcm9wczogbmV4dFByb3BzLFxuICAgICAgICAgIHJlbGF5UHJvcDogZ2V0UmVsYXlQcm9wKHJlbGF5Q29udGV4dC5lbnZpcm9ubWVudCksXG4gICAgICAgICAgcmVzb2x2ZXI6IHJlc29sdmVyXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlci5zZXRQcm9wcyhuZXh0UHJvcHMpO1xuICAgICAgICB2YXIgZGF0YSA9IHJlc29sdmVyLnJlc29sdmUoKTtcblxuICAgICAgICBpZiAoZGF0YSAhPT0gcHJldlN0YXRlLmRhdGEpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgIHByZXZQcm9wczogbmV4dFByb3BzLFxuICAgICAgICAgICAgcHJldlByb3BzQ29udGV4dDogcmVsYXlDb250ZXh0LFxuICAgICAgICAgICAgcmVsYXlQcm9wOiBnZXRSZWxheVByb3AocmVsYXlDb250ZXh0LmVudmlyb25tZW50KVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHZhciBfcHJvdG8gPSBfY2xhc3MucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpYmVUb05ld1Jlc29sdmVyKCk7XG5cbiAgICAgIHRoaXMuX3JlcmVuZGVySWZTdG9yZUhhc0NoYW5nZWQoKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuc3RhdGUucmVzb2x2ZXIgIT09IHByZXZTdGF0ZS5yZXNvbHZlcikge1xuICAgICAgICBwcmV2U3RhdGUucmVzb2x2ZXIuZGlzcG9zZSgpO1xuXG4gICAgICAgIHRoaXMuX3N1YnNjcmliZVRvTmV3UmVzb2x2ZXIoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVyZW5kZXJJZlN0b3JlSGFzQ2hhbmdlZCgpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuc3RhdGUucmVzb2x2ZXIuZGlzcG9zZSgpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAvLyBTaG9ydC1jaXJjdWl0IGlmIGFueSBSZWxheS1yZWxhdGVkIGRhdGEgaGFzIGNoYW5nZWRcbiAgICAgIGlmIChuZXh0U3RhdGUuZGF0YSAhPT0gdGhpcy5zdGF0ZS5kYXRhKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSAvLyBPdGhlcndpc2UsIGZvciBjb252ZW5pZW5jZSBzaG9ydC1jaXJjdWl0IGlmIGFsbCBub24tUmVsYXkgcHJvcHNcbiAgICAgIC8vIGFyZSBzY2FsYXIgYW5kIGVxdWFsXG5cblxuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhuZXh0UHJvcHMpO1xuXG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwga2V5cy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgdmFyIF9rZXkgPSBrZXlzW2lpXTtcblxuICAgICAgICBpZiAoX2tleSA9PT0gJ19fcmVsYXlDb250ZXh0Jykge1xuICAgICAgICAgIGlmIChuZXh0U3RhdGUucHJldlByb3BzQ29udGV4dC5lbnZpcm9ubWVudCAhPT0gdGhpcy5zdGF0ZS5wcmV2UHJvcHNDb250ZXh0LmVudmlyb25tZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFmcmFnbWVudHMuaGFzT3duUHJvcGVydHkoX2tleSkgJiYgIWlzU2NhbGFyQW5kRXF1YWwobmV4dFByb3BzW19rZXldLCB0aGlzLnByb3BzW19rZXldKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVuZGVyIG5ldyBkYXRhIGZvciB0aGUgZXhpc3RpbmcgcHJvcHMvY29udGV4dC5cbiAgICAgKi9cbiAgICA7XG5cbiAgICBfcHJvdG8uX3JlcmVuZGVySWZTdG9yZUhhc0NoYW5nZWQgPSBmdW5jdGlvbiBfcmVyZW5kZXJJZlN0b3JlSGFzQ2hhbmdlZCgpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgZGF0YSA9IF90aGlzJHN0YXRlLmRhdGEsXG4gICAgICAgICAgcmVzb2x2ZXIgPSBfdGhpcyRzdGF0ZS5yZXNvbHZlcjsgLy8gRXh0ZXJuYWwgdmFsdWVzIGNvdWxkIGNoYW5nZSBiZXR3ZWVuIHJlbmRlciBhbmQgY29tbWl0LlxuICAgICAgLy8gQ2hlY2sgZm9yIHRoaXMgY2FzZSwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgYW4gZXh0cmEgc3RvcmUgcmVhZC5cblxuICAgICAgdmFyIG1heWJlTmV3RGF0YSA9IHJlc29sdmVyLnJlc29sdmUoKTtcblxuICAgICAgaWYgKGRhdGEgIT09IG1heWJlTmV3RGF0YSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBkYXRhOiBtYXliZU5ld0RhdGFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fc3Vic2NyaWJlVG9OZXdSZXNvbHZlciA9IGZ1bmN0aW9uIF9zdWJzY3JpYmVUb05ld1Jlc29sdmVyKCkge1xuICAgICAgdmFyIHJlc29sdmVyID0gdGhpcy5zdGF0ZS5yZXNvbHZlcjsgLy8gRXZlbnQgbGlzdGVuZXJzIGFyZSBvbmx5IHNhZmUgdG8gYWRkIGR1cmluZyB0aGUgY29tbWl0IHBoYXNlLFxuICAgICAgLy8gU28gdGhleSB3b24ndCBsZWFrIGlmIHJlbmRlciBpcyBpbnRlcnJ1cHRlZCBvciBlcnJvcnMuXG5cbiAgICAgIHJlc29sdmVyLnNldENhbGxiYWNrKHRoaXMuX2hhbmRsZUZyYWdtZW50RGF0YVVwZGF0ZSk7XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNvbXBvbmVudFJlZiA9IF90aGlzJHByb3BzLmNvbXBvbmVudFJlZixcbiAgICAgICAgICBfX3JlbGF5Q29udGV4dCA9IF90aGlzJHByb3BzLl9fcmVsYXlDb250ZXh0LFxuICAgICAgICAgIF9fcm9vdElzUXVlcnlSZW5kZXJlciA9IF90aGlzJHByb3BzLl9fcm9vdElzUXVlcnlSZW5kZXJlcixcbiAgICAgICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTJbXCJkZWZhdWx0XCJdKShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50UmVmXCIsIFwiX19yZWxheUNvbnRleHRcIiwgXCJfX3Jvb3RJc1F1ZXJ5UmVuZGVyZXJcIl0pO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgcHJvcHMpLCB0aGlzLnN0YXRlLmRhdGEpLCB7fSwge1xuICAgICAgICByZWY6IGNvbXBvbmVudFJlZixcbiAgICAgICAgcmVsYXk6IHRoaXMuc3RhdGUucmVsYXlQcm9wXG4gICAgICB9KSk7XG4gICAgfTtcblxuICAgIHJldHVybiBfY2xhc3M7XG4gIH0oUmVhY3QuQ29tcG9uZW50KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3MsIFwiZGlzcGxheU5hbWVcIiwgY29udGFpbmVyTmFtZSksIF90ZW1wO1xufVxuXG5mdW5jdGlvbiBnZXRSZWxheVByb3AoZW52aXJvbm1lbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnRcbiAgfTtcbn1cbi8qKlxuICogV3JhcCB0aGUgYmFzaWMgYGNyZWF0ZUNvbnRhaW5lcigpYCBmdW5jdGlvbiB3aXRoIGxvZ2ljIHRvIGFkYXB0IHRvIHRoZVxuICogYGNvbnRleHQucmVsYXkuZW52aXJvbm1lbnRgIGluIHdoaWNoIGl0IGlzIHJlbmRlcmVkLiBTcGVjaWZpY2FsbHksIHRoZVxuICogZXh0cmFjdGlvbiBvZiB0aGUgZW52aXJvbm1lbnQtc3BlY2lmaWMgdmVyc2lvbiBvZiBmcmFnbWVudHMgaW4gdGhlXG4gKiBgZnJhZ21lbnRTcGVjYCBpcyBtZW1vaXplZCBvbmNlIHBlciBlbnZpcm9ubWVudCwgcmF0aGVyIHRoYW4gb25jZSBwZXJcbiAqIGluc3RhbmNlIG9mIHRoZSBjb250YWluZXIgY29uc3RydWN0ZWQvcmVuZGVyZWQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVDb250YWluZXIoQ29tcG9uZW50LCBmcmFnbWVudFNwZWMpIHtcbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICByZXR1cm4gYnVpbGRSZWFjdFJlbGF5Q29udGFpbmVyKENvbXBvbmVudCwgZnJhZ21lbnRTcGVjLCBjcmVhdGVDb250YWluZXJXaXRoRnJhZ21lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZUNvbnRhaW5lcjogY3JlYXRlQ29udGFpbmVyXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgUmVhY3RSZWxheUNvbnRleHQgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlDb250ZXh0Jyk7XG5cbnZhciBSZWFjdFJlbGF5UXVlcnlSZW5kZXJlckNvbnRleHQgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlRdWVyeVJlbmRlcmVyQ29udGV4dCcpO1xuXG52YXIgdXNlTGF5b3V0RWZmZWN0ID0gUmVhY3QudXNlTGF5b3V0RWZmZWN0LFxuICAgIHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUsXG4gICAgdXNlUmVmID0gUmVhY3QudXNlUmVmLFxuICAgIHVzZU1lbW8gPSBSZWFjdC51c2VNZW1vO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvciA9IF9yZXF1aXJlLmNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IsXG4gICAgZGVlcEZyZWV6ZSA9IF9yZXF1aXJlLmRlZXBGcmVlemUsXG4gICAgZ2V0UmVxdWVzdCA9IF9yZXF1aXJlLmdldFJlcXVlc3Q7XG5cbnZhciBhcmVFcXVhbCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9hcmVFcXVhbFwiKTtcblxudmFyIHF1ZXJ5UmVuZGVyZXJDb250ZXh0ID0ge1xuICByb290SXNRdWVyeVJlbmRlcmVyOiB0cnVlXG59O1xuXG5mdW5jdGlvbiB1c2VEZWVwQ29tcGFyZSh2YWx1ZSkge1xuICB2YXIgbGF0ZXN0VmFsdWUgPSBSZWFjdC51c2VSZWYodmFsdWUpO1xuXG4gIGlmICghYXJlRXF1YWwobGF0ZXN0VmFsdWUuY3VycmVudCwgdmFsdWUpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgZGVlcEZyZWV6ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgbGF0ZXN0VmFsdWUuY3VycmVudCA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGxhdGVzdFZhbHVlLmN1cnJlbnQ7XG59XG5cbmZ1bmN0aW9uIFJlYWN0UmVsYXlMb2NhbFF1ZXJ5UmVuZGVyZXIocHJvcHMpIHtcbiAgdmFyIGVudmlyb25tZW50ID0gcHJvcHMuZW52aXJvbm1lbnQsXG4gICAgICBxdWVyeSA9IHByb3BzLnF1ZXJ5LFxuICAgICAgdmFyaWFibGVzID0gcHJvcHMudmFyaWFibGVzLFxuICAgICAgcmVuZGVyID0gcHJvcHMucmVuZGVyO1xuICB2YXIgbGF0ZXN0VmFyaWFibGVzID0gdXNlRGVlcENvbXBhcmUodmFyaWFibGVzKTtcbiAgdmFyIG9wZXJhdGlvbiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXF1ZXN0ID0gZ2V0UmVxdWVzdChxdWVyeSk7XG4gICAgcmV0dXJuIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IocmVxdWVzdCwgbGF0ZXN0VmFyaWFibGVzKTtcbiAgfSwgW3F1ZXJ5LCBsYXRlc3RWYXJpYWJsZXNdKTtcbiAgdmFyIHJlbGF5Q29udGV4dCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnRcbiAgICB9O1xuICB9LCBbZW52aXJvbm1lbnRdKTsgLy8gVXNlIGEgcmVmIHRvIHByZXZlbnQgcmVuZGVyaW5nIHR3aWNlIHdoZW4gZGF0YSBjaGFuZ2VzXG4gIC8vIGJlY2F1c2Ugb2YgcHJvcHMgY2hhbmdlXG5cbiAgdmFyIGRhdGFSZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKG51bGwpLFxuICAgICAgZm9yY2VVcGRhdGUgPSBfdXNlU3RhdGVbMV07XG5cbiAgdmFyIGNsZWFudXBGblJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIHNuYXBzaG90ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgZW52aXJvbm1lbnQuY2hlY2sob3BlcmF0aW9uKTtcbiAgICB2YXIgcmVzID0gZW52aXJvbm1lbnQubG9va3VwKG9wZXJhdGlvbi5mcmFnbWVudCk7XG4gICAgZGF0YVJlZi5jdXJyZW50ID0gcmVzLmRhdGE7IC8vIFJ1biBlZmZlY3RzIGhlcmUgc28gdGhhdCB0aGUgZGF0YSBjYW4gYmUgcmV0YWluZWRcbiAgICAvLyBhbmQgc3Vic2NyaWJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBjb21taXRzXG5cbiAgICB2YXIgcmV0YWluRGlzcG9zYWJsZSA9IGVudmlyb25tZW50LnJldGFpbihvcGVyYXRpb24pO1xuICAgIHZhciBzdWJzY3JpYmVEaXNwb3NhYmxlID0gZW52aXJvbm1lbnQuc3Vic2NyaWJlKHJlcywgZnVuY3Rpb24gKG5ld1NuYXBzaG90KSB7XG4gICAgICBkYXRhUmVmLmN1cnJlbnQgPSBuZXdTbmFwc2hvdC5kYXRhO1xuICAgICAgZm9yY2VVcGRhdGUoZGF0YVJlZi5jdXJyZW50KTtcbiAgICB9KTtcbiAgICB2YXIgZGlzcG9zZWQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIG5leHRDbGVhbnVwRm4oKSB7XG4gICAgICBpZiAoIWRpc3Bvc2VkKSB7XG4gICAgICAgIGRpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgY2xlYW51cEZuUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICByZXRhaW5EaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgc3Vic2NyaWJlRGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNsZWFudXBGblJlZi5jdXJyZW50KSB7XG4gICAgICBjbGVhbnVwRm5SZWYuY3VycmVudCgpO1xuICAgIH1cblxuICAgIGNsZWFudXBGblJlZi5jdXJyZW50ID0gbmV4dENsZWFudXBGbjtcbiAgICByZXR1cm4gcmVzO1xuICB9LCBbZW52aXJvbm1lbnQsIG9wZXJhdGlvbl0pO1xuICB1c2VMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjbGVhbnVwRm4gPSBjbGVhbnVwRm5SZWYuY3VycmVudDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYW51cEZuICYmIGNsZWFudXBGbigpO1xuICAgIH07XG4gIH0sIFtzbmFwc2hvdF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3RSZWxheUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogcmVsYXlDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0UmVsYXlRdWVyeVJlbmRlcmVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBxdWVyeVJlbmRlcmVyQ29udGV4dFxuICB9LCByZW5kZXIoe1xuICAgIHByb3BzOiBkYXRhUmVmLmN1cnJlbnRcbiAgfSkpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJlbGF5TG9jYWxRdWVyeVJlbmRlcmVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgUmVhY3RSZWxheUNvbnRleHQgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlDb250ZXh0Jyk7XG5cbnZhciBSZWFjdFJlbGF5UXVlcnlGZXRjaGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlbGF5UXVlcnlGZXRjaGVyJyk7XG5cbnZhciBhcmVFcXVhbCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9hcmVFcXVhbFwiKTtcblxudmFyIGJ1aWxkUmVhY3RSZWxheUNvbnRhaW5lciA9IHJlcXVpcmUoJy4vYnVpbGRSZWFjdFJlbGF5Q29udGFpbmVyJyk7XG5cbnZhciBnZXRSb290VmFyaWFibGVzRm9yRnJhZ21lbnRzID0gcmVxdWlyZSgnLi9nZXRSb290VmFyaWFibGVzRm9yRnJhZ21lbnRzJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9SZWFjdFJlbGF5Q29udGFpbmVyVXRpbHMnKSxcbiAgICBnZXRDb21wb25lbnROYW1lID0gX3JlcXVpcmUuZ2V0Q29tcG9uZW50TmFtZSxcbiAgICBnZXRDb250YWluZXJOYW1lID0gX3JlcXVpcmUuZ2V0Q29udGFpbmVyTmFtZTtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vUmVsYXlDb250ZXh0JyksXG4gICAgYXNzZXJ0UmVsYXlDb250ZXh0ID0gX3JlcXVpcmUyLmFzc2VydFJlbGF5Q29udGV4dDtcblxudmFyIF9yZXF1aXJlMyA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBDb25uZWN0aW9uSW50ZXJmYWNlID0gX3JlcXVpcmUzLkNvbm5lY3Rpb25JbnRlcmZhY2UsXG4gICAgT2JzZXJ2YWJsZSA9IF9yZXF1aXJlMy5PYnNlcnZhYmxlLFxuICAgIGNyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyID0gX3JlcXVpcmUzLmNyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyLFxuICAgIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IgPSBfcmVxdWlyZTMuY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcixcbiAgICBnZXREYXRhSURzRnJvbU9iamVjdCA9IF9yZXF1aXJlMy5nZXREYXRhSURzRnJvbU9iamVjdCxcbiAgICBnZXRSZXF1ZXN0ID0gX3JlcXVpcmUzLmdldFJlcXVlc3QsXG4gICAgZ2V0U2VsZWN0b3IgPSBfcmVxdWlyZTMuZ2V0U2VsZWN0b3IsXG4gICAgZ2V0VmFyaWFibGVzRnJvbU9iamVjdCA9IF9yZXF1aXJlMy5nZXRWYXJpYWJsZXNGcm9tT2JqZWN0LFxuICAgIGlzU2NhbGFyQW5kRXF1YWwgPSBfcmVxdWlyZTMuaXNTY2FsYXJBbmRFcXVhbDtcblxudmFyIEZPUldBUkQgPSAnZm9yd2FyZCc7XG5cbi8qKlxuICogRXh0ZW5kcyB0aGUgZnVuY3Rpb25hbGl0eSBvZiBSZWxheUZyYWdtZW50Q29udGFpbmVyIGJ5IHByb3ZpZGluZyBhIG1lY2hhbmlzbVxuICogdG8gbG9hZCBtb3JlIGRhdGEgZnJvbSBhIGNvbm5lY3Rpb24uXG4gKlxuICogIyBDb25maWd1cmluZyBhIFBhZ2luYXRpb25Db250YWluZXJcbiAqXG4gKiBQYWdpbmF0aW9uQ29udGFpbmVyIGFjY2VwdHMgdGhlIHN0YW5kYXJkIEZyYWdtZW50Q29udGFpbmVyIGFyZ3VtZW50cyBhbmQgYW5cbiAqIGFkZGl0aW9uYWwgYGNvbm5lY3Rpb25Db25maWdgIGFyZ3VtZW50OlxuICpcbiAqIC0gYENvbXBvbmVudGA6IHRoZSBjb21wb25lbnQgdG8gYmUgd3JhcHBlZC9yZW5kZXJlZC5cbiAqIC0gYGZyYWdtZW50c2A6IGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGBncmFwaHFsYCBmcmFnbWVudHMuIFRoZSBvYmplY3RcbiAqICAga2V5cyBkZXRlcm1pbmUgdGhlIHByb3AgbmFtZXMgYnkgd2hpY2ggZnJhZ21lbnQgZGF0YSBpcyBhdmFpbGFibGUuXG4gKiAtIGBjb25uZWN0aW9uQ29uZmlnYDogYW4gb2JqZWN0IHRoYXQgZGV0ZXJtaW5lcyBob3cgdG8gbG9hZCBtb3JlIGNvbm5lY3Rpb25cbiAqICAgZGF0YS4gRGV0YWlscyBiZWxvdy5cbiAqXG4gKiAjIExvYWRpbmcgTW9yZSBEYXRhXG4gKlxuICogVXNlIGBwcm9wcy5yZWxheS5oYXNNb3JlKClgIHRvIGRldGVybWluZSBpZiB0aGVyZSBhcmUgbW9yZSBpdGVtcyB0byBsb2FkLlxuICpcbiAqIGBgYFxuICogaGFzTW9yZSgpOiBib29sZWFuXG4gKiBgYGBcbiAqXG4gKiBVc2UgYHByb3BzLnJlbGF5LmlzTG9hZGluZygpYCB0byBkZXRlcm1pbmUgaWYgYSBwcmV2aW91cyBjYWxsIHRvIGBsb2FkTW9yZSgpYFxuICogaXMgc3RpbGwgcGVuZGluZy4gVGhpcyBpcyBjb252ZW5pZW50IGZvciBhdm9pZGluZyBkdXBsaWNhdGUgbG9hZCBjYWxscy5cbiAqXG4gKiBgYGBcbiAqIGlzTG9hZGluZygpOiBib29sZWFuXG4gKiBgYGBcbiAqXG4gKiBVc2UgYHByb3BzLnJlbGF5LmxvYWRNb3JlKClgIHRvIGxvYWQgbW9yZSBpdGVtcy4gVGhpcyB3aWxsIHJldHVybiBudWxsIGlmXG4gKiB0aGVyZSBhcmUgbm8gbW9yZSBpdGVtcyB0byBmZXRjaCwgb3RoZXJ3aXNlIGl0IHdpbGwgZmV0Y2ggbW9yZSBpdGVtcyBhbmRcbiAqIHJldHVybiBhIERpc3Bvc2FibGUgdGhhdCBjYW4gYmUgdXNlZCB0byBjYW5jZWwgdGhlIGZldGNoLlxuICpcbiAqIGBwYWdlU2l6ZWAgc2hvdWxkIGJlIHRoZSBudW1iZXIgb2YgKmFkZGl0aW9uYWwqIGl0ZW1zIHRvIGZldGNoIChub3QgdGhlXG4gKiB0b3RhbCkuXG4gKlxuICogYGBgXG4gKiBsb2FkTW9yZShwYWdlU2l6ZTogbnVtYmVyLCBjYWxsYmFjazogPyhlcnJvcjogP0Vycm9yKSA9PiB2b2lkKTogP0Rpc3Bvc2FibGVcbiAqIGBgYFxuICpcbiAqIEEgY29tcGxldGUgZXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIGNsYXNzIEZvbyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gKiAgIC4uLlxuICogICBfb25FbmRSZWFjaGVkKCkge1xuICogICAgIGlmICghdGhpcy5wcm9wcy5yZWxheS5oYXNNb3JlKCkgfHwgdGhpcy5wcm9wcy5yZWxheS5pc0xvYWRpbmcoKSkge1xuICogICAgICAgcmV0dXJuO1xuICogICAgIH1cbiAqICAgICB0aGlzLnByb3BzLnJlbGF5LmxvYWRNb3JlKDEwKTtcbiAqICAgfVxuICogICAuLi5cbiAqIH1cbiAqIGBgYFxuICpcbiAqICMgQ29ubmVjdGlvbiBDb25maWdcbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSwgZm9sbG93ZWQgYnkgZGV0YWlscyBvZiBlYWNoIGNvbmZpZyBwcm9wZXJ0eTpcbiAqXG4gKiBgYGBcbiAqIFJlYWN0UmVsYXlQYWdpbmF0aW9uQ29udGFpbmVyLmNyZWF0ZUNvbnRhaW5lcihcbiAqICAgQ29tcG9uZW50LFxuICogICB7XG4gKiAgICAgdXNlcjogZ3JhcGhxbGBmcmFnbWVudCBGcmllbmRzRnJhZ21lbnQgb24gVXNlciB7XG4gKiAgICAgICBmcmllbmRzKGFmdGVyOiAkYWZ0ZXJDdXJzb3IgZmlyc3Q6ICRjb3VudCkgQGNvbm5lY3Rpb24ge1xuICogICAgICAgICBlZGdlcyB7IC4uLiB9XG4gKiAgICAgICAgIHBhZ2VJbmZvIHtcbiAqICAgICAgICAgICBzdGFydEN1cnNvclxuICogICAgICAgICAgIGVuZEN1cnNvclxuICogICAgICAgICAgIGhhc05leHRQYWdlXG4gKiAgICAgICAgICAgaGFzUHJldmlvdXNQYWdlXG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICB9YCxcbiAqICAgfSxcbiAqICAge1xuICogICAgIGRpcmVjdGlvbjogJ2ZvcndhcmQnLFxuICogICAgIGdldENvbm5lY3Rpb25Gcm9tUHJvcHMocHJvcHMpIHtcbiAqICAgICAgIHJldHVybiBwcm9wcy51c2VyICYmIHByb3BzLnVzZXIuZnJpZW5kcztcbiAqICAgICB9LFxuICogICAgIGdldEZyYWdtZW50VmFyaWFibGVzKHZhcnMsIHRvdGFsQ291bnQpIHtcbiAqICAgICAgIC8vIFRoZSBjb21wb25lbnQgcHJlc3VtYWJseSB3YW50cyAqYWxsKiBlZGdlcywgbm90IGp1c3QgdGhvc2UgYWZ0ZXJcbiAqICAgICAgIC8vIHRoZSBjdXJzb3IsIHNvIG5vdGljZSB0aGF0IHdlIGRvbid0IHNldCAkYWZ0ZXJDdXJzb3IgaGVyZS5cbiAqICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgIC4uLnZhcnMsXG4gKiAgICAgICAgIGNvdW50OiB0b3RhbENvdW50LFxuICogICAgICAgfTtcbiAqICAgICB9LFxuICogICAgIGdldFZhcmlhYmxlcyhwcm9wcywge2NvdW50LCBjdXJzb3J9LCBmcmFnbWVudFZhcmlhYmxlcykge1xuICogICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgaWQ6IHByb3BzLnVzZXIuaWQsXG4gKiAgICAgICAgIGFmdGVyQ3Vyc29yOiBjdXJzb3IsXG4gKiAgICAgICAgIGNvdW50LFxuICogICAgICAgfSxcbiAqICAgICB9LFxuICogICAgIHF1ZXJ5OiBncmFwaHFsYFxuICogICAgICAgcXVlcnkgRnJpZW5kc1F1ZXJ5KCRpZDogSUQhLCAkYWZ0ZXJDdXJzb3I6IElELCAkY291bnQ6IEludCEpIHtcbiAqICAgICAgICAgbm9kZShpZDogJGlkKSB7XG4gKiAgICAgICAgICAgLi4uRnJpZW5kc0ZyYWdtZW50XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICBgLFxuICogICB9XG4gKiApO1xuICogYGBgXG4gKlxuICogIyMgQ29uZmlnIFByb3BlcnRpZXNcbiAqXG4gKiAtIGBkaXJlY3Rpb25gOiBFaXRoZXIgXCJmb3J3YXJkXCIgdG8gaW5kaWNhdGUgZm9yd2FyZCBwYWdpbmF0aW9uIHVzaW5nXG4gKiAgIGFmdGVyL2ZpcnN0LCBvciBcImJhY2t3YXJkXCIgdG8gaW5kaWNhdGUgYmFja3dhcmQgcGFnaW5hdGlvbiB1c2luZ1xuICogICBiZWZvcmUvbGFzdC5cbiAqIC0gYGdldENvbm5lY3Rpb25Gcm9tUHJvcHMocHJvcHMpYDogUGFnaW5hdGlvbkNvbnRhaW5lciBkb2Vzbid0IG1hZ2ljYWxseSBrbm93XG4gKiAgIHdoaWNoIGNvbm5lY3Rpb24gZGF0YSB5b3UgbWVhbiB0byBmZXRjaCBtb3JlIG9mIChhIGNvbnRhaW5lciBtaWdodCBmZXRjaFxuICogICBtdWx0aXBsZSBjb25uZWN0aW9ucywgYnV0IGNhbiBvbmx5IHBhZ2luYXRlIG9uZSBvZiB0aGVtKS4gVGhpcyBmdW5jdGlvbiBpc1xuICogICBnaXZlbiB0aGUgZnJhZ21lbnQgcHJvcHMgb25seSAobm90IGZ1bGwgcHJvcHMpLCBhbmQgc2hvdWxkIHJldHVybiB0aGVcbiAqICAgY29ubmVjdGlvbiBkYXRhLiBTZWUgdGhlIGFib3ZlIGV4YW1wbGUgdGhhdCByZXR1cm5zIHRoZSBmcmllbmRzIGRhdGEgdmlhXG4gKiAgIGBwcm9wcy51c2VyLmZyaWVuZHNgLlxuICogLSBgZ2V0RnJhZ21lbnRWYXJpYWJsZXMocHJldmlvdXNWYXJzLCB0b3RhbENvdW50KWA6IEdpdmVuIHRoZSBwcmV2aW91cyB2YXJpYWJsZXNcbiAqICAgYW5kIHRoZSBuZXcgdG90YWwgbnVtYmVyIG9mIGl0ZW1zLCBnZXQgdGhlIHZhcmlhYmxlcyB0byB1c2Ugd2hlbiByZWFkaW5nXG4gKiAgIHlvdXIgZnJhZ21lbnRzLiBUeXBpY2FsbHkgdGhpcyBtZWFucyBzZXR0aW5nIHdoYXRldmVyIHlvdXIgbG9jYWwgXCJjb3VudFwiXG4gKiAgIHZhcmlhYmxlIGlzIHRvIHRoZSB2YWx1ZSBvZiBgdG90YWxDb3VudGAuIFNlZSB0aGUgZXhhbXBsZS5cbiAqIC0gYGdldFZhcmlhYmxlcyhwcm9wcywge2NvdW50LCBjdXJzb3J9KWA6IEdldCB0aGUgdmFyaWFibGVzIHRvIHVzZSB3aGVuXG4gKiAgIGZldGNoaW5nIHRoZSBwYWdpbmF0aW9uIGBxdWVyeWAuIFlvdSBtYXkgZGV0ZXJtaW5lIHRoZSByb290IG9iamVjdCBpZCBmcm9tXG4gKiAgIHByb3BzIChzZWUgdGhlIGV4YW1wbGUgdGhhdCB1c2VzIGBwcm9wcy51c2VyLmlkYCkgYW5kIG1heSBhbHNvIHNldCB3aGF0ZXZlclxuICogICB2YXJpYWJsZXMgeW91IHVzZSBmb3IgdGhlIGFmdGVyL2ZpcnN0L2JlZm9yZS9sYXN0IGNhbGxzIGJhc2VkIG9uIHRoZSBjb3VudFxuICogICBhbmQgY3Vyc29yLlxuICogLSBgcXVlcnlgOiBBIHF1ZXJ5IHRvIHVzZSB3aGVuIGZldGNoaW5nIG1vcmUgY29ubmVjdGlvbiBkYXRhLiBUaGlzIHNob3VsZFxuICogICB0eXBpY2FsbHkgcmVmZXJlbmNlIG9uZSBvZiB0aGUgY29udGFpbmVyJ3MgZnJhZ21lbnQgKGFzIGluIHRoZSBleGFtcGxlKVxuICogICB0byBlbnN1cmUgdGhhdCBhbGwgdGhlIG5lY2Vzc2FyeSBmaWVsZHMgZm9yIHN1Yi1jb21wb25lbnRzIGFyZSBmZXRjaGVkLlxuICovXG5mdW5jdGlvbiBjcmVhdGVHZXRDb25uZWN0aW9uRnJvbVByb3BzKG1ldGFkYXRhKSB7XG4gIHZhciBwYXRoID0gbWV0YWRhdGEucGF0aDtcbiAgIXBhdGggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFJlbGF5UGFnaW5hdGlvbkNvbnRhaW5lcjogVW5hYmxlIHRvIHN5bnRoZXNpemUgYSAnICsgJ2dldENvbm5lY3Rpb25Gcm9tUHJvcHMgZnVuY3Rpb24uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIGRhdGEgPSBwcm9wc1ttZXRhZGF0YS5mcmFnbWVudE5hbWVdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBkYXRhID0gZGF0YVtwYXRoW2ldXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0RnJhZ21lbnRWYXJpYWJsZXMobWV0YWRhdGEpIHtcbiAgdmFyIGNvdW50VmFyaWFibGUgPSBtZXRhZGF0YS5jb3VudDtcbiAgIWNvdW50VmFyaWFibGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFJlbGF5UGFnaW5hdGlvbkNvbnRhaW5lcjogVW5hYmxlIHRvIHN5bnRoZXNpemUgYSAnICsgJ2dldEZyYWdtZW50VmFyaWFibGVzIGZ1bmN0aW9uLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtc3ByZWFkLWludGVyZmFjZV1cblxuICByZXR1cm4gZnVuY3Rpb24gKHByZXZWYXJzLCB0b3RhbENvdW50KSB7XG4gICAgcmV0dXJuICgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKHt9LCBwcmV2VmFycyksIHt9LCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHt9LCBjb3VudFZhcmlhYmxlLCB0b3RhbENvdW50KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRDb25uZWN0aW9uTWV0YWRhdGEoZnJhZ21lbnRzKSB7XG4gIHZhciBmb3VuZENvbm5lY3Rpb25NZXRhZGF0YSA9IG51bGw7XG4gIHZhciBpc1JlbGF5TW9kZXJuID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgZnJhZ21lbnROYW1lIGluIGZyYWdtZW50cykge1xuICAgIHZhciBmcmFnbWVudCA9IGZyYWdtZW50c1tmcmFnbWVudE5hbWVdO1xuICAgIHZhciBjb25uZWN0aW9uTWV0YWRhdGEgPSBmcmFnbWVudC5tZXRhZGF0YSAmJiBmcmFnbWVudC5tZXRhZGF0YS5jb25uZWN0aW9uOyAvLyBIQUNLOiBtZXRhZGF0YSBpcyBhbHdheXMgc2V0IHRvIGB1bmRlZmluZWRgIGluIGNsYXNzaWMuIEluIG1vZGVybiwgZXZlblxuICAgIC8vIGlmIGVtcHR5LCBpdCBpcyBzZXQgdG8gbnVsbCAobmV2ZXIgdW5kZWZpbmVkKS4gV2UgdXNlIHRoYXQga25vd2xlZ2UgdG9cbiAgICAvLyBjaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggY2xhc3NpYyBvciBtb2Rlcm5cblxuICAgIGlmIChmcmFnbWVudC5tZXRhZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpc1JlbGF5TW9kZXJuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoY29ubmVjdGlvbk1ldGFkYXRhKSB7XG4gICAgICAhKGNvbm5lY3Rpb25NZXRhZGF0YS5sZW5ndGggPT09IDEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXI6IE9ubHkgYSBzaW5nbGUgQGNvbm5lY3Rpb24gaXMgJyArICdzdXBwb3J0ZWQsIGAlc2AgaGFzICVzLicsIGZyYWdtZW50TmFtZSwgY29ubmVjdGlvbk1ldGFkYXRhLmxlbmd0aCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgISFmb3VuZENvbm5lY3Rpb25NZXRhZGF0YSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0UmVsYXlQYWdpbmF0aW9uQ29udGFpbmVyOiBPbmx5IGEgc2luZ2xlIGZyYWdtZW50IHdpdGggJyArICdAY29ubmVjdGlvbiBpcyBzdXBwb3J0ZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgZm91bmRDb25uZWN0aW9uTWV0YWRhdGEgPSAoMCwgX29iamVjdFNwcmVhZDNbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDNbXCJkZWZhdWx0XCJdKSh7fSwgY29ubmVjdGlvbk1ldGFkYXRhWzBdKSwge30sIHtcbiAgICAgICAgZnJhZ21lbnROYW1lOiBmcmFnbWVudE5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gICEoIWlzUmVsYXlNb2Rlcm4gfHwgZm91bmRDb25uZWN0aW9uTWV0YWRhdGEgIT09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXI6IEEgQGNvbm5lY3Rpb24gZGlyZWN0aXZlIG11c3QgYmUgcHJlc2VudC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBmb3VuZENvbm5lY3Rpb25NZXRhZGF0YSB8fCB7fTtcbn1cblxuZnVuY3Rpb24gdG9PYnNlcnZlcihvYnNlcnZlck9yQ2FsbGJhY2spIHtcbiAgcmV0dXJuIHR5cGVvZiBvYnNlcnZlck9yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicgPyB7XG4gICAgZXJyb3I6IG9ic2VydmVyT3JDYWxsYmFjayxcbiAgICBjb21wbGV0ZTogb2JzZXJ2ZXJPckNhbGxiYWNrLFxuICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZShzdWJzY3JpcHRpb24pIHtcbiAgICAgIHR5cGVvZiBvYnNlcnZlck9yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicgJiYgb2JzZXJ2ZXJPckNhbGxiYWNrKCk7XG4gICAgfVxuICB9IDogb2JzZXJ2ZXJPckNhbGxiYWNrIHx8IHt9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb250YWluZXJXaXRoRnJhZ21lbnRzKENvbXBvbmVudCwgZnJhZ21lbnRzLCBjb25uZWN0aW9uQ29uZmlnKSB7XG4gIHZhciBfY2xhc3MsIF90ZW1wO1xuXG4gIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpO1xuICB2YXIgY29udGFpbmVyTmFtZSA9IGdldENvbnRhaW5lck5hbWUoQ29tcG9uZW50KTtcbiAgdmFyIG1ldGFkYXRhID0gZmluZENvbm5lY3Rpb25NZXRhZGF0YShmcmFnbWVudHMpO1xuICB2YXIgZ2V0Q29ubmVjdGlvbkZyb21Qcm9wcyA9IGNvbm5lY3Rpb25Db25maWcuZ2V0Q29ubmVjdGlvbkZyb21Qcm9wcyB8fCBjcmVhdGVHZXRDb25uZWN0aW9uRnJvbVByb3BzKG1ldGFkYXRhKTtcbiAgdmFyIGRpcmVjdGlvbiA9IGNvbm5lY3Rpb25Db25maWcuZGlyZWN0aW9uIHx8IG1ldGFkYXRhLmRpcmVjdGlvbjtcbiAgIWRpcmVjdGlvbiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0UmVsYXlQYWdpbmF0aW9uQ29udGFpbmVyOiBVbmFibGUgdG8gaW5mZXIgZGlyZWN0aW9uIG9mIHRoZSAnICsgJ2Nvbm5lY3Rpb24sIHBvc3NpYmx5IGJlY2F1c2UgYm90aCBmaXJzdCBhbmQgbGFzdCBhcmUgcHJvdmlkZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2V0RnJhZ21lbnRWYXJpYWJsZXMgPSBjb25uZWN0aW9uQ29uZmlnLmdldEZyYWdtZW50VmFyaWFibGVzIHx8IGNyZWF0ZUdldEZyYWdtZW50VmFyaWFibGVzKG1ldGFkYXRhKTtcbiAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgKDAsIF9pbmhlcml0c0xvb3NlMltcImRlZmF1bHRcIl0pKF9jbGFzcywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBfY2xhc3MocHJvcHMpIHtcbiAgICAgIHZhciBfcHJvcHMkX19yb290SXNRdWVyeVIsIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpLCBcIl9oYW5kbGVGcmFnbWVudERhdGFVcGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZGF0YTogX3RoaXMuX3Jlc29sdmVyLnJlc29sdmUoKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcyksIFwiX2hhc01vcmVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29ubmVjdGlvbkRhdGEgPSBfdGhpcy5fZ2V0Q29ubmVjdGlvbkRhdGEoKTtcblxuICAgICAgICByZXR1cm4gISEoY29ubmVjdGlvbkRhdGEgJiYgY29ubmVjdGlvbkRhdGEuaGFzTW9yZSAmJiBjb25uZWN0aW9uRGF0YS5jdXJzb3IpO1xuICAgICAgfSk7XG4gICAgICAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSwgXCJfaXNMb2FkaW5nXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICEhX3RoaXMuX3JlZmV0Y2hTdWJzY3JpcHRpb247XG4gICAgICB9KTtcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpLCBcIl9yZWZldGNoQ29ubmVjdGlvblwiLCBmdW5jdGlvbiAodG90YWxDb3VudCwgb2JzZXJ2ZXJPckNhbGxiYWNrLCByZWZldGNoVmFyaWFibGVzKSB7XG4gICAgICAgIGlmICghX3RoaXMuX2NhbkZldGNoUGFnZSgncmVmZXRjaENvbm5lY3Rpb24nKSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiBkaXNwb3NlKCkge31cbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuX3JlZmV0Y2hWYXJpYWJsZXMgPSByZWZldGNoVmFyaWFibGVzO1xuICAgICAgICB2YXIgcGFnaW5hdGluZ1ZhcmlhYmxlcyA9IHtcbiAgICAgICAgICBjb3VudDogdG90YWxDb3VudCxcbiAgICAgICAgICBjdXJzb3I6IG51bGwsXG4gICAgICAgICAgdG90YWxDb3VudDogdG90YWxDb3VudFxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBmZXRjaCA9IF90aGlzLl9mZXRjaFBhZ2UocGFnaW5hdGluZ1ZhcmlhYmxlcywgdG9PYnNlcnZlcihvYnNlcnZlck9yQ2FsbGJhY2spLCB7XG4gICAgICAgICAgZm9yY2U6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXNwb3NlOiBmZXRjaC51bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSwgXCJfbG9hZE1vcmVcIiwgZnVuY3Rpb24gKHBhZ2VTaXplLCBvYnNlcnZlck9yQ2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5fY2FuRmV0Y2hQYWdlKCdsb2FkTW9yZScpKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7fVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2JzZXJ2ZXIgPSB0b09ic2VydmVyKG9ic2VydmVyT3JDYWxsYmFjayk7XG5cbiAgICAgICAgdmFyIGNvbm5lY3Rpb25EYXRhID0gX3RoaXMuX2dldENvbm5lY3Rpb25EYXRhKCk7XG5cbiAgICAgICAgaWYgKCFjb25uZWN0aW9uRGF0YSkge1xuICAgICAgICAgIE9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgICAgICByZXR1cm4gc2luay5jb21wbGV0ZSgpO1xuICAgICAgICAgIH0pLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG90YWxDb3VudCA9IGNvbm5lY3Rpb25EYXRhLmVkZ2VDb3VudCArIHBhZ2VTaXplO1xuXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZm9yY2UpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuX3JlZmV0Y2hDb25uZWN0aW9uKHRvdGFsQ291bnQsIG9ic2VydmVyT3JDYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX0Nvbm5lY3Rpb25JbnRlcmZhY2UkID0gQ29ubmVjdGlvbkludGVyZmFjZS5nZXQoKSxcbiAgICAgICAgICAgIEVORF9DVVJTT1IgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQuRU5EX0NVUlNPUixcbiAgICAgICAgICAgIFNUQVJUX0NVUlNPUiA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJC5TVEFSVF9DVVJTT1I7XG5cbiAgICAgICAgdmFyIGN1cnNvciA9IGNvbm5lY3Rpb25EYXRhLmN1cnNvcjtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjdXJzb3IgIT0gbnVsbCAmJiBjdXJzb3IgIT09ICcnLCAnUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXI6IENhbm5vdCBgbG9hZE1vcmVgIHdpdGhvdXQgdmFsaWQgYCVzYCAoZ290IGAlc2ApJywgZGlyZWN0aW9uID09PSBGT1JXQVJEID8gRU5EX0NVUlNPUiA6IFNUQVJUX0NVUlNPUiwgY3Vyc29yKSA6IHZvaWQgMDtcbiAgICAgICAgdmFyIHBhZ2luYXRpbmdWYXJpYWJsZXMgPSB7XG4gICAgICAgICAgY291bnQ6IHBhZ2VTaXplLFxuICAgICAgICAgIGN1cnNvcjogY3Vyc29yLFxuICAgICAgICAgIHRvdGFsQ291bnQ6IHRvdGFsQ291bnRcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZmV0Y2ggPSBfdGhpcy5fZmV0Y2hQYWdlKHBhZ2luYXRpbmdWYXJpYWJsZXMsIG9ic2VydmVyLCBvcHRpb25zKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpc3Bvc2U6IGZldGNoLnVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHZhciByZWxheUNvbnRleHQgPSBhc3NlcnRSZWxheUNvbnRleHQocHJvcHMuX19yZWxheUNvbnRleHQpO1xuICAgICAgdmFyIHJvb3RJc1F1ZXJ5UmVuZGVyZXIgPSAoX3Byb3BzJF9fcm9vdElzUXVlcnlSID0gcHJvcHMuX19yb290SXNRdWVyeVJlbmRlcmVyKSAhPT0gbnVsbCAmJiBfcHJvcHMkX19yb290SXNRdWVyeVIgIT09IHZvaWQgMCA/IF9wcm9wcyRfX3Jvb3RJc1F1ZXJ5UiA6IGZhbHNlO1xuICAgICAgX3RoaXMuX2lzQVJlcXVlc3RJbkZsaWdodCA9IGZhbHNlO1xuICAgICAgX3RoaXMuX3JlZmV0Y2hTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgX3RoaXMuX3JlZmV0Y2hWYXJpYWJsZXMgPSBudWxsO1xuICAgICAgX3RoaXMuX3Jlc29sdmVyID0gY3JlYXRlRnJhZ21lbnRTcGVjUmVzb2x2ZXIocmVsYXlDb250ZXh0LCBjb250YWluZXJOYW1lLCBmcmFnbWVudHMsIHByb3BzLCByb290SXNRdWVyeVJlbmRlcmVyLCBfdGhpcy5faGFuZGxlRnJhZ21lbnREYXRhVXBkYXRlKTtcbiAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICBkYXRhOiBfdGhpcy5fcmVzb2x2ZXIucmVzb2x2ZSgpLFxuICAgICAgICBwcmV2Q29udGV4dDogcmVsYXlDb250ZXh0LFxuICAgICAgICBjb250ZXh0Rm9yQ2hpbGRyZW46IHJlbGF5Q29udGV4dCxcbiAgICAgICAgcmVsYXlQcm9wOiBfdGhpcy5fYnVpbGRSZWxheVByb3AocmVsYXlDb250ZXh0KVxuICAgICAgfTtcbiAgICAgIF90aGlzLl9pc1VubW91bnRlZCA9IGZhbHNlO1xuICAgICAgX3RoaXMuX2hhc0ZldGNoZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gX2NsYXNzLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5faXNVbm1vdW50ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiBuZXcgcHJvcHMgYXJlIHJlY2VpdmVkLCByZWFkIGRhdGEgZm9yIHRoZSBuZXcgcHJvcHMgYW5kIHN1YnNjcmliZVxuICAgICAqIGZvciB1cGRhdGVzLiBQcm9wcyBtYXkgYmUgdGhlIHNhbWUgaW4gd2hpY2ggY2FzZSBwcmV2aW91cyBkYXRhIGFuZFxuICAgICAqIHN1YnNjcmlwdGlvbnMgY2FuIGJlIHJldXNlZC5cbiAgICAgKi9cbiAgICA7XG5cbiAgICBfcHJvdG8uVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBfbmV4dFByb3BzJF9fcm9vdElzUXU7XG5cbiAgICAgIHZhciByZWxheUNvbnRleHQgPSBhc3NlcnRSZWxheUNvbnRleHQobmV4dFByb3BzLl9fcmVsYXlDb250ZXh0KTtcbiAgICAgIHZhciByb290SXNRdWVyeVJlbmRlcmVyID0gKF9uZXh0UHJvcHMkX19yb290SXNRdSA9IG5leHRQcm9wcy5fX3Jvb3RJc1F1ZXJ5UmVuZGVyZXIpICE9PSBudWxsICYmIF9uZXh0UHJvcHMkX19yb290SXNRdSAhPT0gdm9pZCAwID8gX25leHRQcm9wcyRfX3Jvb3RJc1F1IDogZmFsc2U7XG4gICAgICB2YXIgcHJldklEcyA9IGdldERhdGFJRHNGcm9tT2JqZWN0KGZyYWdtZW50cywgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgbmV4dElEcyA9IGdldERhdGFJRHNGcm9tT2JqZWN0KGZyYWdtZW50cywgbmV4dFByb3BzKTtcbiAgICAgIHZhciBwcmV2Um9vdFZhcmlhYmxlcyA9IGdldFJvb3RWYXJpYWJsZXNGb3JGcmFnbWVudHMoZnJhZ21lbnRzLCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBuZXh0Um9vdFZhcmlhYmxlcyA9IGdldFJvb3RWYXJpYWJsZXNGb3JGcmFnbWVudHMoZnJhZ21lbnRzLCBuZXh0UHJvcHMpOyAvLyBJZiB0aGUgZW52aXJvbm1lbnQgaGFzIGNoYW5nZWQgb3IgcHJvcHMgcG9pbnQgdG8gbmV3IHJlY29yZHMgdGhlblxuICAgICAgLy8gcHJldmlvdXNseSBmZXRjaGVkIGRhdGEgYW5kIGFueSBwZW5kaW5nIGZldGNoZXMgbm8gbG9uZ2VyIGFwcGx5OlxuICAgICAgLy8gLSBFeGlzdGluZyByZWZlcmVuY2VzIGFyZSBvbiB0aGUgb2xkIGVudmlyb25tZW50LlxuICAgICAgLy8gLSBFeGlzdGluZyByZWZlcmVuY2VzIGFyZSBiYXNlZCBvbiBvbGQgdmFyaWFibGVzLlxuICAgICAgLy8gLSBQZW5kaW5nIGZldGNoZXMgYXJlIGZvciB0aGUgcHJldmlvdXMgcmVjb3Jkcy5cblxuICAgICAgaWYgKHJlbGF5Q29udGV4dC5lbnZpcm9ubWVudCAhPT0gdGhpcy5zdGF0ZS5wcmV2Q29udGV4dC5lbnZpcm9ubWVudCB8fCAhYXJlRXF1YWwocHJldlJvb3RWYXJpYWJsZXMsIG5leHRSb290VmFyaWFibGVzKSB8fCAhYXJlRXF1YWwocHJldklEcywgbmV4dElEcykpIHtcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpOyAvLyBDaGlsZCBjb250YWluZXJzIHJlbHkgb24gY29udGV4dC5yZWxheSBiZWluZyBtdXRhdGVkIChmb3IgZ0RTRlApLlxuXG5cbiAgICAgICAgdGhpcy5fcmVzb2x2ZXIgPSBjcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlcihyZWxheUNvbnRleHQsIGNvbnRhaW5lck5hbWUsIGZyYWdtZW50cywgbmV4dFByb3BzLCByb290SXNRdWVyeVJlbmRlcmVyLCB0aGlzLl9oYW5kbGVGcmFnbWVudERhdGFVcGRhdGUpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBwcmV2Q29udGV4dDogcmVsYXlDb250ZXh0LFxuICAgICAgICAgIGNvbnRleHRGb3JDaGlsZHJlbjogcmVsYXlDb250ZXh0LFxuICAgICAgICAgIHJlbGF5UHJvcDogdGhpcy5fYnVpbGRSZWxheVByb3AocmVsYXlDb250ZXh0KVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2hhc0ZldGNoZWQpIHtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZXIuc2V0UHJvcHMobmV4dFByb3BzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9yZXNvbHZlci5yZXNvbHZlKCk7XG5cbiAgICAgIGlmIChkYXRhICE9PSB0aGlzLnN0YXRlLmRhdGEpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLl9pc1VubW91bnRlZCA9IHRydWU7XG5cbiAgICAgIHRoaXMuX2NsZWFudXAoKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgICAgLy8gU2hvcnQtY2lyY3VpdCBpZiBhbnkgUmVsYXktcmVsYXRlZCBkYXRhIGhhcyBjaGFuZ2VkXG4gICAgICBpZiAobmV4dFN0YXRlLmRhdGEgIT09IHRoaXMuc3RhdGUuZGF0YSB8fCBuZXh0U3RhdGUucmVsYXlQcm9wICE9PSB0aGlzLnN0YXRlLnJlbGF5UHJvcCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gLy8gT3RoZXJ3aXNlLCBmb3IgY29udmVuaWVuY2Ugc2hvcnQtY2lyY3VpdCBpZiBhbGwgbm9uLVJlbGF5IHByb3BzXG4gICAgICAvLyBhcmUgc2NhbGFyIGFuZCBlcXVhbFxuXG5cbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMobmV4dFByb3BzKTtcblxuICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGtleXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgIHZhciBfa2V5ID0ga2V5c1tpaV07XG5cbiAgICAgICAgaWYgKF9rZXkgPT09ICdfX3JlbGF5Q29udGV4dCcpIHtcbiAgICAgICAgICBpZiAobmV4dFN0YXRlLnByZXZDb250ZXh0LmVudmlyb25tZW50ICE9PSB0aGlzLnN0YXRlLnByZXZDb250ZXh0LmVudmlyb25tZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFmcmFnbWVudHMuaGFzT3duUHJvcGVydHkoX2tleSkgJiYgIWlzU2NhbGFyQW5kRXF1YWwobmV4dFByb3BzW19rZXldLCB0aGlzLnByb3BzW19rZXldKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9idWlsZFJlbGF5UHJvcCA9IGZ1bmN0aW9uIF9idWlsZFJlbGF5UHJvcChyZWxheUNvbnRleHQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhhc01vcmU6IHRoaXMuX2hhc01vcmUsXG4gICAgICAgIGlzTG9hZGluZzogdGhpcy5faXNMb2FkaW5nLFxuICAgICAgICBsb2FkTW9yZTogdGhpcy5fbG9hZE1vcmUsXG4gICAgICAgIHJlZmV0Y2hDb25uZWN0aW9uOiB0aGlzLl9yZWZldGNoQ29ubmVjdGlvbixcbiAgICAgICAgZW52aXJvbm1lbnQ6IHJlbGF5Q29udGV4dC5lbnZpcm9ubWVudFxuICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVuZGVyIG5ldyBkYXRhIGZvciB0aGUgZXhpc3RpbmcgcHJvcHMvY29udGV4dC5cbiAgICAgKi9cbiAgICA7XG5cbiAgICBfcHJvdG8uX2dldENvbm5lY3Rpb25EYXRhID0gZnVuY3Rpb24gX2dldENvbm5lY3Rpb25EYXRhKCkge1xuICAgICAgLy8gRXh0cmFjdCBjb25uZWN0aW9uIGRhdGEgYW5kIHZlcmlmeSB0aGVyZSBhcmUgbW9yZSBlZGdlcyB0byBmZXRjaFxuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBfID0gX3RoaXMkcHJvcHMuY29tcG9uZW50UmVmLFxuICAgICAgICAgIHJlc3RQcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTJbXCJkZWZhdWx0XCJdKShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50UmVmXCJdKTtcbiAgICAgIHZhciBwcm9wcyA9ICgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKHt9LCByZXN0UHJvcHMpLCB0aGlzLnN0YXRlLmRhdGEpO1xuICAgICAgdmFyIGNvbm5lY3Rpb25EYXRhID0gZ2V0Q29ubmVjdGlvbkZyb21Qcm9wcyhwcm9wcyk7XG5cbiAgICAgIGlmIChjb25uZWN0aW9uRGF0YSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgX0Nvbm5lY3Rpb25JbnRlcmZhY2UkMiA9IENvbm5lY3Rpb25JbnRlcmZhY2UuZ2V0KCksXG4gICAgICAgICAgRURHRVMgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQyLkVER0VTLFxuICAgICAgICAgIFBBR0VfSU5GTyA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJDIuUEFHRV9JTkZPLFxuICAgICAgICAgIEhBU19ORVhUX1BBR0UgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQyLkhBU19ORVhUX1BBR0UsXG4gICAgICAgICAgSEFTX1BSRVZfUEFHRSA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJDIuSEFTX1BSRVZfUEFHRSxcbiAgICAgICAgICBFTkRfQ1VSU09SID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkMi5FTkRfQ1VSU09SLFxuICAgICAgICAgIFNUQVJUX0NVUlNPUiA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJDIuU1RBUlRfQ1VSU09SO1xuXG4gICAgICAhKHR5cGVvZiBjb25uZWN0aW9uRGF0YSA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXI6IEV4cGVjdGVkIGBnZXRDb25uZWN0aW9uRnJvbVByb3BzKClgIGluIGAlc2AnICsgJ3RvIHJldHVybiBgbnVsbGAgb3IgYSBwbGFpbiBvYmplY3Qgd2l0aCAlcyBhbmQgJXMgcHJvcGVydGllcywgZ290IGAlc2AuJywgY29tcG9uZW50TmFtZSwgRURHRVMsIFBBR0VfSU5GTywgY29ubmVjdGlvbkRhdGEpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBlZGdlcyA9IGNvbm5lY3Rpb25EYXRhW0VER0VTXTtcbiAgICAgIHZhciBwYWdlSW5mbyA9IGNvbm5lY3Rpb25EYXRhW1BBR0VfSU5GT107XG5cbiAgICAgIGlmIChlZGdlcyA9PSBudWxsIHx8IHBhZ2VJbmZvID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgICFBcnJheS5pc0FycmF5KGVkZ2VzKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0UmVsYXlQYWdpbmF0aW9uQ29udGFpbmVyOiBFeHBlY3RlZCBgZ2V0Q29ubmVjdGlvbkZyb21Qcm9wcygpYCBpbiBgJXNgJyArICd0byByZXR1cm4gYW4gb2JqZWN0IHdpdGggJXM6IEFycmF5LCBnb3QgYCVzYC4nLCBjb21wb25lbnROYW1lLCBFREdFUywgZWRnZXMpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICEodHlwZW9mIHBhZ2VJbmZvID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFJlbGF5UGFnaW5hdGlvbkNvbnRhaW5lcjogRXhwZWN0ZWQgYGdldENvbm5lY3Rpb25Gcm9tUHJvcHMoKWAgaW4gYCVzYCcgKyAndG8gcmV0dXJuIGFuIG9iamVjdCB3aXRoICVzOiBPYmplY3QsIGdvdCBgJXNgLicsIGNvbXBvbmVudE5hbWUsIFBBR0VfSU5GTywgcGFnZUluZm8pIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBoYXNNb3JlID0gZGlyZWN0aW9uID09PSBGT1JXQVJEID8gcGFnZUluZm9bSEFTX05FWFRfUEFHRV0gOiBwYWdlSW5mb1tIQVNfUFJFVl9QQUdFXTtcbiAgICAgIHZhciBjdXJzb3IgPSBkaXJlY3Rpb24gPT09IEZPUldBUkQgPyBwYWdlSW5mb1tFTkRfQ1VSU09SXSA6IHBhZ2VJbmZvW1NUQVJUX0NVUlNPUl07XG5cbiAgICAgIGlmICh0eXBlb2YgaGFzTW9yZSAhPT0gJ2Jvb2xlYW4nIHx8IGVkZ2VzLmxlbmd0aCAhPT0gMCAmJiB0eXBlb2YgY3Vyc29yID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXI6IENhbm5vdCBwYWdpbmF0ZSB3aXRob3V0ICVzIGZpZWxkcyBpbiBgJXNgLiAnICsgJ0JlIHN1cmUgdG8gZmV0Y2ggJXMgKGdvdCBgJXNgKSBhbmQgJXMgKGdvdCBgJXNgKS4nLCBQQUdFX0lORk8sIGNvbXBvbmVudE5hbWUsIGRpcmVjdGlvbiA9PT0gRk9SV0FSRCA/IEhBU19ORVhUX1BBR0UgOiBIQVNfUFJFVl9QQUdFLCBoYXNNb3JlLCBkaXJlY3Rpb24gPT09IEZPUldBUkQgPyBFTkRfQ1VSU09SIDogU1RBUlRfQ1VSU09SLCBjdXJzb3IpIDogdm9pZCAwO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3Vyc29yOiBjdXJzb3IsXG4gICAgICAgIGVkZ2VDb3VudDogZWRnZXMubGVuZ3RoLFxuICAgICAgICBoYXNNb3JlOiBoYXNNb3JlXG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFF1ZXJ5RmV0Y2hlciA9IGZ1bmN0aW9uIF9nZXRRdWVyeUZldGNoZXIoKSB7XG4gICAgICBpZiAoIXRoaXMuX3F1ZXJ5RmV0Y2hlcikge1xuICAgICAgICB0aGlzLl9xdWVyeUZldGNoZXIgPSBuZXcgUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlcigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fcXVlcnlGZXRjaGVyO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2NhbkZldGNoUGFnZSA9IGZ1bmN0aW9uIF9jYW5GZXRjaFBhZ2UobWV0aG9kKSB7XG4gICAgICBpZiAodGhpcy5faXNVbm1vdW50ZWQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlYWN0UmVsYXlQYWdpbmF0aW9uQ29udGFpbmVyOiBVbmV4cGVjdGVkIGNhbGwgb2YgYCVzYCAnICsgJ29uIHVubW91bnRlZCBjb250YWluZXIgYCVzYC4gSXQgbG9va3MgbGlrZSBzb21lIGluc3RhbmNlcyAnICsgJ29mIHlvdXIgY29udGFpbmVyIHN0aWxsIHRyeWluZyB0byBmZXRjaCBkYXRhIGJ1dCB0aGV5IGFscmVhZHkgJyArICd1bm1vdW50ZWQuIFBsZWFzZSBtYWtlIHN1cmUgeW91IGNsZWFyIGFsbCB0aW1lcnMsIGludGVydmFscywgYXN5bmMgJyArICdjYWxscywgZXRjIHRoYXQgbWF5IHRyaWdnZXIgYCVzYCBjYWxsLicsIG1ldGhvZCwgY29udGFpbmVyTmFtZSwgbWV0aG9kKSA6IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9mZXRjaFBhZ2UgPSBmdW5jdGlvbiBfZmV0Y2hQYWdlKHBhZ2luYXRpbmdWYXJpYWJsZXMsIG9ic2VydmVyLCBvcHRpb25zKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9hc3NlcnRSZWxheUNvbnRleHQgPSBhc3NlcnRSZWxheUNvbnRleHQodGhpcy5wcm9wcy5fX3JlbGF5Q29udGV4dCksXG4gICAgICAgICAgZW52aXJvbm1lbnQgPSBfYXNzZXJ0UmVsYXlDb250ZXh0LmVudmlyb25tZW50O1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBfID0gX3RoaXMkcHJvcHMyLmNvbXBvbmVudFJlZixcbiAgICAgICAgICBfX3JlbGF5Q29udGV4dCA9IF90aGlzJHByb3BzMi5fX3JlbGF5Q29udGV4dCxcbiAgICAgICAgICBfX3Jvb3RJc1F1ZXJ5UmVuZGVyZXIgPSBfdGhpcyRwcm9wczIuX19yb290SXNRdWVyeVJlbmRlcmVyLFxuICAgICAgICAgIHJlc3RQcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTJbXCJkZWZhdWx0XCJdKShfdGhpcyRwcm9wczIsIFtcImNvbXBvbmVudFJlZlwiLCBcIl9fcmVsYXlDb250ZXh0XCIsIFwiX19yb290SXNRdWVyeVJlbmRlcmVyXCJdKTtcbiAgICAgIHZhciBwcm9wcyA9ICgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKHt9LCByZXN0UHJvcHMpLCB0aGlzLnN0YXRlLmRhdGEpO1xuICAgICAgdmFyIGZyYWdtZW50VmFyaWFibGVzO1xuICAgICAgdmFyIHJvb3RWYXJpYWJsZXMgPSBnZXRSb290VmFyaWFibGVzRm9yRnJhZ21lbnRzKGZyYWdtZW50cywgcmVzdFByb3BzKTsgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtc3ByZWFkLWludGVyZmFjZV1cblxuICAgICAgZnJhZ21lbnRWYXJpYWJsZXMgPSBnZXRWYXJpYWJsZXNGcm9tT2JqZWN0KGZyYWdtZW50cywgcmVzdFByb3BzKTsgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtc3ByZWFkLWludGVyZmFjZV1cblxuICAgICAgZnJhZ21lbnRWYXJpYWJsZXMgPSAoMCwgX29iamVjdFNwcmVhZDNbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDNbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDNbXCJkZWZhdWx0XCJdKSh7fSwgcm9vdFZhcmlhYmxlcyksIGZyYWdtZW50VmFyaWFibGVzKSwgdGhpcy5fcmVmZXRjaFZhcmlhYmxlcyk7XG4gICAgICB2YXIgZmV0Y2hWYXJpYWJsZXMgPSBjb25uZWN0aW9uQ29uZmlnLmdldFZhcmlhYmxlcyhwcm9wcywge1xuICAgICAgICBjb3VudDogcGFnaW5hdGluZ1ZhcmlhYmxlcy5jb3VudCxcbiAgICAgICAgY3Vyc29yOiBwYWdpbmF0aW5nVmFyaWFibGVzLmN1cnNvclxuICAgICAgfSwgZnJhZ21lbnRWYXJpYWJsZXMpO1xuICAgICAgISh0eXBlb2YgZmV0Y2hWYXJpYWJsZXMgPT09ICdvYmplY3QnICYmIGZldGNoVmFyaWFibGVzICE9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0UmVsYXlQYWdpbmF0aW9uQ29udGFpbmVyOiBFeHBlY3RlZCBgZ2V0VmFyaWFibGVzKClgIHRvICcgKyAncmV0dXJuIGFuIG9iamVjdCwgZ290IGAlc2AgaW4gYCVzYC4nLCBmZXRjaFZhcmlhYmxlcywgY29tcG9uZW50TmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC1zcHJlYWQtaW50ZXJmYWNlXVxuXG4gICAgICBmZXRjaFZhcmlhYmxlcyA9ICgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKHt9LCBmZXRjaFZhcmlhYmxlcyksIHRoaXMuX3JlZmV0Y2hWYXJpYWJsZXMpO1xuICAgICAgZnJhZ21lbnRWYXJpYWJsZXMgPSAoMCwgX29iamVjdFNwcmVhZDNbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDNbXCJkZWZhdWx0XCJdKSh7fSwgZmV0Y2hWYXJpYWJsZXMpLCBmcmFnbWVudFZhcmlhYmxlcyk7XG4gICAgICB2YXIgY2FjaGVDb25maWcgPSBvcHRpb25zID8ge1xuICAgICAgICBmb3JjZTogISFvcHRpb25zLmZvcmNlXG4gICAgICB9IDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoY2FjaGVDb25maWcgIT0gbnVsbCAmJiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1ldGFkYXRhKSAhPSBudWxsKSB7XG4gICAgICAgIGNhY2hlQ29uZmlnLm1ldGFkYXRhID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1ldGFkYXRhO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVxdWVzdCA9IGdldFJlcXVlc3QoY29ubmVjdGlvbkNvbmZpZy5xdWVyeSk7XG4gICAgICB2YXIgb3BlcmF0aW9uID0gY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcihyZXF1ZXN0LCBmZXRjaFZhcmlhYmxlcywgY2FjaGVDb25maWcpO1xuICAgICAgdmFyIHJlZmV0Y2hTdWJzY3JpcHRpb24gPSBudWxsO1xuXG4gICAgICBpZiAodGhpcy5fcmVmZXRjaFN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2hhc0ZldGNoZWQgPSB0cnVlO1xuXG4gICAgICB2YXIgb25OZXh0ID0gZnVuY3Rpb24gb25OZXh0KHBheWxvYWQsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBwcmV2RGF0YSA9IF90aGlzMi5fcmVzb2x2ZXIucmVzb2x2ZSgpO1xuXG4gICAgICAgIF90aGlzMi5fcmVzb2x2ZXIuc2V0VmFyaWFibGVzKGdldEZyYWdtZW50VmFyaWFibGVzKGZyYWdtZW50VmFyaWFibGVzLCBwYWdpbmF0aW5nVmFyaWFibGVzLnRvdGFsQ291bnQpLCBvcGVyYXRpb24ucmVxdWVzdC5ub2RlKTtcblxuICAgICAgICB2YXIgbmV4dERhdGEgPSBfdGhpczIuX3Jlc29sdmVyLnJlc29sdmUoKTsgLy8gV29ya2Fyb3VuZCBzbGlnaHRseSBkaWZmZXJlbnQgaGFuZGxpbmcgZm9yIGNvbm5lY3Rpb24gaW4gZGlmZmVyZW50XG4gICAgICAgIC8vIGNvcmUgaW1wbGVtZW50YXRpb25zOlxuICAgICAgICAvLyAtIENsYXNzaWMgY29yZSByZXF1aXJlcyB0aGUgY291bnQgdG8gYmUgZXhwbGljaXRseSBpbmNyZW1lbnRlZFxuICAgICAgICAvLyAtIE1vZGVybiBjb3JlIGF1dG9tYXRpY2FsbHkgYXBwZW5kcyBuZXcgaXRlbXMsIHVwZGF0aW5nIHRoZSBjb3VudFxuICAgICAgICAvLyAgIGlzbid0IHJlcXVpcmVkIHRvIHNlZSBuZXcgZGF0YS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gYHNldFN0YXRlYCBpcyBvbmx5IHJlcXVpcmVkIGlmIGNoYW5naW5nIHRoZSB2YXJpYWJsZXMgd291bGQgY2hhbmdlIHRoZVxuICAgICAgICAvLyByZXNvbHZlZCBkYXRhLlxuICAgICAgICAvLyBUT0RPICMxNDg5NDcyNTogcmVtb3ZlIFBhZ2luYXRpb25Db250YWluZXIgZXF1YWwgY2hlY2tcblxuXG4gICAgICAgIGlmICghYXJlRXF1YWwocHJldkRhdGEsIG5leHREYXRhKSkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBkYXRhOiBuZXh0RGF0YSxcbiAgICAgICAgICAgIGNvbnRleHRGb3JDaGlsZHJlbjoge1xuICAgICAgICAgICAgICBlbnZpcm9ubWVudDogX3RoaXMyLnByb3BzLl9fcmVsYXlDb250ZXh0LmVudmlyb25tZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgY29tcGxldGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBjbGVhbnVwID0gZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgaWYgKF90aGlzMi5fcmVmZXRjaFN1YnNjcmlwdGlvbiA9PT0gcmVmZXRjaFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgIF90aGlzMi5fcmVmZXRjaFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgX3RoaXMyLl9pc0FSZXF1ZXN0SW5GbGlnaHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5faXNBUmVxdWVzdEluRmxpZ2h0ID0gdHJ1ZTtcbiAgICAgIHJlZmV0Y2hTdWJzY3JpcHRpb24gPSB0aGlzLl9nZXRRdWVyeUZldGNoZXIoKS5leGVjdXRlKHtcbiAgICAgICAgZW52aXJvbm1lbnQ6IGVudmlyb25tZW50LFxuICAgICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgICAgcHJlc2VydmVQcmV2aW91c1JlZmVyZW5jZXM6IHRydWVcbiAgICAgIH0pLm1lcmdlTWFwKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgICAgICAgIG9uTmV4dChwYXlsb2FkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzaW5rLm5leHQoKTsgLy8gcGFzcyB2b2lkIHRvIHB1YmxpYyBvYnNlcnZlcidzIGBuZXh0YFxuXG4gICAgICAgICAgICBzaW5rLmNvbXBsZXRlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSkgLy8gdXNlIGRvIGluc3RlYWQgb2YgZmluYWxseSBzbyB0aGF0IG9ic2VydmVyJ3MgYGNvbXBsZXRlYCBmaXJlcyBhZnRlciBjbGVhbnVwXG4gICAgICBbXCJkb1wiXSh7XG4gICAgICAgIGVycm9yOiBjbGVhbnVwLFxuICAgICAgICBjb21wbGV0ZTogY2xlYW51cCxcbiAgICAgICAgdW5zdWJzY3JpYmU6IGNsZWFudXBcbiAgICAgIH0pLnN1YnNjcmliZShvYnNlcnZlciB8fCB7fSk7XG4gICAgICB0aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uID0gdGhpcy5faXNBUmVxdWVzdEluRmxpZ2h0ID8gcmVmZXRjaFN1YnNjcmlwdGlvbiA6IG51bGw7XG4gICAgICByZXR1cm4gcmVmZXRjaFN1YnNjcmlwdGlvbjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9jbGVhbnVwID0gZnVuY3Rpb24gX2NsZWFudXAoKSB7XG4gICAgICB0aGlzLl9yZXNvbHZlci5kaXNwb3NlKCk7XG5cbiAgICAgIHRoaXMuX3JlZmV0Y2hWYXJpYWJsZXMgPSBudWxsO1xuICAgICAgdGhpcy5faGFzRmV0Y2hlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAodGhpcy5fcmVmZXRjaFN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cbiAgICAgICAgdGhpcy5fcmVmZXRjaFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lzQVJlcXVlc3RJbkZsaWdodCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcXVlcnlGZXRjaGVyKSB7XG4gICAgICAgIHRoaXMuX3F1ZXJ5RmV0Y2hlci5kaXNwb3NlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb21wb25lbnRSZWYgPSBfdGhpcyRwcm9wczMuY29tcG9uZW50UmVmLFxuICAgICAgICAgIF9fcmVsYXlDb250ZXh0ID0gX3RoaXMkcHJvcHMzLl9fcmVsYXlDb250ZXh0LFxuICAgICAgICAgIF9fcm9vdElzUXVlcnlSZW5kZXJlciA9IF90aGlzJHByb3BzMy5fX3Jvb3RJc1F1ZXJ5UmVuZGVyZXIsXG4gICAgICAgICAgcHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyW1wiZGVmYXVsdFwiXSkoX3RoaXMkcHJvcHMzLCBbXCJjb21wb25lbnRSZWZcIiwgXCJfX3JlbGF5Q29udGV4dFwiLCBcIl9fcm9vdElzUXVlcnlSZW5kZXJlclwiXSk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3RSZWxheUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuY29udGV4dEZvckNoaWxkcmVuXG4gICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgcHJvcHMsIHRoaXMuc3RhdGUuZGF0YSwge1xuICAgICAgICByZWY6IGNvbXBvbmVudFJlZixcbiAgICAgICAgcmVsYXk6IHRoaXMuc3RhdGUucmVsYXlQcm9wXG4gICAgICB9KSkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX2NsYXNzO1xuICB9KFJlYWN0LkNvbXBvbmVudCksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX2NsYXNzLCBcImRpc3BsYXlOYW1lXCIsIGNvbnRhaW5lck5hbWUpLCBfdGVtcDtcbn1cbi8qKlxuICogV3JhcCB0aGUgYmFzaWMgYGNyZWF0ZUNvbnRhaW5lcigpYCBmdW5jdGlvbiB3aXRoIGxvZ2ljIHRvIGFkYXB0IHRvIHRoZVxuICogYGNvbnRleHQucmVsYXkuZW52aXJvbm1lbnRgIGluIHdoaWNoIGl0IGlzIHJlbmRlcmVkLiBTcGVjaWZpY2FsbHksIHRoZVxuICogZXh0cmFjdGlvbiBvZiB0aGUgZW52aXJvbm1lbnQtc3BlY2lmaWMgdmVyc2lvbiBvZiBmcmFnbWVudHMgaW4gdGhlXG4gKiBgZnJhZ21lbnRTcGVjYCBpcyBtZW1vaXplZCBvbmNlIHBlciBlbnZpcm9ubWVudCwgcmF0aGVyIHRoYW4gb25jZSBwZXJcbiAqIGluc3RhbmNlIG9mIHRoZSBjb250YWluZXIgY29uc3RydWN0ZWQvcmVuZGVyZWQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVDb250YWluZXIoQ29tcG9uZW50LCBmcmFnbWVudFNwZWMsIGNvbm5lY3Rpb25Db25maWcpIHtcbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICByZXR1cm4gYnVpbGRSZWFjdFJlbGF5Q29udGFpbmVyKENvbXBvbmVudCwgZnJhZ21lbnRTcGVjLCBmdW5jdGlvbiAoQ29tcG9uZW50Q2xhc3MsIGZyYWdtZW50cykge1xuICAgIHJldHVybiBjcmVhdGVDb250YWluZXJXaXRoRnJhZ21lbnRzKENvbXBvbmVudENsYXNzLCBmcmFnbWVudHMsIGNvbm5lY3Rpb25Db25maWcpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZUNvbnRhaW5lcjogY3JlYXRlQ29udGFpbmVyXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvciA9IF9yZXF1aXJlLmNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IsXG4gICAgaXNSZWxheU1vZGVybkVudmlyb25tZW50ID0gX3JlcXVpcmUuaXNSZWxheU1vZGVybkVudmlyb25tZW50LFxuICAgIGZldGNoUXVlcnkgPSBfcmVxdWlyZS5fX2ludGVybmFsLmZldGNoUXVlcnk7XG5cbnZhciBSZWFjdFJlbGF5UXVlcnlGZXRjaGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlcihhcmdzKSB7XG4gICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh0aGlzLCBcIl9zZWxlY3Rpb25SZWZlcmVuY2VzXCIsIFtdKTtcbiAgICAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRoaXMsIFwiX2NhbGxPbkRhdGFDaGFuZ2VXaGVuU2V0XCIsIGZhbHNlKTtcblxuICAgIGlmIChhcmdzICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2NhY2hlU2VsZWN0aW9uUmVmZXJlbmNlID0gYXJncy5jYWNoZVNlbGVjdGlvblJlZmVyZW5jZTtcbiAgICAgIHRoaXMuX3NlbGVjdGlvblJlZmVyZW5jZXMgPSBhcmdzLnNlbGVjdGlvblJlZmVyZW5jZXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlYWN0UmVsYXlRdWVyeUZldGNoZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRTZWxlY3Rpb25SZWZlcmVuY2VzID0gZnVuY3Rpb24gZ2V0U2VsZWN0aW9uUmVmZXJlbmNlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2FjaGVTZWxlY3Rpb25SZWZlcmVuY2U6IHRoaXMuX2NhY2hlU2VsZWN0aW9uUmVmZXJlbmNlLFxuICAgICAgc2VsZWN0aW9uUmVmZXJlbmNlczogdGhpcy5fc2VsZWN0aW9uUmVmZXJlbmNlc1xuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmxvb2t1cEluU3RvcmUgPSBmdW5jdGlvbiBsb29rdXBJblN0b3JlKGVudmlyb25tZW50LCBvcGVyYXRpb24sIGZldGNoUG9saWN5KSB7XG4gICAgaWYgKGZldGNoUG9saWN5ID09PSAnc3RvcmUtYW5kLW5ldHdvcmsnIHx8IGZldGNoUG9saWN5ID09PSAnc3RvcmUtb3ItbmV0d29yaycpIHtcbiAgICAgIGlmIChlbnZpcm9ubWVudC5jaGVjayhvcGVyYXRpb24pLnN0YXR1cyA9PT0gJ2F2YWlsYWJsZScpIHtcbiAgICAgICAgdGhpcy5fcmV0YWluQ2FjaGVkT3BlcmF0aW9uKGVudmlyb25tZW50LCBvcGVyYXRpb24pO1xuXG4gICAgICAgIHJldHVybiBlbnZpcm9ubWVudC5sb29rdXAob3BlcmF0aW9uLmZyYWdtZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBfcHJvdG8uZXhlY3V0ZSA9IGZ1bmN0aW9uIGV4ZWN1dGUoX3JlZikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgZW52aXJvbm1lbnQgPSBfcmVmLmVudmlyb25tZW50LFxuICAgICAgICBvcGVyYXRpb24gPSBfcmVmLm9wZXJhdGlvbixcbiAgICAgICAgX3JlZiRwcmVzZXJ2ZVByZXZpb3VzID0gX3JlZi5wcmVzZXJ2ZVByZXZpb3VzUmVmZXJlbmNlcyxcbiAgICAgICAgcHJlc2VydmVQcmV2aW91c1JlZmVyZW5jZXMgPSBfcmVmJHByZXNlcnZlUHJldmlvdXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwcmVzZXJ2ZVByZXZpb3VzO1xuICAgIHZhciByZWZlcmVuY2UgPSBlbnZpcm9ubWVudC5yZXRhaW4ob3BlcmF0aW9uKTtcblxuICAgIHZhciBlcnJvciA9IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgLy8gV2UgbWF5IGhhdmUgcGFydGlhbGx5IGZ1bGZpbGxlZCB0aGUgcmVxdWVzdCwgc28gbGV0IHRoZSBuZXh0IHJlcXVlc3RcbiAgICAgIC8vIG9yIHRoZSB1bm1vdW50IGRpc3Bvc2Ugb2YgdGhlIHJlZmVyZW5jZXMuXG4gICAgICBfdGhpcy5fc2VsZWN0aW9uUmVmZXJlbmNlcyA9IF90aGlzLl9zZWxlY3Rpb25SZWZlcmVuY2VzLmNvbmNhdChyZWZlcmVuY2UpO1xuICAgIH07XG5cbiAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgIGlmICghcHJlc2VydmVQcmV2aW91c1JlZmVyZW5jZXMpIHtcbiAgICAgICAgX3RoaXMuZGlzcG9zZVNlbGVjdGlvblJlZmVyZW5jZXMoKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuX3NlbGVjdGlvblJlZmVyZW5jZXMgPSBfdGhpcy5fc2VsZWN0aW9uUmVmZXJlbmNlcy5jb25jYXQocmVmZXJlbmNlKTtcbiAgICB9O1xuXG4gICAgdmFyIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAvLyBMZXQgdGhlIG5leHQgcmVxdWVzdCBvciB0aGUgdW5tb3VudCBjb2RlIGRpc3Bvc2Ugb2YgdGhlIHJlZmVyZW5jZXMuXG4gICAgICAvLyBXZSBtYXkgaGF2ZSBwYXJ0aWFsbHkgZnVsZmlsbGVkIHRoZSByZXF1ZXN0LlxuICAgICAgX3RoaXMuX3NlbGVjdGlvblJlZmVyZW5jZXMgPSBfdGhpcy5fc2VsZWN0aW9uUmVmZXJlbmNlcy5jb25jYXQocmVmZXJlbmNlKTtcbiAgICB9O1xuXG4gICAgaWYgKCFpc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQoZW52aXJvbm1lbnQpKSB7XG4gICAgICByZXR1cm4gZW52aXJvbm1lbnQuZXhlY3V0ZSh7XG4gICAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uXG4gICAgICB9KVtcImRvXCJdKHtcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBjb21wbGV0ZTogY29tcGxldGUsXG4gICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZldGNoUXVlcnkoZW52aXJvbm1lbnQsIG9wZXJhdGlvbilbXCJkb1wiXSh7XG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBjb21wbGV0ZTogY29tcGxldGUsXG4gICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uc2V0T25EYXRhQ2hhbmdlID0gZnVuY3Rpb24gc2V0T25EYXRhQ2hhbmdlKG9uRGF0YUNoYW5nZSkge1xuICAgICF0aGlzLl9mZXRjaE9wdGlvbnMgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFJlbGF5UXVlcnlGZXRjaGVyOiBgc2V0T25EYXRhQ2hhbmdlYCBzaG91bGQgaGF2ZSBiZWVuIGNhbGxlZCBhZnRlciBoYXZpbmcgY2FsbGVkIGBmZXRjaGAnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBpZiAodHlwZW9mIG9uRGF0YUNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gTXV0YXRlIHRoZSBtb3N0IHJlY2VudCBmZXRjaE9wdGlvbnMgaW4gcGxhY2UsXG4gICAgICAvLyBTbyB0aGF0IGluLXByb2dyZXNzIHJlcXVlc3RzIGNhbiBhY2Nlc3MgdGhlIHVwZGF0ZWQgY2FsbGJhY2suXG4gICAgICB0aGlzLl9mZXRjaE9wdGlvbnMub25EYXRhQ2hhbmdlQ2FsbGJhY2tzID0gdGhpcy5fZmV0Y2hPcHRpb25zLm9uRGF0YUNoYW5nZUNhbGxiYWNrcyB8fCBbXTtcblxuICAgICAgdGhpcy5fZmV0Y2hPcHRpb25zLm9uRGF0YUNoYW5nZUNhbGxiYWNrcy5wdXNoKG9uRGF0YUNoYW5nZSk7XG5cbiAgICAgIGlmICh0aGlzLl9jYWxsT25EYXRhQ2hhbmdlV2hlblNldCkge1xuICAgICAgICAvLyBXZSBkb24ndCByZXNldCAnX2NhbGxPbkRhdGFDaGFuZ2VXaGVuU2V0JyBiZWNhdXNlIGFub3RoZXIgY2FsbGJhY2sgbWF5IGJlIHNldFxuICAgICAgICBpZiAodGhpcy5fZXJyb3IgIT0gbnVsbCkge1xuICAgICAgICAgIG9uRGF0YUNoYW5nZSh7XG4gICAgICAgICAgICBlcnJvcjogdGhpcy5fZXJyb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zbmFwc2hvdCAhPSBudWxsKSB7XG4gICAgICAgICAgb25EYXRhQ2hhbmdlKHtcbiAgICAgICAgICAgIHNuYXBzaG90OiB0aGlzLl9zbmFwc2hvdFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBgZmV0Y2hgIGZldGNoZXMgdGhlIGRhdGEgZm9yIHRoZSBnaXZlbiBvcGVyYXRpb24uXG4gICAqIElmIGEgcmVzdWx0IGlzIGltbWVkaWF0ZWx5IGF2YWlsYWJsZSBzeW5jaHJvbm91c2x5LCBpdCB3aWxsIGJlIHN5bmNocm9ub3VzbHlcbiAgICogcmV0dXJuZWQgYnkgdGhpcyBmdW5jdGlvbi5cbiAgICpcbiAgICogT3RoZXJ3aXNlLCB0aGUgZmV0Y2hlZCByZXN1bHQgd2lsbCBiZSBjb21tdW5pY2F0ZWQgdmlhIHRoZSBgb25EYXRhQ2hhbmdlYCBjYWxsYmFjay5cbiAgICogYG9uRGF0YUNoYW5nZWAgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgZmlyc3QgcmVzdWx0ICgqKmlmIGl0IHdhc24ndCByZXR1cm5lZCBzeW5jaHJvbm91c2x5KiopLFxuICAgKiBhbmQgdGhlbiBzdWJzZXF1ZW50bHkgd2hlbmV2ZXIgdGhlIGRhdGEgY2hhbmdlcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZmV0Y2ggPSBmdW5jdGlvbiBmZXRjaChmZXRjaE9wdGlvbnMsIGNhY2hlQ29uZmlnT3ZlcnJpZGUpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnZpcm9ubWVudCA9IGZldGNoT3B0aW9ucy5lbnZpcm9ubWVudCxcbiAgICAgICAgb3BlcmF0aW9uID0gZmV0Y2hPcHRpb25zLm9wZXJhdGlvbixcbiAgICAgICAgb25EYXRhQ2hhbmdlID0gZmV0Y2hPcHRpb25zLm9uRGF0YUNoYW5nZTtcbiAgICB2YXIgZmV0Y2hIYXNSZXR1cm5lZCA9IGZhbHNlO1xuXG4gICAgdmFyIF9lcnJvcjtcblxuICAgIHRoaXMuZGlzcG9zZVJlcXVlc3QoKTtcbiAgICB2YXIgb2xkT25EYXRhQ2hhbmdlQ2FsbGJhY2tzID0gdGhpcy5fZmV0Y2hPcHRpb25zICYmIHRoaXMuX2ZldGNoT3B0aW9ucy5vbkRhdGFDaGFuZ2VDYWxsYmFja3M7XG4gICAgdGhpcy5fZmV0Y2hPcHRpb25zID0ge1xuICAgICAgZW52aXJvbm1lbnQ6IGVudmlyb25tZW50LFxuICAgICAgb25EYXRhQ2hhbmdlQ2FsbGJhY2tzOiBvbGRPbkRhdGFDaGFuZ2VDYWxsYmFja3MgfHwgW10sXG4gICAgICBvcGVyYXRpb246IG9wZXJhdGlvblxuICAgIH07XG5cbiAgICBpZiAob25EYXRhQ2hhbmdlICYmIHRoaXMuX2ZldGNoT3B0aW9ucy5vbkRhdGFDaGFuZ2VDYWxsYmFja3MuaW5kZXhPZihvbkRhdGFDaGFuZ2UpID09PSAtMSkge1xuICAgICAgdGhpcy5fZmV0Y2hPcHRpb25zLm9uRGF0YUNoYW5nZUNhbGxiYWNrcy5wdXNoKG9uRGF0YUNoYW5nZSk7XG4gICAgfVxuXG4gICAgdmFyIG9wZXJhdGlvbk92ZXJyaWRlID0gY2FjaGVDb25maWdPdmVycmlkZSA/IGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3Iob3BlcmF0aW9uLnJlcXVlc3Qubm9kZSwgb3BlcmF0aW9uLnJlcXVlc3QudmFyaWFibGVzLCBjYWNoZUNvbmZpZ092ZXJyaWRlKSA6IG9wZXJhdGlvbjtcbiAgICB2YXIgcmVxdWVzdCA9IHRoaXMuZXhlY3V0ZSh7XG4gICAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnQsXG4gICAgICBvcGVyYXRpb246IG9wZXJhdGlvbk92ZXJyaWRlXG4gICAgfSlbXCJmaW5hbGx5XCJdKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5fcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xuICAgIH0pLnN1YnNjcmliZSh7XG4gICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAvLyBJZiB3ZSByZWNlaXZlZCBhIHJlc3BvbnNlLFxuICAgICAgICAvLyBNYWtlIGEgbm90ZSB0aGF0IHRvIG5vdGlmeSB0aGUgY2FsbGJhY2sgd2hlbiBpdCdzIGxhdGVyIGFkZGVkLlxuICAgICAgICBfdGhpczIuX2NhbGxPbkRhdGFDaGFuZ2VXaGVuU2V0ID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMyLl9lcnJvciA9IG51bGw7IC8vIE9ubHkgbm90aWZ5IG9mIHRoZSBmaXJzdCByZXN1bHQgaWYgYG5leHRgIGlzIGJlaW5nIGNhbGxlZCAqKmFzeW5jaHJvbm91c2x5KipcbiAgICAgICAgLy8gKGkuZS4gYWZ0ZXIgYGZldGNoYCBoYXMgcmV0dXJuZWQpLlxuXG4gICAgICAgIF90aGlzMi5fb25RdWVyeURhdGFBdmFpbGFibGUoe1xuICAgICAgICAgIG5vdGlmeUZpcnN0UmVzdWx0OiBmZXRjaEhhc1JldHVybmVkXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihlcnIpIHtcbiAgICAgICAgLy8gSWYgd2UgcmVjZWl2ZWQgYSByZXNwb25zZSB3aGVuIHdlIGRpZG4ndCBoYXZlIGEgY2hhbmdlIGNhbGxiYWNrLFxuICAgICAgICAvLyBNYWtlIGEgbm90ZSB0aGF0IHRvIG5vdGlmeSB0aGUgY2FsbGJhY2sgd2hlbiBpdCdzIGxhdGVyIGFkZGVkLlxuICAgICAgICBfdGhpczIuX2NhbGxPbkRhdGFDaGFuZ2VXaGVuU2V0ID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMyLl9lcnJvciA9IGVycjtcbiAgICAgICAgX3RoaXMyLl9zbmFwc2hvdCA9IG51bGw7XG4gICAgICAgIHZhciBvbkRhdGFDaGFuZ2VDYWxsYmFja3MgPSBfdGhpczIuX2ZldGNoT3B0aW9ucyAmJiBfdGhpczIuX2ZldGNoT3B0aW9ucy5vbkRhdGFDaGFuZ2VDYWxsYmFja3M7IC8vIE9ubHkgbm90aWZ5IG9mIGVycm9yIGlmIGBlcnJvcmAgaXMgYmVpbmcgY2FsbGVkICoqYXN5bmNocm9ub3VzbHkqKlxuICAgICAgICAvLyAoaS5lLiBhZnRlciBgZmV0Y2hgIGhhcyByZXR1cm5lZCkuXG5cbiAgICAgICAgaWYgKGZldGNoSGFzUmV0dXJuZWQpIHtcbiAgICAgICAgICBpZiAob25EYXRhQ2hhbmdlQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBvbkRhdGFDaGFuZ2VDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAob25EYXRhQ2hhbmdlKSB7XG4gICAgICAgICAgICAgIG9uRGF0YUNoYW5nZSh7XG4gICAgICAgICAgICAgICAgZXJyb3I6IGVyclxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfZXJyb3IgPSBlcnI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLl9wZW5kaW5nUmVxdWVzdCA9IHtcbiAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgIHJlcXVlc3QudW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZldGNoSGFzUmV0dXJuZWQgPSB0cnVlO1xuXG4gICAgaWYgKF9lcnJvcikge1xuICAgICAgdGhyb3cgX2Vycm9yO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zbmFwc2hvdDtcbiAgfTtcblxuICBfcHJvdG8ucmV0cnkgPSBmdW5jdGlvbiByZXRyeShjYWNoZUNvbmZpZ092ZXJyaWRlKSB7XG4gICAgIXRoaXMuX2ZldGNoT3B0aW9ucyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0UmVsYXlRdWVyeUZldGNoZXI6IGByZXRyeWAgc2hvdWxkIGJlIGNhbGxlZCBhZnRlciBoYXZpbmcgY2FsbGVkIGBmZXRjaGAnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goe1xuICAgICAgZW52aXJvbm1lbnQ6IHRoaXMuX2ZldGNoT3B0aW9ucy5lbnZpcm9ubWVudCxcbiAgICAgIG9wZXJhdGlvbjogdGhpcy5fZmV0Y2hPcHRpb25zLm9wZXJhdGlvbixcbiAgICAgIG9uRGF0YUNoYW5nZTogbnVsbCAvLyBJZiB0aGVyZSBhcmUgb25EYXRhQ2hhbmdlQ2FsbGJhY2tzIHRoZXkgd2lsbCBiZSByZXVzZWRcblxuICAgIH0sIGNhY2hlQ29uZmlnT3ZlcnJpZGUpO1xuICB9O1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB0aGlzLmRpc3Bvc2VSZXF1ZXN0KCk7XG4gICAgdGhpcy5kaXNwb3NlU2VsZWN0aW9uUmVmZXJlbmNlcygpO1xuICB9O1xuXG4gIF9wcm90by5kaXNwb3NlUmVxdWVzdCA9IGZ1bmN0aW9uIGRpc3Bvc2VSZXF1ZXN0KCkge1xuICAgIHRoaXMuX2Vycm9yID0gbnVsbDtcbiAgICB0aGlzLl9zbmFwc2hvdCA9IG51bGw7IC8vIG9yZGVyIGlzIGltcG9ydGFudCwgZGlzcG9zZSBvZiBwZW5kaW5nRmV0Y2ggYmVmb3JlIHNlbGVjdGlvblJlZmVyZW5jZXNcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nUmVxdWVzdCkge1xuICAgICAgdGhpcy5fcGVuZGluZ1JlcXVlc3QuZGlzcG9zZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9yb290U3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLl9yb290U3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcblxuICAgICAgdGhpcy5fcm9vdFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fcmV0YWluQ2FjaGVkT3BlcmF0aW9uID0gZnVuY3Rpb24gX3JldGFpbkNhY2hlZE9wZXJhdGlvbihlbnZpcm9ubWVudCwgb3BlcmF0aW9uKSB7XG4gICAgdGhpcy5fZGlzcG9zZUNhY2hlU2VsZWN0aW9uUmVmZXJlbmNlKCk7XG5cbiAgICB0aGlzLl9jYWNoZVNlbGVjdGlvblJlZmVyZW5jZSA9IGVudmlyb25tZW50LnJldGFpbihvcGVyYXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5fZGlzcG9zZUNhY2hlU2VsZWN0aW9uUmVmZXJlbmNlID0gZnVuY3Rpb24gX2Rpc3Bvc2VDYWNoZVNlbGVjdGlvblJlZmVyZW5jZSgpIHtcbiAgICB0aGlzLl9jYWNoZVNlbGVjdGlvblJlZmVyZW5jZSAmJiB0aGlzLl9jYWNoZVNlbGVjdGlvblJlZmVyZW5jZS5kaXNwb3NlKCk7XG4gICAgdGhpcy5fY2FjaGVTZWxlY3Rpb25SZWZlcmVuY2UgPSBudWxsO1xuICB9O1xuXG4gIF9wcm90by5kaXNwb3NlU2VsZWN0aW9uUmVmZXJlbmNlcyA9IGZ1bmN0aW9uIGRpc3Bvc2VTZWxlY3Rpb25SZWZlcmVuY2VzKCkge1xuICAgIHRoaXMuX2Rpc3Bvc2VDYWNoZVNlbGVjdGlvblJlZmVyZW5jZSgpO1xuXG4gICAgdGhpcy5fc2VsZWN0aW9uUmVmZXJlbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICByZXR1cm4gci5kaXNwb3NlKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9zZWxlY3Rpb25SZWZlcmVuY2VzID0gW107XG4gIH07XG5cbiAgX3Byb3RvLl9vblF1ZXJ5RGF0YUF2YWlsYWJsZSA9IGZ1bmN0aW9uIF9vblF1ZXJ5RGF0YUF2YWlsYWJsZShfcmVmMikge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIG5vdGlmeUZpcnN0UmVzdWx0ID0gX3JlZjIubm90aWZ5Rmlyc3RSZXN1bHQ7XG4gICAgIXRoaXMuX2ZldGNoT3B0aW9ucyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0UmVsYXlRdWVyeUZldGNoZXI6IGBfb25RdWVyeURhdGFBdmFpbGFibGVgIHNob3VsZCBoYXZlIGJlZW4gY2FsbGVkIGFmdGVyIGhhdmluZyBjYWxsZWQgYGZldGNoYCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgX3RoaXMkX2ZldGNoT3B0aW9ucyA9IHRoaXMuX2ZldGNoT3B0aW9ucyxcbiAgICAgICAgZW52aXJvbm1lbnQgPSBfdGhpcyRfZmV0Y2hPcHRpb25zLmVudmlyb25tZW50LFxuICAgICAgICBvbkRhdGFDaGFuZ2VDYWxsYmFja3MgPSBfdGhpcyRfZmV0Y2hPcHRpb25zLm9uRGF0YUNoYW5nZUNhbGxiYWNrcyxcbiAgICAgICAgb3BlcmF0aW9uID0gX3RoaXMkX2ZldGNoT3B0aW9ucy5vcGVyYXRpb247IC8vIGBfb25RdWVyeURhdGFBdmFpbGFibGVgIGNhbiBiZSBjYWxsZWQgc3luY2hyb25vdXNseSB0aGUgZmlyc3QgdGltZSBhbmQgY2FuIGJlIGNhbGxlZFxuICAgIC8vIG11bHRpcGxlIHRpbWVzIGJ5IG5ldHdvcmsgbGF5ZXJzIHRoYXQgc3VwcG9ydCBkYXRhIHN1YnNjcmlwdGlvbnMuXG4gICAgLy8gV2FpdCB1bnRpbCB0aGUgZmlyc3QgcGF5bG9hZCB0byBjYWxsIGBvbkRhdGFDaGFuZ2VgIGFuZCBzdWJzY3JpYmUgZm9yIGRhdGEgdXBkYXRlcy5cblxuICAgIGlmICh0aGlzLl9zbmFwc2hvdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3NuYXBzaG90ID0gZW52aXJvbm1lbnQubG9va3VwKG9wZXJhdGlvbi5mcmFnbWVudCk7IC8vIFN1YnNjcmliZSB0byBjaGFuZ2VzIGluIHRoZSBkYXRhIG9mIHRoZSByb290IGZyYWdtZW50XG5cbiAgICB0aGlzLl9yb290U3Vic2NyaXB0aW9uID0gZW52aXJvbm1lbnQuc3Vic2NyaWJlKHRoaXMuX3NuYXBzaG90LCBmdW5jdGlvbiAoc25hcHNob3QpIHtcbiAgICAgIC8vIFJlYWQgZnJvbSB0aGlzLl9mZXRjaE9wdGlvbnMgaW4gY2FzZSBvbkRhdGFDaGFuZ2UoKSB3YXMgbGF6aWx5IGFkZGVkLlxuICAgICAgaWYgKF90aGlzMy5fZmV0Y2hPcHRpb25zICE9IG51bGwpIHtcbiAgICAgICAgdmFyIG1heWJlTmV3T25EYXRhQ2hhbmdlQ2FsbGJhY2tzID0gX3RoaXMzLl9mZXRjaE9wdGlvbnMub25EYXRhQ2hhbmdlQ2FsbGJhY2tzO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG1heWJlTmV3T25EYXRhQ2hhbmdlQ2FsbGJhY2tzKSkge1xuICAgICAgICAgIG1heWJlTmV3T25EYXRhQ2hhbmdlQ2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKG9uRGF0YUNoYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9uRGF0YUNoYW5nZSh7XG4gICAgICAgICAgICAgIHNuYXBzaG90OiBzbmFwc2hvdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICh0aGlzLl9zbmFwc2hvdCAmJiBub3RpZnlGaXJzdFJlc3VsdCAmJiBBcnJheS5pc0FycmF5KG9uRGF0YUNoYW5nZUNhbGxiYWNrcykpIHtcbiAgICAgIHZhciBzbmFwc2hvdCA9IHRoaXMuX3NuYXBzaG90O1xuICAgICAgb25EYXRhQ2hhbmdlQ2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKG9uRGF0YUNoYW5nZSkge1xuICAgICAgICByZXR1cm4gb25EYXRhQ2hhbmdlKHtcbiAgICAgICAgICBzbmFwc2hvdDogc25hcHNob3RcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0UmVsYXlRdWVyeUZldGNoZXI7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgUmVhY3RSZWxheUNvbnRleHQgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlDb250ZXh0Jyk7XG5cbnZhciBSZWFjdFJlbGF5UXVlcnlGZXRjaGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlbGF5UXVlcnlGZXRjaGVyJyk7XG5cbnZhciBSZWFjdFJlbGF5UXVlcnlSZW5kZXJlckNvbnRleHQgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlRdWVyeVJlbmRlcmVyQ29udGV4dCcpO1xuXG52YXIgYXJlRXF1YWwgPSByZXF1aXJlKFwiZmJqcy9saWIvYXJlRXF1YWxcIik7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yID0gX3JlcXVpcmUuY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcixcbiAgICBkZWVwRnJlZXplID0gX3JlcXVpcmUuZGVlcEZyZWV6ZSxcbiAgICBnZXRSZXF1ZXN0ID0gX3JlcXVpcmUuZ2V0UmVxdWVzdDtcblxuLyoqXG4gKiBSZWFjdCBtYXkgZG91YmxlLWZpcmUgdGhlIGNvbnN0cnVjdG9yLCBhbmQgd2UgY2FsbCAnZmV0Y2gnIGluIHRoZVxuICogY29uc3RydWN0b3IuIElmIGEgcmVxdWVzdCBpcyBhbHJlYWR5IGluIGZsaWdodCBmcm9tIGEgcHJldmlvdXMgY2FsbCB0byB0aGVcbiAqIGNvbnN0cnVjdG9yLCBqdXN0IHJldXNlIHRoZSBxdWVyeSBmZXRjaGVyIGFuZCB3YWl0IGZvciB0aGUgcmVzcG9uc2UuXG4gKi9cbnZhciByZXF1ZXN0Q2FjaGUgPSB7fTtcbnZhciBxdWVyeVJlbmRlcmVyQ29udGV4dCA9IHtcbiAgcm9vdElzUXVlcnlSZW5kZXJlcjogdHJ1ZVxufTtcblxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogT3JjaGVzdHJhdGVzIGZldGNoaW5nIGFuZCByZW5kZXJpbmcgZGF0YSBmb3IgYSBzaW5nbGUgdmlldyBvciB2aWV3IGhpZXJhcmNoeTpcbiAqIC0gRmV0Y2hlcyB0aGUgcXVlcnkvdmFyaWFibGVzIHVzaW5nIHRoZSBnaXZlbiBuZXR3b3JrIGltcGxlbWVudGF0aW9uLlxuICogLSBOb3JtYWxpemVzIHRoZSByZXNwb25zZShzKSB0byB0aGF0IHF1ZXJ5LCBwdWJsaXNoaW5nIHRoZW0gdG8gdGhlIGdpdmVuXG4gKiAgIHN0b3JlLlxuICogLSBSZW5kZXJzIHRoZSBwZW5kaW5nL2ZhaWwvc3VjY2VzcyBzdGF0ZXMgd2l0aCB0aGUgcHJvdmlkZWQgcmVuZGVyIGZ1bmN0aW9uLlxuICogLSBTdWJzY3JpYmVzIGZvciB1cGRhdGVzIHRvIHRoZSByb290IGRhdGEgYW5kIHJlLXJlbmRlcnMgd2l0aCBhbnkgY2hhbmdlcy5cbiAqL1xudmFyIFJlYWN0UmVsYXlRdWVyeVJlbmRlcmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTJbXCJkZWZhdWx0XCJdKShSZWFjdFJlbGF5UXVlcnlSZW5kZXJlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVhY3RSZWxheVF1ZXJ5UmVuZGVyZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpczsgLy8gQ2FsbGJhY2tzIGFyZSBhdHRhY2hlZCB0byB0aGUgY3VycmVudCBpbnN0YW5jZSBhbmQgc2hhcmVkIHdpdGggc3RhdGljXG4gICAgLy8gbGlmZWN5bGVzIGJ5IGJ1bmRsaW5nIHdpdGggc3RhdGUuIFRoaXMgaXMgb2theSB0byBkbyBiZWNhdXNlIHRoZVxuICAgIC8vIGNhbGxiYWNrcyBkb24ndCBjaGFuZ2UgaW4gcmVhY3Rpb24gdG8gcHJvcHMuIEhvd2V2ZXIgd2Ugc2hvdWxkIG5vdFxuICAgIC8vIFwibGVha1wiIHRoZW0gYmVmb3JlIG1vdW50aW5nIChzaW5jZSB3ZSB3b3VsZCBiZSB1bmFibGUgdG8gY2xlYW4gdXApLiBGb3JcbiAgICAvLyB0aGF0IHJlYXNvbiwgd2UgZGVmaW5lIHRoZW0gYXMgbnVsbCBpbml0aWFsbHkgYW5kIGZpbGwgdGhlbSBpbiBhZnRlclxuICAgIC8vIG1vdW50aW5nIHRvIGF2b2lkIGxlYWtpbmcgbWVtb3J5LlxuXG4gICAgdmFyIHJldHJ5Q2FsbGJhY2tzID0ge1xuICAgICAgaGFuZGxlRGF0YUNoYW5nZTogbnVsbCxcbiAgICAgIGhhbmRsZVJldHJ5QWZ0ZXJFcnJvcjogbnVsbFxuICAgIH07XG4gICAgdmFyIHF1ZXJ5RmV0Y2hlcjtcbiAgICB2YXIgcmVxdWVzdENhY2hlS2V5O1xuXG4gICAgaWYgKHByb3BzLnF1ZXJ5KSB7XG4gICAgICB2YXIgcXVlcnkgPSBwcm9wcy5xdWVyeTtcbiAgICAgIHZhciByZXF1ZXN0ID0gZ2V0UmVxdWVzdChxdWVyeSk7XG4gICAgICByZXF1ZXN0Q2FjaGVLZXkgPSBnZXRSZXF1ZXN0Q2FjaGVLZXkocmVxdWVzdC5wYXJhbXMsIHByb3BzLnZhcmlhYmxlcyk7XG4gICAgICBxdWVyeUZldGNoZXIgPSByZXF1ZXN0Q2FjaGVbcmVxdWVzdENhY2hlS2V5XSA/IHJlcXVlc3RDYWNoZVtyZXF1ZXN0Q2FjaGVLZXldLnF1ZXJ5RmV0Y2hlciA6IG5ldyBSZWFjdFJlbGF5UXVlcnlGZXRjaGVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHF1ZXJ5RmV0Y2hlciA9IG5ldyBSZWFjdFJlbGF5UXVlcnlGZXRjaGVyKCk7XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICBwcmV2UHJvcHNFbnZpcm9ubWVudDogcHJvcHMuZW52aXJvbm1lbnQsXG4gICAgICBwcmV2UHJvcHNWYXJpYWJsZXM6IHByb3BzLnZhcmlhYmxlcyxcbiAgICAgIHByZXZRdWVyeTogcHJvcHMucXVlcnksXG4gICAgICBxdWVyeUZldGNoZXI6IHF1ZXJ5RmV0Y2hlcixcbiAgICAgIHJldHJ5Q2FsbGJhY2tzOiByZXRyeUNhbGxiYWNrc1xuICAgIH0sIGZldGNoUXVlcnlBbmRDb21wdXRlU3RhdGVGcm9tUHJvcHMocHJvcHMsIHF1ZXJ5RmV0Y2hlciwgcmV0cnlDYWxsYmFja3MsIHJlcXVlc3RDYWNoZUtleSkpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFJlYWN0UmVsYXlRdWVyeVJlbmRlcmVyLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIGlmIChwcmV2U3RhdGUucHJldlF1ZXJ5ICE9PSBuZXh0UHJvcHMucXVlcnkgfHwgcHJldlN0YXRlLnByZXZQcm9wc0Vudmlyb25tZW50ICE9PSBuZXh0UHJvcHMuZW52aXJvbm1lbnQgfHwgIWFyZUVxdWFsKHByZXZTdGF0ZS5wcmV2UHJvcHNWYXJpYWJsZXMsIG5leHRQcm9wcy52YXJpYWJsZXMpKSB7XG4gICAgICB2YXIgcXVlcnkgPSBuZXh0UHJvcHMucXVlcnk7XG4gICAgICB2YXIgcHJldlNlbGVjdGlvblJlZmVyZW5jZXMgPSBwcmV2U3RhdGUucXVlcnlGZXRjaGVyLmdldFNlbGVjdGlvblJlZmVyZW5jZXMoKTtcbiAgICAgIHByZXZTdGF0ZS5xdWVyeUZldGNoZXIuZGlzcG9zZVJlcXVlc3QoKTtcbiAgICAgIHZhciBxdWVyeUZldGNoZXI7XG5cbiAgICAgIGlmIChxdWVyeSkge1xuICAgICAgICB2YXIgcmVxdWVzdCA9IGdldFJlcXVlc3QocXVlcnkpO1xuICAgICAgICB2YXIgcmVxdWVzdENhY2hlS2V5ID0gZ2V0UmVxdWVzdENhY2hlS2V5KHJlcXVlc3QucGFyYW1zLCBuZXh0UHJvcHMudmFyaWFibGVzKTtcbiAgICAgICAgcXVlcnlGZXRjaGVyID0gcmVxdWVzdENhY2hlW3JlcXVlc3RDYWNoZUtleV0gPyByZXF1ZXN0Q2FjaGVbcmVxdWVzdENhY2hlS2V5XS5xdWVyeUZldGNoZXIgOiBuZXcgUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlcihwcmV2U2VsZWN0aW9uUmVmZXJlbmNlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWVyeUZldGNoZXIgPSBuZXcgUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlcihwcmV2U2VsZWN0aW9uUmVmZXJlbmNlcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICAgIHByZXZRdWVyeTogbmV4dFByb3BzLnF1ZXJ5LFxuICAgICAgICBwcmV2UHJvcHNFbnZpcm9ubWVudDogbmV4dFByb3BzLmVudmlyb25tZW50LFxuICAgICAgICBwcmV2UHJvcHNWYXJpYWJsZXM6IG5leHRQcm9wcy52YXJpYWJsZXMsXG4gICAgICAgIHF1ZXJ5RmV0Y2hlcjogcXVlcnlGZXRjaGVyXG4gICAgICB9LCBmZXRjaFF1ZXJ5QW5kQ29tcHV0ZVN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcXVlcnlGZXRjaGVyLCBwcmV2U3RhdGUucmV0cnlDYWxsYmFja3MgLy8gcGFzc2luZyBubyByZXF1ZXN0Q2FjaGVLZXkgd2lsbCBjYXVzZSBpdCB0byBiZSByZWNhbGN1bGF0ZWQgaW50ZXJuYWxseVxuICAgICAgLy8gYW5kIHdlIHdhbnQgdGhlIHVwZGF0ZWQgcmVxdWVzdENhY2hlS2V5LCBzaW5jZSB2YXJpYWJsZXMgbWF5IGhhdmUgY2hhbmdlZFxuICAgICAgKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdmFyIF9wcm90byA9IFJlYWN0UmVsYXlRdWVyeVJlbmRlcmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIHJldHJ5Q2FsbGJhY2tzID0gX3RoaXMkc3RhdGUucmV0cnlDYWxsYmFja3MsXG4gICAgICAgIHF1ZXJ5RmV0Y2hlciA9IF90aGlzJHN0YXRlLnF1ZXJ5RmV0Y2hlcixcbiAgICAgICAgcmVxdWVzdENhY2hlS2V5ID0gX3RoaXMkc3RhdGUucmVxdWVzdENhY2hlS2V5O1xuXG4gICAgaWYgKHJlcXVlc3RDYWNoZUtleSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RDYWNoZVtyZXF1ZXN0Q2FjaGVLZXldO1xuICAgIH1cblxuICAgIHJldHJ5Q2FsbGJhY2tzLmhhbmRsZURhdGFDaGFuZ2UgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICB2YXIgZXJyb3IgPSBwYXJhbXMuZXJyb3IgPT0gbnVsbCA/IG51bGwgOiBwYXJhbXMuZXJyb3I7XG4gICAgICB2YXIgc25hcHNob3QgPSBwYXJhbXMuc25hcHNob3QgPT0gbnVsbCA/IG51bGwgOiBwYXJhbXMuc25hcHNob3Q7XG5cbiAgICAgIF90aGlzMi5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7XG4gICAgICAgIHZhciBwcmV2UmVxdWVzdENhY2hlS2V5ID0gcHJldlN0YXRlLnJlcXVlc3RDYWNoZUtleTtcblxuICAgICAgICBpZiAocHJldlJlcXVlc3RDYWNoZUtleSkge1xuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0Q2FjaGVbcHJldlJlcXVlc3RDYWNoZUtleV07XG4gICAgICAgIH0gLy8gRG9uJ3QgdXBkYXRlIHN0YXRlIGlmIG5vdGhpbmcgaGFzIGNoYW5nZWQuXG5cblxuICAgICAgICBpZiAoc25hcHNob3QgPT09IHByZXZTdGF0ZS5zbmFwc2hvdCAmJiBlcnJvciA9PT0gcHJldlN0YXRlLmVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlbmRlclByb3BzOiBnZXRSZW5kZXJQcm9wcyhlcnJvciwgc25hcHNob3QsIHByZXZTdGF0ZS5xdWVyeUZldGNoZXIsIHByZXZTdGF0ZS5yZXRyeUNhbGxiYWNrcyksXG4gICAgICAgICAgc25hcHNob3Q6IHNuYXBzaG90LFxuICAgICAgICAgIHJlcXVlc3RDYWNoZUtleTogbnVsbFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHJ5Q2FsbGJhY2tzLmhhbmRsZVJldHJ5QWZ0ZXJFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmV0dXJuIF90aGlzMi5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7XG4gICAgICAgIHZhciBwcmV2UmVxdWVzdENhY2hlS2V5ID0gcHJldlN0YXRlLnJlcXVlc3RDYWNoZUtleTtcblxuICAgICAgICBpZiAocHJldlJlcXVlc3RDYWNoZUtleSkge1xuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0Q2FjaGVbcHJldlJlcXVlc3RDYWNoZUtleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlbmRlclByb3BzOiBnZXRMb2FkaW5nUmVuZGVyUHJvcHMoKSxcbiAgICAgICAgICByZXF1ZXN0Q2FjaGVLZXk6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH07IC8vIFJlLWluaXRpYWxpemUgdGhlIFJlYWN0UmVsYXlRdWVyeUZldGNoZXIgd2l0aCBjYWxsYmFja3MuXG4gICAgLy8gSWYgZGF0YSBoYXMgY2hhbmdlZCBzaW5jZSBjb25zdHJ1Y3Rpb25zLCB0aGlzIHdpbGwgcmUtcmVuZGVyLlxuXG5cbiAgICBpZiAodGhpcy5wcm9wcy5xdWVyeSkge1xuICAgICAgcXVlcnlGZXRjaGVyLnNldE9uRGF0YUNoYW5nZShyZXRyeUNhbGxiYWNrcy5oYW5kbGVEYXRhQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGNhY2hlIHRoZSByZXF1ZXN0IGFmdGVyIHRoZSBjb21wb25lbnQgY29tbWl0c1xuICAgIHZhciByZXF1ZXN0Q2FjaGVLZXkgPSB0aGlzLnN0YXRlLnJlcXVlc3RDYWNoZUtleTtcblxuICAgIGlmIChyZXF1ZXN0Q2FjaGVLZXkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0Q2FjaGVbcmVxdWVzdENhY2hlS2V5XTsgLy8gSEFDS1xuXG4gICAgICBkZWxldGUgdGhpcy5zdGF0ZS5yZXF1ZXN0Q2FjaGVLZXk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuc3RhdGUucXVlcnlGZXRjaGVyLmRpc3Bvc2UoKTtcbiAgfTtcblxuICBfcHJvdG8uc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgcmV0dXJuIG5leHRQcm9wcy5yZW5kZXIgIT09IHRoaXMucHJvcHMucmVuZGVyIHx8IG5leHRTdGF0ZS5yZW5kZXJQcm9wcyAhPT0gdGhpcy5zdGF0ZS5yZW5kZXJQcm9wcztcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRzdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICByZW5kZXJQcm9wcyA9IF90aGlzJHN0YXRlMi5yZW5kZXJQcm9wcyxcbiAgICAgICAgcmVsYXlDb250ZXh0ID0gX3RoaXMkc3RhdGUyLnJlbGF5Q29udGV4dDsgLy8gTm90ZSB0aGF0IHRoZSByb290IGZyYWdtZW50IHJlc3VsdHMgaW4gYHJlbmRlclByb3BzLnByb3BzYCBpcyBhbHJlYWR5XG4gICAgLy8gZnJvemVuIGJ5IHRoZSBzdG9yZTsgdGhpcyBjYWxsIGlzIHRvIGZyZWV6ZSB0aGUgcmVuZGVyUHJvcHMgb2JqZWN0IGFuZFxuICAgIC8vIGVycm9yIHByb3BlcnR5IGlmIHNldC5cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGRlZXBGcmVlemUocmVuZGVyUHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdFJlbGF5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHJlbGF5Q29udGV4dFxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0UmVsYXlRdWVyeVJlbmRlcmVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHF1ZXJ5UmVuZGVyZXJDb250ZXh0XG4gICAgfSwgdGhpcy5wcm9wcy5yZW5kZXIocmVuZGVyUHJvcHMpKSk7XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0UmVsYXlRdWVyeVJlbmRlcmVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5mdW5jdGlvbiBnZXRMb2FkaW5nUmVuZGVyUHJvcHMoKSB7XG4gIHJldHVybiB7XG4gICAgZXJyb3I6IG51bGwsXG4gICAgcHJvcHM6IG51bGwsXG4gICAgLy8gYHByb3BzOiBudWxsYCBpbmRpY2F0ZXMgdGhhdCB0aGUgZGF0YSBpcyBiZWluZyBmZXRjaGVkIChpLmUuIGxvYWRpbmcpXG4gICAgcmV0cnk6IG51bGxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RW1wdHlSZW5kZXJQcm9wcygpIHtcbiAgcmV0dXJuIHtcbiAgICBlcnJvcjogbnVsbCxcbiAgICBwcm9wczoge30sXG4gICAgLy8gYHByb3BzOiB7fWAgaW5kaWNhdGVzIG5vIGRhdGEgYXZhaWxhYmxlXG4gICAgcmV0cnk6IG51bGxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVuZGVyUHJvcHMoZXJyb3IsIHNuYXBzaG90LCBxdWVyeUZldGNoZXIsIHJldHJ5Q2FsbGJhY2tzKSB7XG4gIHJldHVybiB7XG4gICAgZXJyb3I6IGVycm9yID8gZXJyb3IgOiBudWxsLFxuICAgIHByb3BzOiBzbmFwc2hvdCA/IHNuYXBzaG90LmRhdGEgOiBudWxsLFxuICAgIHJldHJ5OiBmdW5jdGlvbiByZXRyeShjYWNoZUNvbmZpZ092ZXJyaWRlKSB7XG4gICAgICB2YXIgc3luY1NuYXBzaG90ID0gcXVlcnlGZXRjaGVyLnJldHJ5KGNhY2hlQ29uZmlnT3ZlcnJpZGUpO1xuXG4gICAgICBpZiAoc3luY1NuYXBzaG90ICYmIHR5cGVvZiByZXRyeUNhbGxiYWNrcy5oYW5kbGVEYXRhQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHJ5Q2FsbGJhY2tzLmhhbmRsZURhdGFDaGFuZ2Uoe1xuICAgICAgICAgIHNuYXBzaG90OiBzeW5jU25hcHNob3RcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGVycm9yICYmIHR5cGVvZiByZXRyeUNhbGxiYWNrcy5oYW5kbGVSZXRyeUFmdGVyRXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gSWYgcmV0cnlpbmcgYWZ0ZXIgYW4gZXJyb3IgYW5kIG5vIHN5bmNocm9ub3VzIHJlc3VsdCBhdmFpbGFibGUsXG4gICAgICAgIC8vIHJlc2V0IHRoZSByZW5kZXIgcHJvcHNcbiAgICAgICAgcmV0cnlDYWxsYmFja3MuaGFuZGxlUmV0cnlBZnRlckVycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFJlcXVlc3RDYWNoZUtleShyZXF1ZXN0LCB2YXJpYWJsZXMpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICBpZDogcmVxdWVzdC5jYWNoZUlEID8gcmVxdWVzdC5jYWNoZUlEIDogcmVxdWVzdC5pZCxcbiAgICB2YXJpYWJsZXM6IHZhcmlhYmxlc1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZmV0Y2hRdWVyeUFuZENvbXB1dGVTdGF0ZUZyb21Qcm9wcyhwcm9wcywgcXVlcnlGZXRjaGVyLCByZXRyeUNhbGxiYWNrcywgcmVxdWVzdENhY2hlS2V5KSB7XG4gIHZhciBlbnZpcm9ubWVudCA9IHByb3BzLmVudmlyb25tZW50LFxuICAgICAgcXVlcnkgPSBwcm9wcy5xdWVyeSxcbiAgICAgIHZhcmlhYmxlcyA9IHByb3BzLnZhcmlhYmxlcyxcbiAgICAgIGNhY2hlQ29uZmlnID0gcHJvcHMuY2FjaGVDb25maWc7XG4gIHZhciBnZW5lcmljRW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcblxuICBpZiAocXVlcnkpIHtcbiAgICB2YXIgcmVxdWVzdCA9IGdldFJlcXVlc3QocXVlcnkpO1xuICAgIHZhciBvcGVyYXRpb24gPSBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yKHJlcXVlc3QsIHZhcmlhYmxlcywgY2FjaGVDb25maWcpO1xuICAgIHZhciByZWxheUNvbnRleHQgPSB7XG4gICAgICBlbnZpcm9ubWVudDogZ2VuZXJpY0Vudmlyb25tZW50XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgcmVxdWVzdENhY2hlS2V5ID09PSAnc3RyaW5nJyAmJiByZXF1ZXN0Q2FjaGVbcmVxdWVzdENhY2hlS2V5XSkge1xuICAgICAgLy8gVGhpcyBzYW1lIHJlcXVlc3QgaXMgYWxyZWFkeSBpbiBmbGlnaHQuXG4gICAgICB2YXIgc25hcHNob3QgPSByZXF1ZXN0Q2FjaGVbcmVxdWVzdENhY2hlS2V5XS5zbmFwc2hvdDtcblxuICAgICAgaWYgKHNuYXBzaG90KSB7XG4gICAgICAgIC8vIFVzZSB0aGUgY2FjaGVkIHJlc3BvbnNlXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgcmVsYXlDb250ZXh0OiByZWxheUNvbnRleHQsXG4gICAgICAgICAgcmVuZGVyUHJvcHM6IGdldFJlbmRlclByb3BzKG51bGwsIHNuYXBzaG90LCBxdWVyeUZldGNoZXIsIHJldHJ5Q2FsbGJhY2tzKSxcbiAgICAgICAgICBzbmFwc2hvdDogc25hcHNob3QsXG4gICAgICAgICAgcmVxdWVzdENhY2hlS2V5OiByZXF1ZXN0Q2FjaGVLZXlcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJlbmRlciBsb2FkaW5nIHN0YXRlXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgcmVsYXlDb250ZXh0OiByZWxheUNvbnRleHQsXG4gICAgICAgICAgcmVuZGVyUHJvcHM6IGdldExvYWRpbmdSZW5kZXJQcm9wcygpLFxuICAgICAgICAgIHNuYXBzaG90OiBudWxsLFxuICAgICAgICAgIHJlcXVlc3RDYWNoZUtleTogcmVxdWVzdENhY2hlS2V5XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBzdG9yZVNuYXBzaG90ID0gcXVlcnlGZXRjaGVyLmxvb2t1cEluU3RvcmUoZ2VuZXJpY0Vudmlyb25tZW50LCBvcGVyYXRpb24sIHByb3BzLmZldGNoUG9saWN5KTtcbiAgICAgIHZhciBxdWVyeVNuYXBzaG90ID0gcXVlcnlGZXRjaGVyLmZldGNoKHtcbiAgICAgICAgZW52aXJvbm1lbnQ6IGdlbmVyaWNFbnZpcm9ubWVudCxcbiAgICAgICAgb25EYXRhQ2hhbmdlOiByZXRyeUNhbGxiYWNrcy5oYW5kbGVEYXRhQ2hhbmdlLFxuICAgICAgICBvcGVyYXRpb246IG9wZXJhdGlvblxuICAgICAgfSk7IC8vIFVzZSBuZXR3b3JrIGRhdGEgZmlyc3QsIHNpbmNlIGl0IG1heSBiZSBmcmVzaGVyXG5cbiAgICAgIHZhciBfc25hcHNob3QgPSBxdWVyeVNuYXBzaG90IHx8IHN0b3JlU25hcHNob3Q7IC8vIGNhY2hlIHRoZSByZXF1ZXN0IHRvIGF2b2lkIGR1cGxpY2F0ZSByZXF1ZXN0c1xuXG5cbiAgICAgIHJlcXVlc3RDYWNoZUtleSA9IHJlcXVlc3RDYWNoZUtleSB8fCBnZXRSZXF1ZXN0Q2FjaGVLZXkocmVxdWVzdC5wYXJhbXMsIHByb3BzLnZhcmlhYmxlcyk7XG4gICAgICByZXF1ZXN0Q2FjaGVbcmVxdWVzdENhY2hlS2V5XSA9IHtcbiAgICAgICAgcXVlcnlGZXRjaGVyOiBxdWVyeUZldGNoZXIsXG4gICAgICAgIHNuYXBzaG90OiBfc25hcHNob3RcbiAgICAgIH07XG5cbiAgICAgIGlmICghX3NuYXBzaG90KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgcmVsYXlDb250ZXh0OiByZWxheUNvbnRleHQsXG4gICAgICAgICAgcmVuZGVyUHJvcHM6IGdldExvYWRpbmdSZW5kZXJQcm9wcygpLFxuICAgICAgICAgIHNuYXBzaG90OiBudWxsLFxuICAgICAgICAgIHJlcXVlc3RDYWNoZUtleTogcmVxdWVzdENhY2hlS2V5XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICByZWxheUNvbnRleHQ6IHJlbGF5Q29udGV4dCxcbiAgICAgICAgcmVuZGVyUHJvcHM6IGdldFJlbmRlclByb3BzKG51bGwsIF9zbmFwc2hvdCwgcXVlcnlGZXRjaGVyLCByZXRyeUNhbGxiYWNrcyksXG4gICAgICAgIHNuYXBzaG90OiBfc25hcHNob3QsXG4gICAgICAgIHJlcXVlc3RDYWNoZUtleTogcmVxdWVzdENhY2hlS2V5XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIHJlbGF5Q29udGV4dDogcmVsYXlDb250ZXh0LFxuICAgICAgICByZW5kZXJQcm9wczogZ2V0UmVuZGVyUHJvcHMoZXJyb3IsIG51bGwsIHF1ZXJ5RmV0Y2hlciwgcmV0cnlDYWxsYmFja3MpLFxuICAgICAgICBzbmFwc2hvdDogbnVsbCxcbiAgICAgICAgcmVxdWVzdENhY2hlS2V5OiByZXF1ZXN0Q2FjaGVLZXlcbiAgICAgIH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHF1ZXJ5RmV0Y2hlci5kaXNwb3NlKCk7XG4gICAgdmFyIF9yZWxheUNvbnRleHQgPSB7XG4gICAgICBlbnZpcm9ubWVudDogZ2VuZXJpY0Vudmlyb25tZW50XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IG51bGwsXG4gICAgICByZWxheUNvbnRleHQ6IF9yZWxheUNvbnRleHQsXG4gICAgICByZW5kZXJQcm9wczogZ2V0RW1wdHlSZW5kZXJQcm9wcygpLFxuICAgICAgcmVxdWVzdENhY2hlS2V5OiBudWxsIC8vIGlmIHRoZXJlIGlzIGFuIGVycm9yLCBkb24ndCBjYWNoZSByZXF1ZXN0XG5cbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWxheVF1ZXJ5UmVuZGVyZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gIHJvb3RJc1F1ZXJ5UmVuZGVyZXI6IGZhbHNlXG59KTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIFJlYWN0UmVsYXlDb250ZXh0ID0gcmVxdWlyZSgnLi9SZWFjdFJlbGF5Q29udGV4dCcpO1xuXG52YXIgUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlciA9IHJlcXVpcmUoJy4vUmVhY3RSZWxheVF1ZXJ5RmV0Y2hlcicpO1xuXG52YXIgYXJlRXF1YWwgPSByZXF1aXJlKFwiZmJqcy9saWIvYXJlRXF1YWxcIik7XG5cbnZhciBidWlsZFJlYWN0UmVsYXlDb250YWluZXIgPSByZXF1aXJlKCcuL2J1aWxkUmVhY3RSZWxheUNvbnRhaW5lcicpO1xuXG52YXIgZ2V0Um9vdFZhcmlhYmxlc0ZvckZyYWdtZW50cyA9IHJlcXVpcmUoJy4vZ2V0Um9vdFZhcmlhYmxlc0ZvckZyYWdtZW50cycpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlDb250YWluZXJVdGlscycpLFxuICAgIGdldENvbnRhaW5lck5hbWUgPSBfcmVxdWlyZS5nZXRDb250YWluZXJOYW1lO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9SZWxheUNvbnRleHQnKSxcbiAgICBhc3NlcnRSZWxheUNvbnRleHQgPSBfcmVxdWlyZTIuYXNzZXJ0UmVsYXlDb250ZXh0O1xuXG52YXIgX3JlcXVpcmUzID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIE9ic2VydmFibGUgPSBfcmVxdWlyZTMuT2JzZXJ2YWJsZSxcbiAgICBjcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlciA9IF9yZXF1aXJlMy5jcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlcixcbiAgICBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yID0gX3JlcXVpcmUzLmNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IsXG4gICAgZ2V0RGF0YUlEc0Zyb21PYmplY3QgPSBfcmVxdWlyZTMuZ2V0RGF0YUlEc0Zyb21PYmplY3QsXG4gICAgZ2V0UmVxdWVzdCA9IF9yZXF1aXJlMy5nZXRSZXF1ZXN0LFxuICAgIGdldFNlbGVjdG9yID0gX3JlcXVpcmUzLmdldFNlbGVjdG9yLFxuICAgIGdldFZhcmlhYmxlc0Zyb21PYmplY3QgPSBfcmVxdWlyZTMuZ2V0VmFyaWFibGVzRnJvbU9iamVjdCxcbiAgICBpc1NjYWxhckFuZEVxdWFsID0gX3JlcXVpcmUzLmlzU2NhbGFyQW5kRXF1YWw7XG5cbi8qKlxuICogQ29tcG9zZXMgYSBSZWFjdCBjb21wb25lbnQgY2xhc3MsIHJldHVybmluZyBhIG5ldyBjbGFzcyB0aGF0IGludGVyY2VwdHNcbiAqIHByb3BzLCByZXNvbHZpbmcgdGhlbSB3aXRoIHRoZSBwcm92aWRlZCBmcmFnbWVudHMgYW5kIHN1YnNjcmliaW5nIGZvclxuICogdXBkYXRlcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyV2l0aEZyYWdtZW50cyhDb21wb25lbnQsIGZyYWdtZW50cywgdGFnZ2VkTm9kZSkge1xuICB2YXIgX2NsYXNzLCBfdGVtcDtcblxuICB2YXIgY29udGFpbmVyTmFtZSA9IGdldENvbnRhaW5lck5hbWUoQ29tcG9uZW50KTtcbiAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgKDAsIF9pbmhlcml0c0xvb3NlMltcImRlZmF1bHRcIl0pKF9jbGFzcywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBfY2xhc3MocHJvcHMpIHtcbiAgICAgIHZhciBfcHJvcHMkX19yb290SXNRdWVyeVIsIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpLCBcIl9oYW5kbGVGcmFnbWVudERhdGFVcGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVzb2x2ZXJGcm9tVGhpc1VwZGF0ZSA9IF90aGlzLnN0YXRlLnJlc29sdmVyO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uICh1cGRhdGVkU3RhdGUpIHtcbiAgICAgICAgICByZXR1cm4gKC8vIElmIHRoaXMgZXZlbnQgYmVsb25ncyB0byB0aGUgY3VycmVudCBkYXRhIHNvdXJjZSwgdXBkYXRlLlxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIHNob3VsZCBpZ25vcmUgaXQuXG4gICAgICAgICAgICByZXNvbHZlckZyb21UaGlzVXBkYXRlID09PSB1cGRhdGVkU3RhdGUucmVzb2x2ZXIgPyB7XG4gICAgICAgICAgICAgIGRhdGE6IHVwZGF0ZWRTdGF0ZS5yZXNvbHZlci5yZXNvbHZlKClcbiAgICAgICAgICAgIH0gOiBudWxsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpLCBcIl9yZWZldGNoXCIsIGZ1bmN0aW9uIChyZWZldGNoVmFyaWFibGVzLCByZW5kZXJWYXJpYWJsZXMsIG9ic2VydmVyT3JDYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgICBpZiAoX3RoaXMuX2lzVW5tb3VudGVkKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlYWN0UmVsYXlSZWZldGNoQ29udGFpbmVyOiBVbmV4cGVjdGVkIGNhbGwgb2YgYHJlZmV0Y2hgICcgKyAnb24gdW5tb3VudGVkIGNvbnRhaW5lciBgJXNgLiBJdCBsb29rcyBsaWtlIHNvbWUgaW5zdGFuY2VzICcgKyAnb2YgeW91ciBjb250YWluZXIgc3RpbGwgdHJ5aW5nIHRvIHJlZmV0Y2ggdGhlIGRhdGEgYnV0IHRoZXkgYWxyZWFkeSAnICsgJ3VubW91bnRlZC4gUGxlYXNlIG1ha2Ugc3VyZSB5b3UgY2xlYXIgYWxsIHRpbWVycywgaW50ZXJ2YWxzLCBhc3luYyAnICsgJ2NhbGxzLCBldGMgdGhhdCBtYXkgdHJpZ2dlciBgcmVmZXRjaGAuJywgY29udGFpbmVyTmFtZSkgOiB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7fVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX2Fzc2VydFJlbGF5Q29udGV4dCA9IGFzc2VydFJlbGF5Q29udGV4dChfdGhpcy5wcm9wcy5fX3JlbGF5Q29udGV4dCksXG4gICAgICAgICAgICBlbnZpcm9ubWVudCA9IF9hc3NlcnRSZWxheUNvbnRleHQuZW52aXJvbm1lbnQ7XG5cbiAgICAgICAgdmFyIHJvb3RWYXJpYWJsZXMgPSBnZXRSb290VmFyaWFibGVzRm9yRnJhZ21lbnRzKGZyYWdtZW50cywgX3RoaXMucHJvcHMpO1xuICAgICAgICB2YXIgZmV0Y2hWYXJpYWJsZXMgPSB0eXBlb2YgcmVmZXRjaFZhcmlhYmxlcyA9PT0gJ2Z1bmN0aW9uJyA/IHJlZmV0Y2hWYXJpYWJsZXMoX3RoaXMuX2dldEZyYWdtZW50VmFyaWFibGVzKCkpIDogcmVmZXRjaFZhcmlhYmxlczsgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtc3ByZWFkLWludGVyZmFjZV1cblxuICAgICAgICBmZXRjaFZhcmlhYmxlcyA9ICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCByb290VmFyaWFibGVzKSwgZmV0Y2hWYXJpYWJsZXMpO1xuICAgICAgICB2YXIgZnJhZ21lbnRWYXJpYWJsZXMgPSByZW5kZXJWYXJpYWJsZXMgPyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC1zcHJlYWQtaW50ZXJmYWNlXVxuICAgICAgICAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgZmV0Y2hWYXJpYWJsZXMpLCByZW5kZXJWYXJpYWJsZXMpIDogZmV0Y2hWYXJpYWJsZXM7XG4gICAgICAgIHZhciBjYWNoZUNvbmZpZyA9IG9wdGlvbnMgPyB7XG4gICAgICAgICAgZm9yY2U6ICEhb3B0aW9ucy5mb3JjZVxuICAgICAgICB9IDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChjYWNoZUNvbmZpZyAhPSBudWxsICYmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWV0YWRhdGEpICE9IG51bGwpIHtcbiAgICAgICAgICBjYWNoZUNvbmZpZy5tZXRhZGF0YSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tZXRhZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvYnNlcnZlciA9IHR5cGVvZiBvYnNlcnZlck9yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicgPyB7XG4gICAgICAgICAgLy8gY2FsbGJhY2sgaXMgbm90IGV4ZWN0dWVkIG9uIGNvbXBsZXRlIG9yIHVuc3Vic2NyaWJlXG4gICAgICAgICAgLy8gZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICBuZXh0OiBvYnNlcnZlck9yQ2FsbGJhY2ssXG4gICAgICAgICAgZXJyb3I6IG9ic2VydmVyT3JDYWxsYmFja1xuICAgICAgICB9IDogb2JzZXJ2ZXJPckNhbGxiYWNrIHx8IHt9O1xuICAgICAgICB2YXIgcXVlcnkgPSBnZXRSZXF1ZXN0KHRhZ2dlZE5vZGUpO1xuICAgICAgICB2YXIgb3BlcmF0aW9uID0gY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcihxdWVyeSwgZmV0Y2hWYXJpYWJsZXMsIGNhY2hlQ29uZmlnKTsgLy8gVE9ETzogVDI2Mjg4NzUyIGZpbmQgYSBiZXR0ZXIgd2F5XG5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbGludC9yZWFjdC1zdGF0ZS1wcm9wcy1tdXRhdGlvbiAqL1xuXG4gICAgICAgIF90aGlzLnN0YXRlLmxvY2FsVmFyaWFibGVzID0gZmV0Y2hWYXJpYWJsZXM7XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgbGludC9yZWFjdC1zdGF0ZS1wcm9wcy1tdXRhdGlvbiAqL1xuICAgICAgICAvLyBDYW5jZWwgYW55IHByZXZpb3VzbHkgcnVubmluZyByZWZldGNoLlxuXG4gICAgICAgIF90aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uICYmIF90aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IC8vIERlY2xhcmUgcmVmZXRjaFN1YnNjcmlwdGlvbiBiZWZvcmUgYXNzaWduaW5nIGl0IGluIC5zdGFydCgpLCBzaW5jZVxuICAgICAgICAvLyBzeW5jaHJvbm91cyBjb21wbGV0aW9uIG1heSBjYWxsIGNhbGxiYWNrcyAuc3Vic2NyaWJlKCkgcmV0dXJucy5cblxuICAgICAgICB2YXIgcmVmZXRjaFN1YnNjcmlwdGlvbjtcblxuICAgICAgICB2YXIgc3RvcmVTbmFwc2hvdCA9IF90aGlzLl9nZXRRdWVyeUZldGNoZXIoKS5sb29rdXBJblN0b3JlKGVudmlyb25tZW50LCBvcGVyYXRpb24sIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5mZXRjaFBvbGljeSk7XG5cbiAgICAgICAgaWYgKHN0b3JlU25hcHNob3QgIT0gbnVsbCkge1xuICAgICAgICAgIF90aGlzLnN0YXRlLnJlc29sdmVyLnNldFZhcmlhYmxlcyhmcmFnbWVudFZhcmlhYmxlcywgb3BlcmF0aW9uLnJlcXVlc3Qubm9kZSk7XG5cbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAobGF0ZXN0U3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGRhdGE6IGxhdGVzdFN0YXRlLnJlc29sdmVyLnJlc29sdmUoKSxcbiAgICAgICAgICAgICAgY29udGV4dEZvckNoaWxkcmVuOiB7XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnQ6IF90aGlzLnByb3BzLl9fcmVsYXlDb250ZXh0LmVudmlyb25tZW50XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCAmJiBvYnNlcnZlci5uZXh0KCk7XG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSAmJiBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7fVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5fZ2V0UXVlcnlGZXRjaGVyKCkuZXhlY3V0ZSh7XG4gICAgICAgICAgZW52aXJvbm1lbnQ6IGVudmlyb25tZW50LFxuICAgICAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgICAgICAgIC8vIFRPRE8gKFQyNjQzMDA5OSk6IENsZWFudXAgb2xkIHJlZmVyZW5jZXNcbiAgICAgICAgICBwcmVzZXJ2ZVByZXZpb3VzUmVmZXJlbmNlczogdHJ1ZVxuICAgICAgICB9KS5tZXJnZU1hcChmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICBfdGhpcy5zdGF0ZS5yZXNvbHZlci5zZXRWYXJpYWJsZXMoZnJhZ21lbnRWYXJpYWJsZXMsIG9wZXJhdGlvbi5yZXF1ZXN0Lm5vZGUpO1xuXG4gICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKGxhdGVzdFN0YXRlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGF0YTogbGF0ZXN0U3RhdGUucmVzb2x2ZXIucmVzb2x2ZSgpLFxuICAgICAgICAgICAgICAgIGNvbnRleHRGb3JDaGlsZHJlbjoge1xuICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnQ6IF90aGlzLnByb3BzLl9fcmVsYXlDb250ZXh0LmVudmlyb25tZW50XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzaW5rLm5leHQoKTtcbiAgICAgICAgICAgICAgc2luay5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiZmluYWxseVwiXShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gRmluYWxpemluZyBhIHJlZmV0Y2ggc2hvdWxkIG9ubHkgY2xlYXIgdGhpcy5fcmVmZXRjaFN1YnNjcmlwdGlvblxuICAgICAgICAgIC8vIGlmIHRoZSBmaW5pemluZyBzdWJzY3JpcHRpb24gaXMgdGhlIG1vc3QgcmVjZW50IGNhbGwuXG4gICAgICAgICAgaWYgKF90aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uID09PSByZWZldGNoU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBfdGhpcy5fcmVmZXRjaFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5zdWJzY3JpYmUoKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIG9ic2VydmVyKSwge30sIHtcbiAgICAgICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBfdGhpcy5fcmVmZXRjaFN1YnNjcmlwdGlvbiA9IHJlZmV0Y2hTdWJzY3JpcHRpb24gPSBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICBvYnNlcnZlci5zdGFydCAmJiBvYnNlcnZlci5zdGFydChzdWJzY3JpcHRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgICAgIHJlZmV0Y2hTdWJzY3JpcHRpb24gJiYgcmVmZXRjaFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHJlbGF5Q29udGV4dCA9IGFzc2VydFJlbGF5Q29udGV4dChwcm9wcy5fX3JlbGF5Q29udGV4dCk7XG4gICAgICB2YXIgcm9vdElzUXVlcnlSZW5kZXJlciA9IChfcHJvcHMkX19yb290SXNRdWVyeVIgPSBwcm9wcy5fX3Jvb3RJc1F1ZXJ5UmVuZGVyZXIpICE9PSBudWxsICYmIF9wcm9wcyRfX3Jvb3RJc1F1ZXJ5UiAhPT0gdm9pZCAwID8gX3Byb3BzJF9fcm9vdElzUXVlcnlSIDogZmFsc2U7XG4gICAgICBfdGhpcy5fcmVmZXRjaFN1YnNjcmlwdGlvbiA9IG51bGw7IC8vIERvIG5vdCBwcm92aWRlIGEgc3Vic2NyaXB0aW9uL2NhbGxiYWNrIGhlcmUuXG4gICAgICAvLyBJdCBpcyBwb3NzaWJsZSBmb3IgdGhpcyByZW5kZXIgdG8gYmUgaW50ZXJydXB0ZWQgb3IgYWJvcnRlZCxcbiAgICAgIC8vIEluIHdoaWNoIGNhc2UgdGhlIHN1YnNjcmlwdGlvbiB3b3VsZCBjYXVzZSBhIGxlYWsuXG4gICAgICAvLyBXZSB3aWxsIGFkZCB0aGUgc3Vic2NyaXB0aW9uIGluIGNvbXBvbmVudERpZE1vdW50KCkuXG5cbiAgICAgIHZhciByZXNvbHZlciA9IGNyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyKHJlbGF5Q29udGV4dCwgY29udGFpbmVyTmFtZSwgZnJhZ21lbnRzLCBwcm9wcywgcm9vdElzUXVlcnlSZW5kZXJlcik7XG4gICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgZGF0YTogcmVzb2x2ZXIucmVzb2x2ZSgpLFxuICAgICAgICBsb2NhbFZhcmlhYmxlczogbnVsbCxcbiAgICAgICAgcHJldlByb3BzOiBwcm9wcyxcbiAgICAgICAgcHJldlByb3BzQ29udGV4dDogcmVsYXlDb250ZXh0LFxuICAgICAgICBjb250ZXh0Rm9yQ2hpbGRyZW46IHJlbGF5Q29udGV4dCxcbiAgICAgICAgcmVsYXlQcm9wOiBnZXRSZWxheVByb3AocmVsYXlDb250ZXh0LmVudmlyb25tZW50LCBfdGhpcy5fcmVmZXRjaCksXG4gICAgICAgIHJlc29sdmVyOiByZXNvbHZlclxuICAgICAgfTtcbiAgICAgIF90aGlzLl9pc1VubW91bnRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBfY2xhc3MucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLl9pc1VubW91bnRlZCA9IGZhbHNlO1xuXG4gICAgICB0aGlzLl9zdWJzY3JpYmVUb05ld1Jlc29sdmVyKCk7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIC8vIElmIHRoZSBlbnZpcm9ubWVudCBoYXMgY2hhbmdlZCBvciBwcm9wcyBwb2ludCB0byBuZXcgcmVjb3JkcyB0aGVuXG4gICAgICAvLyBwcmV2aW91c2x5IGZldGNoZWQgZGF0YSBhbmQgYW55IHBlbmRpbmcgZmV0Y2hlcyBubyBsb25nZXIgYXBwbHk6XG4gICAgICAvLyAtIEV4aXN0aW5nIHJlZmVyZW5jZXMgYXJlIG9uIHRoZSBvbGQgZW52aXJvbm1lbnQuXG4gICAgICAvLyAtIEV4aXN0aW5nIHJlZmVyZW5jZXMgYXJlIGJhc2VkIG9uIG9sZCB2YXJpYWJsZXMuXG4gICAgICAvLyAtIFBlbmRpbmcgZmV0Y2hlcyBhcmUgZm9yIHRoZSBwcmV2aW91cyByZWNvcmRzLlxuICAgICAgaWYgKHRoaXMuc3RhdGUucmVzb2x2ZXIgIT09IHByZXZTdGF0ZS5yZXNvbHZlcikge1xuICAgICAgICBwcmV2U3RhdGUucmVzb2x2ZXIuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9xdWVyeUZldGNoZXIgJiYgdGhpcy5fcXVlcnlGZXRjaGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fcmVmZXRjaFN1YnNjcmlwdGlvbiAmJiB0aGlzLl9yZWZldGNoU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG5cbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlVG9OZXdSZXNvbHZlcigpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGVuIG5ldyBwcm9wcyBhcmUgcmVjZWl2ZWQsIHJlYWQgZGF0YSBmb3IgdGhlIG5ldyBwcm9wcyBhbmQgYWRkIGl0IHRvXG4gICAgICogc3RhdGUuIFByb3BzIG1heSBiZSB0aGUgc2FtZSBpbiB3aGljaCBjYXNlIHByZXZpb3VzIGRhdGEgY2FuIGJlIHJldXNlZC5cbiAgICAgKi9cbiAgICA7XG5cbiAgICBfY2xhc3MuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICB2YXIgX25leHRQcm9wcyRfX3Jvb3RJc1F1O1xuXG4gICAgICAvLyBBbnkgcHJvcHMgY2hhbmdlIGNvdWxkIGltcGFjdCB0aGUgcXVlcnksIHNvIHdlIG1pcnJvciBwcm9wcyBpbiBzdGF0ZS5cbiAgICAgIC8vIFRoaXMgaXMgYW4gdW51c3VhbCBwYXR0ZXJuLCBidXQgbmVjZXNzYXJ5IGZvciB0aGlzIGNvbnRhaW5lciB1c2VjYXNlLlxuICAgICAgdmFyIHByZXZQcm9wcyA9IHByZXZTdGF0ZS5wcmV2UHJvcHM7XG4gICAgICB2YXIgcmVsYXlDb250ZXh0ID0gYXNzZXJ0UmVsYXlDb250ZXh0KG5leHRQcm9wcy5fX3JlbGF5Q29udGV4dCk7XG4gICAgICB2YXIgcm9vdElzUXVlcnlSZW5kZXJlciA9IChfbmV4dFByb3BzJF9fcm9vdElzUXUgPSBuZXh0UHJvcHMuX19yb290SXNRdWVyeVJlbmRlcmVyKSAhPT0gbnVsbCAmJiBfbmV4dFByb3BzJF9fcm9vdElzUXUgIT09IHZvaWQgMCA/IF9uZXh0UHJvcHMkX19yb290SXNRdSA6IGZhbHNlO1xuICAgICAgdmFyIHByZXZJRHMgPSBnZXREYXRhSURzRnJvbU9iamVjdChmcmFnbWVudHMsIHByZXZQcm9wcyk7XG4gICAgICB2YXIgbmV4dElEcyA9IGdldERhdGFJRHNGcm9tT2JqZWN0KGZyYWdtZW50cywgbmV4dFByb3BzKTtcbiAgICAgIHZhciBwcmV2Um9vdFZhcmlhYmxlcyA9IGdldFJvb3RWYXJpYWJsZXNGb3JGcmFnbWVudHMoZnJhZ21lbnRzLCBwcmV2UHJvcHMpO1xuICAgICAgdmFyIG5leHRSb290VmFyaWFibGVzID0gZ2V0Um9vdFZhcmlhYmxlc0ZvckZyYWdtZW50cyhmcmFnbWVudHMsIG5leHRQcm9wcyk7XG4gICAgICB2YXIgcmVzb2x2ZXIgPSBwcmV2U3RhdGUucmVzb2x2ZXI7IC8vIElmIHRoZSBlbnZpcm9ubWVudCBoYXMgY2hhbmdlZCBvciBwcm9wcyBwb2ludCB0byBuZXcgcmVjb3JkcyB0aGVuXG4gICAgICAvLyBwcmV2aW91c2x5IGZldGNoZWQgZGF0YSBhbmQgYW55IHBlbmRpbmcgZmV0Y2hlcyBubyBsb25nZXIgYXBwbHk6XG4gICAgICAvLyAtIEV4aXN0aW5nIHJlZmVyZW5jZXMgYXJlIG9uIHRoZSBvbGQgZW52aXJvbm1lbnQuXG4gICAgICAvLyAtIEV4aXN0aW5nIHJlZmVyZW5jZXMgYXJlIGJhc2VkIG9uIG9sZCB2YXJpYWJsZXMuXG4gICAgICAvLyAtIFBlbmRpbmcgZmV0Y2hlcyBhcmUgZm9yIHRoZSBwcmV2aW91cyByZWNvcmRzLlxuXG4gICAgICBpZiAocHJldlN0YXRlLnByZXZQcm9wc0NvbnRleHQuZW52aXJvbm1lbnQgIT09IHJlbGF5Q29udGV4dC5lbnZpcm9ubWVudCB8fCAhYXJlRXF1YWwocHJldlJvb3RWYXJpYWJsZXMsIG5leHRSb290VmFyaWFibGVzKSB8fCAhYXJlRXF1YWwocHJldklEcywgbmV4dElEcykpIHtcbiAgICAgICAgLy8gRG8gbm90IHByb3ZpZGUgYSBzdWJzY3JpcHRpb24vY2FsbGJhY2sgaGVyZS5cbiAgICAgICAgLy8gSXQgaXMgcG9zc2libGUgZm9yIHRoaXMgcmVuZGVyIHRvIGJlIGludGVycnVwdGVkIG9yIGFib3J0ZWQsXG4gICAgICAgIC8vIEluIHdoaWNoIGNhc2UgdGhlIHN1YnNjcmlwdGlvbiB3b3VsZCBjYXVzZSBhIGxlYWsuXG4gICAgICAgIC8vIFdlIHdpbGwgYWRkIHRoZSBzdWJzY3JpcHRpb24gaW4gY29tcG9uZW50RGlkVXBkYXRlKCkuXG4gICAgICAgIHJlc29sdmVyID0gY3JlYXRlRnJhZ21lbnRTcGVjUmVzb2x2ZXIocmVsYXlDb250ZXh0LCBjb250YWluZXJOYW1lLCBmcmFnbWVudHMsIG5leHRQcm9wcywgcm9vdElzUXVlcnlSZW5kZXJlcik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0YTogcmVzb2x2ZXIucmVzb2x2ZSgpLFxuICAgICAgICAgIGxvY2FsVmFyaWFibGVzOiBudWxsLFxuICAgICAgICAgIHByZXZQcm9wczogbmV4dFByb3BzLFxuICAgICAgICAgIHByZXZQcm9wc0NvbnRleHQ6IHJlbGF5Q29udGV4dCxcbiAgICAgICAgICBjb250ZXh0Rm9yQ2hpbGRyZW46IHJlbGF5Q29udGV4dCxcbiAgICAgICAgICByZWxheVByb3A6IGdldFJlbGF5UHJvcChyZWxheUNvbnRleHQuZW52aXJvbm1lbnQsIHByZXZTdGF0ZS5yZWxheVByb3AucmVmZXRjaCksXG4gICAgICAgICAgcmVzb2x2ZXI6IHJlc29sdmVyXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKCFwcmV2U3RhdGUubG9jYWxWYXJpYWJsZXMpIHtcbiAgICAgICAgcmVzb2x2ZXIuc2V0UHJvcHMobmV4dFByb3BzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGEgPSByZXNvbHZlci5yZXNvbHZlKCk7XG5cbiAgICAgIGlmIChkYXRhICE9PSBwcmV2U3RhdGUuZGF0YSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgcHJldlByb3BzOiBuZXh0UHJvcHNcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5faXNVbm1vdW50ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5zdGF0ZS5yZXNvbHZlci5kaXNwb3NlKCk7XG4gICAgICB0aGlzLl9xdWVyeUZldGNoZXIgJiYgdGhpcy5fcXVlcnlGZXRjaGVyLmRpc3Bvc2UoKTtcbiAgICAgIHRoaXMuX3JlZmV0Y2hTdWJzY3JpcHRpb24gJiYgdGhpcy5fcmVmZXRjaFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAvLyBTaG9ydC1jaXJjdWl0IGlmIGFueSBSZWxheS1yZWxhdGVkIGRhdGEgaGFzIGNoYW5nZWRcbiAgICAgIGlmIChuZXh0U3RhdGUuZGF0YSAhPT0gdGhpcy5zdGF0ZS5kYXRhIHx8IG5leHRTdGF0ZS5yZWxheVByb3AgIT09IHRoaXMuc3RhdGUucmVsYXlQcm9wKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSAvLyBPdGhlcndpc2UsIGZvciBjb252ZW5pZW5jZSBzaG9ydC1jaXJjdWl0IGlmIGFsbCBub24tUmVsYXkgcHJvcHNcbiAgICAgIC8vIGFyZSBzY2FsYXIgYW5kIGVxdWFsXG5cblxuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhuZXh0UHJvcHMpO1xuXG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwga2V5cy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgdmFyIF9rZXkgPSBrZXlzW2lpXTtcblxuICAgICAgICBpZiAoX2tleSA9PT0gJ19fcmVsYXlDb250ZXh0Jykge1xuICAgICAgICAgIGlmICh0aGlzLnN0YXRlLnByZXZQcm9wc0NvbnRleHQuZW52aXJvbm1lbnQgIT09IG5leHRTdGF0ZS5wcmV2UHJvcHNDb250ZXh0LmVudmlyb25tZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFmcmFnbWVudHMuaGFzT3duUHJvcGVydHkoX2tleSkgJiYgIWlzU2NhbGFyQW5kRXF1YWwobmV4dFByb3BzW19rZXldLCB0aGlzLnByb3BzW19rZXldKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zdWJzY3JpYmVUb05ld1Jlc29sdmVyID0gZnVuY3Rpb24gX3N1YnNjcmliZVRvTmV3UmVzb2x2ZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGRhdGEgPSBfdGhpcyRzdGF0ZS5kYXRhLFxuICAgICAgICAgIHJlc29sdmVyID0gX3RoaXMkc3RhdGUucmVzb2x2ZXI7IC8vIEV2ZW50IGxpc3RlbmVycyBhcmUgb25seSBzYWZlIHRvIGFkZCBkdXJpbmcgdGhlIGNvbW1pdCBwaGFzZSxcbiAgICAgIC8vIFNvIHRoZXkgd29uJ3QgbGVhayBpZiByZW5kZXIgaXMgaW50ZXJydXB0ZWQgb3IgZXJyb3JzLlxuXG4gICAgICByZXNvbHZlci5zZXRDYWxsYmFjayh0aGlzLl9oYW5kbGVGcmFnbWVudERhdGFVcGRhdGUpOyAvLyBFeHRlcm5hbCB2YWx1ZXMgY291bGQgY2hhbmdlIGJldHdlZW4gcmVuZGVyIGFuZCBjb21taXQuXG4gICAgICAvLyBDaGVjayBmb3IgdGhpcyBjYXNlLCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBhbiBleHRyYSBzdG9yZSByZWFkLlxuXG4gICAgICB2YXIgbWF5YmVOZXdEYXRhID0gcmVzb2x2ZXIucmVzb2x2ZSgpO1xuXG4gICAgICBpZiAoZGF0YSAhPT0gbWF5YmVOZXdEYXRhKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGRhdGE6IG1heWJlTmV3RGF0YVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVuZGVyIG5ldyBkYXRhIGZvciB0aGUgZXhpc3RpbmcgcHJvcHMvY29udGV4dC5cbiAgICAgKi9cbiAgICA7XG5cbiAgICBfcHJvdG8uX2dldEZyYWdtZW50VmFyaWFibGVzID0gZnVuY3Rpb24gX2dldEZyYWdtZW50VmFyaWFibGVzKCkge1xuICAgICAgcmV0dXJuIGdldFZhcmlhYmxlc0Zyb21PYmplY3QoZnJhZ21lbnRzLCB0aGlzLnByb3BzKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRRdWVyeUZldGNoZXIgPSBmdW5jdGlvbiBfZ2V0UXVlcnlGZXRjaGVyKCkge1xuICAgICAgaWYgKCF0aGlzLl9xdWVyeUZldGNoZXIpIHtcbiAgICAgICAgdGhpcy5fcXVlcnlGZXRjaGVyID0gbmV3IFJlYWN0UmVsYXlRdWVyeUZldGNoZXIoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3F1ZXJ5RmV0Y2hlcjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY29tcG9uZW50UmVmID0gX3RoaXMkcHJvcHMuY29tcG9uZW50UmVmLFxuICAgICAgICAgIF9fcmVsYXlDb250ZXh0ID0gX3RoaXMkcHJvcHMuX19yZWxheUNvbnRleHQsXG4gICAgICAgICAgX19yb290SXNRdWVyeVJlbmRlcmVyID0gX3RoaXMkcHJvcHMuX19yb290SXNRdWVyeVJlbmRlcmVyLFxuICAgICAgICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMltcImRlZmF1bHRcIl0pKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRSZWZcIiwgXCJfX3JlbGF5Q29udGV4dFwiLCBcIl9fcm9vdElzUXVlcnlSZW5kZXJlclwiXSk7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUyID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICByZWxheVByb3AgPSBfdGhpcyRzdGF0ZTIucmVsYXlQcm9wLFxuICAgICAgICAgIGNvbnRleHRGb3JDaGlsZHJlbiA9IF90aGlzJHN0YXRlMi5jb250ZXh0Rm9yQ2hpbGRyZW47XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3RSZWxheUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IGNvbnRleHRGb3JDaGlsZHJlblxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIHByb3BzLCB0aGlzLnN0YXRlLmRhdGEsIHtcbiAgICAgICAgcmVmOiBjb21wb25lbnRSZWYsXG4gICAgICAgIHJlbGF5OiByZWxheVByb3BcbiAgICAgIH0pKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBfY2xhc3M7XG4gIH0oUmVhY3QuQ29tcG9uZW50KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfY2xhc3MsIFwiZGlzcGxheU5hbWVcIiwgY29udGFpbmVyTmFtZSksIF90ZW1wO1xufVxuXG5mdW5jdGlvbiBnZXRSZWxheVByb3AoZW52aXJvbm1lbnQsIHJlZmV0Y2gpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnQsXG4gICAgcmVmZXRjaDogcmVmZXRjaFxuICB9O1xufVxuLyoqXG4gKiBXcmFwIHRoZSBiYXNpYyBgY3JlYXRlQ29udGFpbmVyKClgIGZ1bmN0aW9uIHdpdGggbG9naWMgdG8gYWRhcHQgdG8gdGhlXG4gKiBgY29udGV4dC5yZWxheS5lbnZpcm9ubWVudGAgaW4gd2hpY2ggaXQgaXMgcmVuZGVyZWQuIFNwZWNpZmljYWxseSwgdGhlXG4gKiBleHRyYWN0aW9uIG9mIHRoZSBlbnZpcm9ubWVudC1zcGVjaWZpYyB2ZXJzaW9uIG9mIGZyYWdtZW50cyBpbiB0aGVcbiAqIGBmcmFnbWVudFNwZWNgIGlzIG1lbW9pemVkIG9uY2UgcGVyIGVudmlyb25tZW50LCByYXRoZXIgdGhhbiBvbmNlIHBlclxuICogaW5zdGFuY2Ugb2YgdGhlIGNvbnRhaW5lciBjb25zdHJ1Y3RlZC9yZW5kZXJlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lcihDb21wb25lbnQsIGZyYWdtZW50U3BlYywgdGFnZ2VkTm9kZSkge1xuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gIHJldHVybiBidWlsZFJlYWN0UmVsYXlDb250YWluZXIoQ29tcG9uZW50LCBmcmFnbWVudFNwZWMsIGZ1bmN0aW9uIChDb21wb25lbnRDbGFzcywgZnJhZ21lbnRzKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbnRhaW5lcldpdGhGcmFnbWVudHMoQ29tcG9uZW50Q2xhc3MsIGZyYWdtZW50cywgdGFnZ2VkTm9kZSk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlQ29udGFpbmVyOiBjcmVhdGVDb250YWluZXJcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIGlzUmVsYXlFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vaXNSZWxheUVudmlyb25tZW50Jyk7XG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IHRoZSBpbnB1dCBpcyBhIG1hdGNoZXMgdGhlIGBSZWxheUNvbnRleHRgIHR5cGUgZGVmaW5lZCBpblxuICogYFJlbGF5RW52aXJvbm1lbnRUeXBlc2AgYW5kIHJldHVybnMgaXQgYXMgdGhhdCB0eXBlLlxuICovXG5mdW5jdGlvbiBhc3NlcnRSZWxheUNvbnRleHQocmVsYXkpIHtcbiAgIWlzUmVsYXlDb250ZXh0KHJlbGF5KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5Q29udGV4dDogRXhwZWN0ZWQgYGNvbnRleHQucmVsYXlgIHRvIGJlIGFuIG9iamVjdCBjb25mb3JtaW5nIHRvICcgKyAndGhlIGBSZWxheUNvbnRleHRgIGludGVyZmFjZSwgZ290IGAlc2AuJywgcmVsYXkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJlbGF5O1xufVxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgdGhlIGlucHV0IGlzIGEgcGxhaW4gb2JqZWN0IHRoYXQgbWF0Y2hlcyB0aGUgYFJlbGF5Q29udGV4dGBcbiAqIHR5cGUgZGVmaW5lZCBpbiBgUmVsYXlFbnZpcm9ubWVudFR5cGVzYC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzUmVsYXlDb250ZXh0KGNvbnRleHQpIHtcbiAgcmV0dXJuIHR5cGVvZiBjb250ZXh0ID09PSAnb2JqZWN0JyAmJiBjb250ZXh0ICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KGNvbnRleHQpICYmIGlzUmVsYXlFbnZpcm9ubWVudChjb250ZXh0LmVudmlyb25tZW50KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2VydFJlbGF5Q29udGV4dDogYXNzZXJ0UmVsYXlDb250ZXh0LFxuICBpc1JlbGF5Q29udGV4dDogaXNSZWxheUNvbnRleHRcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBGYWlsIGZhc3QgaWYgdGhlIHVzZXIgc3VwcGxpZXMgaW52YWxpZCBmcmFnbWVudHMgYXMgaW5wdXQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydEZyYWdtZW50TWFwKGNvbXBvbmVudE5hbWUsIGZyYWdtZW50U3BlYykge1xuICAhKGZyYWdtZW50U3BlYyAmJiB0eXBlb2YgZnJhZ21lbnRTcGVjID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDb3VsZCBub3QgY3JlYXRlIFJlbGF5IENvbnRhaW5lciBmb3IgYCVzYC4gJyArICdFeHBlY3RlZCBhIHNldCBvZiBHcmFwaFFMIGZyYWdtZW50cywgZ290IGAlc2AgaW5zdGVhZC4nLCBjb21wb25lbnROYW1lLCBmcmFnbWVudFNwZWMpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICBmb3IgKHZhciBrZXkgaW4gZnJhZ21lbnRTcGVjKSB7XG4gICAgaWYgKGZyYWdtZW50U3BlYy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICB2YXIgZnJhZ21lbnQgPSBmcmFnbWVudFNwZWNba2V5XTtcbiAgICAgICEoZnJhZ21lbnQgJiYgKHR5cGVvZiBmcmFnbWVudCA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGZyYWdtZW50ID09PSAnZnVuY3Rpb24nKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDb3VsZCBub3QgY3JlYXRlIFJlbGF5IENvbnRhaW5lciBmb3IgYCVzYC4gJyArICdUaGUgdmFsdWUgb2YgZnJhZ21lbnQgYCVzYCB3YXMgZXhwZWN0ZWQgdG8gYmUgYSBmcmFnbWVudCwgZ290IGAlc2AgaW5zdGVhZC4nLCBjb21wb25lbnROYW1lLCBrZXksIGZyYWdtZW50KSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzZXJ0RnJhZ21lbnRNYXA7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIFJlYWN0UmVsYXlDb250ZXh0ID0gcmVxdWlyZSgnLi9SZWFjdFJlbGF5Q29udGV4dCcpO1xuXG52YXIgUmVhY3RSZWxheVF1ZXJ5UmVuZGVyZXJDb250ZXh0ID0gcmVxdWlyZSgnLi9SZWFjdFJlbGF5UXVlcnlSZW5kZXJlckNvbnRleHQnKTtcblxudmFyIGFzc2VydEZyYWdtZW50TWFwID0gcmVxdWlyZSgnLi9hc3NlcnRGcmFnbWVudE1hcCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciByZWFkQ29udGV4dCA9IHJlcXVpcmUoJy4vcmVhZENvbnRleHQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9SZWFjdFJlbGF5Q29udGFpbmVyVXRpbHMnKSxcbiAgICBnZXRDb21wb25lbnROYW1lID0gX3JlcXVpcmUuZ2V0Q29tcG9uZW50TmFtZSxcbiAgICBnZXRDb250YWluZXJOYW1lID0gX3JlcXVpcmUuZ2V0Q29udGFpbmVyTmFtZTtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBnZXRGcmFnbWVudCA9IF9yZXF1aXJlMi5nZXRGcmFnbWVudDtcblxuLyoqXG4gKiBIZWxwZXIgdG8gY3JlYXRlIHRoZSBSZWxheSBIT0NzIHdpdGggcmVmIGZvcndhcmRpbmcsIHNldHRpbmcgdGhlIGRpc3BsYXlOYW1lXG4gKiBhbmQgcmVhZGluZyB0aGUgUmVhY3QgY29udGV4dC5cbiAqL1xuZnVuY3Rpb24gYnVpbGRSZWFjdFJlbGF5Q29udGFpbmVyKENvbXBvbmVudENsYXNzLCBmcmFnbWVudFNwZWMsIGNyZWF0ZUNvbnRhaW5lcldpdGhGcmFnbWVudHMpIHtcbiAgLy8gU2FuaXR5LWNoZWNrIHVzZXItZGVmaW5lZCBmcmFnbWVudCBpbnB1dFxuICB2YXIgY29udGFpbmVyTmFtZSA9IGdldENvbnRhaW5lck5hbWUoQ29tcG9uZW50Q2xhc3MpO1xuICBhc3NlcnRGcmFnbWVudE1hcChnZXRDb21wb25lbnROYW1lKENvbXBvbmVudENsYXNzKSwgZnJhZ21lbnRTcGVjKTtcbiAgdmFyIGZyYWdtZW50cyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBmcmFnbWVudFNwZWMpIHtcbiAgICBmcmFnbWVudHNba2V5XSA9IGdldEZyYWdtZW50KGZyYWdtZW50U3BlY1trZXldKTtcbiAgfVxuXG4gIHZhciBDb250YWluZXIgPSBjcmVhdGVDb250YWluZXJXaXRoRnJhZ21lbnRzKENvbXBvbmVudENsYXNzLCBmcmFnbWVudHMpO1xuICBDb250YWluZXIuZGlzcGxheU5hbWUgPSBjb250YWluZXJOYW1lO1xuXG4gIGZ1bmN0aW9uIGZvcndhcmRSZWYocHJvcHMsIHJlZikge1xuICAgIHZhciBfcXVlcnlSZW5kZXJlckNvbnRleHQ7XG5cbiAgICB2YXIgY29udGV4dCA9IHJlYWRDb250ZXh0KFJlYWN0UmVsYXlDb250ZXh0KTtcbiAgICAhKGNvbnRleHQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdgJXNgIHRyaWVkIHRvIHJlbmRlciBhIGNvbnRleHQgdGhhdCB3YXMgbm90IHZhbGlkIHRoaXMgbWVhbnMgdGhhdCAnICsgJ2Alc2Agd2FzIHJlbmRlcmVkIG91dHNpZGUgb2YgYSBxdWVyeSByZW5kZXJlci4nLCBjb250YWluZXJOYW1lLCBjb250YWluZXJOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIHF1ZXJ5UmVuZGVyZXJDb250ZXh0ID0gcmVhZENvbnRleHQoUmVhY3RSZWxheVF1ZXJ5UmVuZGVyZXJDb250ZXh0KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGFpbmVyLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIHByb3BzLCB7XG4gICAgICBfX3JlbGF5Q29udGV4dDogY29udGV4dCxcbiAgICAgIF9fcm9vdElzUXVlcnlSZW5kZXJlcjogKF9xdWVyeVJlbmRlcmVyQ29udGV4dCA9IHF1ZXJ5UmVuZGVyZXJDb250ZXh0ID09PSBudWxsIHx8IHF1ZXJ5UmVuZGVyZXJDb250ZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBxdWVyeVJlbmRlcmVyQ29udGV4dC5yb290SXNRdWVyeVJlbmRlcmVyKSAhPT0gbnVsbCAmJiBfcXVlcnlSZW5kZXJlckNvbnRleHQgIT09IHZvaWQgMCA/IF9xdWVyeVJlbmRlcmVyQ29udGV4dCA6IGZhbHNlLFxuICAgICAgY29tcG9uZW50UmVmOiBwcm9wcy5jb21wb25lbnRSZWYgfHwgcmVmXG4gICAgfSkpO1xuICB9XG5cbiAgZm9yd2FyZFJlZi5kaXNwbGF5TmFtZSA9IGNvbnRhaW5lck5hbWU7XG4gIHZhciBGb3J3YXJkQ29udGFpbmVyID0gUmVhY3QuZm9yd2FyZFJlZihmb3J3YXJkUmVmKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gVXNlZCBieSBSZWxheU1vZGVyblRlc3RVdGlsc1xuICAgIEZvcndhcmRDb250YWluZXIuX19Db21wb25lbnRDbGFzcyA9IENvbXBvbmVudENsYXNzO1xuICAgIEZvcndhcmRDb250YWluZXIuZGlzcGxheU5hbWUgPSBjb250YWluZXJOYW1lO1xuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl1cblxuXG4gIHJldHVybiBGb3J3YXJkQ29udGFpbmVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ1aWxkUmVhY3RSZWxheUNvbnRhaW5lcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBnZXRTZWxlY3RvciA9IF9yZXF1aXJlLmdldFNlbGVjdG9yO1xuXG5mdW5jdGlvbiBnZXRSb290VmFyaWFibGVzRm9yRnJhZ21lbnRzKGZyYWdtZW50cywgcHJvcHMpIHtcbiAgdmFyIHJvb3RWYXJpYWJsZXMgPSB7fTsgLy8gTk9URTogRm9yIGV4dHJhIHNhZmV0eSwgd2UgbWFrZSBzdXJlIHRoZSByb290VmFyaWFibGVzIGluY2x1ZGUgdGhlXG4gIC8vIHZhcmlhYmxlcyBmcm9tIGFsbCBvd25lcnMgaW4gdGhpcyBmcmFnbWVudFNwZWMsIGV2ZW4gdGhvdWdoIHRoZXlcbiAgLy8gc2hvdWxkIGFsbCBwb2ludCB0byB0aGUgc2FtZSBvd25lclxuXG4gIE9iamVjdC5rZXlzKGZyYWdtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIF9zZWxlY3RvciRzZWxlY3RvcnMkLCBfc2VsZWN0b3Ikc2VsZWN0b3JzJDIsIF9zZWxlY3RvciRvd25lciR2YXJpYTtcblxuICAgIHZhciBmcmFnbWVudE5vZGUgPSBmcmFnbWVudHNba2V5XTtcbiAgICB2YXIgZnJhZ21lbnRSZWYgPSBwcm9wc1trZXldO1xuICAgIHZhciBzZWxlY3RvciA9IGdldFNlbGVjdG9yKGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWYpO1xuICAgIHZhciBmcmFnbWVudE93bmVyVmFyaWFibGVzID0gc2VsZWN0b3IgIT0gbnVsbCAmJiBzZWxlY3Rvci5raW5kID09PSAnUGx1cmFsUmVhZGVyU2VsZWN0b3InID8gKF9zZWxlY3RvciRzZWxlY3RvcnMkID0gKF9zZWxlY3RvciRzZWxlY3RvcnMkMiA9IHNlbGVjdG9yLnNlbGVjdG9yc1swXSkgPT09IG51bGwgfHwgX3NlbGVjdG9yJHNlbGVjdG9ycyQyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc2VsZWN0b3Ikc2VsZWN0b3JzJDIub3duZXIudmFyaWFibGVzKSAhPT0gbnVsbCAmJiBfc2VsZWN0b3Ikc2VsZWN0b3JzJCAhPT0gdm9pZCAwID8gX3NlbGVjdG9yJHNlbGVjdG9ycyQgOiB7fSA6IChfc2VsZWN0b3Ikb3duZXIkdmFyaWEgPSBzZWxlY3RvciA9PT0gbnVsbCB8fCBzZWxlY3RvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VsZWN0b3Iub3duZXIudmFyaWFibGVzKSAhPT0gbnVsbCAmJiBfc2VsZWN0b3Ikb3duZXIkdmFyaWEgIT09IHZvaWQgMCA/IF9zZWxlY3RvciRvd25lciR2YXJpYSA6IHt9OyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC1zcHJlYWQtaW50ZXJmYWNlXVxuXG4gICAgcm9vdFZhcmlhYmxlcyA9ICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCByb290VmFyaWFibGVzKSwgZnJhZ21lbnRPd25lclZhcmlhYmxlcyk7XG4gIH0pO1xuICByZXR1cm4gcm9vdFZhcmlhYmxlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSb290VmFyaWFibGVzRm9yRnJhZ21lbnRzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRW50cnlQb2ludENvbnRhaW5lciA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvRW50cnlQb2ludENvbnRhaW5lci5yZWFjdCcpO1xuXG52YXIgUmVsYXlFbnZpcm9ubWVudFByb3ZpZGVyID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy9SZWxheUVudmlyb25tZW50UHJvdmlkZXInKTtcblxudmFyIFJlbGF5UnVudGltZSA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKTtcblxudmFyIGxvYWRFbnRyeVBvaW50ID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy9sb2FkRW50cnlQb2ludCcpO1xuXG52YXIgdXNlRW50cnlQb2ludExvYWRlciA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlRW50cnlQb2ludExvYWRlcicpO1xuXG52YXIgdXNlRnJhZ21lbnQgPSByZXF1aXJlKCcuL3JlbGF5LWhvb2tzL3VzZUZyYWdtZW50Jyk7XG5cbnZhciB1c2VMYXp5TG9hZFF1ZXJ5ID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy91c2VMYXp5TG9hZFF1ZXJ5Jyk7XG5cbnZhciB1c2VNdXRhdGlvbiA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlTXV0YXRpb24nKTtcblxudmFyIHVzZVBhZ2luYXRpb25GcmFnbWVudCA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlUGFnaW5hdGlvbkZyYWdtZW50Jyk7XG5cbnZhciB1c2VQcmVsb2FkZWRRdWVyeSA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlUHJlbG9hZGVkUXVlcnknKTtcblxudmFyIHVzZVF1ZXJ5TG9hZGVyID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy91c2VRdWVyeUxvYWRlcicpO1xuXG52YXIgdXNlUmVmZXRjaGFibGVGcmFnbWVudCA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlUmVmZXRjaGFibGVGcmFnbWVudCcpO1xuXG52YXIgdXNlUmVsYXlFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlUmVsYXlFbnZpcm9ubWVudCcpO1xuXG52YXIgdXNlU3Vic2NyaWJlVG9JbnZhbGlkYXRpb25TdGF0ZSA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlU3Vic2NyaWJlVG9JbnZhbGlkYXRpb25TdGF0ZScpO1xuXG52YXIgdXNlU3Vic2NyaXB0aW9uID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy91c2VTdWJzY3JpcHRpb24nKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy9sb2FkUXVlcnknKSxcbiAgICBsb2FkUXVlcnkgPSBfcmVxdWlyZS5sb2FkUXVlcnk7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBpbnRlcmZhY2UgZm9yIFJlbGF5IEhvb2tzLlxuICogVGhpcyB3aWxsIGV2ZW50dWFsbHkgYmVjb21lIHRoZSBtYWluIHB1YmxpYyBpbnRlcmZhY2UgZm9yIHJlYWN0LXJlbGF5LlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ29ubmVjdGlvbkhhbmRsZXI6IFJlbGF5UnVudGltZS5Db25uZWN0aW9uSGFuZGxlcixcbiAgYXBwbHlPcHRpbWlzdGljTXV0YXRpb246IFJlbGF5UnVudGltZS5hcHBseU9wdGltaXN0aWNNdXRhdGlvbixcbiAgY29tbWl0TG9jYWxVcGRhdGU6IFJlbGF5UnVudGltZS5jb21taXRMb2NhbFVwZGF0ZSxcbiAgY29tbWl0TXV0YXRpb246IFJlbGF5UnVudGltZS5jb21taXRNdXRhdGlvbixcbiAgZ3JhcGhxbDogUmVsYXlSdW50aW1lLmdyYXBocWwsXG4gIHJlYWRJbmxpbmVEYXRhOiBSZWxheVJ1bnRpbWUucmVhZElubGluZURhdGEsXG4gIHJlcXVlc3RTdWJzY3JpcHRpb246IFJlbGF5UnVudGltZS5yZXF1ZXN0U3Vic2NyaXB0aW9uLFxuICBFbnRyeVBvaW50Q29udGFpbmVyOiBFbnRyeVBvaW50Q29udGFpbmVyLFxuICBSZWxheUVudmlyb25tZW50UHJvdmlkZXI6IFJlbGF5RW52aXJvbm1lbnRQcm92aWRlcixcbiAgZmV0Y2hRdWVyeTogUmVsYXlSdW50aW1lLmZldGNoUXVlcnksXG4gIGxvYWRRdWVyeTogbG9hZFF1ZXJ5LFxuICBsb2FkRW50cnlQb2ludDogbG9hZEVudHJ5UG9pbnQsXG4gIHVzZUZyYWdtZW50OiB1c2VGcmFnbWVudCxcbiAgdXNlTGF6eUxvYWRRdWVyeTogdXNlTGF6eUxvYWRRdWVyeSxcbiAgdXNlRW50cnlQb2ludExvYWRlcjogdXNlRW50cnlQb2ludExvYWRlcixcbiAgdXNlUXVlcnlMb2FkZXI6IHVzZVF1ZXJ5TG9hZGVyLFxuICB1c2VNdXRhdGlvbjogdXNlTXV0YXRpb24sXG4gIHVzZVBhZ2luYXRpb25GcmFnbWVudDogdXNlUGFnaW5hdGlvbkZyYWdtZW50LFxuICB1c2VQcmVsb2FkZWRRdWVyeTogdXNlUHJlbG9hZGVkUXVlcnksXG4gIHVzZVJlZmV0Y2hhYmxlRnJhZ21lbnQ6IHVzZVJlZmV0Y2hhYmxlRnJhZ21lbnQsXG4gIHVzZVJlbGF5RW52aXJvbm1lbnQ6IHVzZVJlbGF5RW52aXJvbm1lbnQsXG4gIHVzZVN1YnNjcmliZVRvSW52YWxpZGF0aW9uU3RhdGU6IHVzZVN1YnNjcmliZVRvSW52YWxpZGF0aW9uU3RhdGUsXG4gIHVzZVN1YnNjcmlwdGlvbjogdXNlU3Vic2NyaXB0aW9uXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRW50cnlQb2ludENvbnRhaW5lciA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvRW50cnlQb2ludENvbnRhaW5lci5yZWFjdCcpO1xuXG52YXIgUmVhY3RSZWxheUNvbnRleHQgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlDb250ZXh0Jyk7XG5cbnZhciBSZWFjdFJlbGF5RnJhZ21lbnRDb250YWluZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlGcmFnbWVudENvbnRhaW5lcicpO1xuXG52YXIgUmVhY3RSZWxheUxvY2FsUXVlcnlSZW5kZXJlciA9IHJlcXVpcmUoJy4vUmVhY3RSZWxheUxvY2FsUXVlcnlSZW5kZXJlcicpO1xuXG52YXIgUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVsYXlQYWdpbmF0aW9uQ29udGFpbmVyJyk7XG5cbnZhciBSZWFjdFJlbGF5UXVlcnlSZW5kZXJlciA9IHJlcXVpcmUoJy4vUmVhY3RSZWxheVF1ZXJ5UmVuZGVyZXInKTtcblxudmFyIFJlYWN0UmVsYXlSZWZldGNoQ29udGFpbmVyID0gcmVxdWlyZSgnLi9SZWFjdFJlbGF5UmVmZXRjaENvbnRhaW5lcicpO1xuXG52YXIgUmVsYXlFbnZpcm9ubWVudFByb3ZpZGVyID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy9SZWxheUVudmlyb25tZW50UHJvdmlkZXInKTtcblxudmFyIFJlbGF5UnVudGltZSA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKTtcblxudmFyIGxvYWRFbnRyeVBvaW50ID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy9sb2FkRW50cnlQb2ludCcpO1xuXG52YXIgdXNlRW50cnlQb2ludExvYWRlciA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlRW50cnlQb2ludExvYWRlcicpO1xuXG52YXIgdXNlRnJhZ21lbnQgPSByZXF1aXJlKCcuL3JlbGF5LWhvb2tzL3VzZUZyYWdtZW50Jyk7XG5cbnZhciB1c2VMYXp5TG9hZFF1ZXJ5ID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy91c2VMYXp5TG9hZFF1ZXJ5Jyk7XG5cbnZhciB1c2VNdXRhdGlvbiA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlTXV0YXRpb24nKTtcblxudmFyIHVzZVBhZ2luYXRpb25GcmFnbWVudCA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlUGFnaW5hdGlvbkZyYWdtZW50Jyk7XG5cbnZhciB1c2VQcmVsb2FkZWRRdWVyeSA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlUHJlbG9hZGVkUXVlcnknKTtcblxudmFyIHVzZVF1ZXJ5TG9hZGVyID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy91c2VRdWVyeUxvYWRlcicpO1xuXG52YXIgdXNlUmVmZXRjaGFibGVGcmFnbWVudCA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlUmVmZXRjaGFibGVGcmFnbWVudCcpO1xuXG52YXIgdXNlUmVsYXlFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlUmVsYXlFbnZpcm9ubWVudCcpO1xuXG52YXIgdXNlU3Vic2NyaWJlVG9JbnZhbGlkYXRpb25TdGF0ZSA9IHJlcXVpcmUoJy4vcmVsYXktaG9va3MvdXNlU3Vic2NyaWJlVG9JbnZhbGlkYXRpb25TdGF0ZScpO1xuXG52YXIgdXNlU3Vic2NyaXB0aW9uID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy91c2VTdWJzY3JpcHRpb24nKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9yZWxheS1ob29rcy9sb2FkUXVlcnknKSxcbiAgICBsb2FkUXVlcnkgPSBfcmVxdWlyZS5sb2FkUXVlcnk7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBpbnRlcmZhY2UgdG8gcmVhY3QtcmVsYXkuXG4gKiBDdXJyZW50bHkgY29udGFpbnMgYm90aCBSZWxheSBIb29rcyBhbmQgbGVnYWN5IENvbnRhaW5lciBBUElzLlxuICogV2lsbCBldmVudHVhbGx5IG9ubHkgZXhwb3J0IHRoZSBpbnRlcmZhY2UgZnJvbSAuL2hvb2tzLmpzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ29ubmVjdGlvbkhhbmRsZXI6IFJlbGF5UnVudGltZS5Db25uZWN0aW9uSGFuZGxlcixcbiAgUXVlcnlSZW5kZXJlcjogUmVhY3RSZWxheVF1ZXJ5UmVuZGVyZXIsXG4gIExvY2FsUXVlcnlSZW5kZXJlcjogUmVhY3RSZWxheUxvY2FsUXVlcnlSZW5kZXJlcixcbiAgTXV0YXRpb25UeXBlczogUmVsYXlSdW50aW1lLk11dGF0aW9uVHlwZXMsXG4gIFJhbmdlT3BlcmF0aW9uczogUmVsYXlSdW50aW1lLlJhbmdlT3BlcmF0aW9ucyxcbiAgUmVhY3RSZWxheUNvbnRleHQ6IFJlYWN0UmVsYXlDb250ZXh0LFxuICBhcHBseU9wdGltaXN0aWNNdXRhdGlvbjogUmVsYXlSdW50aW1lLmFwcGx5T3B0aW1pc3RpY011dGF0aW9uLFxuICBjb21taXRMb2NhbFVwZGF0ZTogUmVsYXlSdW50aW1lLmNvbW1pdExvY2FsVXBkYXRlLFxuICBjb21taXRNdXRhdGlvbjogUmVsYXlSdW50aW1lLmNvbW1pdE11dGF0aW9uLFxuICBjcmVhdGVGcmFnbWVudENvbnRhaW5lcjogUmVhY3RSZWxheUZyYWdtZW50Q29udGFpbmVyLmNyZWF0ZUNvbnRhaW5lcixcbiAgY3JlYXRlUGFnaW5hdGlvbkNvbnRhaW5lcjogUmVhY3RSZWxheVBhZ2luYXRpb25Db250YWluZXIuY3JlYXRlQ29udGFpbmVyLFxuICBjcmVhdGVSZWZldGNoQ29udGFpbmVyOiBSZWFjdFJlbGF5UmVmZXRjaENvbnRhaW5lci5jcmVhdGVDb250YWluZXIsXG4gIGZldGNoUXVlcnlfREVQUkVDQVRFRDogUmVsYXlSdW50aW1lLmZldGNoUXVlcnlfREVQUkVDQVRFRCxcbiAgZ3JhcGhxbDogUmVsYXlSdW50aW1lLmdyYXBocWwsXG4gIHJlYWRJbmxpbmVEYXRhOiBSZWxheVJ1bnRpbWUucmVhZElubGluZURhdGEsXG4gIHJlcXVlc3RTdWJzY3JpcHRpb246IFJlbGF5UnVudGltZS5yZXF1ZXN0U3Vic2NyaXB0aW9uLFxuICAvLyBSZWxheSBIb29rc1xuICBFbnRyeVBvaW50Q29udGFpbmVyOiBFbnRyeVBvaW50Q29udGFpbmVyLFxuICBSZWxheUVudmlyb25tZW50UHJvdmlkZXI6IFJlbGF5RW52aXJvbm1lbnRQcm92aWRlcixcbiAgZmV0Y2hRdWVyeTogUmVsYXlSdW50aW1lLmZldGNoUXVlcnksXG4gIGxvYWRRdWVyeTogbG9hZFF1ZXJ5LFxuICBsb2FkRW50cnlQb2ludDogbG9hZEVudHJ5UG9pbnQsXG4gIHVzZUZyYWdtZW50OiB1c2VGcmFnbWVudCxcbiAgdXNlTGF6eUxvYWRRdWVyeTogdXNlTGF6eUxvYWRRdWVyeSxcbiAgdXNlRW50cnlQb2ludExvYWRlcjogdXNlRW50cnlQb2ludExvYWRlcixcbiAgdXNlUXVlcnlMb2FkZXI6IHVzZVF1ZXJ5TG9hZGVyLFxuICB1c2VNdXRhdGlvbjogdXNlTXV0YXRpb24sXG4gIHVzZVBhZ2luYXRpb25GcmFnbWVudDogdXNlUGFnaW5hdGlvbkZyYWdtZW50LFxuICB1c2VQcmVsb2FkZWRRdWVyeTogdXNlUHJlbG9hZGVkUXVlcnksXG4gIHVzZVJlZmV0Y2hhYmxlRnJhZ21lbnQ6IHVzZVJlZmV0Y2hhYmxlRnJhZ21lbnQsXG4gIHVzZVJlbGF5RW52aXJvbm1lbnQ6IHVzZVJlbGF5RW52aXJvbm1lbnQsXG4gIHVzZVN1YnNjcmliZVRvSW52YWxpZGF0aW9uU3RhdGU6IHVzZVN1YnNjcmliZVRvSW52YWxpZGF0aW9uU3RhdGUsXG4gIHVzZVN1YnNjcmlwdGlvbjogdXNlU3Vic2NyaXB0aW9uXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSBnaXZlbiB2YWx1ZSBpcyBhbiBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIHRoZSBgRW52aXJvbm1lbnRgXG4gKiBpbnRlcmZhY2UgZGVmaW5lZCBpbiBgUmVsYXlFbnZpcm9ubWVudFR5cGVzYC5cbiAqL1xuXG5mdW5jdGlvbiBpc1JlbGF5RW52aXJvbm1lbnQoZW52aXJvbm1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBlbnZpcm9ubWVudCA9PT0gJ29iamVjdCcgJiYgZW52aXJvbm1lbnQgIT09IG51bGwgJiYgLy8gVE9ETzogYWRkIGFwcGx5TXV0YXRpb24vc2VuZE11dGF0aW9uIG9uY2UgcmVhZHkgaW4gYm90aCBjb3Jlc1xuICB0eXBlb2YgZW52aXJvbm1lbnQuY2hlY2sgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVudmlyb25tZW50Lmxvb2t1cCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW52aXJvbm1lbnQucmV0YWluID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbnZpcm9ubWVudC5leGVjdXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbnZpcm9ubWVudC5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbic7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNSZWxheUVudmlyb25tZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX1JlYWN0JF9fU0VDUkVUX0lOVEVSID1cbi8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBGbG93IGRvZXNuJ3Qga25vdyBhYm91dCBSZWFjdCdzIGludGVybmFscyBmb3JcbiAqIGdvb2QgcmVhc29uLCBidXQgZm9yIG5vdywgUmVsYXkgbmVlZHMgdGhlIGRpc3BhdGNoZXIgdG8gcmVhZCBjb250ZXh0LiAqL1xuUmVhY3QuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsXG4gICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciA9IF9SZWFjdCRfX1NFQ1JFVF9JTlRFUi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFxuICAgIFJlYWN0Q3VycmVudE93bmVyID0gX1JlYWN0JF9fU0VDUkVUX0lOVEVSLlJlYWN0Q3VycmVudE93bmVyO1xuXG5mdW5jdGlvbiByZWFkQ29udGV4dChDb250ZXh0KSB7XG4gIHZhciBkaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciAhPSBudWxsID8gUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50IDogUmVhY3RDdXJyZW50T3duZXIuY3VycmVudERpc3BhdGNoZXI7XG4gIHJldHVybiBkaXNwYXRjaGVyLnJlYWRDb250ZXh0KENvbnRleHQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYWRDb250ZXh0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFByb2ZpbGVyQ29udGV4dCA9IHJlcXVpcmUoJy4vUHJvZmlsZXJDb250ZXh0Jyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciB1c2VSZWxheUVudmlyb25tZW50ID0gcmVxdWlyZSgnLi91c2VSZWxheUVudmlyb25tZW50Jyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdXNlQ29udGV4dCA9IF9yZXF1aXJlLnVzZUNvbnRleHQsXG4gICAgdXNlRWZmZWN0ID0gX3JlcXVpcmUudXNlRWZmZWN0O1xuXG5mdW5jdGlvbiBFbnRyeVBvaW50Q29udGFpbmVyKF9yZWYpIHtcbiAgdmFyIGVudHJ5UG9pbnRSZWZlcmVuY2UgPSBfcmVmLmVudHJ5UG9pbnRSZWZlcmVuY2UsXG4gICAgICBwcm9wcyA9IF9yZWYucHJvcHM7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZW50cnlQb2ludFJlZmVyZW5jZS5pc0Rpc3Bvc2VkID09PSBmYWxzZSwgJzxFbnRyeVBvaW50Q29udGFpbmVyPjogRXhwZWN0ZWQgZW50cnlQb2ludFJlZmVyZW5jZSB0byBub3QgYmUgZGlzcG9zZWQgJyArICd5ZXQuIFRoaXMgaXMgYmVjYXVzZSBkaXNwb3NpbmcgdGhlIGVudHJ5cG9pbnQgbWFya3MgaXQgZm9yIGZ1dHVyZSBnYXJiYWdlICcgKyAnY29sbGVjdGlvbiwgYW5kIGFzIHN1Y2ggbWF5IG5vIGxvbmdlciBiZSBwcmVzZW50IGluIHRoZSBSZWxheSBzdG9yZS4gJyArICdJbiB0aGUgZnV0dXJlLCB0aGlzIHdpbGwgYmVjb21lIGEgaGFyZCBlcnJvci4nKSA6IHZvaWQgMDtcbiAgdmFyIGdldENvbXBvbmVudCA9IGVudHJ5UG9pbnRSZWZlcmVuY2UuZ2V0Q29tcG9uZW50LFxuICAgICAgcXVlcmllcyA9IGVudHJ5UG9pbnRSZWZlcmVuY2UucXVlcmllcyxcbiAgICAgIGVudHJ5UG9pbnRzID0gZW50cnlQb2ludFJlZmVyZW5jZS5lbnRyeVBvaW50cyxcbiAgICAgIGV4dHJhUHJvcHMgPSBlbnRyeVBvaW50UmVmZXJlbmNlLmV4dHJhUHJvcHMsXG4gICAgICByb290TW9kdWxlSUQgPSBlbnRyeVBvaW50UmVmZXJlbmNlLnJvb3RNb2R1bGVJRDtcbiAgdmFyIENvbXBvbmVudCA9IGdldENvbXBvbmVudCgpO1xuICB2YXIgcHJvZmlsZXJDb250ZXh0ID0gdXNlQ29udGV4dChQcm9maWxlckNvbnRleHQpO1xuICB2YXIgZW52aXJvbm1lbnQgPSB1c2VSZWxheUVudmlyb25tZW50KCk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZW52aXJvbm1lbnQuX19sb2coe1xuICAgICAgbmFtZTogJ2VudHJ5cG9pbnQucm9vdC5jb25zdW1lJyxcbiAgICAgIHByb2ZpbGVyQ29udGV4dDogcHJvZmlsZXJDb250ZXh0LFxuICAgICAgcm9vdE1vZHVsZUlEOiByb290TW9kdWxlSURcbiAgICB9KTtcbiAgfSwgW2Vudmlyb25tZW50LCBwcm9maWxlckNvbnRleHQsIHJvb3RNb2R1bGVJRF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCB7XG4gICAgZW50cnlQb2ludHM6IGVudHJ5UG9pbnRzLFxuICAgIGV4dHJhUHJvcHM6IGV4dHJhUHJvcHMsXG4gICAgcHJvcHM6IHByb3BzLFxuICAgIHF1ZXJpZXM6IHF1ZXJpZXNcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRW50cnlQb2ludENvbnRhaW5lcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIikpO1xuXG52YXIgTFJVQ2FjaGUgPSByZXF1aXJlKCcuL0xSVUNhY2hlJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIGdldFByb21pc2VGb3JBY3RpdmVSZXF1ZXN0ID0gX3JlcXVpcmUuX19pbnRlcm5hbC5nZXRQcm9taXNlRm9yQWN0aXZlUmVxdWVzdCxcbiAgICBnZXRGcmFnbWVudElkZW50aWZpZXIgPSBfcmVxdWlyZS5nZXRGcmFnbWVudElkZW50aWZpZXIsXG4gICAgZ2V0U2VsZWN0b3IgPSBfcmVxdWlyZS5nZXRTZWxlY3RvcixcbiAgICBpc1Byb21pc2UgPSBfcmVxdWlyZS5pc1Byb21pc2UsXG4gICAgcmVjeWNsZU5vZGVzSW50byA9IF9yZXF1aXJlLnJlY3ljbGVOb2Rlc0ludG8sXG4gICAgcmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzID0gX3JlcXVpcmUucmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzO1xuXG52YXIgV0VBS01BUF9TVVBQT1JURUQgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJztcbi8vIFRPRE86IEZpeCB0byBub3QgcmVseSBvbiBMUlUuIElmIHRoZSBudW1iZXIgb2YgYWN0aXZlIGZyYWdtZW50cyBleGNlZWRzIHRoaXNcbi8vIGNhcGFjaXR5LCByZWFkU3BlYygpIHdpbGwgZmFpbCB0byBmaW5kIGNhY2hlZCBlbnRyaWVzIGFuZCBicmVhayBvYmplY3Rcbi8vIGlkZW50aXR5IGV2ZW4gaWYgZGF0YSBoYXNuJ3QgY2hhbmdlZC5cbnZhciBDQUNIRV9DQVBBQ0lUWSA9IDEwMDAwMDA7IC8vIHRoaXMgaXMgZnJvemVuIHNvIHRoYXQgdXNlcnMgZG9uJ3QgYWNjaWRlbnRhbGx5IHB1c2ggZGF0YSBpbnRvIHRoZSBhcnJheVxuXG52YXIgQ09OU1RBTlRfUkVBRE9OTFlfRU1QVFlfQVJSQVkgPSBPYmplY3QuZnJlZXplKFtdKTtcblxuZnVuY3Rpb24gaXNNaXNzaW5nRGF0YShzbmFwc2hvdCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShzbmFwc2hvdCkpIHtcbiAgICByZXR1cm4gc25hcHNob3Quc29tZShmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHMuaXNNaXNzaW5nRGF0YTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzbmFwc2hvdC5pc01pc3NpbmdEYXRhO1xufVxuXG5mdW5jdGlvbiBnZXRGcmFnbWVudFJlc3VsdChjYWNoZUtleSwgc25hcHNob3QpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc25hcHNob3QpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNhY2hlS2V5OiBjYWNoZUtleSxcbiAgICAgIHNuYXBzaG90OiBzbmFwc2hvdCxcbiAgICAgIGRhdGE6IHNuYXBzaG90Lm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICByZXR1cm4gcy5kYXRhO1xuICAgICAgfSlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjYWNoZUtleTogY2FjaGVLZXksXG4gICAgc25hcHNob3Q6IHNuYXBzaG90LFxuICAgIGRhdGE6IHNuYXBzaG90LmRhdGFcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJvbWlzZUZvclBlbmRpbmdPcGVyYXRpb25BZmZlY3RpbmdPd25lcihlbnZpcm9ubWVudCwgcmVxdWVzdCkge1xuICByZXR1cm4gZW52aXJvbm1lbnQuZ2V0T3BlcmF0aW9uVHJhY2tlcigpLmdldFByb21pc2VGb3JQZW5kaW5nT3BlcmF0aW9uc0FmZmVjdGluZ093bmVyKHJlcXVlc3QpO1xufVxuXG52YXIgRnJhZ21lbnRSZXNvdXJjZUltcGwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGcmFnbWVudFJlc291cmNlSW1wbChlbnZpcm9ubWVudCkge1xuICAgIHRoaXMuX2Vudmlyb25tZW50ID0gZW52aXJvbm1lbnQ7XG4gICAgdGhpcy5fY2FjaGUgPSBMUlVDYWNoZS5jcmVhdGUoQ0FDSEVfQ0FQQUNJVFkpO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgZHVyaW5nIGEgQ29tcG9uZW50J3MgcmVuZGVyIGZ1bmN0aW9uLFxuICAgKiB0byByZWFkIHRoZSBkYXRhIGZvciBhIGZyYWdtZW50LCBvciBzdXNwZW5kIGlmIHRoZSBmcmFnbWVudCBpcyBiZWluZ1xuICAgKiBmZXRjaGVkLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBGcmFnbWVudFJlc291cmNlSW1wbC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlYWQgPSBmdW5jdGlvbiByZWFkKGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWYsIGNvbXBvbmVudERpc3BsYXlOYW1lLCBmcmFnbWVudEtleSkge1xuICAgIHJldHVybiB0aGlzLnJlYWRXaXRoSWRlbnRpZmllcihmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmLCBnZXRGcmFnbWVudElkZW50aWZpZXIoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZiksIGNvbXBvbmVudERpc3BsYXlOYW1lLCBmcmFnbWVudEtleSk7XG4gIH1cbiAgLyoqXG4gICAqIExpa2UgYHJlYWRgLCBidXQgd2l0aCBhIHByZS1jb21wdXRlZCBmcmFnbWVudElkZW50aWZpZXIgdGhhdCBzaG91bGQgYmVcbiAgICogZXF1YWwgdG8gYGdldEZyYWdtZW50SWRlbnRpZmllcihmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmKWAgZnJvbSB0aGVcbiAgICogYXJndW1lbnRzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZWFkV2l0aElkZW50aWZpZXIgPSBmdW5jdGlvbiByZWFkV2l0aElkZW50aWZpZXIoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZiwgZnJhZ21lbnRJZGVudGlmaWVyLCBjb21wb25lbnREaXNwbGF5TmFtZSwgZnJhZ21lbnRLZXkpIHtcbiAgICB2YXIgX2ZyYWdtZW50Tm9kZSRtZXRhZGF0O1xuXG4gICAgdmFyIGVudmlyb25tZW50ID0gdGhpcy5fZW52aXJvbm1lbnQ7IC8vIElmIGZyYWdtZW50UmVmIGlzIG51bGwgb3IgdW5kZWZpbmVkLCBwYXNzIGl0IGRpcmVjdGx5IHRocm91Z2guXG4gICAgLy8gVGhpcyBpcyBhIGNvbnZlbmllbmNlIHdoZW4gY29uc3VtaW5nIGZyYWdtZW50cyB2aWEgYSBIT0MgQVBJLCB3aGVuIHRoZVxuICAgIC8vIHByb3AgY29ycmVzcG9uZGluZyB0byB0aGUgZnJhZ21lbnQgcmVmIG1pZ2h0IGJlIHBhc3NlZCBhcyBudWxsLlxuXG4gICAgaWYgKGZyYWdtZW50UmVmID09IG51bGwpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNhY2hlS2V5OiBmcmFnbWVudElkZW50aWZpZXIsXG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIHNuYXBzaG90OiBudWxsXG4gICAgICB9O1xuICAgIH0gLy8gSWYgZnJhZ21lbnRSZWYgaXMgcGx1cmFsLCBlbnN1cmUgdGhhdCBpdCBpcyBhbiBhcnJheS5cbiAgICAvLyBJZiBpdCdzIGVtcHR5LCByZXR1cm4gdGhlIGVtcHR5IGFycmF5IGRpcmVjdGx5IGJlZm9yZSBkb2luZyBhbnkgbW9yZSB3b3JrLlxuXG5cbiAgICBpZiAoKGZyYWdtZW50Tm9kZSA9PT0gbnVsbCB8fCBmcmFnbWVudE5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZnJhZ21lbnROb2RlJG1ldGFkYXQgPSBmcmFnbWVudE5vZGUubWV0YWRhdGEpID09PSBudWxsIHx8IF9mcmFnbWVudE5vZGUkbWV0YWRhdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZyYWdtZW50Tm9kZSRtZXRhZGF0LnBsdXJhbCkgPT09IHRydWUpIHtcbiAgICAgICFBcnJheS5pc0FycmF5KGZyYWdtZW50UmVmKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBFeHBlY3RlZCBmcmFnbWVudCBwb2ludGVyJXMgZm9yIGZyYWdtZW50IGAlc2AgdG8gYmUgJyArICdhbiBhcnJheSwgaW5zdGVhZCBnb3QgYCVzYC4gUmVtb3ZlIGBAcmVsYXkocGx1cmFsOiB0cnVlKWAgJyArICdmcm9tIGZyYWdtZW50IGAlc2AgdG8gYWxsb3cgdGhlIHByb3AgdG8gYmUgYW4gb2JqZWN0LicsIGZyYWdtZW50S2V5ICE9IG51bGwgPyBcIiBmb3Iga2V5IGBcIi5jb25jYXQoZnJhZ21lbnRLZXksIFwiYFwiKSA6ICcnLCBmcmFnbWVudE5vZGUubmFtZSwgdHlwZW9mIGZyYWdtZW50UmVmLCBmcmFnbWVudE5vZGUubmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgICBpZiAoZnJhZ21lbnRSZWYubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2FjaGVLZXk6IGZyYWdtZW50SWRlbnRpZmllcixcbiAgICAgICAgICBkYXRhOiBDT05TVEFOVF9SRUFET05MWV9FTVBUWV9BUlJBWSxcbiAgICAgICAgICBzbmFwc2hvdDogQ09OU1RBTlRfUkVBRE9OTFlfRU1QVFlfQVJSQVlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IC8vIE5vdyB3ZSBhY3R1YWxseSBhdHRlbXB0IHRvIHJlYWQgdGhlIGZyYWdtZW50OlxuICAgIC8vIDEuIENoZWNrIGlmIHRoZXJlJ3MgYSBjYWNoZWQgdmFsdWUgZm9yIHRoaXMgZnJhZ21lbnRcblxuXG4gICAgdmFyIGNhY2hlZFZhbHVlID0gdGhpcy5fY2FjaGUuZ2V0KGZyYWdtZW50SWRlbnRpZmllcik7XG5cbiAgICBpZiAoY2FjaGVkVmFsdWUgIT0gbnVsbCkge1xuICAgICAgaWYgKGlzUHJvbWlzZShjYWNoZWRWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgY2FjaGVkVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWNoZWRWYWx1ZS5zbmFwc2hvdCkge1xuICAgICAgICB0aGlzLl9yZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHNJblNuYXBzaG90KGNhY2hlZFZhbHVlLnNuYXBzaG90KTtcblxuICAgICAgICByZXR1cm4gY2FjaGVkVmFsdWU7XG4gICAgICB9XG4gICAgfSAvLyAyLiBJZiBub3QsIHRyeSByZWFkaW5nIHRoZSBmcmFnbWVudCBmcm9tIHRoZSBSZWxheSBzdG9yZS5cbiAgICAvLyBJZiB0aGUgc25hcHNob3QgaGFzIGRhdGEsIHJldHVybiBpdCBhbmQgc2F2ZSBpdCBpbiBjYWNoZVxuXG5cbiAgICB2YXIgZnJhZ21lbnRTZWxlY3RvciA9IGdldFNlbGVjdG9yKGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWYpO1xuICAgICEoZnJhZ21lbnRTZWxlY3RvciAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBFeHBlY3RlZCB0byByZWNlaXZlIGFuIG9iamVjdCB3aGVyZSBgLi4uJXNgIHdhcyBzcHJlYWQsICcgKyAnYnV0IHRoZSBmcmFnbWVudCByZWZlcmVuY2Ugd2FzIG5vdCBmb3VuZGAuIFRoaXMgaXMgbW9zdCAnICsgJ2xpa2VseSB0aGUgcmVzdWx0IG9mOlxcbicgKyBcIi0gRm9yZ2V0dGluZyB0byBzcHJlYWQgYCVzYCBpbiBgJXNgJ3MgcGFyZW50J3MgZnJhZ21lbnQuXFxuXCIgKyAnLSBDb25kaXRpb25hbGx5IGZldGNoaW5nIGAlc2AgYnV0IHVuY29uZGl0aW9uYWxseSBwYXNzaW5nICVzIHByb3AgJyArICd0byBgJXNgLiBJZiB0aGUgcGFyZW50IGZyYWdtZW50IG9ubHkgZmV0Y2hlcyB0aGUgZnJhZ21lbnQgY29uZGl0aW9uYWxseSAnICsgJy0gd2l0aCBlLmcuIGBAaW5jbHVkZWAsIGBAc2tpcGAsIG9yIGluc2lkZSBhIGAuLi4gb24gU29tZVR5cGUgeyB9YCAnICsgJ3NwcmVhZCAgLSB0aGVuIHRoZSBmcmFnbWVudCByZWZlcmVuY2Ugd2lsbCBub3QgZXhpc3QuICcgKyAnSW4gdGhpcyBjYXNlLCBwYXNzIGBudWxsYCBpZiB0aGUgY29uZGl0aW9ucyBmb3IgZXZhbHVhdGluZyB0aGUgJyArICdmcmFnbWVudCBhcmUgbm90IG1ldCAoZS5nLiBpZiB0aGUgYEBpbmNsdWRlKGlmKWAgdmFsdWUgaXMgZmFsc2UuKScsIGZyYWdtZW50Tm9kZS5uYW1lLCBmcmFnbWVudE5vZGUubmFtZSwgY29tcG9uZW50RGlzcGxheU5hbWUsIGZyYWdtZW50Tm9kZS5uYW1lLCBmcmFnbWVudEtleSA9PSBudWxsID8gJ2EgZnJhZ21lbnQgcmVmZXJlbmNlJyA6IFwidGhlIGBcIi5jb25jYXQoZnJhZ21lbnRLZXksIFwiYFwiKSwgY29tcG9uZW50RGlzcGxheU5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgc25hcHNob3QgPSBmcmFnbWVudFNlbGVjdG9yLmtpbmQgPT09ICdQbHVyYWxSZWFkZXJTZWxlY3RvcicgPyBmcmFnbWVudFNlbGVjdG9yLnNlbGVjdG9ycy5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBlbnZpcm9ubWVudC5sb29rdXAocyk7XG4gICAgfSkgOiBlbnZpcm9ubWVudC5sb29rdXAoZnJhZ21lbnRTZWxlY3Rvcik7XG4gICAgdmFyIGZyYWdtZW50T3duZXIgPSBmcmFnbWVudFNlbGVjdG9yLmtpbmQgPT09ICdQbHVyYWxSZWFkZXJTZWxlY3RvcicgPyBmcmFnbWVudFNlbGVjdG9yLnNlbGVjdG9yc1swXS5vd25lciA6IGZyYWdtZW50U2VsZWN0b3Iub3duZXI7XG5cbiAgICBpZiAoIWlzTWlzc2luZ0RhdGEoc25hcHNob3QpKSB7XG4gICAgICB0aGlzLl9yZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHNJblNuYXBzaG90KHNuYXBzaG90KTtcblxuICAgICAgdmFyIGZyYWdtZW50UmVzdWx0ID0gZ2V0RnJhZ21lbnRSZXN1bHQoZnJhZ21lbnRJZGVudGlmaWVyLCBzbmFwc2hvdCk7XG5cbiAgICAgIHRoaXMuX2NhY2hlLnNldChmcmFnbWVudElkZW50aWZpZXIsIGZyYWdtZW50UmVzdWx0KTtcblxuICAgICAgcmV0dXJuIGZyYWdtZW50UmVzdWx0O1xuICAgIH0gLy8gMy4gSWYgd2UgZG9uJ3QgaGF2ZSBkYXRhIGluIHRoZSBzdG9yZSwgY2hlY2sgaWYgYSByZXF1ZXN0IGlzIGluXG4gICAgLy8gZmxpZ2h0IGZvciB0aGUgZnJhZ21lbnQncyBwYXJlbnQgcXVlcnksIG9yIGZvciBhbm90aGVyIG9wZXJhdGlvblxuICAgIC8vIHRoYXQgbWF5IGFmZmVjdCB0aGUgcGFyZW50J3MgcXVlcnkgZGF0YSwgc3VjaCBhcyBhIG11dGF0aW9uXG4gICAgLy8gb3Igc3Vic2NyaXB0aW9uLiBJZiBhIHByb21pc2UgZXhpc3RzLCBjYWNoZSB0aGUgcHJvbWlzZSBhbmQgdXNlIGl0XG4gICAgLy8gdG8gc3VzcGVuZC5cblxuXG4gICAgdmFyIG5ldHdvcmtQcm9taXNlID0gdGhpcy5fZ2V0QW5kU2F2ZVByb21pc2VGb3JGcmFnbWVudFJlcXVlc3RJbkZsaWdodChmcmFnbWVudElkZW50aWZpZXIsIGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRPd25lcik7XG5cbiAgICBpZiAobmV0d29ya1Byb21pc2UgIT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV0d29ya1Byb21pc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fcmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzSW5TbmFwc2hvdChzbmFwc2hvdCk7XG5cbiAgICByZXR1cm4gZ2V0RnJhZ21lbnRSZXN1bHQoZnJhZ21lbnRJZGVudGlmaWVyLCBzbmFwc2hvdCk7XG4gIH07XG5cbiAgX3Byb3RvLl9yZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHNJblNuYXBzaG90ID0gZnVuY3Rpb24gX3JlcG9ydE1pc3NpbmdSZXF1aXJlZEZpZWxkc0luU25hcHNob3Qoc25hcHNob3QpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc25hcHNob3QpKSB7XG4gICAgICBzbmFwc2hvdC5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIGlmIChzLm1pc3NpbmdSZXF1aXJlZEZpZWxkcyAhPSBudWxsKSB7XG4gICAgICAgICAgcmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzKF90aGlzLl9lbnZpcm9ubWVudCwgcy5taXNzaW5nUmVxdWlyZWRGaWVsZHMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNuYXBzaG90Lm1pc3NpbmdSZXF1aXJlZEZpZWxkcyAhPSBudWxsKSB7XG4gICAgICAgIHJlcG9ydE1pc3NpbmdSZXF1aXJlZEZpZWxkcyh0aGlzLl9lbnZpcm9ubWVudCwgc25hcHNob3QubWlzc2luZ1JlcXVpcmVkRmllbGRzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlYWRTcGVjID0gZnVuY3Rpb24gcmVhZFNwZWMoZnJhZ21lbnROb2RlcywgZnJhZ21lbnRSZWZzLCBjb21wb25lbnREaXNwbGF5TmFtZSkge1xuICAgIHZhciByZXN1bHQgPSB7fTtcblxuICAgIGZvciAodmFyIF9rZXkgaW4gZnJhZ21lbnROb2Rlcykge1xuICAgICAgcmVzdWx0W19rZXldID0gdGhpcy5yZWFkKGZyYWdtZW50Tm9kZXNbX2tleV0sIGZyYWdtZW50UmVmc1tfa2V5XSwgY29tcG9uZW50RGlzcGxheU5hbWUsIF9rZXkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShmcmFnbWVudFJlc3VsdCwgY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnZpcm9ubWVudCA9IHRoaXMuX2Vudmlyb25tZW50O1xuICAgIHZhciBjYWNoZUtleSA9IGZyYWdtZW50UmVzdWx0LmNhY2hlS2V5O1xuICAgIHZhciByZW5kZXJlZFNuYXBzaG90ID0gZnJhZ21lbnRSZXN1bHQuc25hcHNob3Q7XG5cbiAgICBpZiAoIXJlbmRlcmVkU25hcHNob3QpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7fVxuICAgICAgfTtcbiAgICB9IC8vIDEuIENoZWNrIGZvciBhbnkgdXBkYXRlcyBtaXNzZWQgZHVyaW5nIHJlbmRlciBwaGFzZVxuICAgIC8vIFRPRE8oVDQ0MDY2NzYwKTogTW9yZSBlZmZpY2llbnRseSBkZXRlY3QgaWYgd2UgbWlzc2VkIGFuIHVwZGF0ZVxuXG5cbiAgICB2YXIgX3RoaXMkY2hlY2tNaXNzZWRVcGRhID0gdGhpcy5jaGVja01pc3NlZFVwZGF0ZXMoZnJhZ21lbnRSZXN1bHQpLFxuICAgICAgICBkaWRNaXNzVXBkYXRlcyA9IF90aGlzJGNoZWNrTWlzc2VkVXBkYVswXSxcbiAgICAgICAgY3VycmVudFNuYXBzaG90ID0gX3RoaXMkY2hlY2tNaXNzZWRVcGRhWzFdOyAvLyAyLiBJZiBhbiB1cGRhdGUgd2FzIG1pc3NlZCwgbm90aWZ5IHRoZSBjb21wb25lbnQgc28gaXQgdXBkYXRlcyB3aXRoXG4gICAgLy8gdGhlIGxhdGVzdCBkYXRhLlxuXG5cbiAgICBpZiAoZGlkTWlzc1VwZGF0ZXMpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSAvLyAzLiBFc3RhYmxpc2ggc3Vic2NyaXB0aW9ucyBvbiB0aGUgc25hcHNob3QocylcblxuXG4gICAgdmFyIGRhdGFTdWJzY3JpcHRpb25zID0gW107XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZW5kZXJlZFNuYXBzaG90KSkge1xuICAgICAgIUFycmF5LmlzQXJyYXkoY3VycmVudFNuYXBzaG90KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBFeHBlY3RlZCBzbmFwc2hvdHMgdG8gYmUgcGx1cmFsLiAnICsgXCJJZiB5b3UncmUgc2VlaW5nIHRoaXMsIHRoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlbGF5LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBjdXJyZW50U25hcHNob3QuZm9yRWFjaChmdW5jdGlvbiAoc25hcHNob3QsIGlkeCkge1xuICAgICAgICBkYXRhU3Vic2NyaXB0aW9ucy5wdXNoKGVudmlyb25tZW50LnN1YnNjcmliZShzbmFwc2hvdCwgZnVuY3Rpb24gKGxhdGVzdFNuYXBzaG90KSB7XG4gICAgICAgICAgX3RoaXMyLl91cGRhdGVQbHVyYWxTbmFwc2hvdChjYWNoZUtleSwgY3VycmVudFNuYXBzaG90LCBsYXRlc3RTbmFwc2hvdCwgaWR4KTtcblxuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAhKGN1cnJlbnRTbmFwc2hvdCAhPSBudWxsICYmICFBcnJheS5pc0FycmF5KGN1cnJlbnRTbmFwc2hvdCkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIHNuYXBzaG90IHRvIGJlIHNpbmd1bGFyLiAnICsgXCJJZiB5b3UncmUgc2VlaW5nIHRoaXMsIHRoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlbGF5LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBkYXRhU3Vic2NyaXB0aW9ucy5wdXNoKGVudmlyb25tZW50LnN1YnNjcmliZShjdXJyZW50U25hcHNob3QsIGZ1bmN0aW9uIChsYXRlc3RTbmFwc2hvdCkge1xuICAgICAgICBfdGhpczIuX2NhY2hlLnNldChjYWNoZUtleSwgZ2V0RnJhZ21lbnRSZXN1bHQoY2FjaGVLZXksIGxhdGVzdFNuYXBzaG90KSk7XG5cbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgZGF0YVN1YnNjcmlwdGlvbnMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgcmV0dXJuIHMuZGlzcG9zZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfdGhpczIuX2NhY2hlW1wiZGVsZXRlXCJdKGNhY2hlS2V5KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5zdWJzY3JpYmVTcGVjID0gZnVuY3Rpb24gc3Vic2NyaWJlU3BlYyhmcmFnbWVudFJlc3VsdHMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgZGlzcG9zYWJsZXMgPSBPYmplY3Qua2V5cyhmcmFnbWVudFJlc3VsdHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gX3RoaXMzLnN1YnNjcmliZShmcmFnbWVudFJlc3VsdHNba2V5XSwgY2FsbGJhY2spO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwb3NlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICBkaXNwb3NhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uIChkaXNwb3NhYmxlKSB7XG4gICAgICAgICAgZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmNoZWNrTWlzc2VkVXBkYXRlcyA9IGZ1bmN0aW9uIGNoZWNrTWlzc2VkVXBkYXRlcyhmcmFnbWVudFJlc3VsdCkge1xuICAgIHZhciBlbnZpcm9ubWVudCA9IHRoaXMuX2Vudmlyb25tZW50O1xuICAgIHZhciBjYWNoZUtleSA9IGZyYWdtZW50UmVzdWx0LmNhY2hlS2V5O1xuICAgIHZhciByZW5kZXJlZFNuYXBzaG90ID0gZnJhZ21lbnRSZXN1bHQuc25hcHNob3Q7XG5cbiAgICBpZiAoIXJlbmRlcmVkU25hcHNob3QpIHtcbiAgICAgIHJldHVybiBbZmFsc2UsIG51bGxdO1xuICAgIH1cblxuICAgIHZhciBkaWRNaXNzVXBkYXRlcyA9IGZhbHNlO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVuZGVyZWRTbmFwc2hvdCkpIHtcbiAgICAgIHZhciBjdXJyZW50U25hcHNob3RzID0gW107XG4gICAgICByZW5kZXJlZFNuYXBzaG90LmZvckVhY2goZnVuY3Rpb24gKHNuYXBzaG90LCBpZHgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRTbmFwc2hvdCA9IGVudmlyb25tZW50Lmxvb2t1cChzbmFwc2hvdC5zZWxlY3Rvcik7XG4gICAgICAgIHZhciByZW5kZXJEYXRhID0gc25hcHNob3QuZGF0YTtcbiAgICAgICAgdmFyIGN1cnJlbnREYXRhID0gY3VycmVudFNuYXBzaG90LmRhdGE7XG4gICAgICAgIHZhciB1cGRhdGVkRGF0YSA9IHJlY3ljbGVOb2Rlc0ludG8ocmVuZGVyRGF0YSwgY3VycmVudERhdGEpO1xuXG4gICAgICAgIGlmICh1cGRhdGVkRGF0YSAhPT0gcmVuZGVyRGF0YSkge1xuICAgICAgICAgIGN1cnJlbnRTbmFwc2hvdCA9ICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCBjdXJyZW50U25hcHNob3QpLCB7fSwge1xuICAgICAgICAgICAgZGF0YTogdXBkYXRlZERhdGFcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkaWRNaXNzVXBkYXRlcyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50U25hcHNob3RzW2lkeF0gPSBjdXJyZW50U25hcHNob3Q7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGRpZE1pc3NVcGRhdGVzKSB7XG4gICAgICAgIHRoaXMuX2NhY2hlLnNldChjYWNoZUtleSwgZ2V0RnJhZ21lbnRSZXN1bHQoY2FjaGVLZXksIGN1cnJlbnRTbmFwc2hvdHMpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFtkaWRNaXNzVXBkYXRlcywgY3VycmVudFNuYXBzaG90c107XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRTbmFwc2hvdCA9IGVudmlyb25tZW50Lmxvb2t1cChyZW5kZXJlZFNuYXBzaG90LnNlbGVjdG9yKTtcbiAgICB2YXIgcmVuZGVyRGF0YSA9IHJlbmRlcmVkU25hcHNob3QuZGF0YTtcbiAgICB2YXIgY3VycmVudERhdGEgPSBjdXJyZW50U25hcHNob3QuZGF0YTtcbiAgICB2YXIgdXBkYXRlZERhdGEgPSByZWN5Y2xlTm9kZXNJbnRvKHJlbmRlckRhdGEsIGN1cnJlbnREYXRhKTtcbiAgICBjdXJyZW50U25hcHNob3QgPSB7XG4gICAgICBkYXRhOiB1cGRhdGVkRGF0YSxcbiAgICAgIGlzTWlzc2luZ0RhdGE6IGN1cnJlbnRTbmFwc2hvdC5pc01pc3NpbmdEYXRhLFxuICAgICAgc2VlblJlY29yZHM6IGN1cnJlbnRTbmFwc2hvdC5zZWVuUmVjb3JkcyxcbiAgICAgIHNlbGVjdG9yOiBjdXJyZW50U25hcHNob3Quc2VsZWN0b3IsXG4gICAgICBtaXNzaW5nUmVxdWlyZWRGaWVsZHM6IGN1cnJlbnRTbmFwc2hvdC5taXNzaW5nUmVxdWlyZWRGaWVsZHNcbiAgICB9O1xuXG4gICAgaWYgKHVwZGF0ZWREYXRhICE9PSByZW5kZXJEYXRhKSB7XG4gICAgICB0aGlzLl9jYWNoZS5zZXQoY2FjaGVLZXksIGdldEZyYWdtZW50UmVzdWx0KGNhY2hlS2V5LCBjdXJyZW50U25hcHNob3QpKTtcblxuICAgICAgZGlkTWlzc1VwZGF0ZXMgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBbZGlkTWlzc1VwZGF0ZXMsIGN1cnJlbnRTbmFwc2hvdF07XG4gIH07XG5cbiAgX3Byb3RvLmNoZWNrTWlzc2VkVXBkYXRlc1NwZWMgPSBmdW5jdGlvbiBjaGVja01pc3NlZFVwZGF0ZXNTcGVjKGZyYWdtZW50UmVzdWx0cykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGZyYWdtZW50UmVzdWx0cykuc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gX3RoaXM0LmNoZWNrTWlzc2VkVXBkYXRlcyhmcmFnbWVudFJlc3VsdHNba2V5XSlbMF07XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLl9nZXRBbmRTYXZlUHJvbWlzZUZvckZyYWdtZW50UmVxdWVzdEluRmxpZ2h0ID0gZnVuY3Rpb24gX2dldEFuZFNhdmVQcm9taXNlRm9yRnJhZ21lbnRSZXF1ZXN0SW5GbGlnaHQoY2FjaGVLZXksIGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRPd25lcikge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgdmFyIF9nZXRQcm9taXNlRm9yQWN0aXZlUjtcblxuICAgIHZhciBlbnZpcm9ubWVudCA9IHRoaXMuX2Vudmlyb25tZW50O1xuICAgIHZhciBuZXR3b3JrUHJvbWlzZSA9IChfZ2V0UHJvbWlzZUZvckFjdGl2ZVIgPSBnZXRQcm9taXNlRm9yQWN0aXZlUmVxdWVzdChlbnZpcm9ubWVudCwgZnJhZ21lbnRPd25lcikpICE9PSBudWxsICYmIF9nZXRQcm9taXNlRm9yQWN0aXZlUiAhPT0gdm9pZCAwID8gX2dldFByb21pc2VGb3JBY3RpdmVSIDogZ2V0UHJvbWlzZUZvclBlbmRpbmdPcGVyYXRpb25BZmZlY3RpbmdPd25lcihlbnZpcm9ubWVudCwgZnJhZ21lbnRPd25lcik7XG5cbiAgICBpZiAoIW5ldHdvcmtQcm9taXNlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IC8vIFdoZW4gdGhlIFByb21pc2UgZm9yIHRoZSByZXF1ZXN0IHJlc29sdmVzLCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0b1xuICAgIC8vIHVwZGF0ZSB0aGUgY2FjaGUgd2l0aCB0aGUgbGF0ZXN0IGRhdGEgYXZhaWxhYmxlIGluIHRoZSBzdG9yZSBiZWZvcmVcbiAgICAvLyByZXNvbHZpbmcgdGhlIFByb21pc2VcblxuXG4gICAgdmFyIHByb21pc2UgPSBuZXR3b3JrUHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzNS5fY2FjaGVbXCJkZWxldGVcIl0oY2FjaGVLZXkpO1xuICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBfdGhpczUuX2NhY2hlW1wiZGVsZXRlXCJdKGNhY2hlS2V5KTtcbiAgICB9KTtcblxuICAgIHRoaXMuX2NhY2hlLnNldChjYWNoZUtleSwgcHJvbWlzZSk7XG5cbiAgICB2YXIgcXVlcnlOYW1lID0gZnJhZ21lbnRPd25lci5ub2RlLnBhcmFtcy5uYW1lO1xuICAgIHZhciBmcmFnbWVudE5hbWUgPSBmcmFnbWVudE5vZGUubmFtZTtcbiAgICB2YXIgcHJvbWlzZURpc3BsYXlOYW1lID0gcXVlcnlOYW1lID09PSBmcmFnbWVudE5hbWUgPyBcIlJlbGF5KFwiLmNvbmNhdChxdWVyeU5hbWUsIFwiKVwiKSA6IFwiUmVsYXkoXCIuY29uY2F0KHF1ZXJ5TmFtZSwgXCI6XCIpLmNvbmNhdChmcmFnbWVudE5hbWUsIFwiKVwiKTsgLy8gJEZsb3dFeHBlY3RlZEVycm9yW3Byb3AtbWlzc2luZ10gRXhwYW5kbyB0byBhbm5vdGF0ZSBQcm9taXNlcy5cblxuICAgIHByb21pc2UuZGlzcGxheU5hbWUgPSBwcm9taXNlRGlzcGxheU5hbWU7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgX3Byb3RvLl91cGRhdGVQbHVyYWxTbmFwc2hvdCA9IGZ1bmN0aW9uIF91cGRhdGVQbHVyYWxTbmFwc2hvdChjYWNoZUtleSwgYmFzZVNuYXBzaG90cywgbGF0ZXN0U25hcHNob3QsIGlkeCkge1xuICAgIHZhciBjdXJyZW50RnJhZ21lbnRSZXN1bHQgPSB0aGlzLl9jYWNoZS5nZXQoY2FjaGVLZXkpO1xuXG4gICAgaWYgKGlzUHJvbWlzZShjdXJyZW50RnJhZ21lbnRSZXN1bHQpKSB7XG4gICAgICByZXBvcnRJbnZhbGlkQ2FjaGVkRGF0YShsYXRlc3RTbmFwc2hvdC5zZWxlY3Rvci5ub2RlLm5hbWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50U25hcHNob3QgPSBjdXJyZW50RnJhZ21lbnRSZXN1bHQgPT09IG51bGwgfHwgY3VycmVudEZyYWdtZW50UmVzdWx0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdXJyZW50RnJhZ21lbnRSZXN1bHQuc25hcHNob3Q7XG5cbiAgICBpZiAoY3VycmVudFNuYXBzaG90ICYmICFBcnJheS5pc0FycmF5KGN1cnJlbnRTbmFwc2hvdCkpIHtcbiAgICAgIHJlcG9ydEludmFsaWRDYWNoZWREYXRhKGxhdGVzdFNuYXBzaG90LnNlbGVjdG9yLm5vZGUubmFtZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRTbmFwc2hvdHMgPSBjdXJyZW50U25hcHNob3QgPyAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKGN1cnJlbnRTbmFwc2hvdCkgOiAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKGJhc2VTbmFwc2hvdHMpO1xuICAgIG5leHRTbmFwc2hvdHNbaWR4XSA9IGxhdGVzdFNuYXBzaG90O1xuXG4gICAgdGhpcy5fY2FjaGUuc2V0KGNhY2hlS2V5LCBnZXRGcmFnbWVudFJlc3VsdChjYWNoZUtleSwgbmV4dFNuYXBzaG90cykpO1xuICB9O1xuXG4gIHJldHVybiBGcmFnbWVudFJlc291cmNlSW1wbDtcbn0oKTtcblxuZnVuY3Rpb24gcmVwb3J0SW52YWxpZENhY2hlZERhdGEobm9kZU5hbWUpIHtcbiAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIHRvIGZpbmQgY2FjaGVkIGRhdGEgZm9yIHBsdXJhbCBmcmFnbWVudCBgJXNgIHdoZW4gJyArICdyZWNlaXZpbmcgYSBzdWJzY3JpcHRpb24uICcgKyBcIklmIHlvdSdyZSBzZWVpbmcgdGhpcywgdGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVsYXkuXCIsIG5vZGVOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50UmVzb3VyY2UoZW52aXJvbm1lbnQpIHtcbiAgcmV0dXJuIG5ldyBGcmFnbWVudFJlc291cmNlSW1wbChlbnZpcm9ubWVudCk7XG59XG5cbnZhciBkYXRhUmVzb3VyY2VzID0gV0VBS01BUF9TVVBQT1JURUQgPyBuZXcgV2Vha01hcCgpIDogbmV3IE1hcCgpO1xuXG5mdW5jdGlvbiBnZXRGcmFnbWVudFJlc291cmNlRm9yRW52aXJvbm1lbnQoZW52aXJvbm1lbnQpIHtcbiAgdmFyIGNhY2hlZCA9IGRhdGFSZXNvdXJjZXMuZ2V0KGVudmlyb25tZW50KTtcblxuICBpZiAoY2FjaGVkKSB7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuXG4gIHZhciBuZXdEYXRhUmVzb3VyY2UgPSBjcmVhdGVGcmFnbWVudFJlc291cmNlKGVudmlyb25tZW50KTtcbiAgZGF0YVJlc291cmNlcy5zZXQoZW52aXJvbm1lbnQsIG5ld0RhdGFSZXNvdXJjZSk7XG4gIHJldHVybiBuZXdEYXRhUmVzb3VyY2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVGcmFnbWVudFJlc291cmNlOiBjcmVhdGVGcmFnbWVudFJlc291cmNlLFxuICBnZXRGcmFnbWVudFJlc291cmNlRm9yRW52aXJvbm1lbnQ6IGdldEZyYWdtZW50UmVzb3VyY2VGb3JFbnZpcm9ubWVudFxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBKUyBtYXBzIChib3RoIHBsYWluIG9iamVjdHMgYW5kIE1hcCkgbWFpbnRhaW4ga2V5IGluc2VydGlvblxuICogb3JkZXIsIHdoaWNoIG1lYW5zIHRoZXJlIGlzIGFuIGVhc3kgd2F5IHRvIHNpbXVsYXRlIExSVSBiZWhhdmlvclxuICogdGhhdCBzaG91bGQgYWxzbyBwZXJmb3JtIHF1aXRlIHdlbGw6XG4gKlxuICogVG8gaW5zZXJ0IGEgbmV3IHZhbHVlLCBmaXJzdCBkZWxldGUgdGhlIGtleSBmcm9tIHRoZSBpbm5lciBfbWFwLFxuICogdGhlbiBfbWFwLnNldChrLCB2KS4gQnkgZGVsZXRpbmcgYW5kIHJlaW5zZXJ0aW5nLCB5b3UgZW5zdXJlIHRoYXQgdGhlXG4gKiBtYXAgc2VlcyB0aGUga2V5IGFzIHRoZSBsYXN0IGluc2VydGVkIGtleS5cbiAqXG4gKiBHZXQgZG9lcyB0aGUgc2FtZTogaWYgdGhlIGtleSBpcyBwcmVzZW50LCBkZWxldGUgYW5kIHJlaW5zZXJ0IGl0LlxuICovXG52YXIgTFJVQ2FjaGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBMUlVDYWNoZShjYXBhY2l0eSkge1xuICAgIHRoaXMuX2NhcGFjaXR5ID0gY2FwYWNpdHk7XG4gICAgISh0aGlzLl9jYXBhY2l0eSA+IDApID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnTFJVQ2FjaGU6IFVuYWJsZSB0byBjcmVhdGUgaW5zdGFuY2Ugb2YgY2FjaGUgd2l0aCB6ZXJvIG9yIG5lZ2F0aXZlIGNhcGFjaXR5LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTFJVQ2FjaGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXQgPSBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHRoaXMuX21hcFtcImRlbGV0ZVwiXShrZXkpO1xuXG4gICAgdGhpcy5fbWFwLnNldChrZXksIHZhbHVlKTtcblxuICAgIGlmICh0aGlzLl9tYXAuc2l6ZSA+IHRoaXMuX2NhcGFjaXR5KSB7XG4gICAgICB2YXIgZmlyc3RLZXkgPSB0aGlzLl9tYXAua2V5cygpLm5leHQoKTtcblxuICAgICAgaWYgKCFmaXJzdEtleS5kb25lKSB7XG4gICAgICAgIHRoaXMuX21hcFtcImRlbGV0ZVwiXShmaXJzdEtleS52YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5fbWFwLmdldChrZXkpO1xuXG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX21hcFtcImRlbGV0ZVwiXShrZXkpO1xuXG4gICAgICB0aGlzLl9tYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBfcHJvdG8uaGFzID0gZnVuY3Rpb24gaGFzKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9tYXAuaGFzKGtleSk7XG4gIH07XG5cbiAgX3Byb3RvW1wiZGVsZXRlXCJdID0gZnVuY3Rpb24gX2RlbGV0ZShrZXkpIHtcbiAgICB0aGlzLl9tYXBbXCJkZWxldGVcIl0oa2V5KTtcbiAgfTtcblxuICBfcHJvdG8uc2l6ZSA9IGZ1bmN0aW9uIHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5zaXplO1xuICB9O1xuXG4gIF9wcm90by5jYXBhY2l0eSA9IGZ1bmN0aW9uIGNhcGFjaXR5KCkge1xuICAgIHJldHVybiB0aGlzLl9jYXBhY2l0eSAtIHRoaXMuX21hcC5zaXplO1xuICB9O1xuXG4gIF9wcm90by5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuX21hcC5jbGVhcigpO1xuICB9O1xuXG4gIHJldHVybiBMUlVDYWNoZTtcbn0oKTtcblxuZnVuY3Rpb24gY3JlYXRlKGNhcGFjaXR5KSB7XG4gIHJldHVybiBuZXcgTFJVQ2FjaGUoY2FwYWNpdHkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiBjcmVhdGVcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuLy8gVGhpcyBjb250ZXh0dWFsIHByb2ZpbGVyIGNhbiBiZSB1c2VkIHRvIHdyYXAgYSByZWFjdCBzdWItdHJlZS4gSXQgd2lsbCBiaW5kXG4vLyB0aGUgUmVsYXlQcm9maWxlciBkdXJpbmcgdGhlIHJlbmRlciBwaGFzZSBvZiB0aGVzZSBjb21wb25lbnRzLiBBbGxvd3Ncbi8vIGNvbGxlY3RpbmcgbWV0cmljcyBmb3IgYSBzcGVjaWZpYyBwYXJ0IG9mIHlvdXIgYXBwbGljYXRpb24uXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBQcm9maWxlckNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgd3JhcFByZXBhcmVRdWVyeVJlc291cmNlOiBmdW5jdGlvbiB3cmFwUHJlcGFyZVF1ZXJ5UmVzb3VyY2UoY2IpIHtcbiAgICByZXR1cm4gY2IoKTtcbiAgfVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IFByb2ZpbGVyQ29udGV4dDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgTFJVQ2FjaGUgPSByZXF1aXJlKCcuL0xSVUNhY2hlJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIGlzUHJvbWlzZSA9IF9yZXF1aXJlLmlzUHJvbWlzZTtcblxudmFyIENBQ0hFX0NBUEFDSVRZID0gMTAwMDtcbnZhciBERUZBVUxUX0ZFVENIX1BPTElDWSA9ICdzdG9yZS1vci1uZXR3b3JrJztcbnZhciBEQVRBX1JFVEVOVElPTl9USU1FT1VUID0gNSAqIDYwICogMTAwMDtcbnZhciBXRUFLTUFQX1NVUFBPUlRFRCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBnZXRRdWVyeUNhY2hlSWRlbnRpZmllcihlbnZpcm9ubWVudCwgb3BlcmF0aW9uLCBtYXliZUZldGNoUG9saWN5LCBtYXliZVJlbmRlclBvbGljeSwgY2FjaGVCcmVha2VyKSB7XG4gIHZhciBmZXRjaFBvbGljeSA9IG1heWJlRmV0Y2hQb2xpY3kgIT09IG51bGwgJiYgbWF5YmVGZXRjaFBvbGljeSAhPT0gdm9pZCAwID8gbWF5YmVGZXRjaFBvbGljeSA6IERFRkFVTFRfRkVUQ0hfUE9MSUNZO1xuICB2YXIgcmVuZGVyUG9saWN5ID0gbWF5YmVSZW5kZXJQb2xpY3kgIT09IG51bGwgJiYgbWF5YmVSZW5kZXJQb2xpY3kgIT09IHZvaWQgMCA/IG1heWJlUmVuZGVyUG9saWN5IDogZW52aXJvbm1lbnQuVU5TVEFCTEVfZ2V0RGVmYXVsdFJlbmRlclBvbGljeSgpO1xuICB2YXIgY2FjaGVJZGVudGlmaWVyID0gXCJcIi5jb25jYXQoZmV0Y2hQb2xpY3ksIFwiLVwiKS5jb25jYXQocmVuZGVyUG9saWN5LCBcIi1cIikuY29uY2F0KG9wZXJhdGlvbi5yZXF1ZXN0LmlkZW50aWZpZXIpO1xuXG4gIGlmIChjYWNoZUJyZWFrZXIgIT0gbnVsbCkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChjYWNoZUlkZW50aWZpZXIsIFwiLVwiKS5jb25jYXQoY2FjaGVCcmVha2VyKTtcbiAgfVxuXG4gIHJldHVybiBjYWNoZUlkZW50aWZpZXI7XG59XG5cbmZ1bmN0aW9uIGdldFF1ZXJ5UmVzdWx0KG9wZXJhdGlvbiwgY2FjaGVJZGVudGlmaWVyKSB7XG4gIHZhciByb290RnJhZ21lbnRSZWYgPSB7XG4gICAgX19pZDogb3BlcmF0aW9uLmZyYWdtZW50LmRhdGFJRCxcbiAgICBfX2ZyYWdtZW50czogKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh7fSwgb3BlcmF0aW9uLmZyYWdtZW50Lm5vZGUubmFtZSwgb3BlcmF0aW9uLnJlcXVlc3QudmFyaWFibGVzKSxcbiAgICBfX2ZyYWdtZW50T3duZXI6IG9wZXJhdGlvbi5yZXF1ZXN0XG4gIH07XG4gIHJldHVybiB7XG4gICAgY2FjaGVJZGVudGlmaWVyOiBjYWNoZUlkZW50aWZpZXIsXG4gICAgZnJhZ21lbnROb2RlOiBvcGVyYXRpb24ucmVxdWVzdC5ub2RlLmZyYWdtZW50LFxuICAgIGZyYWdtZW50UmVmOiByb290RnJhZ21lbnRSZWYsXG4gICAgb3BlcmF0aW9uOiBvcGVyYXRpb25cbiAgfTtcbn1cblxudmFyIG5leHRJRCA9IDIwMDAwMDtcblxuZnVuY3Rpb24gY3JlYXRlQ2FjaGVFbnRyeShjYWNoZUlkZW50aWZpZXIsIG9wZXJhdGlvbiwgdmFsdWUsIG5ldHdvcmtTdWJzY3JpcHRpb24sIG9uRGlzcG9zZSkge1xuICB2YXIgY3VycmVudFZhbHVlID0gdmFsdWU7XG4gIHZhciByZXRhaW5Db3VudCA9IDA7XG4gIHZhciByZXRhaW5EaXNwb3NhYmxlID0gbnVsbDtcbiAgdmFyIHJlbGVhc2VUZW1wb3JhcnlSZXRhaW4gPSBudWxsO1xuICB2YXIgY3VycmVudE5ldHdvcmtTdWJzY3JpcHRpb24gPSBuZXR3b3JrU3Vic2NyaXB0aW9uO1xuXG4gIHZhciByZXRhaW4gPSBmdW5jdGlvbiByZXRhaW4oZW52aXJvbm1lbnQpIHtcbiAgICByZXRhaW5Db3VudCsrO1xuXG4gICAgaWYgKHJldGFpbkNvdW50ID09PSAxKSB7XG4gICAgICByZXRhaW5EaXNwb3NhYmxlID0gZW52aXJvbm1lbnQucmV0YWluKG9wZXJhdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgIHJldGFpbkNvdW50ID0gTWF0aC5tYXgoMCwgcmV0YWluQ291bnQgLSAxKTtcblxuICAgICAgICBpZiAocmV0YWluQ291bnQgPT09IDApIHtcbiAgICAgICAgICAhKHJldGFpbkRpc3Bvc2FibGUgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheTogRXhwZWN0ZWQgZGlzcG9zYWJsZSB0byByZWxlYXNlIHF1ZXJ5IHRvIGJlIGRlZmluZWQuJyArIFwiSWYgeW91J3JlIHNlZWluZyB0aGlzLCB0aGlzIGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWxheS5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgIHJldGFpbkRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgIHJldGFpbkRpc3Bvc2FibGUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgb25EaXNwb3NlKGNhY2hlRW50cnkpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGNhY2hlRW50cnkgPSB7XG4gICAgY2FjaGVJZGVudGlmaWVyOiBjYWNoZUlkZW50aWZpZXIsXG4gICAgaWQ6IG5leHRJRCsrLFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIHJldHVybiBjdXJyZW50VmFsdWU7XG4gICAgfSxcbiAgICBzZXRWYWx1ZTogZnVuY3Rpb24gc2V0VmFsdWUodmFsKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSB2YWw7XG4gICAgfSxcbiAgICBnZXRSZXRhaW5Db3VudDogZnVuY3Rpb24gZ2V0UmV0YWluQ291bnQoKSB7XG4gICAgICByZXR1cm4gcmV0YWluQ291bnQ7XG4gICAgfSxcbiAgICBnZXROZXR3b3JrU3Vic2NyaXB0aW9uOiBmdW5jdGlvbiBnZXROZXR3b3JrU3Vic2NyaXB0aW9uKCkge1xuICAgICAgcmV0dXJuIGN1cnJlbnROZXR3b3JrU3Vic2NyaXB0aW9uO1xuICAgIH0sXG4gICAgc2V0TmV0d29ya1N1YnNjcmlwdGlvbjogZnVuY3Rpb24gc2V0TmV0d29ya1N1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pIHtcbiAgICAgIGlmIChjdXJyZW50TmV0d29ya1N1YnNjcmlwdGlvbiAhPSBudWxsKSB7XG4gICAgICAgIGN1cnJlbnROZXR3b3JrU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnROZXR3b3JrU3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uO1xuICAgIH0sXG4gICAgdGVtcG9yYXJ5UmV0YWluOiBmdW5jdGlvbiB0ZW1wb3JhcnlSZXRhaW4oZW52aXJvbm1lbnQpIHtcbiAgICAgIC8vIE5PVEU6IElmIHdlJ3JlIGV4ZWN1dGluZyBpbiBhIHNlcnZlciBlbnZpcm9ubWVudCwgdGhlcmUncyBubyBuZWVkXG4gICAgICAvLyB0byBjcmVhdGUgdGVtcG9yYXJ5IHJldGFpbnMsIHNpbmNlIHRoZSBjb21wb25lbnQgd2lsbCBuZXZlciBjb21taXQuXG4gICAgICBpZiAoZW52aXJvbm1lbnQuaXNTZXJ2ZXIoKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7fVxuICAgICAgICB9O1xuICAgICAgfSAvLyBOT1RFOiB0ZW1wb3JhcnlSZXRhaW4gaXMgY2FsbGVkIGR1cmluZyB0aGUgcmVuZGVyIHBoYXNlLiBIb3dldmVyLFxuICAgICAgLy8gZ2l2ZW4gdGhhdCB3ZSBjYW4ndCB0ZWxsIGlmIHRoaXMgcmVuZGVyIHdpbGwgZXZlbnR1YWxseSBjb21taXQgb3Igbm90LFxuICAgICAgLy8gd2UgY3JlYXRlIGEgdGltZXIgdG8gYXV0b2Rpc3Bvc2Ugb2YgdGhpcyByZXRhaW4gaW4gY2FzZSB0aGUgYXNzb2NpYXRlZFxuICAgICAgLy8gY29tcG9uZW50IG5ldmVyIGNvbW1pdHMuXG4gICAgICAvLyBJZiB0aGUgY29tcG9uZW50IC9kb2VzLyBjb21taXQsIHBlcm1hbmVudFJldGFpbiB3aWxsIGNsZWFyIHRoaXMgdGltZW91dFxuICAgICAgLy8gYW5kIHBlcm1hbmVudGx5IHJldGFpbiB0aGUgZGF0YS5cblxuXG4gICAgICB2YXIgZGlzcG9zYWJsZSA9IHJldGFpbihlbnZpcm9ubWVudCk7XG4gICAgICB2YXIgcmVsZWFzZVF1ZXJ5VGltZW91dCA9IG51bGw7XG5cbiAgICAgIHZhciBsb2NhbFJlbGVhc2VUZW1wb3JhcnlSZXRhaW4gPSBmdW5jdGlvbiBsb2NhbFJlbGVhc2VUZW1wb3JhcnlSZXRhaW4oKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChyZWxlYXNlUXVlcnlUaW1lb3V0KTtcbiAgICAgICAgcmVsZWFzZVF1ZXJ5VGltZW91dCA9IG51bGw7XG4gICAgICAgIHJlbGVhc2VUZW1wb3JhcnlSZXRhaW4gPSBudWxsO1xuICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTsgLy8gTm9ybWFsbHkgaWYgdGhpcyBlbnRyeSBuZXZlciBjb21taXRzLCB0aGUgcmVxdWVzdCB3b3VsZCd2ZSBlbmRlZCBieSB0aGVcbiAgICAgICAgLy8gdGltZSB0aGlzIHRpbWVvdXQgZXhwaXJlcyBhbmQgdGhlIHRlbXBvcmFyeSByZXRhaW4gaXMgcmVsZWFzZWQuIEhvd2V2ZXIsXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBmb3IgbGl2ZSBxdWVyaWVzIHdoaWNoIHJlbWFpbiBvcGVuIGluZGVmaW5pdGVseS5cblxuICAgICAgICBpZiAocmV0YWluQ291bnQgPD0gMCAmJiBjdXJyZW50TmV0d29ya1N1YnNjcmlwdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgY3VycmVudE5ldHdvcmtTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmVsZWFzZVF1ZXJ5VGltZW91dCA9IHNldFRpbWVvdXQobG9jYWxSZWxlYXNlVGVtcG9yYXJ5UmV0YWluLCBEQVRBX1JFVEVOVElPTl9USU1FT1VUKTsgLy8gTk9URTogU2luY2UgdGVtcG9yYXJ5UmV0YWluIGNhbiBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMsIHdlIHJlbGVhc2VcbiAgICAgIC8vIHRoZSBwcmV2aW91cyB0ZW1wb3JhcnkgcmV0YWluIGFmdGVyIHdlIHJlLWVzdGFibGlzaCBhIG5ldyBvbmUsIHNpbmNlXG4gICAgICAvLyB3ZSBvbmx5IGV2ZXIgbmVlZCBhIHNpbmdsZSB0ZW1wb3JhcnkgcmV0YWluIHVudGlsIHRoZSBwZXJtYW5lbnQgcmV0YWluIGlzXG4gICAgICAvLyBlc3RhYmxpc2hlZC5cbiAgICAgIC8vIHRlbXBvcmFyeVJldGFpbiBtYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGJ5IFJlYWN0IGR1cmluZyB0aGUgcmVuZGVyXG4gICAgICAvLyBwaGFzZSwgYXMgd2VsbCBhcyBtdWx0aXBsZSB0aW1lcyBieSBvdGhlciBxdWVyeSBjb21wb25lbnRzIHRoYXQgYXJlXG4gICAgICAvLyByZW5kZXJpbmcgdGhlIHNhbWUgcXVlcnkvdmFyaWFibGVzLlxuXG4gICAgICBpZiAocmVsZWFzZVRlbXBvcmFyeVJldGFpbiAhPSBudWxsKSB7XG4gICAgICAgIHJlbGVhc2VUZW1wb3JhcnlSZXRhaW4oKTtcbiAgICAgIH1cblxuICAgICAgcmVsZWFzZVRlbXBvcmFyeVJldGFpbiA9IGxvY2FsUmVsZWFzZVRlbXBvcmFyeVJldGFpbjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgICAgcmVsZWFzZVRlbXBvcmFyeVJldGFpbiAmJiByZWxlYXNlVGVtcG9yYXJ5UmV0YWluKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICBwZXJtYW5lbnRSZXRhaW46IGZ1bmN0aW9uIHBlcm1hbmVudFJldGFpbihlbnZpcm9ubWVudCkge1xuICAgICAgdmFyIGRpc3Bvc2FibGUgPSByZXRhaW4oZW52aXJvbm1lbnQpO1xuXG4gICAgICBpZiAocmVsZWFzZVRlbXBvcmFyeVJldGFpbiAhPSBudWxsKSB7XG4gICAgICAgIHJlbGVhc2VUZW1wb3JhcnlSZXRhaW4oKTtcbiAgICAgICAgcmVsZWFzZVRlbXBvcmFyeVJldGFpbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgICAgZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG5cbiAgICAgICAgICBpZiAocmV0YWluQ291bnQgPD0gMCAmJiBjdXJyZW50TmV0d29ya1N1YnNjcmlwdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICBjdXJyZW50TmV0d29ya1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBjYWNoZUVudHJ5O1xufVxuXG52YXIgUXVlcnlSZXNvdXJjZUltcGwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBRdWVyeVJlc291cmNlSW1wbChlbnZpcm9ubWVudCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRoaXMsIFwiX2NsZWFyQ2FjaGVFbnRyeVwiLCBmdW5jdGlvbiAoY2FjaGVFbnRyeSkge1xuICAgICAgaWYgKGNhY2hlRW50cnkuZ2V0UmV0YWluQ291bnQoKSA8PSAwKSB7XG4gICAgICAgIF90aGlzLl9jYWNoZVtcImRlbGV0ZVwiXShjYWNoZUVudHJ5LmNhY2hlSWRlbnRpZmllcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5fZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcbiAgICB0aGlzLl9jYWNoZSA9IExSVUNhY2hlLmNyZWF0ZShDQUNIRV9DQVBBQ0lUWSk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUXVlcnlSZXNvdXJjZUltcGwucHJvdG90eXBlO1xuXG4gIF9wcm90by5wcmVwYXJlID0gZnVuY3Rpb24gcHJlcGFyZShvcGVyYXRpb24sIGZldGNoT2JzZXJ2YWJsZSwgbWF5YmVGZXRjaFBvbGljeSwgbWF5YmVSZW5kZXJQb2xpY3ksIG9ic2VydmVyLCBjYWNoZUJyZWFrZXIsIHByb2ZpbGVyQ29udGV4dCkge1xuICAgIHZhciBjYWNoZUlkZW50aWZpZXIgPSBnZXRRdWVyeUNhY2hlSWRlbnRpZmllcih0aGlzLl9lbnZpcm9ubWVudCwgb3BlcmF0aW9uLCBtYXliZUZldGNoUG9saWN5LCBtYXliZVJlbmRlclBvbGljeSwgY2FjaGVCcmVha2VyKTtcbiAgICByZXR1cm4gdGhpcy5wcmVwYXJlV2l0aElkZW50aWZpZXIoY2FjaGVJZGVudGlmaWVyLCBvcGVyYXRpb24sIGZldGNoT2JzZXJ2YWJsZSwgbWF5YmVGZXRjaFBvbGljeSwgbWF5YmVSZW5kZXJQb2xpY3ksIG9ic2VydmVyLCBwcm9maWxlckNvbnRleHQpO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgZHVyaW5nIGEgQ29tcG9uZW50J3MgcmVuZGVyIGZ1bmN0aW9uLFxuICAgKiB0byBlaXRoZXIgcmVhZCBhbiBleGlzdGluZyBjYWNoZWQgdmFsdWUgZm9yIHRoZSBxdWVyeSwgb3IgZmV0Y2ggdGhlIHF1ZXJ5XG4gICAqIGFuZCBzdXNwZW5kLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcmVwYXJlV2l0aElkZW50aWZpZXIgPSBmdW5jdGlvbiBwcmVwYXJlV2l0aElkZW50aWZpZXIoY2FjaGVJZGVudGlmaWVyLCBvcGVyYXRpb24sIGZldGNoT2JzZXJ2YWJsZSwgbWF5YmVGZXRjaFBvbGljeSwgbWF5YmVSZW5kZXJQb2xpY3ksIG9ic2VydmVyLCBwcm9maWxlckNvbnRleHQpIHtcbiAgICB2YXIgZW52aXJvbm1lbnQgPSB0aGlzLl9lbnZpcm9ubWVudDtcbiAgICB2YXIgZmV0Y2hQb2xpY3kgPSBtYXliZUZldGNoUG9saWN5ICE9PSBudWxsICYmIG1heWJlRmV0Y2hQb2xpY3kgIT09IHZvaWQgMCA/IG1heWJlRmV0Y2hQb2xpY3kgOiBERUZBVUxUX0ZFVENIX1BPTElDWTtcbiAgICB2YXIgcmVuZGVyUG9saWN5ID0gbWF5YmVSZW5kZXJQb2xpY3kgIT09IG51bGwgJiYgbWF5YmVSZW5kZXJQb2xpY3kgIT09IHZvaWQgMCA/IG1heWJlUmVuZGVyUG9saWN5IDogZW52aXJvbm1lbnQuVU5TVEFCTEVfZ2V0RGVmYXVsdFJlbmRlclBvbGljeSgpOyAvLyAxLiBDaGVjayBpZiB0aGVyZSdzIGEgY2FjaGVkIHZhbHVlIGZvciB0aGlzIG9wZXJhdGlvbiwgYW5kIHJldXNlIGl0IGlmXG4gICAgLy8gaXQncyBhdmFpbGFibGVcblxuICAgIHZhciBjYWNoZUVudHJ5ID0gdGhpcy5fY2FjaGUuZ2V0KGNhY2hlSWRlbnRpZmllcik7XG5cbiAgICB2YXIgdGVtcG9yYXJ5UmV0YWluRGlzcG9zYWJsZSA9IG51bGw7XG5cbiAgICBpZiAoY2FjaGVFbnRyeSA9PSBudWxsKSB7XG4gICAgICAvLyAyLiBJZiBhIGNhY2hlZCB2YWx1ZSBpc24ndCBhdmFpbGFibGUsIHRyeSBmZXRjaGluZyB0aGUgb3BlcmF0aW9uLlxuICAgICAgLy8gX2ZldGNoQW5kU2F2ZVF1ZXJ5IHdpbGwgdXBkYXRlIHRoZSBjYWNoZSB3aXRoIGVpdGhlciBhIFByb21pc2Ugb3JcbiAgICAgIC8vIGFuIEVycm9yIHRvIHRocm93LCBvciBhIFF1ZXJ5UmVzdWx0IHRvIHJldHVybi5cbiAgICAgIGNhY2hlRW50cnkgPSB0aGlzLl9mZXRjaEFuZFNhdmVRdWVyeShjYWNoZUlkZW50aWZpZXIsIG9wZXJhdGlvbiwgZmV0Y2hPYnNlcnZhYmxlLCBmZXRjaFBvbGljeSwgcmVuZGVyUG9saWN5LCBwcm9maWxlckNvbnRleHQsICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCBvYnNlcnZlciksIHt9LCB7XG4gICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZShzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAvLyA0LiBJZiB0aGUgcmVxdWVzdCBpcyBjYW5jZWxsZWQsIG1ha2Ugc3VyZSB0byBkaXNwb3NlXG4gICAgICAgICAgLy8gb2YgdGhlIHRlbXBvcmFyeSByZXRhaW47IHRoaXMgd2lsbCBlbnN1cmUgdGhhdCBhIHByb21pc2VcbiAgICAgICAgICAvLyBkb2Vzbid0IHJlbWFpbiB1bm5lY2Vzc2FyaWx5IGNhY2hlZCB1bnRpbCB0aGUgdGVtcG9yYXJ5IHJldGFpblxuICAgICAgICAgIC8vIGV4cGlyZXMuIE5vdCBjbGVhcmluZyB0aGUgdGVtcG9yYXJ5IHJldGFpbiBtaWdodCBjYXVzZSB0aGVcbiAgICAgICAgICAvLyBxdWVyeSB0byBpbmNvcnJlY3RseSByZS1zdXNwZW5kLlxuICAgICAgICAgIGlmICh0ZW1wb3JhcnlSZXRhaW5EaXNwb3NhYmxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRlbXBvcmFyeVJldGFpbkRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBvYnNlcnZlclVuc3Vic2NyaWJlID0gb2JzZXJ2ZXIgPT09IG51bGwgfHwgb2JzZXJ2ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9ic2VydmVyLnVuc3Vic2NyaWJlO1xuICAgICAgICAgIG9ic2VydmVyVW5zdWJzY3JpYmUgJiYgb2JzZXJ2ZXJVbnN1YnNjcmliZShzdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfSAvLyAzLiBUZW1wb3JhcmlseSByZXRhaW4gaGVyZSBpbiByZW5kZXIgcGhhc2UuIFdoZW4gdGhlIGNvbXBvbmVudCByZWFkaW5nXG4gICAgLy8gdGhlIG9wZXJhdGlvbiBpcyBjb21taXR0ZWQsIHdlIHdpbGwgdHJhbnNmZXIgb3duZXJzaGlwIG9mIGRhdGEgcmV0ZW50aW9uXG4gICAgLy8gdG8gdGhlIGNvbXBvbmVudC5cbiAgICAvLyBJbiBjYXNlIHRoZSBjb21wb25lbnQgbmV2ZXIgY29tbWl0cyAobW91bnRzIG9yIHVwZGF0ZXMpIGZyb20gdGhpcyByZW5kZXIsXG4gICAgLy8gdGhpcyBkYXRhIHJldGVudGlvbiBob2xkIHdpbGwgYXV0by1yZWxlYXNlIGl0c2VsZiBhZnRlciBhIHRpbWVvdXQuXG5cblxuICAgIHRlbXBvcmFyeVJldGFpbkRpc3Bvc2FibGUgPSBjYWNoZUVudHJ5LnRlbXBvcmFyeVJldGFpbihlbnZpcm9ubWVudCk7XG4gICAgdmFyIGNhY2hlZFZhbHVlID0gY2FjaGVFbnRyeS5nZXRWYWx1ZSgpO1xuXG4gICAgaWYgKGlzUHJvbWlzZShjYWNoZWRWYWx1ZSkgfHwgY2FjaGVkVmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgdGhyb3cgY2FjaGVkVmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhY2hlZFZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgZHVyaW5nIGEgY29tcG9uZW50J3MgY29tbWl0IHBoYXNlXG4gICAqIChlLmcuIGluc2lkZSB1c2VFZmZlY3QpLCBpbiBvcmRlciB0byByZXRhaW4gdGhlIG9wZXJhdGlvbiBpbiB0aGUgUmVsYXkgc3RvcmVcbiAgICogYW5kIHRyYW5zZmVyIG93bmVyc2hpcCBvZiB0aGUgb3BlcmF0aW9uIHRvIHRoZSBjb21wb25lbnQgbGlmZWN5Y2xlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXRhaW4gPSBmdW5jdGlvbiByZXRhaW4ocXVlcnlSZXN1bHQsIHByb2ZpbGVyQ29udGV4dCkge1xuICAgIHZhciBlbnZpcm9ubWVudCA9IHRoaXMuX2Vudmlyb25tZW50O1xuICAgIHZhciBjYWNoZUlkZW50aWZpZXIgPSBxdWVyeVJlc3VsdC5jYWNoZUlkZW50aWZpZXIsXG4gICAgICAgIG9wZXJhdGlvbiA9IHF1ZXJ5UmVzdWx0Lm9wZXJhdGlvbjtcblxuICAgIHZhciBjYWNoZUVudHJ5ID0gdGhpcy5fZ2V0T3JDcmVhdGVDYWNoZUVudHJ5KGNhY2hlSWRlbnRpZmllciwgb3BlcmF0aW9uLCBxdWVyeVJlc3VsdCwgbnVsbCk7XG5cbiAgICB2YXIgZGlzcG9zYWJsZSA9IGNhY2hlRW50cnkucGVybWFuZW50UmV0YWluKGVudmlyb25tZW50KTtcblxuICAgIGVudmlyb25tZW50Ll9fbG9nKHtcbiAgICAgIG5hbWU6ICdxdWVyeXJlc291cmNlLnJldGFpbicsXG4gICAgICBwcm9maWxlckNvbnRleHQ6IHByb2ZpbGVyQ29udGV4dCxcbiAgICAgIHJlc291cmNlSUQ6IGNhY2hlRW50cnkuaWRcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBkaXNwb3NlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5URVNUU19PTkxZX19nZXRDYWNoZUVudHJ5ID0gZnVuY3Rpb24gVEVTVFNfT05MWV9fZ2V0Q2FjaGVFbnRyeShvcGVyYXRpb24sIG1heWJlRmV0Y2hQb2xpY3ksIG1heWJlUmVuZGVyUG9saWN5LCBjYWNoZUJyZWFrZXIpIHtcbiAgICB2YXIgZW52aXJvbm1lbnQgPSB0aGlzLl9lbnZpcm9ubWVudDtcbiAgICB2YXIgY2FjaGVJZGVudGlmaWVyID0gZ2V0UXVlcnlDYWNoZUlkZW50aWZpZXIoZW52aXJvbm1lbnQsIG9wZXJhdGlvbiwgbWF5YmVGZXRjaFBvbGljeSwgbWF5YmVSZW5kZXJQb2xpY3ksIGNhY2hlQnJlYWtlcik7XG4gICAgcmV0dXJuIHRoaXMuX2NhY2hlLmdldChjYWNoZUlkZW50aWZpZXIpO1xuICB9O1xuXG4gIF9wcm90by5fZ2V0T3JDcmVhdGVDYWNoZUVudHJ5ID0gZnVuY3Rpb24gX2dldE9yQ3JlYXRlQ2FjaGVFbnRyeShjYWNoZUlkZW50aWZpZXIsIG9wZXJhdGlvbiwgdmFsdWUsIG5ldHdvcmtTdWJzY3JpcHRpb24pIHtcbiAgICB2YXIgY2FjaGVFbnRyeSA9IHRoaXMuX2NhY2hlLmdldChjYWNoZUlkZW50aWZpZXIpO1xuXG4gICAgaWYgKGNhY2hlRW50cnkgPT0gbnVsbCkge1xuICAgICAgY2FjaGVFbnRyeSA9IGNyZWF0ZUNhY2hlRW50cnkoY2FjaGVJZGVudGlmaWVyLCBvcGVyYXRpb24sIHZhbHVlLCBuZXR3b3JrU3Vic2NyaXB0aW9uLCB0aGlzLl9jbGVhckNhY2hlRW50cnkpO1xuXG4gICAgICB0aGlzLl9jYWNoZS5zZXQoY2FjaGVJZGVudGlmaWVyLCBjYWNoZUVudHJ5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGVFbnRyeTtcbiAgfTtcblxuICBfcHJvdG8uX2ZldGNoQW5kU2F2ZVF1ZXJ5ID0gZnVuY3Rpb24gX2ZldGNoQW5kU2F2ZVF1ZXJ5KGNhY2hlSWRlbnRpZmllciwgb3BlcmF0aW9uLCBmZXRjaE9ic2VydmFibGUsIGZldGNoUG9saWN5LCByZW5kZXJQb2xpY3ksIHByb2ZpbGVyQ29udGV4dCwgb2JzZXJ2ZXIpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnZpcm9ubWVudCA9IHRoaXMuX2Vudmlyb25tZW50OyAvLyBOT1RFOiBSdW5uaW5nIGBjaGVja2Agd2lsbCB3cml0ZSBtaXNzaW5nIGRhdGEgdG8gdGhlIHN0b3JlIHVzaW5nIGFueVxuICAgIC8vIG1pc3NpbmcgZGF0YSBoYW5kbGVycyBzcGVjaWZpZWQgb24gdGhlIGVudmlyb25tZW50O1xuICAgIC8vIFdlIHJ1biBpdCBoZXJlIGZpcnN0IHRvIG1ha2UgdGhlIGhhbmRsZXJzIGdldCBhIGNoYW5jZSB0byBwb3B1bGF0ZVxuICAgIC8vIG1pc3NpbmcgZGF0YS5cblxuICAgIHZhciBxdWVyeUF2YWlsYWJpbGl0eSA9IGVudmlyb25tZW50LmNoZWNrKG9wZXJhdGlvbik7XG4gICAgdmFyIHF1ZXJ5U3RhdHVzID0gcXVlcnlBdmFpbGFiaWxpdHkuc3RhdHVzO1xuICAgIHZhciBoYXNGdWxsUXVlcnkgPSBxdWVyeVN0YXR1cyA9PT0gJ2F2YWlsYWJsZSc7XG4gICAgdmFyIGNhblBhcnRpYWxSZW5kZXIgPSBoYXNGdWxsUXVlcnkgfHwgcmVuZGVyUG9saWN5ID09PSAncGFydGlhbCcgJiYgcXVlcnlTdGF0dXMgIT09ICdzdGFsZSc7XG4gICAgdmFyIHNob3VsZEZldGNoO1xuICAgIHZhciBzaG91bGRBbGxvd1JlbmRlcjtcblxuICAgIHZhciByZXNvbHZlTmV0d29ya1Byb21pc2UgPSBmdW5jdGlvbiByZXNvbHZlTmV0d29ya1Byb21pc2UoKSB7fTtcblxuICAgIHN3aXRjaCAoZmV0Y2hQb2xpY3kpIHtcbiAgICAgIGNhc2UgJ3N0b3JlLW9ubHknOlxuICAgICAgICB7XG4gICAgICAgICAgc2hvdWxkRmV0Y2ggPSBmYWxzZTtcbiAgICAgICAgICBzaG91bGRBbGxvd1JlbmRlciA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAnc3RvcmUtb3ItbmV0d29yayc6XG4gICAgICAgIHtcbiAgICAgICAgICBzaG91bGRGZXRjaCA9ICFoYXNGdWxsUXVlcnk7XG4gICAgICAgICAgc2hvdWxkQWxsb3dSZW5kZXIgPSBjYW5QYXJ0aWFsUmVuZGVyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgJ3N0b3JlLWFuZC1uZXR3b3JrJzpcbiAgICAgICAge1xuICAgICAgICAgIHNob3VsZEZldGNoID0gdHJ1ZTtcbiAgICAgICAgICBzaG91bGRBbGxvd1JlbmRlciA9IGNhblBhcnRpYWxSZW5kZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAnbmV0d29yay1vbmx5JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHtcbiAgICAgICAgICBzaG91bGRGZXRjaCA9IHRydWU7XG4gICAgICAgICAgc2hvdWxkQWxsb3dSZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0gLy8gTk9URTogSWYgdGhpcyB2YWx1ZSBpcyBmYWxzZSwgd2Ugd2lsbCBjYWNoZSBhIHByb21pc2UgZm9yIHRoaXNcbiAgICAvLyBxdWVyeSwgd2hpY2ggbWVhbnMgd2Ugd2lsbCBzdXNwZW5kIGhlcmUgYXQgdGhpcyBxdWVyeSByb290LlxuICAgIC8vIElmIGl0J3MgdHJ1ZSwgd2Ugd2lsbCBjYWNoZSB0aGUgcXVlcnkgcmVzb3VyY2UgYW5kIGFsbG93IHJlbmRlcmluZyB0b1xuICAgIC8vIGNvbnRpbnVlLlxuXG5cbiAgICBpZiAoc2hvdWxkQWxsb3dSZW5kZXIpIHtcbiAgICAgIHZhciBxdWVyeVJlc3VsdCA9IGdldFF1ZXJ5UmVzdWx0KG9wZXJhdGlvbiwgY2FjaGVJZGVudGlmaWVyKTtcblxuICAgICAgdmFyIF9jYWNoZUVudHJ5ID0gY3JlYXRlQ2FjaGVFbnRyeShjYWNoZUlkZW50aWZpZXIsIG9wZXJhdGlvbiwgcXVlcnlSZXN1bHQsIG51bGwsIHRoaXMuX2NsZWFyQ2FjaGVFbnRyeSk7XG5cbiAgICAgIHRoaXMuX2NhY2hlLnNldChjYWNoZUlkZW50aWZpZXIsIF9jYWNoZUVudHJ5KTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkRmV0Y2gpIHtcbiAgICAgIHZhciBfcXVlcnlSZXN1bHQgPSBnZXRRdWVyeVJlc3VsdChvcGVyYXRpb24sIGNhY2hlSWRlbnRpZmllcik7XG5cbiAgICAgIHZhciBuZXR3b3JrU3Vic2NyaXB0aW9uO1xuICAgICAgZmV0Y2hPYnNlcnZhYmxlLnN1YnNjcmliZSh7XG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICBuZXR3b3JrU3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uO1xuXG4gICAgICAgICAgdmFyIGNhY2hlRW50cnkgPSBfdGhpczIuX2NhY2hlLmdldChjYWNoZUlkZW50aWZpZXIpO1xuXG4gICAgICAgICAgaWYgKGNhY2hlRW50cnkpIHtcbiAgICAgICAgICAgIGNhY2hlRW50cnkuc2V0TmV0d29ya1N1YnNjcmlwdGlvbihuZXR3b3JrU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgb2JzZXJ2ZXJTdGFydCA9IG9ic2VydmVyID09PSBudWxsIHx8IG9ic2VydmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYnNlcnZlci5zdGFydDtcbiAgICAgICAgICBvYnNlcnZlclN0YXJ0ICYmIG9ic2VydmVyU3RhcnQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB2YXIgc25hcHNob3QgPSBlbnZpcm9ubWVudC5sb29rdXAob3BlcmF0aW9uLmZyYWdtZW50KTtcblxuICAgICAgICAgIHZhciBjYWNoZUVudHJ5ID0gX3RoaXMyLl9nZXRPckNyZWF0ZUNhY2hlRW50cnkoY2FjaGVJZGVudGlmaWVyLCBvcGVyYXRpb24sIF9xdWVyeVJlc3VsdCwgbmV0d29ya1N1YnNjcmlwdGlvbik7XG5cbiAgICAgICAgICBjYWNoZUVudHJ5LnNldFZhbHVlKF9xdWVyeVJlc3VsdCk7XG4gICAgICAgICAgcmVzb2x2ZU5ldHdvcmtQcm9taXNlKCk7XG4gICAgICAgICAgdmFyIG9ic2VydmVyTmV4dCA9IG9ic2VydmVyID09PSBudWxsIHx8IG9ic2VydmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYnNlcnZlci5uZXh0O1xuICAgICAgICAgIG9ic2VydmVyTmV4dCAmJiBvYnNlcnZlck5leHQoc25hcHNob3QpO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoX2Vycm9yKSB7XG4gICAgICAgICAgdmFyIGNhY2hlRW50cnkgPSBfdGhpczIuX2dldE9yQ3JlYXRlQ2FjaGVFbnRyeShjYWNoZUlkZW50aWZpZXIsIG9wZXJhdGlvbiwgX2Vycm9yLCBuZXR3b3JrU3Vic2NyaXB0aW9uKTtcblxuICAgICAgICAgIGNhY2hlRW50cnkuc2V0VmFsdWUoX2Vycm9yKTtcbiAgICAgICAgICByZXNvbHZlTmV0d29ya1Byb21pc2UoKTtcbiAgICAgICAgICBuZXR3b3JrU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgICBjYWNoZUVudHJ5LnNldE5ldHdvcmtTdWJzY3JpcHRpb24obnVsbCk7XG4gICAgICAgICAgdmFyIG9ic2VydmVyRXJyb3IgPSBvYnNlcnZlciA9PT0gbnVsbCB8fCBvYnNlcnZlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JzZXJ2ZXIuZXJyb3I7XG4gICAgICAgICAgb2JzZXJ2ZXJFcnJvciAmJiBvYnNlcnZlckVycm9yKF9lcnJvcik7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICByZXNvbHZlTmV0d29ya1Byb21pc2UoKTtcbiAgICAgICAgICBuZXR3b3JrU3Vic2NyaXB0aW9uID0gbnVsbDtcblxuICAgICAgICAgIHZhciBjYWNoZUVudHJ5ID0gX3RoaXMyLl9jYWNoZS5nZXQoY2FjaGVJZGVudGlmaWVyKTtcblxuICAgICAgICAgIGlmIChjYWNoZUVudHJ5KSB7XG4gICAgICAgICAgICBjYWNoZUVudHJ5LnNldE5ldHdvcmtTdWJzY3JpcHRpb24obnVsbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG9ic2VydmVyQ29tcGxldGUgPSBvYnNlcnZlciA9PT0gbnVsbCB8fCBvYnNlcnZlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JzZXJ2ZXIuY29tcGxldGU7XG4gICAgICAgICAgb2JzZXJ2ZXJDb21wbGV0ZSAmJiBvYnNlcnZlckNvbXBsZXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHVuc3Vic2NyaWJlOiBvYnNlcnZlciA9PT0gbnVsbCB8fCBvYnNlcnZlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JzZXJ2ZXIudW5zdWJzY3JpYmVcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX2NhY2hlRW50cnkyID0gdGhpcy5fY2FjaGUuZ2V0KGNhY2hlSWRlbnRpZmllcik7XG5cbiAgICAgIGlmICghX2NhY2hlRW50cnkyKSB7XG4gICAgICAgIHZhciBuZXR3b3JrUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgcmVzb2x2ZU5ldHdvcmtQcm9taXNlID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7IC8vICRGbG93RXhwZWN0ZWRFcnJvcltwcm9wLW1pc3NpbmddIEV4cGFuZG8gdG8gYW5ub3RhdGUgUHJvbWlzZXMuXG5cbiAgICAgICAgbmV0d29ya1Byb21pc2UuZGlzcGxheU5hbWUgPSAnUmVsYXkoJyArIG9wZXJhdGlvbi5mcmFnbWVudC5ub2RlLm5hbWUgKyAnKSc7XG4gICAgICAgIF9jYWNoZUVudHJ5MiA9IGNyZWF0ZUNhY2hlRW50cnkoY2FjaGVJZGVudGlmaWVyLCBvcGVyYXRpb24sIG5ldHdvcmtQcm9taXNlLCBuZXR3b3JrU3Vic2NyaXB0aW9uLCB0aGlzLl9jbGVhckNhY2hlRW50cnkpO1xuXG4gICAgICAgIHRoaXMuX2NhY2hlLnNldChjYWNoZUlkZW50aWZpZXIsIF9jYWNoZUVudHJ5Mik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvYnNlcnZlckNvbXBsZXRlID0gb2JzZXJ2ZXIgPT09IG51bGwgfHwgb2JzZXJ2ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9ic2VydmVyLmNvbXBsZXRlO1xuICAgICAgb2JzZXJ2ZXJDb21wbGV0ZSAmJiBvYnNlcnZlckNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIGNhY2hlRW50cnkgPSB0aGlzLl9jYWNoZS5nZXQoY2FjaGVJZGVudGlmaWVyKTtcblxuICAgICEoY2FjaGVFbnRyeSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBFeHBlY3RlZCB0byBoYXZlIGNhY2hlZCBhIHJlc3VsdCB3aGVuIGF0dGVtcHRpbmcgdG8gZmV0Y2ggcXVlcnkuJyArIFwiSWYgeW91J3JlIHNlZWluZyB0aGlzLCB0aGlzIGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWxheS5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgZW52aXJvbm1lbnQuX19sb2coe1xuICAgICAgbmFtZTogJ3F1ZXJ5cmVzb3VyY2UuZmV0Y2gnLFxuICAgICAgcmVzb3VyY2VJRDogY2FjaGVFbnRyeS5pZCxcbiAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgICAgcHJvZmlsZXJDb250ZXh0OiBwcm9maWxlckNvbnRleHQsXG4gICAgICBmZXRjaFBvbGljeTogZmV0Y2hQb2xpY3ksXG4gICAgICByZW5kZXJQb2xpY3k6IHJlbmRlclBvbGljeSxcbiAgICAgIHF1ZXJ5QXZhaWxhYmlsaXR5OiBxdWVyeUF2YWlsYWJpbGl0eSxcbiAgICAgIHNob3VsZEZldGNoOiBzaG91bGRGZXRjaFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNhY2hlRW50cnk7XG4gIH07XG5cbiAgcmV0dXJuIFF1ZXJ5UmVzb3VyY2VJbXBsO1xufSgpO1xuXG5mdW5jdGlvbiBjcmVhdGVRdWVyeVJlc291cmNlKGVudmlyb25tZW50KSB7XG4gIHJldHVybiBuZXcgUXVlcnlSZXNvdXJjZUltcGwoZW52aXJvbm1lbnQpO1xufVxuXG52YXIgZGF0YVJlc291cmNlcyA9IFdFQUtNQVBfU1VQUE9SVEVEID8gbmV3IFdlYWtNYXAoKSA6IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gZ2V0UXVlcnlSZXNvdXJjZUZvckVudmlyb25tZW50KGVudmlyb25tZW50KSB7XG4gIHZhciBjYWNoZWQgPSBkYXRhUmVzb3VyY2VzLmdldChlbnZpcm9ubWVudCk7XG5cbiAgaWYgKGNhY2hlZCkge1xuICAgIHJldHVybiBjYWNoZWQ7XG4gIH1cblxuICB2YXIgbmV3RGF0YVJlc291cmNlID0gY3JlYXRlUXVlcnlSZXNvdXJjZShlbnZpcm9ubWVudCk7XG4gIGRhdGFSZXNvdXJjZXMuc2V0KGVudmlyb25tZW50LCBuZXdEYXRhUmVzb3VyY2UpO1xuICByZXR1cm4gbmV3RGF0YVJlc291cmNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlUXVlcnlSZXNvdXJjZTogY3JlYXRlUXVlcnlSZXNvdXJjZSxcbiAgZ2V0UXVlcnlSZXNvdXJjZUZvckVudmlyb25tZW50OiBnZXRRdWVyeVJlc291cmNlRm9yRW52aXJvbm1lbnQsXG4gIGdldFF1ZXJ5Q2FjaGVJZGVudGlmaWVyOiBnZXRRdWVyeUNhY2hlSWRlbnRpZmllclxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBSZWFjdFJlbGF5Q29udGV4dCA9IHJlcXVpcmUoJ3JlYWN0LXJlbGF5L1JlYWN0UmVsYXlDb250ZXh0Jyk7XG5cbnZhciB1c2VNZW1vID0gUmVhY3QudXNlTWVtbztcblxuZnVuY3Rpb24gUmVsYXlFbnZpcm9ubWVudFByb3ZpZGVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgZW52aXJvbm1lbnQgPSBwcm9wcy5lbnZpcm9ubWVudDtcbiAgdmFyIGNvbnRleHQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZW52aXJvbm1lbnQ6IGVudmlyb25tZW50XG4gICAgfTtcbiAgfSwgW2Vudmlyb25tZW50XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdFJlbGF5Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0XG4gIH0sIGNoaWxkcmVuKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheUVudmlyb25tZW50UHJvdmlkZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UmVmZXRjaE1ldGFkYXRhID0gcmVxdWlyZSgnLi9nZXRSZWZldGNoTWV0YWRhdGEnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG5mdW5jdGlvbiBnZXRQYWdpbmF0aW9uTWV0YWRhdGEoZnJhZ21lbnROb2RlLCBjb21wb25lbnREaXNwbGF5TmFtZSkge1xuICB2YXIgX2ZyYWdtZW50Tm9kZSRtZXRhZGF0LCBfZnJhZ21lbnROb2RlJG1ldGFkYXQyO1xuXG4gIHZhciBfZ2V0UmVmZXRjaE1ldGFkYXRhID0gZ2V0UmVmZXRjaE1ldGFkYXRhKGZyYWdtZW50Tm9kZSwgY29tcG9uZW50RGlzcGxheU5hbWUpLFxuICAgICAgcGFnaW5hdGlvblJlcXVlc3QgPSBfZ2V0UmVmZXRjaE1ldGFkYXRhLnJlZmV0Y2hhYmxlUmVxdWVzdCxcbiAgICAgIHJlZmV0Y2hNZXRhZGF0YSA9IF9nZXRSZWZldGNoTWV0YWRhdGEucmVmZXRjaE1ldGFkYXRhO1xuXG4gIHZhciBwYWdpbmF0aW9uTWV0YWRhdGEgPSByZWZldGNoTWV0YWRhdGEuY29ubmVjdGlvbjtcbiAgIShwYWdpbmF0aW9uTWV0YWRhdGEgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheTogZ2V0UGFnaW5hdGlvbk1ldGFkYXRhKCk6IEV4cGVjdGVkIGZyYWdtZW50IGAlc2AgdG8gaW5jbHVkZSBhICcgKyAnY29ubmVjdGlvbiB3aGVuIHVzaW5nIGAlc2AuIERpZCB5b3UgZm9yZ2V0IHRvIGFkZCBhIEBjb25uZWN0aW9uICcgKyAnZGlyZWN0aXZlIHRvIHRoZSBjb25uZWN0aW9uIGZpZWxkIGluIHRoZSBmcmFnbWVudD8nLCBjb21wb25lbnREaXNwbGF5TmFtZSwgZnJhZ21lbnROb2RlLm5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGNvbm5lY3Rpb25QYXRoSW5GcmFnbWVudERhdGEgPSBwYWdpbmF0aW9uTWV0YWRhdGEucGF0aDtcbiAgdmFyIGNvbm5lY3Rpb25NZXRhZGF0YSA9ICgoX2ZyYWdtZW50Tm9kZSRtZXRhZGF0ID0gKF9mcmFnbWVudE5vZGUkbWV0YWRhdDIgPSBmcmFnbWVudE5vZGUubWV0YWRhdGEpID09PSBudWxsIHx8IF9mcmFnbWVudE5vZGUkbWV0YWRhdDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mcmFnbWVudE5vZGUkbWV0YWRhdDIuY29ubmVjdGlvbikgIT09IG51bGwgJiYgX2ZyYWdtZW50Tm9kZSRtZXRhZGF0ICE9PSB2b2lkIDAgPyBfZnJhZ21lbnROb2RlJG1ldGFkYXQgOiBbXSlbMF07XG4gICEoY29ubmVjdGlvbk1ldGFkYXRhICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IGdldFBhZ2luYXRpb25NZXRhZGF0YSgpOiBFeHBlY3RlZCBmcmFnbWVudCBgJXNgIHRvIGluY2x1ZGUgYSAnICsgJ2Nvbm5lY3Rpb24gd2hlbiB1c2luZyBgJXNgLiBEaWQgeW91IGZvcmdldCB0byBhZGQgYSBAY29ubmVjdGlvbiAnICsgJ2RpcmVjdGl2ZSB0byB0aGUgY29ubmVjdGlvbiBmaWVsZCBpbiB0aGUgZnJhZ21lbnQ/JywgY29tcG9uZW50RGlzcGxheU5hbWUsIGZyYWdtZW50Tm9kZS5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBpZGVudGlmaWVyRmllbGQgPSByZWZldGNoTWV0YWRhdGEuaWRlbnRpZmllckZpZWxkO1xuICAhKGlkZW50aWZpZXJGaWVsZCA9PSBudWxsIHx8IHR5cGVvZiBpZGVudGlmaWVyRmllbGQgPT09ICdzdHJpbmcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBnZXRSZWZldGNoTWV0YWRhdGEoKTogRXhwZWN0ZWQgYGlkZW50aWZpZXJGaWVsZGAgdG8gYmUgYSBzdHJpbmcuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4ge1xuICAgIGNvbm5lY3Rpb25QYXRoSW5GcmFnbWVudERhdGE6IGNvbm5lY3Rpb25QYXRoSW5GcmFnbWVudERhdGEsXG4gICAgaWRlbnRpZmllckZpZWxkOiBpZGVudGlmaWVyRmllbGQsXG4gICAgcGFnaW5hdGlvblJlcXVlc3Q6IHBhZ2luYXRpb25SZXF1ZXN0LFxuICAgIHBhZ2luYXRpb25NZXRhZGF0YTogcGFnaW5hdGlvbk1ldGFkYXRhLFxuICAgIHN0cmVhbTogY29ubmVjdGlvbk1ldGFkYXRhLnN0cmVhbSA9PT0gdHJ1ZVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFBhZ2luYXRpb25NZXRhZGF0YTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbmZ1bmN0aW9uIGdldFBhZ2luYXRpb25WYXJpYWJsZXMoZGlyZWN0aW9uLCBjb3VudCwgY3Vyc29yLCBiYXNlVmFyaWFibGVzLCBleHRyYVZhcmlhYmxlcywgcGFnaW5hdGlvbk1ldGFkYXRhKSB7XG4gIHZhciBfb2JqZWN0U3ByZWFkMztcblxuICB2YXIgYmFja3dhcmRNZXRhZGF0YSA9IHBhZ2luYXRpb25NZXRhZGF0YS5iYWNrd2FyZCxcbiAgICAgIGZvcndhcmRNZXRhZGF0YSA9IHBhZ2luYXRpb25NZXRhZGF0YS5mb3J3YXJkO1xuXG4gIGlmIChkaXJlY3Rpb24gPT09ICdiYWNrd2FyZCcpIHtcbiAgICB2YXIgX29iamVjdFNwcmVhZDI7XG5cbiAgICAhKGJhY2t3YXJkTWV0YWRhdGEgIT0gbnVsbCAmJiBiYWNrd2FyZE1ldGFkYXRhLmNvdW50ICE9IG51bGwgJiYgYmFja3dhcmRNZXRhZGF0YS5jdXJzb3IgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheTogRXhwZWN0ZWQgYmFja3dhcmQgcGFnaW5hdGlvbiBtZXRhZGF0YSB0byBiZSBhdmFpbGFibGUuICcgKyBcIklmIHlvdSdyZSBzZWVpbmcgdGhpcywgdGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVsYXkuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFleHRyYVZhcmlhYmxlcy5oYXNPd25Qcm9wZXJ0eShiYWNrd2FyZE1ldGFkYXRhLmN1cnNvciksICdSZWxheTogYFVOU1RBQkxFX2V4dHJhVmFyaWFibGVzYCBwcm92aWRlZCBieSBjYWxsZXIgc2hvdWxkIG5vdCAnICsgJ2NvbnRhaW4gY3Vyc29yIHZhcmlhYmxlIGAlc2AuIFRoaXMgdmFyaWFibGUgaXMgYXV0b21hdGljYWxseSAnICsgJ2RldGVybWluZWQgYnkgUmVsYXkuJywgYmFja3dhcmRNZXRhZGF0YS5jdXJzb3IpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWV4dHJhVmFyaWFibGVzLmhhc093blByb3BlcnR5KGJhY2t3YXJkTWV0YWRhdGEuY291bnQpLCAnUmVsYXk6IGBVTlNUQUJMRV9leHRyYVZhcmlhYmxlc2AgcHJvdmlkZWQgYnkgY2FsbGVyIHNob3VsZCBub3QgJyArICdjb250YWluIGNvdW50IHZhcmlhYmxlIGAlc2AuIFRoaXMgdmFyaWFibGUgaXMgYXV0b21hdGljYWxseSAnICsgJ2RldGVybWluZWQgYnkgUmVsYXkuJywgYmFja3dhcmRNZXRhZGF0YS5jb3VudCkgOiB2b2lkIDA7IC8vICRGbG93Rml4TWVbY2Fubm90LXNwcmVhZC1pbnRlcmZhY2VdXG5cbiAgICB2YXIgX3BhZ2luYXRpb25WYXJpYWJsZXMgPSAoMCwgX29iamVjdFNwcmVhZDRbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDRbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDRbXCJkZWZhdWx0XCJdKSh7fSwgYmFzZVZhcmlhYmxlcyksIGV4dHJhVmFyaWFibGVzKSwge30sIChfb2JqZWN0U3ByZWFkMiA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9vYmplY3RTcHJlYWQyLCBiYWNrd2FyZE1ldGFkYXRhLmN1cnNvciwgY3Vyc29yKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfb2JqZWN0U3ByZWFkMiwgYmFja3dhcmRNZXRhZGF0YS5jb3VudCwgY291bnQpLCBfb2JqZWN0U3ByZWFkMikpO1xuXG4gICAgaWYgKGZvcndhcmRNZXRhZGF0YSAmJiBmb3J3YXJkTWV0YWRhdGEuY3Vyc29yKSB7XG4gICAgICBfcGFnaW5hdGlvblZhcmlhYmxlc1tmb3J3YXJkTWV0YWRhdGEuY3Vyc29yXSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGZvcndhcmRNZXRhZGF0YSAmJiBmb3J3YXJkTWV0YWRhdGEuY291bnQpIHtcbiAgICAgIF9wYWdpbmF0aW9uVmFyaWFibGVzW2ZvcndhcmRNZXRhZGF0YS5jb3VudF0gPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBfcGFnaW5hdGlvblZhcmlhYmxlcztcbiAgfVxuXG4gICEoZm9yd2FyZE1ldGFkYXRhICE9IG51bGwgJiYgZm9yd2FyZE1ldGFkYXRhLmNvdW50ICE9IG51bGwgJiYgZm9yd2FyZE1ldGFkYXRhLmN1cnNvciAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBFeHBlY3RlZCBmb3J3YXJkIHBhZ2luYXRpb24gbWV0YWRhdGEgdG8gYmUgYXZhaWxhYmxlLiAnICsgXCJJZiB5b3UncmUgc2VlaW5nIHRoaXMsIHRoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlbGF5LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWV4dHJhVmFyaWFibGVzLmhhc093blByb3BlcnR5KGZvcndhcmRNZXRhZGF0YS5jdXJzb3IpLCAnUmVsYXk6IGBVTlNUQUJMRV9leHRyYVZhcmlhYmxlc2AgcHJvdmlkZWQgYnkgY2FsbGVyIHNob3VsZCBub3QgJyArICdjb250YWluIGN1cnNvciB2YXJpYWJsZSBgJXNgLiBUaGlzIHZhcmlhYmxlIGlzIGF1dG9tYXRpY2FsbHkgJyArICdkZXRlcm1pbmVkIGJ5IFJlbGF5LicsIGZvcndhcmRNZXRhZGF0YS5jdXJzb3IpIDogdm9pZCAwO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFleHRyYVZhcmlhYmxlcy5oYXNPd25Qcm9wZXJ0eShmb3J3YXJkTWV0YWRhdGEuY291bnQpLCAnUmVsYXk6IGBVTlNUQUJMRV9leHRyYVZhcmlhYmxlc2AgcHJvdmlkZWQgYnkgY2FsbGVyIHNob3VsZCBub3QgJyArICdjb250YWluIGNvdW50IHZhcmlhYmxlIGAlc2AuIFRoaXMgdmFyaWFibGUgaXMgYXV0b21hdGljYWxseSAnICsgJ2RldGVybWluZWQgYnkgUmVsYXkuJywgZm9yd2FyZE1ldGFkYXRhLmNvdW50KSA6IHZvaWQgMDsgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtc3ByZWFkLWludGVyZmFjZV1cblxuICB2YXIgcGFnaW5hdGlvblZhcmlhYmxlcyA9ICgwLCBfb2JqZWN0U3ByZWFkNFtcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkNFtcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkNFtcImRlZmF1bHRcIl0pKHt9LCBiYXNlVmFyaWFibGVzKSwgZXh0cmFWYXJpYWJsZXMpLCB7fSwgKF9vYmplY3RTcHJlYWQzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX29iamVjdFNwcmVhZDMsIGZvcndhcmRNZXRhZGF0YS5jdXJzb3IsIGN1cnNvciksICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoX29iamVjdFNwcmVhZDMsIGZvcndhcmRNZXRhZGF0YS5jb3VudCwgY291bnQpLCBfb2JqZWN0U3ByZWFkMykpO1xuXG4gIGlmIChiYWNrd2FyZE1ldGFkYXRhICYmIGJhY2t3YXJkTWV0YWRhdGEuY3Vyc29yKSB7XG4gICAgcGFnaW5hdGlvblZhcmlhYmxlc1tiYWNrd2FyZE1ldGFkYXRhLmN1cnNvcl0gPSBudWxsO1xuICB9XG5cbiAgaWYgKGJhY2t3YXJkTWV0YWRhdGEgJiYgYmFja3dhcmRNZXRhZGF0YS5jb3VudCkge1xuICAgIHBhZ2luYXRpb25WYXJpYWJsZXNbYmFja3dhcmRNZXRhZGF0YS5jb3VudF0gPSBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHBhZ2luYXRpb25WYXJpYWJsZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UGFnaW5hdGlvblZhcmlhYmxlczsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuZnVuY3Rpb24gZ2V0UmVmZXRjaE1ldGFkYXRhKGZyYWdtZW50Tm9kZSwgY29tcG9uZW50RGlzcGxheU5hbWUpIHtcbiAgdmFyIF9mcmFnbWVudE5vZGUkbWV0YWRhdCwgX2ZyYWdtZW50Tm9kZSRtZXRhZGF0MjtcblxuICAhKCgoX2ZyYWdtZW50Tm9kZSRtZXRhZGF0ID0gZnJhZ21lbnROb2RlLm1ldGFkYXRhKSA9PT0gbnVsbCB8fCBfZnJhZ21lbnROb2RlJG1ldGFkYXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mcmFnbWVudE5vZGUkbWV0YWRhdC5wbHVyYWwpICE9PSB0cnVlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBnZXRSZWZldGNoTWV0YWRhdGEoKTogRXhwZWN0ZWQgZnJhZ21lbnQgYCVzYCBub3QgdG8gYmUgcGx1cmFsIHdoZW4gdXNpbmcgJyArICdgJXNgLiBSZW1vdmUgYEByZWxheShwbHVyYWw6IHRydWUpYCBmcm9tIGZyYWdtZW50IGAlc2AgJyArICdpbiBvcmRlciB0byB1c2UgaXQgd2l0aCBgJXNgLicsIGZyYWdtZW50Tm9kZS5uYW1lLCBjb21wb25lbnREaXNwbGF5TmFtZSwgZnJhZ21lbnROb2RlLm5hbWUsIGNvbXBvbmVudERpc3BsYXlOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciByZWZldGNoTWV0YWRhdGEgPSAoX2ZyYWdtZW50Tm9kZSRtZXRhZGF0MiA9IGZyYWdtZW50Tm9kZS5tZXRhZGF0YSkgPT09IG51bGwgfHwgX2ZyYWdtZW50Tm9kZSRtZXRhZGF0MiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZyYWdtZW50Tm9kZSRtZXRhZGF0Mi5yZWZldGNoO1xuICAhKHJlZmV0Y2hNZXRhZGF0YSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBnZXRSZWZldGNoTWV0YWRhdGEoKTogRXhwZWN0ZWQgZnJhZ21lbnQgYCVzYCB0byBiZSByZWZldGNoYWJsZSB3aGVuIHVzaW5nIGAlc2AuICcgKyAnRGlkIHlvdSBmb3JnZXQgdG8gYWRkIGEgQHJlZmV0Y2hhYmxlIGRpcmVjdGl2ZSB0byB0aGUgZnJhZ21lbnQ/JywgY29tcG9uZW50RGlzcGxheU5hbWUsIGZyYWdtZW50Tm9kZS5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7IC8vIGhhbmRsZSBib3RoIGNvbW1vbmpzIGFuZCBlcyBtb2R1bGVzXG5cbiAgdmFyIHJlZmV0Y2hhYmxlUmVxdWVzdCA9IHJlZmV0Y2hNZXRhZGF0YS5vcGVyYXRpb25bXCJkZWZhdWx0XCJdID8gcmVmZXRjaE1ldGFkYXRhLm9wZXJhdGlvbltcImRlZmF1bHRcIl0gOiByZWZldGNoTWV0YWRhdGEub3BlcmF0aW9uO1xuICB2YXIgZnJhZ21lbnRSZWZQYXRoSW5SZXNwb25zZSA9IHJlZmV0Y2hNZXRhZGF0YS5mcmFnbWVudFBhdGhJblJlc3VsdDtcbiAgISh0eXBlb2YgcmVmZXRjaGFibGVSZXF1ZXN0ICE9PSAnc3RyaW5nJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheTogZ2V0UmVmZXRjaE1ldGFkYXRhKCk6IEV4cGVjdGVkIHJlZmV0Y2ggcXVlcnkgdG8gYmUgYW4gJyArIFwib3BlcmF0aW9uIGFuZCBub3QgYSBzdHJpbmcgd2hlbiB1c2luZyBgJXNgLiBJZiB5b3UncmUgc2VlaW5nIHRoaXMsIFwiICsgJ3RoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlbGF5LicsIGNvbXBvbmVudERpc3BsYXlOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBpZGVudGlmaWVyRmllbGQgPSByZWZldGNoTWV0YWRhdGEuaWRlbnRpZmllckZpZWxkO1xuICAhKGlkZW50aWZpZXJGaWVsZCA9PSBudWxsIHx8IHR5cGVvZiBpZGVudGlmaWVyRmllbGQgPT09ICdzdHJpbmcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBnZXRSZWZldGNoTWV0YWRhdGEoKTogRXhwZWN0ZWQgYGlkZW50aWZpZXJGaWVsZGAgdG8gYmUgYSBzdHJpbmcuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4ge1xuICAgIGZyYWdtZW50UmVmUGF0aEluUmVzcG9uc2U6IGZyYWdtZW50UmVmUGF0aEluUmVzcG9uc2UsXG4gICAgaWRlbnRpZmllckZpZWxkOiBpZGVudGlmaWVyRmllbGQsXG4gICAgcmVmZXRjaGFibGVSZXF1ZXN0OiByZWZldGNoYWJsZVJlcXVlc3QsXG4gICAgcmVmZXRjaE1ldGFkYXRhOiByZWZldGNoTWV0YWRhdGFcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSZWZldGNoTWV0YWRhdGE7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlclwiKSk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuZnVuY3Rpb24gZ2V0VmFsdWVBdFBhdGgoZGF0YSwgcGF0aCkge1xuICB2YXIgcmVzdWx0ID0gZGF0YTtcblxuICB2YXIgX2l0ZXJhdG9yID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKHBhdGgpLFxuICAgICAgX3N0ZXA7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgdmFyIGtleSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICBpZiAocmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnbnVtYmVyJykge1xuICAgICAgICAhQXJyYXkuaXNBcnJheShyZXN1bHQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIGFuIGFycmF5IHdoZW4gZXh0cmFjdGluZyB2YWx1ZSBhdCBwYXRoLiAnICsgXCJJZiB5b3UncmUgc2VlaW5nIHRoaXMsIHRoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlbGF5LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgISh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXN1bHQpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBFeHBlY3RlZCBhbiBvYmplY3Qgd2hlbiBleHRyYWN0aW5nIHZhbHVlIGF0IHBhdGguICcgKyBcIklmIHlvdSdyZSBzZWVpbmcgdGhpcywgdGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVsYXkuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0W2tleV07XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfaXRlcmF0b3IuZShlcnIpO1xuICB9IGZpbmFsbHkge1xuICAgIF9pdGVyYXRvci5mKCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlQXRQYXRoOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vbG9hZFF1ZXJ5JyksXG4gICAgbG9hZFF1ZXJ5ID0gX3JlcXVpcmUubG9hZFF1ZXJ5O1xuXG5mdW5jdGlvbiBsb2FkRW50cnlQb2ludChlbnZpcm9ubWVudFByb3ZpZGVyLCBlbnRyeVBvaW50LCBlbnRyeVBvaW50UGFyYW1zKSB7XG4gIC8vIFN0YXJ0IGxvYWRpbmcgdGhlIGNvZGUgZm9yIHRoZSBlbnRyeXBvaW50XG4gIHZhciBsb2FkaW5nUHJvbWlzZSA9IG51bGw7XG5cbiAgaWYgKGVudHJ5UG9pbnQucm9vdC5nZXRNb2R1bGVJZlJlcXVpcmVkKCkgPT0gbnVsbCkge1xuICAgIGxvYWRpbmdQcm9taXNlID0gZW50cnlQb2ludC5yb290LmxvYWQoKTtcbiAgfVxuXG4gIHZhciBwcmVsb2FkUHJvcHMgPSBlbnRyeVBvaW50LmdldFByZWxvYWRQcm9wcyhlbnRyeVBvaW50UGFyYW1zKTtcbiAgdmFyIHF1ZXJpZXMgPSBwcmVsb2FkUHJvcHMucXVlcmllcyxcbiAgICAgIGVudHJ5UG9pbnRzID0gcHJlbG9hZFByb3BzLmVudHJ5UG9pbnRzLFxuICAgICAgZXh0cmFQcm9wcyA9IHByZWxvYWRQcm9wcy5leHRyYVByb3BzO1xuICB2YXIgcHJlbG9hZGVkUXVlcmllcyA9IHt9O1xuICB2YXIgcHJlbG9hZGVkRW50cnlQb2ludHMgPSB7fTtcblxuICBpZiAocXVlcmllcyAhPSBudWxsKSB7XG4gICAgdmFyIHF1ZXJpZXNQcm9wTmFtZXMgPSBPYmplY3Qua2V5cyhxdWVyaWVzKTtcbiAgICBxdWVyaWVzUHJvcE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHF1ZXJ5UHJvcE5hbWUpIHtcbiAgICAgIHZhciBfcXVlcmllcyRxdWVyeVByb3BOYW0gPSBxdWVyaWVzW3F1ZXJ5UHJvcE5hbWVdLFxuICAgICAgICAgIGVudmlyb25tZW50UHJvdmlkZXJPcHRpb25zID0gX3F1ZXJpZXMkcXVlcnlQcm9wTmFtLmVudmlyb25tZW50UHJvdmlkZXJPcHRpb25zLFxuICAgICAgICAgIG9wdGlvbnMgPSBfcXVlcmllcyRxdWVyeVByb3BOYW0ub3B0aW9ucyxcbiAgICAgICAgICBwYXJhbWV0ZXJzID0gX3F1ZXJpZXMkcXVlcnlQcm9wTmFtLnBhcmFtZXRlcnMsXG4gICAgICAgICAgdmFyaWFibGVzID0gX3F1ZXJpZXMkcXVlcnlQcm9wTmFtLnZhcmlhYmxlcztcbiAgICAgIHZhciBlbnZpcm9ubWVudCA9IGVudmlyb25tZW50UHJvdmlkZXIuZ2V0RW52aXJvbm1lbnQoZW52aXJvbm1lbnRQcm92aWRlck9wdGlvbnMpO1xuICAgICAgcHJlbG9hZGVkUXVlcmllc1txdWVyeVByb3BOYW1lXSA9IGxvYWRRdWVyeShlbnZpcm9ubWVudCwgcGFyYW1ldGVycywgdmFyaWFibGVzLCB7XG4gICAgICAgIGZldGNoUG9saWN5OiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmV0Y2hQb2xpY3ksXG4gICAgICAgIG5ldHdvcmtDYWNoZUNvbmZpZzogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm5ldHdvcmtDYWNoZUNvbmZpZyxcbiAgICAgICAgX19uYW1lRm9yV2FybmluZzogJ2xvYWRFbnRyeVBvaW50J1xuICAgICAgfSwgZW52aXJvbm1lbnRQcm92aWRlck9wdGlvbnMpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGVudHJ5UG9pbnRzICE9IG51bGwpIHtcbiAgICB2YXIgZW50cnlQb2ludFByb3BOYW1lcyA9IE9iamVjdC5rZXlzKGVudHJ5UG9pbnRzKTtcbiAgICBlbnRyeVBvaW50UHJvcE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5UG9pbnRQcm9wTmFtZSkge1xuICAgICAgdmFyIGVudHJ5UG9pbnREZXNjcmlwdGlvbiA9IGVudHJ5UG9pbnRzW2VudHJ5UG9pbnRQcm9wTmFtZV07XG5cbiAgICAgIGlmIChlbnRyeVBvaW50RGVzY3JpcHRpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXN0ZWRFbnRyeVBvaW50ID0gZW50cnlQb2ludERlc2NyaXB0aW9uLmVudHJ5UG9pbnQsXG4gICAgICAgICAgbmVzdGVkUGFyYW1zID0gZW50cnlQb2ludERlc2NyaXB0aW9uLmVudHJ5UG9pbnRQYXJhbXM7XG4gICAgICBwcmVsb2FkZWRFbnRyeVBvaW50c1tlbnRyeVBvaW50UHJvcE5hbWVdID0gbG9hZEVudHJ5UG9pbnQoZW52aXJvbm1lbnRQcm92aWRlciwgbmVzdGVkRW50cnlQb2ludCwgbmVzdGVkUGFyYW1zKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBpc0Rpc3Bvc2VkID0gZmFsc2U7XG4gIHJldHVybiB7XG4gICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIGlmIChpc0Rpc3Bvc2VkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZWxvYWRlZFF1ZXJpZXMgIT0gbnVsbCkge1xuICAgICAgICBPYmplY3QudmFsdWVzKHByZWxvYWRlZFF1ZXJpZXMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICB2YXIgaW5uZXJEaXNwb3NlID0gX3JlZi5kaXNwb3NlO1xuICAgICAgICAgIGlubmVyRGlzcG9zZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZWxvYWRlZEVudHJ5UG9pbnRzICE9IG51bGwpIHtcbiAgICAgICAgT2JqZWN0LnZhbHVlcyhwcmVsb2FkZWRFbnRyeVBvaW50cykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgICB2YXIgaW5uZXJEaXNwb3NlID0gX3JlZjIuZGlzcG9zZTtcbiAgICAgICAgICBpbm5lckRpc3Bvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlzRGlzcG9zZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgZW50cnlQb2ludHM6IHByZWxvYWRlZEVudHJ5UG9pbnRzLFxuICAgIGV4dHJhUHJvcHM6IGV4dHJhUHJvcHMgIT09IG51bGwgJiYgZXh0cmFQcm9wcyAhPT0gdm9pZCAwID8gZXh0cmFQcm9wcyA6IG51bGwsXG4gICAgZ2V0Q29tcG9uZW50OiBmdW5jdGlvbiBnZXRDb21wb25lbnQoKSB7XG4gICAgICB2YXIgY29tcG9uZW50ID0gZW50cnlQb2ludC5yb290LmdldE1vZHVsZUlmUmVxdWlyZWQoKTtcblxuICAgICAgaWYgKGNvbXBvbmVudCA9PSBudWxsKSB7XG4gICAgICAgIHZhciBfbG9hZGluZ1Byb21pc2U7XG5cbiAgICAgICAgbG9hZGluZ1Byb21pc2UgPSAoX2xvYWRpbmdQcm9taXNlID0gbG9hZGluZ1Byb21pc2UpICE9PSBudWxsICYmIF9sb2FkaW5nUHJvbWlzZSAhPT0gdm9pZCAwID8gX2xvYWRpbmdQcm9taXNlIDogZW50cnlQb2ludC5yb290LmxvYWQoKTtcbiAgICAgICAgdGhyb3cgbG9hZGluZ1Byb21pc2U7XG4gICAgICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdIC0gdHJ1c3QgbWUgRmxvdywgaXRzIGVudHJ5UG9pbnQgY29tcG9uZW50XG5cblxuICAgICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgICB9LFxuXG4gICAgLy8gJEZsb3dGaXhNZVt1bnNhZmUtZ2V0dGVycy1zZXR0ZXJzXSAtIHRoaXMgaGFzIG5vIHNpZGUgZWZmZWN0c1xuICAgIGdldCBpc0Rpc3Bvc2VkKCkge1xuICAgICAgcmV0dXJuIGlzRGlzcG9zZWQ7XG4gICAgfSxcblxuICAgIHF1ZXJpZXM6IHByZWxvYWRlZFF1ZXJpZXMsXG4gICAgcm9vdE1vZHVsZUlEOiBlbnRyeVBvaW50LnJvb3QuZ2V0TW9kdWxlSWQoKVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxvYWRFbnRyeVBvaW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBQcmVsb2FkYWJsZVF1ZXJ5UmVnaXN0cnkgPSBfcmVxdWlyZS5QcmVsb2FkYWJsZVF1ZXJ5UmVnaXN0cnksXG4gICAgUmVwbGF5U3ViamVjdCA9IF9yZXF1aXJlLlJlcGxheVN1YmplY3QsXG4gICAgY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvciA9IF9yZXF1aXJlLmNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IsXG4gICAgZ2V0UmVxdWVzdCA9IF9yZXF1aXJlLmdldFJlcXVlc3QsXG4gICAgZ2V0UmVxdWVzdElkZW50aWZpZXIgPSBfcmVxdWlyZS5nZXRSZXF1ZXN0SWRlbnRpZmllcixcbiAgICBPYnNlcnZhYmxlID0gX3JlcXVpcmUuT2JzZXJ2YWJsZSxcbiAgICBSZWxheUZlYXR1cmVGbGFncyA9IF9yZXF1aXJlLlJlbGF5RmVhdHVyZUZsYWdzLFxuICAgIGZldGNoUXVlcnlEZWR1cGVkID0gX3JlcXVpcmUuX19pbnRlcm5hbC5mZXRjaFF1ZXJ5RGVkdXBlZDtcblxudmFyIFJlbmRlckRpc3BhdGNoZXIgPSBudWxsO1xudmFyIGZldGNoS2V5ID0gMTAwMDAxO1xuXG5mdW5jdGlvbiB1c2VUcmFja0xvYWRRdWVyeUluUmVuZGVyKCkge1xuICBpZiAoUmVuZGVyRGlzcGF0Y2hlciA9PT0gbnVsbCkge1xuICAgIHZhciBfUmVhY3QkX19TRUNSRVRfSU5URVIsIF9SZWFjdCRfX1NFQ1JFVF9JTlRFUjI7XG5cbiAgICAvLyBGbG93IGRvZXMgbm90IGtub3cgb2YgUmVhY3QgaW50ZXJuYWxzIChyaWdodGx5IHNvKSwgYnV0IHdlIG5lZWQgdG9cbiAgICAvLyBlbnN1cmUgaGVyZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXNuJ3QgY2FsbGVkIGluc2lkZSByZW5kZXIuXG4gICAgUmVuZGVyRGlzcGF0Y2hlciA9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIChfUmVhY3QkX19TRUNSRVRfSU5URVIgPSBSZWFjdC5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCkgPT09IG51bGwgfHwgX1JlYWN0JF9fU0VDUkVUX0lOVEVSID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX1JlYWN0JF9fU0VDUkVUX0lOVEVSMiA9IF9SZWFjdCRfX1NFQ1JFVF9JTlRFUi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyKSA9PT0gbnVsbCB8fCBfUmVhY3QkX19TRUNSRVRfSU5URVIyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfUmVhY3QkX19TRUNSRVRfSU5URVIyLmN1cnJlbnQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbG9hZFF1ZXJ5KGVudmlyb25tZW50LCBwcmVsb2FkYWJsZVJlcXVlc3QsIHZhcmlhYmxlcywgb3B0aW9ucywgZW52aXJvbm1lbnRQcm92aWRlck9wdGlvbnMpIHtcbiAgdmFyIF9SZWFjdCRfX1NFQ1JFVF9JTlRFUjMsIF9SZWFjdCRfX1NFQ1JFVF9JTlRFUjQsIF9vcHRpb25zJF9fbmFtZUZvcldhciwgX29wdGlvbnMkZmV0Y2hQb2xpY3k7XG5cbiAgLy8gVGhpcyBjb2RlIGVuc3VyZXMgdGhhdCB3ZSBkb24ndCBjYWxsIGxvYWRRdWVyeSBkdXJpbmcgcmVuZGVyLlxuICB2YXIgQ3VycmVudERpc3BhdGNoZXIgPSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgKF9SZWFjdCRfX1NFQ1JFVF9JTlRFUjMgPSBSZWFjdC5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCkgPT09IG51bGwgfHwgX1JlYWN0JF9fU0VDUkVUX0lOVEVSMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9SZWFjdCRfX1NFQ1JFVF9JTlRFUjQgPSBfUmVhY3QkX19TRUNSRVRfSU5URVIzLlJlYWN0Q3VycmVudERpc3BhdGNoZXIpID09PSBudWxsIHx8IF9SZWFjdCRfX1NFQ1JFVF9JTlRFUjQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9SZWFjdCRfX1NFQ1JFVF9JTlRFUjQuY3VycmVudDtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhSZW5kZXJEaXNwYXRjaGVyID09IG51bGwgfHwgQ3VycmVudERpc3BhdGNoZXIgIT09IFJlbmRlckRpc3BhdGNoZXIsICdSZWxheTogYCVzYCBzaG91bGQgbm90IGJlIGNhbGxlZCBpbnNpZGUgYSBSZWFjdCByZW5kZXIgZnVuY3Rpb24uJywgKF9vcHRpb25zJF9fbmFtZUZvcldhciA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5fX25hbWVGb3JXYXJuaW5nKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRfX25hbWVGb3JXYXIgIT09IHZvaWQgMCA/IF9vcHRpb25zJF9fbmFtZUZvcldhciA6ICdsb2FkUXVlcnknKSA6IHZvaWQgMDsgLy8gRXZlcnkgdGltZSB5b3UgY2FsbCBsb2FkUXVlcnksIHdlIHdpbGwgZ2VuZXJhdGUgYSBuZXcgZmV0Y2hLZXkuXG4gIC8vIFRoaXMgd2lsbCBlbnN1cmUgdGhhdCBldmVyeSBxdWVyeSByZWZlcmVuY2UgdGhhdCBpcyBjcmVhdGVkIGFuZFxuICAvLyBwYXNzZWQgdG8gdXNlUHJlbG9hZGVkUXVlcnkgaXMgaW5kZXBlbmRlbnRseSBldmFsdWF0ZWQsXG4gIC8vIGV2ZW4gaWYgdGhleSBhcmUgZm9yIHRoZSBzYW1lIHF1ZXJ5L3ZhcmlhYmxlcy5cbiAgLy8gU3BlY2lmaWNhbGx5LCB3ZSB3YW50IHRvIGF2b2lkIGEgY2FzZSB3aGVyZSB3ZSB0cnkgdG8gcmVmZXRjaCBhXG4gIC8vIHF1ZXJ5IGJ5IGNhbGxpbmcgbG9hZFF1ZXJ5IGEgc2Vjb25kIHRpbWUsIGFuZCBoYXZlIHRoZSBTdXNwZW5zZVxuICAvLyBjYWNoZSBpbiB1c2VQcmVsb2FkZWRRdWVyeSByZXVzZSB0aGUgY2FjaGVkIHJlc3VsdCBpbnN0ZWFkIG9mXG4gIC8vIHJlLWV2YWx1YXRpbmcgdGhlIG5ldyBxdWVyeSByZWYgYW5kIHRyaWdnZXJpbmcgYSByZWZldGNoIGlmXG4gIC8vIG5lY2Vzc2FyeS5cblxuICBmZXRjaEtleSsrO1xuICB2YXIgZmV0Y2hQb2xpY3kgPSAoX29wdGlvbnMkZmV0Y2hQb2xpY3kgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmV0Y2hQb2xpY3kpICE9PSBudWxsICYmIF9vcHRpb25zJGZldGNoUG9saWN5ICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRmZXRjaFBvbGljeSA6ICdzdG9yZS1vci1uZXR3b3JrJztcbiAgdmFyIG5ldHdvcmtDYWNoZUNvbmZpZyA9ICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubmV0d29ya0NhY2hlQ29uZmlnKSwge30sIHtcbiAgICBmb3JjZTogdHJ1ZVxuICB9KTsgLy8gZXhlY3V0ZVdpdGhOZXR3b3JrU291cmNlIHdpbGwgcmV0YWluIGFuZCBleGVjdXRlIGFuIG9wZXJhdGlvblxuICAvLyBhZ2FpbnN0IHRoZSBSZWxheSBzdG9yZSwgZ2l2ZW4gYW4gT2JzZXJ2YWJsZSB0aGF0IHdvdWxkIHByb3ZpZGVcbiAgLy8gdGhlIG5ldHdvcmsgZXZlbnRzIGZvciB0aGUgb3BlcmF0aW9uLlxuXG4gIHZhciByZXRhaW5SZWZlcmVuY2U7XG4gIHZhciBkaWRFeGVjdXRlTmV0d29ya1NvdXJjZSA9IGZhbHNlO1xuXG4gIHZhciBleGVjdXRlV2l0aE5ldHdvcmtTb3VyY2UgPSBmdW5jdGlvbiBleGVjdXRlV2l0aE5ldHdvcmtTb3VyY2Uob3BlcmF0aW9uLCBuZXR3b3JrT2JzZXJ2YWJsZSkge1xuICAgIGRpZEV4ZWN1dGVOZXR3b3JrU291cmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gZW52aXJvbm1lbnQuZXhlY3V0ZVdpdGhTb3VyY2Uoe1xuICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgICBzb3VyY2U6IG5ldHdvcmtPYnNlcnZhYmxlXG4gICAgfSk7XG4gIH07IC8vIE4uQi4gRm9yIGxvYWRRdWVyeSwgd2UgdW5jb252ZW50aW9uYWxseSB3YW50IHRvIHJldHVybiBhbiBPYnNlcnZhYmxlXG4gIC8vIHRoYXQgaXNuJ3QgbGF6aWx5IGV4ZWN1dGVkLCBtZWFuaW5nIHRoYXQgd2UgZG9uJ3Qgd2FudCB0byB3YWl0XG4gIC8vIHVudGlsIHRoZSByZXR1cm5lZCBPYnNlcnZhYmxlIGlzIHN1YnNjcmliZWQgdG8gdG8gYWN0dWFsbHkgc3RhcnRcbiAgLy8gZmV0Y2hpbmcgYW5kIGV4ZWN1dGluZyBhbiBvcGVyYXRpb247IGkuZS4gd2Ugd2FudCB0byBleGVjdXRlIHRoZVxuICAvLyBvcGVyYXRpb24gZWFnZXJseSwgd2hlbiBsb2FkUXVlcnkgaXMgY2FsbGVkLlxuICAvLyBGb3IgdGhpcyByZWFzb24sIHdlIHVzZSBhbiBpbnRlcm1lZGlhdGUgZXhlY3V0aW9uU3ViamVjdCB3aGljaFxuICAvLyBhbGxvd3MgdXMgdG8gY2FwdHVyZSB0aGUgZXZlbnRzIHRoYXQgb2NjdXIgZHVyaW5nIHRoZSBlYWdlciBleGVjdXRpb25cbiAgLy8gb2YgdGhlIG9wZXJhdGlvbiwgYW5kIHRoZW4gcmVwbGF5IHRoZW0gdG8gdGhlIE9ic2VydmFibGUgd2VcbiAgLy8gdWx0aW1hdGVseSByZXR1cm4uXG5cblxuICB2YXIgZXhlY3V0aW9uU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0KCk7XG4gIHZhciByZXR1cm5lZE9ic2VydmFibGUgPSBPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgIHJldHVybiBleGVjdXRpb25TdWJqZWN0LnN1YnNjcmliZShzaW5rKTtcbiAgfSk7XG4gIHZhciB1bnN1YnNjcmliZUZyb21OZXR3b3JrUmVxdWVzdDtcbiAgdmFyIG5ldHdvcmtFcnJvciA9IG51bGw7IC8vIG1ha2VOZXR3b3JrUmVxdWVzdCB3aWxsIGltbWVkaWF0ZWx5IHN0YXJ0IGEgcmF3IG5ldHdvcmsgcmVxdWVzdCBpZlxuICAvLyBvbmUgaXNuJ3QgYWxyZWFkeSBpbiBmbGlnaHQgYW5kIHJldHVybiBhbiBPYnNlcnZhYmxlIHRoYXQgd2hlblxuICAvLyBzdWJzY3JpYmVkIHRvIHdpbGwgcmVwbGF5IHRoZSBuZXR3b3JrIGV2ZW50cyB0aGF0IGhhdmUgb2NjdXJlZCBzbyBmYXIsXG4gIC8vIGFzIHdlbGwgYXMgc3Vic2VxdWVudCBldmVudHMuXG5cbiAgdmFyIGRpZE1ha2VOZXR3b3JrUmVxdWVzdCA9IGZhbHNlO1xuXG4gIHZhciBtYWtlTmV0d29ya1JlcXVlc3QgPSBmdW5jdGlvbiBtYWtlTmV0d29ya1JlcXVlc3QocGFyYW1zKSB7XG4gICAgLy8gTi5CLiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBzeW5jaHJvbm91c2x5IG9yIG5vdCBhdCBhbGxcbiAgICAvLyBkaWRNYWtlTmV0d29ya1JlcXVlc3QgaXMgc2FmZSB0byByZWx5IG9uIGluIHRoZSByZXR1cm5lZCB2YWx1ZVxuICAgIC8vIEV2ZW4gaWYgdGhlIHJlcXVlc3QgZ2V0cyBkZWR1cGVkIGJlbG93LCB3ZSBzdGlsbCB3YW4ndCB0byByZXR1cm4gYW5cbiAgICAvLyBvYnNlcnZhYmxlIHRoYXQgcHJvdmlkZXMgdGhlIHJlcGxheWVkIG5ldHdvcmsgZXZlbnRzIGZvciB0aGUgcXVlcnksXG4gICAgLy8gc28gd2Ugc2V0IHRoaXMgdG8gdHJ1ZSBiZWZvcmUgZGVkdXBpbmcsIHRvIGd1YXJhbnRlZSB0aGF0IHRoZVxuICAgIC8vIGBzb3VyY2VgIG9ic2VydmFibGUgaXMgcmV0dXJuZWQuXG4gICAgZGlkTWFrZU5ldHdvcmtSZXF1ZXN0ID0gdHJ1ZTtcbiAgICB2YXIgb2JzZXJ2YWJsZTtcbiAgICB2YXIgc3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0KCk7XG5cbiAgICBpZiAoUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX0xPQURfUVVFUllfUkVRVUVTVF9ERURVUElORyA9PT0gdHJ1ZSkge1xuICAgICAgLy8gSGVyZSwgd2UgYXJlIGNhbGxpbmcgZmV0Y2hRdWVyeURlZHVwZWQgYXQgdGhlIG5ldHdvcmsgbGF5ZXIgbGV2ZWwsXG4gICAgICAvLyB3aGljaCBlbnN1cmVzIHRoYXQgb25seSBhIHNpbmdsZSBuZXR3b3JrIHJlcXVlc3QgaXMgYWN0aXZlIGZvciBhIGdpdmVuXG4gICAgICAvLyAoZW52aXJvbm1lbnQsIGlkZW50aWZpZXIpIHBhaXIuXG4gICAgICAvLyBTaW5jZSBuZXR3b3JrIHJlcXVlc3RzIGNhbiBiZSBzdGFydGVkIC9iZWZvcmUvIHdlIGhhdmUgdGhlIHF1ZXJ5IGFzdFxuICAgICAgLy8gbmVjZXNzYXJ5IHRvIHByb2Nlc3MgdGhlIHJlc3VsdHMsIHdlIG5lZWQgdG8gZGVkdXBlIHRoZSByYXcgcmVxdWVzdHNcbiAgICAgIC8vIHNlcGFyYXRlbHkgZnJvbSBkZWR1cGluZyB0aGUgb3BlcmF0aW9uIGV4ZWN1dGlvbjsgc3BlY2lmaWNhbGx5LFxuICAgICAgLy8gaWYgYGxvYWRRdWVyeWAgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGJlZm9yZSB0aGUgcXVlcnkgYXN0IGlzIGF2YWlsYWJsZSxcbiAgICAgIC8vIHdlIHN0aWxsIHdhbnQgdGhlIG5ldHdvcmsgcmVxdWVzdCB0byBiZSBkZWR1cGVkLlxuICAgICAgLy8gLSBJZiBhIGR1cGxpY2F0ZSBhY3RpdmUgbmV0d29yayByZXF1ZXN0IGlzIGZvdW5kLCBpdCB3aWxsIHJldHVybiBhblxuICAgICAgLy8gT2JzZXJ2YWJsZSB0aGF0IHJlcGxheXMgdGhlIGV2ZW50cyBvZiB0aGUgYWxyZWFkeSBhY3RpdmUgcmVxdWVzdC5cbiAgICAgIC8vIC0gSWYgbm8gZHVwbGljYXRlIGFjdGl2ZSBuZXR3b3JrIHJlcXVlc3QgaXMgZm91bmQsIGl0IHdpbGwgY2FsbCB0aGUgZmV0Y2hGblxuICAgICAgLy8gdG8gc3RhcnQgdGhlIHJlcXVlc3QsIGFuZCByZXR1cm4gYW4gT2JzZXJ2YWJsZSB0aGF0IHdpbGwgcmVwbGF5XG4gICAgICAvLyB0aGUgZXZlbnRzIGZyb20gdGhlIG5ldHdvcmsgcmVxdWVzdC5cbiAgICAgIC8vIFdlIHByb3ZpZGUgYW4gZXh0cmEga2V5IHRvIHRoZSBpZGVudGlmaWVyIHRvIGRpc3Rpbmd1aXNoIGRlZHVwaW5nXG4gICAgICAvLyBvZiByYXcgbmV0d29yayByZXF1ZXN0cyB2cyBkZWR1cGluZyBvZiBvcGVyYXRpb24gZXhlY3V0aW9ucy5cbiAgICAgIHZhciBpZGVudGlmaWVyID0gJ3Jhdy1uZXR3b3JrLXJlcXVlc3QtJyArIGdldFJlcXVlc3RJZGVudGlmaWVyKHBhcmFtcywgdmFyaWFibGVzKTtcbiAgICAgIG9ic2VydmFibGUgPSBmZXRjaFF1ZXJ5RGVkdXBlZChlbnZpcm9ubWVudCwgaWRlbnRpZmllciwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV0d29yayA9IGVudmlyb25tZW50LmdldE5ldHdvcmsoKTtcbiAgICAgICAgcmV0dXJuIG5ldHdvcmsuZXhlY3V0ZShwYXJhbXMsIHZhcmlhYmxlcywgbmV0d29ya0NhY2hlQ29uZmlnKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV0d29yayA9IGVudmlyb25tZW50LmdldE5ldHdvcmsoKTtcbiAgICAgIG9ic2VydmFibGUgPSBuZXR3b3JrLmV4ZWN1dGUocGFyYW1zLCB2YXJpYWJsZXMsIG5ldHdvcmtDYWNoZUNvbmZpZyk7XG4gICAgfVxuXG4gICAgdmFyIF9vYnNlcnZhYmxlJHN1YnNjcmliZSA9IG9ic2VydmFibGUuc3Vic2NyaWJlKHtcbiAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihlcnIpIHtcbiAgICAgICAgbmV0d29ya0Vycm9yID0gZXJyO1xuICAgICAgICBzdWJqZWN0LmVycm9yKGVycik7XG4gICAgICB9LFxuICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dChkYXRhKSB7XG4gICAgICAgIHN1YmplY3QubmV4dChkYXRhKTtcbiAgICAgIH0sXG4gICAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIHN1YmplY3QuY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBfb2JzZXJ2YWJsZSRzdWJzY3JpYmUudW5zdWJzY3JpYmU7XG5cbiAgICB1bnN1YnNjcmliZUZyb21OZXR3b3JrUmVxdWVzdCA9IHVuc3Vic2NyaWJlO1xuICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgICAgdmFyIHN1YmplY3RTdWJzY3JpcHRpb24gPSBzdWJqZWN0LnN1YnNjcmliZShzaW5rKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN1YmplY3RTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdW5zdWJzY3JpYmVGcm9tTmV0d29ya1JlcXVlc3QoKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHVuc3Vic2NyaWJlRnJvbUV4ZWN1dGlvbjtcblxuICB2YXIgZXhlY3V0ZURlZHVwZWQgPSBmdW5jdGlvbiBleGVjdXRlRGVkdXBlZChvcGVyYXRpb24sIGZldGNoRm4pIHtcbiAgICBpZiAoUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX0xPQURfUVVFUllfUkVRVUVTVF9ERURVUElORyA9PT0gdHJ1ZSkge1xuICAgICAgLy8gTi5CLiBhdCB0aGlzIHBvaW50LCBpZiB3ZSdyZSBjYWxsaW5nIGV4ZWN1dGUgd2l0aCBhIHF1ZXJ5IGFzdCAoT3BlcmF0aW9uRGVzY3JpcHRvciksXG4gICAgICAvLyB3ZSBhcmUgZ3VhcmFudGVlZCB0byBoYXZlIHN0YXJ0ZWQgYSBuZXR3b3JrIHJlcXVlc3QuIFdlIHNldCB0aGlzIHRvXG4gICAgICAvLyB0cnVlIGhlcmUgYXMgd2VsbCBzaW5jZSBgbWFrZU5ldHdvcmtSZXF1ZXN0YCBtaWdodCBnZXQgc2tpcHBlZCBpbiB0aGUgY2FzZVxuICAgICAgLy8gd2hlcmUgdGhlIHF1ZXJ5IGFzdCBpcyBhbHJlYWR5IGF2YWlsYWJsZSBhbmQgdGhlIHF1ZXJ5IGV4ZWN1dGlvbnMgZ2V0IGRlZHVwZWQuXG4gICAgICAvLyBFdmVuIGlmIHRoZSBleGVjdXRpb24gZ2V0cyBkZWR1cGVkIGJlbG93LCB3ZSBzdGlsbCB3YW4ndCB0byByZXR1cm5cbiAgICAgIC8vIGFuIG9ic2VydmFibGUgdGhhdCBwcm92aWRlcyB0aGUgcmVwbGF5ZWQgbmV0d29yayBldmVudHMgZm9yIHRoZSBxdWVyeSxcbiAgICAgIC8vIHNvIHdlIHNldCB0aGlzIHRvIHRydWUgYmVmb3JlIGRlZHVwaW5nLCB0byBndWFyYW50ZWUgdGhhdCB0aGUgYHNvdXJjZWBcbiAgICAgIC8vIG9ic2VydmFibGUgaXMgcmV0dXJuZWQuXG4gICAgICBkaWRNYWtlTmV0d29ya1JlcXVlc3QgPSB0cnVlO1xuICAgIH0gLy8gSGVyZSwgd2UgYXJlIGNhbGxpbmcgZmV0Y2hRdWVyeURlZHVwZWQsIHdoaWNoIGVuc3VyZXMgdGhhdCBvbmx5XG4gICAgLy8gYSBzaW5nbGUgb3BlcmF0aW9uIGlzIGFjdGl2ZSBmb3IgYSBnaXZlbiAoZW52aXJvbm1lbnQsIGlkZW50aWZpZXIpIHBhaXIsXG4gICAgLy8gYW5kIGFsc28gdHJhY2tzIHRoZSBhY3RpdmUgc3RhdGUgb2YgdGhlIG9wZXJhdGlvbiwgd2hpY2ggaXMgbmVjZXNzYXJ5XG4gICAgLy8gZm9yIG91ciBTdXNwZW5zZSBpbmZyYSB0byBsYXRlciBiZSBhYmxlIHRvIHN1c3BlbmQgKG9yIG5vdCkgb25cbiAgICAvLyBhY3RpdmUgb3BlcmF0aW9ucy4gRXZlbiB0aG91Z2ggd2UgYWxyZWFkeSBkZWR1cGUgcmF3IG5ldHdvcmsgcmVxdWVzdHMsXG4gICAgLy8gd2UgYWxzbyBuZWVkIHRvIGRlZHVwZSBhbmQga2VlcCB0cmFjayBvcGVyYXRpb24gZXhlY3V0aW9uIGZvciBvdXIgU3VzcGVuc2VcbiAgICAvLyBpbmZyYSwgYW5kIHdlIGFsc28gd2FudCB0byBhdm9pZCBwcm9jZXNzaW5nIHJlc3BvbnNlcyBtb3JlIHRoYW4gb25jZSwgZm9yXG4gICAgLy8gdGhlIGNhc2VzIHdoZXJlIGBsb2FkUXVlcnlgIG1pZ2h0IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBhZnRlciB0aGUgcXVlcnkgYXN0XG4gICAgLy8gaXMgYXZhaWxhYmxlLlxuICAgIC8vIC0gSWYgYSBkdXBsaWNhdGUgYWN0aXZlIG9wZXJhdGlvbiBpcyBmb3VuZCwgaXQgd2lsbCByZXR1cm4gYW5cbiAgICAvLyBPYnNlcnZhYmxlIHRoYXQgcmVwbGF5cyB0aGUgZXZlbnRzIG9mIHRoZSBhbHJlYWR5IGFjdGl2ZSBvcGVyYXRpb24uXG4gICAgLy8gLSBJZiBubyBkdXBsaWNhdGUgYWN0aXZlIG9wZXJhdGlvbiBpcyBmb3VuZCwgaXQgd2lsbCBjYWxsIHRoZSBmZXRjaEZuXG4gICAgLy8gdG8gZXhlY3V0ZSB0aGUgb3BlcmF0aW9uLCBhbmQgcmV0dXJuIGFuIE9ic2VydmFibGUgdGhhdCB3aWxsIHByb3ZpZGVcbiAgICAvLyB0aGUgZXZlbnRzIGZvciBleGVjdXRpbmcgdGhlIG9wZXJhdGlvbi5cblxuXG4gICAgdmFyIF9mZXRjaFF1ZXJ5RGVkdXBlZCRzdSA9IGZldGNoUXVlcnlEZWR1cGVkKGVudmlyb25tZW50LCBvcGVyYXRpb24ucmVxdWVzdC5pZGVudGlmaWVyLCBmZXRjaEZuKS5zdWJzY3JpYmUoe1xuICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKGVycikge1xuICAgICAgICBleGVjdXRpb25TdWJqZWN0LmVycm9yKGVycik7XG4gICAgICB9LFxuICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dChkYXRhKSB7XG4gICAgICAgIGV4ZWN1dGlvblN1YmplY3QubmV4dChkYXRhKTtcbiAgICAgIH0sXG4gICAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIGV4ZWN1dGlvblN1YmplY3QuY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHVuc3Vic2NyaWJlRnJvbUV4ZWN1dGlvbiA9IF9mZXRjaFF1ZXJ5RGVkdXBlZCRzdS51bnN1YnNjcmliZTtcbiAgfTtcblxuICB2YXIgY2hlY2tBdmFpbGFiaWxpdHlBbmRFeGVjdXRlID0gZnVuY3Rpb24gY2hlY2tBdmFpbGFiaWxpdHlBbmRFeGVjdXRlKGNvbmNyZXRlUmVxdWVzdCkge1xuICAgIHZhciBvcGVyYXRpb24gPSBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yKGNvbmNyZXRlUmVxdWVzdCwgdmFyaWFibGVzLCBuZXR3b3JrQ2FjaGVDb25maWcpO1xuICAgIHJldGFpblJlZmVyZW5jZSA9IGVudmlyb25tZW50LnJldGFpbihvcGVyYXRpb24pO1xuXG4gICAgaWYgKGZldGNoUG9saWN5ID09PSAnc3RvcmUtb25seScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIE4uQi4gSWYgdGhlIGZldGNoIHBvbGljeSBhbGxvd3MgZnVsZmlsbG1lbnQgZnJvbSB0aGUgc3RvcmUgYnV0IHRoZVxuICAgIC8vIGVudmlyb25tZW50IGFscmVhZHkgaGFzIHRoZSBkYXRhIGZvciB0aGF0IG9wZXJhdGlvbiBjYWNoZWQgaW4gdGhlIHN0b3JlLFxuICAgIC8vIHRoZW4gd2UgZG8gbm90aGluZy5cblxuXG4gICAgdmFyIHNob3VsZEZldGNoID0gZmV0Y2hQb2xpY3kgIT09ICdzdG9yZS1vci1uZXR3b3JrJyB8fCBlbnZpcm9ubWVudC5jaGVjayhvcGVyYXRpb24pLnN0YXR1cyAhPT0gJ2F2YWlsYWJsZSc7XG5cbiAgICBpZiAoc2hvdWxkRmV0Y2gpIHtcbiAgICAgIGV4ZWN1dGVEZWR1cGVkKG9wZXJhdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBOLkIuIFNpbmNlIHdlIGhhdmUgdGhlIG9wZXJhdGlvbiBzeW5jaHJvbm91c2x5IGF2YWlsYWJsZSBoZXJlLFxuICAgICAgICAvLyB3ZSBjYW4gaW1tZWRpYXRlbHkgZmV0Y2ggYW5kIGV4ZWN1dGUgdGhlIG9wZXJhdGlvbi5cbiAgICAgICAgdmFyIG5ldHdvcmtPYnNlcnZhYmxlID0gbWFrZU5ldHdvcmtSZXF1ZXN0KGNvbmNyZXRlUmVxdWVzdC5wYXJhbXMpO1xuICAgICAgICB2YXIgZXhlY3V0ZU9ic2VydmFibGUgPSBleGVjdXRlV2l0aE5ldHdvcmtTb3VyY2Uob3BlcmF0aW9uLCBuZXR3b3JrT2JzZXJ2YWJsZSk7XG4gICAgICAgIHJldHVybiBleGVjdXRlT2JzZXJ2YWJsZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcGFyYW1zO1xuICB2YXIgY2FuY2VsT25Mb2FkQ2FsbGJhY2s7XG4gIHZhciBxdWVyeUlkO1xuXG4gIGlmIChwcmVsb2FkYWJsZVJlcXVlc3Qua2luZCA9PT0gJ1ByZWxvYWRhYmxlQ29uY3JldGVSZXF1ZXN0Jykge1xuICAgIHZhciBwcmVsb2FkYWJsZUNvbmNyZXRlUmVxdWVzdCA9IHByZWxvYWRhYmxlUmVxdWVzdDtcbiAgICBwYXJhbXMgPSBwcmVsb2FkYWJsZUNvbmNyZXRlUmVxdWVzdC5wYXJhbXM7XG4gICAgdmFyIF9wYXJhbXMgPSBwYXJhbXM7XG4gICAgcXVlcnlJZCA9IF9wYXJhbXMuaWQ7XG4gICAgIShxdWVyeUlkICE9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBgbG9hZFF1ZXJ5YCByZXF1aXJlcyB0aGF0IHByZWxvYWRhYmxlIHF1ZXJ5IGAlc2AgaGFzIGEgcGVyc2lzdGVkIHF1ZXJ5IGlkJywgcGFyYW1zLm5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBfbW9kdWxlID0gUHJlbG9hZGFibGVRdWVyeVJlZ2lzdHJ5LmdldChxdWVyeUlkKTtcblxuICAgIGlmIChfbW9kdWxlICE9IG51bGwpIHtcbiAgICAgIGNoZWNrQXZhaWxhYmlsaXR5QW5kRXhlY3V0ZShfbW9kdWxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdGhlIG1vZHVsZSBpc24ndCBzeW5jaHJvbm91c2x5IGF2YWlsYWJsZSwgd2UgbGF1bmNoIHRoZVxuICAgICAgLy8gbmV0d29yayByZXF1ZXN0IGltbWVkaWF0ZWx5IGlmIHRoZSBmZXRjaFBvbGljeSBtaWdodCBwcm9kdWNlXG4gICAgICAvLyBhIG5ldHdvcmsgZmV0Y2gsIHJlZ2FyZGxlc3Mgb2YgdGhlIHN0YXRlIG9mIHRoZSBzdG9yZSBjYWNoZS4gV2VcbiAgICAgIC8vIGRvIHRoaXMgYmVjYXVzZSB3ZSBjYW4ndCBjaGVjayBpZiBhIHF1ZXJ5IGlzIGNhY2hlZCB3aXRob3V0IHRoZVxuICAgICAgLy8gYXN0LCBhbmQgd2Uga25vdyB0aGF0IGlmIHdlIGRvbid0IGhhdmUgdGhlIHF1ZXJ5IGFzdFxuICAgICAgLy8gYXZhaWxhYmxlLCB0aGVuIHRoaXMgcXVlcnkgY291bGQndmUgbmV2ZXIgYmVlbiB3cml0dGVuIHRvIHRoZVxuICAgICAgLy8gc3RvcmUgaW4gdGhlIGZpcnN0IHBsYWNlLCBzbyBpdCBjb3VsZG4ndCBoYXZlIGJlZW4gY2FjaGVkLlxuICAgICAgdmFyIG5ldHdvcmtPYnNlcnZhYmxlID0gZmV0Y2hQb2xpY3kgPT09ICdzdG9yZS1vbmx5JyA/IG51bGwgOiBtYWtlTmV0d29ya1JlcXVlc3QocGFyYW1zKTtcblxuICAgICAgdmFyIF9QcmVsb2FkYWJsZVF1ZXJ5UmVnaSA9IFByZWxvYWRhYmxlUXVlcnlSZWdpc3RyeS5vbkxvYWQoIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdXG4gICAgICBxdWVyeUlkLCBmdW5jdGlvbiAocHJlbG9hZGVkTW9kdWxlKSB7XG4gICAgICAgIGNhbmNlbE9uTG9hZENhbGxiYWNrKCk7XG4gICAgICAgIHZhciBvcGVyYXRpb24gPSBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yKHByZWxvYWRlZE1vZHVsZSwgdmFyaWFibGVzLCBuZXR3b3JrQ2FjaGVDb25maWcpO1xuICAgICAgICByZXRhaW5SZWZlcmVuY2UgPSBlbnZpcm9ubWVudC5yZXRhaW4ob3BlcmF0aW9uKTtcblxuICAgICAgICBpZiAobmV0d29ya09ic2VydmFibGUgIT0gbnVsbCkge1xuICAgICAgICAgIGV4ZWN1dGVEZWR1cGVkKG9wZXJhdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGV4ZWN1dGVXaXRoTmV0d29ya1NvdXJjZShvcGVyYXRpb24sIG5ldHdvcmtPYnNlcnZhYmxlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNhbmNlbE9uTG9hZENhbGxiYWNrID0gX1ByZWxvYWRhYmxlUXVlcnlSZWdpLmRpc3Bvc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBncmFwaFFsVGFnZ2VkTm9kZSA9IHByZWxvYWRhYmxlUmVxdWVzdDtcbiAgICB2YXIgcmVxdWVzdCA9IGdldFJlcXVlc3QoZ3JhcGhRbFRhZ2dlZE5vZGUpO1xuICAgIHBhcmFtcyA9IHJlcXVlc3QucGFyYW1zO1xuICAgIHF1ZXJ5SWQgPSBwYXJhbXMuY2FjaGVJRCAhPSBudWxsID8gcGFyYW1zLmNhY2hlSUQgOiBwYXJhbXMuaWQ7XG4gICAgY2hlY2tBdmFpbGFiaWxpdHlBbmRFeGVjdXRlKHJlcXVlc3QpO1xuICB9XG5cbiAgdmFyIGlzRGlzcG9zZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHtcbiAgICBraW5kOiAnUHJlbG9hZGVkUXVlcnknLFxuICAgIGVudmlyb25tZW50OiBlbnZpcm9ubWVudCxcbiAgICBlbnZpcm9ubWVudFByb3ZpZGVyT3B0aW9uczogZW52aXJvbm1lbnRQcm92aWRlck9wdGlvbnMsXG4gICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIGlmIChpc0Rpc3Bvc2VkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpZEV4ZWN1dGVOZXR3b3JrU291cmNlKSB7XG4gICAgICAgIHVuc3Vic2NyaWJlRnJvbUV4ZWN1dGlvbiAmJiB1bnN1YnNjcmliZUZyb21FeGVjdXRpb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVuc3Vic2NyaWJlRnJvbU5ldHdvcmtSZXF1ZXN0ICYmIHVuc3Vic2NyaWJlRnJvbU5ldHdvcmtSZXF1ZXN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldGFpblJlZmVyZW5jZSAmJiByZXRhaW5SZWZlcmVuY2UuZGlzcG9zZSgpO1xuICAgICAgY2FuY2VsT25Mb2FkQ2FsbGJhY2sgJiYgY2FuY2VsT25Mb2FkQ2FsbGJhY2soKTtcbiAgICAgIGlzRGlzcG9zZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgZmV0Y2hLZXk6IGZldGNoS2V5LFxuICAgIGlkOiBxdWVyeUlkLFxuXG4gICAgLy8gJEZsb3dGaXhNZVt1bnNhZmUtZ2V0dGVycy1zZXR0ZXJzXSAtIHRoaXMgaGFzIG5vIHNpZGUgZWZmZWN0c1xuICAgIGdldCBpc0Rpc3Bvc2VkKCkge1xuICAgICAgcmV0dXJuIGlzRGlzcG9zZWQ7XG4gICAgfSxcblxuICAgIC8vICRGbG93Rml4TWVbdW5zYWZlLWdldHRlcnMtc2V0dGVyc10gLSB0aGlzIGhhcyBubyBzaWRlIGVmZmVjdHNcbiAgICBnZXQgbmV0d29ya0Vycm9yKCkge1xuICAgICAgcmV0dXJuIG5ldHdvcmtFcnJvcjtcbiAgICB9LFxuXG4gICAgbmFtZTogcGFyYW1zLm5hbWUsXG4gICAgbmV0d29ya0NhY2hlQ29uZmlnOiBuZXR3b3JrQ2FjaGVDb25maWcsXG4gICAgZmV0Y2hQb2xpY3k6IGZldGNoUG9saWN5LFxuICAgIHNvdXJjZTogZGlkTWFrZU5ldHdvcmtSZXF1ZXN0ID8gcmV0dXJuZWRPYnNlcnZhYmxlIDogdW5kZWZpbmVkLFxuICAgIHZhcmlhYmxlczogdmFyaWFibGVzXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBsb2FkUXVlcnk6IGxvYWRRdWVyeSxcbiAgdXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlcjogdXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlclxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyXCIpKTtcblxudmFyIGxvYWRFbnRyeVBvaW50ID0gcmVxdWlyZSgnLi9sb2FkRW50cnlQb2ludCcpO1xuXG52YXIgdXNlSXNNb3VudGVkUmVmID0gcmVxdWlyZSgnLi91c2VJc01vdW50ZWRSZWYnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9sb2FkUXVlcnknKSxcbiAgICB1c2VUcmFja0xvYWRRdWVyeUluUmVuZGVyID0gX3JlcXVpcmUudXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlcjtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdXNlQ2FsbGJhY2sgPSBfcmVxdWlyZTIudXNlQ2FsbGJhY2ssXG4gICAgdXNlRWZmZWN0ID0gX3JlcXVpcmUyLnVzZUVmZmVjdCxcbiAgICB1c2VSZWYgPSBfcmVxdWlyZTIudXNlUmVmLFxuICAgIHVzZVN0YXRlID0gX3JlcXVpcmUyLnVzZVN0YXRlO1xuXG52YXIgaW5pdGlhbE51bGxFbnRyeVBvaW50UmVmZXJlbmNlU3RhdGUgPSB7XG4gIGtpbmQ6ICdOdWxsRW50cnlQb2ludFJlZmVyZW5jZSdcbn07XG5cbmZ1bmN0aW9uIHVzZUxvYWRFbnRyeVBvaW50KGVudmlyb25tZW50UHJvdmlkZXIsIGVudHJ5UG9pbnQsIG9wdGlvbnMpIHtcbiAgdmFyIF9vcHRpb25zJFRFU1RfT05MWV9faSwgX29wdGlvbnMkVEVTVF9PTkxZX19pMiwgX29wdGlvbnMkVEVTVF9PTkxZX19pMywgX29wdGlvbnMkVEVTVF9PTkxZX19pNDtcblxuICAvKipcbiAgICogV2Ugd2FudCB0byBhbHdheXMgY2FsbCBgZW50cnlQb2ludFJlZmVyZW5jZS5kaXNwb3NlKClgIGZvciBldmVyeSBjYWxsIHRvXG4gICAqIGBzZXRFbnRyeVBvaW50UmVmZXJlbmNlKGxvYWRFbnRyeVBvaW50KC4uLikpYCBzbyB0aGF0IG5vIGxlYWtzIG9mIGRhdGEgaW4gUmVsYXlcbiAgICogc3RvcmVzIHdpbGwgb2NjdXIuXG4gICAqXG4gICAqIEhvd2V2ZXIsIGEgY2FsbCB0byBgc2V0U3RhdGUobmV3U3RhdGUpYCBpcyBub3QgYWx3YXlzIGZvbGxvd2VkIGJ5IGEgY29tbWl0IHdoZXJlXG4gICAqIHRoaXMgdmFsdWUgaXMgcmVmbGVjdGVkIGluIHRoZSBzdGF0ZS4gVGh1cywgd2UgY2Fubm90IHJlbGlhYmx5IGNsZWFuIHVwIGVhY2ggcmVmXG4gICAqIHdpdGggYHVzZUVmZmVjdCgoKSA9PiAoKSA9PiBlbnRyeVBvaW50UmVmZXJlbmNlLmRpc3Bvc2UoKSwgW2VudHJ5UG9pbnRSZWZlcmVuY2VdKWAuXG4gICAqXG4gICAqIEluc3RlYWQsIHdlIGtlZXAgdHJhY2sgb2YgZWFjaCBjYWxsIHRvIGBsb2FkRW50cnlQb2ludGAgaW4gYSByZWYuXG4gICAqIFJlbHlpbmcgb24gdGhlIGZhY3QgdGhhdCBpZiBhIHN0YXRlIGNoYW5nZSBjb21taXRzLCBubyBzdGF0ZSBjaGFuZ2VzIHRoYXQgd2VyZVxuICAgKiBpbml0aWF0ZWQgcHJpb3IgdG8gdGhlIGN1cnJlbnRseSBjb21taXR0aW5nIHN0YXRlIGNoYW5nZSB3aWxsIGV2ZXIgc3Vic2VxdWVudGx5XG4gICAqIGNvbW1pdCwgd2UgY2FuIHNhZmVseSBkaXNwb3NlIG9mIGFsbCBwcmVsb2FkZWQgZW50cnkgcG9pbnQgcmVmZXJlbmNlc1xuICAgKiBhc3NvY2lhdGVkIHdpdGggc3RhdGUgY2hhbmdlcyBpbml0aWF0ZWQgcHJpb3IgdG8gdGhlIGN1cnJlbnRseSBjb21taXR0aW5nIHN0YXRlXG4gICAqIGNoYW5nZS5cbiAgICpcbiAgICogRmluYWxseSwgd2hlbiB0aGUgaG9vayB1bm1vdW50cywgd2UgYWxzbyBkaXNwb3NlIG9mIGFsbCByZW1haW5pbmcgdW5jb21taXR0ZWRcbiAgICogZW50cnkgcG9pbnQgcmVmZXJlbmNlcy5cbiAgICovXG4gIHVzZVRyYWNrTG9hZFF1ZXJ5SW5SZW5kZXIoKTtcbiAgdmFyIGluaXRpYWxFbnRyeVBvaW50UmVmZXJlbmNlSW50ZXJuYWwgPSAoX29wdGlvbnMkVEVTVF9PTkxZX19pID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkVEVTVF9PTkxZX19pMiA9IG9wdGlvbnMuVEVTVF9PTkxZX19pbml0aWFsRW50cnlQb2ludERhdGEpID09PSBudWxsIHx8IF9vcHRpb25zJFRFU1RfT05MWV9faTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJFRFU1RfT05MWV9faTIuZW50cnlQb2ludFJlZmVyZW5jZSkgIT09IG51bGwgJiYgX29wdGlvbnMkVEVTVF9PTkxZX19pICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRURVNUX09OTFlfX2kgOiBpbml0aWFsTnVsbEVudHJ5UG9pbnRSZWZlcmVuY2VTdGF0ZTtcbiAgdmFyIGluaXRpYWxFbnRyeVBvaW50UGFyYW1zSW50ZXJuYWwgPSAoX29wdGlvbnMkVEVTVF9PTkxZX19pMyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJFRFU1RfT05MWV9faTQgPSBvcHRpb25zLlRFU1RfT05MWV9faW5pdGlhbEVudHJ5UG9pbnREYXRhKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRURVNUX09OTFlfX2k0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRURVNUX09OTFlfX2k0LmVudHJ5UG9pbnRQYXJhbXMpICE9PSBudWxsICYmIF9vcHRpb25zJFRFU1RfT05MWV9faTMgIT09IHZvaWQgMCA/IF9vcHRpb25zJFRFU1RfT05MWV9faTMgOiBudWxsO1xuICB2YXIgaXNNb3VudGVkUmVmID0gdXNlSXNNb3VudGVkUmVmKCk7XG4gIHZhciB1bmRpc3Bvc2VkRW50cnlQb2ludFJlZmVyZW5jZXNSZWYgPSB1c2VSZWYobmV3IFNldChbaW5pdGlhbEVudHJ5UG9pbnRSZWZlcmVuY2VJbnRlcm5hbF0pKTtcblxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoaW5pdGlhbEVudHJ5UG9pbnRSZWZlcmVuY2VJbnRlcm5hbCksXG4gICAgICBlbnRyeVBvaW50UmVmZXJlbmNlID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0RW50cnlQb2ludFJlZmVyZW5jZSA9IF91c2VTdGF0ZVsxXTtcblxuICB2YXIgX3VzZVN0YXRlMiA9IHVzZVN0YXRlKGluaXRpYWxFbnRyeVBvaW50UGFyYW1zSW50ZXJuYWwpLFxuICAgICAgZW50cnlQb2ludFBhcmFtcyA9IF91c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRFbnRyeVBvaW50UGFyYW1zID0gX3VzZVN0YXRlMlsxXTtcblxuICB2YXIgZGlzcG9zZUVudHJ5UG9pbnQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlzTW91bnRlZFJlZi5jdXJyZW50KSB7XG4gICAgICB2YXIgbnVsbEVudHJ5UG9pbnRSZWZlcmVuY2UgPSB7XG4gICAgICAgIGtpbmQ6ICdOdWxsRW50cnlQb2ludFJlZmVyZW5jZSdcbiAgICAgIH07XG4gICAgICB1bmRpc3Bvc2VkRW50cnlQb2ludFJlZmVyZW5jZXNSZWYuY3VycmVudC5hZGQobnVsbEVudHJ5UG9pbnRSZWZlcmVuY2UpO1xuICAgICAgc2V0RW50cnlQb2ludFJlZmVyZW5jZShudWxsRW50cnlQb2ludFJlZmVyZW5jZSk7XG4gICAgfVxuICB9LCBbc2V0RW50cnlQb2ludFJlZmVyZW5jZSwgaXNNb3VudGVkUmVmXSk7XG4gIHZhciBlbnRyeVBvaW50TG9hZGVyQ2FsbGJhY2sgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgaWYgKGlzTW91bnRlZFJlZi5jdXJyZW50KSB7XG4gICAgICB2YXIgdXBkYXRlZEVudHJ5UG9pbnRSZWZlcmVuY2UgPSBsb2FkRW50cnlQb2ludChlbnZpcm9ubWVudFByb3ZpZGVyLCBlbnRyeVBvaW50LCBwYXJhbXMpO1xuICAgICAgdW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2VzUmVmLmN1cnJlbnQuYWRkKHVwZGF0ZWRFbnRyeVBvaW50UmVmZXJlbmNlKTtcbiAgICAgIHNldEVudHJ5UG9pbnRSZWZlcmVuY2UodXBkYXRlZEVudHJ5UG9pbnRSZWZlcmVuY2UpO1xuICAgICAgc2V0RW50cnlQb2ludFBhcmFtcyhwYXJhbXMpO1xuICAgIH1cbiAgfSwgW2Vudmlyb25tZW50UHJvdmlkZXIsIGVudHJ5UG9pbnQsIHNldEVudHJ5UG9pbnRSZWZlcmVuY2UsIGlzTW91bnRlZFJlZl0pO1xuICB2YXIgbWF5YmVIaWRkZW5PckZhc3RSZWZyZXNoID0gdXNlUmVmKGZhbHNlKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gQXR0ZW1wdCB0byBkZXRlY3QgaWYgdGhlIGNvbXBvbmVudCB3YXNcbiAgICAgIC8vIGhpZGRlbiAoYnkgT2Zmc2NyZWVuIEFQSSksIG9yIGZhc3QgcmVmcmVzaCBvY2N1cmVkO1xuICAgICAgLy8gT25seSBpbiB0aGVzZSBzaXR1YXRpb25zIHdvdWxkIHRoZSBlZmZlY3QgY2xlYW51cFxuICAgICAgLy8gZm9yIFwidW5tb3VudGluZ1wiIHJ1biBtdWx0aXBsZSB0aW1lcywgc28gaWZcbiAgICAgIC8vIHdlIGFyZSBldmVyIGFibGUgdG8gcmVhZCB0aGlzIHJlZiB3aXRoIGEgdmFsdWVcbiAgICAgIC8vIG9mIHRydWUsIGl0IG1lYW5zIHRoYXQgb25lIG9mIHRoZXNlIGNhc2VzXG4gICAgICAvLyBoYXMgaGFwcGVuZWQuXG4gICAgICBtYXliZUhpZGRlbk9yRmFzdFJlZnJlc2guY3VycmVudCA9IHRydWU7XG4gICAgfTtcbiAgfSwgW10pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChtYXliZUhpZGRlbk9yRmFzdFJlZnJlc2guY3VycmVudCA9PT0gdHJ1ZSkge1xuICAgICAgLy8gVGhpcyBibG9jayBvbmx5IHJ1bnMgaWYgdGhlIGNvbXBvbmVudCBoYXMgcHJldmlvdXNseSBcInVubW91bnRlZFwiXG4gICAgICAvLyBkdWUgdG8gaXQgYmVpbmcgaGlkZGVuIGJ5IHRoZSBPZmZzY3JlZW4gQVBJLCBvciBkdXJpbmcgZmFzdCByZWZyZXNoLlxuICAgICAgLy8gQXQgdGhpcyBwb2ludCwgdGhlIGN1cnJlbnQgZW50cnlQb2ludFJlZmVyZW5jZSB3aWxsIGhhdmUgYmVlbiBkaXNwb3NlZFxuICAgICAgLy8gYnkgdGhlIHByZXZpb3VzIGNsZWFudXAsIHNvIGluc3RlYWQgb2YgYXR0ZW1wdGluZyB0b1xuICAgICAgLy8gZG8gb3VyIHJlZ3VsYXIgY29tbWl0IHNldHVwLCB3aGljaCB3b3VsZCBpbmNvcnJlY3RseSBsZWF2ZSBvdXJcbiAgICAgIC8vIGN1cnJlbnQgZW50cnlQb2ludFJlZmVyZW5jZSBkaXNwb3NlZCwgd2UgbmVlZCB0byBsb2FkIHRoZSBlbnRyeVBvaW50IGFnYWluXG4gICAgICAvLyBhbmQgZm9yY2UgYSByZS1yZW5kZXIgYnkgY2FsbGluZyBlbnRyeVBvaW50TG9hZGVyQ2FsbGJhY2sgYWdhaW4sXG4gICAgICAvLyBzbyB0aGF0IHRoZSBlbnRyeVBvaW50UmVmZXJlbmNlJ3MgcXVlcmllcyBhcmUgY29ycmVjdGx5IHJlLXJldGFpbmVkLCBhbmRcbiAgICAgIC8vIHBvdGVudGlhbGx5IHJlZmV0Y2hlZCBpZiBuZWNlc3NhcnkuXG4gICAgICBtYXliZUhpZGRlbk9yRmFzdFJlZnJlc2guY3VycmVudCA9IGZhbHNlO1xuXG4gICAgICBpZiAoZW50cnlQb2ludFJlZmVyZW5jZS5raW5kICE9PSAnTnVsbEVudHJ5UG9pbnRSZWZlcmVuY2UnICYmIGVudHJ5UG9pbnRQYXJhbXMgIT0gbnVsbCkge1xuICAgICAgICBlbnRyeVBvaW50TG9hZGVyQ2FsbGJhY2soZW50cnlQb2ludFBhcmFtcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFdoZW4gYSBuZXcgZW50cnlQb2ludFJlZmVyZW5jZSBpcyBjb21taXR0ZWQsIHdlIGl0ZXJhdGUgb3ZlciBhbGxcbiAgICAvLyBlbnRyeXBvaW50IHJlZnMgaW4gdW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2VzIGFuZCBkaXNwb3NlIGFsbCBvZlxuICAgIC8vIHRoZSByZWZzIHRoYXQgYXJlbid0IHRoZSBjdXJyZW50bHkgY29tbWl0dGVkIG9uZS4gVGhpcyBlbnN1cmVzXG4gICAgLy8gdGhhdCB3ZSBkb24ndCBsZWF2ZSBhbnkgZGFuZ2xpbmcgZW50cnlwb2ludCByZWZlcmVuY2VzIGZvciB0aGVcbiAgICAvLyBjYXNlIHRoYXQgbG9hZEVudHJ5UG9pbnQgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGJlZm9yZSBjb21taXQ7IHdoZW5cbiAgICAvLyB0aGlzIGhhcHBlbnMsIG11bHRpcGxlIHN0YXRlIHVwZGF0ZXMgd2lsbCBiZSBzY2hlZHVsZWQsIGJ1dCBvbmx5IG9uZVxuICAgIC8vIHdpbGwgY29tbWl0LCBtZWFuaW5nIHRoYXQgd2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIGFuZCBkaXNwb3NlIGFueVxuICAgIC8vIHF1ZXJ5IHJlZmVyZW5jZXMgdGhhdCBkb24ndCBlbmQgdXAgY29tbWl0dGluZy5cbiAgICAvLyAtIFdlIGFyZSByZWx5aW5nIG9uIHRoZSBmYWN0IHRoYXQgc2V0cyBpdGVyYXRlIGluIGluc2VydGlvbiBvcmRlciwgYW5kIHdlXG4gICAgLy8gY2FuIHJlbW92ZSBpdGVtcyBmcm9tIGEgc2V0IGFzIHdlIGl0ZXJhdGUgb3ZlciBpdCAoaS5lLiBubyBpdGVyYXRvclxuICAgIC8vIGludmFsaWRhdGlvbiBpc3N1ZXMuKSBUaHVzLCBpdCBpcyBzYWZlIHRvIGxvb3AgdGhyb3VnaFxuICAgIC8vIHVuZGlzcG9zZWRFbnRyeVBvaW50UmVmZXJlbmNlcyB1bnRpbCB3ZSBmaW5kIGVudHJ5UG9pbnRSZWZlcmVuY2UsIGFuZFxuICAgIC8vIHJlbW92ZSBhbmQgZGlzcG9zZSBhbGwgcHJldmlvdXMgcmVmZXJlbmNlcy5cbiAgICAvLyAtIFdlIGFyZSBndWFyYW50ZWVkIHRvIGZpbmQgZW50cnlQb2ludFJlZmVyZW5jZSBpbiB0aGUgc2V0LCBiZWNhdXNlIGlmIGFcbiAgICAvLyBzdGF0ZSBjaGFuZ2UgcmVzdWx0cyBpbiBhIGNvbW1pdCwgbm8gc3RhdGUgY2hhbmdlcyBpbml0aWF0ZWQgcHJpb3IgdG8gdGhhdFxuICAgIC8vIG9uZSB3aWxsIGJlIGNvbW1pdHRlZCwgYW5kIHdlIGFyZSBkaXNwb3NpbmcgYW5kIHJlbW92aW5nIHJlZmVyZW5jZXNcbiAgICAvLyBhc3NvY2lhdGVkIHdpdGggY29tbWl0cyB0aGF0IHdlcmUgaW5pdGlhdGVkIHByaW9yIHRvIHRoZSBjdXJyZW50bHlcbiAgICAvLyBjb21taXR0aW5nIHN0YXRlIGNoYW5nZS4gKEEgdXNlRWZmZWN0IGNhbGxiYWNrIGlzIGNhbGxlZCBkdXJpbmcgdGhlIGNvbW1pdFxuICAgIC8vIHBoYXNlLilcblxuXG4gICAgdmFyIHVuZGlzcG9zZWRFbnRyeVBvaW50UmVmZXJlbmNlcyA9IHVuZGlzcG9zZWRFbnRyeVBvaW50UmVmZXJlbmNlc1JlZi5jdXJyZW50O1xuXG4gICAgaWYgKGlzTW91bnRlZFJlZi5jdXJyZW50KSB7XG4gICAgICB2YXIgX2l0ZXJhdG9yID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKHVuZGlzcG9zZWRFbnRyeVBvaW50UmVmZXJlbmNlcyksXG4gICAgICAgICAgX3N0ZXA7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIHVuZGlzcG9zZWRFbnRyeVBvaW50UmVmZXJlbmNlID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICBpZiAodW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2UgPT09IGVudHJ5UG9pbnRSZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHVuZGlzcG9zZWRFbnRyeVBvaW50UmVmZXJlbmNlc1tcImRlbGV0ZVwiXSh1bmRpc3Bvc2VkRW50cnlQb2ludFJlZmVyZW5jZSk7XG5cbiAgICAgICAgICBpZiAodW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2Uua2luZCAhPT0gJ051bGxFbnRyeVBvaW50UmVmZXJlbmNlJykge1xuICAgICAgICAgICAgdW5kaXNwb3NlZEVudHJ5UG9pbnRSZWZlcmVuY2UuZGlzcG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IuZigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2VudHJ5UG9pbnRSZWZlcmVuY2UsIGVudHJ5UG9pbnRQYXJhbXMsIGVudHJ5UG9pbnRMb2FkZXJDYWxsYmFjaywgaXNNb3VudGVkUmVmXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRpc3Bvc2VBbGxSZW1haW5pbmdFbnRyeVBvaW50UmVmZXJlbmNlcygpIHtcbiAgICAgIC8vIHVuZGlzcG9zZWRFbnRyeVBvaW50UmVmZXJlbmNlcy5jdXJyZW50IGlzIG5ldmVyIHJlYXNzaWduZWRcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICAgIHZhciBfaXRlcmF0b3IyID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKHVuZGlzcG9zZWRFbnRyeVBvaW50UmVmZXJlbmNlc1JlZi5jdXJyZW50KSxcbiAgICAgICAgICBfc3RlcDI7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIHVuaGFuZGxlZFN0YXRlQ2hhbmdlID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKHVuaGFuZGxlZFN0YXRlQ2hhbmdlLmtpbmQgIT09ICdOdWxsRW50cnlQb2ludFJlZmVyZW5jZScpIHtcbiAgICAgICAgICAgIHVuaGFuZGxlZFN0YXRlQ2hhbmdlLmRpc3Bvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjIuZigpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFtlbnRyeVBvaW50UmVmZXJlbmNlLmtpbmQgPT09ICdOdWxsRW50cnlQb2ludFJlZmVyZW5jZScgPyBudWxsIDogZW50cnlQb2ludFJlZmVyZW5jZSwgZW50cnlQb2ludExvYWRlckNhbGxiYWNrLCBkaXNwb3NlRW50cnlQb2ludF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXNlTG9hZEVudHJ5UG9pbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHVzZUNhbGxiYWNrID0gX3JlcXVpcmUudXNlQ2FsbGJhY2ssXG4gICAgdXNlRWZmZWN0ID0gX3JlcXVpcmUudXNlRWZmZWN0LFxuICAgIHVzZVJlZiA9IF9yZXF1aXJlLnVzZVJlZjtcblxuLyoqXG4gKiBUaGlzIGhvb2sgcmV0dXJucyBhIG11dGFibGUgUmVhY3QgcmVmIHRoYXQgaG9sZHMgdGhlIHZhbHVlIG9mIHdoZXRoZXIgYVxuICogZmV0Y2ggcmVxdWVzdCBpcyBpbiBmbGlnaHQuIFRoZSByZWFzb24gdGhpcyBpcyBhIG11dGFibGUgcmVmIGluc3RlYWQgb2ZcbiAqIHN0YXRlIGlzIGJlY2F1c2Ugd2UgZG9uJ3QgYWN0dWFsbHkgd2FudCB0byB0cmlnZ2VyIGFuIHVwZGF0ZSB3aGVuIHRoaXNcbiAqIGNoYW5nZXMsIGJ1dCBpbnN0ZWFkIHN5bmNocm9ub3VzbHkga2VlcCB0cmFjayBvZiB3aGV0aGVyIHRoZSBuZXR3b3JrIHJlcXVlc3RcbiAqIGlzIGluIGZsaWdodCwgZm9yIGV4YW1wbGUgaW4gb3JkZXIgdG8gYmFpbCBvdXQgb2YgYSByZXF1ZXN0IGlmIG9uZSBpc1xuICogYWxyZWFkeSBpbiBmbGlnaHQuIElmIHRoaXMgd2FzIHN0YXRlLCBkdWUgdG8gdGhlIG5hdHVyZSBvZiBjb25jdXJyZW50XG4gKiB1cGRhdGVzLCB0aGlzIHZhbHVlIHdvdWxkbid0IGJlIGluIHN5bmMgd2l0aCB3aGVuIHRoZSByZXF1ZXN0IGlzIGFjdHVhbGx5XG4gKiBpbiBmbGlnaHQuXG4gKiBUaGUgYWRkaXRpb25hbCBmdW5jdGlvbnMgcmV0dXJuZWQgYnkgdGhpcyBIb29rIGNhbiBiZSB1c2VkIHRvIG11dGF0ZVxuICogdGhlIHJlZi5cbiAqL1xuZnVuY3Rpb24gdXNlRmV0Y2hUcmFja2luZ1JlZigpIHtcbiAgdmFyIHN1YnNjcmlwdGlvblJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIGlzRmV0Y2hpbmdSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICB2YXIgZGlzcG9zZUZldGNoID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmIChzdWJzY3JpcHRpb25SZWYuY3VycmVudCAhPSBudWxsKSB7XG4gICAgICBzdWJzY3JpcHRpb25SZWYuY3VycmVudC51bnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cblxuICAgIGlzRmV0Y2hpbmdSZWYuY3VycmVudCA9IGZhbHNlO1xuICB9LCBbXSk7XG4gIHZhciBzdGFydEZldGNoID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgIHN1YnNjcmlwdGlvblJlZi5jdXJyZW50ID0gc3Vic2NyaXB0aW9uO1xuICAgIGlzRmV0Y2hpbmdSZWYuY3VycmVudCA9IHRydWU7XG4gIH0sIFtdKTtcbiAgdmFyIGNvbXBsZXRlRmV0Y2ggPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc3Vic2NyaXB0aW9uUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIGlzRmV0Y2hpbmdSZWYuY3VycmVudCA9IGZhbHNlO1xuICB9LCBbXSk7IC8vIERpcG9zZSBvZiBvbmdvaW5nIGZldGNoIG9uIHVubW91bnRcblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwb3NlRmV0Y2g7XG4gIH0sIFtkaXNwb3NlRmV0Y2hdKTtcbiAgcmV0dXJuIHtcbiAgICBpc0ZldGNoaW5nUmVmOiBpc0ZldGNoaW5nUmVmLFxuICAgIHN0YXJ0RmV0Y2g6IHN0YXJ0RmV0Y2gsXG4gICAgZGlzcG9zZUZldGNoOiBkaXNwb3NlRmV0Y2gsXG4gICAgY29tcGxldGVGZXRjaDogY29tcGxldGVGZXRjaFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZUZldGNoVHJhY2tpbmdSZWY7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXNlRnJhZ21lbnROb2RlID0gcmVxdWlyZSgnLi91c2VGcmFnbWVudE5vZGUnKTtcblxudmFyIHVzZVN0YXRpY0ZyYWdtZW50Tm9kZVdhcm5pbmcgPSByZXF1aXJlKCcuL3VzZVN0YXRpY0ZyYWdtZW50Tm9kZVdhcm5pbmcnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9sb2FkUXVlcnknKSxcbiAgICB1c2VUcmFja0xvYWRRdWVyeUluUmVuZGVyID0gX3JlcXVpcmUudXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlcjtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdXNlRGVidWdWYWx1ZSA9IF9yZXF1aXJlMi51c2VEZWJ1Z1ZhbHVlO1xuXG52YXIgX3JlcXVpcmUzID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIGdldEZyYWdtZW50ID0gX3JlcXVpcmUzLmdldEZyYWdtZW50O1xuXG5mdW5jdGlvbiB1c2VGcmFnbWVudChmcmFnbWVudElucHV0LCBmcmFnbWVudFJlZikge1xuICAvLyBXZSBuZWVkIHRvIHVzZSB0aGlzIGhvb2sgaW4gb3JkZXIgdG8gYmUgYWJsZSB0byB0cmFjayBpZlxuICAvLyBsb2FkUXVlcnkgd2FzIGNhbGxlZCBkdXJpbmcgcmVuZGVyXG4gIHVzZVRyYWNrTG9hZFF1ZXJ5SW5SZW5kZXIoKTtcbiAgdmFyIGZyYWdtZW50Tm9kZSA9IGdldEZyYWdtZW50KGZyYWdtZW50SW5wdXQpO1xuICB1c2VTdGF0aWNGcmFnbWVudE5vZGVXYXJuaW5nKGZyYWdtZW50Tm9kZSwgJ2ZpcnN0IGFyZ3VtZW50IG9mIHVzZUZyYWdtZW50KCknKTtcblxuICB2YXIgX3VzZUZyYWdtZW50Tm9kZSA9IHVzZUZyYWdtZW50Tm9kZShmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmLCAndXNlRnJhZ21lbnQoKScpLFxuICAgICAgZGF0YSA9IF91c2VGcmFnbWVudE5vZGUuZGF0YTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgdXNlRGVidWdWYWx1ZSh7XG4gICAgICBmcmFnbWVudDogZnJhZ21lbnROb2RlLm5hbWUsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VGcmFnbWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1c2VSZWxheUVudmlyb25tZW50ID0gcmVxdWlyZSgnLi91c2VSZWxheUVudmlyb25tZW50Jyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vRnJhZ21lbnRSZXNvdXJjZScpLFxuICAgIGdldEZyYWdtZW50UmVzb3VyY2VGb3JFbnZpcm9ubWVudCA9IF9yZXF1aXJlLmdldEZyYWdtZW50UmVzb3VyY2VGb3JFbnZpcm9ubWVudDtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdXNlRWZmZWN0ID0gX3JlcXVpcmUyLnVzZUVmZmVjdCxcbiAgICB1c2VSZWYgPSBfcmVxdWlyZTIudXNlUmVmLFxuICAgIHVzZVN0YXRlID0gX3JlcXVpcmUyLnVzZVN0YXRlO1xuXG52YXIgX3JlcXVpcmUzID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIGdldEZyYWdtZW50SWRlbnRpZmllciA9IF9yZXF1aXJlMy5nZXRGcmFnbWVudElkZW50aWZpZXI7XG5cbmZ1bmN0aW9uIHVzZUZyYWdtZW50Tm9kZShmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmLCBjb21wb25lbnREaXNwbGF5TmFtZSkge1xuICB2YXIgZW52aXJvbm1lbnQgPSB1c2VSZWxheUVudmlyb25tZW50KCk7XG4gIHZhciBGcmFnbWVudFJlc291cmNlID0gZ2V0RnJhZ21lbnRSZXNvdXJjZUZvckVudmlyb25tZW50KGVudmlyb25tZW50KTtcbiAgdmFyIGlzTW91bnRlZFJlZiA9IHVzZVJlZihmYWxzZSk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKDApLFxuICAgICAgZm9yY2VVcGRhdGUgPSBfdXNlU3RhdGVbMV07XG5cbiAgdmFyIGZyYWdtZW50SWRlbnRpZmllciA9IGdldEZyYWdtZW50SWRlbnRpZmllcihmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmKTsgLy8gUmVhZCBmcmFnbWVudCBkYXRhOyB0aGlzIG1pZ2h0IHN1c3BlbmQuXG5cbiAgdmFyIGZyYWdtZW50UmVzdWx0ID0gRnJhZ21lbnRSZXNvdXJjZS5yZWFkV2l0aElkZW50aWZpZXIoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZiwgZnJhZ21lbnRJZGVudGlmaWVyLCBjb21wb25lbnREaXNwbGF5TmFtZSk7XG4gIHZhciBpc0xpc3RlbmluZ0ZvclVwZGF0ZXNSZWYgPSB1c2VSZWYodHJ1ZSk7XG5cbiAgZnVuY3Rpb24gZW5hYmxlU3RvcmVVcGRhdGVzKCkge1xuICAgIGlzTGlzdGVuaW5nRm9yVXBkYXRlc1JlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB2YXIgZGlkTWlzc1VwZGF0ZXMgPSBGcmFnbWVudFJlc291cmNlLmNoZWNrTWlzc2VkVXBkYXRlcyhmcmFnbWVudFJlc3VsdClbMF07XG5cbiAgICBpZiAoZGlkTWlzc1VwZGF0ZXMpIHtcbiAgICAgIGhhbmRsZURhdGFVcGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkaXNhYmxlU3RvcmVVcGRhdGVzKCkge1xuICAgIGlzTGlzdGVuaW5nRm9yVXBkYXRlc1JlZi5jdXJyZW50ID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVEYXRhVXBkYXRlKCkge1xuICAgIGlmIChpc01vdW50ZWRSZWYuY3VycmVudCA9PT0gZmFsc2UgfHwgaXNMaXN0ZW5pbmdGb3JVcGRhdGVzUmVmLmN1cnJlbnQgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBSZWFjdCBiYWlscyBvdXQgb24gbm9vcCBzdGF0ZSB1cGRhdGVzIGFzIGFuIG9wdGltaXphdGlvbi5cbiAgICAvLyBJZiB3ZSB3YW50IHRvIGZvcmNlIGFuIHVwZGF0ZSB2aWEgc2V0U3RhdGUsIHdlIG5lZWQgdG8gcGFzcyBhbiB2YWx1ZS5cbiAgICAvLyBUaGUgYWN0dWFsIHZhbHVlIGNhbiBiZSBhcmJpdHJhcnkgdGhvdWdoLCBlLmcuIGFuIGluY3JlbWVudGVkIG51bWJlci5cblxuXG4gICAgZm9yY2VVcGRhdGUoZnVuY3Rpb24gKGNvdW50KSB7XG4gICAgICByZXR1cm4gY291bnQgKyAxO1xuICAgIH0pO1xuICB9IC8vIEVzdGFibGlzaCBSZWxheSBzdG9yZSBzdWJzY3JpcHRpb25zIGluIHRoZSBjb21taXQgcGhhc2UsIG9ubHkgaWZcbiAgLy8gcmVuZGVyaW5nIGZvciB0aGUgZmlyc3QgdGltZSwgb3IgaWYgd2UgbmVlZCB0byBzdWJzY3JpYmUgdG8gbmV3IGRhdGFcbiAgLy8gSWYgdGhlIGZyYWdtZW50IGlkZW50aWZpZXIgY2hhbmdlcywgaXQgbWVhbnMgdGhhdCB0aGUgdmFyaWFibGVzIG9uIHRoZVxuICAvLyBmcmFnbWVudCBvd25lciBjaGFuZ2VkLCBvciB0aGUgZnJhZ21lbnQgcmVmIHBvaW50cyB0byBkaWZmZXJlbnQgcmVjb3Jkcy5cbiAgLy8gSW4gdGhpcyBjYXNlLCB3ZSBuZWVkIHRvIHJlc3Vic2NyaWJlIHRvIHRoZSBSZWxheSBzdG9yZS5cblxuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIHZhciBkaXNwb3NhYmxlID0gRnJhZ21lbnRSZXNvdXJjZS5zdWJzY3JpYmUoZnJhZ21lbnRSZXN1bHQsIGhhbmRsZURhdGFVcGRhdGUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBXaGVuIHVubW91bnRpbmcgb3IgcmVzdWJzY3JpYmluZyB0byBuZXcgZGF0YSwgY2xlYW4gdXAgY3VycmVudFxuICAgICAgLy8gc3Vic2NyaXB0aW9uLiBUaGlzIHdpbGwgYWxzbyBtYWtlIHN1cmUgZnJhZ21lbnQgZGF0YSBpcyBubyBsb25nZXJcbiAgICAgIC8vIGNhY2hlZCBzbyB0aGF0IG5leHQgdGltZSBpdCBpdHMgcmVhZCwgaXQgd2lsbCBiZSBmcmVzaGx5IHJlYWQgZnJvbVxuICAgICAgLy8gdGhlIFJlbGF5IHN0b3JlXG4gICAgICBpc01vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAgfTsgLy8gTk9URTogV2UgZGlzYWJsZSByZWFjdC1ob29rcy1kZXBzIHdhcm5pbmcgYmVjYXVzZSBlbnZpcm9ubWVudCBhbmQgZnJhZ21lbnRJZGVudGlmaWVyXG4gICAgLy8gaXMgY2FwdHVyaW5nIGFsbCBpbmZvcm1hdGlvbiBhYm91dCB3aGV0aGVyIHRoZSBlZmZlY3Qgc2hvdWxkIGJlIHJlLXJhbi5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtlbnZpcm9ubWVudCwgZnJhZ21lbnRJZGVudGlmaWVyXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmIChmcmFnbWVudFJlZiAhPSBudWxsICYmIChmcmFnbWVudFJlc3VsdC5kYXRhID09PSB1bmRlZmluZWQgfHwgQXJyYXkuaXNBcnJheShmcmFnbWVudFJlc3VsdC5kYXRhKSAmJiBmcmFnbWVudFJlc3VsdC5kYXRhLmxlbmd0aCA+IDAgJiYgZnJhZ21lbnRSZXN1bHQuZGF0YS5ldmVyeShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgcmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZDtcbiAgICB9KSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdSZWxheTogRXhwZWN0ZWQgdG8gaGF2ZSBiZWVuIGFibGUgdG8gcmVhZCBub24tbnVsbCBkYXRhIGZvciAnICsgJ2ZyYWdtZW50IGAlc2AgZGVjbGFyZWQgaW4gJyArICdgJXNgLCBzaW5jZSBmcmFnbWVudCByZWZlcmVuY2Ugd2FzIG5vbi1udWxsLiAnICsgXCJNYWtlIHN1cmUgdGhhdCB0aGF0IGAlc2AncyBwYXJlbnQgaXNuJ3QgXCIgKyAnaG9sZGluZyBvbiB0byBhbmQvb3IgcGFzc2luZyBhIGZyYWdtZW50IHJlZmVyZW5jZSBmb3IgZGF0YSB0aGF0ICcgKyAnaGFzIGJlZW4gZGVsZXRlZC4nLCBmcmFnbWVudE5vZGUubmFtZSwgY29tcG9uZW50RGlzcGxheU5hbWUsIGNvbXBvbmVudERpc3BsYXlOYW1lKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl1cbiAgICBkYXRhOiBmcmFnbWVudFJlc3VsdC5kYXRhLFxuICAgIGRpc2FibGVTdG9yZVVwZGF0ZXM6IGRpc2FibGVTdG9yZVVwZGF0ZXMsXG4gICAgZW5hYmxlU3RvcmVVcGRhdGVzOiBlbmFibGVTdG9yZVVwZGF0ZXNcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VGcmFnbWVudE5vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHVzZUVmZmVjdCA9IF9yZXF1aXJlLnVzZUVmZmVjdCxcbiAgICB1c2VSZWYgPSBfcmVxdWlyZS51c2VSZWY7XG5cbmZ1bmN0aW9uIHVzZUlzTW91bnRlZFJlZigpIHtcbiAgdmFyIGlzTW91bnRlZFJlZiA9IHVzZVJlZih0cnVlKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpc01vdW50ZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzTW91bnRlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gaXNNb3VudGVkUmVmO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZUlzTW91bnRlZFJlZjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciB1c2VSZWxheUVudmlyb25tZW50ID0gcmVxdWlyZSgnLi91c2VSZWxheUVudmlyb25tZW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBnZXRPYnNlcnZhYmxlRm9yQWN0aXZlUmVxdWVzdCA9IF9yZXF1aXJlLl9faW50ZXJuYWwuZ2V0T2JzZXJ2YWJsZUZvckFjdGl2ZVJlcXVlc3QsXG4gICAgZ2V0U2VsZWN0b3IgPSBfcmVxdWlyZS5nZXRTZWxlY3RvcjtcblxudmFyIHVzZUVmZmVjdCA9IFJlYWN0LnVzZUVmZmVjdCxcbiAgICB1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlLFxuICAgIHVzZU1lbW8gPSBSZWFjdC51c2VNZW1vO1xuXG5mdW5jdGlvbiB1c2VJc09wZXJhdGlvbk5vZGVBY3RpdmUoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZikge1xuICB2YXIgZW52aXJvbm1lbnQgPSB1c2VSZWxheUVudmlyb25tZW50KCk7XG4gIHZhciBvYnNlcnZhYmxlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGVjdG9yID0gZ2V0U2VsZWN0b3IoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZik7XG5cbiAgICBpZiAoc2VsZWN0b3IgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgIShzZWxlY3Rvci5raW5kID09PSAnU2luZ3VsYXJSZWFkZXJTZWxlY3RvcicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAndXNlSXNPcGVyYXRpb25Ob2RlQWN0aXZlOiBQbHVyYWwgZnJhZ21lbnRzIGFyZSBub3Qgc3VwcG9ydGVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZ2V0T2JzZXJ2YWJsZUZvckFjdGl2ZVJlcXVlc3QoZW52aXJvbm1lbnQsIHNlbGVjdG9yLm93bmVyKTtcbiAgfSwgW2Vudmlyb25tZW50LCBmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmXSk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKG9ic2VydmFibGUgIT0gbnVsbCksXG4gICAgICBpc0FjdGl2ZSA9IF91c2VTdGF0ZVswXSxcbiAgICAgIHNldElzQWN0aXZlID0gX3VzZVN0YXRlWzFdO1xuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbjtcbiAgICBzZXRJc0FjdGl2ZShvYnNlcnZhYmxlICE9IG51bGwpO1xuXG4gICAgaWYgKG9ic2VydmFibGUgIT0gbnVsbCkge1xuICAgICAgdmFyIG9uQ29tcGxldGVPckVycm9yID0gZnVuY3Rpb24gb25Db21wbGV0ZU9yRXJyb3IoKSB7XG4gICAgICAgIHNldElzQWN0aXZlKGZhbHNlKTtcbiAgICAgIH07XG5cbiAgICAgIHN1YnNjcmlwdGlvbiA9IG9ic2VydmFibGUuc3Vic2NyaWJlKHtcbiAgICAgICAgY29tcGxldGU6IG9uQ29tcGxldGVPckVycm9yLFxuICAgICAgICBlcnJvcjogb25Db21wbGV0ZU9yRXJyb3JcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtvYnNlcnZhYmxlXSk7XG4gIHJldHVybiBpc0FjdGl2ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VJc09wZXJhdGlvbk5vZGVBY3RpdmU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXNlTGF6eUxvYWRRdWVyeU5vZGUgPSByZXF1aXJlKCcuL3VzZUxhenlMb2FkUXVlcnlOb2RlJyk7XG5cbnZhciB1c2VNZW1vT3BlcmF0aW9uRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vdXNlTWVtb09wZXJhdGlvbkRlc2NyaXB0b3InKTtcblxudmFyIHVzZVJlbGF5RW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL3VzZVJlbGF5RW52aXJvbm1lbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9sb2FkUXVlcnknKSxcbiAgICB1c2VUcmFja0xvYWRRdWVyeUluUmVuZGVyID0gX3JlcXVpcmUudXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlcjtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBmZXRjaFF1ZXJ5ID0gX3JlcXVpcmUyLl9faW50ZXJuYWwuZmV0Y2hRdWVyeTtcblxuZnVuY3Rpb24gdXNlTGF6eUxvYWRRdWVyeShncWxRdWVyeSwgdmFyaWFibGVzLCBvcHRpb25zKSB7XG4gIC8vIFdlIG5lZWQgdG8gdXNlIHRoaXMgaG9vayBpbiBvcmRlciB0byBiZSBhYmxlIHRvIHRyYWNrIGlmXG4gIC8vIGxvYWRRdWVyeSB3YXMgY2FsbGVkIGR1cmluZyByZW5kZXJcbiAgdXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlcigpO1xuICB2YXIgZW52aXJvbm1lbnQgPSB1c2VSZWxheUVudmlyb25tZW50KCk7XG4gIHZhciBxdWVyeSA9IHVzZU1lbW9PcGVyYXRpb25EZXNjcmlwdG9yKGdxbFF1ZXJ5LCB2YXJpYWJsZXMsIG9wdGlvbnMgJiYgb3B0aW9ucy5uZXR3b3JrQ2FjaGVDb25maWcgPyBvcHRpb25zLm5ldHdvcmtDYWNoZUNvbmZpZyA6IHtcbiAgICBmb3JjZTogdHJ1ZVxuICB9KTtcbiAgdmFyIGRhdGEgPSB1c2VMYXp5TG9hZFF1ZXJ5Tm9kZSh7XG4gICAgY29tcG9uZW50RGlzcGxheU5hbWU6ICd1c2VMYXp5TG9hZFF1ZXJ5KCknLFxuICAgIGZldGNoS2V5OiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmV0Y2hLZXksXG4gICAgZmV0Y2hPYnNlcnZhYmxlOiBmZXRjaFF1ZXJ5KGVudmlyb25tZW50LCBxdWVyeSksXG4gICAgZmV0Y2hQb2xpY3k6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5mZXRjaFBvbGljeSxcbiAgICBxdWVyeTogcXVlcnksXG4gICAgcmVuZGVyUG9saWN5OiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuVU5TVEFCTEVfcmVuZGVyUG9saWN5XG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VMYXp5TG9hZFF1ZXJ5OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFByb2ZpbGVyQ29udGV4dCA9IHJlcXVpcmUoJy4vUHJvZmlsZXJDb250ZXh0Jyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciB1c2VGZXRjaFRyYWNraW5nUmVmID0gcmVxdWlyZSgnLi91c2VGZXRjaFRyYWNraW5nUmVmJyk7XG5cbnZhciB1c2VGcmFnbWVudE5vZGUgPSByZXF1aXJlKCcuL3VzZUZyYWdtZW50Tm9kZScpO1xuXG52YXIgdXNlUmVsYXlFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vdXNlUmVsYXlFbnZpcm9ubWVudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL1F1ZXJ5UmVzb3VyY2UnKSxcbiAgICBnZXRRdWVyeVJlc291cmNlRm9yRW52aXJvbm1lbnQgPSBfcmVxdWlyZS5nZXRRdWVyeVJlc291cmNlRm9yRW52aXJvbm1lbnQsXG4gICAgZ2V0UXVlcnlDYWNoZUlkZW50aWZpZXIgPSBfcmVxdWlyZS5nZXRRdWVyeUNhY2hlSWRlbnRpZmllcjtcblxudmFyIHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0LFxuICAgIHVzZUVmZmVjdCA9IFJlYWN0LnVzZUVmZmVjdCxcbiAgICB1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlLFxuICAgIHVzZVJlZiA9IFJlYWN0LnVzZVJlZjtcblxuZnVuY3Rpb24gdXNlTGF6eUxvYWRRdWVyeU5vZGUoX3JlZikge1xuICB2YXIgcXVlcnkgPSBfcmVmLnF1ZXJ5LFxuICAgICAgY29tcG9uZW50RGlzcGxheU5hbWUgPSBfcmVmLmNvbXBvbmVudERpc3BsYXlOYW1lLFxuICAgICAgZmV0Y2hPYnNlcnZhYmxlID0gX3JlZi5mZXRjaE9ic2VydmFibGUsXG4gICAgICBmZXRjaFBvbGljeSA9IF9yZWYuZmV0Y2hQb2xpY3ksXG4gICAgICBmZXRjaEtleSA9IF9yZWYuZmV0Y2hLZXksXG4gICAgICByZW5kZXJQb2xpY3kgPSBfcmVmLnJlbmRlclBvbGljeTtcbiAgdmFyIGVudmlyb25tZW50ID0gdXNlUmVsYXlFbnZpcm9ubWVudCgpO1xuICB2YXIgcHJvZmlsZXJDb250ZXh0ID0gdXNlQ29udGV4dChQcm9maWxlckNvbnRleHQpO1xuICB2YXIgUXVlcnlSZXNvdXJjZSA9IGdldFF1ZXJ5UmVzb3VyY2VGb3JFbnZpcm9ubWVudChlbnZpcm9ubWVudCk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKDApLFxuICAgICAgZm9yY2VVcGRhdGVLZXkgPSBfdXNlU3RhdGVbMF0sXG4gICAgICBmb3JjZVVwZGF0ZSA9IF91c2VTdGF0ZVsxXTtcblxuICB2YXIgX3VzZUZldGNoVHJhY2tpbmdSZWYgPSB1c2VGZXRjaFRyYWNraW5nUmVmKCksXG4gICAgICBzdGFydEZldGNoID0gX3VzZUZldGNoVHJhY2tpbmdSZWYuc3RhcnRGZXRjaCxcbiAgICAgIGNvbXBsZXRlRmV0Y2ggPSBfdXNlRmV0Y2hUcmFja2luZ1JlZi5jb21wbGV0ZUZldGNoO1xuXG4gIHZhciBjYWNoZUJyZWFrZXIgPSBcIlwiLmNvbmNhdChmb3JjZVVwZGF0ZUtleSwgXCItXCIpLmNvbmNhdChmZXRjaEtleSAhPT0gbnVsbCAmJiBmZXRjaEtleSAhPT0gdm9pZCAwID8gZmV0Y2hLZXkgOiAnJyk7XG4gIHZhciBjYWNoZUlkZW50aWZpZXIgPSBnZXRRdWVyeUNhY2hlSWRlbnRpZmllcihlbnZpcm9ubWVudCwgcXVlcnksIGZldGNoUG9saWN5LCByZW5kZXJQb2xpY3ksIGNhY2hlQnJlYWtlcik7XG4gIHZhciBwcmVwYXJlZFF1ZXJ5UmVzdWx0ID0gcHJvZmlsZXJDb250ZXh0LndyYXBQcmVwYXJlUXVlcnlSZXNvdXJjZShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFF1ZXJ5UmVzb3VyY2UucHJlcGFyZVdpdGhJZGVudGlmaWVyKGNhY2hlSWRlbnRpZmllciwgcXVlcnksIGZldGNoT2JzZXJ2YWJsZSwgZmV0Y2hQb2xpY3ksIHJlbmRlclBvbGljeSwge1xuICAgICAgc3RhcnQ6IHN0YXJ0RmV0Y2gsXG4gICAgICBjb21wbGV0ZTogY29tcGxldGVGZXRjaCxcbiAgICAgIGVycm9yOiBjb21wbGV0ZUZldGNoXG4gICAgfSwgcHJvZmlsZXJDb250ZXh0KTtcbiAgfSk7XG4gIHZhciBtYXliZUhpZGRlbk9yRmFzdFJlZnJlc2ggPSB1c2VSZWYoZmFsc2UpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBBdHRlbXB0IHRvIGRldGVjdCBpZiB0aGUgY29tcG9uZW50IHdhc1xuICAgICAgLy8gaGlkZGVuIChieSBPZmZzY3JlZW4gQVBJKSwgb3IgZmFzdCByZWZyZXNoIG9jY3VyZWQ7XG4gICAgICAvLyBPbmx5IGluIHRoZXNlIHNpdHVhdGlvbnMgd291bGQgdGhlIGVmZmVjdCBjbGVhbnVwXG4gICAgICAvLyBmb3IgXCJ1bm1vdW50aW5nXCIgcnVuIG11bHRpcGxlIHRpbWVzLCBzbyBpZlxuICAgICAgLy8gd2UgYXJlIGV2ZXIgYWJsZSB0byByZWFkIHRoaXMgcmVmIHdpdGggYSB2YWx1ZVxuICAgICAgLy8gb2YgdHJ1ZSwgaXQgbWVhbnMgdGhhdCBvbmUgb2YgdGhlc2UgY2FzZXNcbiAgICAgIC8vIGhhcyBoYXBwZW5lZC5cbiAgICAgIG1heWJlSGlkZGVuT3JGYXN0UmVmcmVzaC5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG1heWJlSGlkZGVuT3JGYXN0UmVmcmVzaC5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICAvLyBUaGlzIGJsb2NrIG9ubHkgcnVucyBpZiB0aGUgY29tcG9uZW50IGhhcyBwcmV2aW91c2x5IFwidW5tb3VudGVkXCJcbiAgICAgIC8vIGR1ZSB0byBpdCBiZWluZyBoaWRkZW4gYnkgdGhlIE9mZnNjcmVlbiBBUEksIG9yIGR1cmluZyBmYXN0IHJlZnJlc2guXG4gICAgICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgY3VycmVudCBjYWNoZWQgcmVzb3VyY2Ugd2lsbCBoYXZlIGJlZW4gZGlzcG9zZWRcbiAgICAgIC8vIGJ5IHRoZSBwcmV2aW91cyBjbGVhbnVwLCBzbyBpbnN0ZWFkIG9mIGF0dGVtcHRpbmcgdG9cbiAgICAgIC8vIGRvIG91ciByZWd1bGFyIGNvbW1pdCBzZXR1cCwgd2hpY2ggd291bGQgaW5jb3JyZWN0bHkgYXR0ZW1wdCB0b1xuICAgICAgLy8gcmV0YWluIGEgY2FjaGVkIHF1ZXJ5IHJlc291cmNlIHRoYXQgd2FzIGRpc3Bvc2VkLCB3ZSBuZWVkIHRvIGZvcmNlXG4gICAgICAvLyBhIHJlLXJlbmRlciBzbyB0aGF0IHRoZSBjYWNoZSBlbnRyeSBmb3IgdGhpcyBxdWVyeSBpcyByZS1pbnRpbGlhemVkIGFuZFxuICAgICAgLy8gYW5kIHJlLWV2YWx1YXRlZCAoYW5kIHBvdGVudGlhbGx5IGNhdXNlIGEgcmVmZXRjaCkuXG4gICAgICBtYXliZUhpZGRlbk9yRmFzdFJlZnJlc2guY3VycmVudCA9IGZhbHNlO1xuICAgICAgZm9yY2VVcGRhdGUoZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIG4gKyAxO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRpc3Bvc2FibGUgPSBRdWVyeVJlc291cmNlLnJldGFpbihwcmVwYXJlZFF1ZXJ5UmVzdWx0LCBwcm9maWxlckNvbnRleHQpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICB9OyAvLyBOT1RFOiBXZSBkaXNhYmxlIHJlYWN0LWhvb2tzLWRlcHMgd2FybmluZyBiZWNhdXNlIHRoZSBgZW52aXJvbm1lbnRgXG4gICAgLy8gYW5kIGBjYWNoZUlkZW50aWZpZXJgIGlkZW50aXRpZXMgYXJlIGNhcHR1cmluZyBhbGwgaW5mb3JtYXRpb24gYWJvdXQgd2hldGhlclxuICAgIC8vIHRoZSBlZmZlY3Qgc2hvdWxkIGJlIHJlLWV4ZWN1dGVkIGFuZCB0aGUgcXVlcnkgcmUtcmV0YWluZWQuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbZW52aXJvbm1lbnQsIGNhY2hlSWRlbnRpZmllcl0pO1xuICB2YXIgZnJhZ21lbnROb2RlID0gcHJlcGFyZWRRdWVyeVJlc3VsdC5mcmFnbWVudE5vZGUsXG4gICAgICBmcmFnbWVudFJlZiA9IHByZXBhcmVkUXVlcnlSZXN1bHQuZnJhZ21lbnRSZWY7XG5cbiAgdmFyIF91c2VGcmFnbWVudE5vZGUgPSB1c2VGcmFnbWVudE5vZGUoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZiwgY29tcG9uZW50RGlzcGxheU5hbWUpLFxuICAgICAgZGF0YSA9IF91c2VGcmFnbWVudE5vZGUuZGF0YTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VMYXp5TG9hZFF1ZXJ5Tm9kZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgZ2V0UGFnaW5hdGlvblZhcmlhYmxlcyA9IHJlcXVpcmUoJy4vZ2V0UGFnaW5hdGlvblZhcmlhYmxlcycpO1xuXG52YXIgZ2V0VmFsdWVBdFBhdGggPSByZXF1aXJlKCcuL2dldFZhbHVlQXRQYXRoJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHVzZUZldGNoVHJhY2tpbmdSZWYgPSByZXF1aXJlKCcuL3VzZUZldGNoVHJhY2tpbmdSZWYnKTtcblxudmFyIHVzZUlzTW91bnRlZFJlZiA9IHJlcXVpcmUoJy4vdXNlSXNNb3VudGVkUmVmJyk7XG5cbnZhciB1c2VJc09wZXJhdGlvbk5vZGVBY3RpdmUgPSByZXF1aXJlKCcuL3VzZUlzT3BlcmF0aW9uTm9kZUFjdGl2ZScpO1xuXG52YXIgdXNlUmVsYXlFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vdXNlUmVsYXlFbnZpcm9ubWVudCcpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHVzZUNhbGxiYWNrID0gX3JlcXVpcmUudXNlQ2FsbGJhY2ssXG4gICAgdXNlRWZmZWN0ID0gX3JlcXVpcmUudXNlRWZmZWN0LFxuICAgIHVzZVN0YXRlID0gX3JlcXVpcmUudXNlU3RhdGU7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgQ29ubmVjdGlvbkludGVyZmFjZSA9IF9yZXF1aXJlMi5Db25uZWN0aW9uSW50ZXJmYWNlLFxuICAgIGZldGNoUXVlcnkgPSBfcmVxdWlyZTIuX19pbnRlcm5hbC5mZXRjaFF1ZXJ5LFxuICAgIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IgPSBfcmVxdWlyZTIuY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcixcbiAgICBnZXRTZWxlY3RvciA9IF9yZXF1aXJlMi5nZXRTZWxlY3RvcjtcblxuZnVuY3Rpb24gdXNlTG9hZE1vcmVGdW5jdGlvbihhcmdzKSB7XG4gIHZhciBkaXJlY3Rpb24gPSBhcmdzLmRpcmVjdGlvbixcbiAgICAgIGZyYWdtZW50Tm9kZSA9IGFyZ3MuZnJhZ21lbnROb2RlLFxuICAgICAgZnJhZ21lbnRSZWYgPSBhcmdzLmZyYWdtZW50UmVmLFxuICAgICAgZnJhZ21lbnRJZGVudGlmaWVyID0gYXJncy5mcmFnbWVudElkZW50aWZpZXIsXG4gICAgICBmcmFnbWVudERhdGEgPSBhcmdzLmZyYWdtZW50RGF0YSxcbiAgICAgIGNvbm5lY3Rpb25QYXRoSW5GcmFnbWVudERhdGEgPSBhcmdzLmNvbm5lY3Rpb25QYXRoSW5GcmFnbWVudERhdGEsXG4gICAgICBwYWdpbmF0aW9uUmVxdWVzdCA9IGFyZ3MucGFnaW5hdGlvblJlcXVlc3QsXG4gICAgICBwYWdpbmF0aW9uTWV0YWRhdGEgPSBhcmdzLnBhZ2luYXRpb25NZXRhZGF0YSxcbiAgICAgIGNvbXBvbmVudERpc3BsYXlOYW1lID0gYXJncy5jb21wb25lbnREaXNwbGF5TmFtZSxcbiAgICAgIG9ic2VydmVyID0gYXJncy5vYnNlcnZlcixcbiAgICAgIG9uUmVzZXQgPSBhcmdzLm9uUmVzZXQsXG4gICAgICBpZGVudGlmaWVyRmllbGQgPSBhcmdzLmlkZW50aWZpZXJGaWVsZDtcbiAgdmFyIGVudmlyb25tZW50ID0gdXNlUmVsYXlFbnZpcm9ubWVudCgpO1xuXG4gIHZhciBfdXNlRmV0Y2hUcmFja2luZ1JlZiA9IHVzZUZldGNoVHJhY2tpbmdSZWYoKSxcbiAgICAgIGlzRmV0Y2hpbmdSZWYgPSBfdXNlRmV0Y2hUcmFja2luZ1JlZi5pc0ZldGNoaW5nUmVmLFxuICAgICAgc3RhcnRGZXRjaCA9IF91c2VGZXRjaFRyYWNraW5nUmVmLnN0YXJ0RmV0Y2gsXG4gICAgICBkaXNwb3NlRmV0Y2ggPSBfdXNlRmV0Y2hUcmFja2luZ1JlZi5kaXNwb3NlRmV0Y2gsXG4gICAgICBjb21wbGV0ZUZldGNoID0gX3VzZUZldGNoVHJhY2tpbmdSZWYuY29tcGxldGVGZXRjaDtcblxuICB2YXIgaWRlbnRpZmllclZhbHVlID0gaWRlbnRpZmllckZpZWxkICE9IG51bGwgJiYgZnJhZ21lbnREYXRhICE9IG51bGwgJiYgdHlwZW9mIGZyYWdtZW50RGF0YSA9PT0gJ29iamVjdCcgPyBmcmFnbWVudERhdGFbaWRlbnRpZmllckZpZWxkXSA6IG51bGw7XG4gIHZhciBpc01vdW50ZWRSZWYgPSB1c2VJc01vdW50ZWRSZWYoKTtcblxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoZW52aXJvbm1lbnQpLFxuICAgICAgbWlycm9yZWRFbnZpcm9ubWVudCA9IF91c2VTdGF0ZVswXSxcbiAgICAgIHNldE1pcnJvcmVkRW52aXJvbm1lbnQgPSBfdXNlU3RhdGVbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTIgPSB1c2VTdGF0ZShmcmFnbWVudElkZW50aWZpZXIpLFxuICAgICAgbWlycm9yZWRGcmFnbWVudElkZW50aWZpZXIgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0TWlycm9yZWRGcmFnbWVudElkZW50aWZpZXIgPSBfdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBpc1BhcmVudFF1ZXJ5QWN0aXZlID0gdXNlSXNPcGVyYXRpb25Ob2RlQWN0aXZlKGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWYpO1xuICB2YXIgc2hvdWxkUmVzZXQgPSBlbnZpcm9ubWVudCAhPT0gbWlycm9yZWRFbnZpcm9ubWVudCB8fCBmcmFnbWVudElkZW50aWZpZXIgIT09IG1pcnJvcmVkRnJhZ21lbnRJZGVudGlmaWVyO1xuXG4gIGlmIChzaG91bGRSZXNldCkge1xuICAgIGRpc3Bvc2VGZXRjaCgpO1xuICAgIG9uUmVzZXQoKTtcbiAgICBzZXRNaXJyb3JlZEVudmlyb25tZW50KGVudmlyb25tZW50KTtcbiAgICBzZXRNaXJyb3JlZEZyYWdtZW50SWRlbnRpZmllcihmcmFnbWVudElkZW50aWZpZXIpO1xuICB9XG5cbiAgdmFyIF9nZXRDb25uZWN0aW9uU3RhdGUgPSBnZXRDb25uZWN0aW9uU3RhdGUoZGlyZWN0aW9uLCBmcmFnbWVudE5vZGUsIGZyYWdtZW50RGF0YSwgY29ubmVjdGlvblBhdGhJbkZyYWdtZW50RGF0YSksXG4gICAgICBjdXJzb3IgPSBfZ2V0Q29ubmVjdGlvblN0YXRlLmN1cnNvcixcbiAgICAgIGhhc01vcmUgPSBfZ2V0Q29ubmVjdGlvblN0YXRlLmhhc01vcmU7IC8vIERpc3Bvc2Ugb2YgcGFnaW5hdGlvbiByZXF1ZXN0cyBpbiBmbGlnaHQgd2hlbiB1bm1vdW50aW5nXG5cblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBkaXNwb3NlRmV0Y2goKTtcbiAgICB9O1xuICB9LCBbZGlzcG9zZUZldGNoXSk7XG4gIHZhciBsb2FkTW9yZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChjb3VudCwgb3B0aW9ucykge1xuICAgIC8vIFRPRE8oVDQxMTMxODQ2KTogRmV0Y2gvQ2FjaGluZyBwb2xpY2llcyBmb3IgbG9hZE1vcmVcbiAgICB2YXIgb25Db21wbGV0ZSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5vbkNvbXBsZXRlO1xuXG4gICAgaWYgKGlzTW91bnRlZFJlZi5jdXJyZW50ICE9PSB0cnVlKSB7XG4gICAgICAvLyBCYWlsIG91dCBhbmQgd2FybiBpZiB3ZSdyZSB0cnlpbmcgdG8gcGFnaW5hdGUgYWZ0ZXIgdGhlIGNvbXBvbmVudFxuICAgICAgLy8gaGFzIHVubW91bnRlZFxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5OiBVbmV4cGVjdGVkIGZldGNoIG9uIHVubW91bnRlZCBjb21wb25lbnQgZm9yIGZyYWdtZW50ICcgKyAnYCVzYCBpbiBgJXNgLiBJdCBsb29rcyBsaWtlIHNvbWUgaW5zdGFuY2VzIG9mIHlvdXIgY29tcG9uZW50IGFyZSAnICsgJ3N0aWxsIHRyeWluZyB0byBmZXRjaCBkYXRhIGJ1dCB0aGV5IGFscmVhZHkgdW5tb3VudGVkLiAnICsgJ1BsZWFzZSBtYWtlIHN1cmUgeW91IGNsZWFyIGFsbCB0aW1lcnMsIGludGVydmFscywgJyArICdhc3luYyBjYWxscywgZXRjIHRoYXQgbWF5IHRyaWdnZXIgYSBmZXRjaC4nLCBmcmFnbWVudE5vZGUubmFtZSwgY29tcG9uZW50RGlzcGxheU5hbWUpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHt9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBmcmFnbWVudFNlbGVjdG9yID0gZ2V0U2VsZWN0b3IoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZik7XG5cbiAgICBpZiAoaXNGZXRjaGluZ1JlZi5jdXJyZW50ID09PSB0cnVlIHx8IGZyYWdtZW50RGF0YSA9PSBudWxsIHx8IGlzUGFyZW50UXVlcnlBY3RpdmUpIHtcbiAgICAgIGlmIChmcmFnbWVudFNlbGVjdG9yID09IG51bGwpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5OiBVbmV4cGVjdGVkIGZldGNoIHdoaWxlIHVzaW5nIGEgbnVsbCBmcmFnbWVudCByZWYgJyArICdmb3IgZnJhZ21lbnQgYCVzYCBpbiBgJXNgLiBXaGVuIGZldGNoaW5nIG1vcmUgaXRlbXMsIHdlIGV4cGVjdCAnICsgXCJpbml0aWFsIGZyYWdtZW50IGRhdGEgdG8gYmUgbm9uLW51bGwuIFBsZWFzZSBtYWtlIHN1cmUgeW91J3JlIFwiICsgJ3Bhc3NpbmcgYSB2YWxpZCBmcmFnbWVudCByZWYgdG8gYCVzYCBiZWZvcmUgcGFnaW5hdGluZy4nLCBmcmFnbWVudE5vZGUubmFtZSwgY29tcG9uZW50RGlzcGxheU5hbWUsIGNvbXBvbmVudERpc3BsYXlOYW1lKSA6IHZvaWQgMDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9uQ29tcGxldGUpIHtcbiAgICAgICAgb25Db21wbGV0ZShudWxsKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHt9XG4gICAgICB9O1xuICAgIH1cblxuICAgICEoZnJhZ21lbnRTZWxlY3RvciAhPSBudWxsICYmIGZyYWdtZW50U2VsZWN0b3Iua2luZCAhPT0gJ1BsdXJhbFJlYWRlclNlbGVjdG9yJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheTogRXhwZWN0ZWQgdG8gYmUgYWJsZSB0byBmaW5kIGEgbm9uLXBsdXJhbCBmcmFnbWVudCBvd25lciBmb3IgJyArIFwiZnJhZ21lbnQgYCVzYCB3aGVuIHVzaW5nIGAlc2AuIElmIHlvdSdyZSBzZWVpbmcgdGhpcywgXCIgKyAndGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVsYXkuJywgZnJhZ21lbnROb2RlLm5hbWUsIGNvbXBvbmVudERpc3BsYXlOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIHBhcmVudFZhcmlhYmxlcyA9IGZyYWdtZW50U2VsZWN0b3Iub3duZXIudmFyaWFibGVzO1xuICAgIHZhciBmcmFnbWVudFZhcmlhYmxlcyA9IGZyYWdtZW50U2VsZWN0b3IudmFyaWFibGVzO1xuICAgIHZhciBleHRyYVZhcmlhYmxlcyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5VTlNUQUJMRV9leHRyYVZhcmlhYmxlczsgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtc3ByZWFkLWludGVyZmFjZV1cblxuICAgIHZhciBiYXNlVmFyaWFibGVzID0gKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIHBhcmVudFZhcmlhYmxlcyksIGZyYWdtZW50VmFyaWFibGVzKTtcbiAgICB2YXIgcGFnaW5hdGlvblZhcmlhYmxlcyA9IGdldFBhZ2luYXRpb25WYXJpYWJsZXMoZGlyZWN0aW9uLCBjb3VudCwgY3Vyc29yLCBiYXNlVmFyaWFibGVzLCAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC1zcHJlYWQtaW50ZXJmYWNlXVxuICAgICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCBleHRyYVZhcmlhYmxlcyksIHBhZ2luYXRpb25NZXRhZGF0YSk7IC8vIElmIHRoZSBxdWVyeSBuZWVkcyBhbiBpZGVudGlmaWVyIHZhbHVlICgnaWQnIG9yIHNpbWlsYXIpIGFuZCBvbmVcbiAgICAvLyB3YXMgbm90IGV4cGxpY2l0bHkgcHJvdmlkZWQsIHJlYWQgaXQgZnJvbSB0aGUgZnJhZ21lbnQgZGF0YS5cblxuICAgIGlmIChpZGVudGlmaWVyRmllbGQgIT0gbnVsbCkge1xuICAgICAgLy8gQHJlZmV0Y2hhYmxlIGZyYWdtZW50cyBhcmUgZ3VhcmFudGVlZCB0byBoYXZlIGFuIGBpZGAgc2VsZWN0aW9uXG4gICAgICAvLyBpZiB0aGUgdHlwZSBpcyBOb2RlLCBpbXBsZW1lbnRzIE5vZGUsIG9yIGlzIEBmZXRjaGFibGUuIERvdWJsZS1jaGVja1xuICAgICAgLy8gdGhhdCB0aGVyZSBhY3R1YWxseSBpcyBhIHZhbHVlIGF0IHJ1bnRpbWUuXG4gICAgICBpZiAodHlwZW9mIGlkZW50aWZpZXJWYWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5OiBFeHBlY3RlZCByZXN1bHQgdG8gaGF2ZSBhIHN0cmluZyAgJyArICdgJXNgIGluIG9yZGVyIHRvIHJlZmV0Y2gsIGdvdCBgJXNgLicsIGlkZW50aWZpZXJGaWVsZCwgaWRlbnRpZmllclZhbHVlKSA6IHZvaWQgMDtcbiAgICAgIH1cblxuICAgICAgcGFnaW5hdGlvblZhcmlhYmxlcy5pZCA9IGlkZW50aWZpZXJWYWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgcGFnaW5hdGlvblF1ZXJ5ID0gY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcihwYWdpbmF0aW9uUmVxdWVzdCwgcGFnaW5hdGlvblZhcmlhYmxlcywge1xuICAgICAgZm9yY2U6IHRydWVcbiAgICB9KTtcbiAgICBmZXRjaFF1ZXJ5KGVudmlyb25tZW50LCBwYWdpbmF0aW9uUXVlcnkpLnN1YnNjcmliZSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgb2JzZXJ2ZXIpLCB7fSwge1xuICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KHN1YnNjcmlwdGlvbikge1xuICAgICAgICBzdGFydEZldGNoKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIG9ic2VydmVyLnN0YXJ0ICYmIG9ic2VydmVyLnN0YXJ0KHN1YnNjcmlwdGlvbik7XG4gICAgICB9LFxuICAgICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBjb21wbGV0ZUZldGNoKCk7XG4gICAgICAgIG9ic2VydmVyLmNvbXBsZXRlICYmIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShudWxsKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoX2Vycm9yKSB7XG4gICAgICAgIGNvbXBsZXRlRmV0Y2goKTtcbiAgICAgICAgb2JzZXJ2ZXIuZXJyb3IgJiYgb2JzZXJ2ZXIuZXJyb3IoX2Vycm9yKTtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKF9lcnJvcik7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwb3NlOiBkaXNwb3NlRmV0Y2hcbiAgICB9O1xuICB9LCAvLyBOT1RFOiBXZSBkaXNhYmxlIHJlYWN0LWhvb2tzLWRlcHMgd2FybmluZyBiZWNhdXNlIGFsbCB2YWx1ZXNcbiAgLy8gaW5zaWRlIHBhZ2luYXRpb25NZXRhZGF0YSBhcmUgc3RhdGljXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgW2Vudmlyb25tZW50LCBpZGVudGlmaWVyVmFsdWUsIGRpcmVjdGlvbiwgY3Vyc29yLCBzdGFydEZldGNoLCBkaXNwb3NlRmV0Y2gsIGNvbXBsZXRlRmV0Y2gsIGlzRmV0Y2hpbmdSZWYsIGlzUGFyZW50UXVlcnlBY3RpdmUsIGZyYWdtZW50RGF0YSwgZnJhZ21lbnROb2RlLm5hbWUsIGZyYWdtZW50UmVmLCBjb21wb25lbnREaXNwbGF5TmFtZV0pO1xuICByZXR1cm4gW2xvYWRNb3JlLCBoYXNNb3JlLCBkaXNwb3NlRmV0Y2hdO1xufVxuXG5mdW5jdGlvbiBnZXRDb25uZWN0aW9uU3RhdGUoZGlyZWN0aW9uLCBmcmFnbWVudE5vZGUsIGZyYWdtZW50RGF0YSwgY29ubmVjdGlvblBhdGhJbkZyYWdtZW50RGF0YSkge1xuICB2YXIgX3BhZ2VJbmZvJEVORF9DVVJTT1IsIF9wYWdlSW5mbyRTVEFSVF9DVVJTTztcblxuICB2YXIgX0Nvbm5lY3Rpb25JbnRlcmZhY2UkID0gQ29ubmVjdGlvbkludGVyZmFjZS5nZXQoKSxcbiAgICAgIEVER0VTID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkLkVER0VTLFxuICAgICAgUEFHRV9JTkZPID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkLlBBR0VfSU5GTyxcbiAgICAgIEhBU19ORVhUX1BBR0UgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQuSEFTX05FWFRfUEFHRSxcbiAgICAgIEhBU19QUkVWX1BBR0UgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQuSEFTX1BSRVZfUEFHRSxcbiAgICAgIEVORF9DVVJTT1IgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQuRU5EX0NVUlNPUixcbiAgICAgIFNUQVJUX0NVUlNPUiA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJC5TVEFSVF9DVVJTT1I7XG5cbiAgdmFyIGNvbm5lY3Rpb24gPSBnZXRWYWx1ZUF0UGF0aChmcmFnbWVudERhdGEsIGNvbm5lY3Rpb25QYXRoSW5GcmFnbWVudERhdGEpO1xuXG4gIGlmIChjb25uZWN0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY3Vyc29yOiBudWxsLFxuICAgICAgaGFzTW9yZTogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgISh0eXBlb2YgY29ubmVjdGlvbiA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIGNvbm5lY3Rpb24gaW4gZnJhZ21lbnQgYCVzYCB0byBoYXZlIGJlZW4gYG51bGxgLCBvciAnICsgJ2EgcGxhaW4gb2JqZWN0IHdpdGggJXMgYW5kICVzIHByb3BlcnRpZXMuIEluc3RlYWQgZ290IGAlc2AuJywgZnJhZ21lbnROb2RlLm5hbWUsIEVER0VTLCBQQUdFX0lORk8sIGNvbm5lY3Rpb24pIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGVkZ2VzID0gY29ubmVjdGlvbltFREdFU107XG4gIHZhciBwYWdlSW5mbyA9IGNvbm5lY3Rpb25bUEFHRV9JTkZPXTtcblxuICBpZiAoZWRnZXMgPT0gbnVsbCB8fCBwYWdlSW5mbyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnNvcjogbnVsbCxcbiAgICAgIGhhc01vcmU6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gICFBcnJheS5pc0FycmF5KGVkZ2VzKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBFeHBlY3RlZCBjb25uZWN0aW9uIGluIGZyYWdtZW50IGAlc2AgdG8gaGF2ZSBhIHBsdXJhbCBgJXNgIGZpZWxkLiAnICsgJ0luc3RlYWQgZ290IGAlc2AuJywgZnJhZ21lbnROb2RlLm5hbWUsIEVER0VTLCBlZGdlcykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhKHR5cGVvZiBwYWdlSW5mbyA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIGNvbm5lY3Rpb24gaW4gZnJhZ21lbnQgYCVzYCB0byBoYXZlIGEgYCVzYCBmaWVsZC4gJyArICdJbnN0ZWFkIGdvdCBgJXNgLicsIGZyYWdtZW50Tm9kZS5uYW1lLCBQQUdFX0lORk8sIHBhZ2VJbmZvKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBjdXJzb3IgPSBkaXJlY3Rpb24gPT09ICdmb3J3YXJkJyA/IChfcGFnZUluZm8kRU5EX0NVUlNPUiA9IHBhZ2VJbmZvW0VORF9DVVJTT1JdKSAhPT0gbnVsbCAmJiBfcGFnZUluZm8kRU5EX0NVUlNPUiAhPT0gdm9pZCAwID8gX3BhZ2VJbmZvJEVORF9DVVJTT1IgOiBudWxsIDogKF9wYWdlSW5mbyRTVEFSVF9DVVJTTyA9IHBhZ2VJbmZvW1NUQVJUX0NVUlNPUl0pICE9PSBudWxsICYmIF9wYWdlSW5mbyRTVEFSVF9DVVJTTyAhPT0gdm9pZCAwID8gX3BhZ2VJbmZvJFNUQVJUX0NVUlNPIDogbnVsbDtcbiAgIShjdXJzb3IgPT09IG51bGwgfHwgdHlwZW9mIGN1cnNvciA9PT0gJ3N0cmluZycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXk6IEV4cGVjdGVkIHBhZ2UgaW5mbyBmb3IgY29ubmVjdGlvbiBpbiBmcmFnbWVudCBgJXNgIHRvIGhhdmUgYSAnICsgJ3ZhbGlkIGAlc2AuIEluc3RlYWQgZ290IGAlc2AuJywgZnJhZ21lbnROb2RlLm5hbWUsIFNUQVJUX0NVUlNPUiwgY3Vyc29yKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBoYXNNb3JlO1xuXG4gIGlmIChkaXJlY3Rpb24gPT09ICdmb3J3YXJkJykge1xuICAgIGhhc01vcmUgPSBjdXJzb3IgIT0gbnVsbCAmJiBwYWdlSW5mb1tIQVNfTkVYVF9QQUdFXSA9PT0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBoYXNNb3JlID0gY3Vyc29yICE9IG51bGwgJiYgcGFnZUluZm9bSEFTX1BSRVZfUEFHRV0gPT09IHRydWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGN1cnNvcjogY3Vyc29yLFxuICAgIGhhc01vcmU6IGhhc01vcmVcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VMb2FkTW9yZUZ1bmN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIHVzZU1lbW9WYXJpYWJsZXMgPSByZXF1aXJlKCcuL3VzZU1lbW9WYXJpYWJsZXMnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IgPSBfcmVxdWlyZS5jcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yLFxuICAgIGdldFJlcXVlc3QgPSBfcmVxdWlyZS5nZXRSZXF1ZXN0O1xuXG52YXIgdXNlTWVtbyA9IFJlYWN0LnVzZU1lbW87XG5cbmZ1bmN0aW9uIHVzZU1lbW9PcGVyYXRpb25EZXNjcmlwdG9yKGdxbFF1ZXJ5LCB2YXJpYWJsZXMsIGNhY2hlQ29uZmlnKSB7XG4gIHZhciBfdXNlTWVtb1ZhcmlhYmxlcyA9IHVzZU1lbW9WYXJpYWJsZXModmFyaWFibGVzKSxcbiAgICAgIG1lbW9WYXJpYWJsZXMgPSBfdXNlTWVtb1ZhcmlhYmxlc1swXTtcblxuICB2YXIgX3VzZU1lbW9WYXJpYWJsZXMyID0gdXNlTWVtb1ZhcmlhYmxlcyhjYWNoZUNvbmZpZyB8fCB7fSksXG4gICAgICBtZW1vQ2FjaGVDb25maWcgPSBfdXNlTWVtb1ZhcmlhYmxlczJbMF07XG5cbiAgcmV0dXJuIHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yKGdldFJlcXVlc3QoZ3FsUXVlcnkpLCBtZW1vVmFyaWFibGVzLCBtZW1vQ2FjaGVDb25maWcpO1xuICB9LCBbZ3FsUXVlcnksIG1lbW9WYXJpYWJsZXMsIG1lbW9DYWNoZUNvbmZpZ10pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZU1lbW9PcGVyYXRpb25EZXNjcmlwdG9yOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIGFyZUVxdWFsID0gcmVxdWlyZShcImZianMvbGliL2FyZUVxdWFsXCIpO1xuXG52YXIgdXNlTWVtbyA9IFJlYWN0LnVzZU1lbW8sXG4gICAgdXNlUmVmID0gUmVhY3QudXNlUmVmLFxuICAgIHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGU7XG5cbmZ1bmN0aW9uIHVzZU1lbW9WYXJpYWJsZXModmFyaWFibGVzKSB7XG4gIHZhciBfdmFyaWFibGVzQ2hhbmdlZEdlbmUyO1xuXG4gIC8vIFRoZSB2YWx1ZSBvZiB0aGlzIHJlZiBpcyBhIGNvdW50ZXIgdGhhdCBzaG91bGQgYmUgaW5jcmVtZW50ZWQgd2hlblxuICAvLyB2YXJpYWJsZXMgY2hhbmdlLiBUaGlzIGFsbG93cyB1cyB0byB1c2UgdGhlIGNvdW50ZXIgYXMgYVxuICAvLyBtZW1vaXphdGlvbiB2YWx1ZSB0byBpbmRpY2F0ZSBpZiB0aGUgY29tcHV0YXRpb24gZm9yIHVzZU1lbW9cbiAgLy8gc2hvdWxkIGJlIHJlLWV4ZWN1dGVkLlxuICB2YXIgdmFyaWFibGVzQ2hhbmdlZEdlbmVyYXRpb25SZWYgPSB1c2VSZWYoMCk7IC8vIFdlIG1pcnJvciB0aGUgdmFyaWFibGVzIHRvIGNoZWNrIGlmIHRoZXkgaGF2ZSBjaGFuZ2VkIGJldHdlZW4gcmVuZGVyc1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZSh2YXJpYWJsZXMpLFxuICAgICAgbWlycm9yZWRWYXJpYWJsZXMgPSBfdXNlU3RhdGVbMF0sXG4gICAgICBzZXRNaXJyb3JlZFZhcmlhYmxlcyA9IF91c2VTdGF0ZVsxXTtcblxuICB2YXIgdmFyaWFibGVzQ2hhbmdlZCA9ICFhcmVFcXVhbCh2YXJpYWJsZXMsIG1pcnJvcmVkVmFyaWFibGVzKTtcblxuICBpZiAodmFyaWFibGVzQ2hhbmdlZCkge1xuICAgIHZhciBfdmFyaWFibGVzQ2hhbmdlZEdlbmU7XG5cbiAgICB2YXJpYWJsZXNDaGFuZ2VkR2VuZXJhdGlvblJlZi5jdXJyZW50ID0gKChfdmFyaWFibGVzQ2hhbmdlZEdlbmUgPSB2YXJpYWJsZXNDaGFuZ2VkR2VuZXJhdGlvblJlZi5jdXJyZW50KSAhPT0gbnVsbCAmJiBfdmFyaWFibGVzQ2hhbmdlZEdlbmUgIT09IHZvaWQgMCA/IF92YXJpYWJsZXNDaGFuZ2VkR2VuZSA6IDApICsgMTtcbiAgICBzZXRNaXJyb3JlZFZhcmlhYmxlcyh2YXJpYWJsZXMpO1xuICB9IC8vIE5PVEU6IFdlIGRpc2FibGUgcmVhY3QtaG9va3MtZGVwcyB3YXJuaW5nIGJlY2F1c2Ugd2UgZXhwbGljaXRseVxuICAvLyBkb24ndCB3YW50IHRvIG1lbW9pemUgb24gb2JqZWN0IGlkZW50aXR5XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcblxuXG4gIHZhciBtZW1vVmFyaWFibGVzID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHZhcmlhYmxlcztcbiAgfSwgW3ZhcmlhYmxlc0NoYW5nZWRHZW5lcmF0aW9uUmVmLmN1cnJlbnRdKTtcbiAgcmV0dXJuIFttZW1vVmFyaWFibGVzLCAoX3ZhcmlhYmxlc0NoYW5nZWRHZW5lMiA9IHZhcmlhYmxlc0NoYW5nZWRHZW5lcmF0aW9uUmVmLmN1cnJlbnQpICE9PSBudWxsICYmIF92YXJpYWJsZXNDaGFuZ2VkR2VuZTIgIT09IHZvaWQgMCA/IF92YXJpYWJsZXNDaGFuZ2VkR2VuZTIgOiAwXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VNZW1vVmFyaWFibGVzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciB1c2VSZWxheUVudmlyb25tZW50ID0gcmVxdWlyZSgnLi91c2VSZWxheUVudmlyb25tZW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBkZWZhdWx0Q29tbWl0TXV0YXRpb24gPSBfcmVxdWlyZS5jb21taXRNdXRhdGlvbjtcblxudmFyIHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUsXG4gICAgdXNlRWZmZWN0ID0gUmVhY3QudXNlRWZmZWN0LFxuICAgIHVzZVJlZiA9IFJlYWN0LnVzZVJlZixcbiAgICB1c2VDYWxsYmFjayA9IFJlYWN0LnVzZUNhbGxiYWNrO1xuXG52YXIgdXNlSXNNb3VudGVkUmVmID0gcmVxdWlyZSgnLi91c2VJc01vdW50ZWRSZWYnKTtcblxuZnVuY3Rpb24gdXNlTXV0YXRpb24obXV0YXRpb24pIHtcbiAgdmFyIGNvbW1pdE11dGF0aW9uRm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGRlZmF1bHRDb21taXRNdXRhdGlvbjtcbiAgdmFyIGVudmlyb25tZW50ID0gdXNlUmVsYXlFbnZpcm9ubWVudCgpO1xuICB2YXIgaXNNb3VudGVkUmVmID0gdXNlSXNNb3VudGVkUmVmKCk7XG4gIHZhciBlbnZpcm9ubWVudFJlZiA9IHVzZVJlZihlbnZpcm9ubWVudCk7XG4gIHZhciBtdXRhdGlvblJlZiA9IHVzZVJlZihtdXRhdGlvbik7XG4gIHZhciBpbkZsaWdodE11dGF0aW9uc1JlZiA9IHVzZVJlZihuZXcgU2V0KCkpO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShmYWxzZSksXG4gICAgICBpc011dGF0aW9uSW5GbGlnaHQgPSBfdXNlU3RhdGVbMF0sXG4gICAgICBzZXRNdXRhdGlvbkluRmxpZ2h0ID0gX3VzZVN0YXRlWzFdO1xuXG4gIHZhciBjbGVhbnVwID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGRpc3Bvc2FibGUpIHtcbiAgICBpZiAoZW52aXJvbm1lbnRSZWYuY3VycmVudCA9PT0gZW52aXJvbm1lbnQgJiYgbXV0YXRpb25SZWYuY3VycmVudCA9PT0gbXV0YXRpb24pIHtcbiAgICAgIGluRmxpZ2h0TXV0YXRpb25zUmVmLmN1cnJlbnRbXCJkZWxldGVcIl0oZGlzcG9zYWJsZSk7XG5cbiAgICAgIGlmIChpc01vdW50ZWRSZWYuY3VycmVudCkge1xuICAgICAgICBzZXRNdXRhdGlvbkluRmxpZ2h0KGluRmxpZ2h0TXV0YXRpb25zUmVmLmN1cnJlbnQuc2l6ZSA+IDApO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2Vudmlyb25tZW50LCBpc01vdW50ZWRSZWYsIG11dGF0aW9uXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVudmlyb25tZW50UmVmLmN1cnJlbnQgIT09IGVudmlyb25tZW50IHx8IG11dGF0aW9uUmVmLmN1cnJlbnQgIT09IG11dGF0aW9uKSB7XG4gICAgICBpbkZsaWdodE11dGF0aW9uc1JlZi5jdXJyZW50ID0gbmV3IFNldCgpO1xuXG4gICAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgc2V0TXV0YXRpb25JbkZsaWdodChmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGVudmlyb25tZW50UmVmLmN1cnJlbnQgPSBlbnZpcm9ubWVudDtcbiAgICAgIG11dGF0aW9uUmVmLmN1cnJlbnQgPSBtdXRhdGlvbjtcbiAgICB9XG4gIH0sIFtlbnZpcm9ubWVudCwgaXNNb3VudGVkUmVmLCBtdXRhdGlvbl0pO1xuICB2YXIgY29tbWl0ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGNvbmZpZykge1xuICAgIHZhciBkaXNwb3NhYmxlID0gY29tbWl0TXV0YXRpb25GbihlbnZpcm9ubWVudCwgKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIGNvbmZpZyksIHt9LCB7XG4gICAgICBtdXRhdGlvbjogbXV0YXRpb24sXG4gICAgICBvbkNvbXBsZXRlZDogZnVuY3Rpb24gb25Db21wbGV0ZWQocmVzcG9uc2UsIGVycm9ycykge1xuICAgICAgICBjbGVhbnVwKGRpc3Bvc2FibGUpO1xuICAgICAgICBjb25maWcub25Db21wbGV0ZWQgJiYgY29uZmlnLm9uQ29tcGxldGVkKHJlc3BvbnNlLCBlcnJvcnMpO1xuICAgICAgfSxcbiAgICAgIG9uRXJyb3I6IGZ1bmN0aW9uIG9uRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgY2xlYW51cChkaXNwb3NhYmxlKTtcbiAgICAgICAgY29uZmlnLm9uRXJyb3IgJiYgY29uZmlnLm9uRXJyb3IoZXJyb3IpO1xuICAgICAgfSxcbiAgICAgIG9uVW5zdWJzY3JpYmU6IGZ1bmN0aW9uIG9uVW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGNsZWFudXAoZGlzcG9zYWJsZSk7XG4gICAgICAgIGNvbmZpZy5vblVuc3Vic2NyaWJlICYmIGNvbmZpZy5vblVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIGluRmxpZ2h0TXV0YXRpb25zUmVmLmN1cnJlbnQuYWRkKGRpc3Bvc2FibGUpO1xuXG4gICAgaWYgKGlzTW91bnRlZFJlZi5jdXJyZW50KSB7XG4gICAgICBzZXRNdXRhdGlvbkluRmxpZ2h0KHRydWUpO1xuICAgIH1cblxuICAgIHJldHVybiBkaXNwb3NhYmxlO1xuICB9LCBbY2xlYW51cCwgY29tbWl0TXV0YXRpb25GbiwgZW52aXJvbm1lbnQsIGlzTW91bnRlZFJlZiwgbXV0YXRpb25dKTtcbiAgcmV0dXJuIFtjb21taXQsIGlzTXV0YXRpb25JbkZsaWdodF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXNlTXV0YXRpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcblxudmFyIGdldFBhZ2luYXRpb25NZXRhZGF0YSA9IHJlcXVpcmUoJy4vZ2V0UGFnaW5hdGlvbk1ldGFkYXRhJyk7XG5cbnZhciB1c2VMb2FkTW9yZUZ1bmN0aW9uID0gcmVxdWlyZSgnLi91c2VMb2FkTW9yZUZ1bmN0aW9uJyk7XG5cbnZhciB1c2VSZWZldGNoYWJsZUZyYWdtZW50Tm9kZSA9IHJlcXVpcmUoJy4vdXNlUmVmZXRjaGFibGVGcmFnbWVudE5vZGUnKTtcblxudmFyIHVzZVN0YXRpY0ZyYWdtZW50Tm9kZVdhcm5pbmcgPSByZXF1aXJlKCcuL3VzZVN0YXRpY0ZyYWdtZW50Tm9kZVdhcm5pbmcnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICB1c2VDYWxsYmFjayA9IF9yZXF1aXJlLnVzZUNhbGxiYWNrLFxuICAgIHVzZURlYnVnVmFsdWUgPSBfcmVxdWlyZS51c2VEZWJ1Z1ZhbHVlLFxuICAgIHVzZVN0YXRlID0gX3JlcXVpcmUudXNlU3RhdGU7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgZ2V0RnJhZ21lbnQgPSBfcmVxdWlyZTIuZ2V0RnJhZ21lbnQsXG4gICAgZ2V0RnJhZ21lbnRJZGVudGlmaWVyID0gX3JlcXVpcmUyLmdldEZyYWdtZW50SWRlbnRpZmllcjtcblxuZnVuY3Rpb24gdXNlUGFnaW5hdGlvbkZyYWdtZW50KGZyYWdtZW50SW5wdXQsIHBhcmVudEZyYWdtZW50UmVmKSB7XG4gIHZhciBmcmFnbWVudE5vZGUgPSBnZXRGcmFnbWVudChmcmFnbWVudElucHV0KTtcbiAgdXNlU3RhdGljRnJhZ21lbnROb2RlV2FybmluZyhmcmFnbWVudE5vZGUsICdmaXJzdCBhcmd1bWVudCBvZiB1c2VQYWdpbmF0aW9uRnJhZ21lbnQoKScpO1xuICB2YXIgY29tcG9uZW50RGlzcGxheU5hbWUgPSAndXNlUGFnaW5hdGlvbkZyYWdtZW50KCknO1xuXG4gIHZhciBfZ2V0UGFnaW5hdGlvbk1ldGFkYXQgPSBnZXRQYWdpbmF0aW9uTWV0YWRhdGEoZnJhZ21lbnROb2RlLCBjb21wb25lbnREaXNwbGF5TmFtZSksXG4gICAgICBjb25uZWN0aW9uUGF0aEluRnJhZ21lbnREYXRhID0gX2dldFBhZ2luYXRpb25NZXRhZGF0LmNvbm5lY3Rpb25QYXRoSW5GcmFnbWVudERhdGEsXG4gICAgICBwYWdpbmF0aW9uUmVxdWVzdCA9IF9nZXRQYWdpbmF0aW9uTWV0YWRhdC5wYWdpbmF0aW9uUmVxdWVzdCxcbiAgICAgIHBhZ2luYXRpb25NZXRhZGF0YSA9IF9nZXRQYWdpbmF0aW9uTWV0YWRhdC5wYWdpbmF0aW9uTWV0YWRhdGEsXG4gICAgICBpZGVudGlmaWVyRmllbGQgPSBfZ2V0UGFnaW5hdGlvbk1ldGFkYXQuaWRlbnRpZmllckZpZWxkO1xuXG4gIHZhciBfdXNlUmVmZXRjaGFibGVGcmFnbWUgPSB1c2VSZWZldGNoYWJsZUZyYWdtZW50Tm9kZShmcmFnbWVudE5vZGUsIHBhcmVudEZyYWdtZW50UmVmLCBjb21wb25lbnREaXNwbGF5TmFtZSksXG4gICAgICBmcmFnbWVudERhdGEgPSBfdXNlUmVmZXRjaGFibGVGcmFnbWUuZnJhZ21lbnREYXRhLFxuICAgICAgZnJhZ21lbnRSZWYgPSBfdXNlUmVmZXRjaGFibGVGcmFnbWUuZnJhZ21lbnRSZWYsXG4gICAgICByZWZldGNoID0gX3VzZVJlZmV0Y2hhYmxlRnJhZ21lLnJlZmV0Y2g7XG5cbiAgdmFyIGZyYWdtZW50SWRlbnRpZmllciA9IGdldEZyYWdtZW50SWRlbnRpZmllcihmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmKTsgLy8gQmFja3dhcmQgcGFnaW5hdGlvblxuXG4gIHZhciBfdXNlTG9hZE1vcmUgPSB1c2VMb2FkTW9yZSh7XG4gICAgY29tcG9uZW50RGlzcGxheU5hbWU6IGNvbXBvbmVudERpc3BsYXlOYW1lLFxuICAgIGNvbm5lY3Rpb25QYXRoSW5GcmFnbWVudERhdGE6IGNvbm5lY3Rpb25QYXRoSW5GcmFnbWVudERhdGEsXG4gICAgZGlyZWN0aW9uOiAnYmFja3dhcmQnLFxuICAgIGZyYWdtZW50RGF0YTogZnJhZ21lbnREYXRhLFxuICAgIGZyYWdtZW50SWRlbnRpZmllcjogZnJhZ21lbnRJZGVudGlmaWVyLFxuICAgIGZyYWdtZW50Tm9kZTogZnJhZ21lbnROb2RlLFxuICAgIGZyYWdtZW50UmVmOiBmcmFnbWVudFJlZixcbiAgICBpZGVudGlmaWVyRmllbGQ6IGlkZW50aWZpZXJGaWVsZCxcbiAgICBwYWdpbmF0aW9uTWV0YWRhdGE6IHBhZ2luYXRpb25NZXRhZGF0YSxcbiAgICBwYWdpbmF0aW9uUmVxdWVzdDogcGFnaW5hdGlvblJlcXVlc3RcbiAgfSksXG4gICAgICBsb2FkUHJldmlvdXMgPSBfdXNlTG9hZE1vcmVbMF0sXG4gICAgICBoYXNQcmV2aW91cyA9IF91c2VMb2FkTW9yZVsxXSxcbiAgICAgIGlzTG9hZGluZ1ByZXZpb3VzID0gX3VzZUxvYWRNb3JlWzJdLFxuICAgICAgZGlzcG9zZUZldGNoUHJldmlvdXMgPSBfdXNlTG9hZE1vcmVbM107IC8vIEZvcndhcmQgcGFnaW5hdGlvblxuXG5cbiAgdmFyIF91c2VMb2FkTW9yZTIgPSB1c2VMb2FkTW9yZSh7XG4gICAgY29tcG9uZW50RGlzcGxheU5hbWU6IGNvbXBvbmVudERpc3BsYXlOYW1lLFxuICAgIGNvbm5lY3Rpb25QYXRoSW5GcmFnbWVudERhdGE6IGNvbm5lY3Rpb25QYXRoSW5GcmFnbWVudERhdGEsXG4gICAgZGlyZWN0aW9uOiAnZm9yd2FyZCcsXG4gICAgZnJhZ21lbnREYXRhOiBmcmFnbWVudERhdGEsXG4gICAgZnJhZ21lbnRJZGVudGlmaWVyOiBmcmFnbWVudElkZW50aWZpZXIsXG4gICAgZnJhZ21lbnROb2RlOiBmcmFnbWVudE5vZGUsXG4gICAgZnJhZ21lbnRSZWY6IGZyYWdtZW50UmVmLFxuICAgIGlkZW50aWZpZXJGaWVsZDogaWRlbnRpZmllckZpZWxkLFxuICAgIHBhZ2luYXRpb25NZXRhZGF0YTogcGFnaW5hdGlvbk1ldGFkYXRhLFxuICAgIHBhZ2luYXRpb25SZXF1ZXN0OiBwYWdpbmF0aW9uUmVxdWVzdFxuICB9KSxcbiAgICAgIGxvYWROZXh0ID0gX3VzZUxvYWRNb3JlMlswXSxcbiAgICAgIGhhc05leHQgPSBfdXNlTG9hZE1vcmUyWzFdLFxuICAgICAgaXNMb2FkaW5nTmV4dCA9IF91c2VMb2FkTW9yZTJbMl0sXG4gICAgICBkaXNwb3NlRmV0Y2hOZXh0ID0gX3VzZUxvYWRNb3JlMlszXTtcblxuICB2YXIgcmVmZXRjaFBhZ2luYXRpb24gPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAodmFyaWFibGVzLCBvcHRpb25zKSB7XG4gICAgZGlzcG9zZUZldGNoTmV4dCgpO1xuICAgIGRpc3Bvc2VGZXRjaFByZXZpb3VzKCk7XG4gICAgcmV0dXJuIHJlZmV0Y2godmFyaWFibGVzLCAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgb3B0aW9ucyksIHt9LCB7XG4gICAgICBfX2Vudmlyb25tZW50OiB1bmRlZmluZWRcbiAgICB9KSk7XG4gIH0sIFtkaXNwb3NlRmV0Y2hOZXh0LCBkaXNwb3NlRmV0Y2hQcmV2aW91cywgcmVmZXRjaF0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICB1c2VEZWJ1Z1ZhbHVlKHtcbiAgICAgIGZyYWdtZW50OiBmcmFnbWVudE5vZGUubmFtZSxcbiAgICAgIGRhdGE6IGZyYWdtZW50RGF0YSxcbiAgICAgIGhhc05leHQ6IGhhc05leHQsXG4gICAgICBpc0xvYWRpbmdOZXh0OiBpc0xvYWRpbmdOZXh0LFxuICAgICAgaGFzUHJldmlvdXM6IGhhc1ByZXZpb3VzLFxuICAgICAgaXNMb2FkaW5nUHJldmlvdXM6IGlzTG9hZGluZ1ByZXZpb3VzXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRhdGE6IGZyYWdtZW50RGF0YSxcbiAgICBsb2FkTmV4dDogbG9hZE5leHQsXG4gICAgbG9hZFByZXZpb3VzOiBsb2FkUHJldmlvdXMsXG4gICAgaGFzTmV4dDogaGFzTmV4dCxcbiAgICBoYXNQcmV2aW91czogaGFzUHJldmlvdXMsXG4gICAgaXNMb2FkaW5nTmV4dDogaXNMb2FkaW5nTmV4dCxcbiAgICBpc0xvYWRpbmdQcmV2aW91czogaXNMb2FkaW5nUHJldmlvdXMsXG4gICAgcmVmZXRjaDogcmVmZXRjaFBhZ2luYXRpb25cbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlTG9hZE1vcmUoYXJncykge1xuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoZmFsc2UpLFxuICAgICAgaXNMb2FkaW5nTW9yZSA9IF91c2VTdGF0ZVswXSxcbiAgICAgIHNldElzTG9hZGluZ01vcmUgPSBfdXNlU3RhdGVbMV07XG5cbiAgdmFyIG9ic2VydmVyID0ge1xuICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgIHJldHVybiBzZXRJc0xvYWRpbmdNb3JlKHRydWUpO1xuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgcmV0dXJuIHNldElzTG9hZGluZ01vcmUoZmFsc2UpO1xuICAgIH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgcmV0dXJuIHNldElzTG9hZGluZ01vcmUoZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlUmVzZXQgPSBmdW5jdGlvbiBoYW5kbGVSZXNldCgpIHtcbiAgICByZXR1cm4gc2V0SXNMb2FkaW5nTW9yZShmYWxzZSk7XG4gIH07XG5cbiAgdmFyIF91c2VMb2FkTW9yZUZ1bmN0aW9uID0gdXNlTG9hZE1vcmVGdW5jdGlvbigoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgYXJncyksIHt9LCB7XG4gICAgb2JzZXJ2ZXI6IG9ic2VydmVyLFxuICAgIG9uUmVzZXQ6IGhhbmRsZVJlc2V0XG4gIH0pKSxcbiAgICAgIGxvYWRNb3JlID0gX3VzZUxvYWRNb3JlRnVuY3Rpb25bMF0sXG4gICAgICBoYXNNb3JlID0gX3VzZUxvYWRNb3JlRnVuY3Rpb25bMV0sXG4gICAgICBkaXNwb3NlRmV0Y2ggPSBfdXNlTG9hZE1vcmVGdW5jdGlvblsyXTtcblxuICByZXR1cm4gW2xvYWRNb3JlLCBoYXNNb3JlLCBpc0xvYWRpbmdNb3JlLCBkaXNwb3NlRmV0Y2hdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZVBhZ2luYXRpb25GcmFnbWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHVzZUxhenlMb2FkUXVlcnlOb2RlID0gcmVxdWlyZSgnLi91c2VMYXp5TG9hZFF1ZXJ5Tm9kZScpO1xuXG52YXIgdXNlTWVtb09wZXJhdGlvbkRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL3VzZU1lbW9PcGVyYXRpb25EZXNjcmlwdG9yJyk7XG5cbnZhciB1c2VSZWxheUVudmlyb25tZW50ID0gcmVxdWlyZSgnLi91c2VSZWxheUVudmlyb25tZW50Jyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vbG9hZFF1ZXJ5JyksXG4gICAgdXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlciA9IF9yZXF1aXJlLnVzZVRyYWNrTG9hZFF1ZXJ5SW5SZW5kZXI7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHVzZURlYnVnVmFsdWUgPSBfcmVxdWlyZTIudXNlRGVidWdWYWx1ZTtcblxudmFyIF9yZXF1aXJlMyA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICBfcmVxdWlyZTMkX19pbnRlcm5hbCA9IF9yZXF1aXJlMy5fX2ludGVybmFsLFxuICAgIGZldGNoUXVlcnlEZWR1cGVkID0gX3JlcXVpcmUzJF9faW50ZXJuYWwuZmV0Y2hRdWVyeURlZHVwZWQsXG4gICAgZmV0Y2hRdWVyeSA9IF9yZXF1aXJlMyRfX2ludGVybmFsLmZldGNoUXVlcnk7XG5cbmZ1bmN0aW9uIHVzZVByZWxvYWRlZFF1ZXJ5KGdxbFF1ZXJ5LCBwcmVsb2FkZWRRdWVyeSwgb3B0aW9ucykge1xuICAvLyBXZSBuZWVkIHRvIHVzZSB0aGlzIGhvb2sgaW4gb3JkZXIgdG8gYmUgYWJsZSB0byB0cmFjayBpZlxuICAvLyBsb2FkUXVlcnkgd2FzIGNhbGxlZCBkdXJpbmcgcmVuZGVyXG4gIHVzZVRyYWNrTG9hZFF1ZXJ5SW5SZW5kZXIoKTtcbiAgdmFyIGVudmlyb25tZW50ID0gdXNlUmVsYXlFbnZpcm9ubWVudCgpO1xuICB2YXIgZmV0Y2hLZXkgPSBwcmVsb2FkZWRRdWVyeS5mZXRjaEtleSxcbiAgICAgIGZldGNoUG9saWN5ID0gcHJlbG9hZGVkUXVlcnkuZmV0Y2hQb2xpY3ksXG4gICAgICBzb3VyY2UgPSBwcmVsb2FkZWRRdWVyeS5zb3VyY2UsXG4gICAgICB2YXJpYWJsZXMgPSBwcmVsb2FkZWRRdWVyeS52YXJpYWJsZXMsXG4gICAgICBuZXR3b3JrQ2FjaGVDb25maWcgPSBwcmVsb2FkZWRRdWVyeS5uZXR3b3JrQ2FjaGVDb25maWc7XG4gIHZhciBvcGVyYXRpb24gPSB1c2VNZW1vT3BlcmF0aW9uRGVzY3JpcHRvcihncWxRdWVyeSwgdmFyaWFibGVzLCBuZXR3b3JrQ2FjaGVDb25maWcpO1xuICB2YXIgdXNlTGF6eUxvYWRRdWVyeU5vZGVQYXJhbXM7XG5cbiAgaWYgKHByZWxvYWRlZFF1ZXJ5LmtpbmQgPT09ICdQcmVsb2FkZWRRdWVyeV9ERVBSRUNBVEVEJykge1xuICAgICEob3BlcmF0aW9uLnJlcXVlc3Qubm9kZS5wYXJhbXMubmFtZSA9PT0gcHJlbG9hZGVkUXVlcnkubmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICd1c2VQcmVsb2FkZWRRdWVyeSgpOiBFeHBlY3RlZCBkYXRhIHRvIGJlIHByZWZldGNoZWQgZm9yIHF1ZXJ5IGAlc2AsICcgKyAnZ290IHByZWZldGNoIHJlc3VsdHMgZm9yIHF1ZXJ5IGAlc2AuJywgb3BlcmF0aW9uLnJlcXVlc3Qubm9kZS5wYXJhbXMubmFtZSwgcHJlbG9hZGVkUXVlcnkubmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHVzZUxhenlMb2FkUXVlcnlOb2RlUGFyYW1zID0ge1xuICAgICAgY29tcG9uZW50RGlzcGxheU5hbWU6ICd1c2VQcmVsb2FkZWRRdWVyeSgpJyxcbiAgICAgIGZldGNoS2V5OiBmZXRjaEtleSxcbiAgICAgIGZldGNoT2JzZXJ2YWJsZTogZmV0Y2hRdWVyeURlZHVwZWQoZW52aXJvbm1lbnQsIG9wZXJhdGlvbi5yZXF1ZXN0LmlkZW50aWZpZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGVudmlyb25tZW50ID09PSBwcmVsb2FkZWRRdWVyeS5lbnZpcm9ubWVudCAmJiBzb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBlbnZpcm9ubWVudC5leGVjdXRlV2l0aFNvdXJjZSh7XG4gICAgICAgICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgICAgICAgIHNvdXJjZTogc291cmNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGVudmlyb25tZW50LmV4ZWN1dGUoe1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBmZXRjaFBvbGljeTogZmV0Y2hQb2xpY3ksXG4gICAgICBxdWVyeTogb3BlcmF0aW9uLFxuICAgICAgcmVuZGVyUG9saWN5OiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuVU5TVEFCTEVfcmVuZGVyUG9saWN5XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZWxvYWRlZFF1ZXJ5LmlzRGlzcG9zZWQgPT09IGZhbHNlLCAndXNlUHJlbG9hZGVkUXVlcnkoKTogRXhwZWN0ZWQgcHJlbG9hZGVkUXVlcnkgdG8gbm90IGJlIGRpc3Bvc2VkIHlldC4gJyArICdUaGlzIGlzIGJlY2F1c2UgZGlzcG9zaW5nIHRoZSBxdWVyeSBtYXJrcyBpdCBmb3IgZnV0dXJlIGdhcmJhZ2UgJyArICdjb2xsZWN0aW9uLCBhbmQgYXMgc3VjaCBxdWVyeSByZXN1bHRzIG1heSBubyBsb25nZXIgYmUgcHJlc2VudCBpbiB0aGUgUmVsYXkgJyArICdzdG9yZS4gSW4gdGhlIGZ1dHVyZSwgdGhpcyB3aWxsIGJlY29tZSBhIGhhcmQgZXJyb3IuJykgOiB2b2lkIDA7XG4gICAgdmFyIGZhbGxiYWNrRmV0Y2hPYnNlcnZhYmxlID0gZmV0Y2hRdWVyeShlbnZpcm9ubWVudCwgb3BlcmF0aW9uKTtcbiAgICB2YXIgZmV0Y2hPYnNlcnZhYmxlO1xuXG4gICAgaWYgKHNvdXJjZSAhPSBudWxsICYmIGVudmlyb25tZW50ID09PSBwcmVsb2FkZWRRdWVyeS5lbnZpcm9ubWVudCkge1xuICAgICAgLy8gSWYgdGhlIHNvdXJjZSBvYnNlcnZhYmxlIGV4aXN0cyBhbmQgdGhlIGVudmlyb25tZW50cyBtYXRjaCwgcmV1c2VcbiAgICAgIC8vIHRoZSBzb3VyY2Ugb2JzZXJ2YWJsZS5cbiAgICAgIC8vIElmIHRoZSBzb3VyY2Ugb2JzZXJ2YWJsZSBoYXBwZW5zIHRvIGJlIGVtcHR5LCB3ZSBuZWVkIHRvIGZhbGwgYmFja1xuICAgICAgLy8gYW5kIHJlLWV4ZWN1dGUgYW5kIGRlLWR1cGUgdGhlIHF1ZXJ5IChhdCByZW5kZXIgdGltZSkuXG4gICAgICBmZXRjaE9ic2VydmFibGUgPSBzb3VyY2UuaWZFbXB0eShmYWxsYmFja0ZldGNoT2JzZXJ2YWJsZSk7XG4gICAgfSBlbHNlIGlmIChlbnZpcm9ubWVudCAhPT0gcHJlbG9hZGVkUXVlcnkuZW52aXJvbm1lbnQpIHtcbiAgICAgIC8vIElmIGEgY2FsbCB0byBsb2FkUXVlcnkgaXMgbWFkZSB3aXRoIGEgcGFydGljdWxhciBlbnZpcm9ubWVudCwgYW5kIHRoYXRcbiAgICAgIC8vIHByZWxvYWRlZCBxdWVyeSBpcyBwYXNzZWQgdG8gdXNlUHJlbG9hZGVkUXVlcnkgaW4gYSBkaWZmZXJlbnQgZW52aXJvbm1lbnRcbiAgICAgIC8vIGNvbnRleHQsIHdlIGNhbm5vdCByZS11c2UgdGhlIGV4aXN0aW5nIHByZWxvYWRlZCBxdWVyeS5cbiAgICAgIC8vIEluc3RlYWQsIHdlIG5lZWQgdG8gZmFsbCBiYWNrIGFuZCByZS1leGVjdXRlIGFuZCBkZS1kdXBlIHRoZSBxdWVyeSB3aXRoXG4gICAgICAvLyB0aGUgbmV3IGVudmlyb25tZW50IChhdCByZW5kZXIgdGltZSkuXG4gICAgICAvLyBUT0RPIFQ2ODAzNjc1NiB0cmFjayBvY2N1cmVuY2VzIG9mIHRoaXMgd2FybmluZyBhbmQgdHVybiBpdCBpbnRvIGEgaGFyZCBlcnJvclxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ3VzZVByZWxvYWRlZFF1ZXJ5KCk6IHVzZVByZWxvYWRlZFF1ZXJ5IHdhcyBwYXNzZWQgYSBwcmVsb2FkZWQgcXVlcnkgJyArICd0aGF0IHdhcyBjcmVhdGVkIHdpdGggYSBkaWZmZXJlbnQgZW52aXJvbm1lbnQgdGhhbiB0aGUgb25lIHRoYXQgaXMgY3VycmVudGx5ICcgKyAnaW4gY29udGV4dC4gSW4gdGhlIGZ1dHVyZSwgdGhpcyB3aWxsIGJlY29tZSBhIGhhcmQgZXJyb3IuJykgOiB2b2lkIDA7XG4gICAgICBmZXRjaE9ic2VydmFibGUgPSBmYWxsYmFja0ZldGNoT2JzZXJ2YWJsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgKHNvdXJjZSA9PSBudWxsKVxuICAgICAgLy8gSWYgdGhlIHNvdXJjZSBvYnNlcnZhYmxlIGRvZXMgbm90IGV4aXN0LCB3ZSBuZWVkIHRvXG4gICAgICAvLyBmYWxsIGJhY2sgYW5kIHJlLWV4ZWN1dGUgYW5kIGRlLWR1cGUgdGhlIHF1ZXJ5IChhdCByZW5kZXIgdGltZSkuXG4gICAgICBmZXRjaE9ic2VydmFibGUgPSBmYWxsYmFja0ZldGNoT2JzZXJ2YWJsZTtcbiAgICB9XG5cbiAgICB1c2VMYXp5TG9hZFF1ZXJ5Tm9kZVBhcmFtcyA9IHtcbiAgICAgIGNvbXBvbmVudERpc3BsYXlOYW1lOiAndXNlUHJlbG9hZGVkUXVlcnkoKScsXG4gICAgICBmZXRjaE9ic2VydmFibGU6IGZldGNoT2JzZXJ2YWJsZSxcbiAgICAgIGZldGNoS2V5OiBmZXRjaEtleSxcbiAgICAgIGZldGNoUG9saWN5OiBmZXRjaFBvbGljeSxcbiAgICAgIHF1ZXJ5OiBvcGVyYXRpb24sXG4gICAgICByZW5kZXJQb2xpY3k6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5VTlNUQUJMRV9yZW5kZXJQb2xpY3lcbiAgICB9O1xuICB9XG5cbiAgdmFyIGRhdGEgPSB1c2VMYXp5TG9hZFF1ZXJ5Tm9kZSh1c2VMYXp5TG9hZFF1ZXJ5Tm9kZVBhcmFtcyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIHVzZURlYnVnVmFsdWUoe1xuICAgICAgcXVlcnk6IHByZWxvYWRlZFF1ZXJ5Lm5hbWUsXG4gICAgICB2YXJpYWJsZXM6IHByZWxvYWRlZFF1ZXJ5LnZhcmlhYmxlcyxcbiAgICAgIGRhdGE6IGRhdGEsXG4gICAgICBmZXRjaEtleTogZmV0Y2hLZXksXG4gICAgICBmZXRjaFBvbGljeTogZmV0Y2hQb2xpY3ksXG4gICAgICByZW5kZXJQb2xpY3k6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5VTlNUQUJMRV9yZW5kZXJQb2xpY3lcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZVByZWxvYWRlZFF1ZXJ5OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJcIikpO1xuXG52YXIgdXNlSXNNb3VudGVkUmVmID0gcmVxdWlyZSgnLi91c2VJc01vdW50ZWRSZWYnKTtcblxudmFyIHVzZVJlbGF5RW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL3VzZVJlbGF5RW52aXJvbm1lbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9sb2FkUXVlcnknKSxcbiAgICBsb2FkUXVlcnkgPSBfcmVxdWlyZS5sb2FkUXVlcnksXG4gICAgdXNlVHJhY2tMb2FkUXVlcnlJblJlbmRlciA9IF9yZXF1aXJlLnVzZVRyYWNrTG9hZFF1ZXJ5SW5SZW5kZXI7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHVzZUNhbGxiYWNrID0gX3JlcXVpcmUyLnVzZUNhbGxiYWNrLFxuICAgIHVzZUVmZmVjdCA9IF9yZXF1aXJlMi51c2VFZmZlY3QsXG4gICAgdXNlUmVmID0gX3JlcXVpcmUyLnVzZVJlZixcbiAgICB1c2VTdGF0ZSA9IF9yZXF1aXJlMi51c2VTdGF0ZTtcblxudmFyIGluaXRpYWxOdWxsUXVlcnlSZWZlcmVuY2VTdGF0ZSA9IHtcbiAga2luZDogJ051bGxRdWVyeVJlZmVyZW5jZSdcbn07XG5cbmZ1bmN0aW9uIHVzZVF1ZXJ5TG9hZGVyKHByZWxvYWRhYmxlUmVxdWVzdCwgaW5pdGlhbFF1ZXJ5UmVmZXJlbmNlKSB7XG4gIC8qKlxuICAgKiBXZSB3YW50IHRvIGFsd2F5cyBjYWxsIGBxdWVyeVJlZmVyZW5jZS5kaXNwb3NlKClgIGZvciBldmVyeSBjYWxsIHRvXG4gICAqIGBzZXRRdWVyeVJlZmVyZW5jZShsb2FkUXVlcnkoLi4uKSlgIHNvIHRoYXQgbm8gbGVha3Mgb2YgZGF0YSBpbiBSZWxheSBzdG9yZXNcbiAgICogd2lsbCBvY2N1ci5cbiAgICpcbiAgICogSG93ZXZlciwgYSBjYWxsIHRvIGBzZXRTdGF0ZShuZXdTdGF0ZSlgIGlzIG5vdCBhbHdheXMgZm9sbG93ZWQgYnkgYSBjb21taXQgd2hlcmVcbiAgICogdGhpcyB2YWx1ZSBpcyByZWZsZWN0ZWQgaW4gdGhlIHN0YXRlLiBUaHVzLCB3ZSBjYW5ub3QgcmVsaWFibHkgY2xlYW4gdXAgZWFjaFxuICAgKiByZWYgd2l0aCBgdXNlRWZmZWN0KCgpID0+ICgpID0+IHF1ZXJ5UmVmZXJlbmNlLmRpc3Bvc2UoKSwgW3F1ZXJ5UmVmZXJlbmNlXSlgLlxuICAgKlxuICAgKiBJbnN0ZWFkLCB3ZSBrZWVwIHRyYWNrIG9mIGVhY2ggY2FsbCB0byBgbG9hZFF1ZXJ5YCBpbiBhIHJlZi5cbiAgICogUmVseWluZyBvbiB0aGUgZmFjdCB0aGF0IGlmIGEgc3RhdGUgY2hhbmdlIGNvbW1pdHMsIG5vIHN0YXRlIGNoYW5nZXMgdGhhdCB3ZXJlXG4gICAqIGluaXRpYXRlZCBwcmlvciB0byB0aGUgY3VycmVudGx5IGNvbW1pdHRpbmcgc3RhdGUgY2hhbmdlIHdpbGwgZXZlciBzdWJzZXF1ZW50bHlcbiAgICogY29tbWl0LCB3ZSBjYW4gc2FmZWx5IGRpc3Bvc2Ugb2YgYWxsIHByZWxvYWRlZCBxdWVyeSByZWZlcmVuY2VzXG4gICAqIGFzc29jaWF0ZWQgd2l0aCBzdGF0ZSBjaGFuZ2VzIGluaXRpYXRlZCBwcmlvciB0byB0aGUgY3VycmVudGx5IGNvbW1pdHRpbmcgc3RhdGVcbiAgICogY2hhbmdlLlxuICAgKlxuICAgKiBGaW5hbGx5LCB3aGVuIHRoZSBob29rIHVubW91bnRzLCB3ZSBhbHNvIGRpc3Bvc2Ugb2YgYWxsIHJlbWFpbmluZyB1bmNvbW1pdHRlZFxuICAgKiBxdWVyeSByZWZlcmVuY2VzLlxuICAgKi9cbiAgdmFyIGluaXRpYWxRdWVyeVJlZmVyZW5jZUludGVybmFsID0gaW5pdGlhbFF1ZXJ5UmVmZXJlbmNlICE9PSBudWxsICYmIGluaXRpYWxRdWVyeVJlZmVyZW5jZSAhPT0gdm9pZCAwID8gaW5pdGlhbFF1ZXJ5UmVmZXJlbmNlIDogaW5pdGlhbE51bGxRdWVyeVJlZmVyZW5jZVN0YXRlO1xuICB2YXIgZW52aXJvbm1lbnQgPSB1c2VSZWxheUVudmlyb25tZW50KCk7XG4gIHVzZVRyYWNrTG9hZFF1ZXJ5SW5SZW5kZXIoKTtcbiAgdmFyIGlzTW91bnRlZFJlZiA9IHVzZUlzTW91bnRlZFJlZigpO1xuICB2YXIgdW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlc1JlZiA9IHVzZVJlZihuZXcgU2V0KFtpbml0aWFsUXVlcnlSZWZlcmVuY2VJbnRlcm5hbF0pKTtcblxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpbml0aWFsUXVlcnlSZWZlcmVuY2VJbnRlcm5hbDtcbiAgfSksXG4gICAgICBxdWVyeVJlZmVyZW5jZSA9IF91c2VTdGF0ZVswXSxcbiAgICAgIHNldFF1ZXJ5UmVmZXJlbmNlID0gX3VzZVN0YXRlWzFdO1xuXG4gIHZhciBfdXNlU3RhdGUyID0gdXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpbml0aWFsUXVlcnlSZWZlcmVuY2VJbnRlcm5hbDtcbiAgfSksXG4gICAgICBwcmV2aW91c0luaXRpYWxRdWVyeVJlZmVyZW5jZSA9IF91c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRQcmV2aW91c0luaXRpYWxRdWVyeVJlZmVyZW5jZSA9IF91c2VTdGF0ZTJbMV07XG5cbiAgaWYgKGluaXRpYWxRdWVyeVJlZmVyZW5jZUludGVybmFsICE9PSBwcmV2aW91c0luaXRpYWxRdWVyeVJlZmVyZW5jZSkge1xuICAgIC8vIFJlbmRlcmluZyB0aGUgcXVlcnkgcmVmZXJlbmNlIG1ha2VzIGl0IFwibWFuYWdlZFwiIGJ5IHRoaXMgaG9vaywgc29cbiAgICAvLyB3ZSBzdGFydCBrZWVwaW5nIHRyYWNrIG9mIGl0IHNvIHdlIGNhbiBkaXNwb3NlIGl0IHdoZW4gaXQgaXMgbm8gbG9uZ2VyXG4gICAgLy8gbmVjZXNzYXJ5IGhlcmVcbiAgICAvLyBUT0RPKFQ3ODQ0NjYzNyk6IEhhbmRsZSBkaXNwb3NhbCBvZiBtYW5hZ2VkIHF1ZXJ5IHJlZmVyZW5jZXMgaW5cbiAgICAvLyBjb21wb25lbnRzIHRoYXQgd2VyZSBuZXZlciBtb3VudGVkIGFmdGVyIHJlbmRlcmluZ1xuICAgIHVuZGlzcG9zZWRRdWVyeVJlZmVyZW5jZXNSZWYuY3VycmVudC5hZGQoaW5pdGlhbFF1ZXJ5UmVmZXJlbmNlSW50ZXJuYWwpO1xuICAgIHNldFByZXZpb3VzSW5pdGlhbFF1ZXJ5UmVmZXJlbmNlKGluaXRpYWxRdWVyeVJlZmVyZW5jZUludGVybmFsKTtcbiAgICBzZXRRdWVyeVJlZmVyZW5jZShpbml0aWFsUXVlcnlSZWZlcmVuY2VJbnRlcm5hbCk7XG4gIH1cblxuICB2YXIgZGlzcG9zZVF1ZXJ5ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc01vdW50ZWRSZWYuY3VycmVudCkge1xuICAgICAgdW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlc1JlZi5jdXJyZW50LmFkZChpbml0aWFsTnVsbFF1ZXJ5UmVmZXJlbmNlU3RhdGUpO1xuICAgICAgc2V0UXVlcnlSZWZlcmVuY2UoaW5pdGlhbE51bGxRdWVyeVJlZmVyZW5jZVN0YXRlKTtcbiAgICB9XG4gIH0sIFtpc01vdW50ZWRSZWZdKTtcbiAgdmFyIHF1ZXJ5TG9hZGVyQ2FsbGJhY2sgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAodmFyaWFibGVzLCBvcHRpb25zKSB7XG4gICAgdmFyIG1lcmdlZE9wdGlvbnMgPSBvcHRpb25zICE9IG51bGwgJiYgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnX19lbnZpcm9ubWVudCcpID8ge1xuICAgICAgZmV0Y2hQb2xpY3k6IG9wdGlvbnMuZmV0Y2hQb2xpY3ksXG4gICAgICBuZXR3b3JrQ2FjaGVDb25maWc6IG9wdGlvbnMubmV0d29ya0NhY2hlQ29uZmlnLFxuICAgICAgX19uYW1lRm9yV2FybmluZzogb3B0aW9ucy5fX25hbWVGb3JXYXJuaW5nXG4gICAgfSA6IG9wdGlvbnM7XG5cbiAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgIHZhciBfb3B0aW9ucyRfX2Vudmlyb25tZW47XG5cbiAgICAgIHZhciB1cGRhdGVkUXVlcnlSZWZlcmVuY2UgPSBsb2FkUXVlcnkoKF9vcHRpb25zJF9fZW52aXJvbm1lbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5fX2Vudmlyb25tZW50KSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRfX2Vudmlyb25tZW4gIT09IHZvaWQgMCA/IF9vcHRpb25zJF9fZW52aXJvbm1lbiA6IGVudmlyb25tZW50LCBwcmVsb2FkYWJsZVJlcXVlc3QsIHZhcmlhYmxlcywgbWVyZ2VkT3B0aW9ucyk7XG4gICAgICB1bmRpc3Bvc2VkUXVlcnlSZWZlcmVuY2VzUmVmLmN1cnJlbnQuYWRkKHVwZGF0ZWRRdWVyeVJlZmVyZW5jZSk7XG4gICAgICBzZXRRdWVyeVJlZmVyZW5jZSh1cGRhdGVkUXVlcnlSZWZlcmVuY2UpO1xuICAgIH1cbiAgfSwgW2Vudmlyb25tZW50LCBwcmVsb2FkYWJsZVJlcXVlc3QsIHNldFF1ZXJ5UmVmZXJlbmNlLCBpc01vdW50ZWRSZWZdKTtcbiAgdmFyIG1heWJlSGlkZGVuT3JGYXN0UmVmcmVzaCA9IHVzZVJlZihmYWxzZSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEF0dGVtcHQgdG8gZGV0ZWN0IGlmIHRoZSBjb21wb25lbnQgd2FzXG4gICAgICAvLyBoaWRkZW4gKGJ5IE9mZnNjcmVlbiBBUEkpLCBvciBmYXN0IHJlZnJlc2ggb2NjdXJlZDtcbiAgICAgIC8vIE9ubHkgaW4gdGhlc2Ugc2l0dWF0aW9ucyB3b3VsZCB0aGUgZWZmZWN0IGNsZWFudXBcbiAgICAgIC8vIGZvciBcInVubW91bnRpbmdcIiBydW4gbXVsdGlwbGUgdGltZXMsIHNvIGlmXG4gICAgICAvLyB3ZSBhcmUgZXZlciBhYmxlIHRvIHJlYWQgdGhpcyByZWYgd2l0aCBhIHZhbHVlXG4gICAgICAvLyBvZiB0cnVlLCBpdCBtZWFucyB0aGF0IG9uZSBvZiB0aGVzZSBjYXNlc1xuICAgICAgLy8gaGFzIGhhcHBlbmVkLlxuICAgICAgbWF5YmVIaWRkZW5PckZhc3RSZWZyZXNoLmN1cnJlbnQgPSB0cnVlO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobWF5YmVIaWRkZW5PckZhc3RSZWZyZXNoLmN1cnJlbnQgPT09IHRydWUpIHtcbiAgICAgIC8vIFRoaXMgYmxvY2sgb25seSBydW5zIGlmIHRoZSBjb21wb25lbnQgaGFzIHByZXZpb3VzbHkgXCJ1bm1vdW50ZWRcIlxuICAgICAgLy8gZHVlIHRvIGl0IGJlaW5nIGhpZGRlbiBieSB0aGUgT2Zmc2NyZWVuIEFQSSwgb3IgZHVyaW5nIGZhc3QgcmVmcmVzaC5cbiAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHRoZSBjdXJyZW50IHF1ZXJ5UmVmZXJlbmNlIHdpbGwgaGF2ZSBiZWVuIGRpc3Bvc2VkXG4gICAgICAvLyBieSB0aGUgcHJldmlvdXMgY2xlYW51cCwgc28gaW5zdGVhZCBvZiBhdHRlbXB0aW5nIHRvXG4gICAgICAvLyBkbyBvdXIgcmVndWxhciBjb21taXQgc2V0dXAsIHdoaWNoIHdvdWxkIGluY29ycmVjdGx5IGxlYXZlIG91clxuICAgICAgLy8gY3VycmVudCBxdWVyeVJlZmVyZW5jZSBkaXNwb3NlZCwgd2UgbmVlZCB0byBsb2FkIHRoZSBxdWVyeSBhZ2FpblxuICAgICAgLy8gYW5kIGZvcmNlIGEgcmUtcmVuZGVyIGJ5IGNhbGxpbmcgcXVlcnlMb2FkZXJDYWxsYmFjayBhZ2FpbixcbiAgICAgIC8vIHNvIHRoYXQgdGhlIHF1ZXJ5UmVmZXJlbmNlIGlzIGNvcnJlY3RseSByZS1yZXRhaW5lZCwgYW5kXG4gICAgICAvLyBwb3RlbnRpYWxseSByZWZldGNoZWQgaWYgbmVjZXNzYXJ5LlxuICAgICAgbWF5YmVIaWRkZW5PckZhc3RSZWZyZXNoLmN1cnJlbnQgPSBmYWxzZTtcblxuICAgICAgaWYgKHF1ZXJ5UmVmZXJlbmNlLmtpbmQgIT09ICdOdWxsUXVlcnlSZWZlcmVuY2UnKSB7XG4gICAgICAgIHF1ZXJ5TG9hZGVyQ2FsbGJhY2socXVlcnlSZWZlcmVuY2UudmFyaWFibGVzLCB7XG4gICAgICAgICAgZmV0Y2hQb2xpY3k6IHF1ZXJ5UmVmZXJlbmNlLmZldGNoUG9saWN5LFxuICAgICAgICAgIG5ldHdvcmtDYWNoZUNvbmZpZzogcXVlcnlSZWZlcmVuY2UubmV0d29ya0NhY2hlQ29uZmlnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBXaGVuIGEgbmV3IHF1ZXJ5UmVmZXJlbmNlIGlzIGNvbW1pdHRlZCwgd2UgaXRlcmF0ZSBvdmVyIGFsbFxuICAgIC8vIHF1ZXJ5IHJlZmVyZW5jZXMgaW4gdW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlcyBhbmQgZGlzcG9zZSBhbGwgb2ZcbiAgICAvLyB0aGUgcmVmcyB0aGF0IGFyZW4ndCB0aGUgY3VycmVudGx5IGNvbW1pdHRlZCBvbmUuIFRoaXMgZW5zdXJlc1xuICAgIC8vIHRoYXQgd2UgZG9uJ3QgbGVhdmUgYW55IGRhbmdsaW5nIHF1ZXJ5IHJlZmVyZW5jZXMgZm9yIHRoZVxuICAgIC8vIGNhc2UgdGhhdCBsb2FkUXVlcnkgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGJlZm9yZSBjb21taXQ7IHdoZW5cbiAgICAvLyB0aGlzIGhhcHBlbnMsIG11bHRpcGxlIHN0YXRlIHVwZGF0ZXMgd2lsbCBiZSBzY2hlZHVsZWQsIGJ1dCBvbmx5IG9uZVxuICAgIC8vIHdpbGwgY29tbWl0LCBtZWFuaW5nIHRoYXQgd2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIGFuZCBkaXNwb3NlIGFueVxuICAgIC8vIHF1ZXJ5IHJlZmVyZW5jZXMgdGhhdCBkb24ndCBlbmQgdXAgY29tbWl0dGluZy5cbiAgICAvLyAtIFdlIGFyZSByZWx5aW5nIG9uIHRoZSBmYWN0IHRoYXQgc2V0cyBpdGVyYXRlIGluIGluc2VydGlvbiBvcmRlciwgYW5kIHdlXG4gICAgLy8gY2FuIHJlbW92ZSBpdGVtcyBmcm9tIGEgc2V0IGFzIHdlIGl0ZXJhdGUgb3ZlciBpdCAoaS5lLiBubyBpdGVyYXRvclxuICAgIC8vIGludmFsaWRhdGlvbiBpc3N1ZXMuKSBUaHVzLCBpdCBpcyBzYWZlIHRvIGxvb3AgdGhyb3VnaFxuICAgIC8vIHVuZGlzcG9zZWRRdWVyeVJlZmVyZW5jZXMgdW50aWwgd2UgZmluZCBxdWVyeVJlZmVyZW5jZSwgYW5kXG4gICAgLy8gcmVtb3ZlIGFuZCBkaXNwb3NlIGFsbCBwcmV2aW91cyByZWZlcmVuY2VzLlxuICAgIC8vIC0gV2UgYXJlIGd1YXJhbnRlZWQgdG8gZmluZCBxdWVyeVJlZmVyZW5jZSBpbiB0aGUgc2V0LCBiZWNhdXNlIGlmIGFcbiAgICAvLyBzdGF0ZSB1cGRhdGUgcmVzdWx0cyBpbiBhIGNvbW1pdCwgbm8gc3RhdGUgdXBkYXRlcyBpbml0aWF0ZWQgcHJpb3IgdG8gdGhhdFxuICAgIC8vIG9uZSB3aWxsIGJlIGNvbW1pdHRlZCwgYW5kIHdlIGFyZSBkaXNwb3NpbmcgYW5kIHJlbW92aW5nIHJlZmVyZW5jZXNcbiAgICAvLyBhc3NvY2lhdGVkIHdpdGggdXBkYXRlcyB0aGF0IHdlcmUgc2NoZWR1bGVkIHByaW9yIHRvIHRoZSBjdXJyZW50bHlcbiAgICAvLyBjb21taXR0aW5nIHN0YXRlIGNoYW5nZS4gKEEgdXNlRWZmZWN0IGNhbGxiYWNrIGlzIGNhbGxlZCBkdXJpbmcgdGhlIGNvbW1pdFxuICAgIC8vIHBoYXNlLilcblxuXG4gICAgdmFyIHVuZGlzcG9zZWRRdWVyeVJlZmVyZW5jZXMgPSB1bmRpc3Bvc2VkUXVlcnlSZWZlcmVuY2VzUmVmLmN1cnJlbnQ7XG5cbiAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgIHZhciBfaXRlcmF0b3IgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkodW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlcyksXG4gICAgICAgICAgX3N0ZXA7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIHVuZGlzcG9zZWRRdWVyeVJlZmVyZW5jZSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKHVuZGlzcG9zZWRRdWVyeVJlZmVyZW5jZSA9PT0gcXVlcnlSZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHVuZGlzcG9zZWRRdWVyeVJlZmVyZW5jZXNbXCJkZWxldGVcIl0odW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlKTtcblxuICAgICAgICAgIGlmICh1bmRpc3Bvc2VkUXVlcnlSZWZlcmVuY2Uua2luZCAhPT0gJ051bGxRdWVyeVJlZmVyZW5jZScpIHtcbiAgICAgICAgICAgIHVuZGlzcG9zZWRRdWVyeVJlZmVyZW5jZS5kaXNwb3NlICYmIHVuZGlzcG9zZWRRdWVyeVJlZmVyZW5jZS5kaXNwb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbcXVlcnlSZWZlcmVuY2UsIGlzTW91bnRlZFJlZiwgcXVlcnlMb2FkZXJDYWxsYmFja10pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBkaXNwb3NlQWxsUmVtYWluaW5nUXVlcnlSZWZlcmVuY2VzKCkge1xuICAgICAgLy8gdW5kaXNwb3NlZFF1ZXJ5UmVmZXJlbmNlcy5jdXJyZW50IGlzIG5ldmVyIHJlYXNzaWduZWRcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICAgIHZhciBfaXRlcmF0b3IyID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKHVuZGlzcG9zZWRRdWVyeVJlZmVyZW5jZXNSZWYuY3VycmVudCksXG4gICAgICAgICAgX3N0ZXAyO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciB1bmhhbmRsZWRTdGF0ZUNoYW5nZSA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICAgIGlmICh1bmhhbmRsZWRTdGF0ZUNoYW5nZS5raW5kICE9PSAnTnVsbFF1ZXJ5UmVmZXJlbmNlJykge1xuICAgICAgICAgICAgdW5oYW5kbGVkU3RhdGVDaGFuZ2UuZGlzcG9zZSAmJiB1bmhhbmRsZWRTdGF0ZUNoYW5nZS5kaXNwb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yMi5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IyLmYoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiBbcXVlcnlSZWZlcmVuY2Uua2luZCA9PT0gJ051bGxRdWVyeVJlZmVyZW5jZScgPyBudWxsIDogcXVlcnlSZWZlcmVuY2UsIHF1ZXJ5TG9hZGVyQ2FsbGJhY2ssIGRpc3Bvc2VRdWVyeV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXNlUXVlcnlMb2FkZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXNlUmVmZXRjaGFibGVGcmFnbWVudE5vZGUgPSByZXF1aXJlKCcuL3VzZVJlZmV0Y2hhYmxlRnJhZ21lbnROb2RlJyk7XG5cbnZhciB1c2VTdGF0aWNGcmFnbWVudE5vZGVXYXJuaW5nID0gcmVxdWlyZSgnLi91c2VTdGF0aWNGcmFnbWVudE5vZGVXYXJuaW5nJyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3JlYWN0JyksXG4gICAgdXNlRGVidWdWYWx1ZSA9IF9yZXF1aXJlLnVzZURlYnVnVmFsdWU7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCdyZWxheS1ydW50aW1lJyksXG4gICAgZ2V0RnJhZ21lbnQgPSBfcmVxdWlyZTIuZ2V0RnJhZ21lbnQ7XG5cbmZ1bmN0aW9uIHVzZVJlZmV0Y2hhYmxlRnJhZ21lbnQoZnJhZ21lbnRJbnB1dCwgZnJhZ21lbnRSZWYpIHtcbiAgdmFyIGZyYWdtZW50Tm9kZSA9IGdldEZyYWdtZW50KGZyYWdtZW50SW5wdXQpO1xuICB1c2VTdGF0aWNGcmFnbWVudE5vZGVXYXJuaW5nKGZyYWdtZW50Tm9kZSwgJ2ZpcnN0IGFyZ3VtZW50IG9mIHVzZVJlZmV0Y2hhYmxlRnJhZ21lbnQoKScpO1xuXG4gIHZhciBfdXNlUmVmZXRjaGFibGVGcmFnbWUgPSB1c2VSZWZldGNoYWJsZUZyYWdtZW50Tm9kZShmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmLCAndXNlUmVmZXRjaGFibGVGcmFnbWVudCgpJyksXG4gICAgICBmcmFnbWVudERhdGEgPSBfdXNlUmVmZXRjaGFibGVGcmFnbWUuZnJhZ21lbnREYXRhLFxuICAgICAgcmVmZXRjaCA9IF91c2VSZWZldGNoYWJsZUZyYWdtZS5yZWZldGNoO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICB1c2VEZWJ1Z1ZhbHVlKHtcbiAgICAgIGZyYWdtZW50OiBmcmFnbWVudE5vZGUubmFtZSxcbiAgICAgIGRhdGE6IGZyYWdtZW50RGF0YVxuICAgIH0pO1xuICB9XG4gIC8qICRGbG93RXhwZWN0ZWRFcnJvcltwcm9wLW1pc3NpbmddIDogRXhwb3NlZCBvcHRpb25zIGlzIGEgc3Vic2V0IG9mIGludGVybmFsXG4gICAqIG9wdGlvbnMgKi9cblxuXG4gIHJldHVybiBbZnJhZ21lbnREYXRhLCByZWZldGNoXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VSZWZldGNoYWJsZUZyYWdtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBQcm9maWxlckNvbnRleHQgPSByZXF1aXJlKCcuL1Byb2ZpbGVyQ29udGV4dCcpO1xuXG52YXIgZ2V0UmVmZXRjaE1ldGFkYXRhID0gcmVxdWlyZSgnLi9nZXRSZWZldGNoTWV0YWRhdGEnKTtcblxudmFyIGdldFZhbHVlQXRQYXRoID0gcmVxdWlyZSgnLi9nZXRWYWx1ZUF0UGF0aCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciB1c2VGcmFnbWVudE5vZGUgPSByZXF1aXJlKCcuL3VzZUZyYWdtZW50Tm9kZScpO1xuXG52YXIgdXNlSXNNb3VudGVkUmVmID0gcmVxdWlyZSgnLi91c2VJc01vdW50ZWRSZWYnKTtcblxudmFyIHVzZVF1ZXJ5TG9hZGVyID0gcmVxdWlyZSgnLi91c2VRdWVyeUxvYWRlcicpO1xuXG52YXIgdXNlUmVsYXlFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vdXNlUmVsYXlFbnZpcm9ubWVudCcpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL0ZyYWdtZW50UmVzb3VyY2UnKSxcbiAgICBnZXRGcmFnbWVudFJlc291cmNlRm9yRW52aXJvbm1lbnQgPSBfcmVxdWlyZS5nZXRGcmFnbWVudFJlc291cmNlRm9yRW52aXJvbm1lbnQ7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuL1F1ZXJ5UmVzb3VyY2UnKSxcbiAgICBnZXRRdWVyeVJlc291cmNlRm9yRW52aXJvbm1lbnQgPSBfcmVxdWlyZTIuZ2V0UXVlcnlSZXNvdXJjZUZvckVudmlyb25tZW50O1xuXG52YXIgX3JlcXVpcmUzID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICB1c2VDYWxsYmFjayA9IF9yZXF1aXJlMy51c2VDYWxsYmFjayxcbiAgICB1c2VDb250ZXh0ID0gX3JlcXVpcmUzLnVzZUNvbnRleHQsXG4gICAgdXNlUmVkdWNlciA9IF9yZXF1aXJlMy51c2VSZWR1Y2VyO1xuXG52YXIgX3JlcXVpcmU0ID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIGZldGNoUXVlcnkgPSBfcmVxdWlyZTQuX19pbnRlcm5hbC5mZXRjaFF1ZXJ5LFxuICAgIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IgPSBfcmVxdWlyZTQuY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcixcbiAgICBnZXRGcmFnbWVudElkZW50aWZpZXIgPSBfcmVxdWlyZTQuZ2V0RnJhZ21lbnRJZGVudGlmaWVyLFxuICAgIGdldFNlbGVjdG9yID0gX3JlcXVpcmU0LmdldFNlbGVjdG9yO1xuXG5mdW5jdGlvbiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgJ3JlZmV0Y2gnOlxuICAgICAge1xuICAgICAgICB2YXIgX2FjdGlvbiRyZWZldGNoRW52aXJvO1xuXG4gICAgICAgIHJldHVybiAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgc3RhdGUpLCB7fSwge1xuICAgICAgICAgIGZldGNoUG9saWN5OiBhY3Rpb24uZmV0Y2hQb2xpY3ksXG4gICAgICAgICAgbWlycm9yZWRFbnZpcm9ubWVudDogKF9hY3Rpb24kcmVmZXRjaEVudmlybyA9IGFjdGlvbi5yZWZldGNoRW52aXJvbm1lbnQpICE9PSBudWxsICYmIF9hY3Rpb24kcmVmZXRjaEVudmlybyAhPT0gdm9pZCAwID8gX2FjdGlvbiRyZWZldGNoRW52aXJvIDogc3RhdGUubWlycm9yZWRFbnZpcm9ubWVudCxcbiAgICAgICAgICBvbkNvbXBsZXRlOiBhY3Rpb24ub25Db21wbGV0ZSxcbiAgICAgICAgICByZWZldGNoRW52aXJvbm1lbnQ6IGFjdGlvbi5yZWZldGNoRW52aXJvbm1lbnQsXG4gICAgICAgICAgcmVmZXRjaFF1ZXJ5OiBhY3Rpb24ucmVmZXRjaFF1ZXJ5LFxuICAgICAgICAgIHJlbmRlclBvbGljeTogYWN0aW9uLnJlbmRlclBvbGljeVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ3Jlc2V0JzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBmZXRjaFBvbGljeTogdW5kZWZpbmVkLFxuICAgICAgICAgIG1pcnJvcmVkRW52aXJvbm1lbnQ6IGFjdGlvbi5lbnZpcm9ubWVudCxcbiAgICAgICAgICBtaXJyb3JlZEZyYWdtZW50SWRlbnRpZmllcjogYWN0aW9uLmZyYWdtZW50SWRlbnRpZmllcixcbiAgICAgICAgICBvbkNvbXBsZXRlOiB1bmRlZmluZWQsXG4gICAgICAgICAgcmVmZXRjaFF1ZXJ5OiBudWxsLFxuICAgICAgICAgIHJlbmRlclBvbGljeTogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAge1xuICAgICAgICBhY3Rpb24udHlwZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1c2VSZWZldGNoYWJsZUZyYWdtZW50Tm9kZTogVW5leHBlY3RlZCBhY3Rpb24gdHlwZScpO1xuICAgICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVzZVJlZmV0Y2hhYmxlRnJhZ21lbnROb2RlKGZyYWdtZW50Tm9kZSwgcGFyZW50RnJhZ21lbnRSZWYsIGNvbXBvbmVudERpc3BsYXlOYW1lKSB7XG4gIHZhciBwYXJlbnRFbnZpcm9ubWVudCA9IHVzZVJlbGF5RW52aXJvbm1lbnQoKTtcblxuICB2YXIgX2dldFJlZmV0Y2hNZXRhZGF0YSA9IGdldFJlZmV0Y2hNZXRhZGF0YShmcmFnbWVudE5vZGUsIGNvbXBvbmVudERpc3BsYXlOYW1lKSxcbiAgICAgIHJlZmV0Y2hhYmxlUmVxdWVzdCA9IF9nZXRSZWZldGNoTWV0YWRhdGEucmVmZXRjaGFibGVSZXF1ZXN0LFxuICAgICAgZnJhZ21lbnRSZWZQYXRoSW5SZXNwb25zZSA9IF9nZXRSZWZldGNoTWV0YWRhdGEuZnJhZ21lbnRSZWZQYXRoSW5SZXNwb25zZSxcbiAgICAgIGlkZW50aWZpZXJGaWVsZCA9IF9nZXRSZWZldGNoTWV0YWRhdGEuaWRlbnRpZmllckZpZWxkO1xuXG4gIHZhciBmcmFnbWVudElkZW50aWZpZXIgPSBnZXRGcmFnbWVudElkZW50aWZpZXIoZnJhZ21lbnROb2RlLCBwYXJlbnRGcmFnbWVudFJlZik7XG5cbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihyZWR1Y2VyLCB7XG4gICAgZmV0Y2hQb2xpY3k6IHVuZGVmaW5lZCxcbiAgICBtaXJyb3JlZEVudmlyb25tZW50OiBwYXJlbnRFbnZpcm9ubWVudCxcbiAgICBtaXJyb3JlZEZyYWdtZW50SWRlbnRpZmllcjogZnJhZ21lbnRJZGVudGlmaWVyLFxuICAgIG9uQ29tcGxldGU6IHVuZGVmaW5lZCxcbiAgICByZWZldGNoRW52aXJvbm1lbnQ6IG51bGwsXG4gICAgcmVmZXRjaFF1ZXJ5OiBudWxsLFxuICAgIHJlbmRlclBvbGljeTogdW5kZWZpbmVkXG4gIH0pLFxuICAgICAgcmVmZXRjaFN0YXRlID0gX3VzZVJlZHVjZXJbMF0sXG4gICAgICBkaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdO1xuXG4gIHZhciBmZXRjaFBvbGljeSA9IHJlZmV0Y2hTdGF0ZS5mZXRjaFBvbGljeSxcbiAgICAgIG1pcnJvcmVkRW52aXJvbm1lbnQgPSByZWZldGNoU3RhdGUubWlycm9yZWRFbnZpcm9ubWVudCxcbiAgICAgIG1pcnJvcmVkRnJhZ21lbnRJZGVudGlmaWVyID0gcmVmZXRjaFN0YXRlLm1pcnJvcmVkRnJhZ21lbnRJZGVudGlmaWVyLFxuICAgICAgb25Db21wbGV0ZSA9IHJlZmV0Y2hTdGF0ZS5vbkNvbXBsZXRlLFxuICAgICAgcmVmZXRjaEVudmlyb25tZW50ID0gcmVmZXRjaFN0YXRlLnJlZmV0Y2hFbnZpcm9ubWVudCxcbiAgICAgIHJlZmV0Y2hRdWVyeSA9IHJlZmV0Y2hTdGF0ZS5yZWZldGNoUXVlcnksXG4gICAgICByZW5kZXJQb2xpY3kgPSByZWZldGNoU3RhdGUucmVuZGVyUG9saWN5O1xuICB2YXIgZW52aXJvbm1lbnQgPSByZWZldGNoRW52aXJvbm1lbnQgIT09IG51bGwgJiYgcmVmZXRjaEVudmlyb25tZW50ICE9PSB2b2lkIDAgPyByZWZldGNoRW52aXJvbm1lbnQgOiBwYXJlbnRFbnZpcm9ubWVudDtcbiAgdmFyIFF1ZXJ5UmVzb3VyY2UgPSBnZXRRdWVyeVJlc291cmNlRm9yRW52aXJvbm1lbnQoZW52aXJvbm1lbnQpO1xuICB2YXIgRnJhZ21lbnRSZXNvdXJjZSA9IGdldEZyYWdtZW50UmVzb3VyY2VGb3JFbnZpcm9ubWVudChlbnZpcm9ubWVudCk7XG4gIHZhciBwcm9maWxlckNvbnRleHQgPSB1c2VDb250ZXh0KFByb2ZpbGVyQ29udGV4dCk7XG4gIHZhciBzaG91bGRSZXNldCA9IGVudmlyb25tZW50ICE9PSBtaXJyb3JlZEVudmlyb25tZW50IHx8IGZyYWdtZW50SWRlbnRpZmllciAhPT0gbWlycm9yZWRGcmFnbWVudElkZW50aWZpZXI7XG5cbiAgdmFyIF91c2VRdWVyeUxvYWRlciA9IHVzZVF1ZXJ5TG9hZGVyKHJlZmV0Y2hhYmxlUmVxdWVzdCksXG4gICAgICBxdWVyeVJlZiA9IF91c2VRdWVyeUxvYWRlclswXSxcbiAgICAgIGxvYWRRdWVyeSA9IF91c2VRdWVyeUxvYWRlclsxXSxcbiAgICAgIGRpc3Bvc2VRdWVyeSA9IF91c2VRdWVyeUxvYWRlclsyXTtcblxuICB2YXIgZnJhZ21lbnRSZWYgPSBwYXJlbnRGcmFnbWVudFJlZjtcblxuICBpZiAoc2hvdWxkUmVzZXQpIHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiAncmVzZXQnLFxuICAgICAgZW52aXJvbm1lbnQ6IGVudmlyb25tZW50LFxuICAgICAgZnJhZ21lbnRJZGVudGlmaWVyOiBmcmFnbWVudElkZW50aWZpZXJcbiAgICB9KTtcbiAgICBkaXNwb3NlUXVlcnkoKTtcbiAgfSBlbHNlIGlmIChyZWZldGNoUXVlcnkgIT0gbnVsbCAmJiBxdWVyeVJlZiAhPSBudWxsKSB7XG4gICAgLy8gSWYgcmVmZXRjaCB3YXMgY2FsbGVkLCB3ZSBleHBlY3QgdG8gaGF2ZSBhIHJlZmV0Y2hRdWVyeSBhbmQgcXVlcnlSZWZcbiAgICAvLyBpbiBzdGF0ZSwgc2luY2UgYm90aCBzdGF0ZSB1cGRhdGVzIHRvIHNldCB0aGUgcmVmZXRjaFF1ZXJ5IGFuZCB0aGVcbiAgICAvLyBxdWVyeVJlZiBvY2N1ciBzaW11bHRhbmVvdXNseS5cbiAgICAvLyBJbiB0aGlzIGNhc2UsIHdlIG5lZWQgdG8gcmVhZCB0aGUgcmVmZXRjaGVkIHF1ZXJ5IGRhdGEgKHBvdGVudGlhbGx5XG4gICAgLy8gc3VzcGVuZGluZyBpZiBpdCdzIGluIGZsaWdodCksIGFuZCBleHRyYWN0IHRoZSBuZXcgZnJhZ21lbnQgcmVmXG4gICAgLy8gZnJvbSB0aGUgcXVlcnkgaW4gb3JkZXIgcmVhZCB0aGUgY3VycmVudCBAcmVmZXRjaGFibGUgZnJhZ21lbnRcbiAgICAvLyB3aXRoIHRoZSB1cGRhdGVkIGZyYWdtZW50IG93bmVyIGFzIHRoZSBuZXcgcmVmZXRjaFF1ZXJ5LlxuICAgIC8vIEJlZm9yZSBvYnNlcnZpbmcgdGhlIHJlZmV0Y2gsIHJlY29yZCB0aGUgY3VycmVudCBJRCBhbmQgdHlwZW5hbWVcbiAgICAvLyBzbyB0aGF0LCBpZiB3ZSBhcmUgcmVmZXRjaGluZyBleGlzdGluZyBkYXRhIG9uXG4gICAgLy8gYSBmaWVsZCB0aGF0IGltcGxlbWVudHMgTm9kZSwgYWZ0ZXIgcmVmZXRjaGluZyB3ZVxuICAgIC8vIGNhbiB2YWxpZGF0ZSB0aGF0IHRoZSByZWNlaXZlZCBkYXRhIGlzIGNvbnNpc3RlbnRcbiAgICB2YXIgZGVidWdQcmV2aW91c0lEQW5kVHlwZW5hbWU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBkZWJ1Z1ByZXZpb3VzSURBbmRUeXBlbmFtZSA9IGRlYnVnRnVuY3Rpb25zLmdldEluaXRpYWxJREFuZFR5cGUocmVmZXRjaFF1ZXJ5LnJlcXVlc3QudmFyaWFibGVzLCBmcmFnbWVudFJlZlBhdGhJblJlc3BvbnNlLCBlbnZpcm9ubWVudCk7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZVF1ZXJ5Q29tcGxldGVkID0gZnVuY3Rpb24gaGFuZGxlUXVlcnlDb21wbGV0ZWQobWF5YmVFcnJvcikge1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKG1heWJlRXJyb3IgIT09IG51bGwgJiYgbWF5YmVFcnJvciAhPT0gdm9pZCAwID8gbWF5YmVFcnJvciA6IG51bGwpO1xuICAgIH07IC8vIFRoZSBxdWVyeVJlZi5zb3VyY2Ugb2J0YWluZWQgZnJvbSB1c2VRdWVyeUxvYWRlciB3aWxsIGJlXG4gICAgLy8gYW4gb2JzZXJ2YWJsZSB3ZSBjYW4gY29uc3VtZSAvaWYvIGEgbmV0d29yayByZXF1ZXN0IHdhc1xuICAgIC8vIHN0YXJ0ZWQuIE90aGVyd2lzZSwgZ2l2ZW4gdGhhdCBRdWVyeVJlc291cmNlLnByZXBhcmVcbiAgICAvLyBhbHdheXMgZXhwZWN0cyBhbiBvYnNlcnZhYmxlIHdlIGZhbGwgYmFjayB0byBhIG5ldyBuZXR3b3JrXG4gICAgLy8gb2JzZXJ2YWJsZS4gTm90ZSBob3dldmVyIHRoYXQgaWYgbG9hZFF1ZXJ5IGRpZCBub3QgbWFrZSBhIG5ldHdvcmtcbiAgICAvLyByZXF1ZXN0LCB3ZSBkb24ndCBleHBlY3QgdG8gbWFrZSBvbmUgaGVyZSwgdW5sZXNzIHRoZSBzdGF0ZSBvZlxuICAgIC8vIHRoZSBjYWNoZSBoYXMgY2hhbmdlZCBiZXR3ZWVuIHRoZSBjYWxsIHRvIHJlZmV0Y2ggYW5kIHRoaXNcbiAgICAvLyByZW5kZXIuXG5cblxuICAgIHZhciBmZXRjaE9ic2VydmFibGUgPSBxdWVyeVJlZi5zb3VyY2UgIT0gbnVsbCA/IHF1ZXJ5UmVmLnNvdXJjZSA6IGZldGNoUXVlcnkoZW52aXJvbm1lbnQsIHJlZmV0Y2hRdWVyeSk7IC8vIE5vdyB3d2UgY2FuIHdlIHJlYWQgdGhlIHJlZmV0Y2ggcXVlcnkgaGVyZSB1c2luZyB0aGVcbiAgICAvLyBxdWVyeVJlZiBwcm92aWRlZCBmcm9tIHVzZVF1ZXJ5TG9hZGVyLiBOb3RlIHRoYXQgdGhlXG4gICAgLy8gbmV0d29yayByZXF1ZXN0IGlzIHN0YXJ0ZWQgZHVyaW5nIHRoZSBjYWxsIHRvIHJlZmV0Y2gsXG4gICAgLy8gYnV0IGlmIHRoZSByZWZldGNoIHF1ZXJ5IGlzIHN0aWxsIGluIGZsaWdodCwgd2Ugd2lsbCBzdXNwZW5kXG4gICAgLy8gYXQgdGhpcyBwb2ludDpcblxuICAgIHZhciBxdWVyeVJlc3VsdCA9IHByb2ZpbGVyQ29udGV4dC53cmFwUHJlcGFyZVF1ZXJ5UmVzb3VyY2UoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFF1ZXJ5UmVzb3VyY2UucHJlcGFyZShyZWZldGNoUXVlcnksIGZldGNoT2JzZXJ2YWJsZSwgZmV0Y2hQb2xpY3ksIHJlbmRlclBvbGljeSwge1xuICAgICAgICBlcnJvcjogaGFuZGxlUXVlcnlDb21wbGV0ZWQsXG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICAvLyBWYWxpZGF0ZSB0aGF0IHRoZSB0eXBlIG9mIHRoZSBvYmplY3Qgd2UgZ290IGJhY2sgbWF0Y2hlcyB0aGUgdHlwZVxuICAgICAgICAgIC8vIG9mIHRoZSBvYmplY3QgYWxyZWFkeSBpbiB0aGUgc3RvcmVcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBkZWJ1Z0Z1bmN0aW9ucy5jaGVja1NhbWVUeXBlQWZ0ZXJSZWZldGNoKGRlYnVnUHJldmlvdXNJREFuZFR5cGVuYW1lLCBlbnZpcm9ubWVudCwgZnJhZ21lbnROb2RlLCBjb21wb25lbnREaXNwbGF5TmFtZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaGFuZGxlUXVlcnlDb21wbGV0ZWQoKTtcbiAgICAgICAgfVxuICAgICAgfSwgcXVlcnlSZWYuZmV0Y2hLZXksIHByb2ZpbGVyQ29udGV4dCk7XG4gICAgfSk7XG4gICAgdmFyIHF1ZXJ5RGF0YSA9IEZyYWdtZW50UmVzb3VyY2UucmVhZChxdWVyeVJlc3VsdC5mcmFnbWVudE5vZGUsIHF1ZXJ5UmVzdWx0LmZyYWdtZW50UmVmLCBjb21wb25lbnREaXNwbGF5TmFtZSkuZGF0YTtcbiAgICAhKHF1ZXJ5RGF0YSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5OiBFeHBlY3RlZCB0byBiZSBhYmxlIHRvIHJlYWQgcmVmZXRjaCBxdWVyeSByZXNwb25zZS4gJyArIFwiSWYgeW91J3JlIHNlZWluZyB0aGlzLCB0aGlzIGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWxheS5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyBBZnRlciByZWFkaW5nL2ZldGNoaW5nIHRoZSByZWZldGNoIHF1ZXJ5LCB3ZSBleHRyYWN0IGZyb20gdGhlXG4gICAgLy8gcmVmZXRjaCBxdWVyeSByZXNwb25zZSB0aGUgbmV3IGZyYWdtZW50IHJlZiB3ZSBuZWVkIHRvIHVzZSB0byByZWFkXG4gICAgLy8gdGhlIGZyYWdtZW50LiBUaGUgbmV3IGZyYWdtZW50IHJlZiB3aWxsIHBvaW50IHRvIHRoZSByZWZldGNoIHF1ZXJ5XG4gICAgLy8gYXMgaXRzIGZyYWdtZW50IG93bmVyLlxuXG4gICAgdmFyIHJlZmV0Y2hlZEZyYWdtZW50UmVmID0gZ2V0VmFsdWVBdFBhdGgocXVlcnlEYXRhLCBmcmFnbWVudFJlZlBhdGhJblJlc3BvbnNlKTtcbiAgICBmcmFnbWVudFJlZiA9IHJlZmV0Y2hlZEZyYWdtZW50UmVmO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgLy8gVmFsaWRhdGUgdGhhdCB0aGUgaWQgb2YgdGhlIG9iamVjdCB3ZSBnb3QgYmFjayBtYXRjaGVzIHRoZSBpZFxuICAgICAgLy8gd2UgcXVlcmllZCBmb3IgaW4gdGhlIHZhcmlhYmxlcy5cbiAgICAgIC8vIFdlIGRvIHRoaXMgZHVyaW5nIHJlbmRlciBpbnN0ZWFkIG9mIG9uQ29tcGxldGUgdG8gbWFrZSBzdXJlIHdlIGFyZVxuICAgICAgLy8gb25seSB2YWxpZGF0aW5nIHRoZSBtb3N0IHJlY2VudCByZWZldGNoLlxuICAgICAgZGVidWdGdW5jdGlvbnMuY2hlY2tTYW1lSURBZnRlclJlZmV0Y2goZGVidWdQcmV2aW91c0lEQW5kVHlwZW5hbWUsIGZyYWdtZW50UmVmLCBmcmFnbWVudE5vZGUsIGNvbXBvbmVudERpc3BsYXlOYW1lKTtcbiAgICB9XG4gIH0gLy8gV2UgcmVhZCBhbmQgc3Vic2NyaWJlIHRvIHRoZSBmcmFnbWVudCB1c2luZyB1c2VGcmFnbWVudE5vZGUuXG4gIC8vIElmIHJlZmV0Y2ggd2FzIGNhbGxlZCwgd2UgcmVhZCB0aGUgZnJhZ21lbnQgdXNpbmcgdGhlIG5ldyBjb21wdXRlZFxuICAvLyBmcmFnbWVudCByZWYgZnJvbSB0aGUgcmVmZXRjaCBxdWVyeSByZXNwb25zZTsgb3RoZXJ3aXNlLCB3ZSB1c2UgdGhlXG4gIC8vIGZyYWdtZW50IHJlZiBwYXNzZWQgYnkgdGhlIGNhbGxlciBhcyBub3JtYWwuXG5cblxuICB2YXIgX3VzZUZyYWdtZW50Tm9kZSA9IHVzZUZyYWdtZW50Tm9kZShmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmLCBjb21wb25lbnREaXNwbGF5TmFtZSksXG4gICAgICBmcmFnbWVudERhdGEgPSBfdXNlRnJhZ21lbnROb2RlLmRhdGEsXG4gICAgICBkaXNhYmxlU3RvcmVVcGRhdGVzID0gX3VzZUZyYWdtZW50Tm9kZS5kaXNhYmxlU3RvcmVVcGRhdGVzLFxuICAgICAgZW5hYmxlU3RvcmVVcGRhdGVzID0gX3VzZUZyYWdtZW50Tm9kZS5lbmFibGVTdG9yZVVwZGF0ZXM7XG5cbiAgdmFyIHJlZmV0Y2ggPSB1c2VSZWZldGNoRnVuY3Rpb24oY29tcG9uZW50RGlzcGxheU5hbWUsIGRpc3BhdGNoLCBkaXNwb3NlUXVlcnksIGZyYWdtZW50RGF0YSwgZnJhZ21lbnRJZGVudGlmaWVyLCBmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmUGF0aEluUmVzcG9uc2UsIGlkZW50aWZpZXJGaWVsZCwgbG9hZFF1ZXJ5LCBwYXJlbnRGcmFnbWVudFJlZiwgcmVmZXRjaGFibGVSZXF1ZXN0KTtcbiAgcmV0dXJuIHtcbiAgICBmcmFnbWVudERhdGE6IGZyYWdtZW50RGF0YSxcbiAgICBmcmFnbWVudFJlZjogZnJhZ21lbnRSZWYsXG4gICAgcmVmZXRjaDogcmVmZXRjaCxcbiAgICBkaXNhYmxlU3RvcmVVcGRhdGVzOiBkaXNhYmxlU3RvcmVVcGRhdGVzLFxuICAgIGVuYWJsZVN0b3JlVXBkYXRlczogZW5hYmxlU3RvcmVVcGRhdGVzXG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZVJlZmV0Y2hGdW5jdGlvbihjb21wb25lbnREaXNwbGF5TmFtZSwgZGlzcGF0Y2gsIGRpc3Bvc2VRdWVyeSwgZnJhZ21lbnREYXRhLCBmcmFnbWVudElkZW50aWZpZXIsIGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWZQYXRoSW5SZXNwb25zZSwgaWRlbnRpZmllckZpZWxkLCBsb2FkUXVlcnksIHBhcmVudEZyYWdtZW50UmVmLCByZWZldGNoYWJsZVJlcXVlc3QpIHtcbiAgdmFyIGlzTW91bnRlZFJlZiA9IHVzZUlzTW91bnRlZFJlZigpO1xuICB2YXIgaWRlbnRpZmllclZhbHVlID0gaWRlbnRpZmllckZpZWxkICE9IG51bGwgJiYgZnJhZ21lbnREYXRhICE9IG51bGwgJiYgdHlwZW9mIGZyYWdtZW50RGF0YSA9PT0gJ29iamVjdCcgPyBmcmFnbWVudERhdGFbaWRlbnRpZmllckZpZWxkXSA6IG51bGw7XG4gIHJldHVybiB1c2VDYWxsYmFjayhmdW5jdGlvbiAocHJvdmlkZWRSZWZldGNoVmFyaWFibGVzLCBvcHRpb25zKSB7XG4gICAgLy8gQmFpbCBvdXQgYW5kIHdhcm4gaWYgd2UncmUgdHJ5aW5nIHRvIHJlZmV0Y2ggYWZ0ZXIgdGhlIGNvbXBvbmVudFxuICAgIC8vIGhhcyB1bm1vdW50ZWRcbiAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQgIT09IHRydWUpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdSZWxheTogVW5leHBlY3RlZCBjYWxsIHRvIGByZWZldGNoYCBvbiB1bm1vdW50ZWQgY29tcG9uZW50IGZvciBmcmFnbWVudCAnICsgJ2Alc2AgaW4gYCVzYC4gSXQgbG9va3MgbGlrZSBzb21lIGluc3RhbmNlcyBvZiB5b3VyIGNvbXBvbmVudCBhcmUgJyArICdzdGlsbCB0cnlpbmcgdG8gZmV0Y2ggZGF0YSBidXQgdGhleSBhbHJlYWR5IHVubW91bnRlZC4gJyArICdQbGVhc2UgbWFrZSBzdXJlIHlvdSBjbGVhciBhbGwgdGltZXJzLCBpbnRlcnZhbHMsICcgKyAnYXN5bmMgY2FsbHMsIGV0YyB0aGF0IG1heSB0cmlnZ2VyIGEgZmV0Y2guJywgZnJhZ21lbnROb2RlLm5hbWUsIGNvbXBvbmVudERpc3BsYXlOYW1lKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7fVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAocGFyZW50RnJhZ21lbnRSZWYgPT0gbnVsbCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5OiBVbmV4cGVjdGVkIGNhbGwgdG8gYHJlZmV0Y2hgIHdoaWxlIHVzaW5nIGEgbnVsbCBmcmFnbWVudCByZWYgJyArICdmb3IgZnJhZ21lbnQgYCVzYCBpbiBgJXNgLiBXaGVuIGNhbGxpbmcgYHJlZmV0Y2hgLCB3ZSBleHBlY3QgJyArIFwiaW5pdGlhbCBmcmFnbWVudCBkYXRhIHRvIGJlIG5vbi1udWxsLiBQbGVhc2UgbWFrZSBzdXJlIHlvdSdyZSBcIiArICdwYXNzaW5nIGEgdmFsaWQgZnJhZ21lbnQgcmVmIHRvIGAlc2AgYmVmb3JlIGNhbGxpbmcgJyArICdgcmVmZXRjaGAsIG9yIG1ha2Ugc3VyZSB5b3UgcGFzcyBhbGwgcmVxdWlyZWQgdmFyaWFibGVzIHRvIGByZWZldGNoYC4nLCBmcmFnbWVudE5vZGUubmFtZSwgY29tcG9uZW50RGlzcGxheU5hbWUsIGNvbXBvbmVudERpc3BsYXlOYW1lKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB2YXIgcmVmZXRjaEVudmlyb25tZW50ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLl9fZW52aXJvbm1lbnQ7XG4gICAgdmFyIGZldGNoUG9saWN5ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZldGNoUG9saWN5O1xuICAgIHZhciByZW5kZXJQb2xpY3kgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuVU5TVEFCTEVfcmVuZGVyUG9saWN5O1xuICAgIHZhciBvbkNvbXBsZXRlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9uQ29tcGxldGU7XG4gICAgdmFyIGZyYWdtZW50U2VsZWN0b3IgPSBnZXRTZWxlY3RvcihmcmFnbWVudE5vZGUsIHBhcmVudEZyYWdtZW50UmVmKTtcbiAgICB2YXIgcGFyZW50VmFyaWFibGVzO1xuICAgIHZhciBmcmFnbWVudFZhcmlhYmxlcztcblxuICAgIGlmIChmcmFnbWVudFNlbGVjdG9yID09IG51bGwpIHtcbiAgICAgIHBhcmVudFZhcmlhYmxlcyA9IHt9O1xuICAgICAgZnJhZ21lbnRWYXJpYWJsZXMgPSB7fTtcbiAgICB9IGVsc2UgaWYgKGZyYWdtZW50U2VsZWN0b3Iua2luZCA9PT0gJ1BsdXJhbFJlYWRlclNlbGVjdG9yJykge1xuICAgICAgdmFyIF9mcmFnbWVudFNlbGVjdG9yJHNlbCwgX2ZyYWdtZW50U2VsZWN0b3Ikc2VsMiwgX2ZyYWdtZW50U2VsZWN0b3Ikc2VsMywgX2ZyYWdtZW50U2VsZWN0b3Ikc2VsNDtcblxuICAgICAgcGFyZW50VmFyaWFibGVzID0gKF9mcmFnbWVudFNlbGVjdG9yJHNlbCA9IChfZnJhZ21lbnRTZWxlY3RvciRzZWwyID0gZnJhZ21lbnRTZWxlY3Rvci5zZWxlY3RvcnNbMF0pID09PSBudWxsIHx8IF9mcmFnbWVudFNlbGVjdG9yJHNlbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mcmFnbWVudFNlbGVjdG9yJHNlbDIub3duZXIudmFyaWFibGVzKSAhPT0gbnVsbCAmJiBfZnJhZ21lbnRTZWxlY3RvciRzZWwgIT09IHZvaWQgMCA/IF9mcmFnbWVudFNlbGVjdG9yJHNlbCA6IHt9O1xuICAgICAgZnJhZ21lbnRWYXJpYWJsZXMgPSAoX2ZyYWdtZW50U2VsZWN0b3Ikc2VsMyA9IChfZnJhZ21lbnRTZWxlY3RvciRzZWw0ID0gZnJhZ21lbnRTZWxlY3Rvci5zZWxlY3RvcnNbMF0pID09PSBudWxsIHx8IF9mcmFnbWVudFNlbGVjdG9yJHNlbDQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mcmFnbWVudFNlbGVjdG9yJHNlbDQudmFyaWFibGVzKSAhPT0gbnVsbCAmJiBfZnJhZ21lbnRTZWxlY3RvciRzZWwzICE9PSB2b2lkIDAgPyBfZnJhZ21lbnRTZWxlY3RvciRzZWwzIDoge307XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudFZhcmlhYmxlcyA9IGZyYWdtZW50U2VsZWN0b3Iub3duZXIudmFyaWFibGVzO1xuICAgICAgZnJhZ21lbnRWYXJpYWJsZXMgPSBmcmFnbWVudFNlbGVjdG9yLnZhcmlhYmxlcztcbiAgICB9IC8vIEEgdXNlciBvZiBgdXNlUmVmZXRjaGFibGVGcmFnbWVudCgpYCBtYXkgcGFzcyBhIHN1YnNldCBvZlxuICAgIC8vIGFsbCB2YXJpYWJsZXMgcmVxdWlyZWQgYnkgdGhlIGZyYWdtZW50IHdoZW4gY2FsbGluZyBgcmVmZXRjaCgpYC5cbiAgICAvLyBXZSBmaWxsIGluIGFueSB2YXJpYWJsZXMgbm90IHBhc3NlZCBieSB0aGUgY2FsbCB0byBgcmVmZXRjaCgpYCB3aXRoIHRoZVxuICAgIC8vIHZhcmlhYmxlcyBmcm9tIHRoZSBvcmlnaW5hbCBwYXJlbnQgZnJhZ21lbnQgb3duZXIuXG4gICAgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtc3ByZWFkLWludGVyZmFjZV1cblxuXG4gICAgdmFyIHJlZmV0Y2hWYXJpYWJsZXMgPSAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgcGFyZW50VmFyaWFibGVzKSwgZnJhZ21lbnRWYXJpYWJsZXMpLCBwcm92aWRlZFJlZmV0Y2hWYXJpYWJsZXMpOyAvLyBJZiB0aGUgcXVlcnkgbmVlZHMgYW4gaWRlbnRpZmllciB2YWx1ZSAoJ2lkJyBvciBzaW1pbGFyKSBhbmQgb25lXG4gICAgLy8gd2FzIG5vdCBleHBsaWNpdGx5IHByb3ZpZGVkLCByZWFkIGl0IGZyb20gdGhlIGZyYWdtZW50IGRhdGEuXG5cbiAgICBpZiAoaWRlbnRpZmllckZpZWxkICE9IG51bGwgJiYgIXByb3ZpZGVkUmVmZXRjaFZhcmlhYmxlcy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSkge1xuICAgICAgLy8gQHJlZmV0Y2hhYmxlIGZyYWdtZW50cyBhcmUgZ3VhcmFudGVlZCB0byBoYXZlIGFuIGBpZGAgc2VsZWN0aW9uXG4gICAgICAvLyBpZiB0aGUgdHlwZSBpcyBOb2RlLCBpbXBsZW1lbnRzIE5vZGUsIG9yIGlzIEBmZXRjaGFibGUuIERvdWJsZS1jaGVja1xuICAgICAgLy8gdGhhdCB0aGVyZSBhY3R1YWxseSBpcyBhIHZhbHVlIGF0IHJ1bnRpbWUuXG4gICAgICBpZiAodHlwZW9mIGlkZW50aWZpZXJWYWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5OiBFeHBlY3RlZCByZXN1bHQgdG8gaGF2ZSBhIHN0cmluZyAgJyArICdgJXNgIGluIG9yZGVyIHRvIHJlZmV0Y2gsIGdvdCBgJXNgLicsIGlkZW50aWZpZXJGaWVsZCwgaWRlbnRpZmllclZhbHVlKSA6IHZvaWQgMDtcbiAgICAgIH1cblxuICAgICAgcmVmZXRjaFZhcmlhYmxlcy5pZCA9IGlkZW50aWZpZXJWYWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgcmVmZXRjaFF1ZXJ5ID0gY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcihyZWZldGNoYWJsZVJlcXVlc3QsIHJlZmV0Y2hWYXJpYWJsZXMsIHtcbiAgICAgIGZvcmNlOiB0cnVlXG4gICAgfSk7IC8vIFdlIGNhbGwgbG9hZFF1ZXJ5IHdoaWNoIHdpbGwgc3RhcnQgYSBuZXR3b3JrIHJlcXVlc3QgaWYgbmVjZXNzYXJ5XG4gICAgLy8gYW5kIHVwZGF0ZSB0aGUgcXVlclJlZiBmcm9tIHVzZVF1ZXJ5TG9hZGVyLlxuICAgIC8vIE5vdGUgdGhlIGZvbGxvd2luZzpcbiAgICAvLyAtIGxvYWRRdWVyeSB3aWxsIGRpc3Bvc2Ugb2YgYW55IHByZXZpb3VzbHkgcmVmZXRjaGVkIHF1ZXJpZXMuXG4gICAgLy8gLSBXZSB1c2UgdGhlIHZhcmlhYmxlcyBleHRyYWN0ZWQgb2ZmIHRoZSBPcGVyYXRpb25EZXNjcmlwdG9yXG4gICAgLy8gc28gdGhhdCB0aGV5IGhhdmUgYmVlbiBmaWx0ZXJlZCBvdXQgdG8gaW5jbHVkZSBvbmx5IHRoZVxuICAgIC8vIHZhcmlhYmxlcyBhY3R1YWxseSBkZWNsYXJlZCBpbiB0aGUgcXVlcnkuXG5cbiAgICBsb2FkUXVlcnkocmVmZXRjaFF1ZXJ5LnJlcXVlc3QudmFyaWFibGVzLCB7XG4gICAgICBmZXRjaFBvbGljeTogZmV0Y2hQb2xpY3ksXG4gICAgICBfX2Vudmlyb25tZW50OiByZWZldGNoRW52aXJvbm1lbnQsXG4gICAgICBfX25hbWVGb3JXYXJuaW5nOiAncmVmZXRjaCdcbiAgICB9KTtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiAncmVmZXRjaCcsXG4gICAgICBmZXRjaFBvbGljeTogZmV0Y2hQb2xpY3ksXG4gICAgICBvbkNvbXBsZXRlOiBvbkNvbXBsZXRlLFxuICAgICAgcmVmZXRjaEVudmlyb25tZW50OiByZWZldGNoRW52aXJvbm1lbnQsXG4gICAgICByZWZldGNoUXVlcnk6IHJlZmV0Y2hRdWVyeSxcbiAgICAgIHJlbmRlclBvbGljeTogcmVuZGVyUG9saWN5XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3Bvc2U6IGRpc3Bvc2VRdWVyeVxuICAgIH07XG4gIH0sIC8vIE5PVEU6IFdlIGRpc2FibGUgcmVhY3QtaG9va3MtZGVwcyB3YXJuaW5nIGJlY2F1c2U6XG4gIC8vICAgLSBXZSBrbm93IGZyYWdtZW50UmVmUGF0aEluUmVzcG9uc2UgaXMgc3RhdGljLCBzbyBpdCBjYW4gYmUgb21pdHRlZCBmcm9tXG4gIC8vICAgICBkZXBzXG4gIC8vICAgLSBXZSBrbm93IGZyYWdtZW50Tm9kZSBpcyBzdGF0aWMsIHNvIGl0IGNhbiBiZSBvbWl0dGVkIGZyb20gZGVwcy5cbiAgLy8gICAtIGZyYWdtZW50Tm9kZSBhbmQgcGFyZW50RnJhZ21lbnRSZWYgYXJlIGFsc28gY2FwdHVyZWQgYnkgaW5jbHVkaW5nXG4gIC8vICAgICBmcmFnbWVudElkZW50aWZpZXJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICBbZnJhZ21lbnRJZGVudGlmaWVyLCBkaXNwYXRjaCwgZGlzcG9zZVF1ZXJ5LCBpZGVudGlmaWVyVmFsdWVdKTtcbn1cblxudmFyIGRlYnVnRnVuY3Rpb25zO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGRlYnVnRnVuY3Rpb25zID0ge1xuICAgIGdldEluaXRpYWxJREFuZFR5cGU6IGZ1bmN0aW9uIGdldEluaXRpYWxJREFuZFR5cGUobWVtb1JlZmV0Y2hWYXJpYWJsZXMsIGZyYWdtZW50UmVmUGF0aEluUmVzcG9uc2UsIGVudmlyb25tZW50KSB7XG4gICAgICB2YXIgX3JlcXVpcmU1ID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgICAgICAgIFJlY29yZCA9IF9yZXF1aXJlNS5SZWNvcmQ7IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG5cbiAgICAgIHZhciBpZCA9IG1lbW9SZWZldGNoVmFyaWFibGVzID09PSBudWxsIHx8IG1lbW9SZWZldGNoVmFyaWFibGVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtZW1vUmVmZXRjaFZhcmlhYmxlcy5pZDtcblxuICAgICAgaWYgKGZyYWdtZW50UmVmUGF0aEluUmVzcG9uc2UubGVuZ3RoICE9PSAxIHx8IGZyYWdtZW50UmVmUGF0aEluUmVzcG9uc2VbMF0gIT09ICdub2RlJyB8fCBpZCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkU291cmNlID0gZW52aXJvbm1lbnQuZ2V0U3RvcmUoKS5nZXRTb3VyY2UoKTtcbiAgICAgIHZhciByZWNvcmQgPSByZWNvcmRTb3VyY2UuZ2V0KGlkKTtcbiAgICAgIHZhciB0eXBlbmFtZSA9IHJlY29yZCAmJiBSZWNvcmQuZ2V0VHlwZShyZWNvcmQpO1xuXG4gICAgICBpZiAodHlwZW5hbWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICB0eXBlbmFtZTogdHlwZW5hbWVcbiAgICAgIH07XG4gICAgfSxcbiAgICBjaGVja1NhbWVUeXBlQWZ0ZXJSZWZldGNoOiBmdW5jdGlvbiBjaGVja1NhbWVUeXBlQWZ0ZXJSZWZldGNoKHByZXZpb3VzSURBbmRUeXBlLCBlbnZpcm9ubWVudCwgZnJhZ21lbnROb2RlLCBjb21wb25lbnREaXNwbGF5TmFtZSkge1xuICAgICAgdmFyIF9yZXF1aXJlNiA9IHJlcXVpcmUoJ3JlbGF5LXJ1bnRpbWUnKSxcbiAgICAgICAgICBSZWNvcmQgPSBfcmVxdWlyZTYuUmVjb3JkO1xuXG4gICAgICBpZiAoIXByZXZpb3VzSURBbmRUeXBlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZFNvdXJjZSA9IGVudmlyb25tZW50LmdldFN0b3JlKCkuZ2V0U291cmNlKCk7XG4gICAgICB2YXIgcmVjb3JkID0gcmVjb3JkU291cmNlLmdldChwcmV2aW91c0lEQW5kVHlwZS5pZCk7XG4gICAgICB2YXIgdHlwZW5hbWUgPSByZWNvcmQgJiYgUmVjb3JkLmdldFR5cGUocmVjb3JkKTtcblxuICAgICAgaWYgKHR5cGVuYW1lICE9PSBwcmV2aW91c0lEQW5kVHlwZS50eXBlbmFtZSkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXk6IENhbGwgdG8gYHJlZmV0Y2hgIHJldHVybmVkIGRhdGEgd2l0aCBhIGRpZmZlcmVudCAnICsgJ19fdHlwZW5hbWU6IHdhcyBgJXNgLCBub3cgYCVzYCwgb24gYCVzYCBpbiBgJXNgLiAnICsgJ1BsZWFzZSBtYWtlIHN1cmUgdGhlIHNlcnZlciBjb3JyZWN0bHkgaW1wbGVtZW50cycgKyAndW5pcXVlIGlkIHJlcXVpcmVtZW50LicsIHByZXZpb3VzSURBbmRUeXBlLnR5cGVuYW1lLCB0eXBlbmFtZSwgZnJhZ21lbnROb2RlLm5hbWUsIGNvbXBvbmVudERpc3BsYXlOYW1lKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNoZWNrU2FtZUlEQWZ0ZXJSZWZldGNoOiBmdW5jdGlvbiBjaGVja1NhbWVJREFmdGVyUmVmZXRjaChwcmV2aW91c0lEQW5kVHlwZW5hbWUsIHJlZmV0Y2hlZEZyYWdtZW50UmVmLCBmcmFnbWVudE5vZGUsIGNvbXBvbmVudERpc3BsYXlOYW1lKSB7XG4gICAgICBpZiAocHJldmlvdXNJREFuZFR5cGVuYW1lID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3JlcXVpcmU3ID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgICAgICAgIElEX0tFWSA9IF9yZXF1aXJlNy5JRF9LRVk7IC8vICRGbG93RXhwZWN0ZWRFcnJvcltpbmNvbXBhdGlibGUtdXNlXVxuXG5cbiAgICAgIHZhciByZXN1bHRJRCA9IHJlZmV0Y2hlZEZyYWdtZW50UmVmW0lEX0tFWV07XG5cbiAgICAgIGlmIChyZXN1bHRJRCAhPSBudWxsICYmIHJlc3VsdElEICE9PSBwcmV2aW91c0lEQW5kVHlwZW5hbWUuaWQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5OiBDYWxsIHRvIGByZWZldGNoYCByZXR1cm5lZCBhIGRpZmZlcmVudCBpZCwgZXhwZWN0ZWQgJyArICdgJXNgLCBnb3QgYCVzYCwgb24gYCVzYCBpbiBgJXNgLiAnICsgJ1BsZWFzZSBtYWtlIHN1cmUgdGhlIHNlcnZlciBjb3JyZWN0bHkgaW1wbGVtZW50cyAnICsgJ3VuaXF1ZSBpZCByZXF1aXJlbWVudC4nLCByZXN1bHRJRCwgcHJldmlvdXNJREFuZFR5cGVuYW1lLmlkLCBmcmFnbWVudE5vZGUubmFtZSwgY29tcG9uZW50RGlzcGxheU5hbWUpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VSZWZldGNoYWJsZUZyYWdtZW50Tm9kZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFJlbGF5Q29udGV4dCA9IHJlcXVpcmUoJ3JlYWN0LXJlbGF5L1JlYWN0UmVsYXlDb250ZXh0Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICB1c2VDb250ZXh0ID0gX3JlcXVpcmUudXNlQ29udGV4dDtcblxuZnVuY3Rpb24gdXNlUmVsYXlFbnZpcm9ubWVudCgpIHtcbiAgdmFyIGNvbnRleHQgPSB1c2VDb250ZXh0KFJlYWN0UmVsYXlDb250ZXh0KTtcbiAgIShjb250ZXh0ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAndXNlUmVsYXlFbnZpcm9ubWVudDogRXhwZWN0ZWQgdG8gaGF2ZSBmb3VuZCBhIFJlbGF5IGVudmlyb25tZW50IHByb3ZpZGVkIGJ5ICcgKyAnYSBgUmVsYXlFbnZpcm9ubWVudFByb3ZpZGVyYCBjb21wb25lbnQuICcgKyAnVGhpcyB1c3VhbGx5IG1lYW5zIHRoYXQgdXNlUmVsYXlFbnZpcm9ubWVudCB3YXMgdXNlZCBpbiBhICcgKyAnY29tcG9uZW50IHRoYXQgaXMgbm90IGEgZGVzY2VuZGFudCBvZiBhIGBSZWxheUVudmlyb25tZW50UHJvdmlkZXJgLiAnICsgJ1BsZWFzZSBtYWtlIHN1cmUgYSBgUmVsYXlFbnZpcm9ubWVudFByb3ZpZGVyYCBoYXMgYmVlbiByZW5kZXJlZCBzb21ld2hlcmUgJyArICdhcyBhIHBhcmVudCBvciBhbmNlc3RvciBvZiB5b3VyIGNvbXBvbmVudC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjb250ZXh0LmVudmlyb25tZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZVJlbGF5RW52aXJvbm1lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHVzZVJlZiA9IF9yZXF1aXJlLnVzZVJlZjtcblxuZnVuY3Rpb24gdXNlU3RhdGljRnJhZ21lbnROb2RlV2FybmluZyhmcmFnbWVudE5vZGUsIHdhcm5pbmdDb250ZXh0KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBUaGlzIGlzIGNhbGxpbmcgYHVzZVJlZmAgY29uZGl0aW9uYWxseSwgYnV0IGJhc2VkIG9uIHRoZSBlbnZpcm9ubWVudFxuICAgIC8vIF9fREVWX18gc2V0dGluZyB3aGljaCBzaG91bGRuJ3QgY2hhbmdlLiBUaGlzIGFsbG93cyB1cyB0byBvbmx5IHBheSB0aGVcbiAgICAvLyBjb3N0IG9mIGB1c2VSZWZgIGluIGRldmVsb3BtZW50IG1vZGUgdG8gcHJvZHVjZSB0aGUgd2FybmluZy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICB2YXIgaW5pdGlhbFByb3BSZWYgPSB1c2VSZWYoZnJhZ21lbnROb2RlLm5hbWUpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoaW5pdGlhbFByb3BSZWYuY3VycmVudCA9PT0gZnJhZ21lbnROb2RlLm5hbWUsICdSZWxheTogVGhlICVzIGhhcyB0byByZW1haW4gdGhlIHNhbWUgb3ZlciB0aGUgbGlmZXRpbWUgb2YgYSBjb21wb25lbnQuICcgKyAnQ2hhbmdpbmcgaXQgaXMgbm90IHN1cHBvcnRlZCBhbmQgd2lsbCByZXN1bHQgaW4gdW5leHBlY3RlZCBiZWhhdmlvci4nLCB3YXJuaW5nQ29udGV4dCkgOiB2b2lkIDA7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VTdGF0aWNGcmFnbWVudE5vZGVXYXJuaW5nOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIHVzZVJlbGF5RW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL3VzZVJlbGF5RW52aXJvbm1lbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVhY3QnKSxcbiAgICB1c2VFZmZlY3QgPSBfcmVxdWlyZS51c2VFZmZlY3QsXG4gICAgdXNlUmVmID0gX3JlcXVpcmUudXNlUmVmO1xuXG4vKipcbiAqIFRoaXMgaG9vayBzdWJzY3JpYmVzIGEgY2FsbGJhY2sgdG8gdGhlIGludmFsaWRhdGlvbiBzdGF0ZSBvZiB0aGUgZ2l2ZW4gZGF0YVxuICogaWRzLlxuICogQW55IHRpbWUgdGhlIGludmFsaWRhdGlvbiBzdGF0ZSBvZiB0aGUgZ2l2ZW4gZGF0YSBpZHMgY2hhbmdlcywgdGhlIHByb3ZpZGVkXG4gKiBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZC5cbiAqIElmIG5ldyBpZHMgb3IgYSBuZXcgY2FsbGJhY2sgYXJlIHByb3ZpZGVkLCB0aGUgc3Vic2NyaXB0aW9uIHdpbGwgYmVcbiAqIHJlLWVzdGFibGlzaGVkIGFuZCB0aGUgcHJldmlvdXMgb25lIHdpbGwgYmUgZGlzcG9zZWQuXG4gKiBUaGUgc3Vic2NyaXB0aW9uIHdpbGwgYXV0b21hdGljYWxseSBiZSBkaXNwb3NlZCBvbiB1bm1vdW50XG4gKi9cbmZ1bmN0aW9uIHVzZVN1YnNjcmliZVRvSW52YWxpZGF0aW9uU3RhdGUoZGF0YUlEcywgY2FsbGJhY2spIHtcbiAgdmFyIGVudmlyb25tZW50ID0gdXNlUmVsYXlFbnZpcm9ubWVudCgpO1xuICB2YXIgZGlzcG9zYWJsZVJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIHN0YWJsZURhdGFJRHMgPSBBcnJheS5mcm9tKGRhdGFJRHMpLnNvcnQoKS5qb2luKCcnKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RvcmUgPSBlbnZpcm9ubWVudC5nZXRTdG9yZSgpO1xuICAgIHZhciBpbnZhbGlkYXRpb25TdGF0ZSA9IHN0b3JlLmxvb2t1cEludmFsaWRhdGlvblN0YXRlKGRhdGFJRHMpO1xuICAgIHZhciBkaXNwb3NhYmxlID0gc3RvcmUuc3Vic2NyaWJlVG9JbnZhbGlkYXRpb25TdGF0ZShpbnZhbGlkYXRpb25TdGF0ZSwgY2FsbGJhY2spO1xuICAgIGRpc3Bvc2FibGVSZWYuY3VycmVudCA9IGRpc3Bvc2FibGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBkaXNwb3NhYmxlLmRpc3Bvc2UoKTtcbiAgICB9OyAvLyBJbnRlbnRpb25hbGx5IGV4Y2x1ZGluZyBkYXRhSURzLCBzaW5jZSB3ZSdyZSB1c2luZyBzdGFibGVEYXRhSURzXG4gICAgLy8gaW5zdGVhZFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW3N0YWJsZURhdGFJRHMsIGNhbGxiYWNrLCBlbnZpcm9ubWVudF0pO1xuICByZXR1cm4ge1xuICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICBpZiAoZGlzcG9zYWJsZVJlZi5jdXJyZW50ICE9IG51bGwpIHtcbiAgICAgICAgZGlzcG9zYWJsZVJlZi5jdXJyZW50LmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXNlU3Vic2NyaWJlVG9JbnZhbGlkYXRpb25TdGF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIHVzZVJlbGF5RW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL3VzZVJlbGF5RW52aXJvbm1lbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgncmVsYXktcnVudGltZScpLFxuICAgIHJlcXVlc3RTdWJzY3JpcHRpb24gPSBfcmVxdWlyZS5yZXF1ZXN0U3Vic2NyaXB0aW9uO1xuXG5mdW5jdGlvbiB1c2VTdWJzY3JpcHRpb24oY29uZmlnLCByZXF1ZXN0U3Vic2NyaXB0aW9uRm4pIHtcbiAgLy8gTi5CLiB0aGlzIHdpbGwgcmUtc3Vic2NyaWJlIGV2ZXJ5IHJlbmRlciBpZiBjb25maWcgb3IgcmVxdWVzdFN1YnNjcmlwdGlvbkZuXG4gIC8vIGFyZSBub3QgbWVtb2l6ZWQuXG4gIC8vIFBsZWFzZSBkbyBub3QgcGFzcyBhbiBvYmplY3QgZGVmaW5lZCBpbi1saW5lLlxuICB2YXIgYWN0dWFsUmVxdWVzdFN1YnNjcmlwdGlvbiA9IHJlcXVlc3RTdWJzY3JpcHRpb25GbiAhPT0gbnVsbCAmJiByZXF1ZXN0U3Vic2NyaXB0aW9uRm4gIT09IHZvaWQgMCA/IHJlcXVlc3RTdWJzY3JpcHRpb25GbiA6IHJlcXVlc3RTdWJzY3JpcHRpb247XG4gIHZhciBlbnZpcm9ubWVudCA9IHVzZVJlbGF5RW52aXJvbm1lbnQoKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3JlcXVlc3RTdWJzY3JpcHRpb24gPSByZXF1ZXN0U3Vic2NyaXB0aW9uKGVudmlyb25tZW50LCBjb25maWcpLFxuICAgICAgICBkaXNwb3NlID0gX3JlcXVlc3RTdWJzY3JpcHRpb24uZGlzcG9zZTtcblxuICAgIHJldHVybiBkaXNwb3NlO1xuICB9LCBbZW52aXJvbm1lbnQsIGNvbmZpZywgYWN0dWFsUmVxdWVzdFN1YnNjcmlwdGlvbl0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZVN1YnNjcmlwdGlvbjsiLCJmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5TGlrZVRvQXJyYXk7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCIpO1xuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJ2YXIgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiKTtcblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHtcbiAgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07XG5cbiAgaWYgKCFpdCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgaWYgKGl0KSBvID0gaXQ7XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHZhciBGID0gZnVuY3Rpb24gRigpIHt9O1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzOiBGLFxuICAgICAgICBuOiBmdW5jdGlvbiBuKCkge1xuICAgICAgICAgIGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IG9baSsrXVxuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGU6IGZ1bmN0aW9uIGUoX2UpIHtcbiAgICAgICAgICB0aHJvdyBfZTtcbiAgICAgICAgfSxcbiAgICAgICAgZjogRlxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG4gIH1cblxuICB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsXG4gICAgICBkaWRFcnIgPSBmYWxzZSxcbiAgICAgIGVycjtcbiAgcmV0dXJuIHtcbiAgICBzOiBmdW5jdGlvbiBzKCkge1xuICAgICAgaXQgPSBpdC5jYWxsKG8pO1xuICAgIH0sXG4gICAgbjogZnVuY3Rpb24gbigpIHtcbiAgICAgIHZhciBzdGVwID0gaXQubmV4dCgpO1xuICAgICAgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTtcbiAgICAgIHJldHVybiBzdGVwO1xuICAgIH0sXG4gICAgZTogZnVuY3Rpb24gZShfZTIpIHtcbiAgICAgIGRpZEVyciA9IHRydWU7XG4gICAgICBlcnIgPSBfZTI7XG4gICAgfSxcbiAgICBmOiBmdW5jdGlvbiBmKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0W1wicmV0dXJuXCJdICE9IG51bGwpIGl0W1wicmV0dXJuXCJdKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZpbmVQcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcztcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzTG9vc2U7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVNwcmVhZDtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi9kZWZpbmVQcm9wZXJ0eS5qc1wiKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuXG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSB7XG4gICAgICBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RTcHJlYWQyO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2Y7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwidmFyIGFycmF5V2l0aG91dEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRob3V0SG9sZXMuanNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIik7XG5cbnZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZC5qc1wiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQ29uc3VtYWJsZUFycmF5O1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsInZhciBhcnJheUxpa2VUb0FycmF5ID0gcmVxdWlyZShcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiKTtcblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXk7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIFJlbGF5IHYxMS4wLjJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2luZGV4LmpzJyk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIENvbm5lY3Rpb25IYW5kbGVyID0gcmVxdWlyZSgnLi9jb25uZWN0aW9uL0Nvbm5lY3Rpb25IYW5kbGVyJyk7XG5cbnZhciBNdXRhdGlvbkhhbmRsZXJzID0gcmVxdWlyZSgnLi9jb25uZWN0aW9uL011dGF0aW9uSGFuZGxlcnMnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG5mdW5jdGlvbiBSZWxheURlZmF1bHRIYW5kbGVyUHJvdmlkZXIoaGFuZGxlKSB7XG4gIHN3aXRjaCAoaGFuZGxlKSB7XG4gICAgY2FzZSAnY29ubmVjdGlvbic6XG4gICAgICByZXR1cm4gQ29ubmVjdGlvbkhhbmRsZXI7XG5cbiAgICBjYXNlICdkZWxldGVSZWNvcmQnOlxuICAgICAgcmV0dXJuIE11dGF0aW9uSGFuZGxlcnMuRGVsZXRlUmVjb3JkSGFuZGxlcjtcblxuICAgIGNhc2UgJ2RlbGV0ZUVkZ2UnOlxuICAgICAgcmV0dXJuIE11dGF0aW9uSGFuZGxlcnMuRGVsZXRlRWRnZUhhbmRsZXI7XG5cbiAgICBjYXNlICdhcHBlbmRFZGdlJzpcbiAgICAgIHJldHVybiBNdXRhdGlvbkhhbmRsZXJzLkFwcGVuZEVkZ2VIYW5kbGVyO1xuXG4gICAgY2FzZSAncHJlcGVuZEVkZ2UnOlxuICAgICAgcmV0dXJuIE11dGF0aW9uSGFuZGxlcnMuUHJlcGVuZEVkZ2VIYW5kbGVyO1xuXG4gICAgY2FzZSAnYXBwZW5kTm9kZSc6XG4gICAgICByZXR1cm4gTXV0YXRpb25IYW5kbGVycy5BcHBlbmROb2RlSGFuZGxlcjtcblxuICAgIGNhc2UgJ3ByZXBlbmROb2RlJzpcbiAgICAgIHJldHVybiBNdXRhdGlvbkhhbmRsZXJzLlByZXBlbmROb2RlSGFuZGxlcjtcbiAgfVxuXG4gICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5RGVmYXVsdEhhbmRsZXJQcm92aWRlcjogTm8gaGFuZGxlciBwcm92aWRlZCBmb3IgYCVzYC4nLCBoYW5kbGUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheURlZmF1bHRIYW5kbGVyUHJvdmlkZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDb25uZWN0aW9uSW50ZXJmYWNlID0gcmVxdWlyZSgnLi9Db25uZWN0aW9uSW50ZXJmYWNlJyk7XG5cbnZhciBnZXRSZWxheUhhbmRsZUtleSA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvZ2V0UmVsYXlIYW5kbGVLZXknKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZS9DbGllbnRJRCcpLFxuICAgIGdlbmVyYXRlQ2xpZW50SUQgPSBfcmVxdWlyZS5nZW5lcmF0ZUNsaWVudElEO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi4vLi4vc3RvcmUvUmVsYXlTdG9yZVV0aWxzJyksXG4gICAgZ2V0U3RhYmxlU3RvcmFnZUtleSA9IF9yZXF1aXJlMi5nZXRTdGFibGVTdG9yYWdlS2V5O1xuXG52YXIgQ09OTkVDVElPTiA9ICdjb25uZWN0aW9uJzsgLy8gUGVyLWluc3RhbmNlIGluY3JlbWVudGluZyBpbmRleCB1c2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBlZGdlIElEc1xuXG52YXIgTkVYVF9FREdFX0lOREVYID0gJ19fY29ubmVjdGlvbl9uZXh0X2VkZ2VfaW5kZXgnO1xuLyoqXG4gKiBAcHVibGljXG4gKlxuICogQSBkZWZhdWx0IHJ1bnRpbWUgaGFuZGxlciBmb3IgY29ubmVjdGlvbiBmaWVsZHMgdGhhdCBhcHBlbmRzIG5ld2x5IGZldGNoZWRcbiAqIGVkZ2VzIG9udG8gdGhlIGVuZCBvZiBhIGNvbm5lY3Rpb24sIHJlZ2FyZGxlc3Mgb2YgdGhlIGFyZ3VtZW50cyB1c2VkIHRvIGZldGNoXG4gKiB0aG9zZSBlZGdlcy5cbiAqL1xuXG5mdW5jdGlvbiB1cGRhdGUoc3RvcmUsIHBheWxvYWQpIHtcbiAgdmFyIHJlY29yZCA9IHN0b3JlLmdldChwYXlsb2FkLmRhdGFJRCk7XG5cbiAgaWYgKCFyZWNvcmQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX0Nvbm5lY3Rpb25JbnRlcmZhY2UkID0gQ29ubmVjdGlvbkludGVyZmFjZS5nZXQoKSxcbiAgICAgIEVER0VTID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkLkVER0VTLFxuICAgICAgRU5EX0NVUlNPUiA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJC5FTkRfQ1VSU09SLFxuICAgICAgSEFTX05FWFRfUEFHRSA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJC5IQVNfTkVYVF9QQUdFLFxuICAgICAgSEFTX1BSRVZfUEFHRSA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJC5IQVNfUFJFVl9QQUdFLFxuICAgICAgUEFHRV9JTkZPID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkLlBBR0VfSU5GTyxcbiAgICAgIFBBR0VfSU5GT19UWVBFID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkLlBBR0VfSU5GT19UWVBFLFxuICAgICAgU1RBUlRfQ1VSU09SID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkLlNUQVJUX0NVUlNPUjtcblxuICB2YXIgc2VydmVyQ29ubmVjdGlvbiA9IHJlY29yZC5nZXRMaW5rZWRSZWNvcmQocGF5bG9hZC5maWVsZEtleSk7XG4gIHZhciBzZXJ2ZXJQYWdlSW5mbyA9IHNlcnZlckNvbm5lY3Rpb24gJiYgc2VydmVyQ29ubmVjdGlvbi5nZXRMaW5rZWRSZWNvcmQoUEFHRV9JTkZPKTtcblxuICBpZiAoIXNlcnZlckNvbm5lY3Rpb24pIHtcbiAgICByZWNvcmQuc2V0VmFsdWUobnVsbCwgcGF5bG9hZC5oYW5kbGVLZXkpO1xuICAgIHJldHVybjtcbiAgfSAvLyBJbiByYXJlIGNhc2VzIHRoZSBoYW5kbGVLZXkgZmllbGQgbWF5IGJlIHVuc2V0IGV2ZW4gdGhvdWdoIHRoZSBjbGllbnRcbiAgLy8gY29ubmVjdGlvbiByZWNvcmQgZXhpc3RzLCBpbiB0aGlzIGNhc2UgbmV3IGVkZ2VzIHNob3VsZCBzdGlsbCBiZSBtZXJnZWRcbiAgLy8gaW50byB0aGUgZXhpc3RpbmcgY2xpZW50IGNvbm5lY3Rpb24gcmVjb3JkIChhbmQgdGhlIGZpZWxkIHJlc2V0IHRvIHBvaW50XG4gIC8vIHRvIHRoYXQgcmVjb3JkKS5cblxuXG4gIHZhciBjbGllbnRDb25uZWN0aW9uSUQgPSBnZW5lcmF0ZUNsaWVudElEKHJlY29yZC5nZXREYXRhSUQoKSwgcGF5bG9hZC5oYW5kbGVLZXkpO1xuICB2YXIgY2xpZW50Q29ubmVjdGlvbkZpZWxkID0gcmVjb3JkLmdldExpbmtlZFJlY29yZChwYXlsb2FkLmhhbmRsZUtleSk7XG4gIHZhciBjbGllbnRDb25uZWN0aW9uID0gY2xpZW50Q29ubmVjdGlvbkZpZWxkICE9PSBudWxsICYmIGNsaWVudENvbm5lY3Rpb25GaWVsZCAhPT0gdm9pZCAwID8gY2xpZW50Q29ubmVjdGlvbkZpZWxkIDogc3RvcmUuZ2V0KGNsaWVudENvbm5lY3Rpb25JRCk7XG4gIHZhciBjbGllbnRQYWdlSW5mbyA9IGNsaWVudENvbm5lY3Rpb24gJiYgY2xpZW50Q29ubmVjdGlvbi5nZXRMaW5rZWRSZWNvcmQoUEFHRV9JTkZPKTtcblxuICBpZiAoIWNsaWVudENvbm5lY3Rpb24pIHtcbiAgICAvLyBJbml0aWFsIGZldGNoIHdpdGggZGF0YTogY29weSBmaWVsZHMgZnJvbSB0aGUgc2VydmVyIHJlY29yZFxuICAgIHZhciBjb25uZWN0aW9uID0gc3RvcmUuY3JlYXRlKGNsaWVudENvbm5lY3Rpb25JRCwgc2VydmVyQ29ubmVjdGlvbi5nZXRUeXBlKCkpO1xuICAgIGNvbm5lY3Rpb24uc2V0VmFsdWUoMCwgTkVYVF9FREdFX0lOREVYKTtcbiAgICBjb25uZWN0aW9uLmNvcHlGaWVsZHNGcm9tKHNlcnZlckNvbm5lY3Rpb24pO1xuICAgIHZhciBzZXJ2ZXJFZGdlcyA9IHNlcnZlckNvbm5lY3Rpb24uZ2V0TGlua2VkUmVjb3JkcyhFREdFUyk7XG5cbiAgICBpZiAoc2VydmVyRWRnZXMpIHtcbiAgICAgIHNlcnZlckVkZ2VzID0gc2VydmVyRWRnZXMubWFwKGZ1bmN0aW9uIChlZGdlKSB7XG4gICAgICAgIHJldHVybiBidWlsZENvbm5lY3Rpb25FZGdlKHN0b3JlLCBjb25uZWN0aW9uLCBlZGdlKTtcbiAgICAgIH0pO1xuICAgICAgY29ubmVjdGlvbi5zZXRMaW5rZWRSZWNvcmRzKHNlcnZlckVkZ2VzLCBFREdFUyk7XG4gICAgfVxuXG4gICAgcmVjb3JkLnNldExpbmtlZFJlY29yZChjb25uZWN0aW9uLCBwYXlsb2FkLmhhbmRsZUtleSk7XG4gICAgY2xpZW50UGFnZUluZm8gPSBzdG9yZS5jcmVhdGUoZ2VuZXJhdGVDbGllbnRJRChjb25uZWN0aW9uLmdldERhdGFJRCgpLCBQQUdFX0lORk8pLCBQQUdFX0lORk9fVFlQRSk7XG4gICAgY2xpZW50UGFnZUluZm8uc2V0VmFsdWUoZmFsc2UsIEhBU19ORVhUX1BBR0UpO1xuICAgIGNsaWVudFBhZ2VJbmZvLnNldFZhbHVlKGZhbHNlLCBIQVNfUFJFVl9QQUdFKTtcbiAgICBjbGllbnRQYWdlSW5mby5zZXRWYWx1ZShudWxsLCBFTkRfQ1VSU09SKTtcbiAgICBjbGllbnRQYWdlSW5mby5zZXRWYWx1ZShudWxsLCBTVEFSVF9DVVJTT1IpO1xuXG4gICAgaWYgKHNlcnZlclBhZ2VJbmZvKSB7XG4gICAgICBjbGllbnRQYWdlSW5mby5jb3B5RmllbGRzRnJvbShzZXJ2ZXJQYWdlSW5mbyk7XG4gICAgfVxuXG4gICAgY29ubmVjdGlvbi5zZXRMaW5rZWRSZWNvcmQoY2xpZW50UGFnZUluZm8sIFBBR0VfSU5GTyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGNsaWVudENvbm5lY3Rpb25GaWVsZCA9PSBudWxsKSB7XG4gICAgICAvLyBJZiB0aGUgaGFuZGxlS2V5IGZpZWxkIHdhcyB1bnNldCBidXQgdGhlIGNsaWVudCBjb25uZWN0aW9uIHJlY29yZFxuICAgICAgLy8gZXhpc3RlZCwgdXBkYXRlIHRoZSBmaWVsZCB0byBwb2ludCB0byB0aGUgcmVjb3JkXG4gICAgICByZWNvcmQuc2V0TGlua2VkUmVjb3JkKGNsaWVudENvbm5lY3Rpb24sIHBheWxvYWQuaGFuZGxlS2V5KTtcbiAgICB9XG5cbiAgICB2YXIgX2Nvbm5lY3Rpb24gPSBjbGllbnRDb25uZWN0aW9uOyAvLyBTdWJzZXF1ZW50IGZldGNoZXM6XG4gICAgLy8gLSB1cGRhdGVkIGZpZWxkcyBvbiB0aGUgY29ubmVjdGlvblxuICAgIC8vIC0gbWVyZ2UgcHJldi9uZXh0IGVkZ2VzLCBkZS1kdXBsaWNhdGluZyBieSBub2RlIGlkXG4gICAgLy8gLSBzeW50aGVzaXplIHBhZ2UgaW5mbyBmaWVsZHNcblxuICAgIHZhciBfc2VydmVyRWRnZXMgPSBzZXJ2ZXJDb25uZWN0aW9uLmdldExpbmtlZFJlY29yZHMoRURHRVMpO1xuXG4gICAgaWYgKF9zZXJ2ZXJFZGdlcykge1xuICAgICAgX3NlcnZlckVkZ2VzID0gX3NlcnZlckVkZ2VzLm1hcChmdW5jdGlvbiAoZWRnZSkge1xuICAgICAgICByZXR1cm4gYnVpbGRDb25uZWN0aW9uRWRnZShzdG9yZSwgX2Nvbm5lY3Rpb24sIGVkZ2UpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZFZGdlcyA9IF9jb25uZWN0aW9uLmdldExpbmtlZFJlY29yZHMoRURHRVMpO1xuXG4gICAgdmFyIHByZXZQYWdlSW5mbyA9IF9jb25uZWN0aW9uLmdldExpbmtlZFJlY29yZChQQUdFX0lORk8pO1xuXG4gICAgX2Nvbm5lY3Rpb24uY29weUZpZWxkc0Zyb20oc2VydmVyQ29ubmVjdGlvbik7IC8vIFJlc2V0IEVER0VTIGFuZCBQQUdFX0lORk8gZmllbGRzXG5cblxuICAgIGlmIChwcmV2RWRnZXMpIHtcbiAgICAgIF9jb25uZWN0aW9uLnNldExpbmtlZFJlY29yZHMocHJldkVkZ2VzLCBFREdFUyk7XG4gICAgfVxuXG4gICAgaWYgKHByZXZQYWdlSW5mbykge1xuICAgICAgX2Nvbm5lY3Rpb24uc2V0TGlua2VkUmVjb3JkKHByZXZQYWdlSW5mbywgUEFHRV9JTkZPKTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEVkZ2VzID0gW107XG4gICAgdmFyIGFyZ3MgPSBwYXlsb2FkLmFyZ3M7XG5cbiAgICBpZiAocHJldkVkZ2VzICYmIF9zZXJ2ZXJFZGdlcykge1xuICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBpZiAoYXJncy5hZnRlciAhPSBudWxsKSB7XG4gICAgICAgIC8vIEZvcndhcmQgcGFnaW5hdGlvbiBmcm9tIHRoZSBlbmQgb2YgdGhlIGNvbm5lY3Rpb246IGFwcGVuZCBlZGdlc1xuICAgICAgICBpZiAoY2xpZW50UGFnZUluZm8gJiYgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICAgIGFyZ3MuYWZ0ZXIgPT09IGNsaWVudFBhZ2VJbmZvLmdldFZhbHVlKEVORF9DVVJTT1IpKSB7XG4gICAgICAgICAgdmFyIG5vZGVJRHMgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgbWVyZ2VFZGdlcyhwcmV2RWRnZXMsIG5leHRFZGdlcywgbm9kZUlEcyk7XG4gICAgICAgICAgbWVyZ2VFZGdlcyhfc2VydmVyRWRnZXMsIG5leHRFZGdlcywgbm9kZUlEcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5OiBVbmV4cGVjdGVkIGFmdGVyIGN1cnNvciBgJXNgLCBlZGdlcyBtdXN0ICcgKyAnYmUgZmV0Y2hlZCBmcm9tIHRoZSBlbmQgb2YgdGhlIGxpc3QgKGAlc2ApLicsIGFyZ3MuYWZ0ZXIsIGNsaWVudFBhZ2VJbmZvICYmIGNsaWVudFBhZ2VJbmZvLmdldFZhbHVlKEVORF9DVVJTT1IpKSA6IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cbiAgICAgIH0gZWxzZSBpZiAoYXJncy5iZWZvcmUgIT0gbnVsbCkge1xuICAgICAgICAvLyBCYWNrd2FyZCBwYWdpbmF0aW9uIGZyb20gdGhlIHN0YXJ0IG9mIHRoZSBjb25uZWN0aW9uOiBwcmVwZW5kIGVkZ2VzXG4gICAgICAgIGlmIChjbGllbnRQYWdlSW5mbyAmJiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgICAgYXJncy5iZWZvcmUgPT09IGNsaWVudFBhZ2VJbmZvLmdldFZhbHVlKFNUQVJUX0NVUlNPUikpIHtcbiAgICAgICAgICB2YXIgX25vZGVJRHMgPSBuZXcgU2V0KCk7XG5cbiAgICAgICAgICBtZXJnZUVkZ2VzKF9zZXJ2ZXJFZGdlcywgbmV4dEVkZ2VzLCBfbm9kZUlEcyk7XG4gICAgICAgICAgbWVyZ2VFZGdlcyhwcmV2RWRnZXMsIG5leHRFZGdlcywgX25vZGVJRHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdSZWxheTogVW5leHBlY3RlZCBiZWZvcmUgY3Vyc29yIGAlc2AsIGVkZ2VzIG11c3QgJyArICdiZSBmZXRjaGVkIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdCAoYCVzYCkuJywgYXJncy5iZWZvcmUsIGNsaWVudFBhZ2VJbmZvICYmIGNsaWVudFBhZ2VJbmZvLmdldFZhbHVlKFNUQVJUX0NVUlNPUikpIDogdm9pZCAwO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhlIGNvbm5lY3Rpb24gd2FzIHJlZmV0Y2hlZCBmcm9tIHRoZSBiZWdpbm5pbmcvZW5kOiByZXBsYWNlIGVkZ2VzXG4gICAgICAgIG5leHRFZGdlcyA9IF9zZXJ2ZXJFZGdlcztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKF9zZXJ2ZXJFZGdlcykge1xuICAgICAgbmV4dEVkZ2VzID0gX3NlcnZlckVkZ2VzO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0RWRnZXMgPSBwcmV2RWRnZXM7XG4gICAgfSAvLyBVcGRhdGUgZWRnZXMgb25seSBpZiB0aGV5IHdlcmUgdXBkYXRlZCwgdGhlIG51bGwgY2hlY2sgaXNcbiAgICAvLyBmb3IgRmxvdyAocHJldkVkZ2VzIGNvdWxkIGJlIG51bGwpLlxuXG5cbiAgICBpZiAobmV4dEVkZ2VzICE9IG51bGwgJiYgbmV4dEVkZ2VzICE9PSBwcmV2RWRnZXMpIHtcbiAgICAgIF9jb25uZWN0aW9uLnNldExpbmtlZFJlY29yZHMobmV4dEVkZ2VzLCBFREdFUyk7XG4gICAgfSAvLyBQYWdlIGluZm8gc2hvdWxkIGJlIHVwZGF0ZWQgZXZlbiBpZiBubyBuZXcgZWRnZSB3ZXJlIHJldHVybmVkLlxuXG5cbiAgICBpZiAoY2xpZW50UGFnZUluZm8gJiYgc2VydmVyUGFnZUluZm8pIHtcbiAgICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgaWYgKGFyZ3MuYWZ0ZXIgPT0gbnVsbCAmJiBhcmdzLmJlZm9yZSA9PSBudWxsKSB7XG4gICAgICAgIC8vIFRoZSBjb25uZWN0aW9uIHdhcyByZWZldGNoZWQgZnJvbSB0aGUgYmVnaW5uaW5nL2VuZDogcmVwbGFjZVxuICAgICAgICAvLyBwYWdlX2luZm9cbiAgICAgICAgY2xpZW50UGFnZUluZm8uY29weUZpZWxkc0Zyb20oc2VydmVyUGFnZUluZm8pOyAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIH0gZWxzZSBpZiAoYXJncy5iZWZvcmUgIT0gbnVsbCB8fCBhcmdzLmFmdGVyID09IG51bGwgJiYgYXJncy5sYXN0KSB7XG4gICAgICAgIGNsaWVudFBhZ2VJbmZvLnNldFZhbHVlKCEhc2VydmVyUGFnZUluZm8uZ2V0VmFsdWUoSEFTX1BSRVZfUEFHRSksIEhBU19QUkVWX1BBR0UpO1xuICAgICAgICB2YXIgc3RhcnRDdXJzb3IgPSBzZXJ2ZXJQYWdlSW5mby5nZXRWYWx1ZShTVEFSVF9DVVJTT1IpO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc3RhcnRDdXJzb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY2xpZW50UGFnZUluZm8uc2V0VmFsdWUoc3RhcnRDdXJzb3IsIFNUQVJUX0NVUlNPUik7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cbiAgICAgIH0gZWxzZSBpZiAoYXJncy5hZnRlciAhPSBudWxsIHx8IGFyZ3MuYmVmb3JlID09IG51bGwgJiYgYXJncy5maXJzdCkge1xuICAgICAgICBjbGllbnRQYWdlSW5mby5zZXRWYWx1ZSghIXNlcnZlclBhZ2VJbmZvLmdldFZhbHVlKEhBU19ORVhUX1BBR0UpLCBIQVNfTkVYVF9QQUdFKTtcbiAgICAgICAgdmFyIGVuZEN1cnNvciA9IHNlcnZlclBhZ2VJbmZvLmdldFZhbHVlKEVORF9DVVJTT1IpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZW5kQ3Vyc29yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGNsaWVudFBhZ2VJbmZvLnNldFZhbHVlKGVuZEN1cnNvciwgRU5EX0NVUlNPUik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIEdpdmVuIGEgcmVjb3JkIGFuZCB0aGUgbmFtZSBvZiB0aGUgc2NoZW1hIGZpZWxkIGZvciB3aGljaCBhIGNvbm5lY3Rpb24gd2FzXG4gKiBmZXRjaGVkLCByZXR1cm5zIHRoZSBsaW5rZWQgY29ubmVjdGlvbiByZWNvcmQuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBHaXZlbiB0aGF0IGRhdGEgaGFzIGFscmVhZHkgYmVlbiBmZXRjaGVkIG9uIHNvbWUgdXNlciBgPGlkPmAgb24gdGhlIGBmcmllbmRzYFxuICogZmllbGQ6XG4gKlxuICogYGBgXG4gKiBmcmFnbWVudCBGcmllbmRzRnJhZ21lbnQgb24gVXNlciB7XG4gKiAgIGZyaWVuZHMoZmlyc3Q6IDEwKSBAY29ubmVjdGlvbihrZXk6IFwiRnJpZW5kc0ZyYWdtZW50X2ZyaWVuZHNcIikge1xuICogICAgZWRnZXMge1xuICogICAgICBub2RlIHtcbiAqICAgICAgICBpZFxuICogICAgICAgIH1cbiAqICAgICAgfVxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgYGZyaWVuZHNgIGNvbm5lY3Rpb24gcmVjb3JkIGNhbiBiZSBhY2Nlc3NlZCB3aXRoOlxuICpcbiAqIGBgYFxuICogc3RvcmUgPT4ge1xuICogICBjb25zdCB1c2VyID0gc3RvcmUuZ2V0KCc8aWQ+Jyk7XG4gKiAgIGNvbnN0IGZyaWVuZHMgPSBDb25uZWN0aW9uSGFuZGxlci5nZXRDb25uZWN0aW9uKHVzZXIsICdGcmllbmRzRnJhZ21lbnRfZnJpZW5kcycpO1xuICogICAvLyBBY2Nlc3MgZmllbGRzIG9uIHRoZSBjb25uZWN0aW9uOlxuICogICBjb25zdCBlZGdlcyA9IGZyaWVuZHMuZ2V0TGlua2VkUmVjb3JkcygnZWRnZXMnKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRPRE86IHQxNTczMzMxMlxuICogQ3VycmVudGx5IHdlIGhhdmVuJ3QgcnVuIGludG8gdGhpcyBjYXNlIHlldCwgYnV0IHdlIG5lZWQgdG8gYWRkIGEgYGdldENvbm5lY3Rpb25zYFxuICogdGhhdCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBjb25uZWN0aW9ucyB1bmRlciB0aGUgc2FtZSBga2V5YCByZWdhcmRsZXNzIG9mIHRoZSB2YXJpYWJsZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRDb25uZWN0aW9uKHJlY29yZCwga2V5LCBmaWx0ZXJzKSB7XG4gIHZhciBoYW5kbGVLZXkgPSBnZXRSZWxheUhhbmRsZUtleShDT05ORUNUSU9OLCBrZXksIG51bGwpO1xuICByZXR1cm4gcmVjb3JkLmdldExpbmtlZFJlY29yZChoYW5kbGVLZXksIGZpbHRlcnMpO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogR2l2ZW4gYSByZWNvcmQgSUQsIHRoZSBrZXkgb2YgYSBjb25uZWN0aW9uIGZpZWxkLCBhbmQgb3B0aW9uYWwgZmlsdGVycyB1c2VkXG4gKiB0byBpZGVudGlmeSB0aGUgY29ubmVjdGlvbiwgcmV0dXJucyB0aGUgY29ubmVjdGlvbiBJRC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIEdpdmVuIHRoYXQgZGF0YSBoYXMgYWxyZWFkeSBiZWVuIGZldGNoZWQgb24gc29tZSB1c2VyIGA8dXNlci1pZD5gIG9uIHRoZSBgZnJpZW5kc2BcbiAqIGZpZWxkOlxuICpcbiAqIGBgYFxuICogZnJhZ21lbnQgRnJpZW5kc0ZyYWdtZW50IG9uIFVzZXIge1xuICogICBmcmllbmRzKGZpcnN0OiAxMCkgQGNvbm5lY3Rpb24oa2V5OiBcIkZyaWVuZHNGcmFnbWVudF9mcmllbmRzXCIpIHtcbiAqICAgICBlZGdlcyB7XG4gKiAgICAgICBub2RlIHtcbiAqICAgICAgICAgaWRcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBJRCBvZiB0aGUgYGZyaWVuZHNgIGNvbm5lY3Rpb24gcmVjb3JkIGNhbiBiZSBhY2Nlc3NlZCB3aXRoOlxuICpcbiAqIGBgYFxuICogc3RvcmUgPT4ge1xuICogICBjb25zdCBjb25uZWN0aW9uSUQgPSBDb25uZWN0aW9uSGFuZGxlci5nZXRDb25uZWN0aW9uSUQoJzx1c2VyLWlkPicsICdGcmllbmRzRnJhZ21lbnRfZnJpZW5kcycpO1xuICogfVxuICogYGBgXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRDb25uZWN0aW9uSUQocmVjb3JkSUQsIGtleSwgZmlsdGVycykge1xuICB2YXIgaGFuZGxlS2V5ID0gZ2V0UmVsYXlIYW5kbGVLZXkoQ09OTkVDVElPTiwga2V5LCBudWxsKTtcbiAgdmFyIHN0b3JhZ2VLZXkgPSBnZXRTdGFibGVTdG9yYWdlS2V5KGhhbmRsZUtleSwgZmlsdGVycyk7XG4gIHJldHVybiBnZW5lcmF0ZUNsaWVudElEKHJlY29yZElELCBzdG9yYWdlS2V5KTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIEluc2VydHMgYW4gZWRnZSBhZnRlciB0aGUgZ2l2ZW4gY3Vyc29yLCBvciBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0IGlmIG5vXG4gKiBjdXJzb3IgaXMgcHJvdmlkZWQuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBHaXZlbiB0aGF0IGRhdGEgaGFzIGFscmVhZHkgYmVlbiBmZXRjaGVkIG9uIHNvbWUgdXNlciBgPGlkPmAgb24gdGhlIGBmcmllbmRzYFxuICogZmllbGQ6XG4gKlxuICogYGBgXG4gKiBmcmFnbWVudCBGcmllbmRzRnJhZ21lbnQgb24gVXNlciB7XG4gKiAgIGZyaWVuZHMoZmlyc3Q6IDEwKSBAY29ubmVjdGlvbihrZXk6IFwiRnJpZW5kc0ZyYWdtZW50X2ZyaWVuZHNcIikge1xuICogICAgZWRnZXMge1xuICogICAgICBub2RlIHtcbiAqICAgICAgICBpZFxuICogICAgICAgIH1cbiAqICAgICAgfVxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBBbiBlZGdlIGNhbiBiZSBhcHBlbmRlZCB3aXRoOlxuICpcbiAqIGBgYFxuICogc3RvcmUgPT4ge1xuICogICBjb25zdCB1c2VyID0gc3RvcmUuZ2V0KCc8aWQ+Jyk7XG4gKiAgIGNvbnN0IGZyaWVuZHMgPSBDb25uZWN0aW9uSGFuZGxlci5nZXRDb25uZWN0aW9uKHVzZXIsICdGcmllbmRzRnJhZ21lbnRfZnJpZW5kcycpO1xuICogICBjb25zdCBlZGdlID0gc3RvcmUuY3JlYXRlKCc8ZWRnZS1pZD4nLCAnRnJpZW5kc0VkZ2UnKTtcbiAqICAgQ29ubmVjdGlvbkhhbmRsZXIuaW5zZXJ0RWRnZUFmdGVyKGZyaWVuZHMsIGVkZ2UpO1xuICogfVxuICogYGBgXG4gKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRFZGdlQWZ0ZXIocmVjb3JkLCBuZXdFZGdlLCBjdXJzb3IpIHtcbiAgdmFyIF9Db25uZWN0aW9uSW50ZXJmYWNlJDIgPSBDb25uZWN0aW9uSW50ZXJmYWNlLmdldCgpLFxuICAgICAgQ1VSU09SID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkMi5DVVJTT1IsXG4gICAgICBFREdFUyA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJDIuRURHRVM7XG5cbiAgdmFyIGVkZ2VzID0gcmVjb3JkLmdldExpbmtlZFJlY29yZHMoRURHRVMpO1xuXG4gIGlmICghZWRnZXMpIHtcbiAgICByZWNvcmQuc2V0TGlua2VkUmVjb3JkcyhbbmV3RWRnZV0sIEVER0VTKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbmV4dEVkZ2VzO1xuXG4gIGlmIChjdXJzb3IgPT0gbnVsbCkge1xuICAgIG5leHRFZGdlcyA9IGVkZ2VzLmNvbmNhdChuZXdFZGdlKTtcbiAgfSBlbHNlIHtcbiAgICBuZXh0RWRnZXMgPSBbXTtcbiAgICB2YXIgZm91bmRDdXJzb3IgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBlZGdlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIHZhciBlZGdlID0gZWRnZXNbaWldO1xuICAgICAgbmV4dEVkZ2VzLnB1c2goZWRnZSk7XG5cbiAgICAgIGlmIChlZGdlID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBlZGdlQ3Vyc29yID0gZWRnZS5nZXRWYWx1ZShDVVJTT1IpO1xuXG4gICAgICBpZiAoY3Vyc29yID09PSBlZGdlQ3Vyc29yKSB7XG4gICAgICAgIG5leHRFZGdlcy5wdXNoKG5ld0VkZ2UpO1xuICAgICAgICBmb3VuZEN1cnNvciA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFmb3VuZEN1cnNvcikge1xuICAgICAgbmV4dEVkZ2VzLnB1c2gobmV3RWRnZSk7XG4gICAgfVxuICB9XG5cbiAgcmVjb3JkLnNldExpbmtlZFJlY29yZHMobmV4dEVkZ2VzLCBFREdFUyk7XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBDcmVhdGVzIGFuIGVkZ2UgZm9yIGEgY29ubmVjdGlvbiByZWNvcmQsIGdpdmVuIGEgbm9kZSBhbmQgZWRnZSB0eXBlLlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlRWRnZShzdG9yZSwgcmVjb3JkLCBub2RlLCBlZGdlVHlwZSkge1xuICB2YXIgX0Nvbm5lY3Rpb25JbnRlcmZhY2UkMyA9IENvbm5lY3Rpb25JbnRlcmZhY2UuZ2V0KCksXG4gICAgICBOT0RFID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkMy5OT0RFOyAvLyBBbiBpbmRleC1iYXNlZCBjbGllbnQgSUQgY291bGQgZWFzaWx5IGNvbmZsaWN0ICh1bmxlc3MgaXQgd2FzXG4gIC8vIGF1dG8taW5jcmVtZW50aW5nLCBidXQgdGhlcmUgaXMgbm93aGVyZSB0byB0aGUgc3RvcmUgdGhlIGlkKVxuICAvLyBJbnN0ZWFkLCBjb25zdHJ1Y3QgYSBjbGllbnQgSUQgYmFzZWQgb24gdGhlIGNvbm5lY3Rpb24gSUQgYW5kIG5vZGUgSUQsXG4gIC8vIHdoaWNoIHdpbGwgb25seSBjb25mbGljdCBpZiB0aGUgc2FtZSBub2RlIGlzIGFkZGVkIHRvIHRoZSBzYW1lIGNvbm5lY3Rpb25cbiAgLy8gdHdpY2UuIFRoaXMgaXMgYWNjZXB0YWJsZSBzaW5jZSB0aGUgYGluc2VydEVkZ2UqYCBmdW5jdGlvbnMgaWdub3JlXG4gIC8vIGR1cGxpY2F0ZXMuXG5cblxuICB2YXIgZWRnZUlEID0gZ2VuZXJhdGVDbGllbnRJRChyZWNvcmQuZ2V0RGF0YUlEKCksIG5vZGUuZ2V0RGF0YUlEKCkpO1xuICB2YXIgZWRnZSA9IHN0b3JlLmdldChlZGdlSUQpO1xuXG4gIGlmICghZWRnZSkge1xuICAgIGVkZ2UgPSBzdG9yZS5jcmVhdGUoZWRnZUlELCBlZGdlVHlwZSk7XG4gIH1cblxuICBlZGdlLnNldExpbmtlZFJlY29yZChub2RlLCBOT0RFKTtcblxuICBpZiAoZWRnZS5nZXRWYWx1ZSgnY3Vyc29yJykgPT0gbnVsbCkge1xuICAgIC8vIEFsd2F5cyB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZCB2YWx1ZSBmb3IgY3Vyc29yXG4gICAgLy8gdG8gYXZvaWQgY29uc2lkZXJpbmcgaXQgYXMgbWlzc2luZyBkYXRhXG4gICAgZWRnZS5zZXRWYWx1ZShudWxsLCAnY3Vyc29yJyk7XG4gIH1cblxuICByZXR1cm4gZWRnZTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIEluc2VydHMgYW4gZWRnZSBiZWZvcmUgdGhlIGdpdmVuIGN1cnNvciwgb3IgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdCBpZlxuICogbm8gY3Vyc29yIGlzIHByb3ZpZGVkLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogR2l2ZW4gdGhhdCBkYXRhIGhhcyBhbHJlYWR5IGJlZW4gZmV0Y2hlZCBvbiBzb21lIHVzZXIgYDxpZD5gIG9uIHRoZSBgZnJpZW5kc2BcbiAqIGZpZWxkOlxuICpcbiAqIGBgYFxuICogZnJhZ21lbnQgRnJpZW5kc0ZyYWdtZW50IG9uIFVzZXIge1xuICogICBmcmllbmRzKGZpcnN0OiAxMCkgQGNvbm5lY3Rpb24oa2V5OiBcIkZyaWVuZHNGcmFnbWVudF9mcmllbmRzXCIpIHtcbiAqICAgIGVkZ2VzIHtcbiAqICAgICAgbm9kZSB7XG4gKiAgICAgICAgaWRcbiAqICAgICAgICB9XG4gKiAgICAgIH1cbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICogQW4gZWRnZSBjYW4gYmUgcHJlcGVuZGVkIHdpdGg6XG4gKlxuICogYGBgXG4gKiBzdG9yZSA9PiB7XG4gKiAgIGNvbnN0IHVzZXIgPSBzdG9yZS5nZXQoJzxpZD4nKTtcbiAqICAgY29uc3QgZnJpZW5kcyA9IENvbm5lY3Rpb25IYW5kbGVyLmdldENvbm5lY3Rpb24odXNlciwgJ0ZyaWVuZHNGcmFnbWVudF9mcmllbmRzJyk7XG4gKiAgIGNvbnN0IGVkZ2UgPSBzdG9yZS5jcmVhdGUoJzxlZGdlLWlkPicsICdGcmllbmRzRWRnZScpO1xuICogICBDb25uZWN0aW9uSGFuZGxlci5pbnNlcnRFZGdlQmVmb3JlKGZyaWVuZHMsIGVkZ2UpO1xuICogfVxuICogYGBgXG4gKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRFZGdlQmVmb3JlKHJlY29yZCwgbmV3RWRnZSwgY3Vyc29yKSB7XG4gIHZhciBfQ29ubmVjdGlvbkludGVyZmFjZSQ0ID0gQ29ubmVjdGlvbkludGVyZmFjZS5nZXQoKSxcbiAgICAgIENVUlNPUiA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJDQuQ1VSU09SLFxuICAgICAgRURHRVMgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQ0LkVER0VTO1xuXG4gIHZhciBlZGdlcyA9IHJlY29yZC5nZXRMaW5rZWRSZWNvcmRzKEVER0VTKTtcblxuICBpZiAoIWVkZ2VzKSB7XG4gICAgcmVjb3JkLnNldExpbmtlZFJlY29yZHMoW25ld0VkZ2VdLCBFREdFUyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG5leHRFZGdlcztcblxuICBpZiAoY3Vyc29yID09IG51bGwpIHtcbiAgICBuZXh0RWRnZXMgPSBbbmV3RWRnZV0uY29uY2F0KGVkZ2VzKTtcbiAgfSBlbHNlIHtcbiAgICBuZXh0RWRnZXMgPSBbXTtcbiAgICB2YXIgZm91bmRDdXJzb3IgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBlZGdlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIHZhciBlZGdlID0gZWRnZXNbaWldO1xuXG4gICAgICBpZiAoZWRnZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBlZGdlQ3Vyc29yID0gZWRnZS5nZXRWYWx1ZShDVVJTT1IpO1xuXG4gICAgICAgIGlmIChjdXJzb3IgPT09IGVkZ2VDdXJzb3IpIHtcbiAgICAgICAgICBuZXh0RWRnZXMucHVzaChuZXdFZGdlKTtcbiAgICAgICAgICBmb3VuZEN1cnNvciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmV4dEVkZ2VzLnB1c2goZWRnZSk7XG4gICAgfVxuXG4gICAgaWYgKCFmb3VuZEN1cnNvcikge1xuICAgICAgbmV4dEVkZ2VzLnVuc2hpZnQobmV3RWRnZSk7XG4gICAgfVxuICB9XG5cbiAgcmVjb3JkLnNldExpbmtlZFJlY29yZHMobmV4dEVkZ2VzLCBFREdFUyk7XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBSZW1vdmUgYW55IGVkZ2VzIHdob3NlIGBub2RlLmlkYCBtYXRjaGVzIHRoZSBnaXZlbiBpZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGRlbGV0ZU5vZGUocmVjb3JkLCBub2RlSUQpIHtcbiAgdmFyIF9Db25uZWN0aW9uSW50ZXJmYWNlJDUgPSBDb25uZWN0aW9uSW50ZXJmYWNlLmdldCgpLFxuICAgICAgRURHRVMgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQ1LkVER0VTLFxuICAgICAgTk9ERSA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJDUuTk9ERTtcblxuICB2YXIgZWRnZXMgPSByZWNvcmQuZ2V0TGlua2VkUmVjb3JkcyhFREdFUyk7XG5cbiAgaWYgKCFlZGdlcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBuZXh0RWRnZXM7XG5cbiAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGVkZ2VzLmxlbmd0aDsgaWkrKykge1xuICAgIHZhciBlZGdlID0gZWRnZXNbaWldO1xuICAgIHZhciBub2RlID0gZWRnZSAmJiBlZGdlLmdldExpbmtlZFJlY29yZChOT0RFKTtcblxuICAgIGlmIChub2RlICE9IG51bGwgJiYgbm9kZS5nZXREYXRhSUQoKSA9PT0gbm9kZUlEKSB7XG4gICAgICBpZiAobmV4dEVkZ2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV4dEVkZ2VzID0gZWRnZXMuc2xpY2UoMCwgaWkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV4dEVkZ2VzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5leHRFZGdlcy5wdXNoKGVkZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChuZXh0RWRnZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJlY29yZC5zZXRMaW5rZWRSZWNvcmRzKG5leHRFZGdlcywgRURHRVMpO1xuICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICpcbiAqIENyZWF0ZXMgYSBjb3B5IG9mIGFuIGVkZ2Ugd2l0aCBhIHVuaXF1ZSBJRCBiYXNlZCBvbiBwZXItY29ubmVjdGlvbi1pbnN0YW5jZVxuICogaW5jcmVtZW50aW5nIGVkZ2UgaW5kZXguIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIGF2b2lkIGNvbGxpc2lvbnMgYmV0d2VlbiBlZGdlcyxcbiAqIHdoaWNoIGNhbiBvY2N1ciBiZWNhdXNlIChlZGdlKSBjbGllbnQgSURzIGFyZSBhc3NpZ25lZCBkZXRlcm1pbmlzdGljYWxseVxuICogYmFzZWQgb24gdGhlIHBhdGggZnJvbSB0aGUgbmVhcmVzdCBub2RlIHdpdGggYW4gaWQuXG4gKlxuICogRXhhbXBsZTogaWYgdGhlIGZpcnN0IE4gZWRnZXMgb2YgdGhlIHNhbWUgY29ubmVjdGlvbiBhcmUgcmVmZXRjaGVkLCB0aGUgZWRnZXNcbiAqIGZyb20gdGhlIHNlY29uZCBmZXRjaCB3aWxsIGJlIGFzc2lnbmVkIHRoZSBzYW1lIElEcyBhcyB0aGUgZmlyc3QgZmV0Y2gsIGV2ZW5cbiAqIHRob3VnaCB0aGUgbm9kZXMgdGhleSBwb2ludCB0byBtYXkgYmUgZGlmZmVyZW50IChvciB0aGUgc2FtZSBhbmQgaW4gZGlmZmVyZW50XG4gKiBvcmRlcikuXG4gKi9cblxuXG5mdW5jdGlvbiBidWlsZENvbm5lY3Rpb25FZGdlKHN0b3JlLCBjb25uZWN0aW9uLCBlZGdlKSB7XG4gIGlmIChlZGdlID09IG51bGwpIHtcbiAgICByZXR1cm4gZWRnZTtcbiAgfVxuXG4gIHZhciBfQ29ubmVjdGlvbkludGVyZmFjZSQ2ID0gQ29ubmVjdGlvbkludGVyZmFjZS5nZXQoKSxcbiAgICAgIEVER0VTID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkNi5FREdFUztcblxuICB2YXIgZWRnZUluZGV4ID0gY29ubmVjdGlvbi5nZXRWYWx1ZShORVhUX0VER0VfSU5ERVgpO1xuICAhKHR5cGVvZiBlZGdlSW5kZXggPT09ICdudW1iZXInKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nvbm5lY3Rpb25IYW5kbGVyOiBFeHBlY3RlZCAlcyB0byBiZSBhIG51bWJlciwgZ290IGAlc2AuJywgTkVYVF9FREdFX0lOREVYLCBlZGdlSW5kZXgpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGVkZ2VJRCA9IGdlbmVyYXRlQ2xpZW50SUQoY29ubmVjdGlvbi5nZXREYXRhSUQoKSwgRURHRVMsIGVkZ2VJbmRleCk7XG4gIHZhciBjb25uZWN0aW9uRWRnZSA9IHN0b3JlLmNyZWF0ZShlZGdlSUQsIGVkZ2UuZ2V0VHlwZSgpKTtcbiAgY29ubmVjdGlvbkVkZ2UuY29weUZpZWxkc0Zyb20oZWRnZSk7XG5cbiAgaWYgKGNvbm5lY3Rpb25FZGdlLmdldFZhbHVlKCdjdXJzb3InKSA9PSBudWxsKSB7XG4gICAgLy8gQWx3YXlzIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkIHZhbHVlIGZvciBjdXJzb3JcbiAgICAvLyB0byBhdm9pZCBjb25zaWRlcmluZyBpdCBhcyBtaXNzaW5nIGRhdGFcbiAgICBjb25uZWN0aW9uRWRnZS5zZXRWYWx1ZShudWxsLCAnY3Vyc29yJyk7XG4gIH1cblxuICBjb25uZWN0aW9uLnNldFZhbHVlKGVkZ2VJbmRleCArIDEsIE5FWFRfRURHRV9JTkRFWCk7XG4gIHJldHVybiBjb25uZWN0aW9uRWRnZTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKlxuICogQWRkcyB0aGUgc291cmNlIGVkZ2VzIHRvIHRoZSB0YXJnZXQgZWRnZXMsIHNraXBwaW5nIGVkZ2VzIHdpdGhcbiAqIGR1cGxpY2F0ZSBub2RlIGlkcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1lcmdlRWRnZXMoc291cmNlRWRnZXMsIHRhcmdldEVkZ2VzLCBub2RlSURzKSB7XG4gIHZhciBfQ29ubmVjdGlvbkludGVyZmFjZSQ3ID0gQ29ubmVjdGlvbkludGVyZmFjZS5nZXQoKSxcbiAgICAgIE5PREUgPSBfQ29ubmVjdGlvbkludGVyZmFjZSQ3Lk5PREU7XG5cbiAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHNvdXJjZUVkZ2VzLmxlbmd0aDsgaWkrKykge1xuICAgIHZhciBlZGdlID0gc291cmNlRWRnZXNbaWldO1xuXG4gICAgaWYgKCFlZGdlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgbm9kZSA9IGVkZ2UuZ2V0TGlua2VkUmVjb3JkKE5PREUpO1xuICAgIHZhciBub2RlSUQgPSBub2RlICYmIG5vZGUuZ2V0RGF0YUlEKCk7XG5cbiAgICBpZiAobm9kZUlEKSB7XG4gICAgICBpZiAobm9kZUlEcy5oYXMobm9kZUlEKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbm9kZUlEcy5hZGQobm9kZUlEKTtcbiAgICB9XG5cbiAgICB0YXJnZXRFZGdlcy5wdXNoKGVkZ2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBidWlsZENvbm5lY3Rpb25FZGdlOiBidWlsZENvbm5lY3Rpb25FZGdlLFxuICBjcmVhdGVFZGdlOiBjcmVhdGVFZGdlLFxuICBkZWxldGVOb2RlOiBkZWxldGVOb2RlLFxuICBnZXRDb25uZWN0aW9uOiBnZXRDb25uZWN0aW9uLFxuICBnZXRDb25uZWN0aW9uSUQ6IGdldENvbm5lY3Rpb25JRCxcbiAgaW5zZXJ0RWRnZUFmdGVyOiBpbnNlcnRFZGdlQWZ0ZXIsXG4gIGluc2VydEVkZ2VCZWZvcmU6IGluc2VydEVkZ2VCZWZvcmUsXG4gIHVwZGF0ZTogdXBkYXRlXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ09OTkVDVElPTl9DQUxMUyA9IHtcbiAgYWZ0ZXI6IHRydWUsXG4gIGJlZm9yZTogdHJ1ZSxcbiAgZmluZDogdHJ1ZSxcbiAgZmlyc3Q6IHRydWUsXG4gIGxhc3Q6IHRydWUsXG4gIHN1cnJvdW5kczogdHJ1ZVxufTtcbnZhciBjb25maWcgPSB7XG4gIENMSUVOVF9NVVRBVElPTl9JRDogJ2NsaWVudE11dGF0aW9uSWQnLFxuICBDVVJTT1I6ICdjdXJzb3InLFxuICBFREdFUzogJ2VkZ2VzJyxcbiAgRU5EX0NVUlNPUjogJ2VuZEN1cnNvcicsXG4gIEhBU19ORVhUX1BBR0U6ICdoYXNOZXh0UGFnZScsXG4gIEhBU19QUkVWX1BBR0U6ICdoYXNQcmV2aW91c1BhZ2UnLFxuICBOT0RFOiAnbm9kZScsXG4gIFBBR0VfSU5GT19UWVBFOiAnUGFnZUluZm8nLFxuICBQQUdFX0lORk86ICdwYWdlSW5mbycsXG4gIFNUQVJUX0NVUlNPUjogJ3N0YXJ0Q3Vyc29yJ1xufTtcbi8qKlxuICogQGludGVybmFsXG4gKlxuICogRGVmaW5lcyBsb2dpYyByZWxldmFudCB0byB0aGUgaW5mb3JtYWwgXCJDb25uZWN0aW9uXCIgR3JhcGhRTCBpbnRlcmZhY2UuXG4gKi9cblxudmFyIENvbm5lY3Rpb25JbnRlcmZhY2UgPSB7XG4gIGluamVjdDogZnVuY3Rpb24gaW5qZWN0KG5ld0NvbmZpZykge1xuICAgIGNvbmZpZyA9IG5ld0NvbmZpZztcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgYSBjYWxsIGV4aXN0cyBzdHJpY3RseSB0byBlbmNvZGUgd2hpY2ggcGFydHMgb2YgYSBjb25uZWN0aW9uXG4gICAqIHRvIGZldGNoLiBGaWVsZHMgdGhhdCBvbmx5IGRpZmZlciBieSBjb25uZWN0aW9uIGNhbGwgdmFsdWVzIHNob3VsZCBoYXZlIHRoZVxuICAgKiBzYW1lIGlkZW50aXR5LlxuICAgKi9cbiAgaXNDb25uZWN0aW9uQ2FsbDogZnVuY3Rpb24gaXNDb25uZWN0aW9uQ2FsbChjYWxsKSB7XG4gICAgcmV0dXJuIENPTk5FQ1RJT05fQ0FMTFMuaGFzT3duUHJvcGVydHkoY2FsbC5uYW1lKTtcbiAgfVxufTtcbm1vZHVsZS5leHBvcnRzID0gQ29ubmVjdGlvbkludGVyZmFjZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJcIikpO1xuXG52YXIgQ29ubmVjdGlvbkhhbmRsZXIgPSByZXF1aXJlKCcuL0Nvbm5lY3Rpb25IYW5kbGVyJyk7XG5cbnZhciBDb25uZWN0aW9uSW50ZXJmYWNlID0gcmVxdWlyZSgnLi9Db25uZWN0aW9uSW50ZXJmYWNlJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxudmFyIERlbGV0ZVJlY29yZEhhbmRsZXIgPSB7XG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKHN0b3JlLCBwYXlsb2FkKSB7XG4gICAgdmFyIHJlY29yZCA9IHN0b3JlLmdldChwYXlsb2FkLmRhdGFJRCk7XG5cbiAgICBpZiAocmVjb3JkICE9IG51bGwpIHtcbiAgICAgIHZhciBpZE9ySWRzID0gcmVjb3JkLmdldFZhbHVlKHBheWxvYWQuZmllbGRLZXkpO1xuXG4gICAgICBpZiAodHlwZW9mIGlkT3JJZHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN0b3JlW1wiZGVsZXRlXCJdKGlkT3JJZHMpO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlkT3JJZHMpKSB7XG4gICAgICAgIGlkT3JJZHMuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc3RvcmVbXCJkZWxldGVcIl0oaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xudmFyIERlbGV0ZUVkZ2VIYW5kbGVyID0ge1xuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShzdG9yZSwgcGF5bG9hZCkge1xuICAgIHZhciByZWNvcmQgPSBzdG9yZS5nZXQocGF5bG9hZC5kYXRhSUQpO1xuXG4gICAgaWYgKHJlY29yZCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuXG4gICAgdmFyIGNvbm5lY3Rpb25zID0gcGF5bG9hZC5oYW5kbGVBcmdzLmNvbm5lY3Rpb25zO1xuICAgICEoY29ubmVjdGlvbnMgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdNdXRhdGlvbkhhbmRsZXJzOiBFeHBlY3RlZCBjb25uZWN0aW9uIElEcyB0byBiZSBzcGVjaWZpZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBpZE9ySWRzID0gcmVjb3JkLmdldFZhbHVlKHBheWxvYWQuZmllbGRLZXkpO1xuICAgIHZhciBpZExpc3QgPSBBcnJheS5pc0FycmF5KGlkT3JJZHMpID8gaWRPcklkcyA6IFtpZE9ySWRzXTtcbiAgICBpZExpc3QuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBfaXRlcmF0b3IgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkoY29ubmVjdGlvbnMpLFxuICAgICAgICAgICAgX3N0ZXA7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb25JRCA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSBzdG9yZS5nZXQoY29ubmVjdGlvbklEKTtcblxuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltSZWxheV1bTXV0YXRpb25dIFRoZSBjb25uZWN0aW9uIHdpdGggaWQgJ1wiLmNvbmNhdChjb25uZWN0aW9uSUQsIFwiJyBkb2Vzbid0IGV4aXN0LlwiKSkgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBDb25uZWN0aW9uSGFuZGxlci5kZWxldGVOb2RlKGNvbm5lY3Rpb24sIGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xudmFyIEFwcGVuZEVkZ2VIYW5kbGVyID0ge1xuICB1cGRhdGU6IGVkZ2VVcGRhdGVyKENvbm5lY3Rpb25IYW5kbGVyLmluc2VydEVkZ2VBZnRlcilcbn07XG52YXIgUHJlcGVuZEVkZ2VIYW5kbGVyID0ge1xuICB1cGRhdGU6IGVkZ2VVcGRhdGVyKENvbm5lY3Rpb25IYW5kbGVyLmluc2VydEVkZ2VCZWZvcmUpXG59O1xudmFyIEFwcGVuZE5vZGVIYW5kbGVyID0ge1xuICB1cGRhdGU6IG5vZGVVcGRhdGVyKENvbm5lY3Rpb25IYW5kbGVyLmluc2VydEVkZ2VBZnRlcilcbn07XG52YXIgUHJlcGVuZE5vZGVIYW5kbGVyID0ge1xuICB1cGRhdGU6IG5vZGVVcGRhdGVyKENvbm5lY3Rpb25IYW5kbGVyLmluc2VydEVkZ2VCZWZvcmUpXG59O1xuXG5mdW5jdGlvbiBlZGdlVXBkYXRlcihpbnNlcnRGbikge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlLCBwYXlsb2FkKSB7XG4gICAgdmFyIF9zZXJ2ZXJFZGdlcztcblxuICAgIHZhciByZWNvcmQgPSBzdG9yZS5nZXQocGF5bG9hZC5kYXRhSUQpO1xuXG4gICAgaWYgKHJlY29yZCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuXG4gICAgdmFyIGNvbm5lY3Rpb25zID0gcGF5bG9hZC5oYW5kbGVBcmdzLmNvbm5lY3Rpb25zO1xuICAgICEoY29ubmVjdGlvbnMgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdNdXRhdGlvbkhhbmRsZXJzOiBFeHBlY3RlZCBjb25uZWN0aW9uIElEcyB0byBiZSBzcGVjaWZpZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBzaW5nbGVTZXJ2ZXJFZGdlLCBzZXJ2ZXJFZGdlcztcblxuICAgIHRyeSB7XG4gICAgICBzaW5nbGVTZXJ2ZXJFZGdlID0gcmVjb3JkLmdldExpbmtlZFJlY29yZChwYXlsb2FkLmZpZWxkS2V5LCBwYXlsb2FkLmFyZ3MpO1xuICAgIH0gY2F0Y2ggKF91bnVzZWQpIHt9XG5cbiAgICBpZiAoIXNpbmdsZVNlcnZlckVkZ2UpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNlcnZlckVkZ2VzID0gcmVjb3JkLmdldExpbmtlZFJlY29yZHMocGF5bG9hZC5maWVsZEtleSwgcGF5bG9hZC5hcmdzKTtcbiAgICAgIH0gY2F0Y2ggKF91bnVzZWQyKSB7fVxuICAgIH1cblxuICAgIGlmIChzaW5nbGVTZXJ2ZXJFZGdlID09IG51bGwgJiYgc2VydmVyRWRnZXMgPT0gbnVsbCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ011dGF0aW9uSGFuZGxlcnM6IEV4cGVjdGVkIHRoZSBzZXJ2ZXIgZWRnZSB0byBiZSBub24tbnVsbC4nKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgX0Nvbm5lY3Rpb25JbnRlcmZhY2UkID0gQ29ubmVjdGlvbkludGVyZmFjZS5nZXQoKSxcbiAgICAgICAgTk9ERSA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJC5OT0RFLFxuICAgICAgICBFREdFUyA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJC5FREdFUztcblxuICAgIHZhciBzZXJ2ZXJFZGdlTGlzdCA9IChfc2VydmVyRWRnZXMgPSBzZXJ2ZXJFZGdlcykgIT09IG51bGwgJiYgX3NlcnZlckVkZ2VzICE9PSB2b2lkIDAgPyBfc2VydmVyRWRnZXMgOiBbc2luZ2xlU2VydmVyRWRnZV07XG5cbiAgICB2YXIgX2l0ZXJhdG9yMiA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShzZXJ2ZXJFZGdlTGlzdCksXG4gICAgICAgIF9zdGVwMjtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgICAgICAgdmFyIHNlcnZlckVkZ2UgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgaWYgKHNlcnZlckVkZ2UgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2VydmVyTm9kZSA9IHNlcnZlckVkZ2UuZ2V0TGlua2VkUmVjb3JkKCdub2RlJyk7XG5cbiAgICAgICAgaWYgKCFzZXJ2ZXJOb2RlKSB7XG4gICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZXJ2ZXJOb2RlSWQgPSBzZXJ2ZXJOb2RlLmdldERhdGFJRCgpO1xuXG4gICAgICAgIHZhciBfaXRlcmF0b3IzID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKGNvbm5lY3Rpb25zKSxcbiAgICAgICAgICAgIF9zdGVwMztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbklEID0gX3N0ZXAzLnZhbHVlO1xuICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSBzdG9yZS5nZXQoY29ubmVjdGlvbklEKTtcblxuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltSZWxheV1bTXV0YXRpb25dIFRoZSBjb25uZWN0aW9uIHdpdGggaWQgJ1wiLmNvbmNhdChjb25uZWN0aW9uSUQsIFwiJyBkb2Vzbid0IGV4aXN0LlwiKSkgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbm9kZUFscmVhZHlFeGlzdHNJbkNvbm5lY3Rpb24gPSAoX2Nvbm5lY3Rpb24kZ2V0TGlua2VkID0gY29ubmVjdGlvbi5nZXRMaW5rZWRSZWNvcmRzKEVER0VTKSkgPT09IG51bGwgfHwgX2Nvbm5lY3Rpb24kZ2V0TGlua2VkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY29ubmVjdGlvbiRnZXRMaW5rZWQuc29tZShmdW5jdGlvbiAoZWRnZSkge1xuICAgICAgICAgICAgICB2YXIgX2VkZ2UkZ2V0TGlua2VkUmVjb3JkO1xuXG4gICAgICAgICAgICAgIHJldHVybiAoZWRnZSA9PT0gbnVsbCB8fCBlZGdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2VkZ2UkZ2V0TGlua2VkUmVjb3JkID0gZWRnZS5nZXRMaW5rZWRSZWNvcmQoTk9ERSkpID09PSBudWxsIHx8IF9lZGdlJGdldExpbmtlZFJlY29yZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2VkZ2UkZ2V0TGlua2VkUmVjb3JkLmdldERhdGFJRCgpKSA9PT0gc2VydmVyTm9kZUlkO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChub2RlQWxyZWFkeUV4aXN0c0luQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNsaWVudEVkZ2UgPSBDb25uZWN0aW9uSGFuZGxlci5idWlsZENvbm5lY3Rpb25FZGdlKHN0b3JlLCBjb25uZWN0aW9uLCBzZXJ2ZXJFZGdlKTtcbiAgICAgICAgICAgICEoY2xpZW50RWRnZSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ011dGF0aW9uSGFuZGxlcnM6IEZhaWxlZCB0byBidWlsZCB0aGUgZWRnZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICBpbnNlcnRGbihjb25uZWN0aW9uLCBjbGllbnRFZGdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjMuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjMuZigpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge1xuICAgICAgICB2YXIgX2Nvbm5lY3Rpb24kZ2V0TGlua2VkO1xuXG4gICAgICAgIHZhciBfcmV0ID0gX2xvb3AoKTtcblxuICAgICAgICBpZiAoX3JldCA9PT0gXCJjb250aW51ZVwiKSBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IyLmYoKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vZGVVcGRhdGVyKGluc2VydEZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RvcmUsIHBheWxvYWQpIHtcbiAgICB2YXIgX3NlcnZlck5vZGVzO1xuXG4gICAgdmFyIHJlY29yZCA9IHN0b3JlLmdldChwYXlsb2FkLmRhdGFJRCk7XG5cbiAgICBpZiAocmVjb3JkID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG5cbiAgICB2YXIgX3BheWxvYWQkaGFuZGxlQXJncyA9IHBheWxvYWQuaGFuZGxlQXJncyxcbiAgICAgICAgY29ubmVjdGlvbnMgPSBfcGF5bG9hZCRoYW5kbGVBcmdzLmNvbm5lY3Rpb25zLFxuICAgICAgICBlZGdlVHlwZU5hbWUgPSBfcGF5bG9hZCRoYW5kbGVBcmdzLmVkZ2VUeXBlTmFtZTtcbiAgICAhKGNvbm5lY3Rpb25zICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnTXV0YXRpb25IYW5kbGVyczogRXhwZWN0ZWQgY29ubmVjdGlvbiBJRHMgdG8gYmUgc3BlY2lmaWVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKGVkZ2VUeXBlTmFtZSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ011dGF0aW9uSGFuZGxlcnM6IEV4cGVjdGVkIGVkZ2UgdHlwZW5hbWUgdG8gYmUgc3BlY2lmaWVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgc2luZ2xlU2VydmVyTm9kZTtcbiAgICB2YXIgc2VydmVyTm9kZXM7XG5cbiAgICB0cnkge1xuICAgICAgc2luZ2xlU2VydmVyTm9kZSA9IHJlY29yZC5nZXRMaW5rZWRSZWNvcmQocGF5bG9hZC5maWVsZEtleSwgcGF5bG9hZC5hcmdzKTtcbiAgICB9IGNhdGNoIChfdW51c2VkMykge31cblxuICAgIGlmICghc2luZ2xlU2VydmVyTm9kZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2VydmVyTm9kZXMgPSByZWNvcmQuZ2V0TGlua2VkUmVjb3JkcyhwYXlsb2FkLmZpZWxkS2V5LCBwYXlsb2FkLmFyZ3MpO1xuICAgICAgfSBjYXRjaCAoX3VudXNlZDQpIHt9XG4gICAgfVxuXG4gICAgaWYgKHNpbmdsZVNlcnZlck5vZGUgPT0gbnVsbCAmJiBzZXJ2ZXJOb2RlcyA9PSBudWxsKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnTXV0YXRpb25IYW5kbGVyczogRXhwZWN0ZWQgdGFyZ2V0IG5vZGUgdG8gZXhpc3QuJykgOiB2b2lkIDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIF9Db25uZWN0aW9uSW50ZXJmYWNlJDIgPSBDb25uZWN0aW9uSW50ZXJmYWNlLmdldCgpLFxuICAgICAgICBOT0RFID0gX0Nvbm5lY3Rpb25JbnRlcmZhY2UkMi5OT0RFLFxuICAgICAgICBFREdFUyA9IF9Db25uZWN0aW9uSW50ZXJmYWNlJDIuRURHRVM7XG5cbiAgICB2YXIgc2VydmVyTm9kZUxpc3QgPSAoX3NlcnZlck5vZGVzID0gc2VydmVyTm9kZXMpICE9PSBudWxsICYmIF9zZXJ2ZXJOb2RlcyAhPT0gdm9pZCAwID8gX3NlcnZlck5vZGVzIDogW3NpbmdsZVNlcnZlck5vZGVdO1xuXG4gICAgdmFyIF9pdGVyYXRvcjQgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkoc2VydmVyTm9kZUxpc3QpLFxuICAgICAgICBfc3RlcDQ7XG5cbiAgICB0cnkge1xuICAgICAgdmFyIF9sb29wMiA9IGZ1bmN0aW9uIF9sb29wMigpIHtcbiAgICAgICAgdmFyIHNlcnZlck5vZGUgPSBfc3RlcDQudmFsdWU7XG5cbiAgICAgICAgaWYgKHNlcnZlck5vZGUgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2VydmVyTm9kZUlkID0gc2VydmVyTm9kZS5nZXREYXRhSUQoKTtcblxuICAgICAgICB2YXIgX2l0ZXJhdG9yNSA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShjb25uZWN0aW9ucyksXG4gICAgICAgICAgICBfc3RlcDU7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjUucygpOyAhKF9zdGVwNSA9IF9pdGVyYXRvcjUubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb25JRCA9IF9zdGVwNS52YWx1ZTtcbiAgICAgICAgICAgIHZhciBjb25uZWN0aW9uID0gc3RvcmUuZ2V0KGNvbm5lY3Rpb25JRCk7XG5cbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbUmVsYXldW011dGF0aW9uXSBUaGUgY29ubmVjdGlvbiB3aXRoIGlkICdcIi5jb25jYXQoY29ubmVjdGlvbklELCBcIicgZG9lc24ndCBleGlzdC5cIikpIDogdm9pZCAwO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG5vZGVBbHJlYWR5RXhpc3RzSW5Db25uZWN0aW9uID0gKF9jb25uZWN0aW9uJGdldExpbmtlZDIgPSBjb25uZWN0aW9uLmdldExpbmtlZFJlY29yZHMoRURHRVMpKSA9PT0gbnVsbCB8fCBfY29ubmVjdGlvbiRnZXRMaW5rZWQyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY29ubmVjdGlvbiRnZXRMaW5rZWQyLnNvbWUoZnVuY3Rpb24gKGVkZ2UpIHtcbiAgICAgICAgICAgICAgdmFyIF9lZGdlJGdldExpbmtlZFJlY29yZDI7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIChlZGdlID09PSBudWxsIHx8IGVkZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZWRnZSRnZXRMaW5rZWRSZWNvcmQyID0gZWRnZS5nZXRMaW5rZWRSZWNvcmQoTk9ERSkpID09PSBudWxsIHx8IF9lZGdlJGdldExpbmtlZFJlY29yZDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lZGdlJGdldExpbmtlZFJlY29yZDIuZ2V0RGF0YUlEKCkpID09PSBzZXJ2ZXJOb2RlSWQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKG5vZGVBbHJlYWR5RXhpc3RzSW5Db25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY2xpZW50RWRnZSA9IENvbm5lY3Rpb25IYW5kbGVyLmNyZWF0ZUVkZ2Uoc3RvcmUsIGNvbm5lY3Rpb24sIHNlcnZlck5vZGUsIGVkZ2VUeXBlTmFtZSk7XG4gICAgICAgICAgICAhKGNsaWVudEVkZ2UgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdNdXRhdGlvbkhhbmRsZXJzOiBGYWlsZWQgdG8gYnVpbGQgdGhlIGVkZ2UuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgICAgaW5zZXJ0Rm4oY29ubmVjdGlvbiwgY2xpZW50RWRnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3I1LmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3I1LmYoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIF9jb25uZWN0aW9uJGdldExpbmtlZDI7XG5cbiAgICAgICAgdmFyIF9yZXQyID0gX2xvb3AyKCk7XG5cbiAgICAgICAgaWYgKF9yZXQyID09PSBcImNvbnRpbnVlXCIpIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yNC5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvcjQuZigpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFwcGVuZEVkZ2VIYW5kbGVyOiBBcHBlbmRFZGdlSGFuZGxlcixcbiAgRGVsZXRlUmVjb3JkSGFuZGxlcjogRGVsZXRlUmVjb3JkSGFuZGxlcixcbiAgUHJlcGVuZEVkZ2VIYW5kbGVyOiBQcmVwZW5kRWRnZUhhbmRsZXIsXG4gIEFwcGVuZE5vZGVIYW5kbGVyOiBBcHBlbmROb2RlSGFuZGxlcixcbiAgUHJlcGVuZE5vZGVIYW5kbGVyOiBQcmVwZW5kTm9kZUhhbmRsZXIsXG4gIERlbGV0ZUVkZ2VIYW5kbGVyOiBEZWxldGVFZGdlSGFuZGxlclxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIENvbm5lY3Rpb25IYW5kbGVyID0gcmVxdWlyZSgnLi9oYW5kbGVycy9jb25uZWN0aW9uL0Nvbm5lY3Rpb25IYW5kbGVyJyk7XG5cbnZhciBDb25uZWN0aW9uSW50ZXJmYWNlID0gcmVxdWlyZSgnLi9oYW5kbGVycy9jb25uZWN0aW9uL0Nvbm5lY3Rpb25JbnRlcmZhY2UnKTtcblxudmFyIEdyYXBoUUxUYWcgPSByZXF1aXJlKCcuL3F1ZXJ5L0dyYXBoUUxUYWcnKTtcblxudmFyIE11dGF0aW9uSGFuZGxlcnMgPSByZXF1aXJlKCcuL2hhbmRsZXJzL2Nvbm5lY3Rpb24vTXV0YXRpb25IYW5kbGVycycpO1xuXG52YXIgUHJlbG9hZGFibGVRdWVyeVJlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9xdWVyeS9QcmVsb2FkYWJsZVF1ZXJ5UmVnaXN0cnknKTtcblxudmFyIFJlbGF5Q29uY3JldGVOb2RlID0gcmVxdWlyZSgnLi91dGlsL1JlbGF5Q29uY3JldGVOb2RlJyk7XG5cbnZhciBSZWxheUNvbmNyZXRlVmFyaWFibGVzID0gcmVxdWlyZSgnLi9zdG9yZS9SZWxheUNvbmNyZXRlVmFyaWFibGVzJyk7XG5cbnZhciBSZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWcgPSByZXF1aXJlKCcuL211dGF0aW9ucy9SZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWcnKTtcblxudmFyIFJlbGF5RGVmYXVsdEhhbmRsZUtleSA9IHJlcXVpcmUoJy4vdXRpbC9SZWxheURlZmF1bHRIYW5kbGVLZXknKTtcblxudmFyIFJlbGF5RGVmYXVsdEhhbmRsZXJQcm92aWRlciA9IHJlcXVpcmUoJy4vaGFuZGxlcnMvUmVsYXlEZWZhdWx0SGFuZGxlclByb3ZpZGVyJyk7XG5cbnZhciBSZWxheUVycm9yID0gcmVxdWlyZSgnLi91dGlsL1JlbGF5RXJyb3InKTtcblxudmFyIFJlbGF5RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi91dGlsL1JlbGF5RmVhdHVyZUZsYWdzJyk7XG5cbnZhciBSZWxheU1vZGVybkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9zdG9yZS9SZWxheU1vZGVybkVudmlyb25tZW50Jyk7XG5cbnZhciBSZWxheU1vZGVybk9wZXJhdGlvbkRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL3N0b3JlL1JlbGF5TW9kZXJuT3BlcmF0aW9uRGVzY3JpcHRvcicpO1xuXG52YXIgUmVsYXlNb2Rlcm5SZWNvcmQgPSByZXF1aXJlKCcuL3N0b3JlL1JlbGF5TW9kZXJuUmVjb3JkJyk7XG5cbnZhciBSZWxheU1vZGVyblNlbGVjdG9yID0gcmVxdWlyZSgnLi9zdG9yZS9SZWxheU1vZGVyblNlbGVjdG9yJyk7XG5cbnZhciBSZWxheU1vZGVyblN0b3JlID0gcmVxdWlyZSgnLi9zdG9yZS9SZWxheU1vZGVyblN0b3JlJyk7XG5cbnZhciBSZWxheU5ldHdvcmsgPSByZXF1aXJlKCcuL25ldHdvcmsvUmVsYXlOZXR3b3JrJyk7XG5cbnZhciBSZWxheU9ic2VydmFibGUgPSByZXF1aXJlKCcuL25ldHdvcmsvUmVsYXlPYnNlcnZhYmxlJyk7XG5cbnZhciBSZWxheU9wZXJhdGlvblRyYWNrZXIgPSByZXF1aXJlKCcuL3N0b3JlL1JlbGF5T3BlcmF0aW9uVHJhY2tlcicpO1xuXG52YXIgUmVsYXlQcm9maWxlciA9IHJlcXVpcmUoJy4vdXRpbC9SZWxheVByb2ZpbGVyJyk7XG5cbnZhciBSZWxheVF1ZXJ5UmVzcG9uc2VDYWNoZSA9IHJlcXVpcmUoJy4vbmV0d29yay9SZWxheVF1ZXJ5UmVzcG9uc2VDYWNoZScpO1xuXG52YXIgUmVsYXlSZWNvcmRTb3VyY2UgPSByZXF1aXJlKCcuL3N0b3JlL1JlbGF5UmVjb3JkU291cmNlJyk7XG5cbnZhciBSZWxheVJlcGxheVN1YmplY3QgPSByZXF1aXJlKCcuL3V0aWwvUmVsYXlSZXBsYXlTdWJqZWN0Jyk7XG5cbnZhciBSZWxheVN0b3JlVXRpbHMgPSByZXF1aXJlKCcuL3N0b3JlL1JlbGF5U3RvcmVVdGlscycpO1xuXG52YXIgVmlld2VyUGF0dGVybiA9IHJlcXVpcmUoJy4vc3RvcmUvVmlld2VyUGF0dGVybicpO1xuXG52YXIgYXBwbHlPcHRpbWlzdGljTXV0YXRpb24gPSByZXF1aXJlKCcuL211dGF0aW9ucy9hcHBseU9wdGltaXN0aWNNdXRhdGlvbicpO1xuXG52YXIgY29tbWl0TG9jYWxVcGRhdGUgPSByZXF1aXJlKCcuL211dGF0aW9ucy9jb21taXRMb2NhbFVwZGF0ZScpO1xuXG52YXIgY29tbWl0TXV0YXRpb24gPSByZXF1aXJlKCcuL211dGF0aW9ucy9jb21taXRNdXRhdGlvbicpO1xuXG52YXIgY3JlYXRlRnJhZ21lbnRTcGVjUmVzb2x2ZXIgPSByZXF1aXJlKCcuL3N0b3JlL2NyZWF0ZUZyYWdtZW50U3BlY1Jlc29sdmVyJyk7XG5cbnZhciBjcmVhdGVQYXlsb2FkRm9yM0RGaWVsZCA9IHJlcXVpcmUoJy4vdXRpbC9jcmVhdGVQYXlsb2FkRm9yM0RGaWVsZCcpO1xuXG52YXIgY3JlYXRlUmVsYXlDb250ZXh0ID0gcmVxdWlyZSgnLi9zdG9yZS9jcmVhdGVSZWxheUNvbnRleHQnKTtcblxudmFyIGRlZXBGcmVlemUgPSByZXF1aXJlKCcuL3V0aWwvZGVlcEZyZWV6ZScpO1xuXG52YXIgZmV0Y2hRdWVyeSA9IHJlcXVpcmUoJy4vcXVlcnkvZmV0Y2hRdWVyeScpO1xuXG52YXIgZmV0Y2hRdWVyeUludGVybmFsID0gcmVxdWlyZSgnLi9xdWVyeS9mZXRjaFF1ZXJ5SW50ZXJuYWwnKTtcblxudmFyIGZldGNoUXVlcnlfREVQUkVDQVRFRCA9IHJlcXVpcmUoJy4vcXVlcnkvZmV0Y2hRdWVyeV9ERVBSRUNBVEVEJyk7XG5cbnZhciBnZXRGcmFnbWVudElkZW50aWZpZXIgPSByZXF1aXJlKCcuL3V0aWwvZ2V0RnJhZ21lbnRJZGVudGlmaWVyJyk7XG5cbnZhciBnZXRSZWxheUhhbmRsZUtleSA9IHJlcXVpcmUoJy4vdXRpbC9nZXRSZWxheUhhbmRsZUtleScpO1xuXG52YXIgZ2V0UmVxdWVzdElkZW50aWZpZXIgPSByZXF1aXJlKCcuL3V0aWwvZ2V0UmVxdWVzdElkZW50aWZpZXInKTtcblxudmFyIGlzUHJvbWlzZSA9IHJlcXVpcmUoJy4vdXRpbC9pc1Byb21pc2UnKTtcblxudmFyIGlzUmVsYXlNb2Rlcm5FbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vc3RvcmUvaXNSZWxheU1vZGVybkVudmlyb25tZW50Jyk7XG5cbnZhciBpc1NjYWxhckFuZEVxdWFsID0gcmVxdWlyZSgnLi91dGlsL2lzU2NhbGFyQW5kRXF1YWwnKTtcblxudmFyIHJlYWRJbmxpbmVEYXRhID0gcmVxdWlyZSgnLi9zdG9yZS9yZWFkSW5saW5lRGF0YScpO1xuXG52YXIgcmVjeWNsZU5vZGVzSW50byA9IHJlcXVpcmUoJy4vdXRpbC9yZWN5Y2xlTm9kZXNJbnRvJyk7XG5cbnZhciByZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHMgPSByZXF1aXJlKCcuL3V0aWwvcmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzJyk7XG5cbnZhciByZXF1ZXN0U3Vic2NyaXB0aW9uID0gcmVxdWlyZSgnLi9zdWJzY3JpcHRpb24vcmVxdWVzdFN1YnNjcmlwdGlvbicpO1xuXG52YXIgc3RhYmxlQ29weSA9IHJlcXVpcmUoJy4vdXRpbC9zdGFibGVDb3B5Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vc3RvcmUvQ2xpZW50SUQnKSxcbiAgICBnZW5lcmF0ZUNsaWVudElEID0gX3JlcXVpcmUuZ2VuZXJhdGVDbGllbnRJRCxcbiAgICBnZW5lcmF0ZVVuaXF1ZUNsaWVudElEID0gX3JlcXVpcmUuZ2VuZXJhdGVVbmlxdWVDbGllbnRJRCxcbiAgICBpc0NsaWVudElEID0gX3JlcXVpcmUuaXNDbGllbnRJRDtcblxuLy8gQXMgZWFybHkgYXMgcG9zc2libGUsIGNoZWNrIGZvciB0aGUgZXhpc3RlbmNlIG9mIHRoZSBKYXZhU2NyaXB0IGdsb2JhbHMgd2hpY2hcbi8vIFJlbGF5IFJ1bnRpbWUgcmVsaWVzIHVwb24sIGFuZCBwcm9kdWNlIGEgY2xlYXIgbWVzc2FnZSBpZiB0aGV5IGRvIG5vdCBleGlzdC5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIG1hcFN0ciA9IHR5cGVvZiBNYXAgIT09ICdmdW5jdGlvbicgPyAnTWFwJyA6IG51bGw7XG4gIHZhciBzZXRTdHIgPSB0eXBlb2YgU2V0ICE9PSAnZnVuY3Rpb24nID8gJ1NldCcgOiBudWxsO1xuICB2YXIgcHJvbWlzZVN0ciA9IHR5cGVvZiBQcm9taXNlICE9PSAnZnVuY3Rpb24nID8gJ1Byb21pc2UnIDogbnVsbDtcbiAgdmFyIG9ialN0ciA9IHR5cGVvZiBPYmplY3QuYXNzaWduICE9PSAnZnVuY3Rpb24nID8gJ09iamVjdC5hc3NpZ24nIDogbnVsbDtcblxuICBpZiAobWFwU3RyIHx8IHNldFN0ciB8fCBwcm9taXNlU3RyIHx8IG9ialN0cikge1xuICAgIHRocm93IG5ldyBFcnJvcihcInJlbGF5LXJ1bnRpbWUgcmVxdWlyZXMgXCIuY29uY2F0KFttYXBTdHIsIHNldFN0ciwgcHJvbWlzZVN0ciwgb2JqU3RyXS5maWx0ZXIoQm9vbGVhbikuam9pbignLCBhbmQgJyksIFwiIHRvIGV4aXN0LiBcIikgKyAnVXNlIGEgcG9seWZpbGwgdG8gcHJvdmlkZSB0aGVzZSBmb3Igb2xkZXIgYnJvd3NlcnMuJyk7XG4gIH1cbn1cbi8qKlxuICogVGhlIHB1YmxpYyBpbnRlcmZhY2UgdG8gUmVsYXkgUnVudGltZS5cbiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBDb3JlIEFQSVxuICBFbnZpcm9ubWVudDogUmVsYXlNb2Rlcm5FbnZpcm9ubWVudCxcbiAgTmV0d29yazogUmVsYXlOZXR3b3JrLFxuICBPYnNlcnZhYmxlOiBSZWxheU9ic2VydmFibGUsXG4gIFF1ZXJ5UmVzcG9uc2VDYWNoZTogUmVsYXlRdWVyeVJlc3BvbnNlQ2FjaGUsXG4gIFJlY29yZFNvdXJjZTogUmVsYXlSZWNvcmRTb3VyY2UsXG4gIFJlY29yZDogUmVsYXlNb2Rlcm5SZWNvcmQsXG4gIFJlcGxheVN1YmplY3Q6IFJlbGF5UmVwbGF5U3ViamVjdCxcbiAgU3RvcmU6IFJlbGF5TW9kZXJuU3RvcmUsXG4gIGFyZUVxdWFsU2VsZWN0b3JzOiBSZWxheU1vZGVyblNlbGVjdG9yLmFyZUVxdWFsU2VsZWN0b3JzLFxuICBjcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlcjogY3JlYXRlRnJhZ21lbnRTcGVjUmVzb2x2ZXIsXG4gIGNyZWF0ZU5vcm1hbGl6YXRpb25TZWxlY3RvcjogUmVsYXlNb2Rlcm5TZWxlY3Rvci5jcmVhdGVOb3JtYWxpemF0aW9uU2VsZWN0b3IsXG4gIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3I6IFJlbGF5TW9kZXJuT3BlcmF0aW9uRGVzY3JpcHRvci5jcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yLFxuICBjcmVhdGVSZWFkZXJTZWxlY3RvcjogUmVsYXlNb2Rlcm5TZWxlY3Rvci5jcmVhdGVSZWFkZXJTZWxlY3RvcixcbiAgY3JlYXRlUmVxdWVzdERlc2NyaXB0b3I6IFJlbGF5TW9kZXJuT3BlcmF0aW9uRGVzY3JpcHRvci5jcmVhdGVSZXF1ZXN0RGVzY3JpcHRvcixcbiAgZ2V0RGF0YUlEc0Zyb21GcmFnbWVudDogUmVsYXlNb2Rlcm5TZWxlY3Rvci5nZXREYXRhSURzRnJvbUZyYWdtZW50LFxuICBnZXREYXRhSURzRnJvbU9iamVjdDogUmVsYXlNb2Rlcm5TZWxlY3Rvci5nZXREYXRhSURzRnJvbU9iamVjdCxcbiAgZ2V0Tm9kZTogR3JhcGhRTFRhZy5nZXROb2RlLFxuICBnZXRGcmFnbWVudDogR3JhcGhRTFRhZy5nZXRGcmFnbWVudCxcbiAgZ2V0SW5saW5lRGF0YUZyYWdtZW50OiBHcmFwaFFMVGFnLmdldElubGluZURhdGFGcmFnbWVudCxcbiAgZ2V0TW9kdWxlQ29tcG9uZW50S2V5OiBSZWxheVN0b3JlVXRpbHMuZ2V0TW9kdWxlQ29tcG9uZW50S2V5LFxuICBnZXRNb2R1bGVPcGVyYXRpb25LZXk6IFJlbGF5U3RvcmVVdGlscy5nZXRNb2R1bGVPcGVyYXRpb25LZXksXG4gIGdldFBhZ2luYXRpb25GcmFnbWVudDogR3JhcGhRTFRhZy5nZXRQYWdpbmF0aW9uRnJhZ21lbnQsXG4gIGdldFBsdXJhbFNlbGVjdG9yOiBSZWxheU1vZGVyblNlbGVjdG9yLmdldFBsdXJhbFNlbGVjdG9yLFxuICBnZXRSZWZldGNoYWJsZUZyYWdtZW50OiBHcmFwaFFMVGFnLmdldFJlZmV0Y2hhYmxlRnJhZ21lbnQsXG4gIGdldFJlcXVlc3Q6IEdyYXBoUUxUYWcuZ2V0UmVxdWVzdCxcbiAgZ2V0UmVxdWVzdElkZW50aWZpZXI6IGdldFJlcXVlc3RJZGVudGlmaWVyLFxuICBnZXRTZWxlY3RvcjogUmVsYXlNb2Rlcm5TZWxlY3Rvci5nZXRTZWxlY3RvcixcbiAgZ2V0U2VsZWN0b3JzRnJvbU9iamVjdDogUmVsYXlNb2Rlcm5TZWxlY3Rvci5nZXRTZWxlY3RvcnNGcm9tT2JqZWN0LFxuICBnZXRTaW5ndWxhclNlbGVjdG9yOiBSZWxheU1vZGVyblNlbGVjdG9yLmdldFNpbmd1bGFyU2VsZWN0b3IsXG4gIGdldFN0b3JhZ2VLZXk6IFJlbGF5U3RvcmVVdGlscy5nZXRTdG9yYWdlS2V5LFxuICBnZXRWYXJpYWJsZXNGcm9tRnJhZ21lbnQ6IFJlbGF5TW9kZXJuU2VsZWN0b3IuZ2V0VmFyaWFibGVzRnJvbUZyYWdtZW50LFxuICBnZXRWYXJpYWJsZXNGcm9tT2JqZWN0OiBSZWxheU1vZGVyblNlbGVjdG9yLmdldFZhcmlhYmxlc0Zyb21PYmplY3QsXG4gIGdldFZhcmlhYmxlc0Zyb21QbHVyYWxGcmFnbWVudDogUmVsYXlNb2Rlcm5TZWxlY3Rvci5nZXRWYXJpYWJsZXNGcm9tUGx1cmFsRnJhZ21lbnQsXG4gIGdldFZhcmlhYmxlc0Zyb21TaW5ndWxhckZyYWdtZW50OiBSZWxheU1vZGVyblNlbGVjdG9yLmdldFZhcmlhYmxlc0Zyb21TaW5ndWxhckZyYWdtZW50LFxuICByZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHM6IHJlcG9ydE1pc3NpbmdSZXF1aXJlZEZpZWxkcyxcbiAgZ3JhcGhxbDogR3JhcGhRTFRhZy5ncmFwaHFsLFxuICBpc0ZyYWdtZW50OiBHcmFwaFFMVGFnLmlzRnJhZ21lbnQsXG4gIGlzSW5saW5lRGF0YUZyYWdtZW50OiBHcmFwaFFMVGFnLmlzSW5saW5lRGF0YUZyYWdtZW50LFxuICBpc1JlcXVlc3Q6IEdyYXBoUUxUYWcuaXNSZXF1ZXN0LFxuICByZWFkSW5saW5lRGF0YTogcmVhZElubGluZURhdGEsXG4gIC8vIERlY2xhcmF0aXZlIG11dGF0aW9uIEFQSVxuICBNdXRhdGlvblR5cGVzOiBSZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWcuTXV0YXRpb25UeXBlcyxcbiAgUmFuZ2VPcGVyYXRpb25zOiBSZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWcuUmFuZ2VPcGVyYXRpb25zLFxuICAvLyBFeHRlbnNpb25zXG4gIERlZmF1bHRIYW5kbGVyUHJvdmlkZXI6IFJlbGF5RGVmYXVsdEhhbmRsZXJQcm92aWRlcixcbiAgQ29ubmVjdGlvbkhhbmRsZXI6IENvbm5lY3Rpb25IYW5kbGVyLFxuICBNdXRhdGlvbkhhbmRsZXJzOiBNdXRhdGlvbkhhbmRsZXJzLFxuICBWSUVXRVJfSUQ6IFZpZXdlclBhdHRlcm4uVklFV0VSX0lELFxuICBWSUVXRVJfVFlQRTogVmlld2VyUGF0dGVybi5WSUVXRVJfVFlQRSxcbiAgLy8gSGVscGVycyAoY2FuIGJlIGltcGxlbWVudGVkIHZpYSB0aGUgYWJvdmUgQVBJKVxuICBhcHBseU9wdGltaXN0aWNNdXRhdGlvbjogYXBwbHlPcHRpbWlzdGljTXV0YXRpb24sXG4gIGNvbW1pdExvY2FsVXBkYXRlOiBjb21taXRMb2NhbFVwZGF0ZSxcbiAgY29tbWl0TXV0YXRpb246IGNvbW1pdE11dGF0aW9uLFxuICBmZXRjaFF1ZXJ5OiBmZXRjaFF1ZXJ5LFxuICBmZXRjaFF1ZXJ5X0RFUFJFQ0FURUQ6IGZldGNoUXVlcnlfREVQUkVDQVRFRCxcbiAgaXNSZWxheU1vZGVybkVudmlyb25tZW50OiBpc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQsXG4gIHJlcXVlc3RTdWJzY3JpcHRpb246IHJlcXVlc3RTdWJzY3JpcHRpb24sXG4gIC8vIENvbmZpZ3VyYXRpb24gaW50ZXJmYWNlIGZvciBsZWdhY3kgb3Igc3BlY2lhbCB1c2VzXG4gIENvbm5lY3Rpb25JbnRlcmZhY2U6IENvbm5lY3Rpb25JbnRlcmZhY2UsXG4gIC8vIFV0aWxpdGllc1xuICBQcmVsb2FkYWJsZVF1ZXJ5UmVnaXN0cnk6IFByZWxvYWRhYmxlUXVlcnlSZWdpc3RyeSxcbiAgUmVsYXlQcm9maWxlcjogUmVsYXlQcm9maWxlcixcbiAgY3JlYXRlUGF5bG9hZEZvcjNERmllbGQ6IGNyZWF0ZVBheWxvYWRGb3IzREZpZWxkLFxuICAvLyBJTlRFUk5BTC1PTkxZOiBUaGVzZSBleHBvcnRzIG1pZ2h0IGJlIHJlbW92ZWQgYXQgYW55IHBvaW50LlxuICBSZWxheUNvbmNyZXRlTm9kZTogUmVsYXlDb25jcmV0ZU5vZGUsXG4gIFJlbGF5RXJyb3I6IFJlbGF5RXJyb3IsXG4gIFJlbGF5RmVhdHVyZUZsYWdzOiBSZWxheUZlYXR1cmVGbGFncyxcbiAgREVGQVVMVF9IQU5ETEVfS0VZOiBSZWxheURlZmF1bHRIYW5kbGVLZXkuREVGQVVMVF9IQU5ETEVfS0VZLFxuICBGUkFHTUVOVFNfS0VZOiBSZWxheVN0b3JlVXRpbHMuRlJBR01FTlRTX0tFWSxcbiAgRlJBR01FTlRfT1dORVJfS0VZOiBSZWxheVN0b3JlVXRpbHMuRlJBR01FTlRfT1dORVJfS0VZLFxuICBJRF9LRVk6IFJlbGF5U3RvcmVVdGlscy5JRF9LRVksXG4gIFJFRl9LRVk6IFJlbGF5U3RvcmVVdGlscy5SRUZfS0VZLFxuICBSRUZTX0tFWTogUmVsYXlTdG9yZVV0aWxzLlJFRlNfS0VZLFxuICBST09UX0lEOiBSZWxheVN0b3JlVXRpbHMuUk9PVF9JRCxcbiAgUk9PVF9UWVBFOiBSZWxheVN0b3JlVXRpbHMuUk9PVF9UWVBFLFxuICBUWVBFTkFNRV9LRVk6IFJlbGF5U3RvcmVVdGlscy5UWVBFTkFNRV9LRVksXG4gIGRlZXBGcmVlemU6IGRlZXBGcmVlemUsXG4gIGdlbmVyYXRlQ2xpZW50SUQ6IGdlbmVyYXRlQ2xpZW50SUQsXG4gIGdlbmVyYXRlVW5pcXVlQ2xpZW50SUQ6IGdlbmVyYXRlVW5pcXVlQ2xpZW50SUQsXG4gIGdldFJlbGF5SGFuZGxlS2V5OiBnZXRSZWxheUhhbmRsZUtleSxcbiAgaXNDbGllbnRJRDogaXNDbGllbnRJRCxcbiAgaXNQcm9taXNlOiBpc1Byb21pc2UsXG4gIGlzU2NhbGFyQW5kRXF1YWw6IGlzU2NhbGFyQW5kRXF1YWwsXG4gIHJlY3ljbGVOb2Rlc0ludG86IHJlY3ljbGVOb2Rlc0ludG8sXG4gIHN0YWJsZUNvcHk6IHN0YWJsZUNvcHksXG4gIGdldEZyYWdtZW50SWRlbnRpZmllcjogZ2V0RnJhZ21lbnRJZGVudGlmaWVyLFxuICBfX2ludGVybmFsOiB7XG4gICAgT3BlcmF0aW9uVHJhY2tlcjogUmVsYXlPcGVyYXRpb25UcmFja2VyLFxuICAgIGNyZWF0ZVJlbGF5Q29udGV4dDogY3JlYXRlUmVsYXlDb250ZXh0LFxuICAgIGdldE9wZXJhdGlvblZhcmlhYmxlczogUmVsYXlDb25jcmV0ZVZhcmlhYmxlcy5nZXRPcGVyYXRpb25WYXJpYWJsZXMsXG4gICAgZmV0Y2hRdWVyeTogZmV0Y2hRdWVyeUludGVybmFsLmZldGNoUXVlcnksXG4gICAgZmV0Y2hRdWVyeURlZHVwZWQ6IGZldGNoUXVlcnlJbnRlcm5hbC5mZXRjaFF1ZXJ5RGVkdXBlZCxcbiAgICBnZXRQcm9taXNlRm9yQWN0aXZlUmVxdWVzdDogZmV0Y2hRdWVyeUludGVybmFsLmdldFByb21pc2VGb3JBY3RpdmVSZXF1ZXN0LFxuICAgIGdldE9ic2VydmFibGVGb3JBY3RpdmVSZXF1ZXN0OiBmZXRjaFF1ZXJ5SW50ZXJuYWwuZ2V0T2JzZXJ2YWJsZUZvckFjdGl2ZVJlcXVlc3RcbiAgfVxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJcIikpO1xuXG52YXIgQ29ubmVjdGlvbkhhbmRsZXIgPSByZXF1aXJlKCcuLi9oYW5kbGVycy9jb25uZWN0aW9uL0Nvbm5lY3Rpb25IYW5kbGVyJyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBNdXRhdGlvblR5cGVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIFJBTkdFX0FERDogJ1JBTkdFX0FERCcsXG4gIFJBTkdFX0RFTEVURTogJ1JBTkdFX0RFTEVURScsXG4gIE5PREVfREVMRVRFOiAnTk9ERV9ERUxFVEUnXG59KTtcbnZhciBSYW5nZU9wZXJhdGlvbnMgPSBPYmplY3QuZnJlZXplKHtcbiAgQVBQRU5EOiAnYXBwZW5kJyxcbiAgUFJFUEVORDogJ3ByZXBlbmQnXG59KTtcblxuZnVuY3Rpb24gY29udmVydChjb25maWdzLCByZXF1ZXN0LCBvcHRpbWlzdGljVXBkYXRlciwgdXBkYXRlcikge1xuICB2YXIgY29uZmlnT3B0aW1pc3RpY1VwZGF0ZXMgPSBvcHRpbWlzdGljVXBkYXRlciA/IFtvcHRpbWlzdGljVXBkYXRlcl0gOiBbXTtcbiAgdmFyIGNvbmZpZ1VwZGF0ZXMgPSB1cGRhdGVyID8gW3VwZGF0ZXJdIDogW107XG4gIGNvbmZpZ3MuZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgc3dpdGNoIChjb25maWcudHlwZSkge1xuICAgICAgY2FzZSAnTk9ERV9ERUxFVEUnOlxuICAgICAgICB2YXIgbm9kZURlbGV0ZVJlc3VsdCA9IG5vZGVEZWxldGUoY29uZmlnLCByZXF1ZXN0KTtcblxuICAgICAgICBpZiAobm9kZURlbGV0ZVJlc3VsdCkge1xuICAgICAgICAgIGNvbmZpZ09wdGltaXN0aWNVcGRhdGVzLnB1c2gobm9kZURlbGV0ZVJlc3VsdCk7XG4gICAgICAgICAgY29uZmlnVXBkYXRlcy5wdXNoKG5vZGVEZWxldGVSZXN1bHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ1JBTkdFX0FERCc6XG4gICAgICAgIHZhciByYW5nZUFkZFJlc3VsdCA9IHJhbmdlQWRkKGNvbmZpZywgcmVxdWVzdCk7XG5cbiAgICAgICAgaWYgKHJhbmdlQWRkUmVzdWx0KSB7XG4gICAgICAgICAgY29uZmlnT3B0aW1pc3RpY1VwZGF0ZXMucHVzaChyYW5nZUFkZFJlc3VsdCk7XG4gICAgICAgICAgY29uZmlnVXBkYXRlcy5wdXNoKHJhbmdlQWRkUmVzdWx0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdSQU5HRV9ERUxFVEUnOlxuICAgICAgICB2YXIgcmFuZ2VEZWxldGVSZXN1bHQgPSByYW5nZURlbGV0ZShjb25maWcsIHJlcXVlc3QpO1xuXG4gICAgICAgIGlmIChyYW5nZURlbGV0ZVJlc3VsdCkge1xuICAgICAgICAgIGNvbmZpZ09wdGltaXN0aWNVcGRhdGVzLnB1c2gocmFuZ2VEZWxldGVSZXN1bHQpO1xuICAgICAgICAgIGNvbmZpZ1VwZGF0ZXMucHVzaChyYW5nZURlbGV0ZVJlc3VsdCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIG9wdGltaXN0aWNVcGRhdGVyOiBmdW5jdGlvbiBvcHRpbWlzdGljVXBkYXRlcihzdG9yZSwgZGF0YSkge1xuICAgICAgY29uZmlnT3B0aW1pc3RpY1VwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoZWFjaE9wdGltaXN0aWNVcGRhdGVyKSB7XG4gICAgICAgIGVhY2hPcHRpbWlzdGljVXBkYXRlcihzdG9yZSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVwZGF0ZXI6IGZ1bmN0aW9uIHVwZGF0ZXIoc3RvcmUsIGRhdGEpIHtcbiAgICAgIGNvbmZpZ1VwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoZWFjaFVwZGF0ZXIpIHtcbiAgICAgICAgZWFjaFVwZGF0ZXIoc3RvcmUsIGRhdGEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBub2RlRGVsZXRlKGNvbmZpZywgcmVxdWVzdCkge1xuICB2YXIgZGVsZXRlZElERmllbGROYW1lID0gY29uZmlnLmRlbGV0ZWRJREZpZWxkTmFtZTtcbiAgdmFyIHJvb3RGaWVsZCA9IGdldFJvb3RGaWVsZChyZXF1ZXN0KTtcblxuICBpZiAoIXJvb3RGaWVsZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZSwgZGF0YSkge1xuICAgIHZhciBwYXlsb2FkID0gc3RvcmUuZ2V0Um9vdEZpZWxkKHJvb3RGaWVsZCk7XG5cbiAgICBpZiAoIXBheWxvYWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGVsZXRlSUQgPSBwYXlsb2FkLmdldFZhbHVlKGRlbGV0ZWRJREZpZWxkTmFtZSk7XG4gICAgdmFyIGRlbGV0ZUlEcyA9IEFycmF5LmlzQXJyYXkoZGVsZXRlSUQpID8gZGVsZXRlSUQgOiBbZGVsZXRlSURdO1xuICAgIGRlbGV0ZUlEcy5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgaWYgKGlkICYmIHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3RvcmVbXCJkZWxldGVcIl0oaWQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiByYW5nZUFkZChjb25maWcsIHJlcXVlc3QpIHtcbiAgdmFyIHBhcmVudElEID0gY29uZmlnLnBhcmVudElELFxuICAgICAgY29ubmVjdGlvbkluZm8gPSBjb25maWcuY29ubmVjdGlvbkluZm8sXG4gICAgICBlZGdlTmFtZSA9IGNvbmZpZy5lZGdlTmFtZTtcblxuICBpZiAoIXBhcmVudElEKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZzogRm9yIG11dGF0aW9uIGNvbmZpZyBSQU5HRV9BREQgJyArICd0byB3b3JrIHlvdSBtdXN0IGluY2x1ZGUgYSBwYXJlbnRJRCcpIDogdm9pZCAwO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHJvb3RGaWVsZCA9IGdldFJvb3RGaWVsZChyZXF1ZXN0KTtcblxuICBpZiAoIWNvbm5lY3Rpb25JbmZvIHx8ICFyb290RmllbGQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoc3RvcmUsIGRhdGEpIHtcbiAgICB2YXIgcGFyZW50ID0gc3RvcmUuZ2V0KHBhcmVudElEKTtcblxuICAgIGlmICghcGFyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBheWxvYWQgPSBzdG9yZS5nZXRSb290RmllbGQocm9vdEZpZWxkKTtcblxuICAgIGlmICghcGF5bG9hZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzZXJ2ZXJFZGdlID0gcGF5bG9hZC5nZXRMaW5rZWRSZWNvcmQoZWRnZU5hbWUpO1xuXG4gICAgdmFyIF9pdGVyYXRvciA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShjb25uZWN0aW9uSW5mbyksXG4gICAgICAgIF9zdGVwO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBpbmZvID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgaWYgKCFzZXJ2ZXJFZGdlKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29ubmVjdGlvbiA9IENvbm5lY3Rpb25IYW5kbGVyLmdldENvbm5lY3Rpb24ocGFyZW50LCBpbmZvLmtleSwgaW5mby5maWx0ZXJzKTtcblxuICAgICAgICBpZiAoIWNvbm5lY3Rpb24pIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjbGllbnRFZGdlID0gQ29ubmVjdGlvbkhhbmRsZXIuYnVpbGRDb25uZWN0aW9uRWRnZShzdG9yZSwgY29ubmVjdGlvbiwgc2VydmVyRWRnZSk7XG5cbiAgICAgICAgaWYgKCFjbGllbnRFZGdlKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGluZm8ucmFuZ2VCZWhhdmlvcikge1xuICAgICAgICAgIGNhc2UgJ2FwcGVuZCc6XG4gICAgICAgICAgICBDb25uZWN0aW9uSGFuZGxlci5pbnNlcnRFZGdlQWZ0ZXIoY29ubmVjdGlvbiwgY2xpZW50RWRnZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3ByZXBlbmQnOlxuICAgICAgICAgICAgQ29ubmVjdGlvbkhhbmRsZXIuaW5zZXJ0RWRnZUJlZm9yZShjb25uZWN0aW9uLCBjbGllbnRFZGdlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdSZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWc6IFJBTkdFX0FERCByYW5nZSBiZWhhdmlvciBgJXNgICcgKyAnd2lsbCBub3Qgd29yayBhcyBleHBlY3RlZCBpbiBSZWxheU1vZGVybiwgc3VwcG9ydGVkIHJhbmdlICcgKyBcImJlaGF2aW9ycyBhcmUgJ2FwcGVuZCcsICdwcmVwZW5kJy5cIiwgaW5mby5yYW5nZUJlaGF2aW9yKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IuZigpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmFuZ2VEZWxldGUoY29uZmlnLCByZXF1ZXN0KSB7XG4gIHZhciBwYXJlbnRJRCA9IGNvbmZpZy5wYXJlbnRJRCxcbiAgICAgIGNvbm5lY3Rpb25LZXlzID0gY29uZmlnLmNvbm5lY3Rpb25LZXlzLFxuICAgICAgcGF0aFRvQ29ubmVjdGlvbiA9IGNvbmZpZy5wYXRoVG9Db25uZWN0aW9uLFxuICAgICAgZGVsZXRlZElERmllbGROYW1lID0gY29uZmlnLmRlbGV0ZWRJREZpZWxkTmFtZTtcblxuICBpZiAoIXBhcmVudElEKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZzogRm9yIG11dGF0aW9uIGNvbmZpZyBSQU5HRV9ERUxFVEUgJyArICd0byB3b3JrIHlvdSBtdXN0IGluY2x1ZGUgYSBwYXJlbnRJRCcpIDogdm9pZCAwO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHJvb3RGaWVsZCA9IGdldFJvb3RGaWVsZChyZXF1ZXN0KTtcblxuICBpZiAoIXJvb3RGaWVsZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZSwgZGF0YSkge1xuICAgIGlmICghZGF0YSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkZWxldGVJRHMgPSBbXTtcbiAgICB2YXIgZGVsZXRlZElERmllbGQgPSBkYXRhW3Jvb3RGaWVsZF07XG5cbiAgICBpZiAoZGVsZXRlZElERmllbGQgJiYgQXJyYXkuaXNBcnJheShkZWxldGVkSURGaWVsZE5hbWUpKSB7XG4gICAgICB2YXIgX2l0ZXJhdG9yMiA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShkZWxldGVkSURGaWVsZE5hbWUpLFxuICAgICAgICAgIF9zdGVwMjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgZWFjaEZpZWxkID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKGRlbGV0ZWRJREZpZWxkICYmIHR5cGVvZiBkZWxldGVkSURGaWVsZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGRlbGV0ZWRJREZpZWxkID0gZGVsZXRlZElERmllbGRbZWFjaEZpZWxkXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjIuZigpO1xuICAgICAgfVxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShkZWxldGVkSURGaWVsZCkpIHtcbiAgICAgICAgZGVsZXRlZElERmllbGQuZm9yRWFjaChmdW5jdGlvbiAoaWRPYmplY3QpIHtcbiAgICAgICAgICBpZiAoaWRPYmplY3QgJiYgaWRPYmplY3QuaWQgJiYgdHlwZW9mIGlkT2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgaWRPYmplY3QuaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBkZWxldGVJRHMucHVzaChpZE9iamVjdC5pZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoZGVsZXRlZElERmllbGQgJiYgZGVsZXRlZElERmllbGQuaWQgJiYgdHlwZW9mIGRlbGV0ZWRJREZpZWxkLmlkID09PSAnc3RyaW5nJykge1xuICAgICAgICBkZWxldGVJRHMucHVzaChkZWxldGVkSURGaWVsZC5pZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkZWxldGVkSURGaWVsZCAmJiB0eXBlb2YgZGVsZXRlZElERmllbGROYW1lID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgZGVsZXRlZElERmllbGQgPT09ICdvYmplY3QnKSB7XG4gICAgICBkZWxldGVkSURGaWVsZCA9IGRlbGV0ZWRJREZpZWxkW2RlbGV0ZWRJREZpZWxkTmFtZV07XG5cbiAgICAgIGlmICh0eXBlb2YgZGVsZXRlZElERmllbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGRlbGV0ZUlEcy5wdXNoKGRlbGV0ZWRJREZpZWxkKTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkZWxldGVkSURGaWVsZCkpIHtcbiAgICAgICAgZGVsZXRlZElERmllbGQuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZGVsZXRlSURzLnB1c2goaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGVsZXRlTm9kZShwYXJlbnRJRCwgY29ubmVjdGlvbktleXMsIHBhdGhUb0Nvbm5lY3Rpb24sIHN0b3JlLCBkZWxldGVJRHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxldGVOb2RlKHBhcmVudElELCBjb25uZWN0aW9uS2V5cywgcGF0aFRvQ29ubmVjdGlvbiwgc3RvcmUsIGRlbGV0ZUlEcykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNvbm5lY3Rpb25LZXlzICE9IG51bGwsICdSZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWc6IFJBTkdFX0RFTEVURSBtdXN0IHByb3ZpZGUgYSAnICsgJ2Nvbm5lY3Rpb25LZXlzJykgOiB2b2lkIDA7XG4gIHZhciBwYXJlbnQgPSBzdG9yZS5nZXQocGFyZW50SUQpO1xuXG4gIGlmICghcGFyZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhdGhUb0Nvbm5lY3Rpb24ubGVuZ3RoIDwgMikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdSZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWc6IFJBTkdFX0RFTEVURSAnICsgJ3BhdGhUb0Nvbm5lY3Rpb24gbXVzdCBpbmNsdWRlIGF0IGxlYXN0IHBhcmVudCBhbmQgY29ubmVjdGlvbicpIDogdm9pZCAwO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciByZWNvcmRQcm94eSA9IHBhcmVudDtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IHBhdGhUb0Nvbm5lY3Rpb24ubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgaWYgKHJlY29yZFByb3h5KSB7XG4gICAgICByZWNvcmRQcm94eSA9IHJlY29yZFByb3h5LmdldExpbmtlZFJlY29yZChwYXRoVG9Db25uZWN0aW9uW2ldKTtcbiAgICB9XG4gIH0gLy8gU2hvdWxkIG5ldmVyIGVudGVyIGxvb3AgZXhjZXB0IGVkZ2UgY2FzZXNcblxuXG4gIGlmICghY29ubmVjdGlvbktleXMgfHwgIXJlY29yZFByb3h5KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZzogUkFOR0VfREVMRVRFICcgKyAncGF0aFRvQ29ubmVjdGlvbiBpcyBpbmNvcnJlY3QuIFVuYWJsZSB0byBmaW5kIGNvbm5lY3Rpb24gd2l0aCAnICsgJ3BhcmVudElEOiAlcyBhbmQgcGF0aDogJXMnLCBwYXJlbnRJRCwgcGF0aFRvQ29ubmVjdGlvbi50b1N0cmluZygpKSA6IHZvaWQgMDtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX2l0ZXJhdG9yMyA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShjb25uZWN0aW9uS2V5cyksXG4gICAgICBfc3RlcDM7XG5cbiAgdHJ5IHtcbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgICAgIHZhciBrZXkgPSBfc3RlcDMudmFsdWU7XG4gICAgICB2YXIgY29ubmVjdGlvbiA9IENvbm5lY3Rpb25IYW5kbGVyLmdldENvbm5lY3Rpb24ocmVjb3JkUHJveHksIGtleS5rZXksIGtleS5maWx0ZXJzKTtcblxuICAgICAgaWYgKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgZGVsZXRlSURzLmZvckVhY2goZnVuY3Rpb24gKGRlbGV0ZUlEKSB7XG4gICAgICAgICAgQ29ubmVjdGlvbkhhbmRsZXIuZGVsZXRlTm9kZShjb25uZWN0aW9uLCBkZWxldGVJRCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykge1xuICAgICAgX2xvb3AoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9pdGVyYXRvcjMuZShlcnIpO1xuICB9IGZpbmFsbHkge1xuICAgIF9pdGVyYXRvcjMuZigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFJvb3RGaWVsZChyZXF1ZXN0KSB7XG4gIGlmIChyZXF1ZXN0LmZyYWdtZW50LnNlbGVjdGlvbnMgJiYgcmVxdWVzdC5mcmFnbWVudC5zZWxlY3Rpb25zLmxlbmd0aCA+IDAgJiYgcmVxdWVzdC5mcmFnbWVudC5zZWxlY3Rpb25zWzBdLmtpbmQgPT09ICdMaW5rZWRGaWVsZCcpIHtcbiAgICByZXR1cm4gcmVxdWVzdC5mcmFnbWVudC5zZWxlY3Rpb25zWzBdLm5hbWU7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIE11dGF0aW9uVHlwZXM6IE11dGF0aW9uVHlwZXMsXG4gIFJhbmdlT3BlcmF0aW9uczogUmFuZ2VPcGVyYXRpb25zLFxuICBjb252ZXJ0OiBjb252ZXJ0XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3N0b3JlL0NsaWVudElEJyksXG4gICAgZ2VuZXJhdGVDbGllbnRJRCA9IF9yZXF1aXJlLmdlbmVyYXRlQ2xpZW50SUQ7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuLi9zdG9yZS9SZWxheVN0b3JlVXRpbHMnKSxcbiAgICBnZXRTdGFibGVTdG9yYWdlS2V5ID0gX3JlcXVpcmUyLmdldFN0YWJsZVN0b3JhZ2VLZXk7XG5cbi8qKlxuICogQGludGVybmFsXG4gKlxuICogQSBoZWxwZXIgY2xhc3MgZm9yIG1hbmlwdWxhdGluZyBhIGdpdmVuIHJlY29yZCBmcm9tIGEgcmVjb3JkIHNvdXJjZSB2aWEgYW5cbiAqIGltcGVyYXRpdmUvT08tc3R5bGUgQVBJLlxuICovXG52YXIgUmVsYXlSZWNvcmRQcm94eSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlbGF5UmVjb3JkUHJveHkoc291cmNlLCBtdXRhdG9yLCBkYXRhSUQpIHtcbiAgICB0aGlzLl9kYXRhSUQgPSBkYXRhSUQ7XG4gICAgdGhpcy5fbXV0YXRvciA9IG11dGF0b3I7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlbGF5UmVjb3JkUHJveHkucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb3B5RmllbGRzRnJvbSA9IGZ1bmN0aW9uIGNvcHlGaWVsZHNGcm9tKHNvdXJjZSkge1xuICAgIHRoaXMuX211dGF0b3IuY29weUZpZWxkcyhzb3VyY2UuZ2V0RGF0YUlEKCksIHRoaXMuX2RhdGFJRCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldERhdGFJRCA9IGZ1bmN0aW9uIGdldERhdGFJRCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YUlEO1xuICB9O1xuXG4gIF9wcm90by5nZXRUeXBlID0gZnVuY3Rpb24gZ2V0VHlwZSgpIHtcbiAgICB2YXIgdHlwZSA9IHRoaXMuX211dGF0b3IuZ2V0VHlwZSh0aGlzLl9kYXRhSUQpO1xuXG4gICAgISh0eXBlICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWNvcmRQcm94eTogQ2Fubm90IGdldCB0aGUgdHlwZSBvZiBkZWxldGVkIHJlY29yZCBgJXNgLicsIHRoaXMuX2RhdGFJRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiB0eXBlO1xuICB9O1xuXG4gIF9wcm90by5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKG5hbWUsIGFyZ3MpIHtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0YWJsZVN0b3JhZ2VLZXkobmFtZSwgYXJncyk7XG4gICAgcmV0dXJuIHRoaXMuX211dGF0b3IuZ2V0VmFsdWUodGhpcy5fZGF0YUlELCBzdG9yYWdlS2V5KTtcbiAgfTtcblxuICBfcHJvdG8uc2V0VmFsdWUgPSBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSwgbmFtZSwgYXJncykge1xuICAgICFpc1ZhbGlkTGVhZlZhbHVlKHZhbHVlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVjb3JkUHJveHkjc2V0VmFsdWUoKTogRXhwZWN0ZWQgYSBzY2FsYXIgb3IgYXJyYXkgb2Ygc2NhbGFycywgJyArICdnb3QgYCVzYC4nLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0YWJsZVN0b3JhZ2VLZXkobmFtZSwgYXJncyk7XG5cbiAgICB0aGlzLl9tdXRhdG9yLnNldFZhbHVlKHRoaXMuX2RhdGFJRCwgc3RvcmFnZUtleSwgdmFsdWUpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmdldExpbmtlZFJlY29yZCA9IGZ1bmN0aW9uIGdldExpbmtlZFJlY29yZChuYW1lLCBhcmdzKSB7XG4gICAgdmFyIHN0b3JhZ2VLZXkgPSBnZXRTdGFibGVTdG9yYWdlS2V5KG5hbWUsIGFyZ3MpO1xuXG4gICAgdmFyIGxpbmtlZElEID0gdGhpcy5fbXV0YXRvci5nZXRMaW5rZWRSZWNvcmRJRCh0aGlzLl9kYXRhSUQsIHN0b3JhZ2VLZXkpO1xuXG4gICAgcmV0dXJuIGxpbmtlZElEICE9IG51bGwgPyB0aGlzLl9zb3VyY2UuZ2V0KGxpbmtlZElEKSA6IGxpbmtlZElEO1xuICB9O1xuXG4gIF9wcm90by5zZXRMaW5rZWRSZWNvcmQgPSBmdW5jdGlvbiBzZXRMaW5rZWRSZWNvcmQocmVjb3JkLCBuYW1lLCBhcmdzKSB7XG4gICAgIShyZWNvcmQgaW5zdGFuY2VvZiBSZWxheVJlY29yZFByb3h5KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVjb3JkUHJveHkjc2V0TGlua2VkUmVjb3JkKCk6IEV4cGVjdGVkIGEgcmVjb3JkLCBnb3QgYCVzYC4nLCByZWNvcmQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0YWJsZVN0b3JhZ2VLZXkobmFtZSwgYXJncyk7XG4gICAgdmFyIGxpbmtlZElEID0gcmVjb3JkLmdldERhdGFJRCgpO1xuXG4gICAgdGhpcy5fbXV0YXRvci5zZXRMaW5rZWRSZWNvcmRJRCh0aGlzLl9kYXRhSUQsIHN0b3JhZ2VLZXksIGxpbmtlZElEKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5nZXRPckNyZWF0ZUxpbmtlZFJlY29yZCA9IGZ1bmN0aW9uIGdldE9yQ3JlYXRlTGlua2VkUmVjb3JkKG5hbWUsIHR5cGVOYW1lLCBhcmdzKSB7XG4gICAgdmFyIGxpbmtlZFJlY29yZCA9IHRoaXMuZ2V0TGlua2VkUmVjb3JkKG5hbWUsIGFyZ3MpO1xuXG4gICAgaWYgKCFsaW5rZWRSZWNvcmQpIHtcbiAgICAgIHZhciBfdGhpcyRfc291cmNlJGdldDtcblxuICAgICAgdmFyIHN0b3JhZ2VLZXkgPSBnZXRTdGFibGVTdG9yYWdlS2V5KG5hbWUsIGFyZ3MpO1xuICAgICAgdmFyIGNsaWVudElEID0gZ2VuZXJhdGVDbGllbnRJRCh0aGlzLmdldERhdGFJRCgpLCBzdG9yYWdlS2V5KTsgLy8gTk9URTogaXQncyBwb3NzaWJsZSB0aGF0IGEgY2xpZW50IHJlY29yZCBmb3IgdGhpcyBmaWVsZCBleGlzdHNcbiAgICAgIC8vIGJ1dCB0aGUgZmllbGQgaXRzZWxmIHdhcyB1bnNldC5cblxuICAgICAgbGlua2VkUmVjb3JkID0gKF90aGlzJF9zb3VyY2UkZ2V0ID0gdGhpcy5fc291cmNlLmdldChjbGllbnRJRCkpICE9PSBudWxsICYmIF90aGlzJF9zb3VyY2UkZ2V0ICE9PSB2b2lkIDAgPyBfdGhpcyRfc291cmNlJGdldCA6IHRoaXMuX3NvdXJjZS5jcmVhdGUoY2xpZW50SUQsIHR5cGVOYW1lKTtcbiAgICAgIHRoaXMuc2V0TGlua2VkUmVjb3JkKGxpbmtlZFJlY29yZCwgbmFtZSwgYXJncyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpbmtlZFJlY29yZDtcbiAgfTtcblxuICBfcHJvdG8uZ2V0TGlua2VkUmVjb3JkcyA9IGZ1bmN0aW9uIGdldExpbmtlZFJlY29yZHMobmFtZSwgYXJncykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0YWJsZVN0b3JhZ2VLZXkobmFtZSwgYXJncyk7XG5cbiAgICB2YXIgbGlua2VkSURzID0gdGhpcy5fbXV0YXRvci5nZXRMaW5rZWRSZWNvcmRJRHModGhpcy5fZGF0YUlELCBzdG9yYWdlS2V5KTtcblxuICAgIGlmIChsaW5rZWRJRHMgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGxpbmtlZElEcztcbiAgICB9XG5cbiAgICByZXR1cm4gbGlua2VkSURzLm1hcChmdW5jdGlvbiAobGlua2VkSUQpIHtcbiAgICAgIHJldHVybiBsaW5rZWRJRCAhPSBudWxsID8gX3RoaXMuX3NvdXJjZS5nZXQobGlua2VkSUQpIDogbGlua2VkSUQ7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnNldExpbmtlZFJlY29yZHMgPSBmdW5jdGlvbiBzZXRMaW5rZWRSZWNvcmRzKHJlY29yZHMsIG5hbWUsIGFyZ3MpIHtcbiAgICAhQXJyYXkuaXNBcnJheShyZWNvcmRzKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVjb3JkUHJveHkjc2V0TGlua2VkUmVjb3JkcygpOiBFeHBlY3RlZCByZWNvcmRzIHRvIGJlIGFuIGFycmF5LCBnb3QgYCVzYC4nLCByZWNvcmRzKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIHN0b3JhZ2VLZXkgPSBnZXRTdGFibGVTdG9yYWdlS2V5KG5hbWUsIGFyZ3MpO1xuICAgIHZhciBsaW5rZWRJRHMgPSByZWNvcmRzLm1hcChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICByZXR1cm4gcmVjb3JkICYmIHJlY29yZC5nZXREYXRhSUQoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX211dGF0b3Iuc2V0TGlua2VkUmVjb3JkSURzKHRoaXMuX2RhdGFJRCwgc3RvcmFnZUtleSwgbGlua2VkSURzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5pbnZhbGlkYXRlUmVjb3JkID0gZnVuY3Rpb24gaW52YWxpZGF0ZVJlY29yZCgpIHtcbiAgICB0aGlzLl9zb3VyY2UubWFya0lERm9ySW52YWxpZGF0aW9uKHRoaXMuX2RhdGFJRCk7XG4gIH07XG5cbiAgcmV0dXJuIFJlbGF5UmVjb3JkUHJveHk7XG59KCk7XG5cbmZ1bmN0aW9uIGlzVmFsaWRMZWFmVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5ldmVyeShpc1ZhbGlkTGVhZlZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheVJlY29yZFByb3h5OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVsYXlNb2Rlcm5SZWNvcmQgPSByZXF1aXJlKCcuLi9zdG9yZS9SZWxheU1vZGVyblJlY29yZCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3N0b3JlL1JlbGF5UmVjb3JkU3RhdGUnKSxcbiAgICBFWElTVEVOVCA9IF9yZXF1aXJlLkVYSVNURU5UO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICpcbiAqIFdyYXBwZXIgQVBJIHRoYXQgaXMgYW4gYW1hbGdhbSBvZiB0aGUgYFJlbGF5TW9kZXJuUmVjb3JkYCBBUEkgYW5kXG4gKiBgTXV0YWJsZVJlY29yZFNvdXJjZWAgaW50ZXJmYWNlLCBpbXBsZW1lbnRpbmcgY29weS1vbi13cml0ZSBzZW1hbnRpY3MgZm9yIHJlY29yZHNcbiAqIGluIGEgcmVjb3JkIHNvdXJjZS5cbiAqXG4gKiBNb2RpZmljYXRpb25zIGFyZSBhcHBsaWVkIHRvIGZyZXNoIGNvcGllcyBvZiByZWNvcmRzOlxuICogLSBSZWNvcmRzIGluIGBiYXNlYCBhcmUgbmV2ZXIgbW9kaWZpZWQuXG4gKiAtIE1vZGlmaWNhdGlvbnMgY2F1c2UgYSBmcmVzaCB2ZXJzaW9uIG9mIGEgcmVjb3JkIHRvIGJlIGNyZWF0ZWQgaW4gYHNpbmtgLlxuICogICBUaGVzZSBzaW5rIHJlY29yZHMgY29udGFpbiBvbmx5IG1vZGlmaWVkIGZpZWxkcy5cbiAqL1xudmFyIFJlbGF5UmVjb3JkU291cmNlTXV0YXRvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlbGF5UmVjb3JkU291cmNlTXV0YXRvcihiYXNlLCBzaW5rKSB7XG4gICAgdGhpcy5fX3NvdXJjZXMgPSBbc2luaywgYmFzZV07XG4gICAgdGhpcy5fYmFzZSA9IGJhc2U7XG4gICAgdGhpcy5fc2luayA9IHNpbms7XG4gIH1cbiAgLyoqXG4gICAqICoqVU5TVEFCTEUqKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlbHkgdG8gYmUgcmVtb3ZlZCBpbiBhbiB1cGNvbWluZyByZWxlYXNlXG4gICAqIGFuZCBzaG91bGQgbm90IGJlIHJlbGllZCB1cG9uLlxuICAgKiBUT0RPIFQ0MTU5MzE5NjogUmVtb3ZlIHVuc3RhYmxlX2dldFJhd1JlY29yZFdpdGhDaGFuZ2VzXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFJlbGF5UmVjb3JkU291cmNlTXV0YXRvci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnVuc3RhYmxlX2dldFJhd1JlY29yZFdpdGhDaGFuZ2VzID0gZnVuY3Rpb24gdW5zdGFibGVfZ2V0UmF3UmVjb3JkV2l0aENoYW5nZXMoZGF0YUlEKSB7XG4gICAgdmFyIGJhc2VSZWNvcmQgPSB0aGlzLl9iYXNlLmdldChkYXRhSUQpO1xuXG4gICAgdmFyIHNpbmtSZWNvcmQgPSB0aGlzLl9zaW5rLmdldChkYXRhSUQpO1xuXG4gICAgaWYgKHNpbmtSZWNvcmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGJhc2VSZWNvcmQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYmFzZVJlY29yZDtcbiAgICAgIH1cblxuICAgICAgdmFyIG5leHRSZWNvcmQgPSBSZWxheU1vZGVyblJlY29yZC5jbG9uZShiYXNlUmVjb3JkKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAvLyBQcmV2ZW50IG11dGF0aW9uIG9mIGEgcmVjb3JkIGZyb20gb3V0c2lkZSB0aGUgc3RvcmUuXG4gICAgICAgIFJlbGF5TW9kZXJuUmVjb3JkLmZyZWV6ZShuZXh0UmVjb3JkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHRSZWNvcmQ7XG4gICAgfSBlbHNlIGlmIChzaW5rUmVjb3JkID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKGJhc2VSZWNvcmQgIT0gbnVsbCkge1xuICAgICAgdmFyIF9uZXh0UmVjb3JkID0gUmVsYXlNb2Rlcm5SZWNvcmQudXBkYXRlKGJhc2VSZWNvcmQsIHNpbmtSZWNvcmQpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGlmIChfbmV4dFJlY29yZCAhPT0gYmFzZVJlY29yZCkge1xuICAgICAgICAgIC8vIFByZXZlbnQgbXV0YXRpb24gb2YgYSByZWNvcmQgZnJvbSBvdXRzaWRlIHRoZSBzdG9yZS5cbiAgICAgICAgICBSZWxheU1vZGVyblJlY29yZC5mcmVlemUoX25leHRSZWNvcmQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfbmV4dFJlY29yZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9uZXh0UmVjb3JkMiA9IFJlbGF5TW9kZXJuUmVjb3JkLmNsb25lKHNpbmtSZWNvcmQpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIC8vIFByZXZlbnQgbXV0YXRpb24gb2YgYSByZWNvcmQgZnJvbSBvdXRzaWRlIHRoZSBzdG9yZS5cbiAgICAgICAgUmVsYXlNb2Rlcm5SZWNvcmQuZnJlZXplKF9uZXh0UmVjb3JkMik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfbmV4dFJlY29yZDI7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fZ2V0U2lua1JlY29yZCA9IGZ1bmN0aW9uIF9nZXRTaW5rUmVjb3JkKGRhdGFJRCkge1xuICAgIHZhciBzaW5rUmVjb3JkID0gdGhpcy5fc2luay5nZXQoZGF0YUlEKTtcblxuICAgIGlmICghc2lua1JlY29yZCkge1xuICAgICAgdmFyIGJhc2VSZWNvcmQgPSB0aGlzLl9iYXNlLmdldChkYXRhSUQpO1xuXG4gICAgICAhYmFzZVJlY29yZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVjb3JkU291cmNlTXV0YXRvcjogQ2Fubm90IG1vZGlmeSBub24tZXhpc3RlbnQgcmVjb3JkIGAlc2AuJywgZGF0YUlEKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBzaW5rUmVjb3JkID0gUmVsYXlNb2Rlcm5SZWNvcmQuY3JlYXRlKGRhdGFJRCwgUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0VHlwZShiYXNlUmVjb3JkKSk7XG5cbiAgICAgIHRoaXMuX3Npbmsuc2V0KGRhdGFJRCwgc2lua1JlY29yZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpbmtSZWNvcmQ7XG4gIH07XG5cbiAgX3Byb3RvLmNvcHlGaWVsZHMgPSBmdW5jdGlvbiBjb3B5RmllbGRzKHNvdXJjZUlELCBzaW5rSUQpIHtcbiAgICB2YXIgc2lua1NvdXJjZSA9IHRoaXMuX3NpbmsuZ2V0KHNvdXJjZUlEKTtcblxuICAgIHZhciBiYXNlU291cmNlID0gdGhpcy5fYmFzZS5nZXQoc291cmNlSUQpO1xuXG4gICAgIShzaW5rU291cmNlIHx8IGJhc2VTb3VyY2UpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yI2NvcHlGaWVsZHMoKTogQ2Fubm90IGNvcHkgZmllbGRzIGZyb20gJyArICdub24tZXhpc3RlbnQgcmVjb3JkIGAlc2AuJywgc291cmNlSUQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBzaW5rID0gdGhpcy5fZ2V0U2lua1JlY29yZChzaW5rSUQpO1xuXG4gICAgaWYgKGJhc2VTb3VyY2UpIHtcbiAgICAgIFJlbGF5TW9kZXJuUmVjb3JkLmNvcHlGaWVsZHMoYmFzZVNvdXJjZSwgc2luayk7XG4gICAgfVxuXG4gICAgaWYgKHNpbmtTb3VyY2UpIHtcbiAgICAgIFJlbGF5TW9kZXJuUmVjb3JkLmNvcHlGaWVsZHMoc2lua1NvdXJjZSwgc2luayk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb3B5RmllbGRzRnJvbVJlY29yZCA9IGZ1bmN0aW9uIGNvcHlGaWVsZHNGcm9tUmVjb3JkKHJlY29yZCwgc2lua0lEKSB7XG4gICAgdmFyIHNpbmsgPSB0aGlzLl9nZXRTaW5rUmVjb3JkKHNpbmtJRCk7XG5cbiAgICBSZWxheU1vZGVyblJlY29yZC5jb3B5RmllbGRzKHJlY29yZCwgc2luayk7XG4gIH07XG5cbiAgX3Byb3RvLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShkYXRhSUQsIHR5cGVOYW1lKSB7XG4gICAgISh0aGlzLl9iYXNlLmdldFN0YXR1cyhkYXRhSUQpICE9PSBFWElTVEVOVCAmJiB0aGlzLl9zaW5rLmdldFN0YXR1cyhkYXRhSUQpICE9PSBFWElTVEVOVCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlY29yZFNvdXJjZU11dGF0b3IjY3JlYXRlKCk6IENhbm5vdCBjcmVhdGUgYSByZWNvcmQgd2l0aCBpZCAnICsgJ2Alc2AsIHRoaXMgcmVjb3JkIGFscmVhZHkgZXhpc3RzLicsIGRhdGFJRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciByZWNvcmQgPSBSZWxheU1vZGVyblJlY29yZC5jcmVhdGUoZGF0YUlELCB0eXBlTmFtZSk7XG5cbiAgICB0aGlzLl9zaW5rLnNldChkYXRhSUQsIHJlY29yZCk7XG4gIH07XG5cbiAgX3Byb3RvW1wiZGVsZXRlXCJdID0gZnVuY3Rpb24gX2RlbGV0ZShkYXRhSUQpIHtcbiAgICB0aGlzLl9zaW5rW1wiZGVsZXRlXCJdKGRhdGFJRCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFN0YXR1cyA9IGZ1bmN0aW9uIGdldFN0YXR1cyhkYXRhSUQpIHtcbiAgICByZXR1cm4gdGhpcy5fc2luay5oYXMoZGF0YUlEKSA/IHRoaXMuX3NpbmsuZ2V0U3RhdHVzKGRhdGFJRCkgOiB0aGlzLl9iYXNlLmdldFN0YXR1cyhkYXRhSUQpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUeXBlID0gZnVuY3Rpb24gZ2V0VHlwZShkYXRhSUQpIHtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgdGhpcy5fX3NvdXJjZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICB2YXIgcmVjb3JkID0gdGhpcy5fX3NvdXJjZXNbaWldLmdldChkYXRhSUQpO1xuXG4gICAgICBpZiAocmVjb3JkKSB7XG4gICAgICAgIHJldHVybiBSZWxheU1vZGVyblJlY29yZC5nZXRUeXBlKHJlY29yZCk7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoZGF0YUlELCBzdG9yYWdlS2V5KSB7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHRoaXMuX19zb3VyY2VzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIHJlY29yZCA9IHRoaXMuX19zb3VyY2VzW2lpXS5nZXQoZGF0YUlEKTtcblxuICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBSZWxheU1vZGVyblJlY29yZC5nZXRWYWx1ZShyZWNvcmQsIHN0b3JhZ2VLZXkpO1xuXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNldFZhbHVlID0gZnVuY3Rpb24gc2V0VmFsdWUoZGF0YUlELCBzdG9yYWdlS2V5LCB2YWx1ZSkge1xuICAgIHZhciBzaW5rUmVjb3JkID0gdGhpcy5fZ2V0U2lua1JlY29yZChkYXRhSUQpO1xuXG4gICAgUmVsYXlNb2Rlcm5SZWNvcmQuc2V0VmFsdWUoc2lua1JlY29yZCwgc3RvcmFnZUtleSwgdmFsdWUpO1xuICB9O1xuXG4gIF9wcm90by5nZXRMaW5rZWRSZWNvcmRJRCA9IGZ1bmN0aW9uIGdldExpbmtlZFJlY29yZElEKGRhdGFJRCwgc3RvcmFnZUtleSkge1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB0aGlzLl9fc291cmNlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIHZhciByZWNvcmQgPSB0aGlzLl9fc291cmNlc1tpaV0uZ2V0KGRhdGFJRCk7XG5cbiAgICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgdmFyIGxpbmtlZElEID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0TGlua2VkUmVjb3JkSUQocmVjb3JkLCBzdG9yYWdlS2V5KTtcblxuICAgICAgICBpZiAobGlua2VkSUQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBsaW5rZWRJRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZWNvcmQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zZXRMaW5rZWRSZWNvcmRJRCA9IGZ1bmN0aW9uIHNldExpbmtlZFJlY29yZElEKGRhdGFJRCwgc3RvcmFnZUtleSwgbGlua2VkSUQpIHtcbiAgICB2YXIgc2lua1JlY29yZCA9IHRoaXMuX2dldFNpbmtSZWNvcmQoZGF0YUlEKTtcblxuICAgIFJlbGF5TW9kZXJuUmVjb3JkLnNldExpbmtlZFJlY29yZElEKHNpbmtSZWNvcmQsIHN0b3JhZ2VLZXksIGxpbmtlZElEKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0TGlua2VkUmVjb3JkSURzID0gZnVuY3Rpb24gZ2V0TGlua2VkUmVjb3JkSURzKGRhdGFJRCwgc3RvcmFnZUtleSkge1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB0aGlzLl9fc291cmNlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIHZhciByZWNvcmQgPSB0aGlzLl9fc291cmNlc1tpaV0uZ2V0KGRhdGFJRCk7XG5cbiAgICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgdmFyIGxpbmtlZElEcyA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldExpbmtlZFJlY29yZElEcyhyZWNvcmQsIHN0b3JhZ2VLZXkpO1xuXG4gICAgICAgIGlmIChsaW5rZWRJRHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBsaW5rZWRJRHM7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2V0TGlua2VkUmVjb3JkSURzID0gZnVuY3Rpb24gc2V0TGlua2VkUmVjb3JkSURzKGRhdGFJRCwgc3RvcmFnZUtleSwgbGlua2VkSURzKSB7XG4gICAgdmFyIHNpbmtSZWNvcmQgPSB0aGlzLl9nZXRTaW5rUmVjb3JkKGRhdGFJRCk7XG5cbiAgICBSZWxheU1vZGVyblJlY29yZC5zZXRMaW5rZWRSZWNvcmRJRHMoc2lua1JlY29yZCwgc3RvcmFnZUtleSwgbGlua2VkSURzKTtcbiAgfTtcblxuICByZXR1cm4gUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5UmVjb3JkU291cmNlTXV0YXRvcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlbGF5TW9kZXJuUmVjb3JkID0gcmVxdWlyZSgnLi4vc3RvcmUvUmVsYXlNb2Rlcm5SZWNvcmQnKTtcblxudmFyIFJlbGF5UmVjb3JkUHJveHkgPSByZXF1aXJlKCcuL1JlbGF5UmVjb3JkUHJveHknKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi9zdG9yZS9SZWxheVJlY29yZFN0YXRlJyksXG4gICAgRVhJU1RFTlQgPSBfcmVxdWlyZS5FWElTVEVOVCxcbiAgICBOT05FWElTVEVOVCA9IF9yZXF1aXJlLk5PTkVYSVNURU5UO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi4vc3RvcmUvUmVsYXlTdG9yZVV0aWxzJyksXG4gICAgUk9PVF9JRCA9IF9yZXF1aXJlMi5ST09UX0lELFxuICAgIFJPT1RfVFlQRSA9IF9yZXF1aXJlMi5ST09UX1RZUEU7XG5cbi8qKlxuICogQGludGVybmFsXG4gKlxuICogQSBoZWxwZXIgZm9yIG1hbmlwdWxhdGluZyBhIGBSZWNvcmRTb3VyY2VgIHZpYSBhbiBpbXBlcmF0aXZlL09PLXN0eWxlIEFQSS5cbiAqL1xudmFyIFJlbGF5UmVjb3JkU291cmNlUHJveHkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWxheVJlY29yZFNvdXJjZVByb3h5KG11dGF0b3IsIGdldERhdGFJRCwgaGFuZGxlclByb3ZpZGVyKSB7XG4gICAgdGhpcy5fX211dGF0b3IgPSBtdXRhdG9yO1xuICAgIHRoaXMuX2hhbmRsZXJQcm92aWRlciA9IGhhbmRsZXJQcm92aWRlciB8fCBudWxsO1xuICAgIHRoaXMuX3Byb3hpZXMgPSB7fTtcbiAgICB0aGlzLl9nZXREYXRhSUQgPSBnZXREYXRhSUQ7XG4gICAgdGhpcy5faW52YWxpZGF0ZWRTdG9yZSA9IGZhbHNlO1xuICAgIHRoaXMuX2lkc01hcmtlZEZvckludmFsaWRhdGlvbiA9IG5ldyBTZXQoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZWxheVJlY29yZFNvdXJjZVByb3h5LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucHVibGlzaFNvdXJjZSA9IGZ1bmN0aW9uIHB1Ymxpc2hTb3VyY2Uoc291cmNlLCBmaWVsZFBheWxvYWRzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBkYXRhSURzID0gc291cmNlLmdldFJlY29yZElEcygpO1xuICAgIGRhdGFJRHMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YUlEKSB7XG4gICAgICB2YXIgc3RhdHVzID0gc291cmNlLmdldFN0YXR1cyhkYXRhSUQpO1xuXG4gICAgICBpZiAoc3RhdHVzID09PSBFWElTVEVOVCkge1xuICAgICAgICB2YXIgc291cmNlUmVjb3JkID0gc291cmNlLmdldChkYXRhSUQpO1xuXG4gICAgICAgIGlmIChzb3VyY2VSZWNvcmQpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuX19tdXRhdG9yLmdldFN0YXR1cyhkYXRhSUQpICE9PSBFWElTVEVOVCkge1xuICAgICAgICAgICAgX3RoaXMuY3JlYXRlKGRhdGFJRCwgUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0VHlwZShzb3VyY2VSZWNvcmQpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpcy5fX211dGF0b3IuY29weUZpZWxkc0Zyb21SZWNvcmQoc291cmNlUmVjb3JkLCBkYXRhSUQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gTk9ORVhJU1RFTlQpIHtcbiAgICAgICAgX3RoaXNbXCJkZWxldGVcIl0oZGF0YUlEKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChmaWVsZFBheWxvYWRzICYmIGZpZWxkUGF5bG9hZHMubGVuZ3RoKSB7XG4gICAgICBmaWVsZFBheWxvYWRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkUGF5bG9hZCkge1xuICAgICAgICB2YXIgaGFuZGxlciA9IF90aGlzLl9oYW5kbGVyUHJvdmlkZXIgJiYgX3RoaXMuX2hhbmRsZXJQcm92aWRlcihmaWVsZFBheWxvYWQuaGFuZGxlKTtcblxuICAgICAgICAhaGFuZGxlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuRW52aXJvbm1lbnQ6IEV4cGVjdGVkIGEgaGFuZGxlciB0byBiZSBwcm92aWRlZCBmb3IgaGFuZGxlIGAlc2AuJywgZmllbGRQYXlsb2FkLmhhbmRsZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBoYW5kbGVyLnVwZGF0ZShfdGhpcywgZmllbGRQYXlsb2FkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGRhdGFJRCwgdHlwZU5hbWUpIHtcbiAgICB0aGlzLl9fbXV0YXRvci5jcmVhdGUoZGF0YUlELCB0eXBlTmFtZSk7XG5cbiAgICBkZWxldGUgdGhpcy5fcHJveGllc1tkYXRhSURdO1xuICAgIHZhciByZWNvcmQgPSB0aGlzLmdldChkYXRhSUQpOyAvLyBGb3IgZmxvd1xuXG4gICAgIXJlY29yZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVjb3JkU291cmNlUHJveHkjY3JlYXRlKCk6IEV4cGVjdGVkIHRoZSBjcmVhdGVkIHJlY29yZCB0byBleGlzdC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIHJlY29yZDtcbiAgfTtcblxuICBfcHJvdG9bXCJkZWxldGVcIl0gPSBmdW5jdGlvbiBfZGVsZXRlKGRhdGFJRCkge1xuICAgICEoZGF0YUlEICE9PSBST09UX0lEKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVjb3JkU291cmNlUHJveHkjZGVsZXRlKCk6IENhbm5vdCBkZWxldGUgdGhlIHJvb3QgcmVjb3JkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBkZWxldGUgdGhpcy5fcHJveGllc1tkYXRhSURdO1xuXG4gICAgdGhpcy5fX211dGF0b3JbXCJkZWxldGVcIl0oZGF0YUlEKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KGRhdGFJRCkge1xuICAgIGlmICghdGhpcy5fcHJveGllcy5oYXNPd25Qcm9wZXJ0eShkYXRhSUQpKSB7XG4gICAgICB2YXIgc3RhdHVzID0gdGhpcy5fX211dGF0b3IuZ2V0U3RhdHVzKGRhdGFJRCk7XG5cbiAgICAgIGlmIChzdGF0dXMgPT09IEVYSVNURU5UKSB7XG4gICAgICAgIHRoaXMuX3Byb3hpZXNbZGF0YUlEXSA9IG5ldyBSZWxheVJlY29yZFByb3h5KHRoaXMsIHRoaXMuX19tdXRhdG9yLCBkYXRhSUQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcHJveGllc1tkYXRhSURdID0gc3RhdHVzID09PSBOT05FWElTVEVOVCA/IG51bGwgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3Byb3hpZXNbZGF0YUlEXTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0Um9vdCA9IGZ1bmN0aW9uIGdldFJvb3QoKSB7XG4gICAgdmFyIHJvb3QgPSB0aGlzLmdldChST09UX0lEKTtcblxuICAgIGlmICghcm9vdCkge1xuICAgICAgcm9vdCA9IHRoaXMuY3JlYXRlKFJPT1RfSUQsIFJPT1RfVFlQRSk7XG4gICAgfVxuXG4gICAgIShyb290ICYmIHJvb3QuZ2V0VHlwZSgpID09PSBST09UX1RZUEUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWNvcmRTb3VyY2VQcm94eSNnZXRSb290KCk6IEV4cGVjdGVkIHRoZSBzb3VyY2UgdG8gY29udGFpbiBhICcgKyAncm9vdCByZWNvcmQsICVzLicsIHJvb3QgPT0gbnVsbCA/ICdubyByb290IHJlY29yZCBmb3VuZCcgOiBcImZvdW5kIGEgcm9vdCByZWNvcmQgb2YgdHlwZSBgXCIuY29uY2F0KHJvb3QuZ2V0VHlwZSgpLCBcImBcIikpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gcm9vdDtcbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZVN0b3JlID0gZnVuY3Rpb24gaW52YWxpZGF0ZVN0b3JlKCkge1xuICAgIHRoaXMuX2ludmFsaWRhdGVkU3RvcmUgPSB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5pc1N0b3JlTWFya2VkRm9ySW52YWxpZGF0aW9uID0gZnVuY3Rpb24gaXNTdG9yZU1hcmtlZEZvckludmFsaWRhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5faW52YWxpZGF0ZWRTdG9yZTtcbiAgfTtcblxuICBfcHJvdG8ubWFya0lERm9ySW52YWxpZGF0aW9uID0gZnVuY3Rpb24gbWFya0lERm9ySW52YWxpZGF0aW9uKGRhdGFJRCkge1xuICAgIHRoaXMuX2lkc01hcmtlZEZvckludmFsaWRhdGlvbi5hZGQoZGF0YUlEKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0SURzTWFya2VkRm9ySW52YWxpZGF0aW9uID0gZnVuY3Rpb24gZ2V0SURzTWFya2VkRm9ySW52YWxpZGF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9pZHNNYXJrZWRGb3JJbnZhbGlkYXRpb247XG4gIH07XG5cbiAgcmV0dXJuIFJlbGF5UmVjb3JkU291cmNlUHJveHk7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVsYXlSZWNvcmRTb3VyY2VQcm94eTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi9zdG9yZS9SZWxheVN0b3JlVXRpbHMnKSxcbiAgICBnZXRTdG9yYWdlS2V5ID0gX3JlcXVpcmUuZ2V0U3RvcmFnZUtleSxcbiAgICBST09UX1RZUEUgPSBfcmVxdWlyZS5ST09UX1RZUEU7XG5cbi8qKlxuICogQGludGVybmFsXG4gKlxuICogQSBzdWJjbGFzcyBvZiBSZWNvcmRTb3VyY2VQcm94eSB0aGF0IHByb3ZpZGVzIGNvbnZlbmllbmNlIG1ldGhvZHMgZm9yXG4gKiBhY2Nlc3NpbmcgdGhlIHJvb3QgZmllbGRzIG9mIGEgZ2l2ZW4gcXVlcnkvbXV0YXRpb24uIFRoZXNlIGZpZWxkcyBhY2NlcHRcbiAqIGNvbXBsZXggYXJndW1lbnRzIGFuZCBpdCBjYW4gYmUgdGVkaW91cyB0byByZS1jb25zdHJ1Y3QgdGhlIGNvcnJlY3Qgc2V0cyBvZlxuICogYXJndW1lbnRzIHRvIHBhc3MgdG8gZS5nLiBgZ2V0Um9vdCgpLmdldExpbmtlZFJlY29yZCgpYC5cbiAqL1xudmFyIFJlbGF5UmVjb3JkU291cmNlU2VsZWN0b3JQcm94eSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlbGF5UmVjb3JkU291cmNlU2VsZWN0b3JQcm94eShtdXRhdG9yLCByZWNvcmRTb3VyY2UsIHJlYWRTZWxlY3Rvcikge1xuICAgIHRoaXMuX19tdXRhdG9yID0gbXV0YXRvcjtcbiAgICB0aGlzLl9fcmVjb3JkU291cmNlID0gcmVjb3JkU291cmNlO1xuICAgIHRoaXMuX3JlYWRTZWxlY3RvciA9IHJlYWRTZWxlY3RvcjtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZWxheVJlY29yZFNvdXJjZVNlbGVjdG9yUHJveHkucHJvdG90eXBlO1xuXG4gIF9wcm90by5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoZGF0YUlELCB0eXBlTmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9fcmVjb3JkU291cmNlLmNyZWF0ZShkYXRhSUQsIHR5cGVOYW1lKTtcbiAgfTtcblxuICBfcHJvdG9bXCJkZWxldGVcIl0gPSBmdW5jdGlvbiBfZGVsZXRlKGRhdGFJRCkge1xuICAgIHRoaXMuX19yZWNvcmRTb3VyY2VbXCJkZWxldGVcIl0oZGF0YUlEKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KGRhdGFJRCkge1xuICAgIHJldHVybiB0aGlzLl9fcmVjb3JkU291cmNlLmdldChkYXRhSUQpO1xuICB9O1xuXG4gIF9wcm90by5nZXRSb290ID0gZnVuY3Rpb24gZ2V0Um9vdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fX3JlY29yZFNvdXJjZS5nZXRSb290KCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldE9wZXJhdGlvblJvb3QgPSBmdW5jdGlvbiBnZXRPcGVyYXRpb25Sb290KCkge1xuICAgIHZhciByb290ID0gdGhpcy5fX3JlY29yZFNvdXJjZS5nZXQodGhpcy5fcmVhZFNlbGVjdG9yLmRhdGFJRCk7XG5cbiAgICBpZiAoIXJvb3QpIHtcbiAgICAgIHJvb3QgPSB0aGlzLl9fcmVjb3JkU291cmNlLmNyZWF0ZSh0aGlzLl9yZWFkU2VsZWN0b3IuZGF0YUlELCBST09UX1RZUEUpO1xuICAgIH1cblxuICAgIHJldHVybiByb290O1xuICB9O1xuXG4gIF9wcm90by5fZ2V0Um9vdEZpZWxkID0gZnVuY3Rpb24gX2dldFJvb3RGaWVsZChzZWxlY3RvciwgZmllbGROYW1lLCBwbHVyYWwpIHtcbiAgICB2YXIgZmllbGQgPSBzZWxlY3Rvci5ub2RlLnNlbGVjdGlvbnMuZmluZChmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gc2VsZWN0aW9uLmtpbmQgPT09ICdMaW5rZWRGaWVsZCcgJiYgc2VsZWN0aW9uLm5hbWUgPT09IGZpZWxkTmFtZTtcbiAgICB9KTtcbiAgICAhKGZpZWxkICYmIGZpZWxkLmtpbmQgPT09ICdMaW5rZWRGaWVsZCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWNvcmRTb3VyY2VTZWxlY3RvclByb3h5I2dldFJvb3RGaWVsZCgpOiBDYW5ub3QgZmluZCByb290ICcgKyAnZmllbGQgYCVzYCwgbm8gc3VjaCBmaWVsZCBpcyBkZWZpbmVkIG9uIEdyYXBoUUwgZG9jdW1lbnQgYCVzYC4nLCBmaWVsZE5hbWUsIHNlbGVjdG9yLm5vZGUubmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEoZmllbGQucGx1cmFsID09PSBwbHVyYWwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWNvcmRTb3VyY2VTZWxlY3RvclByb3h5I2dldFJvb3RGaWVsZCgpOiBFeHBlY3RlZCByb290IGZpZWxkICcgKyAnYCVzYCB0byBiZSAlcy4nLCBmaWVsZE5hbWUsIHBsdXJhbCA/ICdwbHVyYWwnIDogJ3Npbmd1bGFyJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBmaWVsZDtcbiAgfTtcblxuICBfcHJvdG8uZ2V0Um9vdEZpZWxkID0gZnVuY3Rpb24gZ2V0Um9vdEZpZWxkKGZpZWxkTmFtZSkge1xuICAgIHZhciBmaWVsZCA9IHRoaXMuX2dldFJvb3RGaWVsZCh0aGlzLl9yZWFkU2VsZWN0b3IsIGZpZWxkTmFtZSwgZmFsc2UpO1xuXG4gICAgdmFyIHN0b3JhZ2VLZXkgPSBnZXRTdG9yYWdlS2V5KGZpZWxkLCB0aGlzLl9yZWFkU2VsZWN0b3IudmFyaWFibGVzKTtcbiAgICByZXR1cm4gdGhpcy5nZXRPcGVyYXRpb25Sb290KCkuZ2V0TGlua2VkUmVjb3JkKHN0b3JhZ2VLZXkpO1xuICB9O1xuXG4gIF9wcm90by5nZXRQbHVyYWxSb290RmllbGQgPSBmdW5jdGlvbiBnZXRQbHVyYWxSb290RmllbGQoZmllbGROYW1lKSB7XG4gICAgdmFyIGZpZWxkID0gdGhpcy5fZ2V0Um9vdEZpZWxkKHRoaXMuX3JlYWRTZWxlY3RvciwgZmllbGROYW1lLCB0cnVlKTtcblxuICAgIHZhciBzdG9yYWdlS2V5ID0gZ2V0U3RvcmFnZUtleShmaWVsZCwgdGhpcy5fcmVhZFNlbGVjdG9yLnZhcmlhYmxlcyk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0T3BlcmF0aW9uUm9vdCgpLmdldExpbmtlZFJlY29yZHMoc3RvcmFnZUtleSk7XG4gIH07XG5cbiAgX3Byb3RvLmludmFsaWRhdGVTdG9yZSA9IGZ1bmN0aW9uIGludmFsaWRhdGVTdG9yZSgpIHtcbiAgICB0aGlzLl9fcmVjb3JkU291cmNlLmludmFsaWRhdGVTdG9yZSgpO1xuICB9O1xuXG4gIHJldHVybiBSZWxheVJlY29yZFNvdXJjZVNlbGVjdG9yUHJveHk7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVsYXlSZWNvcmRTb3VyY2VTZWxlY3RvclByb3h5OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVsYXlEZWNsYXJhdGl2ZU11dGF0aW9uQ29uZmlnID0gcmVxdWlyZSgnLi9SZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWcnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgaXNSZWxheU1vZGVybkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi4vc3RvcmUvaXNSZWxheU1vZGVybkVudmlyb25tZW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3F1ZXJ5L0dyYXBoUUxUYWcnKSxcbiAgICBnZXRSZXF1ZXN0ID0gX3JlcXVpcmUuZ2V0UmVxdWVzdDtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4uL3N0b3JlL1JlbGF5TW9kZXJuT3BlcmF0aW9uRGVzY3JpcHRvcicpLFxuICAgIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IgPSBfcmVxdWlyZTIuY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcjtcblxuLyoqXG4gKiBIaWdoZXItbGV2ZWwgaGVscGVyIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgYSBtdXRhdGlvbiBhZ2FpbnN0IGEgc3BlY2lmaWNcbiAqIGVudmlyb25tZW50LlxuICovXG5mdW5jdGlvbiBhcHBseU9wdGltaXN0aWNNdXRhdGlvbihlbnZpcm9ubWVudCwgY29uZmlnKSB7XG4gICFpc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQoZW52aXJvbm1lbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnY29tbWl0TXV0YXRpb246IGV4cGVjdGVkIGBlbnZpcm9ubWVudGAgdG8gYmUgYW4gaW5zdGFuY2Ugb2YgJyArICdgUmVsYXlNb2Rlcm5FbnZpcm9ubWVudGAuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgbXV0YXRpb24gPSBnZXRSZXF1ZXN0KGNvbmZpZy5tdXRhdGlvbik7XG5cbiAgaWYgKG11dGF0aW9uLnBhcmFtcy5vcGVyYXRpb25LaW5kICE9PSAnbXV0YXRpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb21taXRNdXRhdGlvbjogRXhwZWN0ZWQgbXV0YXRpb24gb3BlcmF0aW9uJyk7XG4gIH1cblxuICB2YXIgb3B0aW1pc3RpY1VwZGF0ZXIgPSBjb25maWcub3B0aW1pc3RpY1VwZGF0ZXI7XG4gIHZhciBjb25maWdzID0gY29uZmlnLmNvbmZpZ3MsXG4gICAgICBvcHRpbWlzdGljUmVzcG9uc2UgPSBjb25maWcub3B0aW1pc3RpY1Jlc3BvbnNlLFxuICAgICAgdmFyaWFibGVzID0gY29uZmlnLnZhcmlhYmxlcztcbiAgdmFyIG9wZXJhdGlvbiA9IGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IobXV0YXRpb24sIHZhcmlhYmxlcyk7XG5cbiAgaWYgKGNvbmZpZ3MpIHtcbiAgICB2YXIgX1JlbGF5RGVjbGFyYXRpdmVNdXRhID0gUmVsYXlEZWNsYXJhdGl2ZU11dGF0aW9uQ29uZmlnLmNvbnZlcnQoY29uZmlncywgbXV0YXRpb24sIG9wdGltaXN0aWNVcGRhdGVyKTtcblxuICAgIG9wdGltaXN0aWNVcGRhdGVyID0gX1JlbGF5RGVjbGFyYXRpdmVNdXRhLm9wdGltaXN0aWNVcGRhdGVyO1xuICB9XG5cbiAgcmV0dXJuIGVudmlyb25tZW50LmFwcGx5TXV0YXRpb24oe1xuICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgIHJlc3BvbnNlOiBvcHRpbWlzdGljUmVzcG9uc2UsXG4gICAgdXBkYXRlcjogb3B0aW1pc3RpY1VwZGF0ZXJcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbHlPcHRpbWlzdGljTXV0YXRpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNvbW1pdExvY2FsVXBkYXRlKGVudmlyb25tZW50LCB1cGRhdGVyKSB7XG4gIGVudmlyb25tZW50LmNvbW1pdFVwZGF0ZSh1cGRhdGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb21taXRMb2NhbFVwZGF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiKSk7XG5cbnZhciBSZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWcgPSByZXF1aXJlKCcuL1JlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZycpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBpc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuLi9zdG9yZS9pc1JlbGF5TW9kZXJuRW52aXJvbm1lbnQnKTtcblxudmFyIHZhbGlkYXRlTXV0YXRpb24gPSByZXF1aXJlKCcuL3ZhbGlkYXRlTXV0YXRpb24nKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vcXVlcnkvR3JhcGhRTFRhZycpLFxuICAgIGdldFJlcXVlc3QgPSBfcmVxdWlyZS5nZXRSZXF1ZXN0O1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi4vc3RvcmUvQ2xpZW50SUQnKSxcbiAgICBnZW5lcmF0ZVVuaXF1ZUNsaWVudElEID0gX3JlcXVpcmUyLmdlbmVyYXRlVW5pcXVlQ2xpZW50SUQ7XG5cbnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKCcuLi9zdG9yZS9SZWxheU1vZGVybk9wZXJhdGlvbkRlc2NyaXB0b3InKSxcbiAgICBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yID0gX3JlcXVpcmUzLmNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3I7XG5cbi8qKlxuICogSGlnaGVyLWxldmVsIGhlbHBlciBmdW5jdGlvbiB0byBleGVjdXRlIGEgbXV0YXRpb24gYWdhaW5zdCBhIHNwZWNpZmljXG4gKiBlbnZpcm9ubWVudC5cbiAqL1xuZnVuY3Rpb24gY29tbWl0TXV0YXRpb24oZW52aXJvbm1lbnQsIGNvbmZpZykge1xuICAhaXNSZWxheU1vZGVybkVudmlyb25tZW50KGVudmlyb25tZW50KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2NvbW1pdE11dGF0aW9uOiBleHBlY3RlZCBgZW52aXJvbm1lbnRgIHRvIGJlIGFuIGluc3RhbmNlIG9mICcgKyAnYFJlbGF5TW9kZXJuRW52aXJvbm1lbnRgLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIG11dGF0aW9uID0gZ2V0UmVxdWVzdChjb25maWcubXV0YXRpb24pO1xuXG4gIGlmIChtdXRhdGlvbi5wYXJhbXMub3BlcmF0aW9uS2luZCAhPT0gJ211dGF0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignY29tbWl0TXV0YXRpb246IEV4cGVjdGVkIG11dGF0aW9uIG9wZXJhdGlvbicpO1xuICB9XG5cbiAgaWYgKG11dGF0aW9uLmtpbmQgIT09ICdSZXF1ZXN0Jykge1xuICAgIHRocm93IG5ldyBFcnJvcignY29tbWl0TXV0YXRpb246IEV4cGVjdGVkIG11dGF0aW9uIHRvIGJlIG9mIHR5cGUgcmVxdWVzdCcpO1xuICB9XG5cbiAgdmFyIG9wdGltaXN0aWNSZXNwb25zZSA9IGNvbmZpZy5vcHRpbWlzdGljUmVzcG9uc2UsXG4gICAgICBvcHRpbWlzdGljVXBkYXRlciA9IGNvbmZpZy5vcHRpbWlzdGljVXBkYXRlcixcbiAgICAgIHVwZGF0ZXIgPSBjb25maWcudXBkYXRlcjtcbiAgdmFyIGNvbmZpZ3MgPSBjb25maWcuY29uZmlncyxcbiAgICAgIGNhY2hlQ29uZmlnID0gY29uZmlnLmNhY2hlQ29uZmlnLFxuICAgICAgb25FcnJvciA9IGNvbmZpZy5vbkVycm9yLFxuICAgICAgb25VbnN1YnNjcmliZSA9IGNvbmZpZy5vblVuc3Vic2NyaWJlLFxuICAgICAgdmFyaWFibGVzID0gY29uZmlnLnZhcmlhYmxlcyxcbiAgICAgIHVwbG9hZGFibGVzID0gY29uZmlnLnVwbG9hZGFibGVzO1xuICB2YXIgb3BlcmF0aW9uID0gY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcihtdXRhdGlvbiwgdmFyaWFibGVzLCBjYWNoZUNvbmZpZywgZ2VuZXJhdGVVbmlxdWVDbGllbnRJRCgpKTsgLy8gVE9ETzogcmVtb3ZlIHRoaXMgY2hlY2sgYWZ0ZXIgd2UgZml4IGZsb3cuXG5cbiAgaWYgKHR5cGVvZiBvcHRpbWlzdGljUmVzcG9uc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpbWlzdGljUmVzcG9uc2UgPSBvcHRpbWlzdGljUmVzcG9uc2UoKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnY29tbWl0TXV0YXRpb246IEV4cGVjdGVkIGBvcHRpbWlzdGljUmVzcG9uc2VgIHRvIGJlIGFuIG9iamVjdCwgJyArICdyZWNlaXZlZCBhIGZ1bmN0aW9uLicpIDogdm9pZCAwO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmIChvcHRpbWlzdGljUmVzcG9uc2UgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgIHZhbGlkYXRlTXV0YXRpb24ob3B0aW1pc3RpY1Jlc3BvbnNlLCBtdXRhdGlvbiwgdmFyaWFibGVzKTtcbiAgICB9XG4gIH1cblxuICBpZiAoY29uZmlncykge1xuICAgIHZhciBfUmVsYXlEZWNsYXJhdGl2ZU11dGEgPSBSZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWcuY29udmVydChjb25maWdzLCBtdXRhdGlvbiwgb3B0aW1pc3RpY1VwZGF0ZXIsIHVwZGF0ZXIpO1xuXG4gICAgb3B0aW1pc3RpY1VwZGF0ZXIgPSBfUmVsYXlEZWNsYXJhdGl2ZU11dGEub3B0aW1pc3RpY1VwZGF0ZXI7XG4gICAgdXBkYXRlciA9IF9SZWxheURlY2xhcmF0aXZlTXV0YS51cGRhdGVyO1xuICB9XG5cbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgc3Vic2NyaXB0aW9uID0gZW52aXJvbm1lbnQuZXhlY3V0ZU11dGF0aW9uKHtcbiAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICBvcHRpbWlzdGljUmVzcG9uc2U6IG9wdGltaXN0aWNSZXNwb25zZSxcbiAgICBvcHRpbWlzdGljVXBkYXRlcjogb3B0aW1pc3RpY1VwZGF0ZXIsXG4gICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICB1cGxvYWRhYmxlczogdXBsb2FkYWJsZXNcbiAgfSkuc3Vic2NyaWJlKHtcbiAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KHBheWxvYWQpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHBheWxvYWQpKSB7XG4gICAgICAgIHBheWxvYWQuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIGlmIChpdGVtLmVycm9ycykge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2guYXBwbHkoZXJyb3JzLCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKGl0ZW0uZXJyb3JzKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwYXlsb2FkLmVycm9ycykge1xuICAgICAgICAgIGVycm9ycy5wdXNoLmFwcGx5KGVycm9ycywgKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShwYXlsb2FkLmVycm9ycykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICB2YXIgb25Db21wbGV0ZWQgPSBjb25maWcub25Db21wbGV0ZWQ7XG5cbiAgICAgIGlmIChvbkNvbXBsZXRlZCkge1xuICAgICAgICB2YXIgc25hcHNob3QgPSBlbnZpcm9ubWVudC5sb29rdXAob3BlcmF0aW9uLmZyYWdtZW50KTtcbiAgICAgICAgb25Db21wbGV0ZWQoc25hcHNob3QuZGF0YSwgZXJyb3JzLmxlbmd0aCAhPT0gMCA/IGVycm9ycyA6IG51bGwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXJyb3I6IG9uRXJyb3IsXG4gICAgdW5zdWJzY3JpYmU6IG9uVW5zdWJzY3JpYmVcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgZGlzcG9zZTogc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29tbWl0TXV0YXRpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi91dGlsL1JlbGF5Q29uY3JldGVOb2RlJyksXG4gICAgQ09ORElUSU9OID0gX3JlcXVpcmUuQ09ORElUSU9OLFxuICAgIENMSUVOVF9DT01QT05FTlQgPSBfcmVxdWlyZS5DTElFTlRfQ09NUE9ORU5ULFxuICAgIENMSUVOVF9FWFRFTlNJT04gPSBfcmVxdWlyZS5DTElFTlRfRVhURU5TSU9OLFxuICAgIERFRkVSID0gX3JlcXVpcmUuREVGRVIsXG4gICAgRkxJR0hUX0ZJRUxEID0gX3JlcXVpcmUuRkxJR0hUX0ZJRUxELFxuICAgIEZSQUdNRU5UX1NQUkVBRCA9IF9yZXF1aXJlLkZSQUdNRU5UX1NQUkVBRCxcbiAgICBJTkxJTkVfRlJBR01FTlQgPSBfcmVxdWlyZS5JTkxJTkVfRlJBR01FTlQsXG4gICAgTElOS0VEX0ZJRUxEID0gX3JlcXVpcmUuTElOS0VEX0ZJRUxELFxuICAgIExJTktFRF9IQU5ETEUgPSBfcmVxdWlyZS5MSU5LRURfSEFORExFLFxuICAgIE1PRFVMRV9JTVBPUlQgPSBfcmVxdWlyZS5NT0RVTEVfSU1QT1JULFxuICAgIFNDQUxBUl9GSUVMRCA9IF9yZXF1aXJlLlNDQUxBUl9GSUVMRCxcbiAgICBTQ0FMQVJfSEFORExFID0gX3JlcXVpcmUuU0NBTEFSX0hBTkRMRSxcbiAgICBTVFJFQU0gPSBfcmVxdWlyZS5TVFJFQU0sXG4gICAgVFlQRV9ESVNDUklNSU5BVE9SID0gX3JlcXVpcmUuVFlQRV9ESVNDUklNSU5BVE9SO1xuXG52YXIgdmFsaWRhdGVNdXRhdGlvbiA9IGZ1bmN0aW9uIHZhbGlkYXRlTXV0YXRpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgYWRkRmllbGRUb0RpZmYgPSBmdW5jdGlvbiBhZGRGaWVsZFRvRGlmZihwYXRoLCBkaWZmLCBpc1NjYWxhcikge1xuICAgIHZhciBkZWVwTG9jID0gZGlmZjtcbiAgICBwYXRoLnNwbGl0KCcuJykuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCBpbmRleCwgYXJyKSB7XG4gICAgICBpZiAoZGVlcExvY1trZXldID09IG51bGwpIHtcbiAgICAgICAgZGVlcExvY1trZXldID0ge307XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1NjYWxhciAmJiBpbmRleCA9PT0gYXJyLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgZGVlcExvY1trZXldID0gJzxzY2FsYXI+JztcbiAgICAgIH1cblxuICAgICAgZGVlcExvYyA9IGRlZXBMb2Nba2V5XTtcbiAgICB9KTtcbiAgfTtcblxuICB2YWxpZGF0ZU11dGF0aW9uID0gZnVuY3Rpb24gdmFsaWRhdGVNdXRhdGlvbihvcHRpbWlzdGljUmVzcG9uc2UsIG11dGF0aW9uLCB2YXJpYWJsZXMpIHtcbiAgICB2YXIgb3BlcmF0aW9uTmFtZSA9IG11dGF0aW9uLm9wZXJhdGlvbi5uYW1lO1xuICAgIHZhciBjb250ZXh0ID0ge1xuICAgICAgcGF0aDogJ1JPT1QnLFxuICAgICAgdmlzaXRlZFBhdGhzOiBuZXcgU2V0KCksXG4gICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyB8fCB7fSxcbiAgICAgIG1pc3NpbmdEaWZmOiB7fSxcbiAgICAgIGV4dHJhRGlmZjoge30sXG4gICAgICBtb2R1bGVJbXBvcnRQYXRoczogbmV3IFNldCgpXG4gICAgfTtcbiAgICB2YWxpZGF0ZVNlbGVjdGlvbnMob3B0aW1pc3RpY1Jlc3BvbnNlLCBtdXRhdGlvbi5vcGVyYXRpb24uc2VsZWN0aW9ucywgY29udGV4dCk7XG4gICAgdmFsaWRhdGVPcHRpbWlzdGljUmVzcG9uc2Uob3B0aW1pc3RpY1Jlc3BvbnNlLCBjb250ZXh0KTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNvbnRleHQubWlzc2luZ0RpZmYuUk9PVCA9PSBudWxsLCAnRXhwZWN0ZWQgYG9wdGltaXN0aWNSZXNwb25zZWAgdG8gbWF0Y2ggc3RydWN0dXJlIG9mIHNlcnZlciByZXNwb25zZSBmb3IgbXV0YXRpb24gYCVzYCwgcGxlYXNlIGRlZmluZSBmaWVsZHMgZm9yIGFsbCBvZlxcbiVzJywgb3BlcmF0aW9uTmFtZSwgSlNPTi5zdHJpbmdpZnkoY29udGV4dC5taXNzaW5nRGlmZi5ST09ULCBudWxsLCAyKSkgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjb250ZXh0LmV4dHJhRGlmZi5ST09UID09IG51bGwsICdFeHBlY3RlZCBgb3B0aW1pc3RpY1Jlc3BvbnNlYCB0byBtYXRjaCBzdHJ1Y3R1cmUgb2Ygc2VydmVyIHJlc3BvbnNlIGZvciBtdXRhdGlvbiBgJXNgLCBwbGVhc2UgcmVtb3ZlIGFsbCBmaWVsZHMgb2ZcXG4lcycsIG9wZXJhdGlvbk5hbWUsIEpTT04uc3RyaW5naWZ5KGNvbnRleHQuZXh0cmFEaWZmLlJPT1QsIG51bGwsIDIpKSA6IHZvaWQgMDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGVTZWxlY3Rpb25zID0gZnVuY3Rpb24gdmFsaWRhdGVTZWxlY3Rpb25zKG9wdGltaXN0aWNSZXNwb25zZSwgc2VsZWN0aW9ucywgY29udGV4dCkge1xuICAgIHNlbGVjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gdmFsaWRhdGVTZWxlY3Rpb24ob3B0aW1pc3RpY1Jlc3BvbnNlLCBzZWxlY3Rpb24sIGNvbnRleHQpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZVNlbGVjdGlvbiA9IGZ1bmN0aW9uIHZhbGlkYXRlU2VsZWN0aW9uKG9wdGltaXN0aWNSZXNwb25zZSwgc2VsZWN0aW9uLCBjb250ZXh0KSB7XG4gICAgc3dpdGNoIChzZWxlY3Rpb24ua2luZCkge1xuICAgICAgY2FzZSBDT05ESVRJT046XG4gICAgICAgIHZhbGlkYXRlU2VsZWN0aW9ucyhvcHRpbWlzdGljUmVzcG9uc2UsIHNlbGVjdGlvbi5zZWxlY3Rpb25zLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjYXNlIENMSUVOVF9DT01QT05FTlQ6XG4gICAgICBjYXNlIEZSQUdNRU5UX1NQUkVBRDpcbiAgICAgICAgdmFsaWRhdGVTZWxlY3Rpb25zKG9wdGltaXN0aWNSZXNwb25zZSwgc2VsZWN0aW9uLmZyYWdtZW50LnNlbGVjdGlvbnMsIGNvbnRleHQpO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgU0NBTEFSX0ZJRUxEOlxuICAgICAgY2FzZSBMSU5LRURfRklFTEQ6XG4gICAgICBjYXNlIEZMSUdIVF9GSUVMRDpcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlRmllbGQob3B0aW1pc3RpY1Jlc3BvbnNlLCBzZWxlY3Rpb24sIGNvbnRleHQpO1xuXG4gICAgICBjYXNlIElOTElORV9GUkFHTUVOVDpcbiAgICAgICAgdmFyIHR5cGUgPSBzZWxlY3Rpb24udHlwZTtcbiAgICAgICAgdmFyIGlzQ29uY3JldGVUeXBlID0gc2VsZWN0aW9uLmFic3RyYWN0S2V5ID09IG51bGw7XG4gICAgICAgIHNlbGVjdGlvbi5zZWxlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1YnNlbGVjdGlvbikge1xuICAgICAgICAgIGlmIChpc0NvbmNyZXRlVHlwZSAmJiBvcHRpbWlzdGljUmVzcG9uc2UuX190eXBlbmFtZSAhPT0gdHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhbGlkYXRlU2VsZWN0aW9uKG9wdGltaXN0aWNSZXNwb25zZSwgc3Vic2VsZWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBDTElFTlRfRVhURU5TSU9OOlxuICAgICAgICBzZWxlY3Rpb24uc2VsZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzdWJzZWxlY3Rpb24pIHtcbiAgICAgICAgICB2YWxpZGF0ZVNlbGVjdGlvbihvcHRpbWlzdGljUmVzcG9uc2UsIHN1YnNlbGVjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgTU9EVUxFX0lNUE9SVDpcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlTW9kdWxlSW1wb3J0KGNvbnRleHQpO1xuXG4gICAgICBjYXNlIExJTktFRF9IQU5ETEU6XG4gICAgICBjYXNlIFNDQUxBUl9IQU5ETEU6XG4gICAgICBjYXNlIERFRkVSOlxuICAgICAgY2FzZSBTVFJFQU06XG4gICAgICBjYXNlIFRZUEVfRElTQ1JJTUlOQVRPUjpcbiAgICAgICAge1xuICAgICAgICAgIC8vIFRPRE8oVDM1ODY0MjkyKSAtIEFkZCBtaXNzaW5nIHZhbGlkYXRpb25zIGZvciB0aGVzZSB0eXBlc1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzZWxlY3Rpb247XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlTW9kdWxlSW1wb3J0ID0gZnVuY3Rpb24gdmFsaWRhdGVNb2R1bGVJbXBvcnQoY29udGV4dCkge1xuICAgIGNvbnRleHQubW9kdWxlSW1wb3J0UGF0aHMuYWRkKGNvbnRleHQucGF0aCk7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlRmllbGQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZpZWxkKG9wdGltaXN0aWNSZXNwb25zZSwgZmllbGQsIGNvbnRleHQpIHtcbiAgICB2YXIgZmllbGROYW1lID0gZmllbGQuYWxpYXMgfHwgZmllbGQubmFtZTtcbiAgICB2YXIgcGF0aCA9IFwiXCIuY29uY2F0KGNvbnRleHQucGF0aCwgXCIuXCIpLmNvbmNhdChmaWVsZE5hbWUpO1xuICAgIGNvbnRleHQudmlzaXRlZFBhdGhzLmFkZChwYXRoKTtcblxuICAgIHN3aXRjaCAoZmllbGQua2luZCkge1xuICAgICAgY2FzZSBTQ0FMQVJfRklFTEQ6XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGltaXN0aWNSZXNwb25zZSwgZmllbGROYW1lKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBhZGRGaWVsZFRvRGlmZihwYXRoLCBjb250ZXh0Lm1pc3NpbmdEaWZmLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcblxuICAgICAgY2FzZSBMSU5LRURfRklFTEQ6XG4gICAgICAgIHZhciBzZWxlY3Rpb25zID0gZmllbGQuc2VsZWN0aW9ucztcblxuICAgICAgICBpZiAob3B0aW1pc3RpY1Jlc3BvbnNlW2ZpZWxkTmFtZV0gPT09IG51bGwgfHwgaGFzT3duUHJvcGVydHkuY2FsbChvcHRpbWlzdGljUmVzcG9uc2UsIGZpZWxkTmFtZSkgJiYgb3B0aW1pc3RpY1Jlc3BvbnNlW2ZpZWxkTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWVsZC5wbHVyYWwpIHtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpbWlzdGljUmVzcG9uc2VbZmllbGROYW1lXSkpIHtcbiAgICAgICAgICAgIG9wdGltaXN0aWNSZXNwb25zZVtmaWVsZE5hbWVdLmZvckVhY2goZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgICAgaWYgKHIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVNlbGVjdGlvbnMociwgc2VsZWN0aW9ucywgKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIGNvbnRleHQpLCB7fSwge1xuICAgICAgICAgICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZEZpZWxkVG9EaWZmKHBhdGgsIGNvbnRleHQubWlzc2luZ0RpZmYpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAob3B0aW1pc3RpY1Jlc3BvbnNlW2ZpZWxkTmFtZV0gaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlU2VsZWN0aW9ucyhvcHRpbWlzdGljUmVzcG9uc2VbZmllbGROYW1lXSwgc2VsZWN0aW9ucywgKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIGNvbnRleHQpLCB7fSwge1xuICAgICAgICAgICAgICBwYXRoOiBwYXRoXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZEZpZWxkVG9EaWZmKHBhdGgsIGNvbnRleHQubWlzc2luZ0RpZmYpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEZMSUdIVF9GSUVMRDpcbiAgICAgICAgaWYgKG9wdGltaXN0aWNSZXNwb25zZVtmaWVsZE5hbWVdID09PSBudWxsIHx8IGhhc093blByb3BlcnR5LmNhbGwob3B0aW1pc3RpY1Jlc3BvbnNlLCBmaWVsZE5hbWUpICYmIG9wdGltaXN0aWNSZXNwb25zZVtmaWVsZE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZhbGlkYXRlTXV0YXRpb246IEZsaWdodCBmaWVsZHMgYXJlIG5vdCBjb21wYXRpYmxlIHdpdGggJyArICdvcHRpbWlzdGljIHVwZGF0ZXMsIGFzIFJlYWN0IGRvZXMgbm90IGhhdmUgdGhlIGNvbXBvbmVudCBjb2RlICcgKyAnbmVjZXNzYXJ5IHRvIHByb2Nlc3MgbmV3IGRhdGEgb24gdGhlIGNsaWVudC4gSW5zdGVhZCwgeW91ICcgKyAnc2hvdWxkIHVwZGF0ZSB5b3VyIGNvZGUgdG8gcmVxdWlyZSBhIGZ1bGwgcmVmZXRjaCBvZiB0aGUgRmxpZ2h0ICcgKyAnZmllbGQgc28geW91ciBVSSBjYW4gYmUgdXBkYXRlZC4nKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlT3B0aW1pc3RpY1Jlc3BvbnNlID0gZnVuY3Rpb24gdmFsaWRhdGVPcHRpbWlzdGljUmVzcG9uc2Uob3B0aW1pc3RpY1Jlc3BvbnNlLCBjb250ZXh0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW1pc3RpY1Jlc3BvbnNlKSkge1xuICAgICAgb3B0aW1pc3RpY1Jlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgaWYgKHIgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICB2YWxpZGF0ZU9wdGltaXN0aWNSZXNwb25zZShyLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMob3B0aW1pc3RpY1Jlc3BvbnNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9wdGltaXN0aWNSZXNwb25zZVtrZXldO1xuICAgICAgdmFyIHBhdGggPSBcIlwiLmNvbmNhdChjb250ZXh0LnBhdGgsIFwiLlwiKS5jb25jYXQoa2V5KTsgLy8gaWYgaXQncyBhIG1vZHVsZSBpbXBvcnQgcGF0aCB3ZSBkb24ndCBoYXZlIGFuIGFzdCBzbyB3ZSBjYW5ub3QgdmFsaWRhdGUgaXRcblxuICAgICAgaWYgKGNvbnRleHQubW9kdWxlSW1wb3J0UGF0aHMuaGFzKHBhdGgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjb250ZXh0LnZpc2l0ZWRQYXRocy5oYXMocGF0aCkpIHtcbiAgICAgICAgYWRkRmllbGRUb0RpZmYocGF0aCwgY29udGV4dC5leHRyYURpZmYpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICB2YWxpZGF0ZU9wdGltaXN0aWNSZXNwb25zZSh2YWx1ZSwgKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIGNvbnRleHQpLCB7fSwge1xuICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZhbGlkYXRlTXV0YXRpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWxheU9ic2VydmFibGUgPSByZXF1aXJlKCcuL1JlbGF5T2JzZXJ2YWJsZScpO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgRmV0Y2hGdW5jdGlvbiBpbnRvIGFuIEV4ZWN1dGVGdW5jdGlvbiBmb3IgdXNlIGJ5IFJlbGF5TmV0d29yay5cbiAqL1xuZnVuY3Rpb24gY29udmVydEZldGNoKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmZXRjaChyZXF1ZXN0LCB2YXJpYWJsZXMsIGNhY2hlQ29uZmlnLCB1cGxvYWRhYmxlcywgbG9nUmVxdWVzdEluZm8pIHtcbiAgICB2YXIgcmVzdWx0ID0gZm4ocmVxdWVzdCwgdmFyaWFibGVzLCBjYWNoZUNvbmZpZywgdXBsb2FkYWJsZXMsIGxvZ1JlcXVlc3RJbmZvKTsgLy8gTm90ZTogV2UgYWxsb3cgRmV0Y2hGdW5jdGlvbiB0byBkaXJlY3RseSByZXR1cm4gRXJyb3IgdG8gaW5kaWNhdGVcbiAgICAvLyBhIGZhaWx1cmUgdG8gZmV0Y2guIFRvIGF2b2lkIGhhbmRsaW5nIHRoaXMgc3BlY2lhbCBjYXNlIHRocm91Z2hvdXQgdGhlXG4gICAgLy8gUmVsYXkgY29kZWJhc2UsIGl0IGlzIGV4cGxpY2l0bHkgaGFuZGxlZCBoZXJlLlxuXG4gICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICByZXR1cm4gUmVsYXlPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgICAgICByZXR1cm4gc2luay5lcnJvcihyZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlbGF5T2JzZXJ2YWJsZS5mcm9tKHJlc3VsdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjb252ZXJ0RmV0Y2g6IGNvbnZlcnRGZXRjaFxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL0NvbnZlcnRUb0V4ZWN1dGVGdW5jdGlvbicpLFxuICAgIGNvbnZlcnRGZXRjaCA9IF9yZXF1aXJlLmNvbnZlcnRGZXRjaDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSBgTmV0d29ya2AgaW50ZXJmYWNlIGRlZmluZWQgaW5cbiAqIGBSZWxheU5ldHdvcmtUeXBlc2AgZ2l2ZW4gYGZldGNoYCBhbmQgYHN1YnNjcmliZWAgZnVuY3Rpb25zLlxuICovXG5mdW5jdGlvbiBjcmVhdGUoZmV0Y2hGbiwgc3Vic2NyaWJlKSB7XG4gIC8vIENvbnZlcnQgdG8gZnVuY3Rpb25zIHRoYXQgcmV0dXJucyBSZWxheU9ic2VydmFibGUuXG4gIHZhciBvYnNlcnZlRmV0Y2ggPSBjb252ZXJ0RmV0Y2goZmV0Y2hGbik7XG5cbiAgZnVuY3Rpb24gZXhlY3V0ZShyZXF1ZXN0LCB2YXJpYWJsZXMsIGNhY2hlQ29uZmlnLCB1cGxvYWRhYmxlcywgbG9nUmVxdWVzdEluZm8pIHtcbiAgICBpZiAocmVxdWVzdC5vcGVyYXRpb25LaW5kID09PSAnc3Vic2NyaXB0aW9uJykge1xuICAgICAgIXN1YnNjcmliZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TmV0d29yazogVGhpcyBuZXR3b3JrIGxheWVyIGRvZXMgbm90IHN1cHBvcnQgU3Vic2NyaXB0aW9ucy4gJyArICdUbyB1c2UgU3Vic2NyaXB0aW9ucywgcHJvdmlkZSBhIGN1c3RvbSBuZXR3b3JrIGxheWVyLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICEhdXBsb2FkYWJsZXMgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU5ldHdvcms6IENhbm5vdCBwcm92aWRlIHVwbG9hZGFibGVzIHdoaWxlIHN1YnNjcmliaW5nLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBzdWJzY3JpYmUocmVxdWVzdCwgdmFyaWFibGVzLCBjYWNoZUNvbmZpZyk7XG4gICAgfVxuXG4gICAgdmFyIHBvbGxJbnRlcnZhbCA9IGNhY2hlQ29uZmlnLnBvbGw7XG5cbiAgICBpZiAocG9sbEludGVydmFsICE9IG51bGwpIHtcbiAgICAgICEhdXBsb2FkYWJsZXMgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU5ldHdvcms6IENhbm5vdCBwcm92aWRlIHVwbG9hZGFibGVzIHdoaWxlIHBvbGxpbmcuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIG9ic2VydmVGZXRjaChyZXF1ZXN0LCB2YXJpYWJsZXMsIHtcbiAgICAgICAgZm9yY2U6IHRydWVcbiAgICAgIH0pLnBvbGwocG9sbEludGVydmFsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JzZXJ2ZUZldGNoKHJlcXVlc3QsIHZhcmlhYmxlcywgY2FjaGVDb25maWcsIHVwbG9hZGFibGVzLCBsb2dSZXF1ZXN0SW5mbyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4ZWN1dGU6IGV4ZWN1dGVcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogY3JlYXRlXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNQcm9taXNlID0gcmVxdWlyZSgnLi4vdXRpbC9pc1Byb21pc2UnKTtcbi8qKlxuICogQSBTdWJzY3JpcHRpb24gb2JqZWN0IGlzIHJldHVybmVkIGZyb20gLnN1YnNjcmliZSgpLCB3aGljaCBjYW4gYmVcbiAqIHVuc3Vic2NyaWJlZCBvciBjaGVja2VkIHRvIHNlZSBpZiB0aGUgcmVzdWx0aW5nIHN1YnNjcmlwdGlvbiBoYXMgY2xvc2VkLlxuICovXG5cblxudmFyIGhvc3RSZXBvcnRFcnJvciA9IHN3YWxsb3dFcnJvcjtcbi8qKlxuICogTGltaXRlZCBpbXBsZW1lbnRhdGlvbiBvZiBFU09ic2VydmFibGUsIHByb3ZpZGluZyB0aGUgbGltaXRlZCBzZXQgb2YgYmVoYXZpb3JcbiAqIFJlbGF5IG5ldHdvcmtpbmcgcmVxdWlyZXMuXG4gKlxuICogT2JzZXJ2YWJsZXMgcmV0YWluIHRoZSBiZW5lZml0IG9mIGNhbGxiYWNrcyB3aGljaCBjYW4gYmUgY2FsbGVkXG4gKiBzeW5jaHJvbm91c2x5LCBhdm9pZGluZyBhbnkgVUkgaml0dGVyLCB3aGlsZSBwcm92aWRpbmcgYSBjb21wb3NpdGlvbmFsIEFQSSxcbiAqIHdoaWNoIHNpbXBsaWZpZXMgbG9naWMgYW5kIHByZXZlbnRzIG1pc2hhbmRsaW5nIG9mIGVycm9ycyBjb21wYXJlZCB0b1xuICogdGhlIGRpcmVjdCB1c2Ugb2YgY2FsbGJhY2sgZnVuY3Rpb25zLlxuICpcbiAqIEVTT2JzZXJ2YWJsZTogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICovXG5cbnZhciBSZWxheU9ic2VydmFibGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBSZWxheU9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHNvdXJjZSkge1xuICAgIHJldHVybiBuZXcgUmVsYXlPYnNlcnZhYmxlKHNvdXJjZSk7XG4gIH0gLy8gVXNlIFJlbGF5T2JzZXJ2YWJsZS5jcmVhdGUoKVxuICA7XG5cbiAgZnVuY3Rpb24gUmVsYXlPYnNlcnZhYmxlKHNvdXJjZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIC8vIEVhcmx5IHJ1bnRpbWUgZXJyb3JzIGZvciBpbGwtZm9ybWVkIHNvdXJjZXMuXG4gICAgICBpZiAoIXNvdXJjZSB8fCB0eXBlb2Ygc291cmNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU291cmNlIG11c3QgYmUgYSBGdW5jdGlvbjogJyArIFN0cmluZyhzb3VyY2UpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gIH1cbiAgLyoqXG4gICAqIFdoZW4gYW4gZW1pdHRlZCBlcnJvciBldmVudCBpcyBub3QgaGFuZGxlZCBieSBhbiBPYnNlcnZlciwgaXQgaXMgcmVwb3J0ZWRcbiAgICogdG8gdGhlIGhvc3QgZW52aXJvbm1lbnQgKHdoYXQgdGhlIEVTT2JzZXJ2YWJsZSBzcGVjIHJlZmVycyB0byBhc1xuICAgKiBcIkhvc3RSZXBvcnRFcnJvcnMoKVwiKS5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gaW4gZGV2ZWxvcG1lbnQgcmV0aHJvd3MgdGhyb3duIGVycm9ycywgYW5kXG4gICAqIGxvZ3MgZW1pdHRlZCBlcnJvciBldmVudHMgdG8gdGhlIGNvbnNvbGUsIHdoaWxlIGluIHByb2R1Y3Rpb24gZG9lcyBub3RoaW5nXG4gICAqIChzd2FsbG93aW5nIHVuaGFuZGxlZCBlcnJvcnMpLlxuICAgKlxuICAgKiBDYWxsZWQgZHVyaW5nIGFwcGxpY2F0aW9uIGluaXRpYWxpemF0aW9uLCB0aGlzIG1ldGhvZCBhbGxvd3NcbiAgICogYXBwbGljYXRpb24tc3BlY2lmaWMgaGFuZGxpbmcgb2YgdW5oYW5kbGVkIGVycm9ycy4gQWxsb3dpbmcsIGZvciBleGFtcGxlLFxuICAgKiBpbnRlZ3JhdGlvbiB3aXRoIGVycm9yIGxvZ2dpbmcgb3IgZGV2ZWxvcGVyIHRvb2xzLlxuICAgKlxuICAgKiBBIHNlY29uZCBwYXJhbWV0ZXIgYGlzVW5jYXVnaHRUaHJvd25FcnJvcmAgaXMgdHJ1ZSB3aGVuIHRoZSB1bmhhbmRsZWQgZXJyb3JcbiAgICogd2FzIHRocm93biB3aXRoaW4gYW4gT2JzZXJ2ZXIgaGFuZGxlciwgYW5kIGZhbHNlIHdoZW4gdGhlIHVuaGFuZGxlZCBlcnJvclxuICAgKiB3YXMgYW4gdW5oYW5kbGVkIGVtaXR0ZWQgZXZlbnQuXG4gICAqXG4gICAqICAtIFVuY2F1Z2h0IHRocm93biBlcnJvcnMgdHlwaWNhbGx5IHJlcHJlc2VudCBhdm9pZGFibGUgZXJyb3JzIHRocm93biBmcm9tXG4gICAqICAgIGFwcGxpY2F0aW9uIGNvZGUsIHdoaWNoIHNob3VsZCBiZSBoYW5kbGVkIHdpdGggYSB0cnkvY2F0Y2ggYmxvY2ssIGFuZFxuICAgKiAgICB1c3VhbGx5IGhhdmUgdXNlZnVsIHN0YWNrIHRyYWNlcy5cbiAgICpcbiAgICogIC0gVW5oYW5kbGVkIGVtaXR0ZWQgZXZlbnQgZXJyb3JzIHR5cGljYWxseSByZXByZXNlbnQgdW5hdm9pZGFibGUgZXZlbnRzIGluXG4gICAqICAgIGFwcGxpY2F0aW9uIGZsb3cgc3VjaCBhcyBuZXR3b3JrIGZhaWx1cmUsIGFuZCBtYXkgbm90IGhhdmUgdXNlZnVsXG4gICAqICAgIHN0YWNrIHRyYWNlcy5cbiAgICovXG5cblxuICBSZWxheU9ic2VydmFibGUub25VbmhhbmRsZWRFcnJvciA9IGZ1bmN0aW9uIG9uVW5oYW5kbGVkRXJyb3IoY2FsbGJhY2spIHtcbiAgICBob3N0UmVwb3J0RXJyb3IgPSBjYWxsYmFjaztcbiAgfVxuICAvKipcbiAgICogQWNjZXB0cyB2YXJpb3VzIGtpbmRzIG9mIGRhdGEgc291cmNlcywgYW5kIGFsd2F5cyByZXR1cm5zIGEgUmVsYXlPYnNlcnZhYmxlXG4gICAqIHVzZWZ1bCBmb3IgYWNjZXB0aW5nIHRoZSByZXN1bHQgb2YgYSB1c2VyLXByb3ZpZGVkIEZldGNoRnVuY3Rpb24uXG4gICAqL1xuICA7XG5cbiAgUmVsYXlPYnNlcnZhYmxlLmZyb20gPSBmdW5jdGlvbiBmcm9tKG9iaikge1xuICAgIHJldHVybiBpc09ic2VydmFibGUob2JqKSA/IGZyb21PYnNlcnZhYmxlKG9iaikgOiBpc1Byb21pc2Uob2JqKSA/IGZyb21Qcm9taXNlKG9iaikgOiBmcm9tVmFsdWUob2JqKTtcbiAgfVxuICAvKipcbiAgICogU2ltaWxhciB0byBwcm9taXNlLmNhdGNoKCksIG9ic2VydmFibGUuY2F0Y2goKSBoYW5kbGVzIGVycm9yIGV2ZW50cywgYW5kXG4gICAqIHByb3ZpZGVzIGFuIGFsdGVybmF0aXZlIG9ic2VydmFibGUgdG8gdXNlIGluIGl0J3MgcGxhY2UuXG4gICAqXG4gICAqIElmIHRoZSBjYXRjaCBoYW5kbGVyIHRocm93cyBhIG5ldyBlcnJvciwgaXQgd2lsbCBhcHBlYXIgYXMgYW4gZXJyb3IgZXZlbnRcbiAgICogb24gdGhlIHJlc3VsdGluZyBPYnNlcnZhYmxlLlxuICAgKi9cbiAgO1xuXG4gIHZhciBfcHJvdG8gPSBSZWxheU9ic2VydmFibGUucHJvdG90eXBlO1xuXG4gIF9wcm90b1tcImNhdGNoXCJdID0gZnVuY3Rpb24gX2NhdGNoKGZuKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWxheU9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uO1xuXG4gICAgICBfdGhpcy5zdWJzY3JpYmUoe1xuICAgICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoc3ViKSB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gc3ViO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0OiBzaW5rLm5leHQsXG4gICAgICAgIGNvbXBsZXRlOiBzaW5rLmNvbXBsZXRlLFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoX2Vycm9yMikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbihfZXJyb3IyKS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoc3ViKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gc3ViO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBuZXh0OiBzaW5rLm5leHQsXG4gICAgICAgICAgICAgIGNvbXBsZXRlOiBzaW5rLmNvbXBsZXRlLFxuICAgICAgICAgICAgICBlcnJvcjogc2luay5lcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IyKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycm9yMiwgdHJ1ZVxuICAgICAgICAgICAgLyogaXNVbmNhdWdodFRocm93bkVycm9yICovXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgT2JzZXJ2YWJsZSB3aGljaCBmaXJzdCB5aWVsZHMgdmFsdWVzIGZyb20gdGhpcyBPYnNlcnZhYmxlLFxuICAgKiB0aGVuIHlpZWxkcyB2YWx1ZXMgZnJvbSB0aGUgbmV4dCBPYnNlcnZhYmxlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgY2hhaW5pbmdcbiAgICogdG9nZXRoZXIgT2JzZXJ2YWJsZXMgb2YgZmluaXRlIGxlbmd0aC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0KG5leHQpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHJldHVybiBSZWxheU9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICB2YXIgY3VycmVudDtcblxuICAgICAgX3RoaXMyLnN1YnNjcmliZSh7XG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICBjdXJyZW50ID0gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0OiBzaW5rLm5leHQsXG4gICAgICAgIGVycm9yOiBzaW5rLmVycm9yLFxuICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgY3VycmVudCA9IG5leHQuc3Vic2NyaWJlKHNpbmspO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY3VycmVudCAmJiBjdXJyZW50LnVuc3Vic2NyaWJlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IE9ic2VydmFibGUgd2hpY2ggcmV0dXJucyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhpcyBvbmUsIGJ1dFxuICAgKiBtb2RpZmllZCBzbyB0aGF0IHRoZSBwcm92aWRlZCBPYnNlcnZlciBpcyBjYWxsZWQgdG8gcGVyZm9ybSBhIHNpZGUtZWZmZWN0c1xuICAgKiBmb3IgYWxsIGV2ZW50cyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UuXG4gICAqXG4gICAqIEFueSBlcnJvcnMgdGhhdCBhcmUgdGhyb3duIGluIHRoZSBzaWRlLWVmZmVjdCBPYnNlcnZlciBhcmUgdW5oYW5kbGVkLCBhbmRcbiAgICogZG8gbm90IGFmZmVjdCB0aGUgc291cmNlIE9ic2VydmFibGUgb3IgaXRzIE9ic2VydmVyLlxuICAgKlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBmb3Igd2hlbiBkZWJ1Z2dpbmcgeW91ciBPYnNlcnZhYmxlcyBvciBwZXJmb3JtaW5nIG90aGVyXG4gICAqIHNpZGUtZWZmZWN0cyBzdWNoIGFzIGxvZ2dpbmcgb3IgcGVyZm9ybWFuY2UgbW9uaXRvcmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG9bXCJkb1wiXSA9IGZ1bmN0aW9uIF9kbyhvYnNlcnZlcikge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlbGF5T2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgIHZhciBib3RoID0gZnVuY3Rpb24gYm90aChhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgb2JzZXJ2ZXJbYWN0aW9uXSAmJiBvYnNlcnZlclthY3Rpb25dLmFwcGx5KG9ic2VydmVyLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyb3IsIHRydWVcbiAgICAgICAgICAgIC8qIGlzVW5jYXVnaHRUaHJvd25FcnJvciAqL1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzaW5rW2FjdGlvbl0gJiYgc2lua1thY3Rpb25dLmFwcGx5KHNpbmssIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMzLnN1YnNjcmliZSh7XG4gICAgICAgIHN0YXJ0OiBib3RoKCdzdGFydCcpLFxuICAgICAgICBuZXh0OiBib3RoKCduZXh0JyksXG4gICAgICAgIGVycm9yOiBib3RoKCdlcnJvcicpLFxuICAgICAgICBjb21wbGV0ZTogYm90aCgnY29tcGxldGUnKSxcbiAgICAgICAgdW5zdWJzY3JpYmU6IGJvdGgoJ3Vuc3Vic2NyaWJlJylcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IE9ic2VydmFibGUgd2hpY2ggcmV0dXJucyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhpcyBvbmUsIGJ1dFxuICAgKiBtb2RpZmllZCBzbyB0aGF0IHRoZSBmaW5hbGx5IGNhbGxiYWNrIGlzIHBlcmZvcm1lZCBhZnRlciBjb21wbGV0aW9uLFxuICAgKiB3aGV0aGVyIG5vcm1hbCBvciBkdWUgdG8gZXJyb3Igb3IgdW5zdWJzY3JpcHRpb24uXG4gICAqXG4gICAqIFRoaXMgaXMgdXNlZnVsIGZvciBjbGVhbnVwIHN1Y2ggYXMgcmVzb3VyY2UgZmluYWxpemF0aW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90b1tcImZpbmFsbHlcIl0gPSBmdW5jdGlvbiBfZmluYWxseShmbikge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlbGF5T2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBfdGhpczQuc3Vic2NyaWJlKHNpbmspO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgT2JzZXJ2YWJsZSB3aGljaCBpcyBpZGVudGljYWwgdG8gdGhpcyBvbmUsIHVubGVzcyB0aGlzXG4gICAqIE9ic2VydmFibGUgY29tcGxldGVzIGJlZm9yZSB5aWVsZGluZyBhbnkgdmFsdWVzLCBpbiB3aGljaCBjYXNlIHRoZSBuZXdcbiAgICogT2JzZXJ2YWJsZSB3aWxsIHlpZWxkIHRoZSB2YWx1ZXMgZnJvbSB0aGUgYWx0ZXJuYXRlIE9ic2VydmFibGUuXG4gICAqXG4gICAqIElmIHRoaXMgT2JzZXJ2YWJsZSBkb2VzIHlpZWxkIHZhbHVlcywgdGhlIGFsdGVybmF0ZSBpcyBuZXZlciBzdWJzY3JpYmVkIHRvLlxuICAgKlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBmb3Igc2NlbmFyaW9zIHdoZXJlIHZhbHVlcyBtYXkgY29tZSBmcm9tIG11bHRpcGxlIHNvdXJjZXNcbiAgICogd2hpY2ggc2hvdWxkIGJlIHRyaWVkIGluIG9yZGVyLCBpLmUuIGZyb20gYSBjYWNoZSBiZWZvcmUgYSBuZXR3b3JrLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pZkVtcHR5ID0gZnVuY3Rpb24gaWZFbXB0eShhbHRlcm5hdGUpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIHJldHVybiBSZWxheU9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICB2YXIgaGFzVmFsdWUgPSBmYWxzZTtcblxuICAgICAgdmFyIGN1cnJlbnQgPSBfdGhpczUuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICBzaW5rLm5leHQodmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogc2luay5lcnJvcixcbiAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgICAgc2luay5jb21wbGV0ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJyZW50ID0gYWx0ZXJuYXRlLnN1YnNjcmliZShzaW5rKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjdXJyZW50LnVuc3Vic2NyaWJlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBPYnNlcnZhYmxlJ3MgcHJpbWFyeSBBUEk6IHJldHVybnMgYW4gdW5zdWJzY3JpYmFibGUgU3Vic2NyaXB0aW9uIHRvIHRoZVxuICAgKiBzb3VyY2Ugb2YgdGhpcyBPYnNlcnZhYmxlLlxuICAgKlxuICAgKiBOb3RlOiBBIHNpbmsgbWF5IGJlIHBhc3NlZCBkaXJlY3RseSB0byAuc3Vic2NyaWJlKCkgYXMgaXRzIG9ic2VydmVyLFxuICAgKiBhbGxvd2luZyBmb3IgZWFzaWx5IGNvbXBvc2luZyBPYnNlcnZhYmxlcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgLy8gRWFybHkgcnVudGltZSBlcnJvcnMgZm9yIGlsbC1mb3JtZWQgb2JzZXJ2ZXJzLlxuICAgICAgaWYgKCFvYnNlcnZlciB8fCB0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignT2JzZXJ2ZXIgbXVzdCBiZSBhbiBPYmplY3Qgd2l0aCBjYWxsYmFja3M6ICcgKyBTdHJpbmcob2JzZXJ2ZXIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX3N1YnNjcmliZSh0aGlzLl9zb3VyY2UsIG9ic2VydmVyKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBPYnNlcnZlcmFibGUgd2hlcmUgZWFjaCB2YWx1ZSBoYXMgYmVlbiB0cmFuc2Zvcm1lZCBieVxuICAgKiB0aGUgbWFwcGluZyBmdW5jdGlvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubWFwID0gZnVuY3Rpb24gbWFwKGZuKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVsYXlPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF90aGlzNi5zdWJzY3JpYmUoe1xuICAgICAgICBjb21wbGV0ZTogc2luay5jb21wbGV0ZSxcbiAgICAgICAgZXJyb3I6IHNpbmsuZXJyb3IsXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQodmFsdWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIG1hcFZhbHVlID0gZm4odmFsdWUpO1xuICAgICAgICAgICAgc2luay5uZXh0KG1hcFZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgc2luay5lcnJvcihlcnJvciwgdHJ1ZVxuICAgICAgICAgICAgLyogaXNVbmNhdWdodFRocm93bkVycm9yICovXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBPYnNlcnZhYmxlIHdoZXJlIGVhY2ggdmFsdWUgaXMgcmVwbGFjZWQgd2l0aCBhIG5ldyBPYnNlcnZhYmxlXG4gICAqIGJ5IHRoZSBtYXBwaW5nIGZ1bmN0aW9uLCB0aGUgcmVzdWx0cyBvZiB3aGljaCByZXR1cm5lZCBhcyBhIHNpbmdsZVxuICAgKiBtZXJnZWQgT2JzZXJ2YWJsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubWVyZ2VNYXAgPSBmdW5jdGlvbiBtZXJnZU1hcChmbikge1xuICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlbGF5T2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gW107XG5cbiAgICAgIGZ1bmN0aW9uIHN0YXJ0KHN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLl9zdWIgPSBzdWJzY3JpcHRpb247XG4gICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgc3Vic2NyaXB0aW9ucy5zcGxpY2Uoc3Vic2NyaXB0aW9ucy5pbmRleE9mKHRoaXMuX3N1YiksIDEpO1xuXG4gICAgICAgIGlmIChzdWJzY3JpcHRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHNpbmsuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfdGhpczcuc3Vic2NyaWJlKHtcbiAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghc2luay5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgUmVsYXlPYnNlcnZhYmxlLmZyb20oZm4odmFsdWUpKS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgICAgICBuZXh0OiBzaW5rLm5leHQsXG4gICAgICAgICAgICAgICAgZXJyb3I6IHNpbmsuZXJyb3IsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycm9yLCB0cnVlXG4gICAgICAgICAgICAvKiBpc1VuY2F1Z2h0VGhyb3duRXJyb3IgKi9cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogc2luay5lcnJvcixcbiAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHtcbiAgICAgICAgICByZXR1cm4gc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzdWJzY3JpcHRpb25zLmxlbmd0aCA9IDA7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IE9ic2VydmFibGUgd2hpY2ggZmlyc3QgbWlycm9ycyB0aGlzIE9ic2VydmFibGUsIHRoZW4gd2hlbiBpdFxuICAgKiBjb21wbGV0ZXMsIHdhaXRzIGZvciBgcG9sbEludGVydmFsYCBtaWxsaXNlY29uZHMgYmVmb3JlIHJlLXN1YnNjcmliaW5nIHRvXG4gICAqIHRoaXMgT2JzZXJ2YWJsZSBhZ2FpbiwgbG9vcGluZyBpbiB0aGlzIG1hbm5lciB1bnRpbCB1bnN1YnNjcmliZWQuXG4gICAqXG4gICAqIFRoZSByZXR1cm5lZCBPYnNlcnZhYmxlIG5ldmVyIGNvbXBsZXRlcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucG9sbCA9IGZ1bmN0aW9uIHBvbGwocG9sbEludGVydmFsKSB7XG4gICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAodHlwZW9mIHBvbGxJbnRlcnZhbCAhPT0gJ251bWJlcicgfHwgcG9sbEludGVydmFsIDw9IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWxheU9ic2VydmFibGU6IEV4cGVjdGVkIHBvbGxJbnRlcnZhbCB0byBiZSBwb3NpdGl2ZSwgZ290OiAnICsgcG9sbEludGVydmFsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUmVsYXlPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbjtcbiAgICAgIHZhciB0aW1lb3V0O1xuXG4gICAgICB2YXIgcG9sbCA9IGZ1bmN0aW9uIHBvbGwoKSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbiA9IF90aGlzOC5zdWJzY3JpYmUoe1xuICAgICAgICAgIG5leHQ6IHNpbmsubmV4dCxcbiAgICAgICAgICBlcnJvcjogc2luay5lcnJvcixcbiAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChwb2xsLCBwb2xsSW50ZXJ2YWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBwb2xsKCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIFByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgd2hlbiB0aGlzIE9ic2VydmFibGUgeWllbGRzIGEgZmlyc3QgdmFsdWVcbiAgICogb3Igd2hlbiBpdCBjb21wbGV0ZXMgd2l0aCBubyB2YWx1ZS5cbiAgICpcbiAgICogTk9URTogVGhlIHNvdXJjZSBPYnNlcnZhYmxlIGlzICpOT1QqIGNhbmNlbGVkIHdoZW4gdGhlIHJldHVybmVkIFByb21pc2VcbiAgICogcmVzb2x2ZXMuIFRoZSBPYnNlcnZhYmxlIGlzIGFsd2F5cyBydW4gdG8gY29tcGxldGlvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9Qcm9taXNlID0gZnVuY3Rpb24gdG9Qcm9taXNlKCkge1xuICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZXNvbHZlZCA9IGZhbHNlO1xuXG4gICAgICBfdGhpczkuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWwpIHtcbiAgICAgICAgICBpZiAoIXJlc29sdmVkKSB7XG4gICAgICAgICAgICByZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgICByZXNvbHZlKHZhbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJlbGF5T2JzZXJ2YWJsZTtcbn0oKTsgLy8gVXNlIGRlY2xhcmF0aW9ucyB0byB0ZWFjaCBGbG93IGhvdyB0byBjaGVjayBpc09ic2VydmFibGUuXG5cblxuZnVuY3Rpb24gaXNPYnNlcnZhYmxlKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmouc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBmcm9tT2JzZXJ2YWJsZShvYmopIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIFJlbGF5T2JzZXJ2YWJsZSA/IG9iaiA6IFJlbGF5T2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICByZXR1cm4gb2JqLnN1YnNjcmliZShzaW5rKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZyb21Qcm9taXNlKHByb21pc2UpIHtcbiAgcmV0dXJuIFJlbGF5T2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICAvLyBTaW5jZSBzaW5rIG1ldGhvZHMgZG8gbm90IHRocm93LCB0aGUgcmVzdWx0aW5nIFByb21pc2UgY2FuIGJlIGlnbm9yZWQuXG4gICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgc2luay5uZXh0KHZhbHVlKTtcbiAgICAgIHNpbmsuY29tcGxldGUoKTtcbiAgICB9LCBzaW5rLmVycm9yKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZyb21WYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gUmVsYXlPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgIHNpbmsubmV4dCh2YWx1ZSk7XG4gICAgc2luay5jb21wbGV0ZSgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gX3N1YnNjcmliZShzb3VyY2UsIG9ic2VydmVyKSB7XG4gIHZhciBjbG9zZWQgPSBmYWxzZTtcbiAgdmFyIGNsZWFudXA7IC8vIElkZWFsbHkgd2Ugd291bGQgc2ltcGx5IGRlc2NyaWJlIGEgYGdldCBjbG9zZWQoKWAgbWV0aG9kIG9uIHRoZSBTaW5rIGFuZFxuICAvLyBTdWJzY3JpcHRpb24gb2JqZWN0cyBiZWxvdywgaG93ZXZlciBub3QgYWxsIGZsb3cgZW52aXJvbm1lbnRzIHdlIGV4cGVjdFxuICAvLyBSZWxheSB0byBiZSB1c2VkIHdpdGhpbiB3aWxsIHN1cHBvcnQgcHJvcGVydHkgZ2V0dGVycywgYW5kIG1hbnkgbWluaWZpZXJcbiAgLy8gdG9vbHMgc3RpbGwgZG8gbm90IHN1cHBvcnQgRVM1IHN5bnRheC4gSW5zdGVhZCwgd2UgY2FuIHVzZSBkZWZpbmVQcm9wZXJ0eS5cblxuICB2YXIgd2l0aENsb3NlZCA9IGZ1bmN0aW9uIHdpdGhDbG9zZWQob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosICdjbG9zZWQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIGNsb3NlZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBkb0NsZWFudXAoKSB7XG4gICAgaWYgKGNsZWFudXApIHtcbiAgICAgIGlmIChjbGVhbnVwLnVuc3Vic2NyaWJlKSB7XG4gICAgICAgIGNsZWFudXAudW5zdWJzY3JpYmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnJvciwgdHJ1ZVxuICAgICAgICAgIC8qIGlzVW5jYXVnaHRUaHJvd25FcnJvciAqL1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2xlYW51cCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gLy8gQ3JlYXRlIGEgU3Vic2NyaXB0aW9uLlxuXG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHdpdGhDbG9zZWQoe1xuICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghY2xvc2VkKSB7XG4gICAgICAgIGNsb3NlZCA9IHRydWU7IC8vIFRlbGwgT2JzZXJ2ZXIgdGhhdCB1bnN1YnNjcmliZSB3YXMgY2FsbGVkLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgb2JzZXJ2ZXIudW5zdWJzY3JpYmUgJiYgb2JzZXJ2ZXIudW5zdWJzY3JpYmUoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyb3IsIHRydWVcbiAgICAgICAgICAvKiBpc1VuY2F1Z2h0VGhyb3duRXJyb3IgKi9cbiAgICAgICAgICApO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGRvQ2xlYW51cCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTsgLy8gVGVsbCBPYnNlcnZlciB0aGF0IG9ic2VydmF0aW9uIGlzIGFib3V0IHRvIGJlZ2luLlxuXG4gIHRyeSB7XG4gICAgb2JzZXJ2ZXIuc3RhcnQgJiYgb2JzZXJ2ZXIuc3RhcnQoc3Vic2NyaXB0aW9uKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBob3N0UmVwb3J0RXJyb3IoZXJyb3IsIHRydWVcbiAgICAvKiBpc1VuY2F1Z2h0VGhyb3duRXJyb3IgKi9cbiAgICApO1xuICB9IC8vIElmIGNsb3NlZCBhbHJlYWR5LCBkb24ndCBib3RoZXIgY3JlYXRpbmcgYSBTaW5rLlxuXG5cbiAgaWYgKGNsb3NlZCkge1xuICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gIH0gLy8gQ3JlYXRlIGEgU2luayByZXNwZWN0aW5nIHN1YnNjcmlwdGlvbiBzdGF0ZSBhbmQgY2xlYW51cC5cblxuXG4gIHZhciBzaW5rID0gd2l0aENsb3NlZCh7XG4gICAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgICAgaWYgKCFjbG9zZWQgJiYgb2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnJvciwgdHJ1ZVxuICAgICAgICAgIC8qIGlzVW5jYXVnaHRUaHJvd25FcnJvciAqL1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IzLCBpc1VuY2F1Z2h0VGhyb3duRXJyb3IpIHtcbiAgICAgIGlmIChjbG9zZWQgfHwgIW9ic2VydmVyLmVycm9yKSB7XG4gICAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICAgIGhvc3RSZXBvcnRFcnJvcihfZXJyb3IzLCBpc1VuY2F1Z2h0VGhyb3duRXJyb3IgfHwgZmFsc2UpO1xuICAgICAgICBkb0NsZWFudXAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb3NlZCA9IHRydWU7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBvYnNlcnZlci5lcnJvcihfZXJyb3IzKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IyKSB7XG4gICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycm9yMiwgdHJ1ZVxuICAgICAgICAgIC8qIGlzVW5jYXVnaHRUaHJvd25FcnJvciAqL1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgZG9DbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgIGlmICghY2xvc2VkKSB7XG4gICAgICAgIGNsb3NlZCA9IHRydWU7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSAmJiBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnJvciwgdHJ1ZVxuICAgICAgICAgIC8qIGlzVW5jYXVnaHRUaHJvd25FcnJvciAqL1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgZG9DbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBJZiBhbnl0aGluZyBnb2VzIHdyb25nIGR1cmluZyBvYnNlcnZpbmcgdGhlIHNvdXJjZSwgaGFuZGxlIHRoZSBlcnJvci5cblxuICB0cnkge1xuICAgIGNsZWFudXAgPSBzb3VyY2Uoc2luayk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgc2luay5lcnJvcihlcnJvciwgdHJ1ZVxuICAgIC8qIGlzVW5jYXVnaHRUaHJvd25FcnJvciAqL1xuICAgICk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gRWFybHkgcnVudGltZSBlcnJvcnMgZm9yIGlsbC1mb3JtZWQgcmV0dXJuZWQgY2xlYW51cC5cbiAgICBpZiAoY2xlYW51cCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjbGVhbnVwICE9PSAnZnVuY3Rpb24nICYmICghY2xlYW51cCB8fCB0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmV0dXJuZWQgY2xlYW51cCBmdW5jdGlvbiB3aGljaCBjYW5ub3QgYmUgY2FsbGVkOiAnICsgU3RyaW5nKGNsZWFudXApKTtcbiAgICB9XG4gIH0gLy8gSWYgY2xvc2VkIGJlZm9yZSB0aGUgc291cmNlIGZ1bmN0aW9uIGV4aXN0ZWQsIGNsZWFudXAgbm93LlxuXG5cbiAgaWYgKGNsb3NlZCkge1xuICAgIGRvQ2xlYW51cCgpO1xuICB9XG5cbiAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbn1cblxuZnVuY3Rpb24gc3dhbGxvd0Vycm9yKF9lcnJvciwgX2lzVW5jYXVnaHRUaHJvd25FcnJvcikgey8vIGRvIG5vdGhpbmcuXG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgLy8gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBIb3N0UmVwb3J0RXJyb3JzKCkgaW4gZGV2ZWxvcG1lbnQgYnVpbGRzLlxuICAvLyBDYW4gYmUgcmVwbGFjZWQgYnkgdGhlIGhvc3QgYXBwbGljYXRpb24gZW52aXJvbm1lbnQuXG4gIFJlbGF5T2JzZXJ2YWJsZS5vblVuaGFuZGxlZEVycm9yKGZ1bmN0aW9uIChlcnJvciwgaXNVbmNhdWdodFRocm93bkVycm9yKSB7XG4gICAgaWYgKHR5cGVvZiBmYWlsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBJbiB0ZXN0IGVudmlyb25tZW50cyAoSmVzdCksIGZhaWwoKSBpbW1lZGlhdGVseSBmYWlscyB0aGUgY3VycmVudCB0ZXN0LlxuICAgICAgZmFpbChTdHJpbmcoZXJyb3IpKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5jYXVnaHRUaHJvd25FcnJvcikge1xuICAgICAgLy8gUmV0aHJvdyB1bmNhdWdodCB0aHJvd24gZXJyb3JzIG9uIHRoZSBuZXh0IGZyYW1lIHRvIGF2b2lkIGJyZWFraW5nXG4gICAgICAvLyBjdXJyZW50IGxvZ2ljLlxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgbG9nIHRoZSB1bmhhbmRsZWQgZXJyb3IgZm9yIHZpc2liaWxpdHkuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5lcnJvcignUmVsYXlPYnNlcnZhYmxlOiBVbmhhbmRsZWQgRXJyb3InLCBlcnJvcik7XG4gICAgfVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheU9ic2VydmFibGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBzdGFibGVDb3B5ID0gcmVxdWlyZSgnLi4vdXRpbC9zdGFibGVDb3B5Jyk7XG5cbi8qKlxuICogQSBjYWNoZSBmb3Igc3RvcmluZyBxdWVyeSByZXNwb25zZXMsIGZlYXR1cmluZzpcbiAqIC0gYGdldGAgd2l0aCBUVExcbiAqIC0gY2FjaGUgc2l6ZSBsaW1pdGluZywgd2l0aCBsZWFzdC1yZWNlbnRseSAqdXBkYXRlZCogZW50cmllcyBwdXJnZWQgZmlyc3RcbiAqL1xudmFyIFJlbGF5UXVlcnlSZXNwb25zZUNhY2hlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVsYXlRdWVyeVJlc3BvbnNlQ2FjaGUoX3JlZikge1xuICAgIHZhciBzaXplID0gX3JlZi5zaXplLFxuICAgICAgICB0dGwgPSBfcmVmLnR0bDtcbiAgICAhKHNpemUgPiAwKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UXVlcnlSZXNwb25zZUNhY2hlOiBFeHBlY3RlZCB0aGUgbWF4IGNhY2hlIHNpemUgdG8gYmUgPiAwLCBnb3QgJyArICdgJXNgLicsIHNpemUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKHR0bCA+IDApID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlRdWVyeVJlc3BvbnNlQ2FjaGU6IEV4cGVjdGVkIHRoZSBtYXggdHRsIHRvIGJlID4gMCwgZ290IGAlc2AuJywgdHRsKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdGhpcy5fcmVzcG9uc2VzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX3NpemUgPSBzaXplO1xuICAgIHRoaXMuX3R0bCA9IHR0bDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZWxheVF1ZXJ5UmVzcG9uc2VDYWNoZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5fcmVzcG9uc2VzLmNsZWFyKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChxdWVyeUlELCB2YXJpYWJsZXMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGNhY2hlS2V5ID0gZ2V0Q2FjaGVLZXkocXVlcnlJRCwgdmFyaWFibGVzKTtcblxuICAgIHRoaXMuX3Jlc3BvbnNlcy5mb3JFYWNoKGZ1bmN0aW9uIChyZXNwb25zZSwga2V5KSB7XG4gICAgICBpZiAoIWlzQ3VycmVudChyZXNwb25zZS5mZXRjaFRpbWUsIF90aGlzLl90dGwpKSB7XG4gICAgICAgIF90aGlzLl9yZXNwb25zZXNbXCJkZWxldGVcIl0oa2V5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZXNwb25zZSA9IHRoaXMuX3Jlc3BvbnNlcy5nZXQoY2FjaGVLZXkpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlICE9IG51bGwgPyAvLyAkRmxvd0ZpeE1lW3NwZWN1bGF0aW9uLWFtYmlndW91c11cbiAgICAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgcmVzcG9uc2UucGF5bG9hZCksIHt9LCB7XG4gICAgICBleHRlbnNpb25zOiAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSgoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgcmVzcG9uc2UucGF5bG9hZC5leHRlbnNpb25zKSwge30sIHtcbiAgICAgICAgY2FjaGVUaW1lc3RhbXA6IHJlc3BvbnNlLmZldGNoVGltZVxuICAgICAgfSlcbiAgICB9KSA6IG51bGw7XG4gIH07XG5cbiAgX3Byb3RvLnNldCA9IGZ1bmN0aW9uIHNldChxdWVyeUlELCB2YXJpYWJsZXMsIHBheWxvYWQpIHtcbiAgICB2YXIgZmV0Y2hUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgY2FjaGVLZXkgPSBnZXRDYWNoZUtleShxdWVyeUlELCB2YXJpYWJsZXMpO1xuXG4gICAgdGhpcy5fcmVzcG9uc2VzW1wiZGVsZXRlXCJdKGNhY2hlS2V5KTsgLy8gZGVsZXRpb24gcmVzZXRzIGtleSBvcmRlcmluZ1xuXG5cbiAgICB0aGlzLl9yZXNwb25zZXMuc2V0KGNhY2hlS2V5LCB7XG4gICAgICBmZXRjaFRpbWU6IGZldGNoVGltZSxcbiAgICAgIHBheWxvYWQ6IHBheWxvYWRcbiAgICB9KTsgLy8gUHVyZ2UgbGVhc3QtcmVjZW50bHkgdXBkYXRlZCBrZXkgd2hlbiBtYXggc2l6ZSByZWFjaGVkXG5cblxuICAgIGlmICh0aGlzLl9yZXNwb25zZXMuc2l6ZSA+IHRoaXMuX3NpemUpIHtcbiAgICAgIHZhciBmaXJzdEtleSA9IHRoaXMuX3Jlc3BvbnNlcy5rZXlzKCkubmV4dCgpO1xuXG4gICAgICBpZiAoIWZpcnN0S2V5LmRvbmUpIHtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VzW1wiZGVsZXRlXCJdKGZpcnN0S2V5LnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlbGF5UXVlcnlSZXNwb25zZUNhY2hlO1xufSgpO1xuXG5mdW5jdGlvbiBnZXRDYWNoZUtleShxdWVyeUlELCB2YXJpYWJsZXMpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YWJsZUNvcHkoe1xuICAgIHF1ZXJ5SUQ6IHF1ZXJ5SUQsXG4gICAgdmFyaWFibGVzOiB2YXJpYWJsZXNcbiAgfSkpO1xufVxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciBhIHJlc3BvbnNlIGZldGNoZWQgYXQgYGZldGNoVGltZWAgaXMgc3RpbGwgdmFsaWQgZ2l2ZW5cbiAqIHNvbWUgYHR0bGAuXG4gKi9cblxuXG5mdW5jdGlvbiBpc0N1cnJlbnQoZmV0Y2hUaW1lLCB0dGwpIHtcbiAgcmV0dXJuIGZldGNoVGltZSArIHR0bCA+PSBEYXRlLm5vdygpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5UXVlcnlSZXNwb25zZUNhY2hlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVsYXlDb25jcmV0ZU5vZGUgPSByZXF1aXJlKCcuLi91dGlsL1JlbGF5Q29uY3JldGVOb2RlJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxuLyoqXG4gKiBSdW50aW1lIGZ1bmN0aW9uIHRvIGNvcnJlc3BvbmQgdG8gdGhlIGBncmFwaHFsYCB0YWdnZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gKiBBbGwgY2FsbHMgdG8gdGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgdHJhbnNmb3JtZWQgYnkgdGhlIHBsdWdpbi5cbiAqL1xuZnVuY3Rpb24gZ3JhcGhxbChzdHJpbmdzKSB7XG4gICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2dyYXBocWw6IFVuZXhwZWN0ZWQgaW52b2NhdGlvbiBhdCBydW50aW1lLiBFaXRoZXIgdGhlIEJhYmVsIHRyYW5zZm9ybSAnICsgJ3dhcyBub3Qgc2V0IHVwLCBvciBpdCBmYWlsZWQgdG8gaWRlbnRpZnkgdGhpcyBjYWxsIHNpdGUuIE1ha2Ugc3VyZSBpdCAnICsgJ2lzIGJlaW5nIHVzZWQgdmVyYmF0aW0gYXMgYGdyYXBocWxgLiBOb3RlIGFsc28gdGhhdCB0aGVyZSBjYW5ub3QgYmUgJyArICdhIHNwYWNlIGJldHdlZW4gZ3JhcGhxbCBhbmQgdGhlIGJhY2t0aWNrIHRoYXQgZm9sbG93cy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIGdldE5vZGUodGFnZ2VkTm9kZSkge1xuICB2YXIgbm9kZSA9IHRhZ2dlZE5vZGU7XG5cbiAgaWYgKHR5cGVvZiBub2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgbm9kZSA9IG5vZGUoKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXlHcmFwaFFMVGFnOiBub2RlIGAlc2AgdW5leHBlY3RlZGx5IHdyYXBwZWQgaW4gYSBmdW5jdGlvbi4nLCBub2RlLmtpbmQgPT09ICdGcmFnbWVudCcgPyBub2RlLm5hbWUgOiBub2RlLm9wZXJhdGlvbi5uYW1lKSA6IHZvaWQgMDtcbiAgfSBlbHNlIGlmIChub2RlW1wiZGVmYXVsdFwiXSkge1xuICAgIC8vIFN1cHBvcnQgZm9yIGxhbmd1YWdlcyB0aGF0IHdvcmsgKGJlc3QpIHdpdGggRVM2IG1vZHVsZXMsIHN1Y2ggYXMgVHlwZVNjcmlwdC5cbiAgICBub2RlID0gbm9kZVtcImRlZmF1bHRcIl07XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gaXNGcmFnbWVudChub2RlKSB7XG4gIHZhciBmcmFnbWVudCA9IGdldE5vZGUobm9kZSk7XG4gIHJldHVybiB0eXBlb2YgZnJhZ21lbnQgPT09ICdvYmplY3QnICYmIGZyYWdtZW50ICE9PSBudWxsICYmIGZyYWdtZW50LmtpbmQgPT09IFJlbGF5Q29uY3JldGVOb2RlLkZSQUdNRU5UO1xufVxuXG5mdW5jdGlvbiBpc1JlcXVlc3Qobm9kZSkge1xuICB2YXIgcmVxdWVzdCA9IGdldE5vZGUobm9kZSk7XG4gIHJldHVybiB0eXBlb2YgcmVxdWVzdCA9PT0gJ29iamVjdCcgJiYgcmVxdWVzdCAhPT0gbnVsbCAmJiByZXF1ZXN0LmtpbmQgPT09IFJlbGF5Q29uY3JldGVOb2RlLlJFUVVFU1Q7XG59XG5cbmZ1bmN0aW9uIGlzSW5saW5lRGF0YUZyYWdtZW50KG5vZGUpIHtcbiAgdmFyIGZyYWdtZW50ID0gZ2V0Tm9kZShub2RlKTtcbiAgcmV0dXJuIHR5cGVvZiBmcmFnbWVudCA9PT0gJ29iamVjdCcgJiYgZnJhZ21lbnQgIT09IG51bGwgJiYgZnJhZ21lbnQua2luZCA9PT0gUmVsYXlDb25jcmV0ZU5vZGUuSU5MSU5FX0RBVEFfRlJBR01FTlQ7XG59XG5cbmZ1bmN0aW9uIGdldEZyYWdtZW50KHRhZ2dlZE5vZGUpIHtcbiAgdmFyIGZyYWdtZW50ID0gZ2V0Tm9kZSh0YWdnZWROb2RlKTtcbiAgIWlzRnJhZ21lbnQoZnJhZ21lbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnR3JhcGhRTFRhZzogRXhwZWN0ZWQgYSBmcmFnbWVudCwgZ290IGAlc2AuJywgSlNPTi5zdHJpbmdpZnkoZnJhZ21lbnQpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBmcmFnbWVudDtcbn1cblxuZnVuY3Rpb24gZ2V0UGFnaW5hdGlvbkZyYWdtZW50KHRhZ2dlZE5vZGUpIHtcbiAgdmFyIF9mcmFnbWVudCRtZXRhZGF0YTtcblxuICB2YXIgZnJhZ21lbnQgPSBnZXRGcmFnbWVudCh0YWdnZWROb2RlKTtcbiAgdmFyIHJlZmV0Y2ggPSAoX2ZyYWdtZW50JG1ldGFkYXRhID0gZnJhZ21lbnQubWV0YWRhdGEpID09PSBudWxsIHx8IF9mcmFnbWVudCRtZXRhZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZyYWdtZW50JG1ldGFkYXRhLnJlZmV0Y2g7XG4gIHZhciBjb25uZWN0aW9uID0gcmVmZXRjaCA9PT0gbnVsbCB8fCByZWZldGNoID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWZldGNoLmNvbm5lY3Rpb247XG5cbiAgaWYgKHJlZmV0Y2ggPT09IG51bGwgfHwgdHlwZW9mIHJlZmV0Y2ggIT09ICdvYmplY3QnIHx8IGNvbm5lY3Rpb24gPT09IG51bGwgfHwgdHlwZW9mIGNvbm5lY3Rpb24gIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZnJhZ21lbnQ7XG59XG5cbmZ1bmN0aW9uIGdldFJlZmV0Y2hhYmxlRnJhZ21lbnQodGFnZ2VkTm9kZSkge1xuICB2YXIgX2ZyYWdtZW50JG1ldGFkYXRhMjtcblxuICB2YXIgZnJhZ21lbnQgPSBnZXRGcmFnbWVudCh0YWdnZWROb2RlKTtcbiAgdmFyIHJlZmV0Y2ggPSAoX2ZyYWdtZW50JG1ldGFkYXRhMiA9IGZyYWdtZW50Lm1ldGFkYXRhKSA9PT0gbnVsbCB8fCBfZnJhZ21lbnQkbWV0YWRhdGEyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZnJhZ21lbnQkbWV0YWRhdGEyLnJlZmV0Y2g7XG5cbiAgaWYgKHJlZmV0Y2ggPT09IG51bGwgfHwgdHlwZW9mIHJlZmV0Y2ggIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZnJhZ21lbnQ7XG59XG5cbmZ1bmN0aW9uIGdldFJlcXVlc3QodGFnZ2VkTm9kZSkge1xuICB2YXIgcmVxdWVzdCA9IGdldE5vZGUodGFnZ2VkTm9kZSk7XG4gICFpc1JlcXVlc3QocmVxdWVzdCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdHcmFwaFFMVGFnOiBFeHBlY3RlZCBhIHJlcXVlc3QsIGdvdCBgJXNgLicsIEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByZXF1ZXN0O1xufVxuXG5mdW5jdGlvbiBnZXRJbmxpbmVEYXRhRnJhZ21lbnQodGFnZ2VkTm9kZSkge1xuICB2YXIgZnJhZ21lbnQgPSBnZXROb2RlKHRhZ2dlZE5vZGUpO1xuICAhaXNJbmxpbmVEYXRhRnJhZ21lbnQoZnJhZ21lbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnR3JhcGhRTFRhZzogRXhwZWN0ZWQgYW4gaW5saW5lIGRhdGEgZnJhZ21lbnQsIGdvdCBgJXNgLicsIEpTT04uc3RyaW5naWZ5KGZyYWdtZW50KSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gZnJhZ21lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRGcmFnbWVudDogZ2V0RnJhZ21lbnQsXG4gIGdldE5vZGU6IGdldE5vZGUsXG4gIGdldFBhZ2luYXRpb25GcmFnbWVudDogZ2V0UGFnaW5hdGlvbkZyYWdtZW50LFxuICBnZXRSZWZldGNoYWJsZUZyYWdtZW50OiBnZXRSZWZldGNoYWJsZUZyYWdtZW50LFxuICBnZXRSZXF1ZXN0OiBnZXRSZXF1ZXN0LFxuICBnZXRJbmxpbmVEYXRhRnJhZ21lbnQ6IGdldElubGluZURhdGFGcmFnbWVudCxcbiAgZ3JhcGhxbDogZ3JhcGhxbCxcbiAgaXNGcmFnbWVudDogaXNGcmFnbWVudCxcbiAgaXNSZXF1ZXN0OiBpc1JlcXVlc3QsXG4gIGlzSW5saW5lRGF0YUZyYWdtZW50OiBpc0lubGluZURhdGFGcmFnbWVudFxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUHJlbG9hZGFibGVRdWVyeVJlZ2lzdHJ5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJlbG9hZGFibGVRdWVyeVJlZ2lzdHJ5KCkge1xuICAgIHRoaXMuX3ByZWxvYWRhYmxlUXVlcmllcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSBuZXcgTWFwKCk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUHJlbG9hZGFibGVRdWVyeVJlZ2lzdHJ5LnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2V0ID0gZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLl9wcmVsb2FkYWJsZVF1ZXJpZXMuc2V0KGtleSwgdmFsdWUpO1xuXG4gICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcy5nZXQoa2V5KTtcblxuICAgIGlmIChjYWxsYmFja3MgIT0gbnVsbCkge1xuICAgICAgY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2IodmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gV2UgZG8gKm5vdCogd2FudCB0byB0aHJvdyBpbiB0aGlzIHRpY2ssIGFzIHRoaXMgY2FsbGJhY2sgaXMgZXhlY3V0ZWRcbiAgICAgICAgICAvLyB3aGlsZSBhIHF1ZXJ5IGlzIHJlcXVpcmVkIGZvciB0aGUgdmVyeSBmaXJzdCB0aW1lLlxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZWxvYWRhYmxlUXVlcmllcy5nZXQoa2V5KTtcbiAgfTtcblxuICBfcHJvdG8ub25Mb2FkID0gZnVuY3Rpb24gb25Mb2FkKGtleSwgY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMkX2NhbGxiYWNrcyRnZXQ7XG5cbiAgICB2YXIgY2FsbGJhY2tzID0gKF90aGlzJF9jYWxsYmFja3MkZ2V0ID0gdGhpcy5fY2FsbGJhY2tzLmdldChrZXkpKSAhPT0gbnVsbCAmJiBfdGhpcyRfY2FsbGJhY2tzJGdldCAhPT0gdm9pZCAwID8gX3RoaXMkX2NhbGxiYWNrcyRnZXQgOiBuZXcgU2V0KCk7XG4gICAgY2FsbGJhY2tzLmFkZChjYWxsYmFjayk7XG5cbiAgICB2YXIgZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICBjYWxsYmFja3NbXCJkZWxldGVcIl0oY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICB0aGlzLl9jYWxsYmFja3Muc2V0KGtleSwgY2FsbGJhY2tzKTtcblxuICAgIHJldHVybiB7XG4gICAgICBkaXNwb3NlOiBkaXNwb3NlXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLl9wcmVsb2FkYWJsZVF1ZXJpZXMuY2xlYXIoKTtcbiAgfTtcblxuICByZXR1cm4gUHJlbG9hZGFibGVRdWVyeVJlZ2lzdHJ5O1xufSgpO1xuXG52YXIgcHJlbG9hZGFibGVRdWVyeVJlZ2lzdHJ5ID0gbmV3IFByZWxvYWRhYmxlUXVlcnlSZWdpc3RyeSgpO1xubW9kdWxlLmV4cG9ydHMgPSBwcmVsb2FkYWJsZVF1ZXJ5UmVnaXN0cnk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWxheVxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcblxudmFyIFJlbGF5T2JzZXJ2YWJsZSA9IHJlcXVpcmUoJy4uL25ldHdvcmsvUmVsYXlPYnNlcnZhYmxlJyk7XG5cbnZhciBmZXRjaFF1ZXJ5SW50ZXJuYWwgPSByZXF1aXJlKCcuL2ZldGNoUXVlcnlJbnRlcm5hbCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciByZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHMgPSByZXF1aXJlKCcuLi91dGlsL3JlcG9ydE1pc3NpbmdSZXF1aXJlZEZpZWxkcycpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi9zdG9yZS9SZWxheU1vZGVybk9wZXJhdGlvbkRlc2NyaXB0b3InKSxcbiAgICBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yID0gX3JlcXVpcmUuY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcjtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vR3JhcGhRTFRhZycpLFxuICAgIGdldFJlcXVlc3QgPSBfcmVxdWlyZTIuZ2V0UmVxdWVzdDtcblxuLyoqXG4gKiBGZXRjaGVzIHRoZSBnaXZlbiBxdWVyeSBhbmQgdmFyaWFibGVzIG9uIHRoZSBwcm92aWRlZCBlbnZpcm9ubWVudCxcbiAqIGFuZCBkZS1kdXBlcyBpZGVudGljYWwgaW4tZmxpZ2h0IHJlcXVlc3RzLlxuICpcbiAqIE9ic2VydmluZyBhIHJlcXVlc3Q6XG4gKiA9PT09PT09PT09PT09PT09PT09PVxuICogZmV0Y2hRdWVyeSByZXR1cm5zIGFuIE9ic2VydmFibGUgd2hpY2ggeW91IGNhbiBjYWxsIC5zdWJzY3JpYmUoKVxuICogb24uIFN1YnNjcmliZSBvcHRpb25hbGx5IHRha2VzIGFuIE9ic2VydmVyLCB3aGljaCB5b3UgY2FuIHByb3ZpZGUgdG9cbiAqIG9ic2VydmUgbmV0d29yayBldmVudHM6XG4gKlxuICogYGBgXG4gKiBmZXRjaFF1ZXJ5KGVudmlyb25tZW50LCBxdWVyeSwgdmFyaWFibGVzKS5zdWJzY3JpYmUoe1xuICogICAvLyBDYWxsZWQgd2hlbiBuZXR3b3JrIHJlcXVlc3RzIHN0YXJ0c1xuICogICBzdGFydDogKHN1YnNjdGlwdGlvbikgPT4ge30sXG4gKlxuICogICAvLyBDYWxsZWQgYWZ0ZXIgYSBwYXlsb2FkIGlzIHJlY2VpdmVkIGFuZCB3cml0dGVuIHRvIHRoZSBsb2NhbCBzdG9yZVxuICogICBuZXh0OiAocGF5bG9hZCkgPT4ge30sXG4gKlxuICogICAvLyBDYWxsZWQgd2hlbiBuZXR3b3JrIHJlcXVlc3RzIGVycm9yc1xuICogICBlcnJvcjogKGVycm9yKSA9PiB7fSxcbiAqXG4gKiAgIC8vIENhbGxlZCB3aGVuIG5ldHdvcmsgcmVxdWVzdHMgZnVsbHkgY29tcGxldGVzXG4gKiAgIGNvbXBsZXRlOiAoKSA9PiB7fSxcbiAqXG4gKiAgIC8vIENhbGxlZCB3aGVuIG5ldHdvcmsgcmVxdWVzdCBpcyB1bnN1YnNjcmliZWRcbiAqICAgdW5zdWJzY3JpYmU6IChzdWJzY3JpcHRpb24pID0+IHt9LFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBSZXF1ZXN0IFByb21pc2U6XG4gKiA9PT09PT09PT09PT09PT09XG4gKiBUaGUgb2JlcnZhYmxlIGNhbiBiZSBjb252ZXJ0ZWQgdG8gYSBQcm9taXNlIHdpdGggLnRvUHJvbWlzZSgpLCB3aGljaCB3aWxsXG4gKiByZXNvbHZlIHRvIGEgc25hcHNob3Qgb2YgdGhlIHF1ZXJ5IGRhdGEgd2hlbiB0aGUgZmlyc3QgcmVzcG9uc2UgaXMgcmVjZWl2ZWRcbiAqIGZyb20gdGhlIHNlcnZlci5cbiAqXG4gKiBgYGBcbiAqIGZldGNoUXVlcnkoZW52aXJvbm1lbnQsIHF1ZXJ5LCB2YXJpYWJsZXMpLnRvUHJvbWlzZSgpLnRoZW4oKGRhdGEpID0+IHtcbiAqICAgLy8gLi4uXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEluLWZsaWdodCByZXF1ZXN0IGRlLWR1cGluZzpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJ5IGRlZmF1bHQsIGNhbGxpbmcgZmV0Y2hRdWVyeSBtdWx0aXBsZSB0aW1lcyB3aXRoIHRoZSBzYW1lXG4gKiBlbnZpcm9ubWVudCwgcXVlcnkgYW5kIHZhcmlhYmxlcyB3aWxsIG5vdCBpbml0aWF0ZSBhIG5ldyByZXF1ZXN0IGlmIGEgcmVxdWVzdFxuICogZm9yIHRob3NlIHNhbWUgcGFyYW1ldGVycyBpcyBhbHJlYWR5IGluIGZsaWdodC5cbiAqXG4gKiBBIHJlcXVlc3QgaXMgbWFya2VkIGluLWZsaWdodCBmcm9tIHRoZSBtb21lbnQgaXQgc3RhcnRzIHVudGlsIHRoZSBtb21lbnQgaXRcbiAqIGZ1bGx5IGNvbXBsZXRlcywgcmVnYXJkbGVzcyBvZiBlcnJvciBvciBzdWNjZXNzZnVsIGNvbXBsZXRpb24uXG4gKlxuICogTk9URTogSWYgdGhlIHJlcXVlc3QgY29tcGxldGVzIF9zeW5jaHJvbm91c2x5XywgY2FsbGluZyBmZXRjaFF1ZXJ5XG4gKiBhIHNlY29uZCB0aW1lIHdpdGggdGhlIHNhbWUgYXJndW1lbnRzIGluIHRoZSBzYW1lIHRpY2sgd2lsbCBfTk9UXyBkZS1kdXBlXG4gKiB0aGUgcmVxdWVzdCBnaXZlbiB0aGF0IGl0IHdpbGwgbm8gbG9uZ2VyIGJlIGluLWZsaWdodC5cbiAqXG4gKlxuICogRGF0YSBSZXRlbnRpb246XG4gKiA9PT09PT09PT09PT09PT1cbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBOT1QgcmV0YWluIHF1ZXJ5IGRhdGEsIG1lYW5pbmcgdGhhdCBpdCBpcyBub3QgZ3VhcmFudGVlZFxuICogdGhhdCB0aGUgZmV0Y2hlZCBkYXRhIHdpbGwgcmVtYWluIGluIHRoZSBSZWxheSBzdG9yZSBhZnRlciB0aGUgcmVxdWVzdCBoYXNcbiAqIGNvbXBsZXRlZC5cbiAqIElmIHlvdSBuZWVkIHRvIHJldGFpbiB0aGUgcXVlcnkgZGF0YSBvdXRzaWRlIG9mIHRoZSBuZXR3b3JrIHJlcXVlc3QsXG4gKiB5b3UgbmVlZCB0byB1c2UgYGVudmlyb25tZW50LnJldGFpbigpYC5cbiAqXG4gKlxuICogQ2FuY2VsbGluZyByZXF1ZXN0czpcbiAqID09PT09PT09PT09PT09PT09PT09XG4gKiBJZiB0aGUgZGlzcG9zYWJsZSByZXR1cm5lZCBieSBzdWJzY3JpYmUgaXMgY2FsbGVkIHdoaWxlIHRoZVxuICogcmVxdWVzdCBpcyBpbi1mbGlnaHQsIHRoZSByZXF1ZXN0IHdpbGwgYmUgY2FuY2VsbGVkLlxuICpcbiAqIGBgYFxuICogY29uc3QgZGlzcG9zYWJsZSA9IGZldGNoUXVlcnkoLi4uKS5zdWJzY3JpYmUoLi4uKTtcbiAqXG4gKiAvLyBUaGlzIHdpbGwgY2FuY2VsIHRoZSByZXF1ZXN0IGlmIGl0IGlzIGluLWZsaWdodC5cbiAqIGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICogYGBgXG4gKiBOT1RFOiBXaGVuIHVzaW5nIC50b1Byb21pc2UoKSwgdGhlIHJlcXVlc3QgY2Fubm90IGJlIGNhbmNlbGxlZC5cbiAqL1xuZnVuY3Rpb24gZmV0Y2hRdWVyeShlbnZpcm9ubWVudCwgcXVlcnksIHZhcmlhYmxlcywgb3B0aW9ucykge1xuICB2YXIgX29wdGlvbnMkZmV0Y2hQb2xpY3k7XG5cbiAgdmFyIHF1ZXJ5Tm9kZSA9IGdldFJlcXVlc3QocXVlcnkpO1xuICAhKHF1ZXJ5Tm9kZS5wYXJhbXMub3BlcmF0aW9uS2luZCA9PT0gJ3F1ZXJ5JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdmZXRjaFF1ZXJ5OiBFeHBlY3RlZCBxdWVyeSBvcGVyYXRpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBuZXR3b3JrQ2FjaGVDb25maWcgPSAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7XG4gICAgZm9yY2U6IHRydWVcbiAgfSwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm5ldHdvcmtDYWNoZUNvbmZpZyk7XG4gIHZhciBvcGVyYXRpb24gPSBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yKHF1ZXJ5Tm9kZSwgdmFyaWFibGVzLCBuZXR3b3JrQ2FjaGVDb25maWcpO1xuICB2YXIgZmV0Y2hQb2xpY3kgPSAoX29wdGlvbnMkZmV0Y2hQb2xpY3kgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmV0Y2hQb2xpY3kpICE9PSBudWxsICYmIF9vcHRpb25zJGZldGNoUG9saWN5ICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRmZXRjaFBvbGljeSA6ICduZXR3b3JrLW9ubHknO1xuXG4gIGZ1bmN0aW9uIHJlYWREYXRhKHNuYXBzaG90KSB7XG4gICAgaWYgKHNuYXBzaG90Lm1pc3NpbmdSZXF1aXJlZEZpZWxkcyAhPSBudWxsKSB7XG4gICAgICByZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHMoZW52aXJvbm1lbnQsIHNuYXBzaG90Lm1pc3NpbmdSZXF1aXJlZEZpZWxkcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNuYXBzaG90LmRhdGE7XG4gIH1cblxuICBzd2l0Y2ggKGZldGNoUG9saWN5KSB7XG4gICAgY2FzZSAnbmV0d29yay1vbmx5JzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGdldE5ldHdvcmtPYnNlcnZhYmxlKGVudmlyb25tZW50LCBvcGVyYXRpb24pLm1hcChyZWFkRGF0YSk7XG4gICAgICB9XG5cbiAgICBjYXNlICdzdG9yZS1vci1uZXR3b3JrJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKGVudmlyb25tZW50LmNoZWNrKG9wZXJhdGlvbikuc3RhdHVzID09PSAnYXZhaWxhYmxlJykge1xuICAgICAgICAgIHJldHVybiBSZWxheU9ic2VydmFibGUuZnJvbShlbnZpcm9ubWVudC5sb29rdXAob3BlcmF0aW9uLmZyYWdtZW50KSkubWFwKHJlYWREYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnZXROZXR3b3JrT2JzZXJ2YWJsZShlbnZpcm9ubWVudCwgb3BlcmF0aW9uKS5tYXAocmVhZERhdGEpO1xuICAgICAgfVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIGZldGNoUG9saWN5O1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdmZXRjaFF1ZXJ5OiBJbnZhbGlkIGZldGNoUG9saWN5ICcgKyBmZXRjaFBvbGljeSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TmV0d29ya09ic2VydmFibGUoZW52aXJvbm1lbnQsIG9wZXJhdGlvbikge1xuICByZXR1cm4gZmV0Y2hRdWVyeUludGVybmFsLmZldGNoUXVlcnkoZW52aXJvbm1lbnQsIG9wZXJhdGlvbikubWFwKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZW52aXJvbm1lbnQubG9va3VwKG9wZXJhdGlvbi5mcmFnbWVudCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZldGNoUXVlcnk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBPYnNlcnZhYmxlID0gcmVxdWlyZSgnLi4vbmV0d29yay9SZWxheU9ic2VydmFibGUnKTtcblxudmFyIFJlbGF5UmVwbGF5U3ViamVjdCA9IHJlcXVpcmUoJy4uL3V0aWwvUmVsYXlSZXBsYXlTdWJqZWN0Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIFdFQUtNQVBfU1VQUE9SVEVEID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbic7XG52YXIgcmVxdWVzdENhY2hlc0J5RW52aXJvbm1lbnQgPSBXRUFLTUFQX1NVUFBPUlRFRCA/IG5ldyBXZWFrTWFwKCkgOiBuZXcgTWFwKCk7XG4vKipcbiAqIEZldGNoZXMgdGhlIGdpdmVuIHF1ZXJ5IGFuZCB2YXJpYWJsZXMgb24gdGhlIHByb3ZpZGVkIGVudmlyb25tZW50LFxuICogYW5kIGRlLWR1cGVzIGlkZW50aWNhbCBpbi1mbGlnaHQgcmVxdWVzdHMuXG4gKlxuICogT2JzZXJ2aW5nIGEgcmVxdWVzdDpcbiAqID09PT09PT09PT09PT09PT09PT09XG4gKiBmZXRjaFF1ZXJ5IHJldHVybnMgYW4gT2JzZXJ2YWJsZSB3aGljaCB5b3UgY2FuIGNhbGwgLnN1YnNjcmliZSgpXG4gKiBvbi4gc3Vic2NyaWJlKCkgdGFrZXMgYW4gT2JzZXJ2ZXIsIHdoaWNoIHlvdSBjYW4gcHJvdmlkZSB0b1xuICogb2JzZXJ2ZSBuZXR3b3JrIGV2ZW50czpcbiAqXG4gKiBgYGBcbiAqIGZldGNoUXVlcnkoZW52aXJvbm1lbnQsIHF1ZXJ5LCB2YXJpYWJsZXMpLnN1YnNjcmliZSh7XG4gKiAgIC8vIENhbGxlZCB3aGVuIG5ldHdvcmsgcmVxdWVzdHMgc3RhcnRzXG4gKiAgIHN0YXJ0OiAoc3Vic2NyaXB0aW9uKSA9PiB7fSxcbiAqXG4gKiAgIC8vIENhbGxlZCBhZnRlciBhIHBheWxvYWQgaXMgcmVjZWl2ZWQgYW5kIHdyaXR0ZW4gdG8gdGhlIGxvY2FsIHN0b3JlXG4gKiAgIG5leHQ6IChwYXlsb2FkKSA9PiB7fSxcbiAqXG4gKiAgIC8vIENhbGxlZCB3aGVuIG5ldHdvcmsgcmVxdWVzdHMgZXJyb3JzXG4gKiAgIGVycm9yOiAoZXJyb3IpID0+IHt9LFxuICpcbiAqICAgLy8gQ2FsbGVkIHdoZW4gbmV0d29yayByZXF1ZXN0cyBmdWxseSBjb21wbGV0ZXNcbiAqICAgY29tcGxldGU6ICgpID0+IHt9LFxuICpcbiAqICAgLy8gQ2FsbGVkIHdoZW4gbmV0d29yayByZXF1ZXN0IGlzIHVuc3Vic2NyaWJlZFxuICogICB1bnN1YnNjcmliZTogKHN1YnNjcmlwdGlvbikgPT4ge30sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEluLWZsaWdodCByZXF1ZXN0IGRlLWR1cGluZzpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJ5IGRlZmF1bHQsIGNhbGxpbmcgZmV0Y2hRdWVyeSBtdWx0aXBsZSB0aW1lcyB3aXRoIHRoZSBzYW1lXG4gKiBlbnZpcm9ubWVudCwgcXVlcnkgYW5kIHZhcmlhYmxlcyB3aWxsIG5vdCBpbml0aWF0ZSBhIG5ldyByZXF1ZXN0IGlmIGEgcmVxdWVzdFxuICogZm9yIHRob3NlIHNhbWUgcGFyYW1ldGVycyBpcyBhbHJlYWR5IGluIGZsaWdodC5cbiAqXG4gKiBBIHJlcXVlc3QgaXMgbWFya2VkIGluLWZsaWdodCBmcm9tIHRoZSBtb21lbnQgaXQgc3RhcnRzIHVudGlsIHRoZSBtb21lbnQgaXRcbiAqIGZ1bGx5IGNvbXBsZXRlcywgcmVnYXJkbGVzcyBvZiBlcnJvciBvciBzdWNjZXNzZnVsIGNvbXBsZXRpb24uXG4gKlxuICogTk9URTogSWYgdGhlIHJlcXVlc3QgY29tcGxldGVzIF9zeW5jaHJvbm91c2x5XywgY2FsbGluZyBmZXRjaFF1ZXJ5XG4gKiBhIHNlY29uZCB0aW1lIHdpdGggdGhlIHNhbWUgYXJndW1lbnRzIGluIHRoZSBzYW1lIHRpY2sgd2lsbCBfTk9UXyBkZS1kdXBlXG4gKiB0aGUgcmVxdWVzdCBnaXZlbiB0aGF0IGl0IHdpbGwgbm8gbG9uZ2VyIGJlIGluLWZsaWdodC5cbiAqXG4gKlxuICogRGF0YSBSZXRlbnRpb246XG4gKiA9PT09PT09PT09PT09PT1cbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBub3QgcmV0YWluIGFueSBxdWVyeSBkYXRhIG91dHNpZGUgdGhlIHNjb3BlIG9mIHRoZVxuICogcmVxdWVzdCwgd2hpY2ggbWVhbnMgaXQgaXMgbm90IGd1YXJhbnRlZWQgdGhhdCBpdCB3b24ndCBiZSBnYXJiYWdlXG4gKiBjb2xsZWN0ZWQgYWZ0ZXIgdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICogSWYgeW91IG5lZWQgdG8gcmV0YWluIGRhdGEsIHlvdSBjYW4gZG8gc28gbWFudWFsbHkgd2l0aCBlbnZpcm9ubWVudC5yZXRhaW4oKS5cbiAqXG4gKiBDYW5jZWxsaW5nIHJlcXVlc3RzOlxuICogPT09PT09PT09PT09PT09PT09PT1cbiAqIElmIHRoZSBzdWJzY3JpcHRpb24gcmV0dXJuZWQgYnkgc3Vic2NyaWJlIGlzIGNhbGxlZCB3aGlsZSB0aGVcbiAqIHJlcXVlc3QgaXMgaW4tZmxpZ2h0LCB0aGUgcmVxdWVzdCB3aWxsIGJlIGNhbmNlbGxlZC5cbiAqXG4gKiBgYGBcbiAqIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGZldGNoUXVlcnkoLi4uKS5zdWJzY3JpYmUoLi4uKTtcbiAqXG4gKiAvLyBUaGlzIHdpbGwgY2FuY2VsIHRoZSByZXF1ZXN0IGlmIGl0IGlzIGluLWZsaWdodC5cbiAqIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICogYGBgXG4gKi9cblxuZnVuY3Rpb24gZmV0Y2hRdWVyeShlbnZpcm9ubWVudCwgb3BlcmF0aW9uKSB7XG4gIHJldHVybiBmZXRjaFF1ZXJ5RGVkdXBlZChlbnZpcm9ubWVudCwgb3BlcmF0aW9uLnJlcXVlc3QuaWRlbnRpZmllciwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlbnZpcm9ubWVudC5leGVjdXRlKHtcbiAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uXG4gICAgfSk7XG4gIH0pO1xufVxuLyoqXG4gKiBMb3ctbGV2ZWwgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvZiBgZmV0Y2hRdWVyeWAuXG4gKlxuICogYGZldGNoUXVlcnlEZWR1cGVkYCBjYW4gYWxzbyBiZSB1c2VkIHRvIHNoYXJlIGEgc2luZ2xlIGNhY2hlIGZvclxuICogcmVxdWVzdHMgdGhhdCBhcmVuJ3QgdXNpbmcgYGZldGNoUXVlcnlgIGRpcmVjdGx5IChlLmcuIGJlY2F1c2UgdGhleSBkb24ndFxuICogaGF2ZSBhbiBgT3BlcmF0aW9uRGVzY3JpcHRvcmAgd2hlbiB0aGV5IGFyZSBjYWxsZWQpLlxuICovXG5cblxuZnVuY3Rpb24gZmV0Y2hRdWVyeURlZHVwZWQoZW52aXJvbm1lbnQsIGlkZW50aWZpZXIsIGZldGNoRm4pIHtcbiAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgdmFyIHJlcXVlc3RDYWNoZSA9IGdldFJlcXVlc3RDYWNoZShlbnZpcm9ubWVudCk7XG4gICAgdmFyIGNhY2hlZFJlcXVlc3QgPSByZXF1ZXN0Q2FjaGUuZ2V0KGlkZW50aWZpZXIpO1xuXG4gICAgaWYgKCFjYWNoZWRSZXF1ZXN0KSB7XG4gICAgICBmZXRjaEZuKClbXCJmaW5hbGx5XCJdKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3RDYWNoZVtcImRlbGV0ZVwiXShpZGVudGlmaWVyKTtcbiAgICAgIH0pLnN1YnNjcmliZSh7XG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICBjYWNoZWRSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgICAgIHN1YmplY3Q6IG5ldyBSZWxheVJlcGxheVN1YmplY3QoKSxcbiAgICAgICAgICAgIHN1YmplY3RGb3JJbkZsaWdodFN0YXR1czogbmV3IFJlbGF5UmVwbGF5U3ViamVjdCgpLFxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlcXVlc3RDYWNoZS5zZXQoaWRlbnRpZmllciwgY2FjaGVkUmVxdWVzdCk7XG4gICAgICAgIH0sXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQocmVzcG9uc2UpIHtcbiAgICAgICAgICB2YXIgY2FjaGVkUmVxID0gZ2V0Q2FjaGVkUmVxdWVzdChyZXF1ZXN0Q2FjaGUsIGlkZW50aWZpZXIpO1xuICAgICAgICAgIGNhY2hlZFJlcS5zdWJqZWN0Lm5leHQocmVzcG9uc2UpO1xuICAgICAgICAgIGNhY2hlZFJlcS5zdWJqZWN0Rm9ySW5GbGlnaHRTdGF0dXMubmV4dChyZXNwb25zZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IpIHtcbiAgICAgICAgICB2YXIgY2FjaGVkUmVxID0gZ2V0Q2FjaGVkUmVxdWVzdChyZXF1ZXN0Q2FjaGUsIGlkZW50aWZpZXIpO1xuICAgICAgICAgIGNhY2hlZFJlcS5zdWJqZWN0LmVycm9yKF9lcnJvcik7XG4gICAgICAgICAgY2FjaGVkUmVxLnN1YmplY3RGb3JJbkZsaWdodFN0YXR1cy5lcnJvcihfZXJyb3IpO1xuICAgICAgICB9LFxuICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgdmFyIGNhY2hlZFJlcSA9IGdldENhY2hlZFJlcXVlc3QocmVxdWVzdENhY2hlLCBpZGVudGlmaWVyKTtcbiAgICAgICAgICBjYWNoZWRSZXEuc3ViamVjdC5jb21wbGV0ZSgpO1xuICAgICAgICAgIGNhY2hlZFJlcS5zdWJqZWN0Rm9ySW5GbGlnaHRTdGF0dXMuY29tcGxldGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgIHZhciBjYWNoZWRSZXEgPSBnZXRDYWNoZWRSZXF1ZXN0KHJlcXVlc3RDYWNoZSwgaWRlbnRpZmllcik7XG4gICAgICAgICAgY2FjaGVkUmVxLnN1YmplY3QudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICBjYWNoZWRSZXEuc3ViamVjdEZvckluRmxpZ2h0U3RhdHVzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgICEoY2FjaGVkUmVxdWVzdCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1tmZXRjaFF1ZXJ5SW50ZXJuYWxdIGZldGNoUXVlcnlEZWR1cGVkOiBFeHBlY3RlZCBgc3RhcnRgIHRvIGJlICcgKyAnY2FsbGVkIHN5bmNocm9ub3VzbHknKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGdldE9ic2VydmFibGVGb3JDYWNoZWRSZXF1ZXN0KHJlcXVlc3RDYWNoZSwgY2FjaGVkUmVxdWVzdCkuc3Vic2NyaWJlKHNpbmspO1xuICB9KTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldE9ic2VydmFibGVGb3JDYWNoZWRSZXF1ZXN0KHJlcXVlc3RDYWNoZSwgY2FjaGVkUmVxdWVzdCkge1xuICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2FjaGVkUmVxdWVzdC5zdWJqZWN0LnN1YnNjcmliZShzaW5rKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB2YXIgY2FjaGVkUmVxdWVzdEluc3RhbmNlID0gcmVxdWVzdENhY2hlLmdldChjYWNoZWRSZXF1ZXN0LmlkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoY2FjaGVkUmVxdWVzdEluc3RhbmNlKSB7XG4gICAgICAgIHZhciByZXF1ZXN0U3Vic2NyaXB0aW9uID0gY2FjaGVkUmVxdWVzdEluc3RhbmNlLnN1YnNjcmlwdGlvbjtcblxuICAgICAgICBpZiAocmVxdWVzdFN1YnNjcmlwdGlvbiAhPSBudWxsICYmIGNhY2hlZFJlcXVlc3RJbnN0YW5jZS5zdWJqZWN0LmdldE9ic2VydmVyQ291bnQoKSA9PT0gMCkge1xuICAgICAgICAgIHJlcXVlc3RTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICByZXF1ZXN0Q2FjaGVbXCJkZWxldGVcIl0oY2FjaGVkUmVxdWVzdC5pZGVudGlmaWVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gZ2V0QWN0aXZlU3RhdHVzT2JzZXJ2YWJsZUZvckNhY2hlZFJlcXVlc3QoZW52aXJvbm1lbnQsIHJlcXVlc3RDYWNoZSwgY2FjaGVkUmVxdWVzdCkge1xuICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2FjaGVkUmVxdWVzdC5zdWJqZWN0Rm9ySW5GbGlnaHRTdGF0dXMuc3Vic2NyaWJlKHtcbiAgICAgIGVycm9yOiBzaW5rLmVycm9yLFxuICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dChyZXNwb25zZSkge1xuICAgICAgICBpZiAoIWVudmlyb25tZW50LmlzUmVxdWVzdEFjdGl2ZShjYWNoZWRSZXF1ZXN0LmlkZW50aWZpZXIpKSB7XG4gICAgICAgICAgc2luay5jb21wbGV0ZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNpbmsubmV4dCgpO1xuICAgICAgfSxcbiAgICAgIGNvbXBsZXRlOiBzaW5rLmNvbXBsZXRlLFxuICAgICAgdW5zdWJzY3JpYmU6IHNpbmsuY29tcGxldGVcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSk7XG59XG4vKipcbiAqIElmIGEgcmVxdWVzdCBpcyBhY3RpdmUgZm9yIHRoZSBnaXZlbiBxdWVyeSwgdmFyaWFibGVzIGFuZCBlbnZpcm9ubWVudCxcbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gYSBQcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIHdoZW4gdGhhdCByZXF1ZXN0XG4gKiBzdG9wcyBiZWluZyBhY3RpdmUgKHJlY2VpdmVzIGEgZmluYWwgcGF5bG9hZCksIGFuZCB0aGUgZGF0YSBoYXMgYmVlbiBzYXZlZFxuICogdG8gdGhlIHN0b3JlLlxuICogSWYgbm8gcmVxdWVzdCBpcyBhY3RpdmUsIG51bGwgd2lsbCBiZSByZXR1cm5lZFxuICovXG5cblxuZnVuY3Rpb24gZ2V0UHJvbWlzZUZvckFjdGl2ZVJlcXVlc3QoZW52aXJvbm1lbnQsIHJlcXVlc3QpIHtcbiAgdmFyIHJlcXVlc3RDYWNoZSA9IGdldFJlcXVlc3RDYWNoZShlbnZpcm9ubWVudCk7XG4gIHZhciBjYWNoZWRSZXF1ZXN0ID0gcmVxdWVzdENhY2hlLmdldChyZXF1ZXN0LmlkZW50aWZpZXIpO1xuXG4gIGlmICghY2FjaGVkUmVxdWVzdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFlbnZpcm9ubWVudC5pc1JlcXVlc3RBY3RpdmUoY2FjaGVkUmVxdWVzdC5pZGVudGlmaWVyKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVzb2x2ZU9uTmV4dCA9IGZhbHNlO1xuICAgIGdldEFjdGl2ZVN0YXR1c09ic2VydmFibGVGb3JDYWNoZWRSZXF1ZXN0KGVudmlyb25tZW50LCByZXF1ZXN0Q2FjaGUsIGNhY2hlZFJlcXVlc3QpLnN1YnNjcmliZSh7XG4gICAgICBjb21wbGV0ZTogcmVzb2x2ZSxcbiAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KHJlc3BvbnNlKSB7XG4gICAgICAgIC8qXG4gICAgICAgICAqIFRoZSB1bmRlcmx5aW5nIGBSZWxheVJlcGxheVN1YmplY3RgIHdpbGwgc3luY2hyb25vdXNseSByZXBsYXkgZXZlbnRzXG4gICAgICAgICAqIGFzIHNvb24gYXMgd2Ugc3Vic2NyaWJlLCBidXQgc2luY2Ugd2Ugd2FudCB0aGUgKm5leHQqIGFzeW5jaHJvbm91c1xuICAgICAgICAgKiBvbmUsIHdlJ2xsIGlnbm9yZSB0aGVtIHVudGlsIHRoZSByZXBsYXkgZmluaXNoZXMuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAocmVzb2x2ZU9uTmV4dCkge1xuICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzb2x2ZU9uTmV4dCA9IHRydWU7XG4gIH0pO1xufVxuLyoqXG4gKiBJZiB0aGVyZSBpcyBhIHBlbmRpbmcgcmVxdWVzdCBmb3IgdGhlIGdpdmVuIHF1ZXJ5LCByZXR1cm5zIGFuIE9ic2VydmFibGUgb2ZcbiAqICphbGwqIGl0cyByZXNwb25zZXMuIEV4aXN0aW5nIHJlc3BvbnNlcyBhcmUgcHVibGlzaGVkIHN5bmNocm9ub3VzbHkgYW5kXG4gKiBzdWJzZXF1ZW50IHJlc3BvbnNlcyBhcmUgcHVibGlzaGVkIGFzeW5jaHJvbm91c2x5LiBSZXR1cm5zIG51bGwgaWYgdGhlcmUgaXNcbiAqIG5vIHBlbmRpbmcgcmVxdWVzdC4gVGhpcyBpcyBzaW1pbGFyIHRvIGZldGNoUXVlcnkoKSBleGNlcHQgdGhhdCBpdCB3aWxsIG5vdFxuICogaXNzdWUgYSBmZXRjaCBpZiB0aGVyZSBpc24ndCBhbHJlYWR5IG9uZSBwZW5kaW5nLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0T2JzZXJ2YWJsZUZvckFjdGl2ZVJlcXVlc3QoZW52aXJvbm1lbnQsIHJlcXVlc3QpIHtcbiAgdmFyIHJlcXVlc3RDYWNoZSA9IGdldFJlcXVlc3RDYWNoZShlbnZpcm9ubWVudCk7XG4gIHZhciBjYWNoZWRSZXF1ZXN0ID0gcmVxdWVzdENhY2hlLmdldChyZXF1ZXN0LmlkZW50aWZpZXIpO1xuXG4gIGlmICghY2FjaGVkUmVxdWVzdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFlbnZpcm9ubWVudC5pc1JlcXVlc3RBY3RpdmUoY2FjaGVkUmVxdWVzdC5pZGVudGlmaWVyKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGdldEFjdGl2ZVN0YXR1c09ic2VydmFibGVGb3JDYWNoZWRSZXF1ZXN0KGVudmlyb25tZW50LCByZXF1ZXN0Q2FjaGUsIGNhY2hlZFJlcXVlc3QpO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gZ2V0UmVxdWVzdENhY2hlKGVudmlyb25tZW50KSB7XG4gIHZhciBjYWNoZWQgPSByZXF1ZXN0Q2FjaGVzQnlFbnZpcm9ubWVudC5nZXQoZW52aXJvbm1lbnQpO1xuXG4gIGlmIChjYWNoZWQgIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZWQ7XG4gIH1cblxuICB2YXIgcmVxdWVzdENhY2hlID0gbmV3IE1hcCgpO1xuICByZXF1ZXN0Q2FjaGVzQnlFbnZpcm9ubWVudC5zZXQoZW52aXJvbm1lbnQsIHJlcXVlc3RDYWNoZSk7XG4gIHJldHVybiByZXF1ZXN0Q2FjaGU7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRDYWNoZWRSZXF1ZXN0KHJlcXVlc3RDYWNoZSwgaWRlbnRpZmllcikge1xuICB2YXIgY2FjaGVkID0gcmVxdWVzdENhY2hlLmdldChpZGVudGlmaWVyKTtcbiAgIShjYWNoZWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdbZmV0Y2hRdWVyeUludGVybmFsXSBnZXRDYWNoZWRSZXF1ZXN0OiBFeHBlY3RlZCByZXF1ZXN0IHRvIGJlIGNhY2hlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGNhY2hlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZldGNoUXVlcnk6IGZldGNoUXVlcnksXG4gIGZldGNoUXVlcnlEZWR1cGVkOiBmZXRjaFF1ZXJ5RGVkdXBlZCxcbiAgZ2V0UHJvbWlzZUZvckFjdGl2ZVJlcXVlc3Q6IGdldFByb21pc2VGb3JBY3RpdmVSZXF1ZXN0LFxuICBnZXRPYnNlcnZhYmxlRm9yQWN0aXZlUmVxdWVzdDogZ2V0T2JzZXJ2YWJsZUZvckFjdGl2ZVJlcXVlc3Rcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3N0b3JlL1JlbGF5TW9kZXJuT3BlcmF0aW9uRGVzY3JpcHRvcicpLFxuICAgIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IgPSBfcmVxdWlyZS5jcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9HcmFwaFFMVGFnJyksXG4gICAgZ2V0UmVxdWVzdCA9IF9yZXF1aXJlMi5nZXRSZXF1ZXN0O1xuXG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIHRvIGZldGNoIHRoZSByZXN1bHRzIG9mIGEgcXVlcnkuIE5vdGUgdGhhdCByZXN1bHRzIGZvclxuICogZnJhZ21lbnQgc3ByZWFkcyBhcmUgbWFza2VkOiBmaWVsZHMgbXVzdCBiZSBleHBsaWNpdGx5IGxpc3RlZCBpbiB0aGUgcXVlcnkgaW5cbiAqIG9yZGVyIHRvIGJlIGFjY2Vzc2libGUgaW4gdGhlIHJlc3VsdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZldGNoUXVlcnlfREVQUkVDQVRFRChlbnZpcm9ubWVudCwgdGFnZ2VkTm9kZSwgdmFyaWFibGVzLCBjYWNoZUNvbmZpZykge1xuICB2YXIgcXVlcnkgPSBnZXRSZXF1ZXN0KHRhZ2dlZE5vZGUpO1xuXG4gIGlmIChxdWVyeS5wYXJhbXMub3BlcmF0aW9uS2luZCAhPT0gJ3F1ZXJ5Jykge1xuICAgIHRocm93IG5ldyBFcnJvcignZmV0Y2hRdWVyeTogRXhwZWN0ZWQgcXVlcnkgb3BlcmF0aW9uJyk7XG4gIH1cblxuICB2YXIgb3BlcmF0aW9uID0gY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcihxdWVyeSwgdmFyaWFibGVzLCBjYWNoZUNvbmZpZyk7XG4gIHJldHVybiBlbnZpcm9ubWVudC5leGVjdXRlKHtcbiAgICBvcGVyYXRpb246IG9wZXJhdGlvblxuICB9KS5tYXAoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlbnZpcm9ubWVudC5sb29rdXAob3BlcmF0aW9uLmZyYWdtZW50KS5kYXRhO1xuICB9KS50b1Byb21pc2UoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmZXRjaFF1ZXJ5X0RFUFJFQ0FURUQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQUkVGSVggPSAnY2xpZW50Oic7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ2xpZW50SUQoaWQsIHN0b3JhZ2VLZXksIGluZGV4KSB7XG4gIHZhciBrZXkgPSBpZCArICc6JyArIHN0b3JhZ2VLZXk7XG5cbiAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICBrZXkgKz0gJzonICsgaW5kZXg7XG4gIH1cblxuICBpZiAoa2V5LmluZGV4T2YoUFJFRklYKSAhPT0gMCkge1xuICAgIGtleSA9IFBSRUZJWCArIGtleTtcbiAgfVxuXG4gIHJldHVybiBrZXk7XG59XG5cbmZ1bmN0aW9uIGlzQ2xpZW50SUQoaWQpIHtcbiAgcmV0dXJuIGlkLmluZGV4T2YoUFJFRklYKSA9PT0gMDtcbn1cblxudmFyIGxvY2FsSUQgPSAwO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVVuaXF1ZUNsaWVudElEKCkge1xuICByZXR1cm4gXCJcIi5jb25jYXQoUFJFRklYLCBcImxvY2FsOlwiKS5jb25jYXQobG9jYWxJRCsrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdlbmVyYXRlQ2xpZW50SUQ6IGdlbmVyYXRlQ2xpZW50SUQsXG4gIGdlbmVyYXRlVW5pcXVlQ2xpZW50SUQ6IGdlbmVyYXRlVW5pcXVlQ2xpZW50SUQsXG4gIGlzQ2xpZW50SUQ6IGlzQ2xpZW50SURcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlclwiKSk7XG5cbnZhciBSZWxheUNvbmNyZXRlTm9kZSA9IHJlcXVpcmUoJy4uL3V0aWwvUmVsYXlDb25jcmV0ZU5vZGUnKTtcblxudmFyIFJlbGF5RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUZlYXR1cmVGbGFncycpO1xuXG52YXIgUmVsYXlNb2Rlcm5SZWNvcmQgPSByZXF1aXJlKCcuL1JlbGF5TW9kZXJuUmVjb3JkJyk7XG5cbnZhciBSZWxheVJlY29yZFNvdXJjZU11dGF0b3IgPSByZXF1aXJlKCcuLi9tdXRhdGlvbnMvUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yJyk7XG5cbnZhciBSZWxheVJlY29yZFNvdXJjZVByb3h5ID0gcmVxdWlyZSgnLi4vbXV0YXRpb25zL1JlbGF5UmVjb3JkU291cmNlUHJveHknKTtcblxudmFyIFJlbGF5U3RvcmVSZWFjdEZsaWdodFV0aWxzID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlUmVhY3RGbGlnaHRVdGlscycpO1xuXG52YXIgUmVsYXlTdG9yZVV0aWxzID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlVXRpbHMnKTtcblxudmFyIGNsb25lUmVsYXlIYW5kbGVTb3VyY2VGaWVsZCA9IHJlcXVpcmUoJy4vY2xvbmVSZWxheUhhbmRsZVNvdXJjZUZpZWxkJyk7XG5cbnZhciBjbG9uZVJlbGF5U2NhbGFySGFuZGxlU291cmNlRmllbGQgPSByZXF1aXJlKCcuL2Nsb25lUmVsYXlTY2FsYXJIYW5kbGVTb3VyY2VGaWVsZCcpO1xuXG52YXIgZ2V0T3BlcmF0aW9uID0gcmVxdWlyZSgnLi4vdXRpbC9nZXRPcGVyYXRpb24nKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL0NsaWVudElEJyksXG4gICAgaXNDbGllbnRJRCA9IF9yZXF1aXJlLmlzQ2xpZW50SUQ7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuL1JlbGF5UmVjb3JkU3RhdGUnKSxcbiAgICBFWElTVEVOVCA9IF9yZXF1aXJlMi5FWElTVEVOVCxcbiAgICBVTktOT1dOID0gX3JlcXVpcmUyLlVOS05PV047XG5cbnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKCcuL1R5cGVJRCcpLFxuICAgIGdlbmVyYXRlVHlwZUlEID0gX3JlcXVpcmUzLmdlbmVyYXRlVHlwZUlEO1xuXG52YXIgQ09ORElUSU9OID0gUmVsYXlDb25jcmV0ZU5vZGUuQ09ORElUSU9OLFxuICAgIENMSUVOVF9DT01QT05FTlQgPSBSZWxheUNvbmNyZXRlTm9kZS5DTElFTlRfQ09NUE9ORU5ULFxuICAgIENMSUVOVF9FWFRFTlNJT04gPSBSZWxheUNvbmNyZXRlTm9kZS5DTElFTlRfRVhURU5TSU9OLFxuICAgIERFRkVSID0gUmVsYXlDb25jcmV0ZU5vZGUuREVGRVIsXG4gICAgRkxJR0hUX0ZJRUxEID0gUmVsYXlDb25jcmV0ZU5vZGUuRkxJR0hUX0ZJRUxELFxuICAgIEZSQUdNRU5UX1NQUkVBRCA9IFJlbGF5Q29uY3JldGVOb2RlLkZSQUdNRU5UX1NQUkVBRCxcbiAgICBJTkxJTkVfRlJBR01FTlQgPSBSZWxheUNvbmNyZXRlTm9kZS5JTkxJTkVfRlJBR01FTlQsXG4gICAgTElOS0VEX0ZJRUxEID0gUmVsYXlDb25jcmV0ZU5vZGUuTElOS0VEX0ZJRUxELFxuICAgIExJTktFRF9IQU5ETEUgPSBSZWxheUNvbmNyZXRlTm9kZS5MSU5LRURfSEFORExFLFxuICAgIE1PRFVMRV9JTVBPUlQgPSBSZWxheUNvbmNyZXRlTm9kZS5NT0RVTEVfSU1QT1JULFxuICAgIFNDQUxBUl9GSUVMRCA9IFJlbGF5Q29uY3JldGVOb2RlLlNDQUxBUl9GSUVMRCxcbiAgICBTQ0FMQVJfSEFORExFID0gUmVsYXlDb25jcmV0ZU5vZGUuU0NBTEFSX0hBTkRMRSxcbiAgICBTVFJFQU0gPSBSZWxheUNvbmNyZXRlTm9kZS5TVFJFQU0sXG4gICAgVFlQRV9ESVNDUklNSU5BVE9SID0gUmVsYXlDb25jcmV0ZU5vZGUuVFlQRV9ESVNDUklNSU5BVE9SO1xudmFyIFJPT1RfSUQgPSBSZWxheVN0b3JlVXRpbHMuUk9PVF9JRCxcbiAgICBnZXRNb2R1bGVPcGVyYXRpb25LZXkgPSBSZWxheVN0b3JlVXRpbHMuZ2V0TW9kdWxlT3BlcmF0aW9uS2V5LFxuICAgIGdldFN0b3JhZ2VLZXkgPSBSZWxheVN0b3JlVXRpbHMuZ2V0U3RvcmFnZUtleSxcbiAgICBnZXRBcmd1bWVudFZhbHVlcyA9IFJlbGF5U3RvcmVVdGlscy5nZXRBcmd1bWVudFZhbHVlcztcbi8qKlxuICogU3luY2hyb25vdXNseSBjaGVjayB3aGV0aGVyIHRoZSByZWNvcmRzIHJlcXVpcmVkIHRvIGZ1bGZpbGwgdGhlIGdpdmVuXG4gKiBgc2VsZWN0b3JgIGFyZSBwcmVzZW50IGluIGBzb3VyY2VgLlxuICpcbiAqIElmIGEgZmllbGQgaXMgbWlzc2luZywgaXQgdXNlcyB0aGUgcHJvdmlkZWQgaGFuZGxlcnMgdG8gYXR0ZW1wdCB0byBzdWJzdGl0dXRlXG4gKiBkYXRhLiBUaGUgYHRhcmdldGAgd2lsbCBzdG9yZSBhbGwgcmVjb3JkcyB0aGF0IGFyZSBtb2RpZmllZCBiZWNhdXNlIG9mIGFcbiAqIHN1Y2Nlc3NmdWwgc3Vic3RpdHV0aW9uLlxuICpcbiAqIElmIGFsbCByZWNvcmRzIGFyZSBwcmVzZW50LCByZXR1cm5zIGB0cnVlYCwgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gKi9cblxuZnVuY3Rpb24gY2hlY2soc291cmNlLCB0YXJnZXQsIHNlbGVjdG9yLCBoYW5kbGVycywgb3BlcmF0aW9uTG9hZGVyLCBnZXREYXRhSUQsIHNob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzKSB7XG4gIHZhciBkYXRhSUQgPSBzZWxlY3Rvci5kYXRhSUQsXG4gICAgICBub2RlID0gc2VsZWN0b3Iubm9kZSxcbiAgICAgIHZhcmlhYmxlcyA9IHNlbGVjdG9yLnZhcmlhYmxlcztcbiAgdmFyIGNoZWNrZXIgPSBuZXcgRGF0YUNoZWNrZXIoc291cmNlLCB0YXJnZXQsIHZhcmlhYmxlcywgaGFuZGxlcnMsIG9wZXJhdGlvbkxvYWRlciwgZ2V0RGF0YUlELCBzaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50cyk7XG4gIHJldHVybiBjaGVja2VyLmNoZWNrKG5vZGUsIGRhdGFJRCk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG52YXIgRGF0YUNoZWNrZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEYXRhQ2hlY2tlcihzb3VyY2UsIHRhcmdldCwgdmFyaWFibGVzLCBoYW5kbGVycywgb3BlcmF0aW9uTG9hZGVyLCBnZXREYXRhSUQsIHNob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzKSB7XG4gICAgdmFyIG11dGF0b3IgPSBuZXcgUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yKHNvdXJjZSwgdGFyZ2V0KTtcbiAgICB0aGlzLl9tb3N0UmVjZW50bHlJbnZhbGlkYXRlZEF0ID0gbnVsbDtcbiAgICB0aGlzLl9oYW5kbGVycyA9IGhhbmRsZXJzO1xuICAgIHRoaXMuX211dGF0b3IgPSBtdXRhdG9yO1xuICAgIHRoaXMuX29wZXJhdGlvbkxvYWRlciA9IG9wZXJhdGlvbkxvYWRlciAhPT0gbnVsbCAmJiBvcGVyYXRpb25Mb2FkZXIgIT09IHZvaWQgMCA/IG9wZXJhdGlvbkxvYWRlciA6IG51bGw7XG4gICAgdGhpcy5fcmVjb3JkU291cmNlUHJveHkgPSBuZXcgUmVsYXlSZWNvcmRTb3VyY2VQcm94eShtdXRhdG9yLCBnZXREYXRhSUQpO1xuICAgIHRoaXMuX3JlY29yZFdhc01pc3NpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fdmFyaWFibGVzID0gdmFyaWFibGVzO1xuICAgIHRoaXMuX3Nob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzID0gc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRGF0YUNoZWNrZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jaGVjayA9IGZ1bmN0aW9uIGNoZWNrKG5vZGUsIGRhdGFJRCkge1xuICAgIHRoaXMuX3RyYXZlcnNlKG5vZGUsIGRhdGFJRCk7XG5cbiAgICByZXR1cm4gdGhpcy5fcmVjb3JkV2FzTWlzc2luZyA9PT0gdHJ1ZSA/IHtcbiAgICAgIHN0YXR1czogJ21pc3NpbmcnLFxuICAgICAgbW9zdFJlY2VudGx5SW52YWxpZGF0ZWRBdDogdGhpcy5fbW9zdFJlY2VudGx5SW52YWxpZGF0ZWRBdFxuICAgIH0gOiB7XG4gICAgICBzdGF0dXM6ICdhdmFpbGFibGUnLFxuICAgICAgbW9zdFJlY2VudGx5SW52YWxpZGF0ZWRBdDogdGhpcy5fbW9zdFJlY2VudGx5SW52YWxpZGF0ZWRBdFxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLl9nZXRWYXJpYWJsZVZhbHVlID0gZnVuY3Rpb24gX2dldFZhcmlhYmxlVmFsdWUobmFtZSkge1xuICAgICF0aGlzLl92YXJpYWJsZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheUFzeW5jTG9hZGVyKCk6IFVuZGVmaW5lZCB2YXJpYWJsZSBgJXNgLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cbiAgICByZXR1cm4gdGhpcy5fdmFyaWFibGVzW25hbWVdO1xuICB9O1xuXG4gIF9wcm90by5faGFuZGxlTWlzc2luZyA9IGZ1bmN0aW9uIF9oYW5kbGVNaXNzaW5nKCkge1xuICAgIHRoaXMuX3JlY29yZFdhc01pc3NpbmcgPSB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5fZ2V0RGF0YUZvckhhbmRsZXJzID0gZnVuY3Rpb24gX2dldERhdGFGb3JIYW5kbGVycyhmaWVsZCwgZGF0YUlEKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFyZ3M6IGZpZWxkLmFyZ3MgPyBnZXRBcmd1bWVudFZhbHVlcyhmaWVsZC5hcmdzLCB0aGlzLl92YXJpYWJsZXMpIDoge30sXG4gICAgICAvLyBHZXR0aW5nIGEgc25hcHNob3Qgb2YgdGhlIHJlY29yZCBzdGF0ZSBpcyBwb3RlbnRpYWxseSBleHBlbnNpdmUgc2luY2VcbiAgICAgIC8vIHdlIHdpbGwgbmVlZCB0byBtZXJnZSB0aGUgc2luayBhbmQgc291cmNlIHJlY29yZHMuIFNpbmNlIHdlIGRvIG5vdCBjcmVhdGVcbiAgICAgIC8vIGFueSBuZXcgcmVjb3JkcyBpbiB0aGlzIHByb2Nlc3MsIGl0IGlzIHByb2JhYmx5IHJlYXNvbmFibGUgdG8gcHJvdmlkZVxuICAgICAgLy8gaGFuZGxlcnMgd2l0aCBhIGNvcHkgb2YgdGhlIHNvdXJjZSByZWNvcmQuXG4gICAgICAvLyBUaGUgb25seSB0aGluZyB0aGF0IHRoZSBwcm92aWRlZCByZWNvcmQgd2lsbCBub3QgY29udGFpbiBpcyBmaWVsZHNcbiAgICAgIC8vIGFkZGVkIGJ5IHByZXZpb3VzIGhhbmRsZXJzLlxuICAgICAgcmVjb3JkOiB0aGlzLl9zb3VyY2UuZ2V0KGRhdGFJRClcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5faGFuZGxlTWlzc2luZ1NjYWxhckZpZWxkID0gZnVuY3Rpb24gX2hhbmRsZU1pc3NpbmdTY2FsYXJGaWVsZChmaWVsZCwgZGF0YUlEKSB7XG4gICAgaWYgKGZpZWxkLm5hbWUgPT09ICdpZCcgJiYgZmllbGQuYWxpYXMgPT0gbnVsbCAmJiBpc0NsaWVudElEKGRhdGFJRCkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJF9nZXREYXRhRm9ySGFuZCA9IHRoaXMuX2dldERhdGFGb3JIYW5kbGVycyhmaWVsZCwgZGF0YUlEKSxcbiAgICAgICAgYXJncyA9IF90aGlzJF9nZXREYXRhRm9ySGFuZC5hcmdzLFxuICAgICAgICByZWNvcmQgPSBfdGhpcyRfZ2V0RGF0YUZvckhhbmQucmVjb3JkO1xuXG4gICAgdmFyIF9pdGVyYXRvciA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKSh0aGlzLl9oYW5kbGVycyksXG4gICAgICAgIF9zdGVwO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgaWYgKGhhbmRsZXIua2luZCA9PT0gJ3NjYWxhcicpIHtcbiAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBoYW5kbGVyLmhhbmRsZShmaWVsZCwgcmVjb3JkLCBhcmdzLCB0aGlzLl9yZWNvcmRTb3VyY2VQcm94eSk7XG5cbiAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9oYW5kbGVNaXNzaW5nKCk7XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVNaXNzaW5nTGlua0ZpZWxkID0gZnVuY3Rpb24gX2hhbmRsZU1pc3NpbmdMaW5rRmllbGQoZmllbGQsIGRhdGFJRCkge1xuICAgIHZhciBfdGhpcyRfZ2V0RGF0YUZvckhhbmQyID0gdGhpcy5fZ2V0RGF0YUZvckhhbmRsZXJzKGZpZWxkLCBkYXRhSUQpLFxuICAgICAgICBhcmdzID0gX3RoaXMkX2dldERhdGFGb3JIYW5kMi5hcmdzLFxuICAgICAgICByZWNvcmQgPSBfdGhpcyRfZ2V0RGF0YUZvckhhbmQyLnJlY29yZDtcblxuICAgIHZhciBfaXRlcmF0b3IyID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKHRoaXMuX2hhbmRsZXJzKSxcbiAgICAgICAgX3N0ZXAyO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgIGlmIChoYW5kbGVyLmtpbmQgPT09ICdsaW5rZWQnKSB7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlID0gaGFuZGxlci5oYW5kbGUoZmllbGQsIHJlY29yZCwgYXJncywgdGhpcy5fcmVjb3JkU291cmNlUHJveHkpO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSB1bmRlZmluZWQgJiYgKG5ld1ZhbHVlID09PSBudWxsIHx8IHRoaXMuX211dGF0b3IuZ2V0U3RhdHVzKG5ld1ZhbHVlKSA9PT0gRVhJU1RFTlQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IyLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yMi5mKCk7XG4gICAgfVxuXG4gICAgdGhpcy5faGFuZGxlTWlzc2luZygpO1xuICB9O1xuXG4gIF9wcm90by5faGFuZGxlTWlzc2luZ1BsdXJhbExpbmtGaWVsZCA9IGZ1bmN0aW9uIF9oYW5kbGVNaXNzaW5nUGx1cmFsTGlua0ZpZWxkKGZpZWxkLCBkYXRhSUQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJF9nZXREYXRhRm9ySGFuZDMgPSB0aGlzLl9nZXREYXRhRm9ySGFuZGxlcnMoZmllbGQsIGRhdGFJRCksXG4gICAgICAgIGFyZ3MgPSBfdGhpcyRfZ2V0RGF0YUZvckhhbmQzLmFyZ3MsXG4gICAgICAgIHJlY29yZCA9IF90aGlzJF9nZXREYXRhRm9ySGFuZDMucmVjb3JkO1xuXG4gICAgdmFyIF9pdGVyYXRvcjMgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkodGhpcy5faGFuZGxlcnMpLFxuICAgICAgICBfc3RlcDM7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IzLnMoKTsgIShfc3RlcDMgPSBfaXRlcmF0b3IzLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBfc3RlcDMudmFsdWU7XG5cbiAgICAgICAgaWYgKGhhbmRsZXIua2luZCA9PT0gJ3BsdXJhbExpbmtlZCcpIHtcbiAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBoYW5kbGVyLmhhbmRsZShmaWVsZCwgcmVjb3JkLCBhcmdzLCB0aGlzLl9yZWNvcmRTb3VyY2VQcm94eSk7XG5cbiAgICAgICAgICBpZiAobmV3VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGFsbEl0ZW1zS25vd24gPSBuZXdWYWx1ZS5ldmVyeShmdW5jdGlvbiAobGlua2VkSUQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGxpbmtlZElEICE9IG51bGwgJiYgX3RoaXMuX211dGF0b3IuZ2V0U3RhdHVzKGxpbmtlZElEKSA9PT0gRVhJU1RFTlQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGFsbEl0ZW1zS25vd24pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAobmV3VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yMy5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvcjMuZigpO1xuICAgIH1cblxuICAgIHRoaXMuX2hhbmRsZU1pc3NpbmcoKTtcbiAgfTtcblxuICBfcHJvdG8uX3RyYXZlcnNlID0gZnVuY3Rpb24gX3RyYXZlcnNlKG5vZGUsIGRhdGFJRCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLl9tdXRhdG9yLmdldFN0YXR1cyhkYXRhSUQpO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5LTk9XTikge1xuICAgICAgdGhpcy5faGFuZGxlTWlzc2luZygpO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IEVYSVNURU5UKSB7XG4gICAgICB2YXIgcmVjb3JkID0gdGhpcy5fc291cmNlLmdldChkYXRhSUQpO1xuXG4gICAgICB2YXIgaW52YWxpZGF0ZWRBdCA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldEludmFsaWRhdGlvbkVwb2NoKHJlY29yZCk7XG5cbiAgICAgIGlmIChpbnZhbGlkYXRlZEF0ICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5fbW9zdFJlY2VudGx5SW52YWxpZGF0ZWRBdCA9IHRoaXMuX21vc3RSZWNlbnRseUludmFsaWRhdGVkQXQgIT0gbnVsbCA/IE1hdGgubWF4KHRoaXMuX21vc3RSZWNlbnRseUludmFsaWRhdGVkQXQsIGludmFsaWRhdGVkQXQpIDogaW52YWxpZGF0ZWRBdDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKG5vZGUuc2VsZWN0aW9ucywgZGF0YUlEKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl90cmF2ZXJzZVNlbGVjdGlvbnMgPSBmdW5jdGlvbiBfdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbnMsIGRhdGFJRCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgc2VsZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgIHN3aXRjaCAoc2VsZWN0aW9uLmtpbmQpIHtcbiAgICAgICAgY2FzZSBTQ0FMQVJfRklFTEQ6XG4gICAgICAgICAgX3RoaXMyLl9jaGVja1NjYWxhcihzZWxlY3Rpb24sIGRhdGFJRCk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIExJTktFRF9GSUVMRDpcbiAgICAgICAgICBpZiAoc2VsZWN0aW9uLnBsdXJhbCkge1xuICAgICAgICAgICAgX3RoaXMyLl9jaGVja1BsdXJhbExpbmsoc2VsZWN0aW9uLCBkYXRhSUQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpczIuX2NoZWNrTGluayhzZWxlY3Rpb24sIGRhdGFJRCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDT05ESVRJT046XG4gICAgICAgICAgdmFyIGNvbmRpdGlvblZhbHVlID0gX3RoaXMyLl9nZXRWYXJpYWJsZVZhbHVlKHNlbGVjdGlvbi5jb25kaXRpb24pO1xuXG4gICAgICAgICAgaWYgKGNvbmRpdGlvblZhbHVlID09PSBzZWxlY3Rpb24ucGFzc2luZ1ZhbHVlKSB7XG4gICAgICAgICAgICBfdGhpczIuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uc2VsZWN0aW9ucywgZGF0YUlEKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIElOTElORV9GUkFHTUVOVDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgYWJzdHJhY3RLZXkgPSBzZWxlY3Rpb24uYWJzdHJhY3RLZXk7XG5cbiAgICAgICAgICAgIGlmIChhYnN0cmFjdEtleSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgIC8vIGNvbmNyZXRlIHR5cGUgcmVmaW5lbWVudDogb25seSBjaGVjayBkYXRhIGlmIHRoZSB0eXBlIGV4YWN0bHkgbWF0Y2hlc1xuICAgICAgICAgICAgICB2YXIgdHlwZU5hbWUgPSBfdGhpczIuX211dGF0b3IuZ2V0VHlwZShkYXRhSUQpO1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlTmFtZSA9PT0gc2VsZWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBfdGhpczIuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uc2VsZWN0aW9ucywgZGF0YUlEKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUFJFQ0lTRV9UWVBFX1JFRklORU1FTlQpIHtcbiAgICAgICAgICAgICAgLy8gQWJzdHJhY3QgcmVmaW5lbWVudDogY2hlY2sgZGF0YSBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgdHlwZVxuICAgICAgICAgICAgICAvLyBjb25mb3JtcyB0byB0aGUgaW50ZXJmYWNlL3VuaW9uIG9yIG5vdDpcbiAgICAgICAgICAgICAgLy8gLSBUeXBlIGtub3duIHRvIF9ub3RfIGltcGxlbWVudCB0aGUgaW50ZXJmYWNlOiBkb24ndCBjaGVjayB0aGUgc2VsZWN0aW9ucy5cbiAgICAgICAgICAgICAgLy8gLSBUeXBlIGlzIGtub3duIF90b18gaW1wbGVtZW50IHRoZSBpbnRlcmZhY2U6IGNoZWNrIHNlbGVjdGlvbnMuXG4gICAgICAgICAgICAgIC8vIC0gVW5rbm93biB3aGV0aGVyIHRoZSB0eXBlIGltcGxlbWVudHMgdGhlIGludGVyZmFjZTogZG9uJ3QgY2hlY2sgdGhlIHNlbGVjdGlvbnNcbiAgICAgICAgICAgICAgLy8gICBhbmQgdHJlYXQgdGhlIGRhdGEgYXMgbWlzc2luZzsgd2UgZG8gdGhpcyBiZWNhdXNlIHRoZSBSZWxheSBDb21waWxlclxuICAgICAgICAgICAgICAvLyAgIGd1YXJhbnRlZXMgdGhhdCB0aGUgdHlwZSBkaXNjcmltaW5hdG9yIHdpbGwgYWx3YXlzIGJlIGZldGNoZWQuXG4gICAgICAgICAgICAgIHZhciByZWNvcmRUeXBlID0gX3RoaXMyLl9tdXRhdG9yLmdldFR5cGUoZGF0YUlEKTtcblxuICAgICAgICAgICAgICAhKHJlY29yZFR5cGUgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdEYXRhQ2hlY2tlcjogRXhwZWN0ZWQgcmVjb3JkIGAlc2AgdG8gaGF2ZSBhIGtub3duIHR5cGUnLCBkYXRhSUQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgdmFyIHR5cGVJRCA9IGdlbmVyYXRlVHlwZUlEKHJlY29yZFR5cGUpO1xuXG4gICAgICAgICAgICAgIHZhciBpbXBsZW1lbnRzSW50ZXJmYWNlID0gX3RoaXMyLl9tdXRhdG9yLmdldFZhbHVlKHR5cGVJRCwgYWJzdHJhY3RLZXkpO1xuXG4gICAgICAgICAgICAgIGlmIChpbXBsZW1lbnRzSW50ZXJmYWNlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMyLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLnNlbGVjdGlvbnMsIGRhdGFJRCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW1wbGVtZW50c0ludGVyZmFjZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gdW5zdXJlIGlmIHRoZSB0eXBlIGltcGxlbWVudHMgdGhlIGludGVyZmFjZTogZGF0YSBpc1xuICAgICAgICAgICAgICAgIC8vIG1pc3Npbmcgc28gZG9uJ3QgYm90aGVyIHJlYWRpbmcgdGhlIGZyYWdtZW50XG4gICAgICAgICAgICAgICAgX3RoaXMyLl9oYW5kbGVNaXNzaW5nKCk7XG4gICAgICAgICAgICAgIH0gLy8gZWxzZSBmYWxzZToga25vd24gdG8gbm90IGltcGxlbWVudCB0aGUgaW50ZXJmYWNlXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGxlZ2FjeSBiZWhhdmlvciBmb3IgYWJzdHJhY3QgcmVmaW5lbWVudHM6IGFsd2F5cyBjaGVjayBldmVuXG4gICAgICAgICAgICAgIC8vIGlmIHRoZSB0eXBlIGRvZXNuJ3QgY29uZm9ybVxuICAgICAgICAgICAgICBfdGhpczIuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uc2VsZWN0aW9ucywgZGF0YUlEKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgTElOS0VEX0hBTkRMRTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICAvLyBIYW5kbGVzIGhhdmUgbm8gc2VsZWN0aW9ucyB0aGVtc2VsdmVzOyB0cmF2ZXJzZSB0aGUgb3JpZ2luYWwgZmllbGRcbiAgICAgICAgICAgIC8vIHdoZXJlIHRoZSBoYW5kbGUgd2FzIHNldC11cCBpbnN0ZWFkLlxuICAgICAgICAgICAgdmFyIGhhbmRsZUZpZWxkID0gY2xvbmVSZWxheUhhbmRsZVNvdXJjZUZpZWxkKHNlbGVjdGlvbiwgc2VsZWN0aW9ucywgX3RoaXMyLl92YXJpYWJsZXMpO1xuXG4gICAgICAgICAgICBpZiAoaGFuZGxlRmllbGQucGx1cmFsKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5fY2hlY2tQbHVyYWxMaW5rKGhhbmRsZUZpZWxkLCBkYXRhSUQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgX3RoaXMyLl9jaGVja0xpbmsoaGFuZGxlRmllbGQsIGRhdGFJRCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIFNDQUxBUl9IQU5ETEU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIF9oYW5kbGVGaWVsZCA9IGNsb25lUmVsYXlTY2FsYXJIYW5kbGVTb3VyY2VGaWVsZChzZWxlY3Rpb24sIHNlbGVjdGlvbnMsIF90aGlzMi5fdmFyaWFibGVzKTtcblxuICAgICAgICAgICAgX3RoaXMyLl9jaGVja1NjYWxhcihfaGFuZGxlRmllbGQsIGRhdGFJRCk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIE1PRFVMRV9JTVBPUlQ6XG4gICAgICAgICAgX3RoaXMyLl9jaGVja01vZHVsZUltcG9ydChzZWxlY3Rpb24sIGRhdGFJRCk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIERFRkVSOlxuICAgICAgICBjYXNlIFNUUkVBTTpcbiAgICAgICAgICBfdGhpczIuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uc2VsZWN0aW9ucywgZGF0YUlEKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXVxuXG4gICAgICAgIGNhc2UgRlJBR01FTlRfU1BSRUFEOlxuICAgICAgICAgIF90aGlzMi5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5mcmFnbWVudC5zZWxlY3Rpb25zLCBkYXRhSUQpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDTElFTlRfRVhURU5TSU9OOlxuICAgICAgICAgIHZhciByZWNvcmRXYXNNaXNzaW5nID0gX3RoaXMyLl9yZWNvcmRXYXNNaXNzaW5nO1xuXG4gICAgICAgICAgX3RoaXMyLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLnNlbGVjdGlvbnMsIGRhdGFJRCk7XG5cbiAgICAgICAgICBfdGhpczIuX3JlY29yZFdhc01pc3NpbmcgPSByZWNvcmRXYXNNaXNzaW5nO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgVFlQRV9ESVNDUklNSU5BVE9SOlxuICAgICAgICAgIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUFJFQ0lTRV9UWVBFX1JFRklORU1FTlQpIHtcbiAgICAgICAgICAgIHZhciBfYWJzdHJhY3RLZXkgPSBzZWxlY3Rpb24uYWJzdHJhY3RLZXk7XG5cbiAgICAgICAgICAgIHZhciBfcmVjb3JkVHlwZSA9IF90aGlzMi5fbXV0YXRvci5nZXRUeXBlKGRhdGFJRCk7XG5cbiAgICAgICAgICAgICEoX3JlY29yZFR5cGUgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdEYXRhQ2hlY2tlcjogRXhwZWN0ZWQgcmVjb3JkIGAlc2AgdG8gaGF2ZSBhIGtub3duIHR5cGUnLCBkYXRhSUQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgICAgICAgICAgdmFyIF90eXBlSUQgPSBnZW5lcmF0ZVR5cGVJRChfcmVjb3JkVHlwZSk7XG5cbiAgICAgICAgICAgIHZhciBfaW1wbGVtZW50c0ludGVyZmFjZSA9IF90aGlzMi5fbXV0YXRvci5nZXRWYWx1ZShfdHlwZUlELCBfYWJzdHJhY3RLZXkpO1xuXG4gICAgICAgICAgICBpZiAoX2ltcGxlbWVudHNJbnRlcmZhY2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyB1bnN1cmUgaWYgdGhlIHR5cGUgaW1wbGVtZW50cyB0aGUgaW50ZXJmYWNlOiBkYXRhIGlzXG4gICAgICAgICAgICAgIC8vIG1pc3NpbmdcbiAgICAgICAgICAgICAgX3RoaXMyLl9oYW5kbGVNaXNzaW5nKCk7XG4gICAgICAgICAgICB9IC8vIGVsc2U6IGlmIGl0IGRvZXMgb3IgZG9lc24ndCBpbXBsZW1lbnQsIHdlIGRvbid0IG5lZWQgdG8gY2hlY2sgb3Igc2tpcCBhbnl0aGluZyBlbHNlXG5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEZMSUdIVF9GSUVMRDpcbiAgICAgICAgICBpZiAoUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX1JFQUNUX0ZMSUdIVF9DT01QT05FTlRfRklFTEQpIHtcbiAgICAgICAgICAgIF90aGlzMi5fY2hlY2tGbGlnaHRGaWVsZChzZWxlY3Rpb24sIGRhdGFJRCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmxpZ2h0IGZpZWxkcyBhcmUgbm90IHlldCBzdXBwb3J0ZWQuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDTElFTlRfQ09NUE9ORU5UOlxuICAgICAgICAgIGlmIChfdGhpczIuX3Nob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMyLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLmZyYWdtZW50LnNlbGVjdGlvbnMsIGRhdGFJRCk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHNlbGVjdGlvbjtcbiAgICAgICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheUFzeW5jTG9hZGVyKCk6IFVuZXhwZWN0ZWQgYXN0IGtpbmQgYCVzYC4nLCBzZWxlY3Rpb24ua2luZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5fY2hlY2tNb2R1bGVJbXBvcnQgPSBmdW5jdGlvbiBfY2hlY2tNb2R1bGVJbXBvcnQobW9kdWxlSW1wb3J0LCBkYXRhSUQpIHtcbiAgICB2YXIgb3BlcmF0aW9uTG9hZGVyID0gdGhpcy5fb3BlcmF0aW9uTG9hZGVyO1xuICAgICEob3BlcmF0aW9uTG9hZGVyICE9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0RhdGFDaGVja2VyOiBFeHBlY3RlZCBhbiBvcGVyYXRpb25Mb2FkZXIgdG8gYmUgY29uZmlndXJlZCB3aGVuIHVzaW5nIGBAbW9kdWxlYC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIG9wZXJhdGlvbktleSA9IGdldE1vZHVsZU9wZXJhdGlvbktleShtb2R1bGVJbXBvcnQuZG9jdW1lbnROYW1lKTtcblxuICAgIHZhciBvcGVyYXRpb25SZWZlcmVuY2UgPSB0aGlzLl9tdXRhdG9yLmdldFZhbHVlKGRhdGFJRCwgb3BlcmF0aW9uS2V5KTtcblxuICAgIGlmIChvcGVyYXRpb25SZWZlcmVuY2UgPT0gbnVsbCkge1xuICAgICAgaWYgKG9wZXJhdGlvblJlZmVyZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZU1pc3NpbmcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBub3JtYWxpemF0aW9uUm9vdE5vZGUgPSBvcGVyYXRpb25Mb2FkZXIuZ2V0KG9wZXJhdGlvblJlZmVyZW5jZSk7XG5cbiAgICBpZiAobm9ybWFsaXphdGlvblJvb3ROb2RlICE9IG51bGwpIHtcbiAgICAgIHZhciBvcGVyYXRpb24gPSBnZXRPcGVyYXRpb24obm9ybWFsaXphdGlvblJvb3ROb2RlKTtcblxuICAgICAgdGhpcy5fdHJhdmVyc2Uob3BlcmF0aW9uLCBkYXRhSUQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgZnJhZ21lbnQgaXMgbm90IGF2YWlsYWJsZSwgd2UgYXNzdW1lIHRoYXQgdGhlIGRhdGEgY2Fubm90IGhhdmUgYmVlblxuICAgICAgLy8gcHJvY2Vzc2VkIHlldCBhbmQgbXVzdCB0aGVyZWZvcmUgYmUgbWlzc2luZy5cbiAgICAgIHRoaXMuX2hhbmRsZU1pc3NpbmcoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9jaGVja1NjYWxhciA9IGZ1bmN0aW9uIF9jaGVja1NjYWxhcihmaWVsZCwgZGF0YUlEKSB7XG4gICAgdmFyIHN0b3JhZ2VLZXkgPSBnZXRTdG9yYWdlS2V5KGZpZWxkLCB0aGlzLl92YXJpYWJsZXMpO1xuXG4gICAgdmFyIGZpZWxkVmFsdWUgPSB0aGlzLl9tdXRhdG9yLmdldFZhbHVlKGRhdGFJRCwgc3RvcmFnZUtleSk7XG5cbiAgICBpZiAoZmllbGRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmaWVsZFZhbHVlID0gdGhpcy5faGFuZGxlTWlzc2luZ1NjYWxhckZpZWxkKGZpZWxkLCBkYXRhSUQpO1xuXG4gICAgICBpZiAoZmllbGRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX211dGF0b3Iuc2V0VmFsdWUoZGF0YUlELCBzdG9yYWdlS2V5LCBmaWVsZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9jaGVja0xpbmsgPSBmdW5jdGlvbiBfY2hlY2tMaW5rKGZpZWxkLCBkYXRhSUQpIHtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0b3JhZ2VLZXkoZmllbGQsIHRoaXMuX3ZhcmlhYmxlcyk7XG5cbiAgICB2YXIgbGlua2VkSUQgPSB0aGlzLl9tdXRhdG9yLmdldExpbmtlZFJlY29yZElEKGRhdGFJRCwgc3RvcmFnZUtleSk7XG5cbiAgICBpZiAobGlua2VkSUQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbGlua2VkSUQgPSB0aGlzLl9oYW5kbGVNaXNzaW5nTGlua0ZpZWxkKGZpZWxkLCBkYXRhSUQpO1xuXG4gICAgICBpZiAobGlua2VkSUQgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9tdXRhdG9yLnNldExpbmtlZFJlY29yZElEKGRhdGFJRCwgc3RvcmFnZUtleSwgbGlua2VkSUQpO1xuICAgICAgfSBlbHNlIGlmIChsaW5rZWRJRCA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9tdXRhdG9yLnNldFZhbHVlKGRhdGFJRCwgc3RvcmFnZUtleSwgbnVsbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxpbmtlZElEICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3RyYXZlcnNlKGZpZWxkLCBsaW5rZWRJRCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fY2hlY2tQbHVyYWxMaW5rID0gZnVuY3Rpb24gX2NoZWNrUGx1cmFsTGluayhmaWVsZCwgZGF0YUlEKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0b3JhZ2VLZXkoZmllbGQsIHRoaXMuX3ZhcmlhYmxlcyk7XG5cbiAgICB2YXIgbGlua2VkSURzID0gdGhpcy5fbXV0YXRvci5nZXRMaW5rZWRSZWNvcmRJRHMoZGF0YUlELCBzdG9yYWdlS2V5KTtcblxuICAgIGlmIChsaW5rZWRJRHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbGlua2VkSURzID0gdGhpcy5faGFuZGxlTWlzc2luZ1BsdXJhbExpbmtGaWVsZChmaWVsZCwgZGF0YUlEKTtcblxuICAgICAgaWYgKGxpbmtlZElEcyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX211dGF0b3Iuc2V0TGlua2VkUmVjb3JkSURzKGRhdGFJRCwgc3RvcmFnZUtleSwgbGlua2VkSURzKTtcbiAgICAgIH0gZWxzZSBpZiAobGlua2VkSURzID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX211dGF0b3Iuc2V0VmFsdWUoZGF0YUlELCBzdG9yYWdlS2V5LCBudWxsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobGlua2VkSURzKSB7XG4gICAgICBsaW5rZWRJRHMuZm9yRWFjaChmdW5jdGlvbiAobGlua2VkSUQpIHtcbiAgICAgICAgaWYgKGxpbmtlZElEICE9IG51bGwpIHtcbiAgICAgICAgICBfdGhpczMuX3RyYXZlcnNlKGZpZWxkLCBsaW5rZWRJRCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX2NoZWNrRmxpZ2h0RmllbGQgPSBmdW5jdGlvbiBfY2hlY2tGbGlnaHRGaWVsZChmaWVsZCwgZGF0YUlEKSB7XG4gICAgdmFyIHN0b3JhZ2VLZXkgPSBnZXRTdG9yYWdlS2V5KGZpZWxkLCB0aGlzLl92YXJpYWJsZXMpO1xuXG4gICAgdmFyIGxpbmtlZElEID0gdGhpcy5fbXV0YXRvci5nZXRMaW5rZWRSZWNvcmRJRChkYXRhSUQsIHN0b3JhZ2VLZXkpO1xuXG4gICAgaWYgKGxpbmtlZElEID09IG51bGwpIHtcbiAgICAgIGlmIChsaW5rZWRJRCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZU1pc3NpbmcoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdHJlZSA9IHRoaXMuX211dGF0b3IuZ2V0VmFsdWUobGlua2VkSUQsIFJlbGF5U3RvcmVSZWFjdEZsaWdodFV0aWxzLlJFQUNUX0ZMSUdIVF9UUkVFX1NUT1JBR0VfS0VZKTtcblxuICAgIHZhciByZWFjaGFibGVFeGVjdXRhYmxlRGVmaW5pdGlvbnMgPSB0aGlzLl9tdXRhdG9yLmdldFZhbHVlKGxpbmtlZElELCBSZWxheVN0b3JlUmVhY3RGbGlnaHRVdGlscy5SRUFDVF9GTElHSFRfRVhFQ1VUQUJMRV9ERUZJTklUSU9OU19TVE9SQUdFX0tFWSk7XG5cbiAgICBpZiAodHJlZSA9PSBudWxsIHx8ICFBcnJheS5pc0FycmF5KHJlYWNoYWJsZUV4ZWN1dGFibGVEZWZpbml0aW9ucykpIHtcbiAgICAgIHRoaXMuX2hhbmRsZU1pc3NpbmcoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvcGVyYXRpb25Mb2FkZXIgPSB0aGlzLl9vcGVyYXRpb25Mb2FkZXI7XG4gICAgIShvcGVyYXRpb25Mb2FkZXIgIT09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRGF0YUNoZWNrZXI6IEV4cGVjdGVkIGFuIG9wZXJhdGlvbkxvYWRlciB0byBiZSBjb25maWd1cmVkIHdoZW4gdXNpbmcgJyArICdSZWFjdCBGbGlnaHQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyBJbiBGbGlnaHQsIHRoZSB2YXJpYWJsZXMgdGhhdCBhcmUgaW4gc2NvcGUgZm9yIHJlYWNoYWJsZSBleGVjdXRhYmxlXG4gICAgLy8gZGVmaW5pdGlvbnMgYXJlbid0IHRoZSBzYW1lIGFzIHdoYXQncyBpbiBzY29wZSBmb3IgdGhlIG91dGVyIHF1ZXJ5LlxuXG4gICAgdmFyIHByZXZWYXJpYWJsZXMgPSB0aGlzLl92YXJpYWJsZXM7IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdXG5cbiAgICB2YXIgX2l0ZXJhdG9yNCA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShyZWFjaGFibGVFeGVjdXRhYmxlRGVmaW5pdGlvbnMpLFxuICAgICAgICBfc3RlcDQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGRlZmluaXRpb24gPSBfc3RlcDQudmFsdWU7XG4gICAgICAgIHRoaXMuX3ZhcmlhYmxlcyA9IGRlZmluaXRpb24udmFyaWFibGVzO1xuICAgICAgICB2YXIgbm9ybWFsaXphdGlvblJvb3ROb2RlID0gb3BlcmF0aW9uTG9hZGVyLmdldChkZWZpbml0aW9uLm1vZHVsZSk7XG5cbiAgICAgICAgaWYgKG5vcm1hbGl6YXRpb25Sb290Tm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgdmFyIG9wZXJhdGlvbiA9IGdldE9wZXJhdGlvbihub3JtYWxpemF0aW9uUm9vdE5vZGUpO1xuXG4gICAgICAgICAgdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKG9wZXJhdGlvbi5zZWxlY3Rpb25zLCBST09UX0lEKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZnJhZ21lbnQgaXMgbm90IGF2YWlsYWJsZSwgd2UgYXNzdW1lIHRoYXQgdGhlIGRhdGEgY2Fubm90IGhhdmVcbiAgICAgICAgICAvLyBiZWVuIHByb2Nlc3NlZCB5ZXQgYW5kIG11c3QgdGhlcmVmb3JlIGJlIG1pc3NpbmcuXG4gICAgICAgICAgdGhpcy5faGFuZGxlTWlzc2luZygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3I0LmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yNC5mKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdmFyaWFibGVzID0gcHJldlZhcmlhYmxlcztcbiAgfTtcblxuICByZXR1cm4gRGF0YUNoZWNrZXI7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjaGVjazogY2hlY2tcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcblxudmFyIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlclwiKSk7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiKSk7XG5cbnZhciBSZWxheUVycm9yID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUVycm9yJyk7XG5cbnZhciBSZWxheUZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4uL3V0aWwvUmVsYXlGZWF0dXJlRmxhZ3MnKTtcblxudmFyIFJlbGF5TW9kZXJuUmVjb3JkID0gcmVxdWlyZSgnLi9SZWxheU1vZGVyblJlY29yZCcpO1xuXG52YXIgUmVsYXlPYnNlcnZhYmxlID0gcmVxdWlyZSgnLi4vbmV0d29yay9SZWxheU9ic2VydmFibGUnKTtcblxudmFyIFJlbGF5UmVjb3JkU291cmNlID0gcmVxdWlyZSgnLi9SZWxheVJlY29yZFNvdXJjZScpO1xuXG52YXIgUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXIgPSByZXF1aXJlKCcuL1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyJyk7XG5cbnZhciBnZXRPcGVyYXRpb24gPSByZXF1aXJlKCcuLi91dGlsL2dldE9wZXJhdGlvbicpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBzdGFibGVDb3B5ID0gcmVxdWlyZSgnLi4vdXRpbC9zdGFibGVDb3B5Jyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vQ2xpZW50SUQnKSxcbiAgICBnZW5lcmF0ZUNsaWVudElEID0gX3JlcXVpcmUuZ2VuZXJhdGVDbGllbnRJRCxcbiAgICBnZW5lcmF0ZVVuaXF1ZUNsaWVudElEID0gX3JlcXVpcmUuZ2VuZXJhdGVVbmlxdWVDbGllbnRJRDtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vUmVsYXlNb2Rlcm5TZWxlY3RvcicpLFxuICAgIGNyZWF0ZU5vcm1hbGl6YXRpb25TZWxlY3RvciA9IF9yZXF1aXJlMi5jcmVhdGVOb3JtYWxpemF0aW9uU2VsZWN0b3IsXG4gICAgY3JlYXRlUmVhZGVyU2VsZWN0b3IgPSBfcmVxdWlyZTIuY3JlYXRlUmVhZGVyU2VsZWN0b3I7XG5cbnZhciBfcmVxdWlyZTMgPSByZXF1aXJlKCcuL1JlbGF5U3RvcmVVdGlscycpLFxuICAgIFJPT1RfVFlQRSA9IF9yZXF1aXJlMy5ST09UX1RZUEUsXG4gICAgVFlQRU5BTUVfS0VZID0gX3JlcXVpcmUzLlRZUEVOQU1FX0tFWSxcbiAgICBnZXRTdG9yYWdlS2V5ID0gX3JlcXVpcmUzLmdldFN0b3JhZ2VLZXk7XG5cbmZ1bmN0aW9uIGV4ZWN1dGUoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgRXhlY3V0b3IoY29uZmlnKTtcbn1cbi8qKlxuICogQ29vcmRpbmF0ZXMgdGhlIGV4ZWN1dGlvbiBvZiBhIHF1ZXJ5LCBoYW5kbGluZyBuZXR3b3JrIGNhbGxiYWNrc1xuICogaW5jbHVkaW5nIG9wdGltaXN0aWMgcGF5bG9hZHMsIHN0YW5kYXJkIHBheWxvYWRzLCByZXNvbHV0aW9uIG9mIG1hdGNoXG4gKiBkZXBlbmRlbmNpZXMsIGV0Yy5cbiAqL1xuXG5cbnZhciBFeGVjdXRvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEV4ZWN1dG9yKF9yZWYpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIG9wZXJhdGlvbiA9IF9yZWYub3BlcmF0aW9uLFxuICAgICAgICBvcGVyYXRpb25FeGVjdXRpb25zID0gX3JlZi5vcGVyYXRpb25FeGVjdXRpb25zLFxuICAgICAgICBvcGVyYXRpb25Mb2FkZXIgPSBfcmVmLm9wZXJhdGlvbkxvYWRlcixcbiAgICAgICAgb3B0aW1pc3RpY0NvbmZpZyA9IF9yZWYub3B0aW1pc3RpY0NvbmZpZyxcbiAgICAgICAgcHVibGlzaFF1ZXVlID0gX3JlZi5wdWJsaXNoUXVldWUsXG4gICAgICAgIHNjaGVkdWxlciA9IF9yZWYuc2NoZWR1bGVyLFxuICAgICAgICBzaW5rID0gX3JlZi5zaW5rLFxuICAgICAgICBzb3VyY2UgPSBfcmVmLnNvdXJjZSxcbiAgICAgICAgc3RvcmUgPSBfcmVmLnN0b3JlLFxuICAgICAgICB1cGRhdGVyID0gX3JlZi51cGRhdGVyLFxuICAgICAgICBvcGVyYXRpb25UcmFja2VyID0gX3JlZi5vcGVyYXRpb25UcmFja2VyLFxuICAgICAgICB0cmVhdE1pc3NpbmdGaWVsZHNBc051bGwgPSBfcmVmLnRyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCxcbiAgICAgICAgZ2V0RGF0YUlEID0gX3JlZi5nZXREYXRhSUQsXG4gICAgICAgIGlzQ2xpZW50UGF5bG9hZCA9IF9yZWYuaXNDbGllbnRQYXlsb2FkLFxuICAgICAgICByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIgPSBfcmVmLnJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcixcbiAgICAgICAgcmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXIgPSBfcmVmLnJlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyLFxuICAgICAgICBzaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50cyA9IF9yZWYuc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHM7XG4gICAgdGhpcy5fZ2V0RGF0YUlEID0gZ2V0RGF0YUlEO1xuICAgIHRoaXMuX3RyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCA9IHRyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbDtcbiAgICB0aGlzLl9pbmNyZW1lbnRhbFBheWxvYWRzUGVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX2luY3JlbWVudGFsUmVzdWx0cyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9uZXh0U3Vic2NyaXB0aW9uSWQgPSAwO1xuICAgIHRoaXMuX29wZXJhdGlvbiA9IG9wZXJhdGlvbjtcbiAgICB0aGlzLl9vcGVyYXRpb25FeGVjdXRpb25zID0gb3BlcmF0aW9uRXhlY3V0aW9ucztcbiAgICB0aGlzLl9vcGVyYXRpb25Mb2FkZXIgPSBvcGVyYXRpb25Mb2FkZXI7XG4gICAgdGhpcy5fb3BlcmF0aW9uVHJhY2tlciA9IG9wZXJhdGlvblRyYWNrZXI7XG4gICAgdGhpcy5fb3BlcmF0aW9uVXBkYXRlRXBvY2hzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX29wdGltaXN0aWNVcGRhdGVzID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nTW9kdWxlUGF5bG9hZHNDb3VudCA9IDA7XG4gICAgdGhpcy5fcHVibGlzaFF1ZXVlID0gcHVibGlzaFF1ZXVlO1xuICAgIHRoaXMuX3NjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB0aGlzLl9zaW5rID0gc2luaztcbiAgICB0aGlzLl9zb3VyY2UgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fc3RhdGUgPSAnc3RhcnRlZCc7XG4gICAgdGhpcy5fc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX3VwZGF0ZXIgPSB1cGRhdGVyO1xuICAgIHRoaXMuX2lzQ2xpZW50UGF5bG9hZCA9IGlzQ2xpZW50UGF5bG9hZCA9PT0gdHJ1ZTtcbiAgICB0aGlzLl9yZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIgPSByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXI7XG4gICAgdGhpcy5fcmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXIgPSByZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcjtcbiAgICB0aGlzLl9pc1N1YnNjcmlwdGlvbk9wZXJhdGlvbiA9IHRoaXMuX29wZXJhdGlvbi5yZXF1ZXN0Lm5vZGUucGFyYW1zLm9wZXJhdGlvbktpbmQgPT09ICdzdWJzY3JpcHRpb24nO1xuICAgIHRoaXMuX3Nob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzID0gc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHM7XG4gICAgdmFyIGlkID0gdGhpcy5fbmV4dFN1YnNjcmlwdGlvbklkKys7XG4gICAgc291cmNlLnN1YnNjcmliZSh7XG4gICAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fY29tcGxldGUoaWQpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IyKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fZXJyb3IoX2Vycm9yMik7XG4gICAgICB9LFxuICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dChyZXNwb25zZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIF90aGlzLl9uZXh0KGlkLCByZXNwb25zZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgc2luay5lcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fc3RhcnQoaWQsIHN1YnNjcmlwdGlvbik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW1pc3RpY0NvbmZpZyAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9wcm9jZXNzT3B0aW1pc3RpY1Jlc3BvbnNlKG9wdGltaXN0aWNDb25maWcucmVzcG9uc2UgIT0gbnVsbCA/IHtcbiAgICAgICAgZGF0YTogb3B0aW1pc3RpY0NvbmZpZy5yZXNwb25zZVxuICAgICAgfSA6IG51bGwsIG9wdGltaXN0aWNDb25maWcudXBkYXRlciwgZmFsc2UpO1xuICAgIH1cbiAgfSAvLyBDYW5jZWwgYW55IHBlbmRpbmcgZXhlY3V0aW9uIHRhc2tzIGFuZCBtYXJrIHRoZSBleGVjdXRvciBhcyBjb21wbGV0ZWQuXG5cblxuICB2YXIgX3Byb3RvID0gRXhlY3V0b3IucHJvdG90eXBlO1xuXG4gIF9wcm90by5jYW5jZWwgPSBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5fc3RhdGUgPT09ICdjb21wbGV0ZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fc3RhdGUgPSAnY29tcGxldGVkJztcblxuICAgIHRoaXMuX29wZXJhdGlvbkV4ZWN1dGlvbnNbXCJkZWxldGVcIl0odGhpcy5fb3BlcmF0aW9uLnJlcXVlc3QuaWRlbnRpZmllcik7XG5cbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9ucy5zaXplICE9PSAwKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1Yikge1xuICAgICAgICByZXR1cm4gc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucy5jbGVhcigpO1xuICAgIH1cblxuICAgIHZhciBvcHRpbWlzdGljVXBkYXRlcyA9IHRoaXMuX29wdGltaXN0aWNVcGRhdGVzO1xuXG4gICAgaWYgKG9wdGltaXN0aWNVcGRhdGVzICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl9vcHRpbWlzdGljVXBkYXRlcyA9IG51bGw7XG4gICAgICBvcHRpbWlzdGljVXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5fcHVibGlzaFF1ZXVlLnJldmVydFVwZGF0ZSh1cGRhdGUpO1xuICAgICAgfSk7IC8vIE9LOiBydW4gcmV2ZXJ0IG9uIGNhbmNlbFxuXG4gICAgICB0aGlzLl9wdWJsaXNoUXVldWUucnVuKCk7XG4gICAgfVxuXG4gICAgdGhpcy5faW5jcmVtZW50YWxSZXN1bHRzLmNsZWFyKCk7XG5cbiAgICB0aGlzLl9jb21wbGV0ZU9wZXJhdGlvblRyYWNrZXIoKTtcblxuICAgIGlmICh0aGlzLl9yZXRhaW5EaXNwb3NhYmxlKSB7XG4gICAgICB0aGlzLl9yZXRhaW5EaXNwb3NhYmxlLmRpc3Bvc2UoKTtcblxuICAgICAgdGhpcy5fcmV0YWluRGlzcG9zYWJsZSA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fdXBkYXRlQWN0aXZlU3RhdGUgPSBmdW5jdGlvbiBfdXBkYXRlQWN0aXZlU3RhdGUoKSB7XG4gICAgdmFyIGFjdGl2ZVN0YXRlO1xuXG4gICAgc3dpdGNoICh0aGlzLl9zdGF0ZSkge1xuICAgICAgY2FzZSAnc3RhcnRlZCc6XG4gICAgICAgIHtcbiAgICAgICAgICBhY3RpdmVTdGF0ZSA9ICdhY3RpdmUnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgJ2xvYWRpbmdfaW5jcmVtZW50YWwnOlxuICAgICAgICB7XG4gICAgICAgICAgYWN0aXZlU3RhdGUgPSAnYWN0aXZlJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlICdjb21wbGV0ZWQnOlxuICAgICAgICB7XG4gICAgICAgICAgYWN0aXZlU3RhdGUgPSAnaW5hY3RpdmUnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgJ2xvYWRpbmdfZmluYWwnOlxuICAgICAgICB7XG4gICAgICAgICAgYWN0aXZlU3RhdGUgPSB0aGlzLl9wZW5kaW5nTW9kdWxlUGF5bG9hZHNDb3VudCA+IDAgPyAnYWN0aXZlJyA6ICdpbmFjdGl2ZSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5fc3RhdGU7XG4gICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ09wZXJhdGlvbkV4ZWN1dG9yOiBpbnZhbGlkIGV4ZWN1dG9yIHN0YXRlLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB0aGlzLl9vcGVyYXRpb25FeGVjdXRpb25zLnNldCh0aGlzLl9vcGVyYXRpb24ucmVxdWVzdC5pZGVudGlmaWVyLCBhY3RpdmVTdGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLl9zY2hlZHVsZSA9IGZ1bmN0aW9uIF9zY2hlZHVsZSh0YXNrKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5fc2NoZWR1bGVyO1xuXG4gICAgaWYgKHNjaGVkdWxlciAhPSBudWxsKSB7XG4gICAgICB2YXIgX2lkMiA9IHRoaXMuX25leHRTdWJzY3JpcHRpb25JZCsrO1xuXG4gICAgICBSZWxheU9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgIHZhciBjYW5jZWxsYXRpb25Ub2tlbiA9IHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRhc2soKTtcbiAgICAgICAgICAgIHNpbmsuY29tcGxldGUoKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgc2luay5lcnJvcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLmNhbmNlbChjYW5jZWxsYXRpb25Ub2tlbik7XG4gICAgICAgIH07XG4gICAgICB9KS5zdWJzY3JpYmUoe1xuICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5fY29tcGxldGUoX2lkMik7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IzKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5fZXJyb3IoX2Vycm9yMyk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLl9zdGFydChfaWQyLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFzaygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX2NvbXBsZXRlID0gZnVuY3Rpb24gX2NvbXBsZXRlKGlkKSB7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uc1tcImRlbGV0ZVwiXShpZCk7XG5cbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9ucy5zaXplID09PSAwKSB7XG4gICAgICB0aGlzLmNhbmNlbCgpO1xuXG4gICAgICB0aGlzLl9zaW5rLmNvbXBsZXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fZXJyb3IgPSBmdW5jdGlvbiBfZXJyb3IoZXJyb3IpIHtcbiAgICB0aGlzLmNhbmNlbCgpO1xuXG4gICAgdGhpcy5fc2luay5lcnJvcihlcnJvcik7XG4gIH07XG5cbiAgX3Byb3RvLl9zdGFydCA9IGZ1bmN0aW9uIF9zdGFydChpZCwgc3Vic2NyaXB0aW9uKSB7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9ucy5zZXQoaWQsIHN1YnNjcmlwdGlvbik7XG5cbiAgICB0aGlzLl91cGRhdGVBY3RpdmVTdGF0ZSgpO1xuICB9IC8vIEhhbmRsZSBhIHJhdyBHcmFwaFFMIHJlc3BvbnNlLlxuICA7XG5cbiAgX3Byb3RvLl9uZXh0ID0gZnVuY3Rpb24gX25leHQoX2lkLCByZXNwb25zZSkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdGhpcy5fc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXM0Ll9oYW5kbGVOZXh0KHJlc3BvbnNlKTtcblxuICAgICAgX3RoaXM0Ll9tYXliZUNvbXBsZXRlU3Vic2NyaXB0aW9uT3BlcmF0aW9uVHJhY2tpbmcoKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uX2hhbmRsZUVycm9yUmVzcG9uc2UgPSBmdW5jdGlvbiBfaGFuZGxlRXJyb3JSZXNwb25zZShyZXNwb25zZXMpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgcmVzcG9uc2VzLmZvckVhY2goZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAocmVzcG9uc2UuZGF0YSA9PT0gbnVsbCAmJiByZXNwb25zZS5leHRlbnNpb25zICE9IG51bGwgJiYgIXJlc3BvbnNlLmhhc093blByb3BlcnR5KCdlcnJvcnMnKSkge1xuICAgICAgICAvLyBTa2lwIGV4dGVuc2lvbnMtb25seSBwYXlsb2Fkc1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEgPT0gbnVsbCkge1xuICAgICAgICAvLyBFcnJvciBpZiBhbnkgb3RoZXIgcGF5bG9hZCBpbiB0aGUgYmF0Y2ggaXMgbWlzc2luZyBkYXRhLCByZWdhcmRsZXNzIG9mIHdoZXRoZXJcbiAgICAgICAgLy8gaXQgaGFkIGBlcnJvcnNgIG9yIG5vdC5cbiAgICAgICAgdmFyIGVycm9ycyA9IHJlc3BvbnNlLmhhc093blByb3BlcnR5KCdlcnJvcnMnKSAmJiByZXNwb25zZS5lcnJvcnMgIT0gbnVsbCA/IHJlc3BvbnNlLmVycm9ycyA6IG51bGw7XG4gICAgICAgIHZhciBtZXNzYWdlcyA9IGVycm9ycyA/IGVycm9ycy5tYXAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgdmFyIG1lc3NhZ2UgPSBfcmVmMi5tZXNzYWdlO1xuICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICB9KS5qb2luKCdcXG4nKSA6ICcoTm8gZXJyb3JzKSc7XG4gICAgICAgIHZhciBlcnJvciA9IFJlbGF5RXJyb3IuY3JlYXRlKCdSZWxheU5ldHdvcmsnLCAnTm8gZGF0YSByZXR1cm5lZCBmb3Igb3BlcmF0aW9uIGAnICsgX3RoaXM1Ll9vcGVyYXRpb24ucmVxdWVzdC5ub2RlLnBhcmFtcy5uYW1lICsgJ2AsIGdvdCBlcnJvcihzKTpcXG4nICsgbWVzc2FnZXMgKyAnXFxuXFxuU2VlIHRoZSBlcnJvciBgc291cmNlYCBwcm9wZXJ0eSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKTtcbiAgICAgICAgZXJyb3Iuc291cmNlID0ge1xuICAgICAgICAgIGVycm9yczogZXJyb3JzLFxuICAgICAgICAgIG9wZXJhdGlvbjogX3RoaXM1Ll9vcGVyYXRpb24ucmVxdWVzdC5ub2RlLFxuICAgICAgICAgIHZhcmlhYmxlczogX3RoaXM1Ll9vcGVyYXRpb24ucmVxdWVzdC52YXJpYWJsZXNcbiAgICAgICAgfTsgLy8gSW4gVjgsIEVycm9yIG9iamVjdHMga2VlcCB0aGUgY2xvc3VyZSBzY29wZSBjaGFpbiBhbGl2ZSB1bnRpbCB0aGVcbiAgICAgICAgLy8gZXJyLnN0YWNrIHByb3BlcnR5IGlzIGFjY2Vzc2VkLlxuXG4gICAgICAgIGVycm9yLnN0YWNrO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXNwb25zZVdpdGhEYXRhID0gcmVzcG9uc2U7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXNwb25zZVdpdGhEYXRhKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcmV0dXJuIGJvb2xlYW4gdG8gaW5kaWNhdGUgaWYgdGhlIG9wdGltaXN0aWNcbiAgICogcmVzcG9uc2UgaGFzIGJlZW4gaGFuZGxlZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5faGFuZGxlT3B0aW1pc3RpY1Jlc3BvbnNlcyA9IGZ1bmN0aW9uIF9oYW5kbGVPcHRpbWlzdGljUmVzcG9uc2VzKHJlc3BvbnNlcykge1xuICAgIHZhciBfcmVzcG9uc2UkZXh0ZW5zaW9ucztcblxuICAgIGlmIChyZXNwb25zZXMubGVuZ3RoID4gMSkge1xuICAgICAgaWYgKHJlc3BvbnNlcy5zb21lKGZ1bmN0aW9uIChyZXNwb25zZVBhcnQpIHtcbiAgICAgICAgdmFyIF9yZXNwb25zZVBhcnQkZXh0ZW5zaTtcblxuICAgICAgICByZXR1cm4gKChfcmVzcG9uc2VQYXJ0JGV4dGVuc2kgPSByZXNwb25zZVBhcnQuZXh0ZW5zaW9ucykgPT09IG51bGwgfHwgX3Jlc3BvbnNlUGFydCRleHRlbnNpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcmVzcG9uc2VQYXJ0JGV4dGVuc2kuaXNPcHRpbWlzdGljKSA9PT0gdHJ1ZTtcbiAgICAgIH0pKSB7XG4gICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ09wdGltaXN0aWMgcmVzcG9uc2VzIGNhbm5vdCBiZSBiYXRjaGVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciByZXNwb25zZSA9IHJlc3BvbnNlc1swXTtcbiAgICB2YXIgaXNPcHRpbWlzdGljID0gKChfcmVzcG9uc2UkZXh0ZW5zaW9ucyA9IHJlc3BvbnNlLmV4dGVuc2lvbnMpID09PSBudWxsIHx8IF9yZXNwb25zZSRleHRlbnNpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcmVzcG9uc2UkZXh0ZW5zaW9ucy5pc09wdGltaXN0aWMpID09PSB0cnVlO1xuXG4gICAgaWYgKGlzT3B0aW1pc3RpYyAmJiB0aGlzLl9zdGF0ZSAhPT0gJ3N0YXJ0ZWQnKSB7XG4gICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdPcGVyYXRpb25FeGVjdXRvcjogb3B0aW1pc3RpYyBwYXlsb2FkIHJlY2VpdmVkIGFmdGVyIHNlcnZlciBwYXlsb2FkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICBpZiAoaXNPcHRpbWlzdGljKSB7XG4gICAgICB0aGlzLl9wcm9jZXNzT3B0aW1pc3RpY1Jlc3BvbnNlKHJlc3BvbnNlLCBudWxsLCB0aGlzLl90cmVhdE1pc3NpbmdGaWVsZHNBc051bGwpO1xuXG4gICAgICB0aGlzLl9zaW5rLm5leHQocmVzcG9uc2UpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVOZXh0ID0gZnVuY3Rpb24gX2hhbmRsZU5leHQocmVzcG9uc2UpIHtcbiAgICBpZiAodGhpcy5fc3RhdGUgPT09ICdjb21wbGV0ZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlc3BvbnNlcyA9IEFycmF5LmlzQXJyYXkocmVzcG9uc2UpID8gcmVzcG9uc2UgOiBbcmVzcG9uc2VdO1xuXG4gICAgdmFyIHJlc3BvbnNlc1dpdGhEYXRhID0gdGhpcy5faGFuZGxlRXJyb3JSZXNwb25zZShyZXNwb25zZXMpO1xuXG4gICAgaWYgKHJlc3BvbnNlc1dpdGhEYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gbm8gcmVzdWx0cyB3aXRoIGRhdGEsIG5vdGhpbmcgdG8gcHJvY2Vzc1xuICAgICAgLy8gdGhpcyBjYW4gb2NjdXIgd2l0aCBleHRlbnNpb25zLW9ubHkgcGF5bG9hZHNcbiAgICAgIHZhciBpc0ZpbmFsID0gcmVzcG9uc2VzLnNvbWUoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgdmFyIF94JGV4dGVuc2lvbnM7XG5cbiAgICAgICAgcmV0dXJuICgoX3gkZXh0ZW5zaW9ucyA9IHguZXh0ZW5zaW9ucykgPT09IG51bGwgfHwgX3gkZXh0ZW5zaW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3gkZXh0ZW5zaW9ucy5pc19maW5hbCkgPT09IHRydWU7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGlzRmluYWwpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSAnbG9hZGluZ19maW5hbCc7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlQWN0aXZlU3RhdGUoKTtcblxuICAgICAgICB0aGlzLl9pbmNyZW1lbnRhbFBheWxvYWRzUGVuZGluZyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zaW5rLm5leHQocmVzcG9uc2UpO1xuXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBOZXh0LCBoYW5kbGUgb3B0aW1pc3RpYyByZXNwb25zZXNcblxuXG4gICAgdmFyIGlzT3B0aW1pc3RpYyA9IHRoaXMuX2hhbmRsZU9wdGltaXN0aWNSZXNwb25zZXMocmVzcG9uc2VzV2l0aERhdGEpO1xuXG4gICAgaWYgKGlzT3B0aW1pc3RpYykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBfcGFydGl0aW9uR3JhcGhRTFJlc3AgPSBwYXJ0aXRpb25HcmFwaFFMUmVzcG9uc2VzKHJlc3BvbnNlc1dpdGhEYXRhKSxcbiAgICAgICAgbm9uSW5jcmVtZW50YWxSZXNwb25zZXMgPSBfcGFydGl0aW9uR3JhcGhRTFJlc3BbMF0sXG4gICAgICAgIGluY3JlbWVudGFsUmVzcG9uc2VzID0gX3BhcnRpdGlvbkdyYXBoUUxSZXNwWzFdO1xuXG4gICAgdmFyIGhhc05vbkluY3JlbWVudGFsUmVzcG9uc2VzID0gbm9uSW5jcmVtZW50YWxSZXNwb25zZXMubGVuZ3RoID4gMDsgLy8gSW4gdGhlb3J5IHRoaXMgZG9lc24ndCBwcmVzZXJ2ZSB0aGUgb3JkZXJpbmcgb2YgdGhlIGJhdGNoLlxuICAgIC8vIFRoZSBpZGVhIGlzIHRoYXQgYSBiYXRjaCBpcyBhbHdheXM6XG4gICAgLy8gICogYXQgbW9zdCBvbmUgbm9uLWluY3JlbWVudGFsIHBheWxvYWRcbiAgICAvLyAgKiBmb2xsb3dlZCBieSB6ZXJvIG9yIG1vcmUgaW5jcmVtZW50YWwgcGF5bG9hZHNcbiAgICAvLyBUaGUgbm9uLWluY3JlbWVudGFsIHBheWxvYWQgY2FuIGFwcGVhciBpZiB0aGUgc2VydmVyIHNlbmRzIGEgYmF0Y2hcbiAgICAvLyB3aXRoIHRoZSBpbml0aWFsIHBheWxvYWQgZm9sbG93ZWQgYnkgc29tZSBlYXJseS10by1yZXNvbHZlIGluY3JlbWVudGFsXG4gICAgLy8gcGF5bG9hZHMgKGFsdGhvdWdoLCBjYW4gdGhhdCBldmVuIGhhcHBlbj8pXG5cbiAgICBpZiAoaGFzTm9uSW5jcmVtZW50YWxSZXNwb25zZXMpIHtcbiAgICAgIHZhciBwYXlsb2FkRm9sbG93dXBzID0gdGhpcy5fcHJvY2Vzc1Jlc3BvbnNlcyhub25JbmNyZW1lbnRhbFJlc3BvbnNlcyk7XG5cbiAgICAgIGlmICghUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX0JBVENIRURfU1RPUkVfVVBEQVRFUykge1xuICAgICAgICB2YXIgdXBkYXRlZE93bmVycyA9IHRoaXMuX3B1Ymxpc2hRdWV1ZS5ydW4odGhpcy5fb3BlcmF0aW9uKTtcblxuICAgICAgICB0aGlzLl91cGRhdGVPcGVyYXRpb25UcmFja2VyKHVwZGF0ZWRPd25lcnMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wcm9jZXNzUGF5bG9hZEZvbGxvd3VwcyhwYXlsb2FkRm9sbG93dXBzKTtcblxuICAgICAgaWYgKCFSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfQkFUQ0hFRF9TVE9SRV9VUERBVEVTKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbmNyZW1lbnRhbFBheWxvYWRzUGVuZGluZyAmJiAhdGhpcy5fcmV0YWluRGlzcG9zYWJsZSkge1xuICAgICAgICAgIHRoaXMuX3JldGFpbkRpc3Bvc2FibGUgPSB0aGlzLl9zdG9yZS5yZXRhaW4odGhpcy5fb3BlcmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbmNyZW1lbnRhbFJlc3BvbnNlcy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgX3BheWxvYWRGb2xsb3d1cHMgPSB0aGlzLl9wcm9jZXNzSW5jcmVtZW50YWxSZXNwb25zZXMoaW5jcmVtZW50YWxSZXNwb25zZXMpO1xuXG4gICAgICBpZiAoIVJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9CQVRDSEVEX1NUT1JFX1VQREFURVMpIHtcbiAgICAgICAgLy8gRm9yIHRoZSBpbmNyZW1lbnRhbCBjYXNlLCB3ZSdyZSBvbmx5IGhhbmRsaW5nIGZvbGxvdy11cCByZXNwb25zZXNcbiAgICAgICAgLy8gZm9yIGFscmVhZHkgaW5pdGlhdGVkIG9wZXJhdGlvbiAoYW5kIHdlJ3JlIG5vdCBwYXNzaW5nIGl0IHRvXG4gICAgICAgIC8vIHRoZSBydW4oLi4uKSBjYWxsKVxuICAgICAgICB2YXIgX3VwZGF0ZWRPd25lcnMgPSB0aGlzLl9wdWJsaXNoUXVldWUucnVuKCk7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlT3BlcmF0aW9uVHJhY2tlcihfdXBkYXRlZE93bmVycyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3Byb2Nlc3NQYXlsb2FkRm9sbG93dXBzKF9wYXlsb2FkRm9sbG93dXBzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5faXNTdWJzY3JpcHRpb25PcGVyYXRpb24gJiYgUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX1VOSVFVRV9TVUJTQ1JJUFRJT05fUk9PVCkge1xuICAgICAgLy8gV2UgYXR0YWNoIHRoZSBpZCB0byBhbGxvdyB0aGUgYHJlcXVlc3RTdWJzY3JpcHRpb25gIHRvIHJlYWQgZnJvbSB0aGUgc3RvcmUgdXNpbmdcbiAgICAgIC8vIHRoZSBjdXJyZW50IGlkIGluIGl0cyBgb25OZXh0YCBjYWxsYmFja1xuICAgICAgaWYgKHJlc3BvbnNlc1dpdGhEYXRhWzBdLmV4dGVuc2lvbnMgPT0gbnVsbCkge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cbiAgICAgICAgcmVzcG9uc2VzV2l0aERhdGFbMF0uZXh0ZW5zaW9ucyA9IHtcbiAgICAgICAgICBfX3JlbGF5X3N1YnNjcmlwdGlvbl9yb290X2lkOiB0aGlzLl9vcGVyYXRpb24uZnJhZ21lbnQuZGF0YUlEXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNwb25zZXNXaXRoRGF0YVswXS5leHRlbnNpb25zLl9fcmVsYXlfc3Vic2NyaXB0aW9uX3Jvb3RfaWQgPSB0aGlzLl9vcGVyYXRpb24uZnJhZ21lbnQuZGF0YUlEO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfQkFUQ0hFRF9TVE9SRV9VUERBVEVTKSB7XG4gICAgICAvLyBPSzogcnVuIG9uY2UgYWZ0ZXIgZWFjaCBuZXcgcGF5bG9hZFxuICAgICAgLy8gSWYgd2UgaGF2ZSBub24taW5jcmVtZW50YWwgcmVzcG9uc2VzLCB3ZSBwYXNzaW5nIGB0aGlzLl9vcGVyYXRpb25gIHRvXG4gICAgICAvLyB0aGUgcHVibGlzaCBxdWV1ZSBoZXJlLCB3aGljaCB3aWxsIGxhdGVyIGJlIHBhc3NlZCB0byB0aGUgc3RvcmUgKHZpYVxuICAgICAgLy8gbm90aWZ5KSB0byBpbmRpY2F0ZSB0aGF0IHRoaXMgb3BlcmF0aW9uIGNhdXNlZCB0aGUgc3RvcmUgdG8gdXBkYXRlXG4gICAgICB2YXIgX3VwZGF0ZWRPd25lcnMyID0gdGhpcy5fcHVibGlzaFF1ZXVlLnJ1bihoYXNOb25JbmNyZW1lbnRhbFJlc3BvbnNlcyA/IHRoaXMuX29wZXJhdGlvbiA6IHVuZGVmaW5lZCk7XG5cbiAgICAgIGlmIChoYXNOb25JbmNyZW1lbnRhbFJlc3BvbnNlcykge1xuICAgICAgICBpZiAodGhpcy5faW5jcmVtZW50YWxQYXlsb2Fkc1BlbmRpbmcgJiYgIXRoaXMuX3JldGFpbkRpc3Bvc2FibGUpIHtcbiAgICAgICAgICB0aGlzLl9yZXRhaW5EaXNwb3NhYmxlID0gdGhpcy5fc3RvcmUucmV0YWluKHRoaXMuX29wZXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fdXBkYXRlT3BlcmF0aW9uVHJhY2tlcihfdXBkYXRlZE93bmVyczIpO1xuICAgIH1cblxuICAgIHRoaXMuX3NpbmsubmV4dChyZXNwb25zZSk7XG4gIH07XG5cbiAgX3Byb3RvLl9wcm9jZXNzT3B0aW1pc3RpY1Jlc3BvbnNlID0gZnVuY3Rpb24gX3Byb2Nlc3NPcHRpbWlzdGljUmVzcG9uc2UocmVzcG9uc2UsIHVwZGF0ZXIsIHRyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCkge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgISh0aGlzLl9vcHRpbWlzdGljVXBkYXRlcyA9PT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdlbnZpcm9ubWVudC5leGVjdXRlOiBvbmx5IHN1cHBvcnQgb25lIG9wdGltaXN0aWMgcmVzcG9uc2UgcGVyICcgKyAnZXhlY3V0ZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocmVzcG9uc2UgPT0gbnVsbCAmJiB1cGRhdGVyID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3B0aW1pc3RpY1VwZGF0ZXMgPSBbXTtcblxuICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgdmFyIHBheWxvYWQgPSBub3JtYWxpemVSZXNwb25zZShyZXNwb25zZSwgdGhpcy5fb3BlcmF0aW9uLnJvb3QsIFJPT1RfVFlQRSwge1xuICAgICAgICBnZXREYXRhSUQ6IHRoaXMuX2dldERhdGFJRCxcbiAgICAgICAgcGF0aDogW10sXG4gICAgICAgIHJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcjogdGhpcy5fcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyLFxuICAgICAgICByZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcjogdGhpcy5fcmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXIsXG4gICAgICAgIHNob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzOiB0aGlzLl9zaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50cyxcbiAgICAgICAgdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsOiB0cmVhdE1pc3NpbmdGaWVsZHNBc051bGxcbiAgICAgIH0pO1xuICAgICAgdmFsaWRhdGVPcHRpbWlzdGljUmVzcG9uc2VQYXlsb2FkKHBheWxvYWQpO1xuICAgICAgb3B0aW1pc3RpY1VwZGF0ZXMucHVzaCh7XG4gICAgICAgIG9wZXJhdGlvbjogdGhpcy5fb3BlcmF0aW9uLFxuICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fcHJvY2Vzc09wdGltaXN0aWNGb2xsb3d1cHMocGF5bG9hZCwgb3B0aW1pc3RpY1VwZGF0ZXMpO1xuICAgIH0gZWxzZSBpZiAodXBkYXRlcikge1xuICAgICAgb3B0aW1pc3RpY1VwZGF0ZXMucHVzaCh7XG4gICAgICAgIG9wZXJhdGlvbjogdGhpcy5fb3BlcmF0aW9uLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgZXJyb3JzOiBudWxsLFxuICAgICAgICAgIGZpZWxkUGF5bG9hZHM6IG51bGwsXG4gICAgICAgICAgaW5jcmVtZW50YWxQbGFjZWhvbGRlcnM6IG51bGwsXG4gICAgICAgICAgbW9kdWxlSW1wb3J0UGF5bG9hZHM6IG51bGwsXG4gICAgICAgICAgc291cmNlOiBSZWxheVJlY29yZFNvdXJjZS5jcmVhdGUoKSxcbiAgICAgICAgICBpc0ZpbmFsOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLl9vcHRpbWlzdGljVXBkYXRlcyA9IG9wdGltaXN0aWNVcGRhdGVzO1xuICAgIG9wdGltaXN0aWNVcGRhdGVzLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgcmV0dXJuIF90aGlzNi5fcHVibGlzaFF1ZXVlLmFwcGx5VXBkYXRlKHVwZGF0ZSk7XG4gICAgfSk7IC8vIE9LOiBvbmx5IGNhbGxlZCBvbiBjb25zdHJ1Y3Rpb24gYW5kIHdoZW4gcmVjZWl2aW5nIGFuIG9wdGltaXN0aWMgcGF5bG9hZCBmcm9tIG5ldHdvcmssXG4gICAgLy8gd2hpY2ggZG9lc24ndCBmYWxsLXRocm91Z2ggdG8gdGhlIHJlZ3VsYXIgbmV4dCgpIGhhbmRsaW5nXG5cbiAgICB0aGlzLl9wdWJsaXNoUXVldWUucnVuKCk7XG4gIH07XG5cbiAgX3Byb3RvLl9wcm9jZXNzT3B0aW1pc3RpY0ZvbGxvd3VwcyA9IGZ1bmN0aW9uIF9wcm9jZXNzT3B0aW1pc3RpY0ZvbGxvd3VwcyhwYXlsb2FkLCBvcHRpbWlzdGljVXBkYXRlcykge1xuICAgIGlmIChwYXlsb2FkLm1vZHVsZUltcG9ydFBheWxvYWRzICYmIHBheWxvYWQubW9kdWxlSW1wb3J0UGF5bG9hZHMubGVuZ3RoKSB7XG4gICAgICB2YXIgbW9kdWxlSW1wb3J0UGF5bG9hZHMgPSBwYXlsb2FkLm1vZHVsZUltcG9ydFBheWxvYWRzO1xuICAgICAgdmFyIG9wZXJhdGlvbkxvYWRlciA9IHRoaXMuX29wZXJhdGlvbkxvYWRlcjtcbiAgICAgICFvcGVyYXRpb25Mb2FkZXIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkVudmlyb25tZW50OiBFeHBlY3RlZCBhbiBvcGVyYXRpb25Mb2FkZXIgdG8gYmUgJyArICdjb25maWd1cmVkIHdoZW4gdXNpbmcgYEBtYXRjaGAuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgICB2YXIgX2l0ZXJhdG9yID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKG1vZHVsZUltcG9ydFBheWxvYWRzKSxcbiAgICAgICAgICBfc3RlcDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgbW9kdWxlSW1wb3J0UGF5bG9hZCA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgIHZhciBvcGVyYXRpb24gPSBvcGVyYXRpb25Mb2FkZXIuZ2V0KG1vZHVsZUltcG9ydFBheWxvYWQub3BlcmF0aW9uUmVmZXJlbmNlKTtcblxuICAgICAgICAgIGlmIChvcGVyYXRpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc0FzeW5jT3B0aW1pc3RpY01vZHVsZUltcG9ydChvcGVyYXRpb25Mb2FkZXIsIG1vZHVsZUltcG9ydFBheWxvYWQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbW9kdWxlSW1wb3J0T3B0aW1pc3RpY1VwZGF0ZXMgPSB0aGlzLl9wcm9jZXNzT3B0aW1pc3RpY01vZHVsZUltcG9ydChvcGVyYXRpb24sIG1vZHVsZUltcG9ydFBheWxvYWQpO1xuXG4gICAgICAgICAgICBvcHRpbWlzdGljVXBkYXRlcy5wdXNoLmFwcGx5KG9wdGltaXN0aWNVcGRhdGVzLCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKG1vZHVsZUltcG9ydE9wdGltaXN0aWNVcGRhdGVzKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fbm9ybWFsaXplTW9kdWxlSW1wb3J0ID0gZnVuY3Rpb24gX25vcm1hbGl6ZU1vZHVsZUltcG9ydChtb2R1bGVJbXBvcnRQYXlsb2FkLCBvcGVyYXRpb24pIHtcbiAgICB2YXIgc2VsZWN0b3IgPSBjcmVhdGVOb3JtYWxpemF0aW9uU2VsZWN0b3Iob3BlcmF0aW9uLCBtb2R1bGVJbXBvcnRQYXlsb2FkLmRhdGFJRCwgbW9kdWxlSW1wb3J0UGF5bG9hZC52YXJpYWJsZXMpO1xuICAgIHJldHVybiBub3JtYWxpemVSZXNwb25zZSh7XG4gICAgICBkYXRhOiBtb2R1bGVJbXBvcnRQYXlsb2FkLmRhdGFcbiAgICB9LCBzZWxlY3RvciwgbW9kdWxlSW1wb3J0UGF5bG9hZC50eXBlTmFtZSwge1xuICAgICAgZ2V0RGF0YUlEOiB0aGlzLl9nZXREYXRhSUQsXG4gICAgICBwYXRoOiBtb2R1bGVJbXBvcnRQYXlsb2FkLnBhdGgsXG4gICAgICByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXI6IHRoaXMuX3JlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcixcbiAgICAgIHJlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyOiB0aGlzLl9yZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcixcbiAgICAgIHRyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbDogdGhpcy5fdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsLFxuICAgICAgc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHM6IHRoaXMuX3Nob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLl9wcm9jZXNzT3B0aW1pc3RpY01vZHVsZUltcG9ydCA9IGZ1bmN0aW9uIF9wcm9jZXNzT3B0aW1pc3RpY01vZHVsZUltcG9ydChub3JtYWxpemF0aW9uUm9vdE5vZGUsIG1vZHVsZUltcG9ydFBheWxvYWQpIHtcbiAgICB2YXIgb3BlcmF0aW9uID0gZ2V0T3BlcmF0aW9uKG5vcm1hbGl6YXRpb25Sb290Tm9kZSk7XG4gICAgdmFyIG9wdGltaXN0aWNVcGRhdGVzID0gW107XG5cbiAgICB2YXIgbW9kdWxlUGF5bG9hZCA9IHRoaXMuX25vcm1hbGl6ZU1vZHVsZUltcG9ydChtb2R1bGVJbXBvcnRQYXlsb2FkLCBvcGVyYXRpb24pO1xuXG4gICAgdmFsaWRhdGVPcHRpbWlzdGljUmVzcG9uc2VQYXlsb2FkKG1vZHVsZVBheWxvYWQpO1xuICAgIG9wdGltaXN0aWNVcGRhdGVzLnB1c2goe1xuICAgICAgb3BlcmF0aW9uOiB0aGlzLl9vcGVyYXRpb24sXG4gICAgICBwYXlsb2FkOiBtb2R1bGVQYXlsb2FkLFxuICAgICAgdXBkYXRlcjogbnVsbFxuICAgIH0pO1xuXG4gICAgdGhpcy5fcHJvY2Vzc09wdGltaXN0aWNGb2xsb3d1cHMobW9kdWxlUGF5bG9hZCwgb3B0aW1pc3RpY1VwZGF0ZXMpO1xuXG4gICAgcmV0dXJuIG9wdGltaXN0aWNVcGRhdGVzO1xuICB9O1xuXG4gIF9wcm90by5fcHJvY2Vzc0FzeW5jT3B0aW1pc3RpY01vZHVsZUltcG9ydCA9IGZ1bmN0aW9uIF9wcm9jZXNzQXN5bmNPcHRpbWlzdGljTW9kdWxlSW1wb3J0KG9wZXJhdGlvbkxvYWRlciwgbW9kdWxlSW1wb3J0UGF5bG9hZCkge1xuICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgb3BlcmF0aW9uTG9hZGVyLmxvYWQobW9kdWxlSW1wb3J0UGF5bG9hZC5vcGVyYXRpb25SZWZlcmVuY2UpLnRoZW4oZnVuY3Rpb24gKG9wZXJhdGlvbikge1xuICAgICAgaWYgKG9wZXJhdGlvbiA9PSBudWxsIHx8IF90aGlzNy5fc3RhdGUgIT09ICdzdGFydGVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBtb2R1bGVJbXBvcnRPcHRpbWlzdGljVXBkYXRlcyA9IF90aGlzNy5fcHJvY2Vzc09wdGltaXN0aWNNb2R1bGVJbXBvcnQob3BlcmF0aW9uLCBtb2R1bGVJbXBvcnRQYXlsb2FkKTtcblxuICAgICAgbW9kdWxlSW1wb3J0T3B0aW1pc3RpY1VwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAodXBkYXRlKSB7XG4gICAgICAgIHJldHVybiBfdGhpczcuX3B1Ymxpc2hRdWV1ZS5hcHBseVVwZGF0ZSh1cGRhdGUpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChfdGhpczcuX29wdGltaXN0aWNVcGRhdGVzID09IG51bGwpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ09wZXJhdGlvbkV4ZWN1dG9yOiBVbmV4cGVjdGVkIE1vZHVsZUltcG9ydCBvcHRpbWlzdGljICcgKyAndXBkYXRlIGluIG9wZXJhdGlvbiAlcy4nICsgX3RoaXM3Ll9vcGVyYXRpb24ucmVxdWVzdC5ub2RlLnBhcmFtcy5uYW1lKSA6IHZvaWQgMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBfdGhpcyRfb3B0aW1pc3RpY1VwZGE7XG5cbiAgICAgICAgKF90aGlzJF9vcHRpbWlzdGljVXBkYSA9IF90aGlzNy5fb3B0aW1pc3RpY1VwZGF0ZXMpLnB1c2guYXBwbHkoX3RoaXMkX29wdGltaXN0aWNVcGRhLCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKG1vZHVsZUltcG9ydE9wdGltaXN0aWNVcGRhdGVzKSk7IC8vIE9LOiBhbHdheXMgaGF2ZSB0byBydW4oKSBhZnRlciBhbiBtb2R1bGUgaW1wb3J0IHJlc29sdmVzIGFzeW5jXG5cblxuICAgICAgICBfdGhpczcuX3B1Ymxpc2hRdWV1ZS5ydW4oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uX3Byb2Nlc3NSZXNwb25zZXMgPSBmdW5jdGlvbiBfcHJvY2Vzc1Jlc3BvbnNlcyhyZXNwb25zZXMpIHtcbiAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgIGlmICh0aGlzLl9vcHRpbWlzdGljVXBkYXRlcyAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5fb3B0aW1pc3RpY1VwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAodXBkYXRlKSB7XG4gICAgICAgIHJldHVybiBfdGhpczguX3B1Ymxpc2hRdWV1ZS5yZXZlcnRVcGRhdGUodXBkYXRlKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9vcHRpbWlzdGljVXBkYXRlcyA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5faW5jcmVtZW50YWxQYXlsb2Fkc1BlbmRpbmcgPSBmYWxzZTtcblxuICAgIHRoaXMuX2luY3JlbWVudGFsUmVzdWx0cy5jbGVhcigpO1xuXG4gICAgdGhpcy5fc291cmNlLmNsZWFyKCk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2VzLm1hcChmdW5jdGlvbiAocGF5bG9hZFBhcnQpIHtcbiAgICAgIHZhciByZWxheVBheWxvYWQgPSBub3JtYWxpemVSZXNwb25zZShwYXlsb2FkUGFydCwgX3RoaXM4Ll9vcGVyYXRpb24ucm9vdCwgUk9PVF9UWVBFLCB7XG4gICAgICAgIGdldERhdGFJRDogX3RoaXM4Ll9nZXREYXRhSUQsXG4gICAgICAgIHBhdGg6IFtdLFxuICAgICAgICByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXI6IF90aGlzOC5fcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyLFxuICAgICAgICByZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcjogX3RoaXM4Ll9yZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcixcbiAgICAgICAgdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsOiBfdGhpczguX3RyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCxcbiAgICAgICAgc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHM6IF90aGlzOC5fc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHNcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczguX3B1Ymxpc2hRdWV1ZS5jb21taXRQYXlsb2FkKF90aGlzOC5fb3BlcmF0aW9uLCByZWxheVBheWxvYWQsIF90aGlzOC5fdXBkYXRlcik7XG5cbiAgICAgIHJldHVybiByZWxheVBheWxvYWQ7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZXMgYW55IGZvbGxvdy11cCBhY3Rpb25zIGZvciBhIFJlbGF5IHBheWxvYWQgZm9yIEBtYXRjaCwgQGRlZmVyLFxuICAgKiBhbmQgQHN0cmVhbSBkaXJlY3RpdmVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fcHJvY2Vzc1BheWxvYWRGb2xsb3d1cHMgPSBmdW5jdGlvbiBfcHJvY2Vzc1BheWxvYWRGb2xsb3d1cHMocGF5bG9hZHMpIHtcbiAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gJ2NvbXBsZXRlZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwYXlsb2Fkcy5mb3JFYWNoKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICB2YXIgaW5jcmVtZW50YWxQbGFjZWhvbGRlcnMgPSBwYXlsb2FkLmluY3JlbWVudGFsUGxhY2Vob2xkZXJzLFxuICAgICAgICAgIG1vZHVsZUltcG9ydFBheWxvYWRzID0gcGF5bG9hZC5tb2R1bGVJbXBvcnRQYXlsb2FkcyxcbiAgICAgICAgICBpc0ZpbmFsID0gcGF5bG9hZC5pc0ZpbmFsO1xuICAgICAgX3RoaXM5Ll9zdGF0ZSA9IGlzRmluYWwgPyAnbG9hZGluZ19maW5hbCcgOiAnbG9hZGluZ19pbmNyZW1lbnRhbCc7XG5cbiAgICAgIF90aGlzOS5fdXBkYXRlQWN0aXZlU3RhdGUoKTtcblxuICAgICAgaWYgKGlzRmluYWwpIHtcbiAgICAgICAgX3RoaXM5Ll9pbmNyZW1lbnRhbFBheWxvYWRzUGVuZGluZyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kdWxlSW1wb3J0UGF5bG9hZHMgJiYgbW9kdWxlSW1wb3J0UGF5bG9hZHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25Mb2FkZXIgPSBfdGhpczkuX29wZXJhdGlvbkxvYWRlcjtcbiAgICAgICAgIW9wZXJhdGlvbkxvYWRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuRW52aXJvbm1lbnQ6IEV4cGVjdGVkIGFuIG9wZXJhdGlvbkxvYWRlciB0byBiZSAnICsgJ2NvbmZpZ3VyZWQgd2hlbiB1c2luZyBgQG1hdGNoYC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIG1vZHVsZUltcG9ydFBheWxvYWRzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUltcG9ydFBheWxvYWQpIHtcbiAgICAgICAgICBfdGhpczkuX3Byb2Nlc3NNb2R1bGVJbXBvcnRQYXlsb2FkKG1vZHVsZUltcG9ydFBheWxvYWQsIG9wZXJhdGlvbkxvYWRlcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5jcmVtZW50YWxQbGFjZWhvbGRlcnMgJiYgaW5jcmVtZW50YWxQbGFjZWhvbGRlcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIF90aGlzOS5faW5jcmVtZW50YWxQYXlsb2Fkc1BlbmRpbmcgPSBfdGhpczkuX3N0YXRlICE9PSAnbG9hZGluZ19maW5hbCc7XG4gICAgICAgIGluY3JlbWVudGFsUGxhY2Vob2xkZXJzLmZvckVhY2goZnVuY3Rpb24gKGluY3JlbWVudGFsUGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICBfdGhpczkuX3Byb2Nlc3NJbmNyZW1lbnRhbFBsYWNlaG9sZGVyKHBheWxvYWQsIGluY3JlbWVudGFsUGxhY2Vob2xkZXIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoX3RoaXM5Ll9pc0NsaWVudFBheWxvYWQgfHwgX3RoaXM5Ll9zdGF0ZSA9PT0gJ2xvYWRpbmdfZmluYWwnKSB7XG4gICAgICAgICAgLy8gVGhlIHF1ZXJ5IGhhcyBkZWZlci9zdHJlYW0gc2VsZWN0aW9ucyB0aGF0IGFyZSBlbmFibGVkLCBidXQgZWl0aGVyXG4gICAgICAgICAgLy8gdGhlIHNlcnZlciBpbmRpY2F0ZWQgdGhhdCB0aGlzIGlzIGEgXCJmaW5hbFwiIHBheWxvYWQ6IG5vIGluY3JlbWVudGFsXG4gICAgICAgICAgLy8gcGF5bG9hZHMgd2lsbCBiZSBkZWxpdmVyZWQsIHRoZW4gd2FybiB0aGF0IHRoZSBxdWVyeSB3YXMgKGxpa2VseSlcbiAgICAgICAgICAvLyBleGVjdXRlZCBvbiB0aGUgc2VydmVyIGluIG5vbi1zdHJlYW1pbmcgbW9kZSwgd2l0aCBpbmNyZW1lbnRhbFxuICAgICAgICAgIC8vIGRlbGl2ZXJ5IGRpc2FibGVkOyBvciB0aGlzIGlzIGEgY2xpZW50IHBheWxvYWQsIGFuZCB0aGVyZSB3aWxsIGJlXG4gICAgICAgICAgLy8gbm8gaW5jcmVtZW50YWwgcGF5bG9hZC5cbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKF90aGlzOS5faXNDbGllbnRQYXlsb2FkLCAnUmVsYXlNb2Rlcm5FbnZpcm9ubWVudDogT3BlcmF0aW9uIGAlc2AgY29udGFpbnMgQGRlZmVyL0BzdHJlYW0gJyArICdkaXJlY3RpdmVzIGJ1dCB3YXMgZXhlY3V0ZWQgaW4gbm9uLXN0cmVhbWluZyBtb2RlLiBTZWUgJyArICdodHRwczovL2ZidXJsLmNvbS9yZWxheS1pbmNyZW1lbnRhbC1kZWxpdmVyeS1ub24tc3RyZWFtaW5nLXdhcm5pbmcuJywgX3RoaXM5Ll9vcGVyYXRpb24ucmVxdWVzdC5ub2RlLnBhcmFtcy5uYW1lKSA6IHZvaWQgMDsgLy8gQnV0IGVhZ2VybHkgcHJvY2VzcyBhbnkgZGVmZXJyZWQgcGF5bG9hZHNcblxuICAgICAgICAgIHZhciByZWxheVBheWxvYWRzID0gW107XG4gICAgICAgICAgaW5jcmVtZW50YWxQbGFjZWhvbGRlcnMuZm9yRWFjaChmdW5jdGlvbiAocGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgIGlmIChwbGFjZWhvbGRlci5raW5kID09PSAnZGVmZXInKSB7XG4gICAgICAgICAgICAgIHJlbGF5UGF5bG9hZHMucHVzaChfdGhpczkuX3Byb2Nlc3NEZWZlclJlc3BvbnNlKHBsYWNlaG9sZGVyLmxhYmVsLCBwbGFjZWhvbGRlci5wYXRoLCBwbGFjZWhvbGRlciwge1xuICAgICAgICAgICAgICAgIGRhdGE6IHBsYWNlaG9sZGVyLmRhdGFcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKHJlbGF5UGF5bG9hZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKCFSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfQkFUQ0hFRF9TVE9SRV9VUERBVEVTKSB7XG4gICAgICAgICAgICAgIHZhciB1cGRhdGVkT3duZXJzID0gX3RoaXM5Ll9wdWJsaXNoUXVldWUucnVuKCk7XG5cbiAgICAgICAgICAgICAgX3RoaXM5Ll91cGRhdGVPcGVyYXRpb25UcmFja2VyKHVwZGF0ZWRPd25lcnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpczkuX3Byb2Nlc3NQYXlsb2FkRm9sbG93dXBzKHJlbGF5UGF5bG9hZHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5fbWF5YmVDb21wbGV0ZVN1YnNjcmlwdGlvbk9wZXJhdGlvblRyYWNraW5nID0gZnVuY3Rpb24gX21heWJlQ29tcGxldGVTdWJzY3JpcHRpb25PcGVyYXRpb25UcmFja2luZygpIHtcbiAgICBpZiAoIXRoaXMuX2lzU3Vic2NyaXB0aW9uT3BlcmF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdNb2R1bGVQYXlsb2Fkc0NvdW50ID09PSAwICYmIHRoaXMuX2luY3JlbWVudGFsUGF5bG9hZHNQZW5kaW5nID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5fY29tcGxldGVPcGVyYXRpb25UcmFja2VyKCk7XG4gICAgfVxuXG4gICAgaWYgKFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9VTklRVUVfU1VCU0NSSVBUSU9OX1JPT1QpIHtcbiAgICAgIHZhciBuZXh0SUQgPSBnZW5lcmF0ZVVuaXF1ZUNsaWVudElEKCk7XG4gICAgICB0aGlzLl9vcGVyYXRpb24gPSB7XG4gICAgICAgIHJlcXVlc3Q6IHRoaXMuX29wZXJhdGlvbi5yZXF1ZXN0LFxuICAgICAgICBmcmFnbWVudDogY3JlYXRlUmVhZGVyU2VsZWN0b3IodGhpcy5fb3BlcmF0aW9uLmZyYWdtZW50Lm5vZGUsIG5leHRJRCwgdGhpcy5fb3BlcmF0aW9uLmZyYWdtZW50LnZhcmlhYmxlcywgdGhpcy5fb3BlcmF0aW9uLmZyYWdtZW50Lm93bmVyKSxcbiAgICAgICAgcm9vdDogY3JlYXRlTm9ybWFsaXphdGlvblNlbGVjdG9yKHRoaXMuX29wZXJhdGlvbi5yb290Lm5vZGUsIG5leHRJRCwgdGhpcy5fb3BlcmF0aW9uLnJvb3QudmFyaWFibGVzKVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFByb2Nlc3NlcyBhIE1vZHVsZUltcG9ydFBheWxvYWQsIGFzeW5jaHJvbm91c2x5IHJlc29sdmluZyB0aGUgbm9ybWFsaXphdGlvblxuICAgKiBBU1QgYW5kIHVzaW5nIGl0IHRvIG5vcm1hbGl6ZSB0aGUgZmllbGQgZGF0YSBpbnRvIGEgUmVsYXlSZXNwb25zZVBheWxvYWQuXG4gICAqIFRoZSByZXN1bHRpbmcgcGF5bG9hZCBtYXkgY29udGFpbiBvdGhlciBpbmNyZW1lbnRhbCBwYXlsb2FkcyAobWF0Y2gsXG4gICAqIGRlZmVyLCBzdHJlYW0sIGV0Yyk7IHRoZXNlIGFyZSBoYW5kbGVkIGJ5IGNhbGxpbmdcbiAgICogYF9wcm9jZXNzUGF5bG9hZEZvbGxvd3VwcygpYC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uX3Byb2Nlc3NNb2R1bGVJbXBvcnRQYXlsb2FkID0gZnVuY3Rpb24gX3Byb2Nlc3NNb2R1bGVJbXBvcnRQYXlsb2FkKG1vZHVsZUltcG9ydFBheWxvYWQsIG9wZXJhdGlvbkxvYWRlcikge1xuICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgIHZhciBub2RlID0gb3BlcmF0aW9uTG9hZGVyLmdldChtb2R1bGVJbXBvcnRQYXlsb2FkLm9wZXJhdGlvblJlZmVyZW5jZSk7XG5cbiAgICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgICB2YXIgb3BlcmF0aW9uID0gZ2V0T3BlcmF0aW9uKG5vZGUpOyAvLyBJZiB0aGUgb3BlcmF0aW9uIG1vZHVsZSBpcyBhdmFpbGFibGUgc3luY2hyb25vdXNseSwgbm9ybWFsaXplIHRoZVxuICAgICAgLy8gZGF0YSBzeW5jaHJvbm91c2x5LlxuXG4gICAgICB0aGlzLl9oYW5kbGVNb2R1bGVJbXBvcnRQYXlsb2FkKG1vZHVsZUltcG9ydFBheWxvYWQsIG9wZXJhdGlvbik7XG5cbiAgICAgIHRoaXMuX21heWJlQ29tcGxldGVTdWJzY3JpcHRpb25PcGVyYXRpb25UcmFja2luZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UgbG9hZCB0aGUgb3BlcmF0aW9uIG1vZHVsZSBhbmQgc2NoZWR1bGUgYSB0YXNrIHRvIG5vcm1hbGl6ZVxuICAgICAgLy8gdGhlIGRhdGEgd2hlbiB0aGUgbW9kdWxlIGlzIGF2YWlsYWJsZS5cbiAgICAgIHZhciBfaWQzID0gdGhpcy5fbmV4dFN1YnNjcmlwdGlvbklkKys7XG5cbiAgICAgIHRoaXMuX3BlbmRpbmdNb2R1bGVQYXlsb2Fkc0NvdW50Kys7XG5cbiAgICAgIHZhciBkZWNyZW1lbnRQZW5kaW5nQ291bnQgPSBmdW5jdGlvbiBkZWNyZW1lbnRQZW5kaW5nQ291bnQoKSB7XG4gICAgICAgIF90aGlzMTAuX3BlbmRpbmdNb2R1bGVQYXlsb2Fkc0NvdW50LS07XG5cbiAgICAgICAgX3RoaXMxMC5fbWF5YmVDb21wbGV0ZVN1YnNjcmlwdGlvbk9wZXJhdGlvblRyYWNraW5nKCk7XG4gICAgICB9OyAvLyBPYnNlcnZhYmxlLmZyb20ob3BlcmF0aW9uTG9hZGVyLmxvYWQoKSkgd291bGRuJ3QgY2F0Y2ggc3luY2hyb25vdXNcbiAgICAgIC8vIGVycm9ycyB0aHJvd24gYnkgdGhlIGxvYWQgZnVuY3Rpb24sIHdoaWNoIGlzIHVzZXItZGVmaW5lZC4gR3VhcmRcbiAgICAgIC8vIGFnYWluc3QgdGhhdCB3aXRoIE9ic2VydmFibGUuZnJvbShuZXcgUHJvbWlzZSg8d29yaz4pKS5cblxuXG4gICAgICBSZWxheU9ic2VydmFibGUuZnJvbShuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIG9wZXJhdGlvbkxvYWRlci5sb2FkKG1vZHVsZUltcG9ydFBheWxvYWQub3BlcmF0aW9uUmVmZXJlbmNlKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KSkubWFwKGZ1bmN0aW9uIChvcGVyYXRpb24pIHtcbiAgICAgICAgaWYgKG9wZXJhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgX3RoaXMxMC5fc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMxMC5faGFuZGxlTW9kdWxlSW1wb3J0UGF5bG9hZChtb2R1bGVJbXBvcnRQYXlsb2FkLCBnZXRPcGVyYXRpb24ob3BlcmF0aW9uKSk7IC8vIE9LOiBhbHdheXMgaGF2ZSB0byBydW4gYWZ0ZXIgYW4gYXN5bmMgbW9kdWxlIGltcG9ydCByZXNvbHZlc1xuXG5cbiAgICAgICAgICAgIHZhciB1cGRhdGVkT3duZXJzID0gX3RoaXMxMC5fcHVibGlzaFF1ZXVlLnJ1bigpO1xuXG4gICAgICAgICAgICBfdGhpczEwLl91cGRhdGVPcGVyYXRpb25UcmFja2VyKHVwZGF0ZWRPd25lcnMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KS5zdWJzY3JpYmUoe1xuICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgX3RoaXMxMC5fY29tcGxldGUoX2lkMyk7XG5cbiAgICAgICAgICBkZWNyZW1lbnRQZW5kaW5nQ291bnQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKF9lcnJvcjQpIHtcbiAgICAgICAgICBfdGhpczEwLl9lcnJvcihfZXJyb3I0KTtcblxuICAgICAgICAgIGRlY3JlbWVudFBlbmRpbmdDb3VudCgpO1xuICAgICAgICB9LFxuICAgICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTAuX3N0YXJ0KF9pZDMsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX2hhbmRsZU1vZHVsZUltcG9ydFBheWxvYWQgPSBmdW5jdGlvbiBfaGFuZGxlTW9kdWxlSW1wb3J0UGF5bG9hZChtb2R1bGVJbXBvcnRQYXlsb2FkLCBvcGVyYXRpb24pIHtcbiAgICB2YXIgcmVsYXlQYXlsb2FkID0gdGhpcy5fbm9ybWFsaXplTW9kdWxlSW1wb3J0KG1vZHVsZUltcG9ydFBheWxvYWQsIG9wZXJhdGlvbik7XG5cbiAgICB0aGlzLl9wdWJsaXNoUXVldWUuY29tbWl0UGF5bG9hZCh0aGlzLl9vcGVyYXRpb24sIHJlbGF5UGF5bG9hZCk7XG5cbiAgICBpZiAoIVJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9CQVRDSEVEX1NUT1JFX1VQREFURVMpIHtcbiAgICAgIHZhciB1cGRhdGVkT3duZXJzID0gdGhpcy5fcHVibGlzaFF1ZXVlLnJ1bigpO1xuXG4gICAgICB0aGlzLl91cGRhdGVPcGVyYXRpb25UcmFja2VyKHVwZGF0ZWRPd25lcnMpO1xuICAgIH1cblxuICAgIHRoaXMuX3Byb2Nlc3NQYXlsb2FkRm9sbG93dXBzKFtyZWxheVBheWxvYWRdKTtcbiAgfVxuICAvKipcbiAgICogVGhlIGV4ZWN1dG9yIG5vdyBrbm93cyB0aGF0IEdyYXBoUUwgcmVzcG9uc2VzIGFyZSBleHBlY3RlZCBmb3IgYSBnaXZlblxuICAgKiBsYWJlbC9wYXRoOlxuICAgKiAtIFN0b3JlIHRoZSBwbGFjZWhvbGRlciBpbiBvcmRlciB0byBwcm9jZXNzIGFueSBmdXR1cmUgcmVzcG9uc2VzIHRoYXQgbWF5XG4gICAqICAgYXJyaXZlLlxuICAgKiAtIFRoZW4gcHJvY2VzcyBhbnkgcmVzcG9uc2VzIHRoYXQgaGFkIGFscmVhZHkgYXJyaXZlZC5cbiAgICpcbiAgICogVGhlIHBsYWNlaG9sZGVyIGNvbnRhaW5zIHRoZSBub3JtYWxpemF0aW9uIHNlbGVjdG9yLCBwYXRoIChmb3IgbmVzdGVkXG4gICAqIGRlZmVyL3N0cmVhbSksIGFuZCBvdGhlciBtZXRhZGF0YSB1c2VkIHRvIG5vcm1hbGl6ZSB0aGUgaW5jcmVtZW50YWxcbiAgICogcmVzcG9uc2UocykuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9wcm9jZXNzSW5jcmVtZW50YWxQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIF9wcm9jZXNzSW5jcmVtZW50YWxQbGFjZWhvbGRlcihyZWxheVBheWxvYWQsIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIF9yZWxheVBheWxvYWQkZmllbGRQYTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgbGFiZWwgPT4gcGF0aCA9PiBwbGFjZWhvbGRlciBtYXBcbiAgICB2YXIgbGFiZWwgPSBwbGFjZWhvbGRlci5sYWJlbCxcbiAgICAgICAgcGF0aCA9IHBsYWNlaG9sZGVyLnBhdGg7XG4gICAgdmFyIHBhdGhLZXkgPSBwYXRoLm1hcChTdHJpbmcpLmpvaW4oJy4nKTtcblxuICAgIHZhciByZXN1bHRGb3JMYWJlbCA9IHRoaXMuX2luY3JlbWVudGFsUmVzdWx0cy5nZXQobGFiZWwpO1xuXG4gICAgaWYgKHJlc3VsdEZvckxhYmVsID09IG51bGwpIHtcbiAgICAgIHJlc3VsdEZvckxhYmVsID0gbmV3IE1hcCgpO1xuXG4gICAgICB0aGlzLl9pbmNyZW1lbnRhbFJlc3VsdHMuc2V0KGxhYmVsLCByZXN1bHRGb3JMYWJlbCk7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdEZvclBhdGggPSByZXN1bHRGb3JMYWJlbC5nZXQocGF0aEtleSk7XG4gICAgdmFyIHBlbmRpbmdSZXNwb25zZXMgPSByZXN1bHRGb3JQYXRoICE9IG51bGwgJiYgcmVzdWx0Rm9yUGF0aC5raW5kID09PSAncmVzcG9uc2UnID8gcmVzdWx0Rm9yUGF0aC5yZXNwb25zZXMgOiBudWxsO1xuICAgIHJlc3VsdEZvckxhYmVsLnNldChwYXRoS2V5LCB7XG4gICAgICBraW5kOiAncGxhY2Vob2xkZXInLFxuICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyXG4gICAgfSk7IC8vIFN0b3JlIHJlZmVyZW5jZXMgdG8gdGhlIHBhcmVudCBub2RlIHRvIGFsbG93IGRldGVjdGluZyBjb25jdXJyZW50XG4gICAgLy8gbW9kaWZpY2F0aW9ucyB0byB0aGUgcGFyZW50IGJlZm9yZSBpdGVtcyBhcnJpdmUgYW5kIHRvIHJlcGxheVxuICAgIC8vIGhhbmRsZSBmaWVsZCBwYXlsb2FkcyB0byBhY2NvdW50IGZvciBuZXcgaW5mb3JtYXRpb24gb24gc291cmNlIHJlY29yZHMuXG5cbiAgICB2YXIgcGFyZW50SUQ7XG5cbiAgICBpZiAocGxhY2Vob2xkZXIua2luZCA9PT0gJ3N0cmVhbScpIHtcbiAgICAgIHBhcmVudElEID0gcGxhY2Vob2xkZXIucGFyZW50SUQ7XG4gICAgfSBlbHNlIGlmIChwbGFjZWhvbGRlci5raW5kID09PSAnZGVmZXInKSB7XG4gICAgICBwYXJlbnRJRCA9IHBsYWNlaG9sZGVyLnNlbGVjdG9yLmRhdGFJRDtcbiAgICB9IGVsc2Uge1xuICAgICAgcGxhY2Vob2xkZXI7XG4gICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdVbnN1cHBvcnRlZCBpbmNyZW1lbnRhbCBwbGFjZWhvbGRlciBraW5kIGAlc2AuJywgcGxhY2Vob2xkZXIua2luZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnRSZWNvcmQgPSByZWxheVBheWxvYWQuc291cmNlLmdldChwYXJlbnRJRCk7XG4gICAgdmFyIHBhcmVudFBheWxvYWRzID0gKChfcmVsYXlQYXlsb2FkJGZpZWxkUGEgPSByZWxheVBheWxvYWQuZmllbGRQYXlsb2FkcykgIT09IG51bGwgJiYgX3JlbGF5UGF5bG9hZCRmaWVsZFBhICE9PSB2b2lkIDAgPyBfcmVsYXlQYXlsb2FkJGZpZWxkUGEgOiBbXSkuZmlsdGVyKGZ1bmN0aW9uIChmaWVsZFBheWxvYWQpIHtcbiAgICAgIHZhciBmaWVsZElEID0gZ2VuZXJhdGVDbGllbnRJRChmaWVsZFBheWxvYWQuZGF0YUlELCBmaWVsZFBheWxvYWQuZmllbGRLZXkpO1xuICAgICAgcmV0dXJuICgvLyBoYW5kbGVycyBhcHBsaWVkIHRvIHRoZSBzdHJlYW1lZCBmaWVsZCBpdHNlbGZcbiAgICAgICAgZmllbGRQYXlsb2FkLmRhdGFJRCA9PT0gcGFyZW50SUQgfHwgLy8gaGFuZGxlcnMgYXBwbGllZCB0byBhIGZpZWxkIG9uIGFuIGFuY2VzdG9yIG9iamVjdCwgd2hlcmVcbiAgICAgICAgLy8gYW5jZXN0b3IuZmllbGQgbGlua3MgdG8gdGhlIHBhcmVudCByZWNvcmQgKGV4YW1wbGU6IGNvbm5lY3Rpb25zKVxuICAgICAgICBmaWVsZElEID09PSBwYXJlbnRJRFxuICAgICAgKTtcbiAgICB9KTsgLy8gSWYgYW4gaW5jcmVtZW50YWwgcGF5bG9hZCBleGlzdHMgZm9yIHNvbWUgaWQgdGhhdCByZWNvcmQgc2hvdWxkIGFsc29cbiAgICAvLyBleGlzdC5cblxuICAgICEocGFyZW50UmVjb3JkICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5FbnZpcm9ubWVudDogRXhwZWN0ZWQgcmVjb3JkIGAlc2AgdG8gZXhpc3QuJywgcGFyZW50SUQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgbmV4dFBhcmVudFJlY29yZDtcbiAgICB2YXIgbmV4dFBhcmVudFBheWxvYWRzO1xuXG4gICAgdmFyIHByZXZpb3VzUGFyZW50RW50cnkgPSB0aGlzLl9zb3VyY2UuZ2V0KHBhcmVudElEKTtcblxuICAgIGlmIChwcmV2aW91c1BhcmVudEVudHJ5ICE9IG51bGwpIHtcbiAgICAgIC8vIElmIGEgcHJldmlvdXMgZW50cnkgZXhpc3RzLCBtZXJnZSB0aGUgcHJldmlvdXMvbmV4dCByZWNvcmRzIGFuZFxuICAgICAgLy8gcGF5bG9hZHMgdG9nZXRoZXIuXG4gICAgICBuZXh0UGFyZW50UmVjb3JkID0gUmVsYXlNb2Rlcm5SZWNvcmQudXBkYXRlKHByZXZpb3VzUGFyZW50RW50cnkucmVjb3JkLCBwYXJlbnRSZWNvcmQpO1xuICAgICAgdmFyIGhhbmRsZVBheWxvYWRzID0gbmV3IE1hcCgpO1xuXG4gICAgICB2YXIgZGVkdXBlUGF5bG9hZCA9IGZ1bmN0aW9uIGRlZHVwZVBheWxvYWQocGF5bG9hZCkge1xuICAgICAgICB2YXIga2V5ID0gc3RhYmxlU3RyaW5naWZ5KHBheWxvYWQpO1xuICAgICAgICBoYW5kbGVQYXlsb2Fkcy5zZXQoa2V5LCBwYXlsb2FkKTtcbiAgICAgIH07XG5cbiAgICAgIHByZXZpb3VzUGFyZW50RW50cnkuZmllbGRQYXlsb2Fkcy5mb3JFYWNoKGRlZHVwZVBheWxvYWQpO1xuICAgICAgcGFyZW50UGF5bG9hZHMuZm9yRWFjaChkZWR1cGVQYXlsb2FkKTtcbiAgICAgIG5leHRQYXJlbnRQYXlsb2FkcyA9IEFycmF5LmZyb20oaGFuZGxlUGF5bG9hZHMudmFsdWVzKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0UGFyZW50UmVjb3JkID0gcGFyZW50UmVjb3JkO1xuICAgICAgbmV4dFBhcmVudFBheWxvYWRzID0gcGFyZW50UGF5bG9hZHM7XG4gICAgfVxuXG4gICAgdGhpcy5fc291cmNlLnNldChwYXJlbnRJRCwge1xuICAgICAgcmVjb3JkOiBuZXh0UGFyZW50UmVjb3JkLFxuICAgICAgZmllbGRQYXlsb2FkczogbmV4dFBhcmVudFBheWxvYWRzXG4gICAgfSk7IC8vIElmIHRoZXJlIHdlcmUgYW55IHF1ZXVlZCByZXNwb25zZXMsIHByb2Nlc3MgdGhlbSBub3cgdGhhdCBwbGFjZWhvbGRlcnNcbiAgICAvLyBhcmUgaW4gcGxhY2VcblxuXG4gICAgaWYgKHBlbmRpbmdSZXNwb25zZXMgIT0gbnVsbCkge1xuICAgICAgdmFyIHBheWxvYWRGb2xsb3d1cHMgPSB0aGlzLl9wcm9jZXNzSW5jcmVtZW50YWxSZXNwb25zZXMocGVuZGluZ1Jlc3BvbnNlcyk7XG5cbiAgICAgIGlmICghUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX0JBVENIRURfU1RPUkVfVVBEQVRFUykge1xuICAgICAgICB2YXIgdXBkYXRlZE93bmVycyA9IHRoaXMuX3B1Ymxpc2hRdWV1ZS5ydW4oKTtcblxuICAgICAgICB0aGlzLl91cGRhdGVPcGVyYXRpb25UcmFja2VyKHVwZGF0ZWRPd25lcnMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wcm9jZXNzUGF5bG9hZEZvbGxvd3VwcyhwYXlsb2FkRm9sbG93dXBzKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIExvb2t1cCB0aGUgcGxhY2Vob2xkZXIgdGhlIGRlc2NyaWJlcyBob3cgdG8gcHJvY2VzcyBhbiBpbmNyZW1lbnRhbFxuICAgKiByZXNwb25zZSwgbm9ybWFsaXplL3B1Ymxpc2ggaXQsIGFuZCBwcm9jZXNzIGFueSBuZXN0ZWQgZGVmZXIvbWF0Y2gvc3RyZWFtXG4gICAqIG1ldGFkYXRhLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fcHJvY2Vzc0luY3JlbWVudGFsUmVzcG9uc2VzID0gZnVuY3Rpb24gX3Byb2Nlc3NJbmNyZW1lbnRhbFJlc3BvbnNlcyhpbmNyZW1lbnRhbFJlc3BvbnNlcykge1xuICAgIHZhciBfdGhpczExID0gdGhpcztcblxuICAgIHZhciByZWxheVBheWxvYWRzID0gW107XG4gICAgaW5jcmVtZW50YWxSZXNwb25zZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5jcmVtZW50YWxSZXNwb25zZSkge1xuICAgICAgdmFyIGxhYmVsID0gaW5jcmVtZW50YWxSZXNwb25zZS5sYWJlbCxcbiAgICAgICAgICBwYXRoID0gaW5jcmVtZW50YWxSZXNwb25zZS5wYXRoLFxuICAgICAgICAgIHJlc3BvbnNlID0gaW5jcmVtZW50YWxSZXNwb25zZS5yZXNwb25zZTtcblxuICAgICAgdmFyIHJlc3VsdEZvckxhYmVsID0gX3RoaXMxMS5faW5jcmVtZW50YWxSZXN1bHRzLmdldChsYWJlbCk7XG5cbiAgICAgIGlmIChyZXN1bHRGb3JMYWJlbCA9PSBudWxsKSB7XG4gICAgICAgIHJlc3VsdEZvckxhYmVsID0gbmV3IE1hcCgpO1xuXG4gICAgICAgIF90aGlzMTEuX2luY3JlbWVudGFsUmVzdWx0cy5zZXQobGFiZWwsIHJlc3VsdEZvckxhYmVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxhYmVsLmluZGV4T2YoJyRkZWZlciQnKSAhPT0gLTEpIHtcbiAgICAgICAgdmFyIHBhdGhLZXkgPSBwYXRoLm1hcChTdHJpbmcpLmpvaW4oJy4nKTtcbiAgICAgICAgdmFyIHJlc3VsdEZvclBhdGggPSByZXN1bHRGb3JMYWJlbC5nZXQocGF0aEtleSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdEZvclBhdGggPT0gbnVsbCkge1xuICAgICAgICAgIHJlc3VsdEZvclBhdGggPSB7XG4gICAgICAgICAgICBraW5kOiAncmVzcG9uc2UnLFxuICAgICAgICAgICAgcmVzcG9uc2VzOiBbaW5jcmVtZW50YWxSZXNwb25zZV1cbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlc3VsdEZvckxhYmVsLnNldChwYXRoS2V5LCByZXN1bHRGb3JQYXRoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0Rm9yUGF0aC5raW5kID09PSAncmVzcG9uc2UnKSB7XG4gICAgICAgICAgcmVzdWx0Rm9yUGF0aC5yZXNwb25zZXMucHVzaChpbmNyZW1lbnRhbFJlc3BvbnNlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSByZXN1bHRGb3JQYXRoLnBsYWNlaG9sZGVyO1xuICAgICAgICAhKHBsYWNlaG9sZGVyLmtpbmQgPT09ICdkZWZlcicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5FbnZpcm9ubWVudDogRXhwZWN0ZWQgZGF0YSBmb3IgcGF0aCBgJXNgIGZvciBsYWJlbCBgJXNgICcgKyAndG8gYmUgZGF0YSBmb3IgQGRlZmVyLCB3YXMgYEAlc2AuJywgcGF0aEtleSwgbGFiZWwsIHBsYWNlaG9sZGVyLmtpbmQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgcmVsYXlQYXlsb2Fkcy5wdXNoKF90aGlzMTEuX3Byb2Nlc3NEZWZlclJlc3BvbnNlKGxhYmVsLCBwYXRoLCBwbGFjZWhvbGRlciwgcmVzcG9uc2UpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEBzdHJlYW0gcGF5bG9hZCBwYXRoIHZhbHVlcyBlbmQgaW4gdGhlIGZpZWxkIG5hbWUgYW5kIGl0ZW0gaW5kZXgsXG4gICAgICAgIC8vIGJ1dCBSZWxheSByZWNvcmRzIHBhdGhzIHJlbGF0aXZlIHRvIHRoZSBwYXJlbnQgb2YgdGhlIHN0cmVhbSBub2RlOlxuICAgICAgICAvLyB0aGVyZWZvcmUgd2Ugc3RyaXAgdGhlIGxhc3QgdHdvIGVsZW1lbnRzIGp1c3QgdG8gbG9va3VwIHRoZSBwYXRoXG4gICAgICAgIC8vICh0aGUgaXRlbSBpbmRleCBpcyB1c2VkIGxhdGVyIHRvIGluc2VydCB0aGUgZWxlbWVudCBpbiB0aGUgbGlzdClcbiAgICAgICAgdmFyIF9wYXRoS2V5ID0gcGF0aC5zbGljZSgwLCAtMikubWFwKFN0cmluZykuam9pbignLicpO1xuXG4gICAgICAgIHZhciBfcmVzdWx0Rm9yUGF0aCA9IHJlc3VsdEZvckxhYmVsLmdldChfcGF0aEtleSk7XG5cbiAgICAgICAgaWYgKF9yZXN1bHRGb3JQYXRoID09IG51bGwpIHtcbiAgICAgICAgICBfcmVzdWx0Rm9yUGF0aCA9IHtcbiAgICAgICAgICAgIGtpbmQ6ICdyZXNwb25zZScsXG4gICAgICAgICAgICByZXNwb25zZXM6IFtpbmNyZW1lbnRhbFJlc3BvbnNlXVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmVzdWx0Rm9yTGFiZWwuc2V0KF9wYXRoS2V5LCBfcmVzdWx0Rm9yUGF0aCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF9yZXN1bHRGb3JQYXRoLmtpbmQgPT09ICdyZXNwb25zZScpIHtcbiAgICAgICAgICBfcmVzdWx0Rm9yUGF0aC5yZXNwb25zZXMucHVzaChpbmNyZW1lbnRhbFJlc3BvbnNlKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfcGxhY2Vob2xkZXIgPSBfcmVzdWx0Rm9yUGF0aC5wbGFjZWhvbGRlcjtcbiAgICAgICAgIShfcGxhY2Vob2xkZXIua2luZCA9PT0gJ3N0cmVhbScpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5FbnZpcm9ubWVudDogRXhwZWN0ZWQgZGF0YSBmb3IgcGF0aCBgJXNgIGZvciBsYWJlbCBgJXNgICcgKyAndG8gYmUgZGF0YSBmb3IgQHN0cmVhbSwgd2FzIGBAJXNgLicsIF9wYXRoS2V5LCBsYWJlbCwgX3BsYWNlaG9sZGVyLmtpbmQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgcmVsYXlQYXlsb2Fkcy5wdXNoKF90aGlzMTEuX3Byb2Nlc3NTdHJlYW1SZXNwb25zZShsYWJlbCwgcGF0aCwgX3BsYWNlaG9sZGVyLCByZXNwb25zZSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZWxheVBheWxvYWRzO1xuICB9O1xuXG4gIF9wcm90by5fcHJvY2Vzc0RlZmVyUmVzcG9uc2UgPSBmdW5jdGlvbiBfcHJvY2Vzc0RlZmVyUmVzcG9uc2UobGFiZWwsIHBhdGgsIHBsYWNlaG9sZGVyLCByZXNwb25zZSkge1xuICAgIHZhciBwYXJlbnRJRCA9IHBsYWNlaG9sZGVyLnNlbGVjdG9yLmRhdGFJRDtcbiAgICB2YXIgcmVsYXlQYXlsb2FkID0gbm9ybWFsaXplUmVzcG9uc2UocmVzcG9uc2UsIHBsYWNlaG9sZGVyLnNlbGVjdG9yLCBwbGFjZWhvbGRlci50eXBlTmFtZSwge1xuICAgICAgZ2V0RGF0YUlEOiB0aGlzLl9nZXREYXRhSUQsXG4gICAgICBwYXRoOiBwbGFjZWhvbGRlci5wYXRoLFxuICAgICAgcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyOiB0aGlzLl9yZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIsXG4gICAgICByZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcjogdGhpcy5fcmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXIsXG4gICAgICB0cmVhdE1pc3NpbmdGaWVsZHNBc051bGw6IHRoaXMuX3RyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCxcbiAgICAgIHNob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzOiB0aGlzLl9zaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50c1xuICAgIH0pO1xuXG4gICAgdGhpcy5fcHVibGlzaFF1ZXVlLmNvbW1pdFBheWxvYWQodGhpcy5fb3BlcmF0aW9uLCByZWxheVBheWxvYWQpOyAvLyBMb2FkIHRoZSB2ZXJzaW9uIG9mIHRoZSBwYXJlbnQgcmVjb3JkIGZyb20gd2hpY2ggdGhpcyBpbmNyZW1lbnRhbCBkYXRhXG4gICAgLy8gd2FzIGRlcml2ZWRcblxuXG4gICAgdmFyIHBhcmVudEVudHJ5ID0gdGhpcy5fc291cmNlLmdldChwYXJlbnRJRCk7XG5cbiAgICAhKHBhcmVudEVudHJ5ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5FbnZpcm9ubWVudDogRXhwZWN0ZWQgdGhlIHBhcmVudCByZWNvcmQgYCVzYCBmb3IgQGRlZmVyICcgKyAnZGF0YSB0byBleGlzdC4nLCBwYXJlbnRJRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBmaWVsZFBheWxvYWRzID0gcGFyZW50RW50cnkuZmllbGRQYXlsb2FkcztcblxuICAgIGlmIChmaWVsZFBheWxvYWRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdmFyIF9yZXNwb25zZSRleHRlbnNpb25zMjtcblxuICAgICAgdmFyIGhhbmRsZUZpZWxkc1JlbGF5UGF5bG9hZCA9IHtcbiAgICAgICAgZXJyb3JzOiBudWxsLFxuICAgICAgICBmaWVsZFBheWxvYWRzOiBmaWVsZFBheWxvYWRzLFxuICAgICAgICBpbmNyZW1lbnRhbFBsYWNlaG9sZGVyczogbnVsbCxcbiAgICAgICAgbW9kdWxlSW1wb3J0UGF5bG9hZHM6IG51bGwsXG4gICAgICAgIHNvdXJjZTogUmVsYXlSZWNvcmRTb3VyY2UuY3JlYXRlKCksXG4gICAgICAgIGlzRmluYWw6ICgoX3Jlc3BvbnNlJGV4dGVuc2lvbnMyID0gcmVzcG9uc2UuZXh0ZW5zaW9ucykgPT09IG51bGwgfHwgX3Jlc3BvbnNlJGV4dGVuc2lvbnMyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcmVzcG9uc2UkZXh0ZW5zaW9uczIuaXNfZmluYWwpID09PSB0cnVlXG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9wdWJsaXNoUXVldWUuY29tbWl0UGF5bG9hZCh0aGlzLl9vcGVyYXRpb24sIGhhbmRsZUZpZWxkc1JlbGF5UGF5bG9hZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbGF5UGF5bG9hZDtcbiAgfVxuICAvKipcbiAgICogUHJvY2VzcyB0aGUgZGF0YSBmb3Igb25lIGl0ZW0gaW4gYSBAc3RyZWFtIGZpZWxkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fcHJvY2Vzc1N0cmVhbVJlc3BvbnNlID0gZnVuY3Rpb24gX3Byb2Nlc3NTdHJlYW1SZXNwb25zZShsYWJlbCwgcGF0aCwgcGxhY2Vob2xkZXIsIHJlc3BvbnNlKSB7XG4gICAgdmFyIHBhcmVudElEID0gcGxhY2Vob2xkZXIucGFyZW50SUQsXG4gICAgICAgIG5vZGUgPSBwbGFjZWhvbGRlci5ub2RlLFxuICAgICAgICB2YXJpYWJsZXMgPSBwbGFjZWhvbGRlci52YXJpYWJsZXM7IC8vIEZpbmQgdGhlIExpbmtlZEZpZWxkIHdoZXJlIEBzdHJlYW0gd2FzIGFwcGxpZWRcblxuICAgIHZhciBmaWVsZCA9IG5vZGUuc2VsZWN0aW9uc1swXTtcbiAgICAhKGZpZWxkICE9IG51bGwgJiYgZmllbGQua2luZCA9PT0gJ0xpbmtlZEZpZWxkJyAmJiBmaWVsZC5wbHVyYWwgPT09IHRydWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5FbnZpcm9ubWVudDogRXhwZWN0ZWQgQHN0cmVhbSB0byBiZSB1c2VkIG9uIGEgcGx1cmFsIGZpZWxkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBfdGhpcyRfbm9ybWFsaXplU3RyZWEgPSB0aGlzLl9ub3JtYWxpemVTdHJlYW1JdGVtKHJlc3BvbnNlLCBwYXJlbnRJRCwgZmllbGQsIHZhcmlhYmxlcywgcGF0aCwgcGxhY2Vob2xkZXIucGF0aCksXG4gICAgICAgIGZpZWxkUGF5bG9hZHMgPSBfdGhpcyRfbm9ybWFsaXplU3RyZWEuZmllbGRQYXlsb2FkcyxcbiAgICAgICAgaXRlbUlEID0gX3RoaXMkX25vcm1hbGl6ZVN0cmVhLml0ZW1JRCxcbiAgICAgICAgaXRlbUluZGV4ID0gX3RoaXMkX25vcm1hbGl6ZVN0cmVhLml0ZW1JbmRleCxcbiAgICAgICAgcHJldklEcyA9IF90aGlzJF9ub3JtYWxpemVTdHJlYS5wcmV2SURzLFxuICAgICAgICByZWxheVBheWxvYWQgPSBfdGhpcyRfbm9ybWFsaXplU3RyZWEucmVsYXlQYXlsb2FkLFxuICAgICAgICBzdG9yYWdlS2V5ID0gX3RoaXMkX25vcm1hbGl6ZVN0cmVhLnN0b3JhZ2VLZXk7IC8vIFB1Ymxpc2ggdGhlIG5ldyBpdGVtIGFuZCB1cGRhdGUgdGhlIHBhcmVudCByZWNvcmQgdG8gc2V0XG4gICAgLy8gZmllbGRbaW5kZXhdID0gaXRlbSAqaWYqIHRoZSBwYXJlbnQgcmVjb3JkIGhhc24ndCBiZWVuIGNvbmN1cnJlbnRseVxuICAgIC8vIG1vZGlmaWVkLlxuXG5cbiAgICB0aGlzLl9wdWJsaXNoUXVldWUuY29tbWl0UGF5bG9hZCh0aGlzLl9vcGVyYXRpb24sIHJlbGF5UGF5bG9hZCwgZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgICB2YXIgY3VycmVudFBhcmVudFJlY29yZCA9IHN0b3JlLmdldChwYXJlbnRJRCk7XG5cbiAgICAgIGlmIChjdXJyZW50UGFyZW50UmVjb3JkID09IG51bGwpIHtcbiAgICAgICAgLy8gcGFyZW50IGhhcyBzaW5jZSBiZWVuIGRlbGV0ZWQsIHN0cmVhbSBkYXRhIGlzIHN0YWxlXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnJlbnRJdGVtcyA9IGN1cnJlbnRQYXJlbnRSZWNvcmQuZ2V0TGlua2VkUmVjb3JkcyhzdG9yYWdlS2V5KTtcblxuICAgICAgaWYgKGN1cnJlbnRJdGVtcyA9PSBudWxsKSB7XG4gICAgICAgIC8vIGZpZWxkIGhhcyBzaW5jZSBiZWVuIGRlbGV0ZWQsIHN0cmVhbSBkYXRhIGlzIHN0YWxlXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRJdGVtcy5sZW5ndGggIT09IHByZXZJRHMubGVuZ3RoIHx8IGN1cnJlbnRJdGVtcy5zb21lKGZ1bmN0aW9uIChjdXJyZW50SXRlbSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHByZXZJRHNbaW5kZXhdICE9PSAoY3VycmVudEl0ZW0gJiYgY3VycmVudEl0ZW0uZ2V0RGF0YUlEKCkpO1xuICAgICAgfSkpIHtcbiAgICAgICAgLy8gZmllbGQgaGFzIGJlZW4gbW9kaWZpZWQgYnkgc29tZXRoaW5nIG90aGVyIHRoYW4gdGhpcyBxdWVyeSxcbiAgICAgICAgLy8gc3RyZWFtIGRhdGEgaXMgc3RhbGVcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBwYXJlbnQuZmllbGQgaGFzIG5vdCBiZWVuIGNvbmN1cnJlbnRseSBtb2RpZmllZDpcbiAgICAgIC8vIHVwZGF0ZSBgcGFyZW50LmZpZWxkW2luZGV4XSA9IGl0ZW1gXG5cblxuICAgICAgdmFyIG5leHRJdGVtcyA9ICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkoY3VycmVudEl0ZW1zKTtcbiAgICAgIG5leHRJdGVtc1tpdGVtSW5kZXhdID0gc3RvcmUuZ2V0KGl0ZW1JRCk7XG4gICAgICBjdXJyZW50UGFyZW50UmVjb3JkLnNldExpbmtlZFJlY29yZHMobmV4dEl0ZW1zLCBzdG9yYWdlS2V5KTtcbiAgICB9KTsgLy8gTm93IHRoYXQgdGhlIHBhcmVudCByZWNvcmQgaGFzIGJlZW4gdXBkYXRlZCB0byBpbmNsdWRlIHRoZSBuZXcgaXRlbSxcbiAgICAvLyBhbHNvIHVwZGF0ZSBhbnkgaGFuZGxlIGZpZWxkcyB0aGF0IGFyZSBkZXJpdmVkIGZyb20gdGhlIHBhcmVudCByZWNvcmQuXG5cblxuICAgIGlmIChmaWVsZFBheWxvYWRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdmFyIGhhbmRsZUZpZWxkc1JlbGF5UGF5bG9hZCA9IHtcbiAgICAgICAgZXJyb3JzOiBudWxsLFxuICAgICAgICBmaWVsZFBheWxvYWRzOiBmaWVsZFBheWxvYWRzLFxuICAgICAgICBpbmNyZW1lbnRhbFBsYWNlaG9sZGVyczogbnVsbCxcbiAgICAgICAgbW9kdWxlSW1wb3J0UGF5bG9hZHM6IG51bGwsXG4gICAgICAgIHNvdXJjZTogUmVsYXlSZWNvcmRTb3VyY2UuY3JlYXRlKCksXG4gICAgICAgIGlzRmluYWw6IGZhbHNlXG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9wdWJsaXNoUXVldWUuY29tbWl0UGF5bG9hZCh0aGlzLl9vcGVyYXRpb24sIGhhbmRsZUZpZWxkc1JlbGF5UGF5bG9hZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbGF5UGF5bG9hZDtcbiAgfTtcblxuICBfcHJvdG8uX25vcm1hbGl6ZVN0cmVhbUl0ZW0gPSBmdW5jdGlvbiBfbm9ybWFsaXplU3RyZWFtSXRlbShyZXNwb25zZSwgcGFyZW50SUQsIGZpZWxkLCB2YXJpYWJsZXMsIHBhdGgsIG5vcm1hbGl6YXRpb25QYXRoKSB7XG4gICAgdmFyIF9maWVsZCRhbGlhcywgX2ZpZWxkJGNvbmNyZXRlVHlwZSwgX3RoaXMkX2dldERhdGFJRDtcblxuICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YTtcbiAgICAhKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkVudmlyb25tZW50OiBFeHBlY3RlZCB0aGUgR3JhcGhRTCBAc3RyZWFtIHBheWxvYWQgYGRhdGFgICcgKyAndmFsdWUgdG8gYmUgYW4gb2JqZWN0LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgcmVzcG9uc2VLZXkgPSAoX2ZpZWxkJGFsaWFzID0gZmllbGQuYWxpYXMpICE9PSBudWxsICYmIF9maWVsZCRhbGlhcyAhPT0gdm9pZCAwID8gX2ZpZWxkJGFsaWFzIDogZmllbGQubmFtZTtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0b3JhZ2VLZXkoZmllbGQsIHZhcmlhYmxlcyk7IC8vIExvYWQgdGhlIHZlcnNpb24gb2YgdGhlIHBhcmVudCByZWNvcmQgZnJvbSB3aGljaCB0aGlzIGluY3JlbWVudGFsIGRhdGFcbiAgICAvLyB3YXMgZGVyaXZlZFxuXG4gICAgdmFyIHBhcmVudEVudHJ5ID0gdGhpcy5fc291cmNlLmdldChwYXJlbnRJRCk7XG5cbiAgICAhKHBhcmVudEVudHJ5ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5FbnZpcm9ubWVudDogRXhwZWN0ZWQgdGhlIHBhcmVudCByZWNvcmQgYCVzYCBmb3IgQHN0cmVhbSAnICsgJ2RhdGEgdG8gZXhpc3QuJywgcGFyZW50SUQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgcGFyZW50UmVjb3JkID0gcGFyZW50RW50cnkucmVjb3JkLFxuICAgICAgICBmaWVsZFBheWxvYWRzID0gcGFyZW50RW50cnkuZmllbGRQYXlsb2FkczsgLy8gTG9hZCB0aGUgZmllbGQgdmFsdWUgKGl0ZW1zKSB0aGF0IHdlcmUgY3JlYXRlZCBieSAqdGhpcyogcXVlcnkgZXhlY3V0b3JcbiAgICAvLyBpbiBvcmRlciB0byBjaGVjayBpZiB0aGVyZSBoYXMgYmVlbiBhbnkgY29uY3VycmVudCBtb2RpZmljYXRpb25zIGJ5IHNvbWVcbiAgICAvLyBvdGhlciBvcGVyYXRpb24uXG5cbiAgICB2YXIgcHJldklEcyA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldExpbmtlZFJlY29yZElEcyhwYXJlbnRSZWNvcmQsIHN0b3JhZ2VLZXkpO1xuICAgICEocHJldklEcyAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuRW52aXJvbm1lbnQ6IEV4cGVjdGVkIHJlY29yZCBgJXNgIHRvIGhhdmUgZmV0Y2hlZCBmaWVsZCAnICsgJ2Alc2Agd2l0aCBAc3RyZWFtLicsIHBhcmVudElELCBmaWVsZC5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7IC8vIERldGVybWluZSB0aGUgaW5kZXggaW4gdGhlIGZpZWxkIG9mIHRoZSBuZXcgaXRlbVxuXG4gICAgdmFyIGZpbmFsUGF0aEVudHJ5ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgIHZhciBpdGVtSW5kZXggPSBwYXJzZUludChmaW5hbFBhdGhFbnRyeSwgMTApO1xuICAgICEoaXRlbUluZGV4ID09PSBmaW5hbFBhdGhFbnRyeSAmJiBpdGVtSW5kZXggPj0gMCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkVudmlyb25tZW50OiBFeHBlY3RlZCBwYXRoIGZvciBAc3RyZWFtIHRvIGVuZCBpbiBhICcgKyAncG9zaXRpdmUgaW50ZWdlciBpbmRleCwgZ290IGAlc2AnLCBmaW5hbFBhdGhFbnRyeSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciB0eXBlTmFtZSA9IChfZmllbGQkY29uY3JldGVUeXBlID0gZmllbGQuY29uY3JldGVUeXBlKSAhPT0gbnVsbCAmJiBfZmllbGQkY29uY3JldGVUeXBlICE9PSB2b2lkIDAgPyBfZmllbGQkY29uY3JldGVUeXBlIDogZGF0YVtUWVBFTkFNRV9LRVldO1xuICAgICEodHlwZW9mIHR5cGVOYW1lID09PSAnc3RyaW5nJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkVudmlyb25tZW50OiBFeHBlY3RlZCBAc3RyZWFtIGZpZWxkIGAlc2AgdG8gaGF2ZSBhICcgKyAnX190eXBlbmFtZS4nLCBmaWVsZC5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7IC8vIERldGVybWluZSB0aGUgX19pZCBvZiB0aGUgbmV3IGl0ZW06IHRoaXMgbXVzdCBlcXVhbCB0aGUgdmFsdWUgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGFzc2lnbmVkIGhhZCB0aGUgaXRlbSBub3QgYmVlbiBzdHJlYW1lZFxuXG4gICAgdmFyIGl0ZW1JRCA9IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmV0dGllci9wcmV0dGllci9pc3N1ZXMvNjQwM1xuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICgoX3RoaXMkX2dldERhdGFJRCA9IHRoaXMuX2dldERhdGFJRChkYXRhLCB0eXBlTmFtZSkpICE9PSBudWxsICYmIF90aGlzJF9nZXREYXRhSUQgIT09IHZvaWQgMCA/IF90aGlzJF9nZXREYXRhSUQgOiBwcmV2SURzICYmIHByZXZJRHNbaXRlbUluZGV4XSkgfHwgLy8gUmV1c2UgcHJldmlvdXNseSBnZW5lcmF0ZWQgY2xpZW50IElEc1xuICAgIGdlbmVyYXRlQ2xpZW50SUQocGFyZW50SUQsIHN0b3JhZ2VLZXksIGl0ZW1JbmRleCk7XG4gICAgISh0eXBlb2YgaXRlbUlEID09PSAnc3RyaW5nJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkVudmlyb25tZW50OiBFeHBlY3RlZCBpZCBvZiBlbGVtZW50cyBvZiBmaWVsZCBgJXNgIHRvICcgKyAnYmUgc3RyaW5ncy4nLCBzdG9yYWdlS2V5KSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7IC8vIEJ1aWxkIGEgc2VsZWN0b3IgdG8gbm9ybWFsaXplIHRoZSBpdGVtIGRhdGEgd2l0aFxuXG4gICAgdmFyIHNlbGVjdG9yID0gY3JlYXRlTm9ybWFsaXphdGlvblNlbGVjdG9yKGZpZWxkLCBpdGVtSUQsIHZhcmlhYmxlcyk7IC8vIFVwZGF0ZSB0aGUgY2FjaGVkIHZlcnNpb24gb2YgdGhlIHBhcmVudCByZWNvcmQgdG8gcmVmbGVjdCB0aGUgbmV3IGl0ZW06XG4gICAgLy8gdGhpcyBpcyB1c2VkIHdoZW4gc3Vic2VxdWVudCBzdHJlYW0gcGF5bG9hZHMgYXJyaXZlIHRvIHNlZSBpZiB0aGVyZVxuICAgIC8vIGhhdmUgYmVlbiBjb25jdXJyZW50IG1vZGlmaWNhdGlvbnMgdG8gdGhlIGxpc3RcblxuICAgIHZhciBuZXh0UGFyZW50UmVjb3JkID0gUmVsYXlNb2Rlcm5SZWNvcmQuY2xvbmUocGFyZW50UmVjb3JkKTtcbiAgICB2YXIgbmV4dElEcyA9ICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkocHJldklEcyk7XG4gICAgbmV4dElEc1tpdGVtSW5kZXhdID0gaXRlbUlEO1xuICAgIFJlbGF5TW9kZXJuUmVjb3JkLnNldExpbmtlZFJlY29yZElEcyhuZXh0UGFyZW50UmVjb3JkLCBzdG9yYWdlS2V5LCBuZXh0SURzKTtcblxuICAgIHRoaXMuX3NvdXJjZS5zZXQocGFyZW50SUQsIHtcbiAgICAgIHJlY29yZDogbmV4dFBhcmVudFJlY29yZCxcbiAgICAgIGZpZWxkUGF5bG9hZHM6IGZpZWxkUGF5bG9hZHNcbiAgICB9KTtcblxuICAgIHZhciByZWxheVBheWxvYWQgPSBub3JtYWxpemVSZXNwb25zZShyZXNwb25zZSwgc2VsZWN0b3IsIHR5cGVOYW1lLCB7XG4gICAgICBnZXREYXRhSUQ6IHRoaXMuX2dldERhdGFJRCxcbiAgICAgIHBhdGg6IFtdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKG5vcm1hbGl6YXRpb25QYXRoKSwgW3Jlc3BvbnNlS2V5LCBTdHJpbmcoaXRlbUluZGV4KV0pLFxuICAgICAgcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyOiB0aGlzLl9yZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIsXG4gICAgICByZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcjogdGhpcy5fcmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXIsXG4gICAgICB0cmVhdE1pc3NpbmdGaWVsZHNBc051bGw6IHRoaXMuX3RyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCxcbiAgICAgIHNob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzOiB0aGlzLl9zaG91bGRQcm9jZXNzQ2xpZW50Q29tcG9uZW50c1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBmaWVsZFBheWxvYWRzOiBmaWVsZFBheWxvYWRzLFxuICAgICAgaXRlbUlEOiBpdGVtSUQsXG4gICAgICBpdGVtSW5kZXg6IGl0ZW1JbmRleCxcbiAgICAgIHByZXZJRHM6IHByZXZJRHMsXG4gICAgICByZWxheVBheWxvYWQ6IHJlbGF5UGF5bG9hZCxcbiAgICAgIHN0b3JhZ2VLZXk6IHN0b3JhZ2VLZXlcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5fdXBkYXRlT3BlcmF0aW9uVHJhY2tlciA9IGZ1bmN0aW9uIF91cGRhdGVPcGVyYXRpb25UcmFja2VyKHVwZGF0ZWRPd25lcnMpIHtcbiAgICBpZiAodXBkYXRlZE93bmVycyAhPSBudWxsICYmIHVwZGF0ZWRPd25lcnMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5fb3BlcmF0aW9uVHJhY2tlci51cGRhdGUodGhpcy5fb3BlcmF0aW9uLnJlcXVlc3QsIG5ldyBTZXQodXBkYXRlZE93bmVycykpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX2NvbXBsZXRlT3BlcmF0aW9uVHJhY2tlciA9IGZ1bmN0aW9uIF9jb21wbGV0ZU9wZXJhdGlvblRyYWNrZXIoKSB7XG4gICAgdGhpcy5fb3BlcmF0aW9uVHJhY2tlci5jb21wbGV0ZSh0aGlzLl9vcGVyYXRpb24ucmVxdWVzdCk7XG4gIH07XG5cbiAgcmV0dXJuIEV4ZWN1dG9yO1xufSgpO1xuXG5mdW5jdGlvbiBwYXJ0aXRpb25HcmFwaFFMUmVzcG9uc2VzKHJlc3BvbnNlcykge1xuICB2YXIgbm9uSW5jcmVtZW50YWxSZXNwb25zZXMgPSBbXTtcbiAgdmFyIGluY3JlbWVudGFsUmVzcG9uc2VzID0gW107XG4gIHJlc3BvbnNlcy5mb3JFYWNoKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIGlmIChyZXNwb25zZS5wYXRoICE9IG51bGwgfHwgcmVzcG9uc2UubGFiZWwgIT0gbnVsbCkge1xuICAgICAgdmFyIGxhYmVsID0gcmVzcG9uc2UubGFiZWwsXG4gICAgICAgICAgcGF0aCA9IHJlc3BvbnNlLnBhdGg7XG5cbiAgICAgIGlmIChsYWJlbCA9PSBudWxsIHx8IHBhdGggPT0gbnVsbCkge1xuICAgICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdPcGVyYXRpb25FeGVjdXRvcjogaW52YWxpZCBpbmNyZW1lbnRhbCBwYXlsb2FkLCBleHBlY3RlZCAnICsgJ2BwYXRoYCBhbmQgYGxhYmVsYCB0byBlaXRoZXIgYm90aCBiZSBudWxsL3VuZGVmaW5lZCwgb3IgJyArICdgcGF0aGAgdG8gYmUgYW4gYEFycmF5PHN0cmluZyB8IG51bWJlcj5gIGFuZCBgbGFiZWxgIHRvIGJlIGEgJyArICdgc3RyaW5nYC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB9XG5cbiAgICAgIGluY3JlbWVudGFsUmVzcG9uc2VzLnB1c2goe1xuICAgICAgICBsYWJlbDogbGFiZWwsXG4gICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgIHJlc3BvbnNlOiByZXNwb25zZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vbkluY3JlbWVudGFsUmVzcG9uc2VzLnB1c2gocmVzcG9uc2UpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBbbm9uSW5jcmVtZW50YWxSZXNwb25zZXMsIGluY3JlbWVudGFsUmVzcG9uc2VzXTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplUmVzcG9uc2UocmVzcG9uc2UsIHNlbGVjdG9yLCB0eXBlTmFtZSwgb3B0aW9ucykge1xuICB2YXIgX3Jlc3BvbnNlJGV4dGVuc2lvbnMzO1xuXG4gIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YSxcbiAgICAgIGVycm9ycyA9IHJlc3BvbnNlLmVycm9ycztcbiAgdmFyIHNvdXJjZSA9IFJlbGF5UmVjb3JkU291cmNlLmNyZWF0ZSgpO1xuICB2YXIgcmVjb3JkID0gUmVsYXlNb2Rlcm5SZWNvcmQuY3JlYXRlKHNlbGVjdG9yLmRhdGFJRCwgdHlwZU5hbWUpO1xuICBzb3VyY2Uuc2V0KHNlbGVjdG9yLmRhdGFJRCwgcmVjb3JkKTtcbiAgdmFyIHJlbGF5UGF5bG9hZCA9IFJlbGF5UmVzcG9uc2VOb3JtYWxpemVyLm5vcm1hbGl6ZShzb3VyY2UsIHNlbGVjdG9yLCBkYXRhLCBvcHRpb25zKTtcbiAgcmV0dXJuICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKCgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCByZWxheVBheWxvYWQpLCB7fSwge1xuICAgIGVycm9yczogZXJyb3JzLFxuICAgIGlzRmluYWw6ICgoX3Jlc3BvbnNlJGV4dGVuc2lvbnMzID0gcmVzcG9uc2UuZXh0ZW5zaW9ucykgPT09IG51bGwgfHwgX3Jlc3BvbnNlJGV4dGVuc2lvbnMzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcmVzcG9uc2UkZXh0ZW5zaW9uczMuaXNfZmluYWwpID09PSB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzdGFibGVTdHJpbmdpZnkodmFsdWUpIHtcbiAgdmFyIF9KU09OJHN0cmluZ2lmeTtcblxuICByZXR1cm4gKF9KU09OJHN0cmluZ2lmeSA9IEpTT04uc3RyaW5naWZ5KHN0YWJsZUNvcHkodmFsdWUpKSkgIT09IG51bGwgJiYgX0pTT04kc3RyaW5naWZ5ICE9PSB2b2lkIDAgPyBfSlNPTiRzdHJpbmdpZnkgOiAnJzsgLy8gbnVsbC1jaGVjayBmb3IgZmxvd1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU9wdGltaXN0aWNSZXNwb25zZVBheWxvYWQocGF5bG9hZCkge1xuICB2YXIgaW5jcmVtZW50YWxQbGFjZWhvbGRlcnMgPSBwYXlsb2FkLmluY3JlbWVudGFsUGxhY2Vob2xkZXJzO1xuXG4gIGlmIChpbmNyZW1lbnRhbFBsYWNlaG9sZGVycyAhPSBudWxsICYmIGluY3JlbWVudGFsUGxhY2Vob2xkZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ09wZXJhdGlvbkV4ZWN1dG9yOiBvcHRpbWlzdGljIHJlc3BvbnNlcyBjYW5ub3QgYmUgcmV0dXJuZWQgJyArICdmb3Igb3BlcmF0aW9ucyB0aGF0IHVzZSBpbmNyZW1lbnRhbCBkYXRhIGRlbGl2ZXJ5IChAZGVmZXIsICcgKyAnQHN0cmVhbSwgYW5kIEBzdHJlYW1fY29ubmVjdGlvbikuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBleGVjdXRlOiBleGVjdXRlXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG4vKipcbiAqIERldGVybWluZXMgdGhlIHZhcmlhYmxlcyB0aGF0IGFyZSBpbiBzY29wZSBmb3IgYSBmcmFnbWVudCBnaXZlbiB0aGUgdmFyaWFibGVzXG4gKiBpbiBzY29wZSBhdCB0aGUgcm9vdCBxdWVyeSBhcyB3ZWxsIGFzIGFueSBhcmd1bWVudHMgYXBwbGllZCBhdCB0aGUgZnJhZ21lbnRcbiAqIHNwcmVhZCB2aWEgYEBhcmd1bWVudHNgLlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIGlzIGFuYWxhZ291cyB0byBkZXRlcm1pbmluZyBmdW5jdGlvbiBhcmd1bWVudHMgZ2l2ZW4gYSBmdW5jdGlvbiBjYWxsLlxuICovXG5mdW5jdGlvbiBnZXRGcmFnbWVudFZhcmlhYmxlcyhmcmFnbWVudCwgcm9vdFZhcmlhYmxlcywgYXJndW1lbnRWYXJpYWJsZXMpIHtcbiAgdmFyIHZhcmlhYmxlcztcbiAgZnJhZ21lbnQuYXJndW1lbnREZWZpbml0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XG4gICAgaWYgKGFyZ3VtZW50VmFyaWFibGVzLmhhc093blByb3BlcnR5KGRlZmluaXRpb24ubmFtZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vICRGbG93Rml4TWVbY2Fubm90LXNwcmVhZC1pbnRlcmZhY2VdXG5cblxuICAgIHZhcmlhYmxlcyA9IHZhcmlhYmxlcyB8fCAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgYXJndW1lbnRWYXJpYWJsZXMpO1xuXG4gICAgc3dpdGNoIChkZWZpbml0aW9uLmtpbmQpIHtcbiAgICAgIGNhc2UgJ0xvY2FsQXJndW1lbnQnOlxuICAgICAgICB2YXJpYWJsZXNbZGVmaW5pdGlvbi5uYW1lXSA9IGRlZmluaXRpb24uZGVmYXVsdFZhbHVlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnUm9vdEFyZ3VtZW50JzpcbiAgICAgICAgaWYgKCFyb290VmFyaWFibGVzLmhhc093blByb3BlcnR5KGRlZmluaXRpb24ubmFtZSkpIHtcbiAgICAgICAgICAvKlxuICAgICAgICAgICAqIEdsb2JhbCB2YXJpYWJsZXMgcGFzc2VkIGFzIHZhbHVlcyBvZiBAYXJndW1lbnRzIGFyZSBub3QgcmVxdWlyZWQgdG9cbiAgICAgICAgICAgKiBiZSBkZWNsYXJlZCB1bmxlc3MgdGhleSBhcmUgdXNlZCBieSB0aGUgY2FsbGVlIGZyYWdtZW50IG9yIGFcbiAgICAgICAgICAgKiBkZXNjZW5kYW50LiBJbiB0aGlzIGNhc2UsIHRoZSByb290IHZhcmlhYmxlIG1heSBub3QgYmUgZGVmaW5lZCB3aGVuXG4gICAgICAgICAgICogcmVzb2x2aW5nIHRoZSBjYWxsZWUncyB2YXJpYWJsZXMuIFRoZSB2YWx1ZSBpcyBleHBsaWNpdGx5IHNldCB0b1xuICAgICAgICAgICAqIHVuZGVmaW5lZCB0byBjb25mb3JtIHRvIHRoZSBjaGVjayBpblxuICAgICAgICAgICAqIFJlbGF5U3RvcmVVdGlscy5nZXRTdGFibGVWYXJpYWJsZVZhbHVlKCkgdGhhdCB2YXJpYWJsZSBrZXlzIGFyZSBhbGxcbiAgICAgICAgICAgKiBwcmVzZW50LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgICAgICB2YXJpYWJsZXNbZGVmaW5pdGlvbi5uYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG4gICAgICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuXG5cbiAgICAgICAgdmFyaWFibGVzW2RlZmluaXRpb24ubmFtZV0gPSByb290VmFyaWFibGVzW2RlZmluaXRpb24ubmFtZV07XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBkZWZpbml0aW9uO1xuICAgICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheUNvbmNyZXRlVmFyaWFibGVzOiBVbmV4cGVjdGVkIG5vZGUga2luZCBgJXNgIGluIGZyYWdtZW50IGAlc2AuJywgZGVmaW5pdGlvbi5raW5kLCBmcmFnbWVudC5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHZhcmlhYmxlcyB8fCBhcmd1bWVudFZhcmlhYmxlcztcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyB0aGUgdmFyaWFibGVzIHRoYXQgYXJlIGluIHNjb3BlIGZvciBhIGdpdmVuIG9wZXJhdGlvbiBnaXZlbiB2YWx1ZXNcbiAqIGZvciBzb21lL2FsbCBvZiBpdHMgYXJndW1lbnRzLiBFeHRyYW5lb3VzIGlucHV0IHZhcmlhYmxlcyBhcmUgZmlsdGVyZWQgZnJvbVxuICogdGhlIG91dHB1dCwgYW5kIG1pc3NpbmcgdmFyaWFibGVzIGFyZSBzZXQgdG8gZGVmYXVsdCB2YWx1ZXMgKGlmIGdpdmVuIGluIHRoZVxuICogb3BlcmF0aW9uJ3MgZGVmaW5pdGlvbikuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRPcGVyYXRpb25WYXJpYWJsZXMob3BlcmF0aW9uLCB2YXJpYWJsZXMpIHtcbiAgdmFyIG9wZXJhdGlvblZhcmlhYmxlcyA9IHt9O1xuICBvcGVyYXRpb24uYXJndW1lbnREZWZpbml0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChkZWYpIHtcbiAgICB2YXIgdmFsdWUgPSBkZWYuZGVmYXVsdFZhbHVlOyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cblxuICAgIGlmICh2YXJpYWJsZXNbZGVmLm5hbWVdICE9IG51bGwpIHtcbiAgICAgIHZhbHVlID0gdmFyaWFibGVzW2RlZi5uYW1lXTtcbiAgICB9XG5cbiAgICBvcGVyYXRpb25WYXJpYWJsZXNbZGVmLm5hbWVdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gb3BlcmF0aW9uVmFyaWFibGVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0RnJhZ21lbnRWYXJpYWJsZXM6IGdldEZyYWdtZW50VmFyaWFibGVzLFxuICBnZXRPcGVyYXRpb25WYXJpYWJsZXM6IGdldE9wZXJhdGlvblZhcmlhYmxlc1xufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgT3BlcmF0aW9uRXhlY3V0b3IgPSByZXF1aXJlKCcuL09wZXJhdGlvbkV4ZWN1dG9yJyk7XG5cbnZhciBSZWxheURlZmF1bHRIYW5kbGVyUHJvdmlkZXIgPSByZXF1aXJlKCcuLi9oYW5kbGVycy9SZWxheURlZmF1bHRIYW5kbGVyUHJvdmlkZXInKTtcblxudmFyIFJlbGF5RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUZlYXR1cmVGbGFncycpO1xuXG52YXIgUmVsYXlPYnNlcnZhYmxlID0gcmVxdWlyZSgnLi4vbmV0d29yay9SZWxheU9ic2VydmFibGUnKTtcblxudmFyIFJlbGF5T3BlcmF0aW9uVHJhY2tlciA9IHJlcXVpcmUoJy4uL3N0b3JlL1JlbGF5T3BlcmF0aW9uVHJhY2tlcicpO1xuXG52YXIgUmVsYXlQdWJsaXNoUXVldWUgPSByZXF1aXJlKCcuL1JlbGF5UHVibGlzaFF1ZXVlJyk7XG5cbnZhciBSZWxheVJlY29yZFNvdXJjZSA9IHJlcXVpcmUoJy4vUmVsYXlSZWNvcmRTb3VyY2UnKTtcblxudmFyIGRlZmF1bHRHZXREYXRhSUQgPSByZXF1aXJlKCcuL2RlZmF1bHRHZXREYXRhSUQnKTtcblxudmFyIGRlZmF1bHRSZXF1aXJlZEZpZWxkTG9nZ2VyID0gcmVxdWlyZSgnLi9kZWZhdWx0UmVxdWlyZWRGaWVsZExvZ2dlcicpO1xuXG52YXIgZ2VuZXJhdGVJRCA9IHJlcXVpcmUoJy4uL3V0aWwvZ2VuZXJhdGVJRCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBSZWxheU1vZGVybkVudmlyb25tZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVsYXlNb2Rlcm5FbnZpcm9ubWVudChjb25maWcpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIF9jb25maWckbG9nLCBfY29uZmlnJHJlcXVpcmVkRmllbGQsIF9jb25maWckVU5TVEFCTEVfZGVmYSwgX2NvbmZpZyRnZXREYXRhSUQsIF9jb25maWckaGFuZGxlclByb3ZpZCwgX2NvbmZpZyRzY2hlZHVsZXIsIF9jb25maWckaXNTZXJ2ZXIsIF9jb25maWckb3BlcmF0aW9uVHJhYztcblxuICAgIHRoaXMuY29uZmlnTmFtZSA9IGNvbmZpZy5jb25maWdOYW1lO1xuICAgIHRoaXMuX3RyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCA9IGNvbmZpZy50cmVhdE1pc3NpbmdGaWVsZHNBc051bGwgPT09IHRydWU7XG4gICAgdmFyIG9wZXJhdGlvbkxvYWRlciA9IGNvbmZpZy5vcGVyYXRpb25Mb2FkZXI7XG4gICAgdmFyIHJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplciA9IGNvbmZpZy5yZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXI7XG4gICAgdmFyIHJlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyID0gY29uZmlnLnJlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKG9wZXJhdGlvbkxvYWRlciAhPSBudWxsKSB7XG4gICAgICAgICEodHlwZW9mIG9wZXJhdGlvbkxvYWRlciA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9wZXJhdGlvbkxvYWRlci5nZXQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9wZXJhdGlvbkxvYWRlci5sb2FkID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuRW52aXJvbm1lbnQ6IEV4cGVjdGVkIGBvcGVyYXRpb25Mb2FkZXJgIHRvIGJlIGFuIG9iamVjdCAnICsgJ3dpdGggZ2V0KCkgYW5kIGxvYWQoKSBmdW5jdGlvbnMsIGdvdCBgJXNgLicsIG9wZXJhdGlvbkxvYWRlcikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyICE9IG51bGwpIHtcbiAgICAgICAgISh0eXBlb2YgcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuRW52aXJvbm1lbnQ6IEV4cGVjdGVkIGByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXJgICcgKyAnIHRvIGJlIGEgZnVuY3Rpb24sIGdvdCBgJXNgLicsIHJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX19sb2cgPSAoX2NvbmZpZyRsb2cgPSBjb25maWcubG9nKSAhPT0gbnVsbCAmJiBfY29uZmlnJGxvZyAhPT0gdm9pZCAwID8gX2NvbmZpZyRsb2cgOiBlbXB0eUZ1bmN0aW9uO1xuICAgIHRoaXMucmVxdWlyZWRGaWVsZExvZ2dlciA9IChfY29uZmlnJHJlcXVpcmVkRmllbGQgPSBjb25maWcucmVxdWlyZWRGaWVsZExvZ2dlcikgIT09IG51bGwgJiYgX2NvbmZpZyRyZXF1aXJlZEZpZWxkICE9PSB2b2lkIDAgPyBfY29uZmlnJHJlcXVpcmVkRmllbGQgOiBkZWZhdWx0UmVxdWlyZWRGaWVsZExvZ2dlcjtcbiAgICB0aGlzLl9kZWZhdWx0UmVuZGVyUG9saWN5ID0gKChfY29uZmlnJFVOU1RBQkxFX2RlZmEgPSBjb25maWcuVU5TVEFCTEVfZGVmYXVsdFJlbmRlclBvbGljeSkgIT09IG51bGwgJiYgX2NvbmZpZyRVTlNUQUJMRV9kZWZhICE9PSB2b2lkIDAgPyBfY29uZmlnJFVOU1RBQkxFX2RlZmEgOiBSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUEFSVElBTF9SRU5ERVJJTkdfREVGQVVMVCA9PT0gdHJ1ZSkgPyAncGFydGlhbCcgOiAnZnVsbCc7XG4gICAgdGhpcy5fb3BlcmF0aW9uTG9hZGVyID0gb3BlcmF0aW9uTG9hZGVyO1xuICAgIHRoaXMuX29wZXJhdGlvbkV4ZWN1dGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fbmV0d29yayA9IHRoaXMuX193cmFwTmV0d29ya1dpdGhMb2dPYnNlcnZlcihjb25maWcubmV0d29yayk7XG4gICAgdGhpcy5fZ2V0RGF0YUlEID0gKF9jb25maWckZ2V0RGF0YUlEID0gY29uZmlnLmdldERhdGFJRCkgIT09IG51bGwgJiYgX2NvbmZpZyRnZXREYXRhSUQgIT09IHZvaWQgMCA/IF9jb25maWckZ2V0RGF0YUlEIDogZGVmYXVsdEdldERhdGFJRDtcbiAgICB0aGlzLl9wdWJsaXNoUXVldWUgPSBuZXcgUmVsYXlQdWJsaXNoUXVldWUoY29uZmlnLnN0b3JlLCAoX2NvbmZpZyRoYW5kbGVyUHJvdmlkID0gY29uZmlnLmhhbmRsZXJQcm92aWRlcikgIT09IG51bGwgJiYgX2NvbmZpZyRoYW5kbGVyUHJvdmlkICE9PSB2b2lkIDAgPyBfY29uZmlnJGhhbmRsZXJQcm92aWQgOiBSZWxheURlZmF1bHRIYW5kbGVyUHJvdmlkZXIsIHRoaXMuX2dldERhdGFJRCk7XG4gICAgdGhpcy5fc2NoZWR1bGVyID0gKF9jb25maWckc2NoZWR1bGVyID0gY29uZmlnLnNjaGVkdWxlcikgIT09IG51bGwgJiYgX2NvbmZpZyRzY2hlZHVsZXIgIT09IHZvaWQgMCA/IF9jb25maWckc2NoZWR1bGVyIDogbnVsbDtcbiAgICB0aGlzLl9zdG9yZSA9IGNvbmZpZy5zdG9yZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICB0aGlzLl9pc1NlcnZlciA9IChfY29uZmlnJGlzU2VydmVyID0gY29uZmlnLmlzU2VydmVyKSAhPT0gbnVsbCAmJiBfY29uZmlnJGlzU2VydmVyICE9PSB2b2lkIDAgPyBfY29uZmlnJGlzU2VydmVyIDogZmFsc2U7XG5cbiAgICB0aGlzLl9fc2V0TmV0ID0gZnVuY3Rpb24gKG5ld05ldCkge1xuICAgICAgcmV0dXJuIF90aGlzLl9uZXR3b3JrID0gX3RoaXMuX193cmFwTmV0d29ya1dpdGhMb2dPYnNlcnZlcihuZXdOZXQpO1xuICAgIH07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICB2YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL1N0b3JlSW5zcGVjdG9yJyksXG4gICAgICAgICAgaW5zcGVjdCA9IF9yZXF1aXJlLmluc3BlY3Q7XG5cbiAgICAgIHRoaXMuREVCVUdfaW5zcGVjdCA9IGZ1bmN0aW9uIChkYXRhSUQpIHtcbiAgICAgICAgcmV0dXJuIGluc3BlY3QoX3RoaXMsIGRhdGFJRCk7XG4gICAgICB9O1xuICAgIH0gLy8gUmVnaXN0ZXIgdGhpcyBSZWxheSBFbnZpcm9ubWVudCB3aXRoIFJlbGF5IERldlRvb2xzIGlmIGl0IGV4aXN0cy5cbiAgICAvLyBOb3RlOiB0aGlzIG11c3QgYWx3YXlzIGJlIHRoZSBsYXN0IHN0ZXAgaW4gdGhlIGNvbnN0cnVjdG9yLlxuXG5cbiAgICB2YXIgX2dsb2JhbCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGV2VG9vbHNIb29rID0gX2dsb2JhbCAmJiBfZ2xvYmFsLl9fUkVMQVlfREVWVE9PTFNfSE9PS19fO1xuXG4gICAgaWYgKGRldlRvb2xzSG9vaykge1xuICAgICAgZGV2VG9vbHNIb29rLnJlZ2lzdGVyRW52aXJvbm1lbnQodGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5fbWlzc2luZ0ZpZWxkSGFuZGxlcnMgPSBjb25maWcubWlzc2luZ0ZpZWxkSGFuZGxlcnM7XG4gICAgdGhpcy5fb3BlcmF0aW9uVHJhY2tlciA9IChfY29uZmlnJG9wZXJhdGlvblRyYWMgPSBjb25maWcub3BlcmF0aW9uVHJhY2tlcikgIT09IG51bGwgJiYgX2NvbmZpZyRvcGVyYXRpb25UcmFjICE9PSB2b2lkIDAgPyBfY29uZmlnJG9wZXJhdGlvblRyYWMgOiBuZXcgUmVsYXlPcGVyYXRpb25UcmFja2VyKCk7XG4gICAgdGhpcy5fcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyID0gcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyO1xuICAgIHRoaXMuX3JlYWN0RmxpZ2h0U2VydmVyRXJyb3JIYW5kbGVyID0gcmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXI7XG4gICAgdGhpcy5fc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMgPSBjb25maWcuc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVsYXlNb2Rlcm5FbnZpcm9ubWVudC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFN0b3JlID0gZnVuY3Rpb24gZ2V0U3RvcmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0b3JlO1xuICB9O1xuXG4gIF9wcm90by5nZXROZXR3b3JrID0gZnVuY3Rpb24gZ2V0TmV0d29yaygpIHtcbiAgICByZXR1cm4gdGhpcy5fbmV0d29yaztcbiAgfTtcblxuICBfcHJvdG8uZ2V0T3BlcmF0aW9uVHJhY2tlciA9IGZ1bmN0aW9uIGdldE9wZXJhdGlvblRyYWNrZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wZXJhdGlvblRyYWNrZXI7XG4gIH07XG5cbiAgX3Byb3RvLmlzUmVxdWVzdEFjdGl2ZSA9IGZ1bmN0aW9uIGlzUmVxdWVzdEFjdGl2ZShyZXF1ZXN0SWRlbnRpZmllcikge1xuICAgIHZhciBhY3RpdmVTdGF0ZSA9IHRoaXMuX29wZXJhdGlvbkV4ZWN1dGlvbnMuZ2V0KHJlcXVlc3RJZGVudGlmaWVyKTtcblxuICAgIHJldHVybiBhY3RpdmVTdGF0ZSA9PT0gJ2FjdGl2ZSc7XG4gIH07XG5cbiAgX3Byb3RvLlVOU1RBQkxFX2dldERlZmF1bHRSZW5kZXJQb2xpY3kgPSBmdW5jdGlvbiBVTlNUQUJMRV9nZXREZWZhdWx0UmVuZGVyUG9saWN5KCkge1xuICAgIHJldHVybiB0aGlzLl9kZWZhdWx0UmVuZGVyUG9saWN5O1xuICB9O1xuXG4gIF9wcm90by5hcHBseVVwZGF0ZSA9IGZ1bmN0aW9uIGFwcGx5VXBkYXRlKG9wdGltaXN0aWNVcGRhdGUpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBkaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIF90aGlzMi5fc2NoZWR1bGVVcGRhdGVzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLl9wdWJsaXNoUXVldWUucmV2ZXJ0VXBkYXRlKG9wdGltaXN0aWNVcGRhdGUpO1xuXG4gICAgICAgIF90aGlzMi5fcHVibGlzaFF1ZXVlLnJ1bigpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuX3NjaGVkdWxlVXBkYXRlcyhmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIuX3B1Ymxpc2hRdWV1ZS5hcHBseVVwZGF0ZShvcHRpbWlzdGljVXBkYXRlKTtcblxuICAgICAgX3RoaXMyLl9wdWJsaXNoUXVldWUucnVuKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGlzcG9zZTogZGlzcG9zZVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnJldmVydFVwZGF0ZSA9IGZ1bmN0aW9uIHJldmVydFVwZGF0ZSh1cGRhdGUpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHRoaXMuX3NjaGVkdWxlVXBkYXRlcyhmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMuX3B1Ymxpc2hRdWV1ZS5yZXZlcnRVcGRhdGUodXBkYXRlKTtcblxuICAgICAgX3RoaXMzLl9wdWJsaXNoUXVldWUucnVuKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlcGxhY2VVcGRhdGUgPSBmdW5jdGlvbiByZXBsYWNlVXBkYXRlKHVwZGF0ZSwgbmV3VXBkYXRlKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB0aGlzLl9zY2hlZHVsZVVwZGF0ZXMoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXM0Ll9wdWJsaXNoUXVldWUucmV2ZXJ0VXBkYXRlKHVwZGF0ZSk7XG5cbiAgICAgIF90aGlzNC5fcHVibGlzaFF1ZXVlLmFwcGx5VXBkYXRlKG5ld1VwZGF0ZSk7XG5cbiAgICAgIF90aGlzNC5fcHVibGlzaFF1ZXVlLnJ1bigpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5hcHBseU11dGF0aW9uID0gZnVuY3Rpb24gYXBwbHlNdXRhdGlvbihvcHRpbWlzdGljQ29uZmlnKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX2V4ZWN1dGUoe1xuICAgICAgY3JlYXRlU291cmNlOiBmdW5jdGlvbiBjcmVhdGVTb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiBSZWxheU9ic2VydmFibGUuY3JlYXRlKGZ1bmN0aW9uIChfc2luaykge30pO1xuICAgICAgfSxcbiAgICAgIGlzQ2xpZW50UGF5bG9hZDogZmFsc2UsXG4gICAgICBvcGVyYXRpb246IG9wdGltaXN0aWNDb25maWcub3BlcmF0aW9uLFxuICAgICAgb3B0aW1pc3RpY0NvbmZpZzogb3B0aW1pc3RpY0NvbmZpZyxcbiAgICAgIHVwZGF0ZXI6IG51bGxcbiAgICB9KS5zdWJzY3JpYmUoe30pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5jaGVjayA9IGZ1bmN0aW9uIGNoZWNrKG9wZXJhdGlvbikge1xuICAgIGlmICh0aGlzLl9taXNzaW5nRmllbGRIYW5kbGVycyA9PSBudWxsIHx8IHRoaXMuX21pc3NpbmdGaWVsZEhhbmRsZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0b3JlLmNoZWNrKG9wZXJhdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2NoZWNrU2VsZWN0b3JBbmRIYW5kbGVNaXNzaW5nRmllbGRzKG9wZXJhdGlvbiwgdGhpcy5fbWlzc2luZ0ZpZWxkSGFuZGxlcnMpO1xuICB9O1xuXG4gIF9wcm90by5jb21taXRQYXlsb2FkID0gZnVuY3Rpb24gY29tbWl0UGF5bG9hZChvcGVyYXRpb24sIHBheWxvYWQpIHtcbiAgICB0aGlzLl9leGVjdXRlKHtcbiAgICAgIGNyZWF0ZVNvdXJjZTogZnVuY3Rpb24gY3JlYXRlU291cmNlKCkge1xuICAgICAgICByZXR1cm4gUmVsYXlPYnNlcnZhYmxlLmZyb20oe1xuICAgICAgICAgIGRhdGE6IHBheWxvYWRcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgaXNDbGllbnRQYXlsb2FkOiB0cnVlLFxuICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgICBvcHRpbWlzdGljQ29uZmlnOiBudWxsLFxuICAgICAgdXBkYXRlcjogbnVsbFxuICAgIH0pLnN1YnNjcmliZSh7fSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbW1pdFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbW1pdFVwZGF0ZSh1cGRhdGVyKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICB0aGlzLl9zY2hlZHVsZVVwZGF0ZXMoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXM1Ll9wdWJsaXNoUXVldWUuY29tbWl0VXBkYXRlKHVwZGF0ZXIpO1xuXG4gICAgICBfdGhpczUuX3B1Ymxpc2hRdWV1ZS5ydW4oKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubG9va3VwID0gZnVuY3Rpb24gbG9va3VwKHJlYWRTZWxlY3Rvcikge1xuICAgIHJldHVybiB0aGlzLl9zdG9yZS5sb29rdXAocmVhZFNlbGVjdG9yKTtcbiAgfTtcblxuICBfcHJvdG8uc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKHNuYXBzaG90LCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLl9zdG9yZS5zdWJzY3JpYmUoc25hcHNob3QsIGNhbGxiYWNrKTtcbiAgfTtcblxuICBfcHJvdG8ucmV0YWluID0gZnVuY3Rpb24gcmV0YWluKG9wZXJhdGlvbikge1xuICAgIHJldHVybiB0aGlzLl9zdG9yZS5yZXRhaW4ob3BlcmF0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8uaXNTZXJ2ZXIgPSBmdW5jdGlvbiBpc1NlcnZlcigpIHtcbiAgICByZXR1cm4gdGhpcy5faXNTZXJ2ZXI7XG4gIH07XG5cbiAgX3Byb3RvLl9jaGVja1NlbGVjdG9yQW5kSGFuZGxlTWlzc2luZ0ZpZWxkcyA9IGZ1bmN0aW9uIF9jaGVja1NlbGVjdG9yQW5kSGFuZGxlTWlzc2luZ0ZpZWxkcyhvcGVyYXRpb24sIGhhbmRsZXJzKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0ID0gUmVsYXlSZWNvcmRTb3VyY2UuY3JlYXRlKCk7XG5cbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5fc3RvcmUuY2hlY2sob3BlcmF0aW9uLCB7XG4gICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgIGhhbmRsZXJzOiBoYW5kbGVyc1xuICAgIH0pO1xuXG4gICAgaWYgKHRhcmdldC5zaXplKCkgPiAwKSB7XG4gICAgICB0aGlzLl9zY2hlZHVsZVVwZGF0ZXMoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczYuX3B1Ymxpc2hRdWV1ZS5jb21taXRTb3VyY2UodGFyZ2V0KTtcblxuICAgICAgICBfdGhpczYuX3B1Ymxpc2hRdWV1ZS5ydW4oKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLl9zY2hlZHVsZVVwZGF0ZXMgPSBmdW5jdGlvbiBfc2NoZWR1bGVVcGRhdGVzKHRhc2spIHtcbiAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5fc2NoZWR1bGVyO1xuXG4gICAgaWYgKHNjaGVkdWxlciAhPSBudWxsKSB7XG4gICAgICBzY2hlZHVsZXIuc2NoZWR1bGUodGFzayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhc2soKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSBvZiBHcmFwaFFMUmVzcG9uc2UgcmVzdWx0aW5nIGZyb20gZXhlY3V0aW5nIHRoZVxuICAgKiBwcm92aWRlZCBRdWVyeSBvciBTdWJzY3JpcHRpb24gb3BlcmF0aW9uLCBlYWNoIHJlc3VsdCBvZiB3aGljaCBpcyB0aGVuXG4gICAqIG5vcm1hbGl6ZWQgYW5kIGNvbW1pdHRlZCB0byB0aGUgcHVibGlzaCBxdWV1ZS5cbiAgICpcbiAgICogTm90ZTogT2JzZXJ2YWJsZXMgYXJlIGxhenksIHNvIGNhbGxpbmcgdGhpcyBtZXRob2Qgd2lsbCBkbyBub3RoaW5nIHVudGlsXG4gICAqIHRoZSByZXN1bHQgaXMgc3Vic2NyaWJlZCB0bzogZW52aXJvbm1lbnQuZXhlY3V0ZSh7Li4ufSkuc3Vic2NyaWJlKHsuLi59KS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXhlY3V0ZSA9IGZ1bmN0aW9uIGV4ZWN1dGUoX3JlZikge1xuICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgdmFyIG9wZXJhdGlvbiA9IF9yZWYub3BlcmF0aW9uLFxuICAgICAgICB1cGRhdGVyID0gX3JlZi51cGRhdGVyO1xuICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgIGNyZWF0ZVNvdXJjZTogZnVuY3Rpb24gY3JlYXRlU291cmNlKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM3Ll9uZXR3b3JrLmV4ZWN1dGUob3BlcmF0aW9uLnJlcXVlc3Qubm9kZS5wYXJhbXMsIG9wZXJhdGlvbi5yZXF1ZXN0LnZhcmlhYmxlcywgb3BlcmF0aW9uLnJlcXVlc3QuY2FjaGVDb25maWcgfHwge30sIG51bGwpO1xuICAgICAgfSxcbiAgICAgIGlzQ2xpZW50UGF5bG9hZDogZmFsc2UsXG4gICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgIG9wdGltaXN0aWNDb25maWc6IG51bGwsXG4gICAgICB1cGRhdGVyOiB1cGRhdGVyXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSBvZiBHcmFwaFFMUmVzcG9uc2UgcmVzdWx0aW5nIGZyb20gZXhlY3V0aW5nIHRoZVxuICAgKiBwcm92aWRlZCBNdXRhdGlvbiBvcGVyYXRpb24sIHRoZSByZXN1bHQgb2Ygd2hpY2ggaXMgdGhlbiBub3JtYWxpemVkIGFuZFxuICAgKiBjb21taXR0ZWQgdG8gdGhlIHB1Ymxpc2ggcXVldWUgYWxvbmcgd2l0aCBhbiBvcHRpb25hbCBvcHRpbWlzdGljIHJlc3BvbnNlXG4gICAqIG9yIHVwZGF0ZXIuXG4gICAqXG4gICAqIE5vdGU6IE9ic2VydmFibGVzIGFyZSBsYXp5LCBzbyBjYWxsaW5nIHRoaXMgbWV0aG9kIHdpbGwgZG8gbm90aGluZyB1bnRpbFxuICAgKiB0aGUgcmVzdWx0IGlzIHN1YnNjcmliZWQgdG86XG4gICAqIGVudmlyb25tZW50LmV4ZWN1dGVNdXRhdGlvbih7Li4ufSkuc3Vic2NyaWJlKHsuLi59KS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXhlY3V0ZU11dGF0aW9uID0gZnVuY3Rpb24gZXhlY3V0ZU11dGF0aW9uKF9yZWYyKSB7XG4gICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICB2YXIgb3BlcmF0aW9uID0gX3JlZjIub3BlcmF0aW9uLFxuICAgICAgICBvcHRpbWlzdGljUmVzcG9uc2UgPSBfcmVmMi5vcHRpbWlzdGljUmVzcG9uc2UsXG4gICAgICAgIG9wdGltaXN0aWNVcGRhdGVyID0gX3JlZjIub3B0aW1pc3RpY1VwZGF0ZXIsXG4gICAgICAgIHVwZGF0ZXIgPSBfcmVmMi51cGRhdGVyLFxuICAgICAgICB1cGxvYWRhYmxlcyA9IF9yZWYyLnVwbG9hZGFibGVzO1xuICAgIHZhciBvcHRpbWlzdGljQ29uZmlnO1xuXG4gICAgaWYgKG9wdGltaXN0aWNSZXNwb25zZSB8fCBvcHRpbWlzdGljVXBkYXRlcikge1xuICAgICAgb3B0aW1pc3RpY0NvbmZpZyA9IHtcbiAgICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgICAgIHJlc3BvbnNlOiBvcHRpbWlzdGljUmVzcG9uc2UsXG4gICAgICAgIHVwZGF0ZXI6IG9wdGltaXN0aWNVcGRhdGVyXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9leGVjdXRlKHtcbiAgICAgIGNyZWF0ZVNvdXJjZTogZnVuY3Rpb24gY3JlYXRlU291cmNlKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM4Ll9uZXR3b3JrLmV4ZWN1dGUob3BlcmF0aW9uLnJlcXVlc3Qubm9kZS5wYXJhbXMsIG9wZXJhdGlvbi5yZXF1ZXN0LnZhcmlhYmxlcywgKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIG9wZXJhdGlvbi5yZXF1ZXN0LmNhY2hlQ29uZmlnKSwge30sIHtcbiAgICAgICAgICBmb3JjZTogdHJ1ZVxuICAgICAgICB9KSwgdXBsb2FkYWJsZXMpO1xuICAgICAgfSxcbiAgICAgIGlzQ2xpZW50UGF5bG9hZDogZmFsc2UsXG4gICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgIG9wdGltaXN0aWNDb25maWc6IG9wdGltaXN0aWNDb25maWcsXG4gICAgICB1cGRhdGVyOiB1cGRhdGVyXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSBvZiBHcmFwaFFMUmVzcG9uc2UgcmVzdWx0aW5nIGZyb20gZXhlY3V0aW5nIHRoZVxuICAgKiBwcm92aWRlZCBRdWVyeSBvciBTdWJzY3JpcHRpb24gb3BlcmF0aW9uIHJlc3BvbnNlcywgdGhlIHJlc3VsdCBvZiB3aGljaCBpc1xuICAgKiB0aGVuIG5vcm1hbGl6ZWQgYW5kIGNvbWl0dGVkIHRvIHRoZSBwdWJsaXNoIHF1ZXVlLlxuICAgKlxuICAgKiBOb3RlOiBPYnNlcnZhYmxlcyBhcmUgbGF6eSwgc28gY2FsbGluZyB0aGlzIG1ldGhvZCB3aWxsIGRvIG5vdGhpbmcgdW50aWxcbiAgICogdGhlIHJlc3VsdCBpcyBzdWJzY3JpYmVkIHRvOlxuICAgKiBlbnZpcm9ubWVudC5leGVjdXRlV2l0aFNvdXJjZSh7Li4ufSkuc3Vic2NyaWJlKHsuLi59KS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXhlY3V0ZVdpdGhTb3VyY2UgPSBmdW5jdGlvbiBleGVjdXRlV2l0aFNvdXJjZShfcmVmMykge1xuICAgIHZhciBvcGVyYXRpb24gPSBfcmVmMy5vcGVyYXRpb24sXG4gICAgICAgIHNvdXJjZSA9IF9yZWYzLnNvdXJjZTtcbiAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZSh7XG4gICAgICBjcmVhdGVTb3VyY2U6IGZ1bmN0aW9uIGNyZWF0ZVNvdXJjZSgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH0sXG4gICAgICBpc0NsaWVudFBheWxvYWQ6IGZhbHNlLFxuICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgICBvcHRpbWlzdGljQ29uZmlnOiBudWxsLFxuICAgICAgdXBkYXRlcjogbnVsbFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgdmFyIF90aGlzJGNvbmZpZ05hbWU7XG5cbiAgICByZXR1cm4gXCJSZWxheU1vZGVybkVudmlyb25tZW50KFwiLmNvbmNhdCgoX3RoaXMkY29uZmlnTmFtZSA9IHRoaXMuY29uZmlnTmFtZSkgIT09IG51bGwgJiYgX3RoaXMkY29uZmlnTmFtZSAhPT0gdm9pZCAwID8gX3RoaXMkY29uZmlnTmFtZSA6ICcnLCBcIilcIik7XG4gIH07XG5cbiAgX3Byb3RvLl9leGVjdXRlID0gZnVuY3Rpb24gX2V4ZWN1dGUoX3JlZjQpIHtcbiAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgIHZhciBjcmVhdGVTb3VyY2UgPSBfcmVmNC5jcmVhdGVTb3VyY2UsXG4gICAgICAgIGlzQ2xpZW50UGF5bG9hZCA9IF9yZWY0LmlzQ2xpZW50UGF5bG9hZCxcbiAgICAgICAgb3BlcmF0aW9uID0gX3JlZjQub3BlcmF0aW9uLFxuICAgICAgICBvcHRpbWlzdGljQ29uZmlnID0gX3JlZjQub3B0aW1pc3RpY0NvbmZpZyxcbiAgICAgICAgdXBkYXRlciA9IF9yZWY0LnVwZGF0ZXI7XG4gICAgcmV0dXJuIFJlbGF5T2JzZXJ2YWJsZS5jcmVhdGUoZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgIHZhciBleGVjdXRvciA9IE9wZXJhdGlvbkV4ZWN1dG9yLmV4ZWN1dGUoe1xuICAgICAgICBnZXREYXRhSUQ6IF90aGlzOS5fZ2V0RGF0YUlELFxuICAgICAgICBpc0NsaWVudFBheWxvYWQ6IGlzQ2xpZW50UGF5bG9hZCxcbiAgICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgICAgIG9wZXJhdGlvbkV4ZWN1dGlvbnM6IF90aGlzOS5fb3BlcmF0aW9uRXhlY3V0aW9ucyxcbiAgICAgICAgb3BlcmF0aW9uTG9hZGVyOiBfdGhpczkuX29wZXJhdGlvbkxvYWRlcixcbiAgICAgICAgb3BlcmF0aW9uVHJhY2tlcjogX3RoaXM5Ll9vcGVyYXRpb25UcmFja2VyLFxuICAgICAgICBvcHRpbWlzdGljQ29uZmlnOiBvcHRpbWlzdGljQ29uZmlnLFxuICAgICAgICBwdWJsaXNoUXVldWU6IF90aGlzOS5fcHVibGlzaFF1ZXVlLFxuICAgICAgICByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXI6IF90aGlzOS5fcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyLFxuICAgICAgICByZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcjogX3RoaXM5Ll9yZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlcixcbiAgICAgICAgc2NoZWR1bGVyOiBfdGhpczkuX3NjaGVkdWxlcixcbiAgICAgICAgc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHM6IF90aGlzOS5fc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMsXG4gICAgICAgIHNpbms6IHNpbmssXG4gICAgICAgIC8vIE5PVEU6IFNvbWUgcHJvZHVjdCB0ZXN0cyBleHBlY3QgYE5ldHdvcmsuZXhlY3V0ZWAgdG8gYmUgY2FsbGVkIG9ubHlcbiAgICAgICAgLy8gICAgICAgd2hlbiB0aGUgT2JzZXJ2YWJsZSBpcyBleGVjdXRlZC5cbiAgICAgICAgc291cmNlOiBjcmVhdGVTb3VyY2UoKSxcbiAgICAgICAgc3RvcmU6IF90aGlzOS5fc3RvcmUsXG4gICAgICAgIHRyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbDogX3RoaXM5Ll90cmVhdE1pc3NpbmdGaWVsZHNBc051bGwsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXJcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dG9yLmNhbmNlbCgpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogV3JhcHMgdGhlIG5ldHdvcmsgd2l0aCBsb2dnaW5nIHRvIGVuc3VyZSB0aGF0IG5ldHdvcmsgcmVxdWVzdHMgYXJlXG4gICAqIGFsd2F5cyBsb2dnZWQuIFJlbHlpbmcgb24gZWFjaCBuZXR3b3JrIGNhbGxzaXRlIHRvIGJlIHdyYXBwZWQgaXNcbiAgICogdW50ZW5hYmxlIGFuZCB3aWxsIGV2ZW50dWFsbHkgbGVhZCB0byBob2xlcyBpbiB0aGUgbG9nZ2luZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uX193cmFwTmV0d29ya1dpdGhMb2dPYnNlcnZlciA9IGZ1bmN0aW9uIF9fd3JhcE5ldHdvcmtXaXRoTG9nT2JzZXJ2ZXIobmV0d29yaykge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4ge1xuICAgICAgZXhlY3V0ZTogZnVuY3Rpb24gZXhlY3V0ZShwYXJhbXMsIHZhcmlhYmxlcywgY2FjaGVDb25maWcsIHVwbG9hZGFibGVzKSB7XG4gICAgICAgIHZhciB0cmFuc2FjdGlvbklEID0gZ2VuZXJhdGVJRCgpO1xuICAgICAgICB2YXIgbG9nID0gdGhhdC5fX2xvZztcbiAgICAgICAgdmFyIGxvZ09ic2VydmVyID0ge1xuICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGxvZyh7XG4gICAgICAgICAgICAgIG5hbWU6ICduZXR3b3JrLnN0YXJ0JyxcbiAgICAgICAgICAgICAgdHJhbnNhY3Rpb25JRDogdHJhbnNhY3Rpb25JRCxcbiAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgICBjYWNoZUNvbmZpZzogY2FjaGVDb25maWdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dChyZXNwb25zZSkge1xuICAgICAgICAgICAgbG9nKHtcbiAgICAgICAgICAgICAgbmFtZTogJ25ldHdvcmsubmV4dCcsXG4gICAgICAgICAgICAgIHRyYW5zYWN0aW9uSUQ6IHRyYW5zYWN0aW9uSUQsXG4gICAgICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoX2Vycm9yKSB7XG4gICAgICAgICAgICBsb2coe1xuICAgICAgICAgICAgICBuYW1lOiAnbmV0d29yay5lcnJvcicsXG4gICAgICAgICAgICAgIHRyYW5zYWN0aW9uSUQ6IHRyYW5zYWN0aW9uSUQsXG4gICAgICAgICAgICAgIGVycm9yOiBfZXJyb3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgICAgbG9nKHtcbiAgICAgICAgICAgICAgbmFtZTogJ25ldHdvcmsuY29tcGxldGUnLFxuICAgICAgICAgICAgICB0cmFuc2FjdGlvbklEOiB0cmFuc2FjdGlvbklEXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgICAgIGxvZyh7XG4gICAgICAgICAgICAgIG5hbWU6ICduZXR3b3JrLnVuc3Vic2NyaWJlJyxcbiAgICAgICAgICAgICAgdHJhbnNhY3Rpb25JRDogdHJhbnNhY3Rpb25JRFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBsb2dSZXF1ZXN0SW5mbyA9IGZ1bmN0aW9uIGxvZ1JlcXVlc3RJbmZvKGluZm8pIHtcbiAgICAgICAgICBsb2coe1xuICAgICAgICAgICAgbmFtZTogJ25ldHdvcmsuaW5mbycsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbklEOiB0cmFuc2FjdGlvbklELFxuICAgICAgICAgICAgaW5mbzogaW5mb1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXR3b3JrLmV4ZWN1dGUocGFyYW1zLCB2YXJpYWJsZXMsIGNhY2hlQ29uZmlnLCB1cGxvYWRhYmxlcywgbG9nUmVxdWVzdEluZm8pW1wiZG9cIl0obG9nT2JzZXJ2ZXIpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIFJlbGF5TW9kZXJuRW52aXJvbm1lbnQ7XG59KCk7IC8vIEFkZCBhIHNpZ2lsIGZvciBkZXRlY3Rpb24gYnkgYGlzUmVsYXlNb2Rlcm5FbnZpcm9ubWVudCgpYCB0byBhdm9pZCBhXG4vLyByZWFsbS1zcGVjaWZpYyBpbnN0YW5jZW9mIGNoZWNrLCBhbmQgdG8gYWlkIGluIG1vZHVsZSB0cmVlLXNoYWtpbmcgdG9cbi8vIGF2b2lkIHJlcXVpcmluZyBhbGwgb2YgUmVsYXlSdW50aW1lIGp1c3QgdG8gZGV0ZWN0IGl0cyBlbnZpcm9ubWVudC5cblxuXG5SZWxheU1vZGVybkVudmlyb25tZW50LnByb3RvdHlwZVsnQEBSZWxheU1vZGVybkVudmlyb25tZW50J10gPSB0cnVlO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheU1vZGVybkVudmlyb25tZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9vYmplY3RTcHJlYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIFJlbGF5RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUZlYXR1cmVGbGFncycpO1xuXG52YXIgYXJlRXF1YWwgPSByZXF1aXJlKFwiZmJqcy9saWIvYXJlRXF1YWxcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIGlzU2NhbGFyQW5kRXF1YWwgPSByZXF1aXJlKCcuLi91dGlsL2lzU2NhbGFyQW5kRXF1YWwnKTtcblxudmFyIHJlcG9ydE1pc3NpbmdSZXF1aXJlZEZpZWxkcyA9IHJlcXVpcmUoJy4uL3V0aWwvcmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzJyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3F1ZXJ5L2ZldGNoUXVlcnlJbnRlcm5hbCcpLFxuICAgIGdldFByb21pc2VGb3JBY3RpdmVSZXF1ZXN0ID0gX3JlcXVpcmUuZ2V0UHJvbWlzZUZvckFjdGl2ZVJlcXVlc3Q7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuL1JlbGF5TW9kZXJuT3BlcmF0aW9uRGVzY3JpcHRvcicpLFxuICAgIGNyZWF0ZVJlcXVlc3REZXNjcmlwdG9yID0gX3JlcXVpcmUyLmNyZWF0ZVJlcXVlc3REZXNjcmlwdG9yO1xuXG52YXIgX3JlcXVpcmUzID0gcmVxdWlyZSgnLi9SZWxheU1vZGVyblNlbGVjdG9yJyksXG4gICAgYXJlRXF1YWxTZWxlY3RvcnMgPSBfcmVxdWlyZTMuYXJlRXF1YWxTZWxlY3RvcnMsXG4gICAgY3JlYXRlUmVhZGVyU2VsZWN0b3IgPSBfcmVxdWlyZTMuY3JlYXRlUmVhZGVyU2VsZWN0b3IsXG4gICAgZ2V0U2VsZWN0b3JzRnJvbU9iamVjdCA9IF9yZXF1aXJlMy5nZXRTZWxlY3RvcnNGcm9tT2JqZWN0O1xuXG4vKipcbiAqIEEgdXRpbGl0eSBmb3IgcmVzb2x2aW5nIGFuZCBzdWJzY3JpYmluZyB0byB0aGUgcmVzdWx0cyBvZiBhIGZyYWdtZW50IHNwZWNcbiAqIChrZXkgLT4gZnJhZ21lbnQgbWFwcGluZykgZ2l2ZW4gc29tZSBcInByb3BzXCIgdGhhdCBkZXRlcm1pbmUgdGhlIHJvb3QgSURcbiAqIGFuZCB2YXJpYWJsZXMgdG8gdXNlIHdoZW4gcmVhZGluZyBlYWNoIGZyYWdtZW50LiBXaGVuIHByb3BzIGFyZSBjaGFuZ2VkIHZpYVxuICogYHNldFByb3BzKClgLCB0aGUgcmVzb2x2ZXIgd2lsbCB1cGRhdGUgaXRzIHJlc3VsdHMgYW5kIHN1YnNjcmlwdGlvbnNcbiAqIGFjY29yZGluZ2x5LiBJbnRlcm5hbGx5LCB0aGUgcmVzb2x2ZXI6XG4gKiAtIENvbnZlcnRzIHRoZSBmcmFnbWVudCBtYXAgJiBwcm9wcyBtYXAgaW50byBhIG1hcCBvZiBgU2VsZWN0b3Jgcy5cbiAqIC0gUmVtb3ZlcyBhbnkgcmVzb2x2ZXJzIGZvciBhbnkgcHJvcHMgdGhhdCBiZWNhbWUgbnVsbC5cbiAqIC0gQ3JlYXRlcyByZXNvbHZlcnMgZm9yIGFueSBwcm9wcyB0aGF0IGJlY2FtZSBub24tbnVsbC5cbiAqIC0gVXBkYXRlcyByZXNvbHZlcnMgd2l0aCB0aGUgbGF0ZXN0IHByb3BzLlxuICpcbiAqIFRoaXMgdXRpbGl0eSBpcyBpbXBsZW1lbnRlZCBhcyBhbiBpbXBlcmF0aXZlLCBzdGF0ZWZ1bCBBUEkgZm9yIHBlcmZvcm1hbmNlXG4gKiByZWFzb25zOiByZXVzaW5nIHByZXZpb3VzIHJlc29sdmVycywgY2FsbGJhY2sgZnVuY3Rpb25zLCBhbmQgc3Vic2NyaXB0aW9uc1xuICogYWxsIGhlbHBzIHRvIHJlZHVjZSBvYmplY3QgYWxsb2NhdGlvbiBhbmQgdGhlcmVieSBkZWNyZWFzZSBHQyB0aW1lLlxuICpcbiAqIFRoZSBgcmVzb2x2ZSgpYCBmdW5jdGlvbiBpcyBhbHNvIGxhenkgYW5kIG1lbW9pemVkOiBjaGFuZ2VzIGluIHRoZSBzdG9yZSBtYXJrXG4gKiB0aGUgcmVzb2x2ZXIgYXMgc3RhbGUgYW5kIG5vdGlmeSB0aGUgY2FsbGVyLCBhbmQgdGhlIGFjdHVhbCByZXN1bHRzIGFyZVxuICogcmVjb21wdXRlZCB0aGUgZmlyc3QgdGltZSBgcmVzb2x2ZSgpYCBpcyBjYWxsZWQuXG4gKi9cbnZhciBSZWxheU1vZGVybkZyYWdtZW50U3BlY1Jlc29sdmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVsYXlNb2Rlcm5GcmFnbWVudFNwZWNSZXNvbHZlcihjb250ZXh0LCBmcmFnbWVudHMsIHByb3BzLCBjYWxsYmFjaywgcm9vdElzUXVlcnlSZW5kZXJlcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRoaXMsIFwiX29uQ2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLl9zdGFsZSA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgX3RoaXMuX2NhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIF90aGlzLl9jYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5fZGF0YSA9IHt9O1xuICAgIHRoaXMuX2ZyYWdtZW50cyA9IGZyYWdtZW50cztcbiAgICB0aGlzLl9wcm9wcyA9IHt9O1xuICAgIHRoaXMuX3Jlc29sdmVycyA9IHt9O1xuICAgIHRoaXMuX3N0YWxlID0gZmFsc2U7XG4gICAgdGhpcy5fcm9vdElzUXVlcnlSZW5kZXJlciA9IHJvb3RJc1F1ZXJ5UmVuZGVyZXI7XG4gICAgdGhpcy5zZXRQcm9wcyhwcm9wcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVsYXlNb2Rlcm5GcmFnbWVudFNwZWNSZXNvbHZlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIGZvciAodmFyIF9rZXkgaW4gdGhpcy5fcmVzb2x2ZXJzKSB7XG4gICAgICBpZiAodGhpcy5fcmVzb2x2ZXJzLmhhc093blByb3BlcnR5KF9rZXkpKSB7XG4gICAgICAgIGRpc3Bvc2VDYWxsYmFjayh0aGlzLl9yZXNvbHZlcnNbX2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgaWYgKHRoaXMuX3N0YWxlKSB7XG4gICAgICAvLyBBdm9pZCBtYXBwaW5nIHRoZSBvYmplY3QgbXVsdGlwbGUgdGltZXMsIHdoaWNoIGNvdWxkIG9jY3VyIGlmIGRhdGEgZm9yXG4gICAgICAvLyBtdWx0aXBsZSBrZXlzIGNoYW5nZXMgaW4gdGhlIHNhbWUgZXZlbnQgbG9vcC5cbiAgICAgIHZhciBwcmV2RGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICB2YXIgbmV4dERhdGE7XG5cbiAgICAgIGZvciAodmFyIF9rZXkyIGluIHRoaXMuX3Jlc29sdmVycykge1xuICAgICAgICBpZiAodGhpcy5fcmVzb2x2ZXJzLmhhc093blByb3BlcnR5KF9rZXkyKSkge1xuICAgICAgICAgIHZhciByZXNvbHZlciA9IHRoaXMuX3Jlc29sdmVyc1tfa2V5Ml07XG4gICAgICAgICAgdmFyIHByZXZJdGVtID0gcHJldkRhdGFbX2tleTJdO1xuXG4gICAgICAgICAgaWYgKHJlc29sdmVyKSB7XG4gICAgICAgICAgICB2YXIgbmV4dEl0ZW0gPSByZXNvbHZlci5yZXNvbHZlKCk7XG5cbiAgICAgICAgICAgIGlmIChuZXh0RGF0YSB8fCBuZXh0SXRlbSAhPT0gcHJldkl0ZW0pIHtcbiAgICAgICAgICAgICAgbmV4dERhdGEgPSBuZXh0RGF0YSB8fCAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgcHJldkRhdGEpO1xuICAgICAgICAgICAgICBuZXh0RGF0YVtfa2V5Ml0gPSBuZXh0SXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHByb3AgPSB0aGlzLl9wcm9wc1tfa2V5Ml07XG5cbiAgICAgICAgICAgIHZhciBfbmV4dEl0ZW0gPSBwcm9wICE9PSB1bmRlZmluZWQgPyBwcm9wIDogbnVsbDtcblxuICAgICAgICAgICAgaWYgKG5leHREYXRhIHx8ICFpc1NjYWxhckFuZEVxdWFsKF9uZXh0SXRlbSwgcHJldkl0ZW0pKSB7XG4gICAgICAgICAgICAgIG5leHREYXRhID0gbmV4dERhdGEgfHwgKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIHByZXZEYXRhKTtcbiAgICAgICAgICAgICAgbmV4dERhdGFbX2tleTJdID0gX25leHRJdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9kYXRhID0gbmV4dERhdGEgfHwgcHJldkRhdGE7XG4gICAgICB0aGlzLl9zdGFsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9O1xuXG4gIF9wcm90by5zZXRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8uc2V0UHJvcHMgPSBmdW5jdGlvbiBzZXRQcm9wcyhwcm9wcykge1xuICAgIHZhciBvd25lZFNlbGVjdG9ycyA9IGdldFNlbGVjdG9yc0Zyb21PYmplY3QodGhpcy5fZnJhZ21lbnRzLCBwcm9wcyk7XG4gICAgdGhpcy5fcHJvcHMgPSB7fTtcblxuICAgIGZvciAodmFyIF9rZXkzIGluIG93bmVkU2VsZWN0b3JzKSB7XG4gICAgICBpZiAob3duZWRTZWxlY3RvcnMuaGFzT3duUHJvcGVydHkoX2tleTMpKSB7XG4gICAgICAgIHZhciBvd25lZFNlbGVjdG9yID0gb3duZWRTZWxlY3RvcnNbX2tleTNdO1xuICAgICAgICB2YXIgcmVzb2x2ZXIgPSB0aGlzLl9yZXNvbHZlcnNbX2tleTNdO1xuXG4gICAgICAgIGlmIChvd25lZFNlbGVjdG9yID09IG51bGwpIHtcbiAgICAgICAgICBpZiAocmVzb2x2ZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzb2x2ZXIuZGlzcG9zZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlc29sdmVyID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChvd25lZFNlbGVjdG9yLmtpbmQgPT09ICdQbHVyYWxSZWFkZXJTZWxlY3RvcicpIHtcbiAgICAgICAgICBpZiAocmVzb2x2ZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzb2x2ZXIgPSBuZXcgU2VsZWN0b3JMaXN0UmVzb2x2ZXIodGhpcy5fY29udGV4dC5lbnZpcm9ubWVudCwgdGhpcy5fcm9vdElzUXVlcnlSZW5kZXJlciwgb3duZWRTZWxlY3RvciwgdGhpcy5fb25DaGFuZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAhKHJlc29sdmVyIGluc3RhbmNlb2YgU2VsZWN0b3JMaXN0UmVzb2x2ZXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5GcmFnbWVudFNwZWNSZXNvbHZlcjogRXhwZWN0ZWQgcHJvcCBgJXNgIHRvIGFsd2F5cyBiZSBhbiBhcnJheS4nLCBfa2V5MykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgICAgcmVzb2x2ZXIuc2V0U2VsZWN0b3Iob3duZWRTZWxlY3Rvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChyZXNvbHZlciA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXNvbHZlciA9IG5ldyBTZWxlY3RvclJlc29sdmVyKHRoaXMuX2NvbnRleHQuZW52aXJvbm1lbnQsIHRoaXMuX3Jvb3RJc1F1ZXJ5UmVuZGVyZXIsIG93bmVkU2VsZWN0b3IsIHRoaXMuX29uQ2hhbmdlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgIShyZXNvbHZlciBpbnN0YW5jZW9mIFNlbGVjdG9yUmVzb2x2ZXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5GcmFnbWVudFNwZWNSZXNvbHZlcjogRXhwZWN0ZWQgcHJvcCBgJXNgIHRvIGFsd2F5cyBiZSBhbiBvYmplY3QuJywgX2tleTMpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIHJlc29sdmVyLnNldFNlbGVjdG9yKG93bmVkU2VsZWN0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3Byb3BzW19rZXkzXSA9IHByb3BzW19rZXkzXTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZXJzW19rZXkzXSA9IHJlc29sdmVyO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3N0YWxlID0gdHJ1ZTtcbiAgfTtcblxuICBfcHJvdG8uc2V0VmFyaWFibGVzID0gZnVuY3Rpb24gc2V0VmFyaWFibGVzKHZhcmlhYmxlcywgcmVxdWVzdCkge1xuICAgIGZvciAodmFyIF9rZXk0IGluIHRoaXMuX3Jlc29sdmVycykge1xuICAgICAgaWYgKHRoaXMuX3Jlc29sdmVycy5oYXNPd25Qcm9wZXJ0eShfa2V5NCkpIHtcbiAgICAgICAgdmFyIHJlc29sdmVyID0gdGhpcy5fcmVzb2x2ZXJzW19rZXk0XTtcblxuICAgICAgICBpZiAocmVzb2x2ZXIpIHtcbiAgICAgICAgICByZXNvbHZlci5zZXRWYXJpYWJsZXModmFyaWFibGVzLCByZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3N0YWxlID0gdHJ1ZTtcbiAgfTtcblxuICByZXR1cm4gUmVsYXlNb2Rlcm5GcmFnbWVudFNwZWNSZXNvbHZlcjtcbn0oKTtcbi8qKlxuICogQSByZXNvbHZlciBmb3IgYSBzaW5nbGUgU2VsZWN0b3IuXG4gKi9cblxuXG52YXIgU2VsZWN0b3JSZXNvbHZlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNlbGVjdG9yUmVzb2x2ZXIoZW52aXJvbm1lbnQsIHJvb3RJc1F1ZXJ5UmVuZGVyZXIsIHNlbGVjdG9yLCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh0aGlzLCBcIl9vbkNoYW5nZVwiLCBmdW5jdGlvbiAoc25hcHNob3QpIHtcbiAgICAgIF90aGlzMi5fZGF0YSA9IHNuYXBzaG90LmRhdGE7XG4gICAgICBfdGhpczIuX2lzTWlzc2luZ0RhdGEgPSBzbmFwc2hvdC5pc01pc3NpbmdEYXRhO1xuICAgICAgX3RoaXMyLl9taXNzaW5nUmVxdWlyZWRGaWVsZHMgPSBzbmFwc2hvdC5taXNzaW5nUmVxdWlyZWRGaWVsZHM7XG5cbiAgICAgIF90aGlzMi5fY2FsbGJhY2soKTtcbiAgICB9KTtcblxuICAgIHZhciBfc25hcHNob3QgPSBlbnZpcm9ubWVudC5sb29rdXAoc2VsZWN0b3IpO1xuXG4gICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLl9kYXRhID0gX3NuYXBzaG90LmRhdGE7XG4gICAgdGhpcy5faXNNaXNzaW5nRGF0YSA9IF9zbmFwc2hvdC5pc01pc3NpbmdEYXRhO1xuICAgIHRoaXMuX21pc3NpbmdSZXF1aXJlZEZpZWxkcyA9IF9zbmFwc2hvdC5taXNzaW5nUmVxdWlyZWRGaWVsZHM7XG4gICAgdGhpcy5fZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcbiAgICB0aGlzLl9yb290SXNRdWVyeVJlbmRlcmVyID0gcm9vdElzUXVlcnlSZW5kZXJlcjtcbiAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbiA9IGVudmlyb25tZW50LnN1YnNjcmliZShfc25hcHNob3QsIHRoaXMuX29uQ2hhbmdlKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gU2VsZWN0b3JSZXNvbHZlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb24uZGlzcG9zZSgpO1xuXG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKCkge1xuICAgIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUkVMQVlfQ09OVEFJTkVSU19TVVNQRU5TRSA9PT0gdHJ1ZSAmJiB0aGlzLl9pc01pc3NpbmdEYXRhID09PSB0cnVlKSB7XG4gICAgICB2YXIgX2dldFByb21pc2VGb3JBY3RpdmVSO1xuXG4gICAgICAvLyBOT1RFOiBUaGlzIGJyYW5jaCBleGlzdHMgdG8gaGFuZGxlIHRoZSBjYXNlIGluIHdoaWNoOlxuICAgICAgLy8gLSBBIFJlbGF5TW9kZXJuIGNvbnRhaW5lciBpcyByZW5kZXJlZCBhcyBhIGRlc2NlbmRhbnQgb2YgYSBSZWxheSBIb29rXG4gICAgICAvLyAgIHJvb3QgdXNpbmcgYSBcInBhcnRpYWxcIiByZW5kZXJQb2xpY3kgKHRoaXMgbWVhbnMgdGhhdCBlYXJnZXJseVxuICAgICAgLy8gICByZWFkaW5nIGFueSBjYWNoZWQgZGF0YSB0aGF0IGlzIGF2YWlsYWJsZSBpbnN0ZWFkIG9mIGJsb2NraW5nXG4gICAgICAvLyAgIGF0IHRoZSByb290IHVudGlsIHRoZSB3aG9sZSBxdWVyeSBpcyBmZXRjaGVkKS5cbiAgICAgIC8vIC0gQSBwYXJlbnQgUmVsYXkgSG9vayBkaWRudCcgc3VzcGVuZCBlYXJsaWVyIG9uIGRhdGEgYmVpbmcgZmV0Y2hlZCxcbiAgICAgIC8vICAgZWl0aGVyIGJlY2F1c2UgdGhlIGZyYWdtZW50IGRhdGEgZm9yIHRoZSBwYXJlbnQgd2FzIGF2YWlsYWJsZSwgb3JcbiAgICAgIC8vICAgdGhlIHBhcmVudCBmcmFnbWVudCBkaWRuJ3QgaGF2ZSBhbnkgZGF0YSBkZXBlbmRlbmNpZXMuXG4gICAgICAvLyBFdmVuIHRob3VnaCBvdXIgRmxvdyB0eXBlcyByZWZsZWN0IHRoZSBwb3NzaWJsaXR5IG9mIG51bGwgZGF0YSwgdGhlcmVcbiAgICAgIC8vIG1pZ2h0IHN0aWxsIGJlIGNhc2VzIHdoZXJlIGl0J3Mgbm90IGhhbmRsZWQgYXQgcnVudGltZSBiZWN1YXNlIHRoZVxuICAgICAgLy8gRmxvdyB0eXBlcyBhcmUgYmVpbmcgaWdub3JlZCwgb3Igc2ltcGx5IG5vdCBiZWluZyB1c2VkIChmb3IgZXhhbXBsZSxcbiAgICAgIC8vIHRoZSBjYXNlIHJlcG9ydGVkIGhlcmU6IGh0dHBzOi8vZmJ1cmwuY29tL3NybmJ1Y2Y4LCB3YXMgZHVlIHRvXG4gICAgICAvLyBtaXN1c2Ugb2YgRmxvdyB0eXBlcyBoZXJlOiBodHRwczovL2ZidXJsLmNvbS9nM20wbXFxaCkuXG4gICAgICAvLyBBZGRpdGlvbmFsbHksIGV2ZW4gdGhvdWdoIHRoZSBudWxsIGRhdGEgbWlnaHQgYmUgaGFuZGxlZCB3aXRob3V0IGFcbiAgICAgIC8vIHJ1bnRpbWUgZXJyb3IsIHdlIG1pZ2h0IG5vdCBzdXNwZW5kIHdoZW4gd2UgaW50ZW5kZWQgdG8gaWYgYSBwYXJlbnRcbiAgICAgIC8vIFJlbGF5IEhvb2sgKGUuZy4gdGhhdCBpcyB1c2luZyBAZGVmZXIpIGRlY2lkZWQgbm90IHRvIHN1c3BlbmQgYmVjdWFzZVxuICAgICAgLy8gaXQncyBpbW1lZGlhdGUgZGF0YSB3YXMgYWxyZWFkeSBhdmFpbGFibGUgKGV2ZW4gaWYgaXQgd2FzIGRlZmVycmVkKSxcbiAgICAgIC8vIG9yIGl0IGRpZG4ndCBhY3R1YWxseSBuZWVkIGFueSBkYXRhICh3YXMganVzdCBzcHJlYWRpbmcgb3RoZXIgZnJhZ21lbnRzKS5cbiAgICAgIC8vIFRoaXMgc2hvdWxkIGV2ZW50dWFsbHkgZ28gYXdheSB3aXRoIHNvbWV0aGluZyBsaWtlIEBvcHRpb25hbCwgd2hlcmUgd2Ugb25seVxuICAgICAgLy8gc3VzcGVuZCBhdCBzcGVjaWZpYyBib3VuZGFyaWVzIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBib3VuZGFyeVxuICAgICAgLy8gY2FuIGJlIGZ1bGZpbGxlZCBvciBub3QuXG4gICAgICB2YXIgcHJvbWlzZSA9IChfZ2V0UHJvbWlzZUZvckFjdGl2ZVIgPSBnZXRQcm9taXNlRm9yQWN0aXZlUmVxdWVzdCh0aGlzLl9lbnZpcm9ubWVudCwgdGhpcy5fc2VsZWN0b3Iub3duZXIpKSAhPT0gbnVsbCAmJiBfZ2V0UHJvbWlzZUZvckFjdGl2ZVIgIT09IHZvaWQgMCA/IF9nZXRQcm9taXNlRm9yQWN0aXZlUiA6IHRoaXMuX2Vudmlyb25tZW50LmdldE9wZXJhdGlvblRyYWNrZXIoKS5nZXRQcm9taXNlRm9yUGVuZGluZ09wZXJhdGlvbnNBZmZlY3RpbmdPd25lcih0aGlzLl9zZWxlY3Rvci5vd25lcik7XG5cbiAgICAgIGlmIChwcm9taXNlICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Jvb3RJc1F1ZXJ5UmVuZGVyZXIpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXk6IFJlbGF5IENvbnRhaW5lciBmb3IgZnJhZ21lbnQgYCVzYCBoYXMgbWlzc2luZyBkYXRhIGFuZCAnICsgJ3dvdWxkIHN1c3BlbmQuIFdoZW4gdXNpbmcgZmVhdHVyZXMgc3VjaCBhcyBAZGVmZXIgb3IgQG1vZHVsZSwgJyArICd1c2UgYHVzZUZyYWdtZW50YCBpbnN0ZWFkIG9mIGEgUmVsYXkgQ29udGFpbmVyLicsIHRoaXMuX3NlbGVjdG9yLm5vZGUubmFtZSkgOiB2b2lkIDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5OiBSZWxheSBDb250YWluZXIgZm9yIGZyYWdtZW50IGAlc2Agc3VzcGVuZGVkLiBXaGVuIHVzaW5nICcgKyAnZmVhdHVyZXMgc3VjaCBhcyBAZGVmZXIgb3IgQG1vZHVsZSwgdXNlIGB1c2VGcmFnbWVudGAgaW5zdGVhZCAnICsgJ29mIGEgUmVsYXkgQ29udGFpbmVyLicsIHRoaXMuX3NlbGVjdG9yLm5vZGUubmFtZSkgOiB2b2lkIDA7XG4gICAgICAgICAgdGhyb3cgcHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9taXNzaW5nUmVxdWlyZWRGaWVsZHMgIT0gbnVsbCkge1xuICAgICAgcmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzKHRoaXMuX2Vudmlyb25tZW50LCB0aGlzLl9taXNzaW5nUmVxdWlyZWRGaWVsZHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9O1xuXG4gIF9wcm90bzIuc2V0U2VsZWN0b3IgPSBmdW5jdGlvbiBzZXRTZWxlY3RvcihzZWxlY3Rvcikge1xuICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb24gIT0gbnVsbCAmJiBhcmVFcXVhbFNlbGVjdG9ycyhzZWxlY3RvciwgdGhpcy5fc2VsZWN0b3IpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5kaXNwb3NlKCk7XG5cbiAgICB2YXIgc25hcHNob3QgPSB0aGlzLl9lbnZpcm9ubWVudC5sb29rdXAoc2VsZWN0b3IpO1xuXG4gICAgdGhpcy5fZGF0YSA9IHNuYXBzaG90LmRhdGE7XG4gICAgdGhpcy5faXNNaXNzaW5nRGF0YSA9IHNuYXBzaG90LmlzTWlzc2luZ0RhdGE7XG4gICAgdGhpcy5fbWlzc2luZ1JlcXVpcmVkRmllbGRzID0gc25hcHNob3QubWlzc2luZ1JlcXVpcmVkRmllbGRzO1xuICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gdGhpcy5fZW52aXJvbm1lbnQuc3Vic2NyaWJlKHNuYXBzaG90LCB0aGlzLl9vbkNoYW5nZSk7XG4gIH07XG5cbiAgX3Byb3RvMi5zZXRWYXJpYWJsZXMgPSBmdW5jdGlvbiBzZXRWYXJpYWJsZXModmFyaWFibGVzLCByZXF1ZXN0KSB7XG4gICAgaWYgKGFyZUVxdWFsKHZhcmlhYmxlcywgdGhpcy5fc2VsZWN0b3IudmFyaWFibGVzKSkge1xuICAgICAgLy8gSWYgd2UncmUgbm90IGFjdHVhbGx5IHNldHRpbmcgbmV3IHZhcmlhYmxlcywgd2UgZG9uJ3QgYWN0dWFsbHkgd2FudFxuICAgICAgLy8gdG8gY3JlYXRlIGEgbmV3IGZyYWdtZW50IG93bmVyLCBzaW5jZSBhcmVFcXVhbFNlbGVjdG9ycyByZWxpZXMgb25cbiAgICAgIC8vIG93bmVyIGlkZW50aXR5LlxuICAgICAgLy8gSW4gZmFjdCwgd2UgZG9uJ3QgZXZlbiBuZWVkIHRvIHRyeSB0byBhdHRlbXB0IHRvIHNldCBhIG5ldyBzZWxlY3Rvci5cbiAgICAgIC8vIFdoZW4gZnJhZ21lbnQgb3duZXJzaGlwIGlzIG5vdCBlbmFibGVkLCBzZXRTZWxlY3RvciB3aWxsIGFsc28gYmFpbFxuICAgICAgLy8gb3V0IHNpbmNlIHRoZSBzZWxlY3RvciBkb2Vzbid0IHJlYWxseSBjaGFuZ2UsIHNvIHdlJ3JlIGRvaW5nIGl0IGhlcmVcbiAgICAgIC8vIGVhcmxpZXIuXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBOT1RFOiBXZSBtYW51YWxseSBjcmVhdGUgdGhlIHJlcXVlc3QgZGVzY3JpcHRvciBoZXJlIGluc3RlYWQgb2ZcbiAgICAvLyBjYWxsaW5nIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IoKSBiZWNhdXNlIHdlIHdhbnQgdG8gc2V0IGFcbiAgICAvLyBkZXNjcmlwdG9yIHdpdGggKnVuYWx0ZXJlZCogdmFyaWFibGVzIGFzIHRoZSBmcmFnbWVudCBvd25lci5cbiAgICAvLyBUaGlzIGlzIGEgaGFjayB0aGF0IGFsbG93cyB1cyB0byBwcmVzZXJ2ZSBleGlzdGluZyAoYnJva2VuKVxuICAgIC8vIGJlaGF2aW9yIG9mIFJlbGF5TW9kZXJuIGNvbnRhaW5lcnMgd2hpbGUgdXNpbmcgZnJhZ21lbnQgb3duZXJzaGlwXG4gICAgLy8gdG8gcHJvcGFnYXRlIHZhcmlhYmxlcyBpbnN0ZWFkIG9mIENvbnRleHQuXG4gICAgLy8gRm9yIG1vcmUgZGV0YWlscywgc2VlIHRoZSBzdW1tYXJ5IG9mIEQxMzk5OTMwOFxuXG5cbiAgICB2YXIgcmVxdWVzdERlc2NyaXB0b3IgPSBjcmVhdGVSZXF1ZXN0RGVzY3JpcHRvcihyZXF1ZXN0LCB2YXJpYWJsZXMpO1xuICAgIHZhciBzZWxlY3RvciA9IGNyZWF0ZVJlYWRlclNlbGVjdG9yKHRoaXMuX3NlbGVjdG9yLm5vZGUsIHRoaXMuX3NlbGVjdG9yLmRhdGFJRCwgdmFyaWFibGVzLCByZXF1ZXN0RGVzY3JpcHRvcik7XG4gICAgdGhpcy5zZXRTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH07XG5cbiAgcmV0dXJuIFNlbGVjdG9yUmVzb2x2ZXI7XG59KCk7XG4vKipcbiAqIEEgcmVzb2x2ZXIgZm9yIGFuIGFycmF5IG9mIFNlbGVjdG9ycy5cbiAqL1xuXG5cbnZhciBTZWxlY3Rvckxpc3RSZXNvbHZlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNlbGVjdG9yTGlzdFJlc29sdmVyKGVudmlyb25tZW50LCByb290SXNRdWVyeVJlbmRlcmVyLCBzZWxlY3RvciwgY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkodGhpcywgXCJfb25DaGFuZ2VcIiwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIF90aGlzMy5fc3RhbGUgPSB0cnVlO1xuXG4gICAgICBfdGhpczMuX2NhbGxiYWNrKCk7XG4gICAgfSk7XG4gICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLl9kYXRhID0gW107XG4gICAgdGhpcy5fZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcbiAgICB0aGlzLl9yZXNvbHZlcnMgPSBbXTtcbiAgICB0aGlzLl9zdGFsZSA9IHRydWU7XG4gICAgdGhpcy5fcm9vdElzUXVlcnlSZW5kZXJlciA9IHJvb3RJc1F1ZXJ5UmVuZGVyZXI7XG4gICAgdGhpcy5zZXRTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH1cblxuICB2YXIgX3Byb3RvMyA9IFNlbGVjdG9yTGlzdFJlc29sdmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8zLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIHRoaXMuX3Jlc29sdmVycy5mb3JFYWNoKGRpc3Bvc2VDYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvMy5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSgpIHtcbiAgICBpZiAodGhpcy5fc3RhbGUpIHtcbiAgICAgIC8vIEF2b2lkIG1hcHBpbmcgdGhlIGFycmF5IG11bHRpcGxlIHRpbWVzLCB3aGljaCBjb3VsZCBvY2N1ciBpZiBkYXRhIGZvclxuICAgICAgLy8gbXVsdGlwbGUgaW5kaWNlcyBjaGFuZ2VzIGluIHRoZSBzYW1lIGV2ZW50IGxvb3AuXG4gICAgICB2YXIgcHJldkRhdGEgPSB0aGlzLl9kYXRhO1xuICAgICAgdmFyIG5leHREYXRhO1xuXG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgdGhpcy5fcmVzb2x2ZXJzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICB2YXIgcHJldkl0ZW0gPSBwcmV2RGF0YVtpaV07XG5cbiAgICAgICAgdmFyIG5leHRJdGVtID0gdGhpcy5fcmVzb2x2ZXJzW2lpXS5yZXNvbHZlKCk7XG5cbiAgICAgICAgaWYgKG5leHREYXRhIHx8IG5leHRJdGVtICE9PSBwcmV2SXRlbSkge1xuICAgICAgICAgIG5leHREYXRhID0gbmV4dERhdGEgfHwgcHJldkRhdGEuc2xpY2UoMCwgaWkpO1xuICAgICAgICAgIG5leHREYXRhLnB1c2gobmV4dEl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghbmV4dERhdGEgJiYgdGhpcy5fcmVzb2x2ZXJzLmxlbmd0aCAhPT0gcHJldkRhdGEubGVuZ3RoKSB7XG4gICAgICAgIG5leHREYXRhID0gcHJldkRhdGEuc2xpY2UoMCwgdGhpcy5fcmVzb2x2ZXJzLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2RhdGEgPSBuZXh0RGF0YSB8fCBwcmV2RGF0YTtcbiAgICAgIHRoaXMuX3N0YWxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gIH07XG5cbiAgX3Byb3RvMy5zZXRTZWxlY3RvciA9IGZ1bmN0aW9uIHNldFNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgdmFyIHNlbGVjdG9ycyA9IHNlbGVjdG9yLnNlbGVjdG9ycztcblxuICAgIHdoaWxlICh0aGlzLl9yZXNvbHZlcnMubGVuZ3RoID4gc2VsZWN0b3JzLmxlbmd0aCkge1xuICAgICAgdmFyIHJlc29sdmVyID0gdGhpcy5fcmVzb2x2ZXJzLnBvcCgpO1xuXG4gICAgICByZXNvbHZlci5kaXNwb3NlKCk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHNlbGVjdG9ycy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIGlmIChpaSA8IHRoaXMuX3Jlc29sdmVycy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZXJzW2lpXS5zZXRTZWxlY3RvcihzZWxlY3RvcnNbaWldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVyc1tpaV0gPSBuZXcgU2VsZWN0b3JSZXNvbHZlcih0aGlzLl9lbnZpcm9ubWVudCwgdGhpcy5fcm9vdElzUXVlcnlSZW5kZXJlciwgc2VsZWN0b3JzW2lpXSwgdGhpcy5fb25DaGFuZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3N0YWxlID0gdHJ1ZTtcbiAgfTtcblxuICBfcHJvdG8zLnNldFZhcmlhYmxlcyA9IGZ1bmN0aW9uIHNldFZhcmlhYmxlcyh2YXJpYWJsZXMsIHJlcXVlc3QpIHtcbiAgICB0aGlzLl9yZXNvbHZlcnMuZm9yRWFjaChmdW5jdGlvbiAocmVzb2x2ZXIpIHtcbiAgICAgIHJldHVybiByZXNvbHZlci5zZXRWYXJpYWJsZXModmFyaWFibGVzLCByZXF1ZXN0KTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3N0YWxlID0gdHJ1ZTtcbiAgfTtcblxuICByZXR1cm4gU2VsZWN0b3JMaXN0UmVzb2x2ZXI7XG59KCk7XG5cbmZ1bmN0aW9uIGRpc3Bvc2VDYWxsYmFjayhkaXNwb3NhYmxlKSB7XG4gIGRpc3Bvc2FibGUgJiYgZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVsYXlNb2Rlcm5GcmFnbWVudFNwZWNSZXNvbHZlcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGRlZXBGcmVlemUgPSByZXF1aXJlKCcuLi91dGlsL2RlZXBGcmVlemUnKTtcblxudmFyIGdldFJlcXVlc3RJZGVudGlmaWVyID0gcmVxdWlyZSgnLi4vdXRpbC9nZXRSZXF1ZXN0SWRlbnRpZmllcicpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL1JlbGF5Q29uY3JldGVWYXJpYWJsZXMnKSxcbiAgICBnZXRPcGVyYXRpb25WYXJpYWJsZXMgPSBfcmVxdWlyZS5nZXRPcGVyYXRpb25WYXJpYWJsZXM7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuL1JlbGF5TW9kZXJuU2VsZWN0b3InKSxcbiAgICBjcmVhdGVOb3JtYWxpemF0aW9uU2VsZWN0b3IgPSBfcmVxdWlyZTIuY3JlYXRlTm9ybWFsaXphdGlvblNlbGVjdG9yLFxuICAgIGNyZWF0ZVJlYWRlclNlbGVjdG9yID0gX3JlcXVpcmUyLmNyZWF0ZVJlYWRlclNlbGVjdG9yO1xuXG52YXIgX3JlcXVpcmUzID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlVXRpbHMnKSxcbiAgICBST09UX0lEID0gX3JlcXVpcmUzLlJPT1RfSUQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUgYE9wZXJhdGlvbkRlc2NyaXB0b3JgIHR5cGUgZGVmaW5lZCBpblxuICogYFJlbGF5U3RvcmVUeXBlc2AgZ2l2ZW4gYW4gb3BlcmF0aW9uIGFuZCBzb21lIHZhcmlhYmxlcy4gVGhlIGlucHV0IHZhcmlhYmxlc1xuICogYXJlIGZpbHRlcmVkIHRvIGV4Y2x1ZGUgdmFyaWFibGVzIHRoYXQgZG8gbm90IG1hdGNoIGRlZmluZWQgYXJndW1lbnRzIG9uIHRoZVxuICogb3BlcmF0aW9uLCBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIHBvcHVsYXRlZCBmb3IgbnVsbCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IocmVxdWVzdCwgdmFyaWFibGVzLCBjYWNoZUNvbmZpZykge1xuICB2YXIgZGF0YUlEID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBST09UX0lEO1xuICB2YXIgb3BlcmF0aW9uID0gcmVxdWVzdC5vcGVyYXRpb247XG4gIHZhciBvcGVyYXRpb25WYXJpYWJsZXMgPSBnZXRPcGVyYXRpb25WYXJpYWJsZXMob3BlcmF0aW9uLCB2YXJpYWJsZXMpO1xuICB2YXIgcmVxdWVzdERlc2NyaXB0b3IgPSBjcmVhdGVSZXF1ZXN0RGVzY3JpcHRvcihyZXF1ZXN0LCBvcGVyYXRpb25WYXJpYWJsZXMsIGNhY2hlQ29uZmlnKTtcbiAgdmFyIG9wZXJhdGlvbkRlc2NyaXB0b3IgPSB7XG4gICAgZnJhZ21lbnQ6IGNyZWF0ZVJlYWRlclNlbGVjdG9yKHJlcXVlc3QuZnJhZ21lbnQsIGRhdGFJRCwgb3BlcmF0aW9uVmFyaWFibGVzLCByZXF1ZXN0RGVzY3JpcHRvciksXG4gICAgcmVxdWVzdDogcmVxdWVzdERlc2NyaXB0b3IsXG4gICAgcm9vdDogY3JlYXRlTm9ybWFsaXphdGlvblNlbGVjdG9yKG9wZXJhdGlvbiwgZGF0YUlELCBvcGVyYXRpb25WYXJpYWJsZXMpXG4gIH07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vIEZyZWV6aW5nIHByb3BlcnRpZXMgc2hvcnQtY2lyY3VpdHMgYSBkZWVwRnJlZXplIG9mIHNuYXBzaG90cyB0aGF0IGNvbnRhaW5cbiAgICAvLyBhbiBPcGVyYXRpb25EZXNjcmlwdG9yIHZpYSB0aGVpciBzZWxlY3RvcidzIG93bmVyLCBhdm9pZGluZyBzdGFja1xuICAgIC8vIG92ZXJmbG93IG9uIGxhcmdlciBxdWVyaWVzLlxuICAgIE9iamVjdC5mcmVlemUob3BlcmF0aW9uRGVzY3JpcHRvci5mcmFnbWVudCk7XG4gICAgT2JqZWN0LmZyZWV6ZShvcGVyYXRpb25EZXNjcmlwdG9yLnJvb3QpO1xuICAgIE9iamVjdC5mcmVlemUob3BlcmF0aW9uRGVzY3JpcHRvcik7XG4gIH1cblxuICByZXR1cm4gb3BlcmF0aW9uRGVzY3JpcHRvcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVxdWVzdERlc2NyaXB0b3IocmVxdWVzdCwgdmFyaWFibGVzLCBjYWNoZUNvbmZpZykge1xuICB2YXIgcmVxdWVzdERlc2NyaXB0b3IgPSB7XG4gICAgaWRlbnRpZmllcjogZ2V0UmVxdWVzdElkZW50aWZpZXIocmVxdWVzdC5wYXJhbXMsIHZhcmlhYmxlcyksXG4gICAgbm9kZTogcmVxdWVzdCxcbiAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyxcbiAgICBjYWNoZUNvbmZpZzogY2FjaGVDb25maWdcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgZGVlcEZyZWV6ZSh2YXJpYWJsZXMpO1xuICAgIE9iamVjdC5mcmVlemUocmVxdWVzdCk7XG4gICAgT2JqZWN0LmZyZWV6ZShyZXF1ZXN0RGVzY3JpcHRvcik7XG4gIH1cblxuICByZXR1cm4gcmVxdWVzdERlc2NyaXB0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yOiBjcmVhdGVPcGVyYXRpb25EZXNjcmlwdG9yLFxuICBjcmVhdGVSZXF1ZXN0RGVzY3JpcHRvcjogY3JlYXRlUmVxdWVzdERlc2NyaXB0b3Jcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgYXJlRXF1YWwgPSByZXF1aXJlKFwiZmJqcy9saWIvYXJlRXF1YWxcIik7XG5cbnZhciBkZWVwRnJlZXplID0gcmVxdWlyZSgnLi4vdXRpbC9kZWVwRnJlZXplJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9DbGllbnRJRCcpLFxuICAgIGlzQ2xpZW50SUQgPSBfcmVxdWlyZS5pc0NsaWVudElEO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlVXRpbHMnKSxcbiAgICBJRF9LRVkgPSBfcmVxdWlyZTIuSURfS0VZLFxuICAgIFJFRl9LRVkgPSBfcmVxdWlyZTIuUkVGX0tFWSxcbiAgICBSRUZTX0tFWSA9IF9yZXF1aXJlMi5SRUZTX0tFWSxcbiAgICBUWVBFTkFNRV9LRVkgPSBfcmVxdWlyZTIuVFlQRU5BTUVfS0VZLFxuICAgIElOVkFMSURBVEVEX0FUX0tFWSA9IF9yZXF1aXJlMi5JTlZBTElEQVRFRF9BVF9LRVksXG4gICAgUk9PVF9JRCA9IF9yZXF1aXJlMi5ST09UX0lEO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBMb3ctbGV2ZWwgcmVjb3JkIG1hbmlwdWxhdGlvbiBtZXRob2RzLlxuICpcbiAqIEEgbm90ZSBhYm91dCBwZXJmOiB3ZSB1c2UgbG9uZy1oYW5kIHByb3BlcnR5IGFjY2VzcyByYXRoZXIgdGhhbiBjb21wdXRlZFxuICogcHJvcGVydGllcyBpbiB0aGlzIGZpbGUgZm9yIHNwZWVkIGllLlxuICpcbiAqICAgIGNvbnN0IG9iamVjdCA9IHt9O1xuICogICAgb2JqZWN0W0tFWV0gPSB2YWx1ZTtcbiAqICAgIHJlY29yZFtzdG9yYWdlS2V5XSA9IG9iamVjdDtcbiAqXG4gKiBpbnN0ZWFkIG9mOlxuICpcbiAqICAgIHJlY29yZFtzdG9yYWdlS2V5XSA9IHtcbiAqICAgICAgW0tFWV06IHZhbHVlLFxuICogICAgfTtcbiAqXG4gKiBUaGUgbGF0dGVyIGdldHMgdHJhbnNmb3JtZWQgYnkgQmFiZWwgaW50byBzb21ldGhpbmcgbGlrZTpcbiAqXG4gKiAgICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gKiAgICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gKiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gKiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gKiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICogICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICogICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gKiAgICAgICAgfSk7XG4gKiAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAqICAgICAgfVxuICogICAgICByZXR1cm4gb2JqO1xuICogICAgfVxuICpcbiAqICAgIHJlY29yZFtzdG9yYWdlS2V5XSA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgS0VZLCB2YWx1ZSk7XG4gKlxuICogQSBxdWljayBiZW5jaG1hcmsgc2hvd3MgdGhhdCBjb21wdXRlZCBwcm9wZXJ0eSBhY2Nlc3MgaXMgYW4gb3JkZXIgb2ZcbiAqIG1hZ25pdHVkZSBzbG93ZXIgKHRpbWVzIGluIHNlY29uZHMgZm9yIDEwMCwwMDAgaXRlcmF0aW9ucyk6XG4gKlxuICogICAgICAgICAgICAgICBiZXN0ICAgICBhdmcgICAgIHNkXG4gKiAgICBjb21wdXRlZCAwLjAyMTc1IDAuMDIyOTIgMC4wMDExM1xuICogICAgICBtYW51YWwgMC4wMDExMCAwLjAwMTIzIDAuMDAwMDhcbiAqL1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBDbG9uZSBhIHJlY29yZC5cbiAqL1xuZnVuY3Rpb24gY2xvbmUocmVjb3JkKSB7XG4gIHJldHVybiAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgcmVjb3JkKTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIENvcGllcyBhbGwgZmllbGRzIGZyb20gYHNvdXJjZWAgdG8gYHNpbmtgLCBleGNsdWRpbmcgYF9faWRgIGFuZCBgX190eXBlbmFtZWAuXG4gKlxuICogTk9URTogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCB0cmVhdCBgaWRgIHNwZWNpYWxseS4gVG8gcHJlc2VydmUgdGhlIGlkLFxuICogbWFudWFsbHkgcmVzZXQgaXQgYWZ0ZXIgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLiBBbHNvIG5vdGUgdGhhdCB2YWx1ZXMgYXJlXG4gKiBjb3BpZWQgYnkgcmVmZXJlbmNlIGFuZCBub3QgdmFsdWU7IGNhbGxlcnMgc2hvdWxkIGVuc3VyZSB0aGF0IHZhbHVlcyBhcmVcbiAqIGNvcGllZCBvbiB3cml0ZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvcHlGaWVsZHMoc291cmNlLCBzaW5rKSB7XG4gIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGlmIChrZXkgIT09IElEX0tFWSAmJiBrZXkgIT09IFRZUEVOQU1FX0tFWSkge1xuICAgICAgICBzaW5rW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIENyZWF0ZSBhIG5ldyByZWNvcmQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGUoZGF0YUlELCB0eXBlTmFtZSkge1xuICAvLyBTZWUgcGVyZiBub3RlIGFib3ZlIGZvciB3aHkgd2UgYXJlbid0IHVzaW5nIGNvbXB1dGVkIHByb3BlcnR5IGFjY2Vzcy5cbiAgdmFyIHJlY29yZCA9IHt9O1xuICByZWNvcmRbSURfS0VZXSA9IGRhdGFJRDtcbiAgcmVjb3JkW1RZUEVOQU1FX0tFWV0gPSB0eXBlTmFtZTtcbiAgcmV0dXJuIHJlY29yZDtcbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIEdldCB0aGUgcmVjb3JkJ3MgYGlkYCBpZiBhdmFpbGFibGUgb3IgdGhlIGNsaWVudC1nZW5lcmF0ZWQgaWRlbnRpZmllci5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldERhdGFJRChyZWNvcmQpIHtcbiAgcmV0dXJuIHJlY29yZFtJRF9LRVldO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogR2V0IHRoZSBjb25jcmV0ZSB0eXBlIG9mIHRoZSByZWNvcmQuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRUeXBlKHJlY29yZCkge1xuICByZXR1cm4gcmVjb3JkW1RZUEVOQU1FX0tFWV07XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBHZXQgYSBzY2FsYXIgKG5vbi1saW5rKSBmaWVsZCB2YWx1ZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFZhbHVlKHJlY29yZCwgc3RvcmFnZUtleSkge1xuICB2YXIgdmFsdWUgPSByZWNvcmRbc3RvcmFnZUtleV07XG5cbiAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAhKCF2YWx1ZS5oYXNPd25Qcm9wZXJ0eShSRUZfS0VZKSAmJiAhdmFsdWUuaGFzT3duUHJvcGVydHkoUkVGU19LRVkpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuUmVjb3JkLmdldFZhbHVlKCk6IEV4cGVjdGVkIGEgc2NhbGFyIChub24tbGluaykgdmFsdWUgZm9yIGAlcy4lc2AgJyArICdidXQgZm91bmQgJXMuJywgcmVjb3JkW0lEX0tFWV0sIHN0b3JhZ2VLZXksIHZhbHVlLmhhc093blByb3BlcnR5KFJFRl9LRVkpID8gJ2EgbGlua2VkIHJlY29yZCcgOiAncGx1cmFsIGxpbmtlZCByZWNvcmRzJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogR2V0IHRoZSB2YWx1ZSBvZiBhIGZpZWxkIGFzIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgcmVjb3JkLiBUaHJvd3MgaWYgdGhlXG4gKiBmaWVsZCBoYXMgYSBkaWZmZXJlbnQgdHlwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldExpbmtlZFJlY29yZElEKHJlY29yZCwgc3RvcmFnZUtleSkge1xuICB2YXIgbGluayA9IHJlY29yZFtzdG9yYWdlS2V5XTtcblxuICBpZiAobGluayA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGxpbms7XG4gIH1cblxuICAhKHR5cGVvZiBsaW5rID09PSAnb2JqZWN0JyAmJiBsaW5rICYmIHR5cGVvZiBsaW5rW1JFRl9LRVldID09PSAnc3RyaW5nJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVyblJlY29yZC5nZXRMaW5rZWRSZWNvcmRJRCgpOiBFeHBlY3RlZCBgJXMuJXNgIHRvIGJlIGEgbGlua2VkIElELCAnICsgJ3dhcyBgJXNgLicsIHJlY29yZFtJRF9LRVldLCBzdG9yYWdlS2V5LCBKU09OLnN0cmluZ2lmeShsaW5rKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gbGlua1tSRUZfS0VZXTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIEdldCB0aGUgdmFsdWUgb2YgYSBmaWVsZCBhcyBhIGxpc3Qgb2YgcmVmZXJlbmNlcyB0byBvdGhlciByZWNvcmRzLiBUaHJvd3MgaWZcbiAqIHRoZSBmaWVsZCBoYXMgYSBkaWZmZXJlbnQgdHlwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldExpbmtlZFJlY29yZElEcyhyZWNvcmQsIHN0b3JhZ2VLZXkpIHtcbiAgdmFyIGxpbmtzID0gcmVjb3JkW3N0b3JhZ2VLZXldO1xuXG4gIGlmIChsaW5rcyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGxpbmtzO1xuICB9XG5cbiAgISh0eXBlb2YgbGlua3MgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkobGlua3NbUkVGU19LRVldKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVyblJlY29yZC5nZXRMaW5rZWRSZWNvcmRJRHMoKTogRXhwZWN0ZWQgYCVzLiVzYCB0byBjb250YWluIGFuIGFycmF5ICcgKyAnb2YgbGlua2VkIElEcywgZ290IGAlc2AuJywgcmVjb3JkW0lEX0tFWV0sIHN0b3JhZ2VLZXksIEpTT04uc3RyaW5naWZ5KGxpbmtzKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyBhc3N1bWUgaXRlbXMgb2YgdGhlIGFycmF5IGFyZSBpZHNcblxuICByZXR1cm4gbGlua3NbUkVGU19LRVldO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogUmV0dXJucyB0aGUgZXBvY2ggYXQgd2hpY2ggdGhlIHJlY29yZCB3YXMgaW52YWxpZGF0ZWQsIGlmIGl0XG4gKiBldmVyIHdhczsgb3RoZXJ3aXNlIHJldHVybnMgbnVsbDtcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEludmFsaWRhdGlvbkVwb2NoKHJlY29yZCkge1xuICBpZiAocmVjb3JkID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBpbnZhbGlkYXRlZEF0ID0gcmVjb3JkW0lOVkFMSURBVEVEX0FUX0tFWV07XG5cbiAgaWYgKHR5cGVvZiBpbnZhbGlkYXRlZEF0ICE9PSAnbnVtYmVyJykge1xuICAgIC8vIElmIHRoZSByZWNvcmQgaGFzIG5ldmVyIGJlZW4gaW52YWxpZGF0ZWQsIGl0IGlzbid0IHN0YWxlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGludmFsaWRhdGVkQXQ7XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBDb21wYXJlcyB0aGUgZmllbGRzIG9mIGEgcHJldmlvdXMgYW5kIG5ldyByZWNvcmQsIHJldHVybmluZyBlaXRoZXIgdGhlXG4gKiBwcmV2aW91cyByZWNvcmQgaWYgYWxsIGZpZWxkcyBhcmUgZXF1YWwgb3IgYSBuZXcgcmVjb3JkICh3aXRoIG1lcmdlZCBmaWVsZHMpXG4gKiBpZiBhbnkgZmllbGRzIGhhdmUgY2hhbmdlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVwZGF0ZShwcmV2UmVjb3JkLCBuZXh0UmVjb3JkKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgX2dldFR5cGUsIF9nZXRUeXBlMjtcblxuICAgIHZhciBwcmV2SUQgPSBnZXREYXRhSUQocHJldlJlY29yZCk7XG4gICAgdmFyIG5leHRJRCA9IGdldERhdGFJRChuZXh0UmVjb3JkKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZJRCA9PT0gbmV4dElELCAnUmVsYXlNb2Rlcm5SZWNvcmQ6IEludmFsaWQgcmVjb3JkIHVwZGF0ZSwgZXhwZWN0ZWQgYm90aCB2ZXJzaW9ucyBvZiAnICsgJ3RoZSByZWNvcmQgdG8gaGF2ZSB0aGUgc2FtZSBpZCwgZ290IGAlc2AgYW5kIGAlc2AuJywgcHJldklELCBuZXh0SUQpIDogdm9pZCAwOyAvLyBub3RlOiBjb2FsZXNjZSBudWxsL3VuZGVmaW5lZCB0byBudWxsXG5cbiAgICB2YXIgcHJldlR5cGUgPSAoX2dldFR5cGUgPSBnZXRUeXBlKHByZXZSZWNvcmQpKSAhPT0gbnVsbCAmJiBfZ2V0VHlwZSAhPT0gdm9pZCAwID8gX2dldFR5cGUgOiBudWxsO1xuICAgIHZhciBuZXh0VHlwZSA9IChfZ2V0VHlwZTIgPSBnZXRUeXBlKG5leHRSZWNvcmQpKSAhPT0gbnVsbCAmJiBfZ2V0VHlwZTIgIT09IHZvaWQgMCA/IF9nZXRUeXBlMiA6IG51bGw7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhpc0NsaWVudElEKG5leHRJRCkgJiYgbmV4dElEICE9PSBST09UX0lEIHx8IHByZXZUeXBlID09PSBuZXh0VHlwZSwgJ1JlbGF5TW9kZXJuUmVjb3JkOiBJbnZhbGlkIHJlY29yZCB1cGRhdGUsIGV4cGVjdGVkIGJvdGggdmVyc2lvbnMgb2YgJyArICdyZWNvcmQgYCVzYCB0byBoYXZlIHRoZSBzYW1lIGAlc2AgYnV0IGdvdCBjb25mbGljdGluZyB0eXBlcyBgJXNgICcgKyAnYW5kIGAlc2AuIFRoZSBHcmFwaFFMIHNlcnZlciBsaWtlbHkgdmlvbGF0ZWQgdGhlIGdsb2JhbGx5IHVuaXF1ZSAnICsgJ2lkIHJlcXVpcmVtZW50IGJ5IHJldHVybmluZyB0aGUgc2FtZSBpZCBmb3IgZGlmZmVyZW50IG9iamVjdHMuJywgcHJldklELCBUWVBFTkFNRV9LRVksIHByZXZUeXBlLCBuZXh0VHlwZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgdXBkYXRlZCA9IG51bGw7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMobmV4dFJlY29yZCk7XG5cbiAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGtleXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaWldO1xuXG4gICAgaWYgKHVwZGF0ZWQgfHwgIWFyZUVxdWFsKHByZXZSZWNvcmRba2V5XSwgbmV4dFJlY29yZFtrZXldKSkge1xuICAgICAgdXBkYXRlZCA9IHVwZGF0ZWQgIT09IG51bGwgPyB1cGRhdGVkIDogKDAsIF9vYmplY3RTcHJlYWQyW1wiZGVmYXVsdFwiXSkoe30sIHByZXZSZWNvcmQpO1xuICAgICAgdXBkYXRlZFtrZXldID0gbmV4dFJlY29yZFtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1cGRhdGVkICE9PSBudWxsID8gdXBkYXRlZCA6IHByZXZSZWNvcmQ7XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBSZXR1cm5zIGEgbmV3IHJlY29yZCB3aXRoIHRoZSBjb250ZW50cyBvZiB0aGUgZ2l2ZW4gcmVjb3Jkcy4gRmllbGRzIGluIHRoZVxuICogc2Vjb25kIHJlY29yZCB3aWxsIG92ZXJ3cml0ZSBpZGVudGljYWwgZmllbGRzIGluIHRoZSBmaXJzdCByZWNvcmQuXG4gKi9cblxuXG5mdW5jdGlvbiBtZXJnZShyZWNvcmQxLCByZWNvcmQyKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgX2dldFR5cGUzLCBfZ2V0VHlwZTQ7XG5cbiAgICB2YXIgcHJldklEID0gZ2V0RGF0YUlEKHJlY29yZDEpO1xuICAgIHZhciBuZXh0SUQgPSBnZXREYXRhSUQocmVjb3JkMik7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcmV2SUQgPT09IG5leHRJRCwgJ1JlbGF5TW9kZXJuUmVjb3JkOiBJbnZhbGlkIHJlY29yZCBtZXJnZSwgZXhwZWN0ZWQgYm90aCB2ZXJzaW9ucyBvZiAnICsgJ3RoZSByZWNvcmQgdG8gaGF2ZSB0aGUgc2FtZSBpZCwgZ290IGAlc2AgYW5kIGAlc2AuJywgcHJldklELCBuZXh0SUQpIDogdm9pZCAwOyAvLyBub3RlOiBjb2FsZXNjZSBudWxsL3VuZGVmaW5lZCB0byBudWxsXG5cbiAgICB2YXIgcHJldlR5cGUgPSAoX2dldFR5cGUzID0gZ2V0VHlwZShyZWNvcmQxKSkgIT09IG51bGwgJiYgX2dldFR5cGUzICE9PSB2b2lkIDAgPyBfZ2V0VHlwZTMgOiBudWxsO1xuICAgIHZhciBuZXh0VHlwZSA9IChfZ2V0VHlwZTQgPSBnZXRUeXBlKHJlY29yZDIpKSAhPT0gbnVsbCAmJiBfZ2V0VHlwZTQgIT09IHZvaWQgMCA/IF9nZXRUeXBlNCA6IG51bGw7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhpc0NsaWVudElEKG5leHRJRCkgJiYgbmV4dElEICE9PSBST09UX0lEIHx8IHByZXZUeXBlID09PSBuZXh0VHlwZSwgJ1JlbGF5TW9kZXJuUmVjb3JkOiBJbnZhbGlkIHJlY29yZCBtZXJnZSwgZXhwZWN0ZWQgYm90aCB2ZXJzaW9ucyBvZiAnICsgJ3JlY29yZCBgJXNgIHRvIGhhdmUgdGhlIHNhbWUgYCVzYCBidXQgZ290IGNvbmZsaWN0aW5nIHR5cGVzIGAlc2AgJyArICdhbmQgYCVzYC4gVGhlIEdyYXBoUUwgc2VydmVyIGxpa2VseSB2aW9sYXRlZCB0aGUgZ2xvYmFsbHkgdW5pcXVlICcgKyAnaWQgcmVxdWlyZW1lbnQgYnkgcmV0dXJuaW5nIHRoZSBzYW1lIGlkIGZvciBkaWZmZXJlbnQgb2JqZWN0cy4nLCBwcmV2SUQsIFRZUEVOQU1FX0tFWSwgcHJldlR5cGUsIG5leHRUeXBlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZWNvcmQxLCByZWNvcmQyKTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIFByZXZlbnQgbW9kaWZpY2F0aW9ucyB0byB0aGUgcmVjb3JkLiBBdHRlbXB0cyB0byBjYWxsIGBzZXQqYCBmdW5jdGlvbnMgb24gYVxuICogZnJvemVuIHJlY29yZCB3aWxsIGZhdGFsIGF0IHJ1bnRpbWUuXG4gKi9cblxuXG5mdW5jdGlvbiBmcmVlemUocmVjb3JkKSB7XG4gIGRlZXBGcmVlemUocmVjb3JkKTtcbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIFNldCB0aGUgdmFsdWUgb2YgYSBzdG9yYWdlS2V5IHRvIGEgc2NhbGFyLlxuICovXG5cblxuZnVuY3Rpb24gc2V0VmFsdWUocmVjb3JkLCBzdG9yYWdlS2V5LCB2YWx1ZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFyIHByZXZJRCA9IGdldERhdGFJRChyZWNvcmQpO1xuXG4gICAgaWYgKHN0b3JhZ2VLZXkgPT09IElEX0tFWSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcmV2SUQgPT09IHZhbHVlLCAnUmVsYXlNb2Rlcm5SZWNvcmQ6IEludmFsaWQgZmllbGQgdXBkYXRlLCBleHBlY3RlZCBib3RoIHZlcnNpb25zIG9mICcgKyAndGhlIHJlY29yZCB0byBoYXZlIHRoZSBzYW1lIGlkLCBnb3QgYCVzYCBhbmQgYCVzYC4nLCBwcmV2SUQsIHZhbHVlKSA6IHZvaWQgMDtcbiAgICB9IGVsc2UgaWYgKHN0b3JhZ2VLZXkgPT09IFRZUEVOQU1FX0tFWSkge1xuICAgICAgdmFyIF9nZXRUeXBlNTtcblxuICAgICAgLy8gbm90ZTogY29hbGVzY2UgbnVsbC91bmRlZmluZWQgdG8gbnVsbFxuICAgICAgdmFyIHByZXZUeXBlID0gKF9nZXRUeXBlNSA9IGdldFR5cGUocmVjb3JkKSkgIT09IG51bGwgJiYgX2dldFR5cGU1ICE9PSB2b2lkIDAgPyBfZ2V0VHlwZTUgOiBudWxsO1xuICAgICAgdmFyIG5leHRUeXBlID0gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCA/IHZhbHVlIDogbnVsbDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoaXNDbGllbnRJRChnZXREYXRhSUQocmVjb3JkKSkgJiYgZ2V0RGF0YUlEKHJlY29yZCkgIT09IFJPT1RfSUQgfHwgcHJldlR5cGUgPT09IG5leHRUeXBlLCAnUmVsYXlNb2Rlcm5SZWNvcmQ6IEludmFsaWQgZmllbGQgdXBkYXRlLCBleHBlY3RlZCBib3RoIHZlcnNpb25zIG9mICcgKyAncmVjb3JkIGAlc2AgdG8gaGF2ZSB0aGUgc2FtZSBgJXNgIGJ1dCBnb3QgY29uZmxpY3RpbmcgdHlwZXMgYCVzYCAnICsgJ2FuZCBgJXNgLiBUaGUgR3JhcGhRTCBzZXJ2ZXIgbGlrZWx5IHZpb2xhdGVkIHRoZSBnbG9iYWxseSB1bmlxdWUgJyArICdpZCByZXF1aXJlbWVudCBieSByZXR1cm5pbmcgdGhlIHNhbWUgaWQgZm9yIGRpZmZlcmVudCBvYmplY3RzLicsIHByZXZJRCwgVFlQRU5BTUVfS0VZLCBwcmV2VHlwZSwgbmV4dFR5cGUpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIHJlY29yZFtzdG9yYWdlS2V5XSA9IHZhbHVlO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogU2V0IHRoZSB2YWx1ZSBvZiBhIGZpZWxkIHRvIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgcmVjb3JkLlxuICovXG5cblxuZnVuY3Rpb24gc2V0TGlua2VkUmVjb3JkSUQocmVjb3JkLCBzdG9yYWdlS2V5LCBsaW5rZWRJRCkge1xuICAvLyBTZWUgcGVyZiBub3RlIGFib3ZlIGZvciB3aHkgd2UgYXJlbid0IHVzaW5nIGNvbXB1dGVkIHByb3BlcnR5IGFjY2Vzcy5cbiAgdmFyIGxpbmsgPSB7fTtcbiAgbGlua1tSRUZfS0VZXSA9IGxpbmtlZElEO1xuICByZWNvcmRbc3RvcmFnZUtleV0gPSBsaW5rO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogU2V0IHRoZSB2YWx1ZSBvZiBhIGZpZWxkIHRvIGEgbGlzdCBvZiByZWZlcmVuY2VzIG90aGVyIHJlY29yZHMuXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRMaW5rZWRSZWNvcmRJRHMocmVjb3JkLCBzdG9yYWdlS2V5LCBsaW5rZWRJRHMpIHtcbiAgLy8gU2VlIHBlcmYgbm90ZSBhYm92ZSBmb3Igd2h5IHdlIGFyZW4ndCB1c2luZyBjb21wdXRlZCBwcm9wZXJ0eSBhY2Nlc3MuXG4gIHZhciBsaW5rcyA9IHt9O1xuICBsaW5rc1tSRUZTX0tFWV0gPSBsaW5rZWRJRHM7XG4gIHJlY29yZFtzdG9yYWdlS2V5XSA9IGxpbmtzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2xvbmU6IGNsb25lLFxuICBjb3B5RmllbGRzOiBjb3B5RmllbGRzLFxuICBjcmVhdGU6IGNyZWF0ZSxcbiAgZnJlZXplOiBmcmVlemUsXG4gIGdldERhdGFJRDogZ2V0RGF0YUlELFxuICBnZXRJbnZhbGlkYXRpb25FcG9jaDogZ2V0SW52YWxpZGF0aW9uRXBvY2gsXG4gIGdldExpbmtlZFJlY29yZElEOiBnZXRMaW5rZWRSZWNvcmRJRCxcbiAgZ2V0TGlua2VkUmVjb3JkSURzOiBnZXRMaW5rZWRSZWNvcmRJRHMsXG4gIGdldFR5cGU6IGdldFR5cGUsXG4gIGdldFZhbHVlOiBnZXRWYWx1ZSxcbiAgbWVyZ2U6IG1lcmdlLFxuICBzZXRWYWx1ZTogc2V0VmFsdWUsXG4gIHNldExpbmtlZFJlY29yZElEOiBzZXRMaW5rZWRSZWNvcmRJRCxcbiAgc2V0TGlua2VkUmVjb3JkSURzOiBzZXRMaW5rZWRSZWNvcmRJRHMsXG4gIHVwZGF0ZTogdXBkYXRlXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXJlRXF1YWwgPSByZXF1aXJlKFwiZmJqcy9saWIvYXJlRXF1YWxcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9SZWxheUNvbmNyZXRlVmFyaWFibGVzJyksXG4gICAgZ2V0RnJhZ21lbnRWYXJpYWJsZXMgPSBfcmVxdWlyZS5nZXRGcmFnbWVudFZhcmlhYmxlcztcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vUmVsYXlTdG9yZVV0aWxzJyksXG4gICAgRlJBR01FTlRfT1dORVJfS0VZID0gX3JlcXVpcmUyLkZSQUdNRU5UX09XTkVSX0tFWSxcbiAgICBGUkFHTUVOVFNfS0VZID0gX3JlcXVpcmUyLkZSQUdNRU5UU19LRVksXG4gICAgSURfS0VZID0gX3JlcXVpcmUyLklEX0tFWSxcbiAgICBJU19XSVRISU5fVU5NQVRDSEVEX1RZUEVfUkVGSU5FTUVOVCA9IF9yZXF1aXJlMi5JU19XSVRISU5fVU5NQVRDSEVEX1RZUEVfUkVGSU5FTUVOVDtcblxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogR2l2ZW4gdGhlIHJlc3VsdCBgaXRlbWAgZnJvbSBhIHBhcmVudCB0aGF0IGZldGNoZWQgYGZyYWdtZW50YCwgY3JlYXRlcyBhXG4gKiBzZWxlY3RvciB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlYWQgdGhlIHJlc3VsdHMgb2YgdGhhdCBmcmFnbWVudCBmb3IgdGhhdCBpdGVtLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogR2l2ZW4gdHdvIGZyYWdtZW50cyBhcyBmb2xsb3dzOlxuICpcbiAqIGBgYFxuICogZnJhZ21lbnQgUGFyZW50IG9uIFVzZXIge1xuICogICBpZFxuICogICAuLi5DaGlsZFxuICogfVxuICogZnJhZ21lbnQgQ2hpbGQgb24gVXNlciB7XG4gKiAgIG5hbWVcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEFuZCBnaXZlbiBzb21lIG9iamVjdCBgcGFyZW50YCB0aGF0IGlzIHRoZSByZXN1bHRzIG9mIGBQYXJlbnRgIGZvciBpZCBcIjRcIixcbiAqIHRoZSByZXN1bHRzIG9mIGBDaGlsZGAgY2FuIGJlIGFjY2Vzc2VkIGJ5IGZpcnN0IGdldHRpbmcgYSBzZWxlY3RvciBhbmQgdGhlblxuICogdXNpbmcgdGhhdCBzZWxlY3RvciB0byBgbG9va3VwKClgIHRoZSByZXN1bHRzIGFnYWluc3QgdGhlIGVudmlyb25tZW50OlxuICpcbiAqIGBgYFxuICogY29uc3QgY2hpbGRTZWxlY3RvciA9IGdldFNpbmd1bGFyU2VsZWN0b3IocXVlcnlWYXJpYWJsZXMsIENoaWxkLCBwYXJlbnQpO1xuICogY29uc3QgY2hpbGREYXRhID0gZW52aXJvbm1lbnQubG9va3VwKGNoaWxkU2VsZWN0b3IpLmRhdGE7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gZ2V0U2luZ3VsYXJTZWxlY3RvcihmcmFnbWVudCwgaXRlbSkge1xuICAhKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KGl0ZW0pKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuU2VsZWN0b3I6IEV4cGVjdGVkIHZhbHVlIGZvciBmcmFnbWVudCBgJXNgIHRvIGJlIGFuIG9iamVjdCwgZ290ICcgKyAnYCVzYC4nLCBmcmFnbWVudC5uYW1lLCBKU09OLnN0cmluZ2lmeShpdGVtKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZGF0YUlEID0gaXRlbVtJRF9LRVldO1xuICB2YXIgZnJhZ21lbnRzID0gaXRlbVtGUkFHTUVOVFNfS0VZXTtcbiAgdmFyIG1peGVkT3duZXIgPSBpdGVtW0ZSQUdNRU5UX09XTkVSX0tFWV07XG4gIHZhciBpc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50ID0gaXRlbVtJU19XSVRISU5fVU5NQVRDSEVEX1RZUEVfUkVGSU5FTUVOVF0gPT09IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBkYXRhSUQgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBmcmFnbWVudHMgPT09ICdvYmplY3QnICYmIGZyYWdtZW50cyAhPT0gbnVsbCAmJiB0eXBlb2YgZnJhZ21lbnRzW2ZyYWdtZW50Lm5hbWVdID09PSAnb2JqZWN0JyAmJiBmcmFnbWVudHNbZnJhZ21lbnQubmFtZV0gIT09IG51bGwgJiYgdHlwZW9mIG1peGVkT3duZXIgPT09ICdvYmplY3QnICYmIG1peGVkT3duZXIgIT09IG51bGwpIHtcbiAgICB2YXIgb3duZXIgPSBtaXhlZE93bmVyO1xuICAgIHZhciBhcmd1bWVudFZhcmlhYmxlcyA9IGZyYWdtZW50c1tmcmFnbWVudC5uYW1lXTtcbiAgICB2YXIgZnJhZ21lbnRWYXJpYWJsZXMgPSBnZXRGcmFnbWVudFZhcmlhYmxlcyhmcmFnbWVudCwgb3duZXIudmFyaWFibGVzLCBhcmd1bWVudFZhcmlhYmxlcyk7XG4gICAgcmV0dXJuIGNyZWF0ZVJlYWRlclNlbGVjdG9yKGZyYWdtZW50LCBkYXRhSUQsIGZyYWdtZW50VmFyaWFibGVzLCBvd25lciwgaXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudCk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFyIHN0cmluZ2lmaWVkSXRlbSA9IEpTT04uc3RyaW5naWZ5KGl0ZW0pO1xuXG4gICAgaWYgKHN0cmluZ2lmaWVkSXRlbS5sZW5ndGggPiA0OTkpIHtcbiAgICAgIHN0cmluZ2lmaWVkSXRlbSA9IHN0cmluZ2lmaWVkSXRlbS5zdWJzdHIoMCwgNDk4KSArIFwiXFx1MjAyNlwiO1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdSZWxheU1vZGVyblNlbGVjdG9yOiBFeHBlY3RlZCBvYmplY3QgdG8gY29udGFpbiBkYXRhIGZvciBmcmFnbWVudCBgJXNgLCBnb3QgJyArICdgJXNgLiBNYWtlIHN1cmUgdGhhdCB0aGUgcGFyZW50IG9wZXJhdGlvbi9mcmFnbWVudCBpbmNsdWRlZCBmcmFnbWVudCAnICsgJ2AuLi4lc2Agd2l0aG91dCBgQHJlbGF5KG1hc2s6IGZhbHNlKWAuJywgZnJhZ21lbnQubmFtZSwgc3RyaW5naWZpZWRJdGVtLCBmcmFnbWVudC5uYW1lKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogR2l2ZW4gdGhlIHJlc3VsdCBgaXRlbXNgIGZyb20gYSBwYXJlbnQgdGhhdCBmZXRjaGVkIGBmcmFnbWVudGAsIGNyZWF0ZXMgYVxuICogc2VsZWN0b3IgdGhhdCBjYW4gYmUgdXNlZCB0byByZWFkIHRoZSByZXN1bHRzIG9mIHRoYXQgZnJhZ21lbnQgb24gdGhvc2VcbiAqIGl0ZW1zLiBUaGlzIGlzIHNpbWlsYXIgdG8gYGdldFNpbmd1bGFyU2VsZWN0b3JgIGJ1dCBmb3IgXCJwbHVyYWxcIiBmcmFnbWVudHMgdGhhdFxuICogZXhwZWN0IGFuIGFycmF5IG9mIHJlc3VsdHMgYW5kIHRoZXJlZm9yZSByZXR1cm4gYW4gYXJyYXkgb2Ygc2VsZWN0b3JzLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0UGx1cmFsU2VsZWN0b3IoZnJhZ21lbnQsIGl0ZW1zKSB7XG4gIHZhciBzZWxlY3RvcnMgPSBudWxsO1xuICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpaSkge1xuICAgIHZhciBzZWxlY3RvciA9IGl0ZW0gIT0gbnVsbCA/IGdldFNpbmd1bGFyU2VsZWN0b3IoZnJhZ21lbnQsIGl0ZW0pIDogbnVsbDtcblxuICAgIGlmIChzZWxlY3RvciAhPSBudWxsKSB7XG4gICAgICBzZWxlY3RvcnMgPSBzZWxlY3RvcnMgfHwgW107XG4gICAgICBzZWxlY3RvcnMucHVzaChzZWxlY3Rvcik7XG4gICAgfVxuICB9KTtcblxuICBpZiAoc2VsZWN0b3JzID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogJ1BsdXJhbFJlYWRlclNlbGVjdG9yJyxcbiAgICAgIHNlbGVjdG9yczogc2VsZWN0b3JzXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTZWxlY3RvcihmcmFnbWVudCwgaXRlbSkge1xuICBpZiAoaXRlbSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH0gZWxzZSBpZiAoZnJhZ21lbnQubWV0YWRhdGEgJiYgZnJhZ21lbnQubWV0YWRhdGEucGx1cmFsID09PSB0cnVlKSB7XG4gICAgIUFycmF5LmlzQXJyYXkoaXRlbSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVyblNlbGVjdG9yOiBFeHBlY3RlZCB2YWx1ZSBmb3IgZnJhZ21lbnQgYCVzYCB0byBiZSBhbiBhcnJheSwgZ290IGAlc2AuICcgKyAnUmVtb3ZlIGBAcmVsYXkocGx1cmFsOiB0cnVlKWAgZnJvbSBmcmFnbWVudCBgJXNgIHRvIGFsbG93IHRoZSBwcm9wIHRvIGJlIGFuIG9iamVjdC4nLCBmcmFnbWVudC5uYW1lLCBKU09OLnN0cmluZ2lmeShpdGVtKSwgZnJhZ21lbnQubmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBnZXRQbHVyYWxTZWxlY3RvcihmcmFnbWVudCwgaXRlbSk7XG4gIH0gZWxzZSB7XG4gICAgISFBcnJheS5pc0FycmF5KGl0ZW0pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5TZWxlY3RvcjogRXhwZWN0ZWQgdmFsdWUgZm9yIGZyYWdtZW50IGAlc2AgdG8gYmUgYW4gb2JqZWN0LCBnb3QgYCVzYC4gJyArICdBZGQgYEByZWxheShwbHVyYWw6IHRydWUpYCB0byBmcmFnbWVudCBgJXNgIHRvIGFsbG93IHRoZSBwcm9wIHRvIGJlIGFuIGFycmF5IG9mIGl0ZW1zLicsIGZyYWdtZW50Lm5hbWUsIEpTT04uc3RyaW5naWZ5KGl0ZW0pLCBmcmFnbWVudC5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGdldFNpbmd1bGFyU2VsZWN0b3IoZnJhZ21lbnQsIGl0ZW0pO1xuICB9XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBHaXZlbiBhIG1hcHBpbmcgb2Yga2V5cyAtPiByZXN1bHRzIGFuZCBhIG1hcHBpbmcgb2Yga2V5cyAtPiBmcmFnbWVudHMsXG4gKiBleHRyYWN0cyB0aGUgc2VsZWN0b3JzIGZvciB0aG9zZSBmcmFnbWVudHMgZnJvbSB0aGUgcmVzdWx0cy5cbiAqXG4gKiBUaGUgY2Fub25pY2FsIHVzZS1jYXNlIGZvciB0aGlzIGZ1bmN0aW9uIGlzIFJlYWN0UmVsYXlGcmFnbWVudENvbnRhaW5lciwgd2hpY2hcbiAqIHVzZXMgdGhpcyBmdW5jdGlvbiB0byBjb252ZXJ0IChwcm9wcywgZnJhZ21lbnRzKSBpbnRvIHNlbGVjdG9ycyBzbyB0aGF0IGl0XG4gKiBjYW4gcmVhZCB0aGUgcmVzdWx0cyB0byBwYXNzIHRvIHRoZSBpbm5lciBjb21wb25lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRTZWxlY3RvcnNGcm9tT2JqZWN0KGZyYWdtZW50cywgb2JqZWN0KSB7XG4gIHZhciBzZWxlY3RvcnMgPSB7fTtcblxuICBmb3IgKHZhciBfa2V5IGluIGZyYWdtZW50cykge1xuICAgIGlmIChmcmFnbWVudHMuaGFzT3duUHJvcGVydHkoX2tleSkpIHtcbiAgICAgIHZhciBmcmFnbWVudCA9IGZyYWdtZW50c1tfa2V5XTtcbiAgICAgIHZhciBpdGVtID0gb2JqZWN0W19rZXldO1xuICAgICAgc2VsZWN0b3JzW19rZXldID0gZ2V0U2VsZWN0b3IoZnJhZ21lbnQsIGl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzZWxlY3RvcnM7XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBHaXZlbiBhIG1hcHBpbmcgb2Yga2V5cyAtPiByZXN1bHRzIGFuZCBhIG1hcHBpbmcgb2Yga2V5cyAtPiBmcmFnbWVudHMsXG4gKiBleHRyYWN0cyBhIG1hcHBpbmcgb2Yga2V5cyAtPiBpZChzKSBvZiB0aGUgcmVzdWx0cy5cbiAqXG4gKiBTaW1pbGFyIHRvIGBnZXRTZWxlY3RvcnNGcm9tT2JqZWN0KClgLCB0aGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VmdWwgaW5cbiAqIGRldGVybWluaW5nIHRoZSBcImlkZW50aXR5XCIgb2YgdGhlIHByb3BzIHBhc3NlZCB0byBhIGNvbXBvbmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldERhdGFJRHNGcm9tT2JqZWN0KGZyYWdtZW50cywgb2JqZWN0KSB7XG4gIHZhciBpZHMgPSB7fTtcblxuICBmb3IgKHZhciBfa2V5MiBpbiBmcmFnbWVudHMpIHtcbiAgICBpZiAoZnJhZ21lbnRzLmhhc093blByb3BlcnR5KF9rZXkyKSkge1xuICAgICAgdmFyIGZyYWdtZW50ID0gZnJhZ21lbnRzW19rZXkyXTtcbiAgICAgIHZhciBpdGVtID0gb2JqZWN0W19rZXkyXTtcbiAgICAgIGlkc1tfa2V5Ml0gPSBnZXREYXRhSURzRnJvbUZyYWdtZW50KGZyYWdtZW50LCBpdGVtKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaWRzO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhSURzRnJvbUZyYWdtZW50KGZyYWdtZW50LCBpdGVtKSB7XG4gIGlmIChpdGVtID09IG51bGwpIHtcbiAgICByZXR1cm4gaXRlbTtcbiAgfSBlbHNlIGlmIChmcmFnbWVudC5tZXRhZGF0YSAmJiBmcmFnbWVudC5tZXRhZGF0YS5wbHVyYWwgPT09IHRydWUpIHtcbiAgICAhQXJyYXkuaXNBcnJheShpdGVtKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuU2VsZWN0b3I6IEV4cGVjdGVkIHZhbHVlIGZvciBmcmFnbWVudCBgJXNgIHRvIGJlIGFuIGFycmF5LCBnb3QgYCVzYC4gJyArICdSZW1vdmUgYEByZWxheShwbHVyYWw6IHRydWUpYCBmcm9tIGZyYWdtZW50IGAlc2AgdG8gYWxsb3cgdGhlIHByb3AgdG8gYmUgYW4gb2JqZWN0LicsIGZyYWdtZW50Lm5hbWUsIEpTT04uc3RyaW5naWZ5KGl0ZW0pLCBmcmFnbWVudC5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGdldERhdGFJRHMoZnJhZ21lbnQsIGl0ZW0pO1xuICB9IGVsc2Uge1xuICAgICEhQXJyYXkuaXNBcnJheShpdGVtKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuRnJhZ21lbnRTcGVjUmVzb2x2ZXI6IEV4cGVjdGVkIHZhbHVlIGZvciBmcmFnbWVudCBgJXNgIHRvIGJlIGFuIG9iamVjdCwgZ290IGAlc2AuICcgKyAnQWRkIGBAcmVsYXkocGx1cmFsOiB0cnVlKWAgdG8gZnJhZ21lbnQgYCVzYCB0byBhbGxvdyB0aGUgcHJvcCB0byBiZSBhbiBhcnJheSBvZiBpdGVtcy4nLCBmcmFnbWVudC5uYW1lLCBKU09OLnN0cmluZ2lmeShpdGVtKSwgZnJhZ21lbnQubmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBnZXREYXRhSUQoZnJhZ21lbnQsIGl0ZW0pO1xuICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cblxuZnVuY3Rpb24gZ2V0RGF0YUlEcyhmcmFnbWVudCwgaXRlbXMpIHtcbiAgdmFyIGlkcyA9IG51bGw7XG4gIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgaWQgPSBpdGVtICE9IG51bGwgPyBnZXREYXRhSUQoZnJhZ21lbnQsIGl0ZW0pIDogbnVsbDtcblxuICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICBpZHMgPSBpZHMgfHwgW107XG4gICAgICBpZHMucHVzaChpZCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGlkcztcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cblxuXG5mdW5jdGlvbiBnZXREYXRhSUQoZnJhZ21lbnQsIGl0ZW0pIHtcbiAgISh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheShpdGVtKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVyblNlbGVjdG9yOiBFeHBlY3RlZCB2YWx1ZSBmb3IgZnJhZ21lbnQgYCVzYCB0byBiZSBhbiBvYmplY3QsIGdvdCAnICsgJ2Alc2AuJywgZnJhZ21lbnQubmFtZSwgSlNPTi5zdHJpbmdpZnkoaXRlbSkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGRhdGFJRCA9IGl0ZW1bSURfS0VZXTtcblxuICBpZiAodHlwZW9mIGRhdGFJRCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZGF0YUlEO1xuICB9XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5TW9kZXJuU2VsZWN0b3I6IEV4cGVjdGVkIG9iamVjdCB0byBjb250YWluIGRhdGEgZm9yIGZyYWdtZW50IGAlc2AsIGdvdCAnICsgJ2Alc2AuIE1ha2Ugc3VyZSB0aGF0IHRoZSBwYXJlbnQgb3BlcmF0aW9uL2ZyYWdtZW50IGluY2x1ZGVkIGZyYWdtZW50ICcgKyAnYC4uLiVzYCB3aXRob3V0IGBAcmVsYXkobWFzazogZmFsc2UpYCwgb3IgYG51bGxgIGlzIHBhc3NlZCBhcyB0aGUgZnJhZ21lbnQgJyArIFwicmVmZXJlbmNlIGZvciBgJXNgIGlmIGl0J3MgY29uZGl0b25hbGx5IGluY2x1ZGVkIGFuZCB0aGUgY29uZGl0aW9uIGlzbid0IG1ldC5cIiwgZnJhZ21lbnQubmFtZSwgSlNPTi5zdHJpbmdpZnkoaXRlbSksIGZyYWdtZW50Lm5hbWUsIGZyYWdtZW50Lm5hbWUpIDogdm9pZCAwO1xuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogQHB1YmxpY1xuICpcbiAqIEdpdmVuIGEgbWFwcGluZyBvZiBrZXlzIC0+IHJlc3VsdHMgYW5kIGEgbWFwcGluZyBvZiBrZXlzIC0+IGZyYWdtZW50cyxcbiAqIGV4dHJhY3RzIHRoZSBtZXJnZWQgdmFyaWFibGVzIHRoYXQgd291bGQgYmUgaW4gc2NvcGUgZm9yIHRob3NlXG4gKiBmcmFnbWVudHMvcmVzdWx0cy5cbiAqXG4gKiBUaGlzIGNhbiBiZSB1c2VmdWwgaW4gZGV0ZXJtaW5nIHdoYXQgdmFyYWlibGVzIHdlcmUgdXNlZCB0byBmZXRjaCB0aGUgZGF0YVxuICogZm9yIGEgUmVsYXkgY29udGFpbmVyLCBmb3IgZXhhbXBsZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFZhcmlhYmxlc0Zyb21PYmplY3QoZnJhZ21lbnRzLCBvYmplY3QpIHtcbiAgdmFyIHZhcmlhYmxlcyA9IHt9O1xuXG4gIGZvciAodmFyIF9rZXkzIGluIGZyYWdtZW50cykge1xuICAgIGlmIChmcmFnbWVudHMuaGFzT3duUHJvcGVydHkoX2tleTMpKSB7XG4gICAgICB2YXIgZnJhZ21lbnQgPSBmcmFnbWVudHNbX2tleTNdO1xuICAgICAgdmFyIGl0ZW0gPSBvYmplY3RbX2tleTNdO1xuICAgICAgdmFyIGl0ZW1WYXJpYWJsZXMgPSBnZXRWYXJpYWJsZXNGcm9tRnJhZ21lbnQoZnJhZ21lbnQsIGl0ZW0pO1xuICAgICAgT2JqZWN0LmFzc2lnbih2YXJpYWJsZXMsIGl0ZW1WYXJpYWJsZXMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YXJpYWJsZXM7XG59XG5cbmZ1bmN0aW9uIGdldFZhcmlhYmxlc0Zyb21GcmFnbWVudChmcmFnbWVudCwgaXRlbSkge1xuICB2YXIgX2ZyYWdtZW50JG1ldGFkYXRhO1xuXG4gIGlmIChpdGVtID09IG51bGwpIHtcbiAgICByZXR1cm4ge307XG4gIH0gZWxzZSBpZiAoKChfZnJhZ21lbnQkbWV0YWRhdGEgPSBmcmFnbWVudC5tZXRhZGF0YSkgPT09IG51bGwgfHwgX2ZyYWdtZW50JG1ldGFkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZnJhZ21lbnQkbWV0YWRhdGEucGx1cmFsKSA9PT0gdHJ1ZSkge1xuICAgICFBcnJheS5pc0FycmF5KGl0ZW0pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5TZWxlY3RvcjogRXhwZWN0ZWQgdmFsdWUgZm9yIGZyYWdtZW50IGAlc2AgdG8gYmUgYW4gYXJyYXksIGdvdCBgJXNgLiAnICsgJ1JlbW92ZSBgQHJlbGF5KHBsdXJhbDogdHJ1ZSlgIGZyb20gZnJhZ21lbnQgYCVzYCB0byBhbGxvdyB0aGUgcHJvcCB0byBiZSBhbiBvYmplY3QuJywgZnJhZ21lbnQubmFtZSwgSlNPTi5zdHJpbmdpZnkoaXRlbSksIGZyYWdtZW50Lm5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZ2V0VmFyaWFibGVzRnJvbVBsdXJhbEZyYWdtZW50KGZyYWdtZW50LCBpdGVtKTtcbiAgfSBlbHNlIHtcbiAgICAhIUFycmF5LmlzQXJyYXkoaXRlbSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkZyYWdtZW50U3BlY1Jlc29sdmVyOiBFeHBlY3RlZCB2YWx1ZSBmb3IgZnJhZ21lbnQgYCVzYCB0byBiZSBhbiBvYmplY3QsIGdvdCBgJXNgLiAnICsgJ0FkZCBgQHJlbGF5KHBsdXJhbDogdHJ1ZSlgIHRvIGZyYWdtZW50IGAlc2AgdG8gYWxsb3cgdGhlIHByb3AgdG8gYmUgYW4gYXJyYXkgb2YgaXRlbXMuJywgZnJhZ21lbnQubmFtZSwgSlNPTi5zdHJpbmdpZnkoaXRlbSksIGZyYWdtZW50Lm5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZ2V0VmFyaWFibGVzRnJvbVNpbmd1bGFyRnJhZ21lbnQoZnJhZ21lbnQsIGl0ZW0pIHx8IHt9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFZhcmlhYmxlc0Zyb21TaW5ndWxhckZyYWdtZW50KGZyYWdtZW50LCBpdGVtKSB7XG4gIHZhciBzZWxlY3RvciA9IGdldFNpbmd1bGFyU2VsZWN0b3IoZnJhZ21lbnQsIGl0ZW0pO1xuXG4gIGlmICghc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBzZWxlY3Rvci52YXJpYWJsZXM7XG59XG5cbmZ1bmN0aW9uIGdldFZhcmlhYmxlc0Zyb21QbHVyYWxGcmFnbWVudChmcmFnbWVudCwgaXRlbXMpIHtcbiAgdmFyIHZhcmlhYmxlcyA9IHt9O1xuICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaWkpIHtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgdmFyIGl0ZW1WYXJpYWJsZXMgPSBnZXRWYXJpYWJsZXNGcm9tU2luZ3VsYXJGcmFnbWVudChmcmFnbWVudCwgdmFsdWUpO1xuXG4gICAgICBpZiAoaXRlbVZhcmlhYmxlcyAhPSBudWxsKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odmFyaWFibGVzLCBpdGVtVmFyaWFibGVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdmFyaWFibGVzO1xufVxuLyoqXG4gKiBAcHVibGljXG4gKlxuICogRGV0ZXJtaW5lIGlmIHR3byBzZWxlY3RvcnMgYXJlIGVxdWFsIChyZXByZXNlbnQgdGhlIHNhbWUgc2VsZWN0aW9uKS4gTm90ZVxuICogdGhhdCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYGZhbHNlYCB3aGVuIHRoZSB0d28gcXVlcmllcy9mcmFnbWVudHMgYXJlXG4gKiBkaWZmZXJlbnQgb2JqZWN0cywgZXZlbiBpZiB0aGV5IHNlbGVjdCB0aGUgc2FtZSBmaWVsZHMuXG4gKi9cblxuXG5mdW5jdGlvbiBhcmVFcXVhbFNlbGVjdG9ycyh0aGlzU2VsZWN0b3IsIHRoYXRTZWxlY3Rvcikge1xuICByZXR1cm4gdGhpc1NlbGVjdG9yLm93bmVyID09PSB0aGF0U2VsZWN0b3Iub3duZXIgJiYgdGhpc1NlbGVjdG9yLmRhdGFJRCA9PT0gdGhhdFNlbGVjdG9yLmRhdGFJRCAmJiB0aGlzU2VsZWN0b3Iubm9kZSA9PT0gdGhhdFNlbGVjdG9yLm5vZGUgJiYgYXJlRXF1YWwodGhpc1NlbGVjdG9yLnZhcmlhYmxlcywgdGhhdFNlbGVjdG9yLnZhcmlhYmxlcyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWRlclNlbGVjdG9yKGZyYWdtZW50LCBkYXRhSUQsIHZhcmlhYmxlcywgcmVxdWVzdCkge1xuICB2YXIgaXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7XG4gIHJldHVybiB7XG4gICAga2luZDogJ1Npbmd1bGFyUmVhZGVyU2VsZWN0b3InLFxuICAgIGRhdGFJRDogZGF0YUlELFxuICAgIGlzV2l0aGluVW5tYXRjaGVkVHlwZVJlZmluZW1lbnQ6IGlzV2l0aGluVW5tYXRjaGVkVHlwZVJlZmluZW1lbnQsXG4gICAgbm9kZTogZnJhZ21lbnQsXG4gICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgb3duZXI6IHJlcXVlc3RcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTm9ybWFsaXphdGlvblNlbGVjdG9yKG5vZGUsIGRhdGFJRCwgdmFyaWFibGVzKSB7XG4gIHJldHVybiB7XG4gICAgZGF0YUlEOiBkYXRhSUQsXG4gICAgbm9kZTogbm9kZSxcbiAgICB2YXJpYWJsZXM6IHZhcmlhYmxlc1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXJlRXF1YWxTZWxlY3RvcnM6IGFyZUVxdWFsU2VsZWN0b3JzLFxuICBjcmVhdGVSZWFkZXJTZWxlY3RvcjogY3JlYXRlUmVhZGVyU2VsZWN0b3IsXG4gIGNyZWF0ZU5vcm1hbGl6YXRpb25TZWxlY3RvcjogY3JlYXRlTm9ybWFsaXphdGlvblNlbGVjdG9yLFxuICBnZXREYXRhSURzRnJvbUZyYWdtZW50OiBnZXREYXRhSURzRnJvbUZyYWdtZW50LFxuICBnZXREYXRhSURzRnJvbU9iamVjdDogZ2V0RGF0YUlEc0Zyb21PYmplY3QsXG4gIGdldFNpbmd1bGFyU2VsZWN0b3I6IGdldFNpbmd1bGFyU2VsZWN0b3IsXG4gIGdldFBsdXJhbFNlbGVjdG9yOiBnZXRQbHVyYWxTZWxlY3RvcixcbiAgZ2V0U2VsZWN0b3I6IGdldFNlbGVjdG9yLFxuICBnZXRTZWxlY3RvcnNGcm9tT2JqZWN0OiBnZXRTZWxlY3RvcnNGcm9tT2JqZWN0LFxuICBnZXRWYXJpYWJsZXNGcm9tU2luZ3VsYXJGcmFnbWVudDogZ2V0VmFyaWFibGVzRnJvbVNpbmd1bGFyRnJhZ21lbnQsXG4gIGdldFZhcmlhYmxlc0Zyb21QbHVyYWxGcmFnbWVudDogZ2V0VmFyaWFibGVzRnJvbVBsdXJhbEZyYWdtZW50LFxuICBnZXRWYXJpYWJsZXNGcm9tRnJhZ21lbnQ6IGdldFZhcmlhYmxlc0Zyb21GcmFnbWVudCxcbiAgZ2V0VmFyaWFibGVzRnJvbU9iamVjdDogZ2V0VmFyaWFibGVzRnJvbU9iamVjdFxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgRGF0YUNoZWNrZXIgPSByZXF1aXJlKCcuL0RhdGFDaGVja2VyJyk7XG5cbnZhciBSZWxheUZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4uL3V0aWwvUmVsYXlGZWF0dXJlRmxhZ3MnKTtcblxudmFyIFJlbGF5TW9kZXJuUmVjb3JkID0gcmVxdWlyZSgnLi9SZWxheU1vZGVyblJlY29yZCcpO1xuXG52YXIgUmVsYXlPcHRpbWlzdGljUmVjb3JkU291cmNlID0gcmVxdWlyZSgnLi9SZWxheU9wdGltaXN0aWNSZWNvcmRTb3VyY2UnKTtcblxudmFyIFJlbGF5UmVhZGVyID0gcmVxdWlyZSgnLi9SZWxheVJlYWRlcicpO1xuXG52YXIgUmVsYXlSZWZlcmVuY2VNYXJrZXIgPSByZXF1aXJlKCcuL1JlbGF5UmVmZXJlbmNlTWFya2VyJyk7XG5cbnZhciBSZWxheVN0b3JlUmVhY3RGbGlnaHRVdGlscyA9IHJlcXVpcmUoJy4vUmVsYXlTdG9yZVJlYWN0RmxpZ2h0VXRpbHMnKTtcblxudmFyIFJlbGF5U3RvcmVTdWJzY3JpcHRpb25zID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlU3Vic2NyaXB0aW9ucycpO1xuXG52YXIgUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnNVc2luZ01hcEJ5SUQgPSByZXF1aXJlKCcuL1JlbGF5U3RvcmVTdWJzY3JpcHRpb25zVXNpbmdNYXBCeUlEJyk7XG5cbnZhciBSZWxheVN0b3JlVXRpbHMgPSByZXF1aXJlKCcuL1JlbGF5U3RvcmVVdGlscycpO1xuXG52YXIgZGVlcEZyZWV6ZSA9IHJlcXVpcmUoJy4uL3V0aWwvZGVlcEZyZWV6ZScpO1xuXG52YXIgZGVmYXVsdEdldERhdGFJRCA9IHJlcXVpcmUoJy4vZGVmYXVsdEdldERhdGFJRCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciByZXNvbHZlSW1tZWRpYXRlID0gcmVxdWlyZSgnLi4vdXRpbC9yZXNvbHZlSW1tZWRpYXRlJyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vUmVsYXlTdG9yZVV0aWxzJyksXG4gICAgUk9PVF9JRCA9IF9yZXF1aXJlLlJPT1RfSUQsXG4gICAgUk9PVF9UWVBFID0gX3JlcXVpcmUuUk9PVF9UWVBFO1xuXG52YXIgREVGQVVMVF9SRUxFQVNFX0JVRkZFUl9TSVpFID0gMTA7XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgYFN0b3JlYCBpbnRlcmZhY2UgZGVmaW5lZCBpbiBgUmVsYXlTdG9yZVR5cGVzYC5cbiAqXG4gKiBOb3RlIHRoYXQgYSBTdG9yZSB0YWtlcyBvd25lcnNoaXAgb2YgYWxsIHJlY29yZHMgcHJvdmlkZWQgdG8gaXQ6IG90aGVyXG4gKiBvYmplY3RzIG1heSBjb250aW51ZSB0byBob2xkIGEgcmVmZXJlbmNlIHRvIHN1Y2ggcmVjb3JkcyBidXQgbWF5IG5vdCBtdXRhdGVcbiAqIHRoZW0uIFRoZSBzdGF0aWMgUmVsYXkgY29yZSBpcyBhcmNoaXRlY3RlZCB0byBhdm9pZCBtdXRhdGluZyByZWNvcmRzIHRoYXQgbWF5IGhhdmUgYmVlblxuICogcGFzc2VkIHRvIGEgc3RvcmU6IG9wZXJhdGlvbnMgdGhhdCBtdXRhdGUgcmVjb3JkcyB3aWxsIGVpdGhlciBjcmVhdGUgZnJlc2hcbiAqIHJlY29yZHMgb3IgY2xvbmUgZXhpc3RpbmcgcmVjb3JkcyBhbmQgbW9kaWZ5IHRoZSBjbG9uZXMuIFJlY29yZCBpbW11dGFiaWxpdHlcbiAqIGlzIGFsc28gZW5mb3JjZWQgaW4gZGV2ZWxvcG1lbnQgbW9kZSBieSBmcmVlemluZyBhbGwgcmVjb3JkcyBwYXNzZWQgdG8gYSBzdG9yZS5cbiAqL1xuXG52YXIgUmVsYXlNb2Rlcm5TdG9yZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlbGF5TW9kZXJuU3RvcmUoc291cmNlLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfb3B0aW9ucyRnY1JlbGVhc2VCdWYsIF9vcHRpb25zJGdjU2NoZWR1bGVyLCBfb3B0aW9ucyRnZXREYXRhSUQsIF9vcHRpb25zJGxvZywgX29wdGlvbnMkb3BlcmF0aW9uTG9hO1xuXG4gICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh0aGlzLCBcIl9nY1N0ZXBcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLl9nY1J1bikge1xuICAgICAgICBpZiAoX3RoaXMuX2djUnVuLm5leHQoKS5kb25lKSB7XG4gICAgICAgICAgX3RoaXMuX2djUnVuID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fZ2NTY2hlZHVsZXIoX3RoaXMuX2djU3RlcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFByZXZlbnQgbXV0YXRpb24gb2YgYSByZWNvcmQgZnJvbSBvdXRzaWRlIHRoZSBzdG9yZS5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICB2YXIgc3RvcmVJRHMgPSBzb3VyY2UuZ2V0UmVjb3JkSURzKCk7XG5cbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBzdG9yZUlEcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgdmFyIHJlY29yZCA9IHNvdXJjZS5nZXQoc3RvcmVJRHNbaWldKTtcblxuICAgICAgICBpZiAocmVjb3JkKSB7XG4gICAgICAgICAgUmVsYXlNb2Rlcm5SZWNvcmQuZnJlZXplKHJlY29yZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9jdXJyZW50V3JpdGVFcG9jaCA9IDA7XG4gICAgdGhpcy5fZ2NIb2xkQ291bnRlciA9IDA7XG4gICAgdGhpcy5fZ2NSZWxlYXNlQnVmZmVyU2l6ZSA9IChfb3B0aW9ucyRnY1JlbGVhc2VCdWYgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZ2NSZWxlYXNlQnVmZmVyU2l6ZSkgIT09IG51bGwgJiYgX29wdGlvbnMkZ2NSZWxlYXNlQnVmICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRnY1JlbGVhc2VCdWYgOiBERUZBVUxUX1JFTEVBU0VfQlVGRkVSX1NJWkU7XG4gICAgdGhpcy5fZ2NSdW4gPSBudWxsO1xuICAgIHRoaXMuX2djU2NoZWR1bGVyID0gKF9vcHRpb25zJGdjU2NoZWR1bGVyID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmdjU2NoZWR1bGVyKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRnY1NjaGVkdWxlciAhPT0gdm9pZCAwID8gX29wdGlvbnMkZ2NTY2hlZHVsZXIgOiByZXNvbHZlSW1tZWRpYXRlO1xuICAgIHRoaXMuX2dldERhdGFJRCA9IChfb3B0aW9ucyRnZXREYXRhSUQgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZ2V0RGF0YUlEKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRnZXREYXRhSUQgIT09IHZvaWQgMCA/IF9vcHRpb25zJGdldERhdGFJRCA6IGRlZmF1bHRHZXREYXRhSUQ7XG4gICAgdGhpcy5fZ2xvYmFsSW52YWxpZGF0aW9uRXBvY2ggPSBudWxsO1xuICAgIHRoaXMuX2ludmFsaWRhdGlvblN1YnNjcmlwdGlvbnMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5faW52YWxpZGF0ZWRSZWNvcmRJRHMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5fX2xvZyA9IChfb3B0aW9ucyRsb2cgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9nKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRsb2cgIT09IHZvaWQgMCA/IF9vcHRpb25zJGxvZyA6IG51bGw7XG4gICAgdGhpcy5fcXVlcnlDYWNoZUV4cGlyYXRpb25UaW1lID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnF1ZXJ5Q2FjaGVFeHBpcmF0aW9uVGltZTtcbiAgICB0aGlzLl9vcGVyYXRpb25Mb2FkZXIgPSAoX29wdGlvbnMkb3BlcmF0aW9uTG9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9wZXJhdGlvbkxvYWRlcikgIT09IG51bGwgJiYgX29wdGlvbnMkb3BlcmF0aW9uTG9hICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRvcGVyYXRpb25Mb2EgOiBudWxsO1xuICAgIHRoaXMuX29wdGltaXN0aWNTb3VyY2UgPSBudWxsO1xuICAgIHRoaXMuX3JlY29yZFNvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9yZWxlYXNlQnVmZmVyID0gW107XG4gICAgdGhpcy5fcm9vdHMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fc2hvdWxkU2NoZWR1bGVHQyA9IGZhbHNlO1xuICAgIHRoaXMuX3N0b3JlU3Vic2NyaXB0aW9ucyA9IFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9TVE9SRV9TVUJTQ1JJUFRJT05TX1JFRkFDVE9SID09PSB0cnVlID8gbmV3IFJlbGF5U3RvcmVTdWJzY3JpcHRpb25zVXNpbmdNYXBCeUlEKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5sb2cpIDogbmV3IFJlbGF5U3RvcmVTdWJzY3JpcHRpb25zKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5sb2cpO1xuICAgIHRoaXMuX3VwZGF0ZWRSZWNvcmRJRHMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5fc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHM7XG4gICAgaW5pdGlhbGl6ZVJlY29yZFNvdXJjZSh0aGlzLl9yZWNvcmRTb3VyY2UpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlbGF5TW9kZXJuU3RvcmUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRTb3VyY2UgPSBmdW5jdGlvbiBnZXRTb3VyY2UoKSB7XG4gICAgdmFyIF90aGlzJF9vcHRpbWlzdGljU291cjtcblxuICAgIHJldHVybiAoX3RoaXMkX29wdGltaXN0aWNTb3VyID0gdGhpcy5fb3B0aW1pc3RpY1NvdXJjZSkgIT09IG51bGwgJiYgX3RoaXMkX29wdGltaXN0aWNTb3VyICE9PSB2b2lkIDAgPyBfdGhpcyRfb3B0aW1pc3RpY1NvdXIgOiB0aGlzLl9yZWNvcmRTb3VyY2U7XG4gIH07XG5cbiAgX3Byb3RvLmNoZWNrID0gZnVuY3Rpb24gY2hlY2sob3BlcmF0aW9uLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzJF9vcHRpbWlzdGljU291cjIsIF9vcHRpb25zJHRhcmdldCwgX29wdGlvbnMkaGFuZGxlcnM7XG5cbiAgICB2YXIgc2VsZWN0b3IgPSBvcGVyYXRpb24ucm9vdDtcbiAgICB2YXIgc291cmNlID0gKF90aGlzJF9vcHRpbWlzdGljU291cjIgPSB0aGlzLl9vcHRpbWlzdGljU291cmNlKSAhPT0gbnVsbCAmJiBfdGhpcyRfb3B0aW1pc3RpY1NvdXIyICE9PSB2b2lkIDAgPyBfdGhpcyRfb3B0aW1pc3RpY1NvdXIyIDogdGhpcy5fcmVjb3JkU291cmNlO1xuICAgIHZhciBnbG9iYWxJbnZhbGlkYXRpb25FcG9jaCA9IHRoaXMuX2dsb2JhbEludmFsaWRhdGlvbkVwb2NoO1xuXG4gICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMuX3Jvb3RzLmdldChvcGVyYXRpb24ucmVxdWVzdC5pZGVudGlmaWVyKTtcblxuICAgIHZhciBvcGVyYXRpb25MYXN0V3JpdHRlbkF0ID0gcm9vdEVudHJ5ICE9IG51bGwgPyByb290RW50cnkuZXBvY2ggOiBudWxsOyAvLyBDaGVjayBpZiBzdG9yZSBoYXMgYmVlbiBnbG9iYWxseSBpbnZhbGlkYXRlZFxuXG4gICAgaWYgKGdsb2JhbEludmFsaWRhdGlvbkVwb2NoICE9IG51bGwpIHtcbiAgICAgIC8vIElmIHNvLCBjaGVjayBpZiB0aGUgb3BlcmF0aW9uIHdlJ3JlIGNoZWNraW5nIHdhcyBsYXN0IHdyaXR0ZW5cbiAgICAgIC8vIGJlZm9yZSBvciBhZnRlciBpbnZhbGlkYXRpb24gb2NjdXJlZC5cbiAgICAgIGlmIChvcGVyYXRpb25MYXN0V3JpdHRlbkF0ID09IG51bGwgfHwgb3BlcmF0aW9uTGFzdFdyaXR0ZW5BdCA8PSBnbG9iYWxJbnZhbGlkYXRpb25FcG9jaCkge1xuICAgICAgICAvLyBJZiB0aGUgb3BlcmF0aW9uIHdhcyB3cml0dGVuIC9iZWZvcmUvIGdsb2JhbCBpbnZhbGlkYXRpb24gb2NjdXJyZWQsXG4gICAgICAgIC8vIG9yIGlmIHRoaXMgb3BlcmF0aW9uIGhhcyBuZXZlciBiZWVuIHdyaXR0ZW4gdG8gdGhlIHN0b3JlIGJlZm9yZSxcbiAgICAgICAgLy8gd2Ugd2lsbCBjb25zaWRlciB0aGUgZGF0YSBmb3IgdGhpcyBvcGVyYXRpb24gdG8gYmUgc3RhbGVcbiAgICAgICAgLy8gKGkuZS4gbm90IHJlc29sdmFibGUgZnJvbSB0aGUgc3RvcmUpLlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXR1czogJ3N0YWxlJ1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB0YXJnZXQgPSAoX29wdGlvbnMkdGFyZ2V0ID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRhcmdldCkgIT09IG51bGwgJiYgX29wdGlvbnMkdGFyZ2V0ICE9PSB2b2lkIDAgPyBfb3B0aW9ucyR0YXJnZXQgOiBzb3VyY2U7XG4gICAgdmFyIGhhbmRsZXJzID0gKF9vcHRpb25zJGhhbmRsZXJzID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhhbmRsZXJzKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRoYW5kbGVycyAhPT0gdm9pZCAwID8gX29wdGlvbnMkaGFuZGxlcnMgOiBbXTtcbiAgICB2YXIgb3BlcmF0aW9uQXZhaWxhYmlsaXR5ID0gRGF0YUNoZWNrZXIuY2hlY2soc291cmNlLCB0YXJnZXQsIHNlbGVjdG9yLCBoYW5kbGVycywgdGhpcy5fb3BlcmF0aW9uTG9hZGVyLCB0aGlzLl9nZXREYXRhSUQsIHRoaXMuX3Nob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzKTtcbiAgICByZXR1cm4gZ2V0QXZhaWxhYmlsaXR5U3RhdHVzKG9wZXJhdGlvbkF2YWlsYWJpbGl0eSwgb3BlcmF0aW9uTGFzdFdyaXR0ZW5BdCwgcm9vdEVudHJ5ID09PSBudWxsIHx8IHJvb3RFbnRyeSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcm9vdEVudHJ5LmZldGNoVGltZSwgdGhpcy5fcXVlcnlDYWNoZUV4cGlyYXRpb25UaW1lKTtcbiAgfTtcblxuICBfcHJvdG8ucmV0YWluID0gZnVuY3Rpb24gcmV0YWluKG9wZXJhdGlvbikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGlkID0gb3BlcmF0aW9uLnJlcXVlc3QuaWRlbnRpZmllcjtcbiAgICB2YXIgZGlzcG9zZWQgPSBmYWxzZTtcblxuICAgIHZhciBkaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIC8vIEVuc3VyZSBlYWNoIHJldGFpbiBjYW4gb25seSBkaXNwb3NlIG9uY2VcbiAgICAgIGlmIChkaXNwb3NlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRpc3Bvc2VkID0gdHJ1ZTsgLy8gRm9yIEZsb3c6IGd1YXJkIGFnYWluc3QgdGhlIGVudHJ5IHNvbWVob3cgbm90IGV4aXN0aW5nXG5cbiAgICAgIHZhciByb290RW50cnkgPSBfdGhpczIuX3Jvb3RzLmdldChpZCk7XG5cbiAgICAgIGlmIChyb290RW50cnkgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIERlY3JlbWVudCB0aGUgcmVmIGNvdW50OiBpZiBpdCBiZWNvbWVzIHplcm8gaXQgaXMgZWxpZ2libGVcbiAgICAgIC8vIGZvciByZWxlYXNlLlxuXG5cbiAgICAgIHJvb3RFbnRyeS5yZWZDb3VudC0tO1xuXG4gICAgICBpZiAocm9vdEVudHJ5LnJlZkNvdW50ID09PSAwKSB7XG4gICAgICAgIHZhciBfcXVlcnlDYWNoZUV4cGlyYXRpb25UaW1lID0gX3RoaXMyLl9xdWVyeUNhY2hlRXhwaXJhdGlvblRpbWU7XG5cbiAgICAgICAgdmFyIHJvb3RFbnRyeUlzU3RhbGUgPSByb290RW50cnkuZmV0Y2hUaW1lICE9IG51bGwgJiYgX3F1ZXJ5Q2FjaGVFeHBpcmF0aW9uVGltZSAhPSBudWxsICYmIHJvb3RFbnRyeS5mZXRjaFRpbWUgPD0gRGF0ZS5ub3coKSAtIF9xdWVyeUNhY2hlRXhwaXJhdGlvblRpbWU7XG5cbiAgICAgICAgaWYgKHJvb3RFbnRyeUlzU3RhbGUpIHtcbiAgICAgICAgICBfdGhpczIuX3Jvb3RzW1wiZGVsZXRlXCJdKGlkKTtcblxuICAgICAgICAgIF90aGlzMi5zY2hlZHVsZUdDKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMyLl9yZWxlYXNlQnVmZmVyLnB1c2goaWQpOyAvLyBJZiB0aGUgcmVsZWFzZSBidWZmZXIgaXMgbm93IG92ZXItZnVsbCwgcmVtb3ZlIHRoZSBsZWFzdC1yZWNlbnRseVxuICAgICAgICAgIC8vIGFkZGVkIGVudHJ5IGFuZCBzY2hlZHVsZSBhIEdDLiBOb3RlIHRoYXQgYWxsIGl0ZW1zIGluIHRoZSByZWxlYXNlXG4gICAgICAgICAgLy8gYnVmZmVyIGhhdmUgYSByZWZDb3VudCBvZiAwLlxuXG5cbiAgICAgICAgICBpZiAoX3RoaXMyLl9yZWxlYXNlQnVmZmVyLmxlbmd0aCA+IF90aGlzMi5fZ2NSZWxlYXNlQnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgdmFyIF9pZCA9IF90aGlzMi5fcmVsZWFzZUJ1ZmZlci5zaGlmdCgpO1xuXG4gICAgICAgICAgICBfdGhpczIuX3Jvb3RzW1wiZGVsZXRlXCJdKF9pZCk7XG5cbiAgICAgICAgICAgIF90aGlzMi5zY2hlZHVsZUdDKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByb290RW50cnkgPSB0aGlzLl9yb290cy5nZXQoaWQpO1xuXG4gICAgaWYgKHJvb3RFbnRyeSAhPSBudWxsKSB7XG4gICAgICBpZiAocm9vdEVudHJ5LnJlZkNvdW50ID09PSAwKSB7XG4gICAgICAgIC8vIFRoaXMgZW50cnkgc2hvdWxkIGJlIGluIHRoZSByZWxlYXNlIGJ1ZmZlciwgYnV0IGl0IG5vIGxvbmdlciBiZWxvbmdzXG4gICAgICAgIC8vIHRoZXJlIHNpbmNlIGl0J3MgcmV0YWluZWQuIFJlbW92ZSBpdCB0byBtYWludGFpbiB0aGUgaW52YXJpYW50IHRoYXRcbiAgICAgICAgLy8gYWxsIHJlbGVhc2UgYnVmZmVyIGVudHJpZXMgaGF2ZSBhIHJlZkNvdW50IG9mIDAuXG4gICAgICAgIHRoaXMuX3JlbGVhc2VCdWZmZXIgPSB0aGlzLl9yZWxlYXNlQnVmZmVyLmZpbHRlcihmdW5jdGlvbiAoX2lkKSB7XG4gICAgICAgICAgcmV0dXJuIF9pZCAhPT0gaWQ7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBJZiB3ZSd2ZSBwcmV2aW91c2x5IHJldGFpbmVkIHRoaXMgb3BlcmF0aW9uLCBpbmNyZW1lbnQgdGhlIHJlZkNvdW50XG5cblxuICAgICAgcm9vdEVudHJ5LnJlZkNvdW50ICs9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW50cnkgZm9yIHRoZSBvcGVyYXRpb25cbiAgICAgIHRoaXMuX3Jvb3RzLnNldChpZCwge1xuICAgICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgICAgcmVmQ291bnQ6IDEsXG4gICAgICAgIGVwb2NoOiBudWxsLFxuICAgICAgICBmZXRjaFRpbWU6IG51bGxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXNwb3NlOiBkaXNwb3NlXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8ubG9va3VwID0gZnVuY3Rpb24gbG9va3VwKHNlbGVjdG9yKSB7XG4gICAgdmFyIHNvdXJjZSA9IHRoaXMuZ2V0U291cmNlKCk7XG4gICAgdmFyIHNuYXBzaG90ID0gUmVsYXlSZWFkZXIucmVhZChzb3VyY2UsIHNlbGVjdG9yKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGRlZXBGcmVlemUoc25hcHNob3QpO1xuICAgIH1cblxuICAgIHJldHVybiBzbmFwc2hvdDtcbiAgfSAvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBhIGxpc3Qgb2YgdXBkYXRlZCBvd25lcnMgZnJvbSB0aGUgc3Vic2NyaXB0aW9uc1xuICA7XG5cbiAgX3Byb3RvLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeShzb3VyY2VPcGVyYXRpb24sIGludmFsaWRhdGVTdG9yZSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGxvZyA9IHRoaXMuX19sb2c7XG5cbiAgICBpZiAobG9nICE9IG51bGwpIHtcbiAgICAgIGxvZyh7XG4gICAgICAgIG5hbWU6ICdzdG9yZS5ub3RpZnkuc3RhcnQnLFxuICAgICAgICBzb3VyY2VPcGVyYXRpb246IHNvdXJjZU9wZXJhdGlvblxuICAgICAgfSk7XG4gICAgfSAvLyBJbmNyZW1lbnQgdGhlIGN1cnJlbnQgd3JpdGUgd2hlbiBub3RpZnlpbmcgYWZ0ZXIgZXhlY3V0aW5nXG4gICAgLy8gYSBzZXQgb2YgY2hhbmdlcyB0byB0aGUgc3RvcmUuXG5cblxuICAgIHRoaXMuX2N1cnJlbnRXcml0ZUVwb2NoKys7XG5cbiAgICBpZiAoaW52YWxpZGF0ZVN0b3JlID09PSB0cnVlKSB7XG4gICAgICB0aGlzLl9nbG9iYWxJbnZhbGlkYXRpb25FcG9jaCA9IHRoaXMuX2N1cnJlbnRXcml0ZUVwb2NoO1xuICAgIH1cblxuICAgIHZhciBzb3VyY2UgPSB0aGlzLmdldFNvdXJjZSgpO1xuICAgIHZhciB1cGRhdGVkT3duZXJzID0gW107XG5cbiAgICB0aGlzLl9zdG9yZVN1YnNjcmlwdGlvbnMudXBkYXRlU3Vic2NyaXB0aW9ucyhzb3VyY2UsIHRoaXMuX3VwZGF0ZWRSZWNvcmRJRHMsIHVwZGF0ZWRPd25lcnMsIHNvdXJjZU9wZXJhdGlvbik7XG5cbiAgICB0aGlzLl9pbnZhbGlkYXRpb25TdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgX3RoaXMzLl91cGRhdGVJbnZhbGlkYXRpb25TdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uLCBpbnZhbGlkYXRlU3RvcmUgPT09IHRydWUpO1xuICAgIH0pO1xuXG4gICAgaWYgKGxvZyAhPSBudWxsKSB7XG4gICAgICBsb2coe1xuICAgICAgICBuYW1lOiAnc3RvcmUubm90aWZ5LmNvbXBsZXRlJyxcbiAgICAgICAgc291cmNlT3BlcmF0aW9uOiBzb3VyY2VPcGVyYXRpb24sXG4gICAgICAgIHVwZGF0ZWRSZWNvcmRJRHM6IHRoaXMuX3VwZGF0ZWRSZWNvcmRJRHMsXG4gICAgICAgIGludmFsaWRhdGVkUmVjb3JkSURzOiB0aGlzLl9pbnZhbGlkYXRlZFJlY29yZElEc1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5fdXBkYXRlZFJlY29yZElEcy5jbGVhcigpO1xuXG4gICAgdGhpcy5faW52YWxpZGF0ZWRSZWNvcmRJRHMuY2xlYXIoKTsgLy8gSWYgYSBzb3VyY2Ugb3BlcmF0aW9uIHdhcyBwcm92aWRlZCAoaW5kaWNhdGluZyB0aGUgb3BlcmF0aW9uXG4gICAgLy8gdGhhdCBwcm9kdWNlZCB0aGlzIHVwZGF0ZSB0byB0aGUgc3RvcmUpLCByZWNvcmQgdGhlIGN1cnJlbnQgZXBvY2hcbiAgICAvLyBhdCB3aGljaCB0aGlzIG9wZXJhdGlvbiB3YXMgd3JpdHRlbi5cblxuXG4gICAgaWYgKHNvdXJjZU9wZXJhdGlvbiAhPSBudWxsKSB7XG4gICAgICAvLyBXZSBvbmx5IHRyYWNrIHRoZSBlcG9jaCBhdCB3aGljaCB0aGUgb3BlcmF0aW9uIHdhcyB3cml0dGVuIGlmXG4gICAgICAvLyBpdCB3YXMgcHJldmlvdXNseSByZXRhaW5lZCwgdG8ga2VlcCB0aGUgc2l6ZSBvZiBvdXIgb3BlcmF0aW9uXG4gICAgICAvLyBlcG9jaCBtYXAgYm91bmRlZC4gSWYgYSBxdWVyeSB3YXNuJ3QgcmV0YWluZWQsIHdlIGFzc3VtZSBpdCBjYW5cbiAgICAgIC8vIG1heSBiZSBkZWxldGVkIGF0IGFueSBtb21lbnQgYW5kIHRodXMgaXMgbm90IHJlbGV2YW50IGZvciB1cyB0byB0cmFja1xuICAgICAgLy8gZm9yIHRoZSBwdXJwb3NlcyBvZiBpbnZhbGlkYXRpb24uXG4gICAgICB2YXIgaWQgPSBzb3VyY2VPcGVyYXRpb24ucmVxdWVzdC5pZGVudGlmaWVyO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy5fcm9vdHMuZ2V0KGlkKTtcblxuICAgICAgaWYgKHJvb3RFbnRyeSAhPSBudWxsKSB7XG4gICAgICAgIHJvb3RFbnRyeS5lcG9jaCA9IHRoaXMuX2N1cnJlbnRXcml0ZUVwb2NoO1xuICAgICAgICByb290RW50cnkuZmV0Y2hUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIH0gZWxzZSBpZiAoc291cmNlT3BlcmF0aW9uLnJlcXVlc3Qubm9kZS5wYXJhbXMub3BlcmF0aW9uS2luZCA9PT0gJ3F1ZXJ5JyAmJiB0aGlzLl9nY1JlbGVhc2VCdWZmZXJTaXplID4gMCAmJiB0aGlzLl9yZWxlYXNlQnVmZmVyLmxlbmd0aCA8IHRoaXMuX2djUmVsZWFzZUJ1ZmZlclNpemUpIHtcbiAgICAgICAgLy8gVGhlIG9wZXJhdGlvbiBpc24ndCByZXRhaW5lZCBidXQgdGhlcmUgaXMgc3BhY2UgaW4gdGhlIHJlbGVhc2UgYnVmZmVyOlxuICAgICAgICAvLyB0ZW1wb3JhcmlseSB0cmFjayB0aGlzIG9wZXJhdGlvbiBpbiBjYXNlIHRoZSBkYXRhIGNhbiBiZSByZXVzZWQgc29vbi5cbiAgICAgICAgdmFyIHRlbXBvcmFyeVJvb3RFbnRyeSA9IHtcbiAgICAgICAgICBvcGVyYXRpb246IHNvdXJjZU9wZXJhdGlvbixcbiAgICAgICAgICByZWZDb3VudDogMCxcbiAgICAgICAgICBlcG9jaDogdGhpcy5fY3VycmVudFdyaXRlRXBvY2gsXG4gICAgICAgICAgZmV0Y2hUaW1lOiBEYXRlLm5vdygpXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fcmVsZWFzZUJ1ZmZlci5wdXNoKGlkKTtcblxuICAgICAgICB0aGlzLl9yb290cy5zZXQoaWQsIHRlbXBvcmFyeVJvb3RFbnRyeSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZWRPd25lcnM7XG4gIH07XG5cbiAgX3Byb3RvLnB1Ymxpc2ggPSBmdW5jdGlvbiBwdWJsaXNoKHNvdXJjZSwgaWRzTWFya2VkRm9ySW52YWxpZGF0aW9uKSB7XG4gICAgdmFyIF90aGlzJF9vcHRpbWlzdGljU291cjM7XG5cbiAgICB2YXIgdGFyZ2V0ID0gKF90aGlzJF9vcHRpbWlzdGljU291cjMgPSB0aGlzLl9vcHRpbWlzdGljU291cmNlKSAhPT0gbnVsbCAmJiBfdGhpcyRfb3B0aW1pc3RpY1NvdXIzICE9PSB2b2lkIDAgPyBfdGhpcyRfb3B0aW1pc3RpY1NvdXIzIDogdGhpcy5fcmVjb3JkU291cmNlO1xuICAgIHVwZGF0ZVRhcmdldEZyb21Tb3VyY2UodGFyZ2V0LCBzb3VyY2UsIC8vIFdlIGluY3JlbWVudCB0aGUgY3VycmVudCBlcG9jaCBhdCB0aGUgZW5kIG9mIHRoZSBzZXQgb2YgdXBkYXRlcyxcbiAgICAvLyBpbiBub3RpZnkoKS4gSGVyZSwgd2UgcGFzcyB3aGF0IHdpbGwgYmUgdGhlIGluY3JlbWVudGVkIHZhbHVlIG9mXG4gICAgLy8gdGhlIGVwb2NoIHRvIHVzZSB0byB3cml0ZSB0byBpbnZhbGlkYXRlZCByZWNvcmRzLlxuICAgIHRoaXMuX2N1cnJlbnRXcml0ZUVwb2NoICsgMSwgaWRzTWFya2VkRm9ySW52YWxpZGF0aW9uLCB0aGlzLl91cGRhdGVkUmVjb3JkSURzLCB0aGlzLl9pbnZhbGlkYXRlZFJlY29yZElEcyk7IC8vIE5PVEU6IGxvZyAqYWZ0ZXIqIHByb2Nlc3NpbmcgdGhlIHNvdXJjZSBzbyB0aGF0IGV2ZW4gaWYgYSBiYWQgbG9nIGZ1bmN0aW9uXG4gICAgLy8gbXV0YXRlcyB0aGUgc291cmNlLCBpdCBkb2Vzbid0IGFmZmVjdCBSZWxheSBwcm9jZXNzaW5nIG9mIGl0LlxuXG4gICAgdmFyIGxvZyA9IHRoaXMuX19sb2c7XG5cbiAgICBpZiAobG9nICE9IG51bGwpIHtcbiAgICAgIGxvZyh7XG4gICAgICAgIG5hbWU6ICdzdG9yZS5wdWJsaXNoJyxcbiAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgIG9wdGltaXN0aWM6IHRhcmdldCA9PT0gdGhpcy5fb3B0aW1pc3RpY1NvdXJjZVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoc25hcHNob3QsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0b3JlU3Vic2NyaXB0aW9ucy5zdWJzY3JpYmUoc25hcHNob3QsIGNhbGxiYWNrKTtcbiAgfTtcblxuICBfcHJvdG8uaG9sZEdDID0gZnVuY3Rpb24gaG9sZEdDKCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuX2djUnVuKSB7XG4gICAgICB0aGlzLl9nY1J1biA9IG51bGw7XG4gICAgICB0aGlzLl9zaG91bGRTY2hlZHVsZUdDID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9nY0hvbGRDb3VudGVyKys7XG5cbiAgICB2YXIgZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICBpZiAoX3RoaXM0Ll9nY0hvbGRDb3VudGVyID4gMCkge1xuICAgICAgICBfdGhpczQuX2djSG9sZENvdW50ZXItLTtcblxuICAgICAgICBpZiAoX3RoaXM0Ll9nY0hvbGRDb3VudGVyID09PSAwICYmIF90aGlzNC5fc2hvdWxkU2NoZWR1bGVHQykge1xuICAgICAgICAgIF90aGlzNC5zY2hlZHVsZUdDKCk7XG5cbiAgICAgICAgICBfdGhpczQuX3Nob3VsZFNjaGVkdWxlR0MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGlzcG9zZTogZGlzcG9zZVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4gJ1JlbGF5TW9kZXJuU3RvcmUoKSc7XG4gIH0gLy8gSW50ZXJuYWwgQVBJXG4gIDtcblxuICBfcHJvdG8uX19nZXRVcGRhdGVkUmVjb3JkSURzID0gZnVuY3Rpb24gX19nZXRVcGRhdGVkUmVjb3JkSURzKCkge1xuICAgIHJldHVybiB0aGlzLl91cGRhdGVkUmVjb3JkSURzO1xuICB9O1xuXG4gIF9wcm90by5sb29rdXBJbnZhbGlkYXRpb25TdGF0ZSA9IGZ1bmN0aW9uIGxvb2t1cEludmFsaWRhdGlvblN0YXRlKGRhdGFJRHMpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIHZhciBpbnZhbGlkYXRpb25zID0gbmV3IE1hcCgpO1xuICAgIGRhdGFJRHMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YUlEKSB7XG4gICAgICB2YXIgX1JlbGF5TW9kZXJuUmVjb3JkJGdlO1xuXG4gICAgICB2YXIgcmVjb3JkID0gX3RoaXM1LmdldFNvdXJjZSgpLmdldChkYXRhSUQpO1xuXG4gICAgICBpbnZhbGlkYXRpb25zLnNldChkYXRhSUQsIChfUmVsYXlNb2Rlcm5SZWNvcmQkZ2UgPSBSZWxheU1vZGVyblJlY29yZC5nZXRJbnZhbGlkYXRpb25FcG9jaChyZWNvcmQpKSAhPT0gbnVsbCAmJiBfUmVsYXlNb2Rlcm5SZWNvcmQkZ2UgIT09IHZvaWQgMCA/IF9SZWxheU1vZGVyblJlY29yZCRnZSA6IG51bGwpO1xuICAgIH0pO1xuICAgIGludmFsaWRhdGlvbnMuc2V0KCdnbG9iYWwnLCB0aGlzLl9nbG9iYWxJbnZhbGlkYXRpb25FcG9jaCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGFJRHM6IGRhdGFJRHMsXG4gICAgICBpbnZhbGlkYXRpb25zOiBpbnZhbGlkYXRpb25zXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uY2hlY2tJbnZhbGlkYXRpb25TdGF0ZSA9IGZ1bmN0aW9uIGNoZWNrSW52YWxpZGF0aW9uU3RhdGUocHJldkludmFsaWRhdGlvblN0YXRlKSB7XG4gICAgdmFyIGxhdGVzdEludmFsaWRhdGlvblN0YXRlID0gdGhpcy5sb29rdXBJbnZhbGlkYXRpb25TdGF0ZShwcmV2SW52YWxpZGF0aW9uU3RhdGUuZGF0YUlEcyk7XG4gICAgdmFyIGN1cnJlbnRJbnZhbGlkYXRpb25zID0gbGF0ZXN0SW52YWxpZGF0aW9uU3RhdGUuaW52YWxpZGF0aW9ucztcbiAgICB2YXIgcHJldkludmFsaWRhdGlvbnMgPSBwcmV2SW52YWxpZGF0aW9uU3RhdGUuaW52YWxpZGF0aW9uczsgLy8gQ2hlY2sgaWYgZ2xvYmFsIGludmFsaWRhdGlvbiBoYXMgY2hhbmdlZFxuXG4gICAgaWYgKGN1cnJlbnRJbnZhbGlkYXRpb25zLmdldCgnZ2xvYmFsJykgIT09IHByZXZJbnZhbGlkYXRpb25zLmdldCgnZ2xvYmFsJykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gQ2hlY2sgaWYgdGhlIGludmFsaWRhdGlvbiBzdGF0ZSBmb3IgYW55IG9mIHRoZSBpZHMgaGFzIGNoYW5nZWQuXG5cblxuICAgIHZhciBfaXRlcmF0b3IgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkocHJldkludmFsaWRhdGlvblN0YXRlLmRhdGFJRHMpLFxuICAgICAgICBfc3RlcDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICB2YXIgZGF0YUlEID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRJbnZhbGlkYXRpb25zLmdldChkYXRhSUQpICE9PSBwcmV2SW52YWxpZGF0aW9ucy5nZXQoZGF0YUlEKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IuZigpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8uc3Vic2NyaWJlVG9JbnZhbGlkYXRpb25TdGF0ZSA9IGZ1bmN0aW9uIHN1YnNjcmliZVRvSW52YWxpZGF0aW9uU3RhdGUoaW52YWxpZGF0aW9uU3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICB2YXIgc3Vic2NyaXB0aW9uID0ge1xuICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgaW52YWxpZGF0aW9uU3RhdGU6IGludmFsaWRhdGlvblN0YXRlXG4gICAgfTtcblxuICAgIHZhciBkaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIF90aGlzNi5faW52YWxpZGF0aW9uU3Vic2NyaXB0aW9uc1tcImRlbGV0ZVwiXShzdWJzY3JpcHRpb24pO1xuICAgIH07XG5cbiAgICB0aGlzLl9pbnZhbGlkYXRpb25TdWJzY3JpcHRpb25zLmFkZChzdWJzY3JpcHRpb24pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3Bvc2U6IGRpc3Bvc2VcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5fdXBkYXRlSW52YWxpZGF0aW9uU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gX3VwZGF0ZUludmFsaWRhdGlvblN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24sIGludmFsaWRhdGVkU3RvcmUpIHtcbiAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgIHZhciBjYWxsYmFjayA9IHN1YnNjcmlwdGlvbi5jYWxsYmFjayxcbiAgICAgICAgaW52YWxpZGF0aW9uU3RhdGUgPSBzdWJzY3JpcHRpb24uaW52YWxpZGF0aW9uU3RhdGU7XG4gICAgdmFyIGRhdGFJRHMgPSBpbnZhbGlkYXRpb25TdGF0ZS5kYXRhSURzO1xuICAgIHZhciBpc1N1YnNjcmliZWRUb0ludmFsaWRhdGVkSURzID0gaW52YWxpZGF0ZWRTdG9yZSB8fCBkYXRhSURzLnNvbWUoZnVuY3Rpb24gKGRhdGFJRCkge1xuICAgICAgcmV0dXJuIF90aGlzNy5faW52YWxpZGF0ZWRSZWNvcmRJRHMuaGFzKGRhdGFJRCk7XG4gICAgfSk7XG5cbiAgICBpZiAoIWlzU3Vic2NyaWJlZFRvSW52YWxpZGF0ZWRJRHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5zbmFwc2hvdCA9IGZ1bmN0aW9uIHNuYXBzaG90KCkge1xuICAgICEodGhpcy5fb3B0aW1pc3RpY1NvdXJjZSA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5TW9kZXJuU3RvcmU6IFVuZXhwZWN0ZWQgY2FsbCB0byBzbmFwc2hvdCgpIHdoaWxlIGEgcHJldmlvdXMgJyArICdzbmFwc2hvdCBleGlzdHMuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBsb2cgPSB0aGlzLl9fbG9nO1xuXG4gICAgaWYgKGxvZyAhPSBudWxsKSB7XG4gICAgICBsb2coe1xuICAgICAgICBuYW1lOiAnc3RvcmUuc25hcHNob3QnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdG9yZVN1YnNjcmlwdGlvbnMuc25hcHNob3RTdWJzY3JpcHRpb25zKHRoaXMuZ2V0U291cmNlKCkpO1xuXG4gICAgaWYgKHRoaXMuX2djUnVuKSB7XG4gICAgICB0aGlzLl9nY1J1biA9IG51bGw7XG4gICAgICB0aGlzLl9zaG91bGRTY2hlZHVsZUdDID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9vcHRpbWlzdGljU291cmNlID0gUmVsYXlPcHRpbWlzdGljUmVjb3JkU291cmNlLmNyZWF0ZSh0aGlzLmdldFNvdXJjZSgpKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdG9yZSA9IGZ1bmN0aW9uIHJlc3RvcmUoKSB7XG4gICAgISh0aGlzLl9vcHRpbWlzdGljU291cmNlICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5TdG9yZTogVW5leHBlY3RlZCBjYWxsIHRvIHJlc3RvcmUoKSwgZXhwZWN0ZWQgYSBzbmFwc2hvdCAnICsgJ3RvIGV4aXN0IChtYWtlIHN1cmUgdG8gY2FsbCBzbmFwc2hvdCgpKS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGxvZyA9IHRoaXMuX19sb2c7XG5cbiAgICBpZiAobG9nICE9IG51bGwpIHtcbiAgICAgIGxvZyh7XG4gICAgICAgIG5hbWU6ICdzdG9yZS5yZXN0b3JlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5fb3B0aW1pc3RpY1NvdXJjZSA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5fc2hvdWxkU2NoZWR1bGVHQykge1xuICAgICAgdGhpcy5zY2hlZHVsZUdDKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fc3RvcmVTdWJzY3JpcHRpb25zLnJlc3RvcmVTdWJzY3JpcHRpb25zKCk7XG4gIH07XG5cbiAgX3Byb3RvLnNjaGVkdWxlR0MgPSBmdW5jdGlvbiBzY2hlZHVsZUdDKCkge1xuICAgIGlmICh0aGlzLl9nY0hvbGRDb3VudGVyID4gMCkge1xuICAgICAgdGhpcy5fc2hvdWxkU2NoZWR1bGVHQyA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2djUnVuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fZ2NSdW4gPSB0aGlzLl9jb2xsZWN0KCk7XG5cbiAgICB0aGlzLl9nY1NjaGVkdWxlcih0aGlzLl9nY1N0ZXApO1xuICB9XG4gIC8qKlxuICAgKiBSdW4gYSBmdWxsIEdDIHN5bmNocm9ub3VzbHkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9fZ2MgPSBmdW5jdGlvbiBfX2djKCkge1xuICAgIC8vIERvbid0IHJ1biBHQyB3aGlsZSB0aGVyZSBhcmUgb3B0aW1pc3RpYyB1cGRhdGVzIGFwcGxpZWRcbiAgICBpZiAodGhpcy5fb3B0aW1pc3RpY1NvdXJjZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGdjUnVuID0gdGhpcy5fY29sbGVjdCgpO1xuXG4gICAgd2hpbGUgKCFnY1J1bi5uZXh0KCkuZG9uZSkge31cbiAgfTtcblxuICBfcHJvdG8uX2NvbGxlY3QgPSBmdW5jdGlvbiogX2NvbGxlY3QoKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tbGFiZWxzICovXG4gICAgdG9wOiB3aGlsZSAodHJ1ZSkge1xuICAgICAgdmFyIHN0YXJ0RXBvY2ggPSB0aGlzLl9jdXJyZW50V3JpdGVFcG9jaDtcbiAgICAgIHZhciByZWZlcmVuY2VzID0gbmV3IFNldCgpOyAvLyBNYXJrIGFsbCByZWNvcmRzIHRoYXQgYXJlIHRyYXZlcnNhYmxlIGZyb20gYSByb290XG5cbiAgICAgIHZhciBfaXRlcmF0b3IyID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKHRoaXMuX3Jvb3RzLnZhbHVlcygpKSxcbiAgICAgICAgICBfc3RlcDI7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIG9wZXJhdGlvbiA9IF9zdGVwMi52YWx1ZS5vcGVyYXRpb247XG4gICAgICAgICAgdmFyIHNlbGVjdG9yID0gb3BlcmF0aW9uLnJvb3Q7XG4gICAgICAgICAgUmVsYXlSZWZlcmVuY2VNYXJrZXIubWFyayh0aGlzLl9yZWNvcmRTb3VyY2UsIHNlbGVjdG9yLCByZWZlcmVuY2VzLCB0aGlzLl9vcGVyYXRpb25Mb2FkZXIsIHRoaXMuX3Nob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzKTsgLy8gWWllbGQgZm9yIG90aGVyIHdvcmsgYWZ0ZXIgZWFjaCBvcGVyYXRpb25cblxuICAgICAgICAgIHlpZWxkOyAvLyBJZiB0aGUgc3RvcmUgd2FzIHVwZGF0ZWQsIHJlc3RhcnRcblxuICAgICAgICAgIGlmIChzdGFydEVwb2NoICE9PSB0aGlzLl9jdXJyZW50V3JpdGVFcG9jaCkge1xuICAgICAgICAgICAgY29udGludWUgdG9wO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yMi5mKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBsb2cgPSB0aGlzLl9fbG9nO1xuXG4gICAgICBpZiAobG9nICE9IG51bGwpIHtcbiAgICAgICAgbG9nKHtcbiAgICAgICAgICBuYW1lOiAnc3RvcmUuZ2MnLFxuICAgICAgICAgIHJlZmVyZW5jZXM6IHJlZmVyZW5jZXNcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIFN3ZWVwIHJlY29yZHMgd2l0aG91dCByZWZlcmVuY2VzXG5cblxuICAgICAgaWYgKHJlZmVyZW5jZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAvLyBTaG9ydC1jaXJjdWl0IGlmICpub3RoaW5nKiBpcyByZWZlcmVuY2VkXG4gICAgICAgIHRoaXMuX3JlY29yZFNvdXJjZS5jbGVhcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRXZpY3QgYW55IHVucmVmZXJlbmNlZCBub2Rlc1xuICAgICAgICB2YXIgc3RvcmVJRHMgPSB0aGlzLl9yZWNvcmRTb3VyY2UuZ2V0UmVjb3JkSURzKCk7XG5cbiAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHN0b3JlSURzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICAgIHZhciBkYXRhSUQgPSBzdG9yZUlEc1tpaV07XG5cbiAgICAgICAgICBpZiAoIXJlZmVyZW5jZXMuaGFzKGRhdGFJRCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlY29yZFNvdXJjZS5yZW1vdmUoZGF0YUlEKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVsYXlNb2Rlcm5TdG9yZTtcbn0oKTtcblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVJlY29yZFNvdXJjZSh0YXJnZXQpIHtcbiAgaWYgKCF0YXJnZXQuaGFzKFJPT1RfSUQpKSB7XG4gICAgdmFyIHJvb3RSZWNvcmQgPSBSZWxheU1vZGVyblJlY29yZC5jcmVhdGUoUk9PVF9JRCwgUk9PVF9UWVBFKTtcbiAgICB0YXJnZXQuc2V0KFJPT1RfSUQsIHJvb3RSZWNvcmQpO1xuICB9XG59XG4vKipcbiAqIFVwZGF0ZXMgdGhlIHRhcmdldCB3aXRoIGluZm9ybWF0aW9uIGZyb20gc291cmNlLCBhbHNvIHVwZGF0aW5nIGEgbWFwcGluZyBvZlxuICogd2hpY2ggcmVjb3JkcyBpbiB0aGUgdGFyZ2V0IHdlcmUgY2hhbmdlZCBhcyBhIHJlc3VsdC5cbiAqIEFkZGl0aW9uYWxseSwgd2lsbCBtYXJrIHJlY29yZHMgYXMgaW52YWxpZGF0ZWQgYXQgdGhlIGN1cnJlbnQgd3JpdGUgZXBvY2hcbiAqIGdpdmVuIHRoZSBzZXQgb2YgcmVjb3JkIGlkcyBtYXJrZWQgYXMgc3RhbGUgaW4gdGhpcyB1cGRhdGUuXG4gKi9cblxuXG5mdW5jdGlvbiB1cGRhdGVUYXJnZXRGcm9tU291cmNlKHRhcmdldCwgc291cmNlLCBjdXJyZW50V3JpdGVFcG9jaCwgaWRzTWFya2VkRm9ySW52YWxpZGF0aW9uLCB1cGRhdGVkUmVjb3JkSURzLCBpbnZhbGlkYXRlZFJlY29yZElEcykge1xuICAvLyBGaXJzdCwgdXBkYXRlIGFueSByZWNvcmRzIHRoYXQgd2VyZSBtYXJrZWQgZm9yIGludmFsaWRhdGlvbi5cbiAgLy8gRm9yIGVhY2ggcHJvdmlkZWQgZGF0YUlEIHRoYXQgd2FzIGludmFsaWRhdGVkLCB3ZSB3cml0ZSB0aGVcbiAgLy8gSU5WQUxJREFURURfQVRfS0VZIG9uIHRoZSByZWNvcmQsIGluZGljYXRpbmdcbiAgLy8gdGhlIGVwb2NoIGF0IHdoaWNoIHRoZSByZWNvcmQgd2FzIGludmFsaWRhdGVkLlxuICBpZiAoaWRzTWFya2VkRm9ySW52YWxpZGF0aW9uKSB7XG4gICAgaWRzTWFya2VkRm9ySW52YWxpZGF0aW9uLmZvckVhY2goZnVuY3Rpb24gKGRhdGFJRCkge1xuICAgICAgdmFyIHRhcmdldFJlY29yZCA9IHRhcmdldC5nZXQoZGF0YUlEKTtcbiAgICAgIHZhciBzb3VyY2VSZWNvcmQgPSBzb3VyY2UuZ2V0KGRhdGFJRCk7IC8vIElmIHJlY29yZCB3YXMgZGVsZXRlZCBkdXJpbmcgdGhlIHVwZGF0ZSAoYW5kIGFsc28gaW52YWxpZGF0ZWQpLFxuICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBjb3VudCBpdCBhcyBhbiBpbnZhbGlkYXRlZCBpZFxuXG4gICAgICBpZiAoc291cmNlUmVjb3JkID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG5leHRSZWNvcmQ7XG5cbiAgICAgIGlmICh0YXJnZXRSZWNvcmQgIT0gbnVsbCkge1xuICAgICAgICAvLyBJZiB0aGUgdGFyZ2V0IHJlY29yZCBleGlzdHMsIHVzZSBpdCB0byBzZXQgdGhlIGVwb2NoXG4gICAgICAgIC8vIGF0IHdoaWNoIGl0IHdhcyBpbnZhbGlkYXRlZC4gVGhpcyByZWNvcmQgd2lsbCBiZSB1cGRhdGVkIHdpdGhcbiAgICAgICAgLy8gYW55IGNoYW5nZXMgZnJvbSBzb3VyY2UgaW4gdGhlIHNlY3Rpb24gYmVsb3dcbiAgICAgICAgLy8gd2hlcmUgd2UgdXBkYXRlIHRoZSB0YXJnZXQgcmVjb3JkcyBiYXNlZCBvbiB0aGUgc291cmNlLlxuICAgICAgICBuZXh0UmVjb3JkID0gUmVsYXlNb2Rlcm5SZWNvcmQuY2xvbmUodGFyZ2V0UmVjb3JkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHRoZSB0YXJnZXQgcmVjb3JkIGRvZXNuJ3QgZXhpc3QsIGl0IG1lYW5zIHRoYXQgYSBuZXcgcmVjb3JkXG4gICAgICAgIC8vIGluIHRoZSBzb3VyY2Ugd2FzIGNyZWF0ZWQgKGFuZCBhbHNvIGludmFsaWRhdGVkKSwgc28gd2UgdXNlIHRoYXRcbiAgICAgICAgLy8gcmVjb3JkIHRvIHNldCB0aGUgZXBvY2ggYXQgd2hpY2ggaXQgd2FzIGludmFsaWRhdGVkLiBUaGlzIHJlY29yZFxuICAgICAgICAvLyB3aWxsIGJlIHVwZGF0ZWQgd2l0aCBhbnkgY2hhbmdlcyBmcm9tIHNvdXJjZSBpbiB0aGUgc2VjdGlvbiBiZWxvd1xuICAgICAgICAvLyB3aGVyZSB3ZSB1cGRhdGUgdGhlIHRhcmdldCByZWNvcmRzIGJhc2VkIG9uIHRoZSBzb3VyY2UuXG4gICAgICAgIG5leHRSZWNvcmQgPSBzb3VyY2VSZWNvcmQgIT0gbnVsbCA/IFJlbGF5TW9kZXJuUmVjb3JkLmNsb25lKHNvdXJjZVJlY29yZCkgOiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW5leHRSZWNvcmQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBSZWxheU1vZGVyblJlY29yZC5zZXRWYWx1ZShuZXh0UmVjb3JkLCBSZWxheVN0b3JlVXRpbHMuSU5WQUxJREFURURfQVRfS0VZLCBjdXJyZW50V3JpdGVFcG9jaCk7XG4gICAgICBpbnZhbGlkYXRlZFJlY29yZElEcy5hZGQoZGF0YUlEKTsgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cblxuICAgICAgdGFyZ2V0LnNldChkYXRhSUQsIG5leHRSZWNvcmQpO1xuICAgIH0pO1xuICB9IC8vIFVwZGF0ZSB0aGUgdGFyZ2V0IGJhc2VkIG9uIHRoZSBjaGFuZ2VzIHByZXNlbnQgaW4gc291cmNlXG5cblxuICB2YXIgZGF0YUlEcyA9IHNvdXJjZS5nZXRSZWNvcmRJRHMoKTtcblxuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgZGF0YUlEcy5sZW5ndGg7IGlpKyspIHtcbiAgICB2YXIgZGF0YUlEID0gZGF0YUlEc1tpaV07XG4gICAgdmFyIHNvdXJjZVJlY29yZCA9IHNvdXJjZS5nZXQoZGF0YUlEKTtcbiAgICB2YXIgdGFyZ2V0UmVjb3JkID0gdGFyZ2V0LmdldChkYXRhSUQpOyAvLyBQcmV2ZW50IG11dGF0aW9uIG9mIGEgcmVjb3JkIGZyb20gb3V0c2lkZSB0aGUgc3RvcmUuXG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAoc291cmNlUmVjb3JkKSB7XG4gICAgICAgIFJlbGF5TW9kZXJuUmVjb3JkLmZyZWV6ZShzb3VyY2VSZWNvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzb3VyY2VSZWNvcmQgJiYgdGFyZ2V0UmVjb3JkKSB7XG4gICAgICAvLyBSZWFjdEZsaWdodENsaWVudFJlc3BvbnNlcyBhcmUgbGF6eSBhbmQgb25seSBtYXRlcmlhbGl6ZSB3aGVuIHJlYWRSb290XG4gICAgICAvLyBpcyBjYWxsZWQgd2hlbiB3ZSByZWFkIHRoZSBmaWVsZCwgc28gaWYgdGhlIHJlY29yZCBpcyBhIEZsaWdodCBmaWVsZFxuICAgICAgLy8gd2UgYWx3YXlzIHVzZSB0aGUgbmV3IHJlY29yZCdzIGRhdGEgcmVnYXJkbGVzcyBvZiB3aGV0aGVyXG4gICAgICAvLyBpdCBhY3R1YWxseSBjaGFuZ2VkLiBMZXQgUmVhY3QgdGFrZSBjYXJlIG9mIHJlY29uY2lsaWF0aW9uIGluc3RlYWQuXG4gICAgICB2YXIgbmV4dFJlY29yZCA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFR5cGUodGFyZ2V0UmVjb3JkKSA9PT0gUmVsYXlTdG9yZVJlYWN0RmxpZ2h0VXRpbHMuUkVBQ1RfRkxJR0hUX1RZUEVfTkFNRSA/IHNvdXJjZVJlY29yZCA6IFJlbGF5TW9kZXJuUmVjb3JkLnVwZGF0ZSh0YXJnZXRSZWNvcmQsIHNvdXJjZVJlY29yZCk7XG5cbiAgICAgIGlmIChuZXh0UmVjb3JkICE9PSB0YXJnZXRSZWNvcmQpIHtcbiAgICAgICAgLy8gUHJldmVudCBtdXRhdGlvbiBvZiBhIHJlY29yZCBmcm9tIG91dHNpZGUgdGhlIHN0b3JlLlxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgUmVsYXlNb2Rlcm5SZWNvcmQuZnJlZXplKG5leHRSZWNvcmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlZFJlY29yZElEcy5hZGQoZGF0YUlEKTtcbiAgICAgICAgdGFyZ2V0LnNldChkYXRhSUQsIG5leHRSZWNvcmQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc291cmNlUmVjb3JkID09PSBudWxsKSB7XG4gICAgICB0YXJnZXRbXCJkZWxldGVcIl0oZGF0YUlEKTtcblxuICAgICAgaWYgKHRhcmdldFJlY29yZCAhPT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVkUmVjb3JkSURzLmFkZChkYXRhSUQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc291cmNlUmVjb3JkKSB7XG4gICAgICB0YXJnZXQuc2V0KGRhdGFJRCwgc291cmNlUmVjb3JkKTtcbiAgICAgIHVwZGF0ZWRSZWNvcmRJRHMuYWRkKGRhdGFJRCk7XG4gICAgfSAvLyBkb24ndCBhZGQgZXhwbGljaXQgdW5kZWZpbmVkXG5cbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGFuIE9wZXJhdGlvbkF2YWlsYWJpbGl0eSBnaXZlbiB0aGUgQXZhaWxhYmlsaXR5IHJldHVybmVkXG4gKiBieSBjaGVja2luZyBhbiBvcGVyYXRpb24sIGFuZCB3aGVuIHRoYXQgb3BlcmF0aW9uIHdhcyBsYXN0IHdyaXR0ZW4gdG8gdGhlIHN0b3JlLlxuICogU3BlY2lmaWNhbGx5LCB0aGUgcHJvdmlkZWQgQXZhaWxhYmlsaXR5IG9mIGFuIG9wZXJhdGlvbiB3aWxsIGNvbnRhaW4gdGhlXG4gKiB2YWx1ZSBvZiB3aGVuIGEgcmVjb3JkIHJlZmVyZW5jZWQgYnkgdGhlIG9wZXJhdGlvbiB3YXMgbW9zdCByZWNlbnRseVxuICogaW52YWxpZGF0ZWQ7IGdpdmVuIHRoYXQgdmFsdWUsIGFuZCBnaXZlbiB3aGVuIHRoaXMgb3BlcmF0aW9uIHdhcyBsYXN0XG4gKiB3cml0dGVuIHRvIHRoZSBzdG9yZSwgdGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgb3ZlcmFsbFxuICogT3BlcmF0aW9uQXZhaWxhYmlsaXR5IGZvciB0aGUgb3BlcmF0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0QXZhaWxhYmlsaXR5U3RhdHVzKG9wZXJhdGlvbkF2YWlsYWJpbGl0eSwgb3BlcmF0aW9uTGFzdFdyaXR0ZW5BdCwgb3BlcmF0aW9uRmV0Y2hUaW1lLCBxdWVyeUNhY2hlRXhwaXJhdGlvblRpbWUpIHtcbiAgdmFyIG1vc3RSZWNlbnRseUludmFsaWRhdGVkQXQgPSBvcGVyYXRpb25BdmFpbGFiaWxpdHkubW9zdFJlY2VudGx5SW52YWxpZGF0ZWRBdCxcbiAgICAgIHN0YXR1cyA9IG9wZXJhdGlvbkF2YWlsYWJpbGl0eS5zdGF0dXM7XG5cbiAgaWYgKHR5cGVvZiBtb3N0UmVjZW50bHlJbnZhbGlkYXRlZEF0ID09PSAnbnVtYmVyJykge1xuICAgIC8vIElmIHNvbWUgcmVjb3JkIHJlZmVyZW5jZWQgYnkgdGhpcyBvcGVyYXRpb24gaXMgc3RhbGUsIHRoZW4gdGhlIG9wZXJhdGlvbiBpdHNlbGYgaXMgc3RhbGVcbiAgICAvLyBpZiBlaXRoZXIgdGhlIG9wZXJhdGlvbiBpdHNlbGYgd2FzIG5ldmVyIHdyaXR0ZW4gKm9yKiB0aGUgb3BlcmF0aW9uIHdhcyBsYXN0IHdyaXR0ZW5cbiAgICAvLyBiZWZvcmUgdGhlIG1vc3QgcmVjZW50IGludmFsaWRhdGlvbiBvZiBpdHMgcmVhY2hhYmxlIHJlY29yZHMuXG4gICAgaWYgKG9wZXJhdGlvbkxhc3RXcml0dGVuQXQgPT0gbnVsbCB8fCBtb3N0UmVjZW50bHlJbnZhbGlkYXRlZEF0ID4gb3BlcmF0aW9uTGFzdFdyaXR0ZW5BdCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiAnc3RhbGUnXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0dXMgPT09ICdtaXNzaW5nJykge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6ICdtaXNzaW5nJ1xuICAgIH07XG4gIH1cblxuICBpZiAob3BlcmF0aW9uRmV0Y2hUaW1lICE9IG51bGwgJiYgcXVlcnlDYWNoZUV4cGlyYXRpb25UaW1lICE9IG51bGwpIHtcbiAgICB2YXIgaXNTdGFsZSA9IG9wZXJhdGlvbkZldGNoVGltZSA8PSBEYXRlLm5vdygpIC0gcXVlcnlDYWNoZUV4cGlyYXRpb25UaW1lO1xuXG4gICAgaWYgKGlzU3RhbGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogJ3N0YWxlJ1xuICAgICAgfTtcbiAgICB9XG4gIH0gLy8gVGhlcmUgd2VyZSBubyBpbnZhbGlkYXRpb25zIG9mIGFueSByZWFjaGFibGUgcmVjb3JkcyAqb3IqIHRoZSBvcGVyYXRpb24gaXMga25vd24gdG8gaGF2ZVxuICAvLyBiZWVuIGZldGNoZWQgYWZ0ZXIgdGhlIG1vc3QgcmVjZW50IHJlY29yZCBpbnZhbGlkYXRpb24uXG5cblxuICByZXR1cm4ge1xuICAgIHN0YXR1czogJ2F2YWlsYWJsZScsXG4gICAgZmV0Y2hUaW1lOiBvcGVyYXRpb25GZXRjaFRpbWUgIT09IG51bGwgJiYgb3BlcmF0aW9uRmV0Y2hUaW1lICE9PSB2b2lkIDAgPyBvcGVyYXRpb25GZXRjaFRpbWUgOiBudWxsXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVsYXlNb2Rlcm5TdG9yZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJcIikpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBSZWxheU9wZXJhdGlvblRyYWNrZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWxheU9wZXJhdGlvblRyYWNrZXIoKSB7XG4gICAgdGhpcy5fb3duZXJzVG9QZW5kaW5nT3BlcmF0aW9uc0lkZW50aWZpZXIgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fcGVuZGluZ09wZXJhdGlvbnNUb093bmVyc0lkZW50aWZpZXIgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fb3duZXJzSWRlbnRpZmllclRvUHJvbWlzZSA9IG5ldyBNYXAoKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBtYXAgb2YgY3VycmVudCBwcm9jZXNzaW5nIG9wZXJhdGlvbnMgd2l0aCB0aGUgc2V0IG9mXG4gICAqIGFmZmVjdGVkIG93bmVycyBhbmQgbm90aWZ5IHN1YnNjcmliZXJzXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFJlbGF5T3BlcmF0aW9uVHJhY2tlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShwZW5kaW5nT3BlcmF0aW9uLCBhZmZlY3RlZE93bmVycykge1xuICAgIGlmIChhZmZlY3RlZE93bmVycy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBlbmRpbmdPcGVyYXRpb25JZGVudGlmaWVyID0gcGVuZGluZ09wZXJhdGlvbi5pZGVudGlmaWVyO1xuICAgIHZhciBuZXdseUFmZmVjdGVkT3duZXJzSWRlbnRpZmllciA9IG5ldyBTZXQoKTtcblxuICAgIHZhciBfaXRlcmF0b3IgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkoYWZmZWN0ZWRPd25lcnMpLFxuICAgICAgICBfc3RlcDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICB2YXIgb3duZXIgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgdmFyIG93bmVySWRlbnRpZmllciA9IG93bmVyLmlkZW50aWZpZXI7XG5cbiAgICAgICAgdmFyIHBlbmRpbmdPcGVyYXRpb25zQWZmZWN0aW5nT3duZXIgPSB0aGlzLl9vd25lcnNUb1BlbmRpbmdPcGVyYXRpb25zSWRlbnRpZmllci5nZXQob3duZXJJZGVudGlmaWVyKTtcblxuICAgICAgICBpZiAocGVuZGluZ09wZXJhdGlvbnNBZmZlY3RpbmdPd25lciAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gSW4gdGhpcyBjYXNlIHRoZSBgb3duZXJJZGVudGlmaWVyYCBhbHJlYWR5IGFmZmVjdGVkIGJ5IHNvbWUgb3BlcmF0aW9uc1xuICAgICAgICAgIC8vIFdlIGp1c3QgbmVlZCB0byBkZXRlY3QsIGlzIGl0IHRoZSBzYW1lIG9wZXJhdGlvbiB0aGF0IHdlIGFscmVhZHlcbiAgICAgICAgICAvLyBoYXZlIGluIHRoZSBsaXN0LCBvciBpdCdzIGEgbmV3IG9wZXJhdGlvblxuICAgICAgICAgIGlmICghcGVuZGluZ09wZXJhdGlvbnNBZmZlY3RpbmdPd25lci5oYXMocGVuZGluZ09wZXJhdGlvbklkZW50aWZpZXIpKSB7XG4gICAgICAgICAgICBwZW5kaW5nT3BlcmF0aW9uc0FmZmVjdGluZ093bmVyLmFkZChwZW5kaW5nT3BlcmF0aW9uSWRlbnRpZmllcik7XG4gICAgICAgICAgICBuZXdseUFmZmVjdGVkT3duZXJzSWRlbnRpZmllci5hZGQob3duZXJJZGVudGlmaWVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBhIG5ldyBgb3duZXJJZGVudGlmaWVyYCB0aGF0IGlzIGFmZmVjdGVkIGJ5IHRoZSBvcGVyYXRpb25cbiAgICAgICAgICB0aGlzLl9vd25lcnNUb1BlbmRpbmdPcGVyYXRpb25zSWRlbnRpZmllci5zZXQob3duZXJJZGVudGlmaWVyLCBuZXcgU2V0KFtwZW5kaW5nT3BlcmF0aW9uSWRlbnRpZmllcl0pKTtcblxuICAgICAgICAgIG5ld2x5QWZmZWN0ZWRPd25lcnNJZGVudGlmaWVyLmFkZChvd25lcklkZW50aWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9IC8vIE5vIG5ldyBvd25lcnMgd2VyZSBhZmZlY3RlZCBieSB0aGlzIG9wZXJhdGlvbiwgd2UgbWF5IHN0b3AgaGVyZVxuXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IuZigpO1xuICAgIH1cblxuICAgIGlmIChuZXdseUFmZmVjdGVkT3duZXJzSWRlbnRpZmllci5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBCdXQsIGlmIHNvbWUgb3duZXJzIHdlcmUgYWZmZWN0ZWQgd2UgbmVlZCB0byBhZGQgdGhlbSB0b1xuICAgIC8vIHRoZSBgX3BlbmRpbmdPcGVyYXRpb25zVG9Pd25lcnNJZGVudGlmaWVyYCBzZXRcblxuXG4gICAgdmFyIG93bmVyc0FmZmVjdGVkQnlPcGVyYXRpb25JZGVudGlmaWVyID0gdGhpcy5fcGVuZGluZ09wZXJhdGlvbnNUb093bmVyc0lkZW50aWZpZXIuZ2V0KHBlbmRpbmdPcGVyYXRpb25JZGVudGlmaWVyKSB8fCBuZXcgU2V0KCk7XG5cbiAgICB2YXIgX2l0ZXJhdG9yMiA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShuZXdseUFmZmVjdGVkT3duZXJzSWRlbnRpZmllciksXG4gICAgICAgIF9zdGVwMjtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge1xuICAgICAgICB2YXIgX293bmVySWRlbnRpZmllciA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICB0aGlzLl9yZXNvbHZlT3duZXJSZXNvbHZlcnMoX293bmVySWRlbnRpZmllcik7XG5cbiAgICAgICAgb3duZXJzQWZmZWN0ZWRCeU9wZXJhdGlvbklkZW50aWZpZXIuYWRkKF9vd25lcklkZW50aWZpZXIpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yMi5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvcjIuZigpO1xuICAgIH1cblxuICAgIHRoaXMuX3BlbmRpbmdPcGVyYXRpb25zVG9Pd25lcnNJZGVudGlmaWVyLnNldChwZW5kaW5nT3BlcmF0aW9uSWRlbnRpZmllciwgb3duZXJzQWZmZWN0ZWRCeU9wZXJhdGlvbklkZW50aWZpZXIpO1xuICB9XG4gIC8qKlxuICAgKiBPbmNlIHBlbmRpbmcgb3BlcmF0aW9uIGlzIGNvbXBsZXRlZCB3ZSBuZWVkIHRvIHJlbW92ZSBpdFxuICAgKiBmcm9tIGFsbCB0cmFja2luZyBtYXBzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUocGVuZGluZ09wZXJhdGlvbikge1xuICAgIHZhciBwZW5kaW5nT3BlcmF0aW9uSWRlbnRpZmllciA9IHBlbmRpbmdPcGVyYXRpb24uaWRlbnRpZmllcjtcblxuICAgIHZhciBhZmZlY3RlZE93bmVyc0lkZW50aWZpZXIgPSB0aGlzLl9wZW5kaW5nT3BlcmF0aW9uc1RvT3duZXJzSWRlbnRpZmllci5nZXQocGVuZGluZ09wZXJhdGlvbklkZW50aWZpZXIpO1xuXG4gICAgaWYgKGFmZmVjdGVkT3duZXJzSWRlbnRpZmllciA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBUaGVzZSB3ZXJlIHRoZSBvd25lcnMgYWZmZWN0ZWQgb25seSBieSBgcGVuZGluZ09wZXJhdGlvbklkZW50aWZpZXJgXG5cblxuICAgIHZhciBjb21wbGV0ZWRPd25lcnNJZGVudGlmaWVyID0gbmV3IFNldCgpOyAvLyBUaGVzZSB3ZXJlIHRoZSBvd25lcnMgYWZmZWN0ZWQgYnkgYHBlbmRpbmdPcGVyYXRpb25JZGVudGlmaWVyYFxuICAgIC8vIGFuZCBzb21lIG90aGVyIG9wZXJhdGlvbnNcblxuICAgIHZhciB1cGRhdGVkT3duZXJzSWRlbnRpZmllciA9IG5ldyBTZXQoKTtcblxuICAgIHZhciBfaXRlcmF0b3IzID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKGFmZmVjdGVkT3duZXJzSWRlbnRpZmllciksXG4gICAgICAgIF9zdGVwMztcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykge1xuICAgICAgICB2YXIgb3duZXJJZGVudGlmaWVyID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgIHZhciBwZW5kaW5nT3BlcmF0aW9uc0FmZmVjdGluZ093bmVyID0gdGhpcy5fb3duZXJzVG9QZW5kaW5nT3BlcmF0aW9uc0lkZW50aWZpZXIuZ2V0KG93bmVySWRlbnRpZmllcik7XG5cbiAgICAgICAgaWYgKCFwZW5kaW5nT3BlcmF0aW9uc0FmZmVjdGluZ093bmVyKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBwZW5kaW5nT3BlcmF0aW9uc0FmZmVjdGluZ093bmVyW1wiZGVsZXRlXCJdKHBlbmRpbmdPcGVyYXRpb25JZGVudGlmaWVyKTtcblxuICAgICAgICBpZiAocGVuZGluZ09wZXJhdGlvbnNBZmZlY3RpbmdPd25lci5zaXplID4gMCkge1xuICAgICAgICAgIHVwZGF0ZWRPd25lcnNJZGVudGlmaWVyLmFkZChvd25lcklkZW50aWZpZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbXBsZXRlZE93bmVyc0lkZW50aWZpZXIuYWRkKG93bmVySWRlbnRpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gQ29tcGxldGUgc3Vic2NyaXB0aW9ucyBmb3IgYWxsIG93bmVycywgYWZmZWN0ZWQgYnkgYHBlbmRpbmdPcGVyYXRpb25JZGVudGlmaWVyYFxuXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IzLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yMy5mKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pdGVyYXRvcjQgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkoY29tcGxldGVkT3duZXJzSWRlbnRpZmllciksXG4gICAgICAgIF9zdGVwNDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjQucygpOyAhKF9zdGVwNCA9IF9pdGVyYXRvcjQubigpKS5kb25lOykge1xuICAgICAgICB2YXIgX293bmVySWRlbnRpZmllcjIgPSBfc3RlcDQudmFsdWU7XG5cbiAgICAgICAgdGhpcy5fcmVzb2x2ZU93bmVyUmVzb2x2ZXJzKF9vd25lcklkZW50aWZpZXIyKTtcblxuICAgICAgICB0aGlzLl9vd25lcnNUb1BlbmRpbmdPcGVyYXRpb25zSWRlbnRpZmllcltcImRlbGV0ZVwiXShfb3duZXJJZGVudGlmaWVyMik7XG4gICAgICB9IC8vIFVwZGF0ZSBhbGwgb3duZXJJZGVudGlmaWVyIHRoYXQgd2VyZSB1cGRhdGVkIGJ5IGBwZW5kaW5nT3BlcmF0aW9uSWRlbnRpZmllcmAgYnV0IHN0aWxsXG4gICAgICAvLyBhcmUgYWZmZWN0ZWQgYnkgb3RoZXIgb3BlcmF0aW9uc1xuXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3I0LmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yNC5mKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pdGVyYXRvcjUgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkodXBkYXRlZE93bmVyc0lkZW50aWZpZXIpLFxuICAgICAgICBfc3RlcDU7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3I1LnMoKTsgIShfc3RlcDUgPSBfaXRlcmF0b3I1Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIF9vd25lcklkZW50aWZpZXIzID0gX3N0ZXA1LnZhbHVlO1xuXG4gICAgICAgIHRoaXMuX3Jlc29sdmVPd25lclJlc29sdmVycyhfb3duZXJJZGVudGlmaWVyMyk7XG4gICAgICB9IC8vIEZpbmFsbHksIHJlbW92ZSBwZW5kaW5nIG9wZXJhdGlvbiBpZGVudGlmaWVyXG5cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvcjUuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3I1LmYoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9wZW5kaW5nT3BlcmF0aW9uc1RvT3duZXJzSWRlbnRpZmllcltcImRlbGV0ZVwiXShwZW5kaW5nT3BlcmF0aW9uSWRlbnRpZmllcik7XG4gIH07XG5cbiAgX3Byb3RvLl9yZXNvbHZlT3duZXJSZXNvbHZlcnMgPSBmdW5jdGlvbiBfcmVzb2x2ZU93bmVyUmVzb2x2ZXJzKG93bmVySWRlbnRpZmllcikge1xuICAgIHZhciBwcm9taXNlRW50cnkgPSB0aGlzLl9vd25lcnNJZGVudGlmaWVyVG9Qcm9taXNlLmdldChvd25lcklkZW50aWZpZXIpO1xuXG4gICAgaWYgKHByb21pc2VFbnRyeSAhPSBudWxsKSB7XG4gICAgICBwcm9taXNlRW50cnkucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHRoaXMuX293bmVyc0lkZW50aWZpZXJUb1Byb21pc2VbXCJkZWxldGVcIl0ob3duZXJJZGVudGlmaWVyKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0UHJvbWlzZUZvclBlbmRpbmdPcGVyYXRpb25zQWZmZWN0aW5nT3duZXIgPSBmdW5jdGlvbiBnZXRQcm9taXNlRm9yUGVuZGluZ09wZXJhdGlvbnNBZmZlY3RpbmdPd25lcihvd25lcikge1xuICAgIHZhciBvd25lcklkZW50aWZpZXIgPSBvd25lci5pZGVudGlmaWVyO1xuXG4gICAgaWYgKCF0aGlzLl9vd25lcnNUb1BlbmRpbmdPcGVyYXRpb25zSWRlbnRpZmllci5oYXMob3duZXJJZGVudGlmaWVyKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNhY2hlZFByb21pc2VFbnRyeSA9IHRoaXMuX293bmVyc0lkZW50aWZpZXJUb1Byb21pc2UuZ2V0KG93bmVySWRlbnRpZmllcik7XG5cbiAgICBpZiAoY2FjaGVkUHJvbWlzZUVudHJ5ICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBjYWNoZWRQcm9taXNlRW50cnkucHJvbWlzZTtcbiAgICB9XG5cbiAgICB2YXIgcmVzb2x2ZTtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyKSB7XG4gICAgICByZXNvbHZlID0gcjtcbiAgICB9KTtcbiAgICAhKHJlc29sdmUgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU9wZXJhdGlvblRyYWNrZXI6IEV4cGVjdGVkIHJlc29sdmVyIHRvIGJlIGRlZmluZWQuIElmIHlvdScgKyAnYXJlIHNlZWluZyB0aGlzLCBpdCBpcyBsaWtlbHkgYSBidWcgaW4gUmVsYXkuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgdGhpcy5fb3duZXJzSWRlbnRpZmllclRvUHJvbWlzZS5zZXQob3duZXJJZGVudGlmaWVyLCB7XG4gICAgICBwcm9taXNlOiBwcm9taXNlLFxuICAgICAgcmVzb2x2ZTogcmVzb2x2ZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgcmV0dXJuIFJlbGF5T3BlcmF0aW9uVHJhY2tlcjtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheU9wZXJhdGlvblRyYWNrZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xuXG52YXIgUmVsYXlSZWNvcmRTb3VyY2UgPSByZXF1aXJlKCcuL1JlbGF5UmVjb3JkU291cmNlJyk7XG5cbnZhciBVTlBVQkxJU0hfUkVDT1JEX1NFTlRJTkVMID0gT2JqZWN0LmZyZWV6ZSh7XG4gIF9fVU5QVUJMSVNIX1JFQ09SRF9TRU5USU5FTDogdHJ1ZVxufSk7XG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIE11dGFibGVSZWNvcmRTb3VyY2UgdGhhdCByZXByZXNlbnRzIGEgYmFzZSBSZWNvcmRTb3VyY2VcbiAqIHdpdGggb3B0aW1pc3RpYyB1cGRhdGVzIHN0YWNrZWQgb24gdG9wOiByZWNvcmRzIHdpdGggb3B0aW1pc3RpYyB1cGRhdGVzXG4gKiBzaGFkb3cgdGhlIGJhc2UgdmVyc2lvbiBvZiB0aGUgcmVjb3JkIHJhdGhlciB0aGFuIHVwZGF0aW5nL3JlcGxhY2luZyB0aGVtLlxuICovXG5cbnZhciBSZWxheU9wdGltaXN0aWNSZWNvcmRTb3VyY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWxheU9wdGltaXN0aWNSZWNvcmRTb3VyY2UoYmFzZSkge1xuICAgIHRoaXMuX2Jhc2UgPSBiYXNlO1xuICAgIHRoaXMuX3NpbmsgPSBSZWxheVJlY29yZFNvdXJjZS5jcmVhdGUoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZWxheU9wdGltaXN0aWNSZWNvcmRTb3VyY2UucHJvdG90eXBlO1xuXG4gIF9wcm90by5oYXMgPSBmdW5jdGlvbiBoYXMoZGF0YUlEKSB7XG4gICAgaWYgKHRoaXMuX3NpbmsuaGFzKGRhdGFJRCkpIHtcbiAgICAgIHZhciBzaW5rUmVjb3JkID0gdGhpcy5fc2luay5nZXQoZGF0YUlEKTtcblxuICAgICAgcmV0dXJuIHNpbmtSZWNvcmQgIT09IFVOUFVCTElTSF9SRUNPUkRfU0VOVElORUw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLl9iYXNlLmhhcyhkYXRhSUQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KGRhdGFJRCkge1xuICAgIGlmICh0aGlzLl9zaW5rLmhhcyhkYXRhSUQpKSB7XG4gICAgICB2YXIgc2lua1JlY29yZCA9IHRoaXMuX3NpbmsuZ2V0KGRhdGFJRCk7XG5cbiAgICAgIGlmIChzaW5rUmVjb3JkID09PSBVTlBVQkxJU0hfUkVDT1JEX1NFTlRJTkVMKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2lua1JlY29yZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX2Jhc2UuZ2V0KGRhdGFJRCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXRTdGF0dXMgPSBmdW5jdGlvbiBnZXRTdGF0dXMoZGF0YUlEKSB7XG4gICAgdmFyIHJlY29yZCA9IHRoaXMuZ2V0KGRhdGFJRCk7XG5cbiAgICBpZiAocmVjb3JkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAnVU5LTk9XTic7XG4gICAgfSBlbHNlIGlmIChyZWNvcmQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAnTk9ORVhJU1RFTlQnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ0VYSVNURU5UJztcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5fYmFzZSA9IFJlbGF5UmVjb3JkU291cmNlLmNyZWF0ZSgpO1xuXG4gICAgdGhpcy5fc2luay5jbGVhcigpO1xuICB9O1xuXG4gIF9wcm90b1tcImRlbGV0ZVwiXSA9IGZ1bmN0aW9uIF9kZWxldGUoZGF0YUlEKSB7XG4gICAgdGhpcy5fc2lua1tcImRlbGV0ZVwiXShkYXRhSUQpO1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoZGF0YUlEKSB7XG4gICAgdGhpcy5fc2luay5zZXQoZGF0YUlELCBVTlBVQkxJU0hfUkVDT1JEX1NFTlRJTkVMKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0ID0gZnVuY3Rpb24gc2V0KGRhdGFJRCwgcmVjb3JkKSB7XG4gICAgdGhpcy5fc2luay5zZXQoZGF0YUlELCByZWNvcmQpO1xuICB9O1xuXG4gIF9wcm90by5nZXRSZWNvcmRJRHMgPSBmdW5jdGlvbiBnZXRSZWNvcmRJRHMoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMudG9KU09OKCkpO1xuICB9O1xuXG4gIF9wcm90by5zaXplID0gZnVuY3Rpb24gc2l6ZSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy50b0pTT04oKSkubGVuZ3RoO1xuICB9O1xuXG4gIF9wcm90by50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBtZXJnZWQgPSAoMCwgX29iamVjdFNwcmVhZDJbXCJkZWZhdWx0XCJdKSh7fSwgdGhpcy5fYmFzZS50b0pTT04oKSk7XG5cbiAgICB0aGlzLl9zaW5rLmdldFJlY29yZElEcygpLmZvckVhY2goZnVuY3Rpb24gKGRhdGFJRCkge1xuICAgICAgdmFyIHJlY29yZCA9IF90aGlzLmdldChkYXRhSUQpO1xuXG4gICAgICBpZiAocmVjb3JkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGVsZXRlIG1lcmdlZFtkYXRhSURdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVyZ2VkW2RhdGFJRF0gPSByZWNvcmQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9O1xuXG4gIHJldHVybiBSZWxheU9wdGltaXN0aWNSZWNvcmRTb3VyY2U7XG59KCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZShiYXNlKSB7XG4gIHJldHVybiBuZXcgUmVsYXlPcHRpbWlzdGljUmVjb3JkU291cmNlKGJhc2UpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiBjcmVhdGVcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZ2xvYmFsJEVycm9yVXRpbHMkYXAsIF9nbG9iYWwkRXJyb3JVdGlscztcblxudmFyIFJlbGF5UmVhZGVyID0gcmVxdWlyZSgnLi9SZWxheVJlYWRlcicpO1xuXG52YXIgUmVsYXlSZWNvcmRTb3VyY2UgPSByZXF1aXJlKCcuL1JlbGF5UmVjb3JkU291cmNlJyk7XG5cbnZhciBSZWxheVJlY29yZFNvdXJjZU11dGF0b3IgPSByZXF1aXJlKCcuLi9tdXRhdGlvbnMvUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yJyk7XG5cbnZhciBSZWxheVJlY29yZFNvdXJjZVByb3h5ID0gcmVxdWlyZSgnLi4vbXV0YXRpb25zL1JlbGF5UmVjb3JkU291cmNlUHJveHknKTtcblxudmFyIFJlbGF5UmVjb3JkU291cmNlU2VsZWN0b3JQcm94eSA9IHJlcXVpcmUoJy4uL211dGF0aW9ucy9SZWxheVJlY29yZFNvdXJjZVNlbGVjdG9yUHJveHknKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG52YXIgYXBwbHlXaXRoR3VhcmQgPSAoX2dsb2JhbCRFcnJvclV0aWxzJGFwID0gKF9nbG9iYWwkRXJyb3JVdGlscyA9IGdsb2JhbC5FcnJvclV0aWxzKSA9PT0gbnVsbCB8fCBfZ2xvYmFsJEVycm9yVXRpbHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nbG9iYWwkRXJyb3JVdGlscy5hcHBseVdpdGhHdWFyZCkgIT09IG51bGwgJiYgX2dsb2JhbCRFcnJvclV0aWxzJGFwICE9PSB2b2lkIDAgPyBfZ2xvYmFsJEVycm9yVXRpbHMkYXAgOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGNvbnRleHQsIGFyZ3MsIG9uRXJyb3IsIG5hbWUpIHtcbiAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xufTtcbi8qKlxuICogQ29vcmRpbmF0ZXMgdGhlIGNvbmN1cnJlbnQgbW9kaWZpY2F0aW9uIG9mIGEgYFN0b3JlYCBkdWUgdG8gb3B0aW1pc3RpYyBhbmRcbiAqIG5vbi1yZXZlcnRhYmxlIGNsaWVudCB1cGRhdGVzIGFuZCBzZXJ2ZXIgcGF5bG9hZHM6XG4gKiAtIEFwcGxpZXMgb3B0aW1pc3RpYyB1cGRhdGVzLlxuICogLSBSZXZlcnRzIG9wdGltaXN0aWMgdXBkYXRlcywgcmViYXNpbmcgYW55IHN1YnNlcXVlbnQgdXBkYXRlcy5cbiAqIC0gQ29tbWl0cyBjbGllbnQgdXBkYXRlcyAodHlwaWNhbGx5IGZvciBjbGllbnQgc2NoZW1hIGV4dGVuc2lvbnMpLlxuICogLSBDb21taXRzIHNlcnZlciB1cGRhdGVzOlxuICogICAtIE5vcm1hbGl6ZXMgcXVlcnkvbXV0YXRpb24vc3Vic2NyaXB0aW9uIHJlc3BvbnNlcy5cbiAqICAgLSBFeGVjdXRlcyBoYW5kbGVycyBmb3IgXCJoYW5kbGVcIiBmaWVsZHMuXG4gKiAgIC0gUmV2ZXJ0cyBhbmQgcmVhcHBsaWVzIHBlbmRpbmcgb3B0aW1pc3RpYyB1cGRhdGVzLlxuICovXG5cbnZhciBSZWxheVB1Ymxpc2hRdWV1ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8vIFRydWUgaWYgdGhlIG5leHQgYHJ1bigpYCBzaG91bGQgYXBwbHkgdGhlIGJhY2t1cCBhbmQgcmVydW4gYWxsIG9wdGltaXN0aWNcbiAgLy8gdXBkYXRlcyBwZXJmb3JtaW5nIGEgcmViYXNlLlxuICAvLyBQYXlsb2FkcyB0byBhcHBseSBvciBTb3VyY2VzIHRvIHB1Ymxpc2ggdG8gdGhlIHN0b3JlIHdpdGggdGhlIG5leHQgYHJ1bigpYC5cbiAgLy8gT3B0aW1pc3RpYyB1cGRhdGVycyB0byBhZGQgd2l0aCB0aGUgbmV4dCBgcnVuKClgLlxuICAvLyBPcHRpbWlzdGljIHVwZGF0ZXJzIHRoYXQgYXJlIGFscmVhZHkgYWRkZWQgYW5kIG1pZ2h0IGJlIHJlcnVuIGluIG9yZGVyIHRvXG4gIC8vIHJlYmFzZSB0aGVtLlxuICAvLyBHYXJiYWdlIGNvbGxlY3Rpb24gaG9sZCwgc2hvdWxkIHJlcnVuIGdjIG9uIGRpc3Bvc2VcbiAgZnVuY3Rpb24gUmVsYXlQdWJsaXNoUXVldWUoc3RvcmUsIGhhbmRsZXJQcm92aWRlciwgZ2V0RGF0YUlEKSB7XG4gICAgdGhpcy5faGFzU3RvcmVTbmFwc2hvdCA9IGZhbHNlO1xuICAgIHRoaXMuX2hhbmRsZXJQcm92aWRlciA9IGhhbmRsZXJQcm92aWRlciB8fCBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdCYWNrdXBSZWJhc2UgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nRGF0YSA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLl9wZW5kaW5nT3B0aW1pc3RpY1VwZGF0ZXMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5fc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLl9hcHBsaWVkT3B0aW1pc3RpY1VwZGF0ZXMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5fZ2NIb2xkID0gbnVsbDtcbiAgICB0aGlzLl9nZXREYXRhSUQgPSBnZXREYXRhSUQ7XG4gIH1cbiAgLyoqXG4gICAqIFNjaGVkdWxlIGFwcGx5aW5nIGFuIG9wdGltaXN0aWMgdXBkYXRlcyBvbiB0aGUgbmV4dCBgcnVuKClgLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBSZWxheVB1Ymxpc2hRdWV1ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFwcGx5VXBkYXRlID0gZnVuY3Rpb24gYXBwbHlVcGRhdGUodXBkYXRlcikge1xuICAgICEoIXRoaXMuX2FwcGxpZWRPcHRpbWlzdGljVXBkYXRlcy5oYXModXBkYXRlcikgJiYgIXRoaXMuX3BlbmRpbmdPcHRpbWlzdGljVXBkYXRlcy5oYXModXBkYXRlcikpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlQdWJsaXNoUXVldWU6IENhbm5vdCBhcHBseSB0aGUgc2FtZSB1cGRhdGUgZnVuY3Rpb24gbW9yZSB0aGFuICcgKyAnb25jZSBjb25jdXJyZW50bHkuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgdGhpcy5fcGVuZGluZ09wdGltaXN0aWNVcGRhdGVzLmFkZCh1cGRhdGVyKTtcbiAgfVxuICAvKipcbiAgICogU2NoZWR1bGUgcmV2ZXJ0aW5nIGFuIG9wdGltaXN0aWMgdXBkYXRlcyBvbiB0aGUgbmV4dCBgcnVuKClgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXZlcnRVcGRhdGUgPSBmdW5jdGlvbiByZXZlcnRVcGRhdGUodXBkYXRlcikge1xuICAgIGlmICh0aGlzLl9wZW5kaW5nT3B0aW1pc3RpY1VwZGF0ZXMuaGFzKHVwZGF0ZXIpKSB7XG4gICAgICAvLyBSZXZlcnRlZCBiZWZvcmUgaXQgd2FzIGFwcGxpZWRcbiAgICAgIHRoaXMuX3BlbmRpbmdPcHRpbWlzdGljVXBkYXRlc1tcImRlbGV0ZVwiXSh1cGRhdGVyKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2FwcGxpZWRPcHRpbWlzdGljVXBkYXRlcy5oYXModXBkYXRlcikpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdCYWNrdXBSZWJhc2UgPSB0cnVlO1xuXG4gICAgICB0aGlzLl9hcHBsaWVkT3B0aW1pc3RpY1VwZGF0ZXNbXCJkZWxldGVcIl0odXBkYXRlcik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTY2hlZHVsZSBhIHJldmVydCBvZiBhbGwgb3B0aW1pc3RpYyB1cGRhdGVzIG9uIHRoZSBuZXh0IGBydW4oKWAuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJldmVydEFsbCA9IGZ1bmN0aW9uIHJldmVydEFsbCgpIHtcbiAgICB0aGlzLl9wZW5kaW5nQmFja3VwUmViYXNlID0gdHJ1ZTtcblxuICAgIHRoaXMuX3BlbmRpbmdPcHRpbWlzdGljVXBkYXRlcy5jbGVhcigpO1xuXG4gICAgdGhpcy5fYXBwbGllZE9wdGltaXN0aWNVcGRhdGVzLmNsZWFyKCk7XG4gIH1cbiAgLyoqXG4gICAqIFNjaGVkdWxlIGFwcGx5aW5nIGEgcGF5bG9hZCB0byB0aGUgc3RvcmUgb24gdGhlIG5leHQgYHJ1bigpYC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY29tbWl0UGF5bG9hZCA9IGZ1bmN0aW9uIGNvbW1pdFBheWxvYWQob3BlcmF0aW9uLCBwYXlsb2FkLCB1cGRhdGVyKSB7XG4gICAgdGhpcy5fcGVuZGluZ0JhY2t1cFJlYmFzZSA9IHRydWU7XG5cbiAgICB0aGlzLl9wZW5kaW5nRGF0YS5hZGQoe1xuICAgICAga2luZDogJ3BheWxvYWQnLFxuICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgICBwYXlsb2FkOiBwYXlsb2FkLFxuICAgICAgdXBkYXRlcjogdXBkYXRlclxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBTY2hlZHVsZSBhbiB1cGRhdGVyIHRvIG11dGF0ZSB0aGUgc3RvcmUgb24gdGhlIG5leHQgYHJ1bigpYCB0eXBpY2FsbHkgdG9cbiAgICogdXBkYXRlIGNsaWVudCBzY2hlbWEgZmllbGRzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb21taXRVcGRhdGUgPSBmdW5jdGlvbiBjb21taXRVcGRhdGUodXBkYXRlcikge1xuICAgIHRoaXMuX3BlbmRpbmdCYWNrdXBSZWJhc2UgPSB0cnVlO1xuXG4gICAgdGhpcy5fcGVuZGluZ0RhdGEuYWRkKHtcbiAgICAgIGtpbmQ6ICd1cGRhdGVyJyxcbiAgICAgIHVwZGF0ZXI6IHVwZGF0ZXJcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2NoZWR1bGUgYSBwdWJsaXNoIHRvIHRoZSBzdG9yZSBmcm9tIHRoZSBwcm92aWRlZCBzb3VyY2Ugb24gdGhlIG5leHRcbiAgICogYHJ1bigpYC4gQXMgYW4gZXhhbXBsZSwgdG8gdXBkYXRlIHRoZSBzdG9yZSB3aXRoIHN1YnN0aXR1dGVkIGZpZWxkcyB0aGF0XG4gICAqIGFyZSBtaXNzaW5nIGluIHRoZSBzdG9yZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY29tbWl0U291cmNlID0gZnVuY3Rpb24gY29tbWl0U291cmNlKHNvdXJjZSkge1xuICAgIHRoaXMuX3BlbmRpbmdCYWNrdXBSZWJhc2UgPSB0cnVlO1xuXG4gICAgdGhpcy5fcGVuZGluZ0RhdGEuYWRkKHtcbiAgICAgIGtpbmQ6ICdzb3VyY2UnLFxuICAgICAgc291cmNlOiBzb3VyY2VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRXhlY3V0ZSBhbGwgcXVldWVkIHVwIG9wZXJhdGlvbnMgZnJvbSB0aGUgb3RoZXIgcHVibGljIG1ldGhvZHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJ1biA9IGZ1bmN0aW9uIHJ1bihzb3VyY2VPcGVyYXRpb24pIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHRoaXMuX2lzUnVubmluZyAhPT0gdHJ1ZSwgJ0Egc3RvcmUgdXBkYXRlIHdhcyBkZXRlY3RlZCB3aXRoaW4gYW5vdGhlciBzdG9yZSB1cGRhdGUuIFBsZWFzZSAnICsgXCJtYWtlIHN1cmUgbmV3IHN0b3JlIHVwZGF0ZXMgYXJlbid0IGJlaW5nIGV4ZWN1dGVkIHdpdGhpbiBhbiBcIiArICd1cGRhdGVyIGZ1bmN0aW9uIGZvciBhIGRpZmZlcmVudCB1cGRhdGUuJykgOiB2b2lkIDA7XG4gICAgICB0aGlzLl9pc1J1bm5pbmcgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wZW5kaW5nQmFja3VwUmViYXNlKSB7XG4gICAgICBpZiAodGhpcy5faGFzU3RvcmVTbmFwc2hvdCkge1xuICAgICAgICB0aGlzLl9zdG9yZS5yZXN0b3JlKCk7XG5cbiAgICAgICAgdGhpcy5faGFzU3RvcmVTbmFwc2hvdCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpbnZhbGlkYXRlZFN0b3JlID0gdGhpcy5fY29tbWl0RGF0YSgpO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdPcHRpbWlzdGljVXBkYXRlcy5zaXplIHx8IHRoaXMuX3BlbmRpbmdCYWNrdXBSZWJhc2UgJiYgdGhpcy5fYXBwbGllZE9wdGltaXN0aWNVcGRhdGVzLnNpemUpIHtcbiAgICAgIGlmICghdGhpcy5faGFzU3RvcmVTbmFwc2hvdCkge1xuICAgICAgICB0aGlzLl9zdG9yZS5zbmFwc2hvdCgpO1xuXG4gICAgICAgIHRoaXMuX2hhc1N0b3JlU25hcHNob3QgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9hcHBseVVwZGF0ZXMoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9wZW5kaW5nQmFja3VwUmViYXNlID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5fYXBwbGllZE9wdGltaXN0aWNVcGRhdGVzLnNpemUgPiAwKSB7XG4gICAgICBpZiAoIXRoaXMuX2djSG9sZCkge1xuICAgICAgICB0aGlzLl9nY0hvbGQgPSB0aGlzLl9zdG9yZS5ob2xkR0MoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuX2djSG9sZCkge1xuICAgICAgICB0aGlzLl9nY0hvbGQuZGlzcG9zZSgpO1xuXG4gICAgICAgIHRoaXMuX2djSG9sZCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgdGhpcy5faXNSdW5uaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0b3JlLm5vdGlmeShzb3VyY2VPcGVyYXRpb24sIGludmFsaWRhdGVkU3RvcmUpO1xuICB9XG4gIC8qKlxuICAgKiBfcHVibGlzaFNvdXJjZUZyb21QYXlsb2FkIHdpbGwgcmV0dXJuIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZVxuICAgKiBwdWJsaXNoIGNhdXNlZCB0aGUgc3RvcmUgdG8gYmUgZ2xvYmFsbHkgaW52YWxpZGF0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9wdWJsaXNoU291cmNlRnJvbVBheWxvYWQgPSBmdW5jdGlvbiBfcHVibGlzaFNvdXJjZUZyb21QYXlsb2FkKHBlbmRpbmdQYXlsb2FkKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBwYXlsb2FkID0gcGVuZGluZ1BheWxvYWQucGF5bG9hZCxcbiAgICAgICAgb3BlcmF0aW9uID0gcGVuZGluZ1BheWxvYWQub3BlcmF0aW9uLFxuICAgICAgICB1cGRhdGVyID0gcGVuZGluZ1BheWxvYWQudXBkYXRlcjtcbiAgICB2YXIgc291cmNlID0gcGF5bG9hZC5zb3VyY2UsXG4gICAgICAgIGZpZWxkUGF5bG9hZHMgPSBwYXlsb2FkLmZpZWxkUGF5bG9hZHM7XG4gICAgdmFyIG11dGF0b3IgPSBuZXcgUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yKHRoaXMuX3N0b3JlLmdldFNvdXJjZSgpLCBzb3VyY2UpO1xuICAgIHZhciByZWNvcmRTb3VyY2VQcm94eSA9IG5ldyBSZWxheVJlY29yZFNvdXJjZVByb3h5KG11dGF0b3IsIHRoaXMuX2dldERhdGFJRCk7XG5cbiAgICBpZiAoZmllbGRQYXlsb2FkcyAmJiBmaWVsZFBheWxvYWRzLmxlbmd0aCkge1xuICAgICAgZmllbGRQYXlsb2Fkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZFBheWxvYWQpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBfdGhpcy5faGFuZGxlclByb3ZpZGVyICYmIF90aGlzLl9oYW5kbGVyUHJvdmlkZXIoZmllbGRQYXlsb2FkLmhhbmRsZSk7XG5cbiAgICAgICAgIWhhbmRsZXIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheU1vZGVybkVudmlyb25tZW50OiBFeHBlY3RlZCBhIGhhbmRsZXIgdG8gYmUgcHJvdmlkZWQgZm9yICcgKyAnaGFuZGxlIGAlc2AuJywgZmllbGRQYXlsb2FkLmhhbmRsZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBoYW5kbGVyLnVwZGF0ZShyZWNvcmRTb3VyY2VQcm94eSwgZmllbGRQYXlsb2FkKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh1cGRhdGVyKSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBvcGVyYXRpb24uZnJhZ21lbnQ7XG4gICAgICAhKHNlbGVjdG9yICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlNb2Rlcm5FbnZpcm9ubWVudDogRXhwZWN0ZWQgYSBzZWxlY3RvciB0byBiZSBwcm92aWRlZCB3aXRoIHVwZGF0ZXIgZnVuY3Rpb24uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIHJlY29yZFNvdXJjZVNlbGVjdG9yUHJveHkgPSBuZXcgUmVsYXlSZWNvcmRTb3VyY2VTZWxlY3RvclByb3h5KG11dGF0b3IsIHJlY29yZFNvdXJjZVByb3h5LCBzZWxlY3Rvcik7XG4gICAgICB2YXIgc2VsZWN0b3JEYXRhID0gbG9va3VwU2VsZWN0b3Ioc291cmNlLCBzZWxlY3Rvcik7XG4gICAgICB1cGRhdGVyKHJlY29yZFNvdXJjZVNlbGVjdG9yUHJveHksIHNlbGVjdG9yRGF0YSk7XG4gICAgfVxuXG4gICAgdmFyIGlkc01hcmtlZEZvckludmFsaWRhdGlvbiA9IHJlY29yZFNvdXJjZVByb3h5LmdldElEc01hcmtlZEZvckludmFsaWRhdGlvbigpO1xuXG4gICAgdGhpcy5fc3RvcmUucHVibGlzaChzb3VyY2UsIGlkc01hcmtlZEZvckludmFsaWRhdGlvbik7XG5cbiAgICByZXR1cm4gcmVjb3JkU291cmNlUHJveHkuaXNTdG9yZU1hcmtlZEZvckludmFsaWRhdGlvbigpO1xuICB9XG4gIC8qKlxuICAgKiBfY29tbWl0RGF0YSB3aWxsIHJldHVybiBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBhbnkgb2ZcbiAgICogdGhlIHBlbmRpbmcgY29tbWl0cyBjYXVzZWQgdGhlIHN0b3JlIHRvIGJlIGdsb2JhbGx5IGludmFsaWRhdGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fY29tbWl0RGF0YSA9IGZ1bmN0aW9uIF9jb21taXREYXRhKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKCF0aGlzLl9wZW5kaW5nRGF0YS5zaXplKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGludmFsaWRhdGVkU3RvcmUgPSBmYWxzZTtcblxuICAgIHRoaXMuX3BlbmRpbmdEYXRhLmZvckVhY2goZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGlmIChkYXRhLmtpbmQgPT09ICdwYXlsb2FkJykge1xuICAgICAgICB2YXIgcGF5bG9hZEludmFsaWRhdGVkU3RvcmUgPSBfdGhpczIuX3B1Ymxpc2hTb3VyY2VGcm9tUGF5bG9hZChkYXRhKTtcblxuICAgICAgICBpbnZhbGlkYXRlZFN0b3JlID0gaW52YWxpZGF0ZWRTdG9yZSB8fCBwYXlsb2FkSW52YWxpZGF0ZWRTdG9yZTtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YS5raW5kID09PSAnc291cmNlJykge1xuICAgICAgICB2YXIgc291cmNlID0gZGF0YS5zb3VyY2U7XG5cbiAgICAgICAgX3RoaXMyLl9zdG9yZS5wdWJsaXNoKHNvdXJjZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdXBkYXRlciA9IGRhdGEudXBkYXRlcjtcbiAgICAgICAgdmFyIHNpbmsgPSBSZWxheVJlY29yZFNvdXJjZS5jcmVhdGUoKTtcbiAgICAgICAgdmFyIG11dGF0b3IgPSBuZXcgUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yKF90aGlzMi5fc3RvcmUuZ2V0U291cmNlKCksIHNpbmspO1xuICAgICAgICB2YXIgcmVjb3JkU291cmNlUHJveHkgPSBuZXcgUmVsYXlSZWNvcmRTb3VyY2VQcm94eShtdXRhdG9yLCBfdGhpczIuX2dldERhdGFJRCk7XG4gICAgICAgIGFwcGx5V2l0aEd1YXJkKHVwZGF0ZXIsIG51bGwsIFtyZWNvcmRTb3VyY2VQcm94eV0sIG51bGwsICdSZWxheVB1Ymxpc2hRdWV1ZTpjb21taXREYXRhJyk7XG4gICAgICAgIGludmFsaWRhdGVkU3RvcmUgPSBpbnZhbGlkYXRlZFN0b3JlIHx8IHJlY29yZFNvdXJjZVByb3h5LmlzU3RvcmVNYXJrZWRGb3JJbnZhbGlkYXRpb24oKTtcbiAgICAgICAgdmFyIGlkc01hcmtlZEZvckludmFsaWRhdGlvbiA9IHJlY29yZFNvdXJjZVByb3h5LmdldElEc01hcmtlZEZvckludmFsaWRhdGlvbigpO1xuXG4gICAgICAgIF90aGlzMi5fc3RvcmUucHVibGlzaChzaW5rLCBpZHNNYXJrZWRGb3JJbnZhbGlkYXRpb24pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5fcGVuZGluZ0RhdGEuY2xlYXIoKTtcblxuICAgIHJldHVybiBpbnZhbGlkYXRlZFN0b3JlO1xuICB9XG4gIC8qKlxuICAgKiBOb3RlIHRoYXQgdW5saWtlIF9jb21taXREYXRhLCBfYXBwbHlVcGRhdGVzIHdpbGwgTk9UIHJldHVybiBhIGJvb2xlYW5cbiAgICogaW5kaWNhdGluZyBpZiB0aGUgc3RvcmUgd2FzIGdsb2JhbGx5IGludmFsaWRhdGVkLCBzaW5jZSBpbnZhbGlkYXRpbmcgdGhlXG4gICAqIHN0b3JlIGR1cmluZyBhbiBvcHRpbWlzdGljIHVwZGF0ZSBpcyBhIG5vLW9wLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fYXBwbHlVcGRhdGVzID0gZnVuY3Rpb24gX2FwcGx5VXBkYXRlcygpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBzaW5rID0gUmVsYXlSZWNvcmRTb3VyY2UuY3JlYXRlKCk7XG4gICAgdmFyIG11dGF0b3IgPSBuZXcgUmVsYXlSZWNvcmRTb3VyY2VNdXRhdG9yKHRoaXMuX3N0b3JlLmdldFNvdXJjZSgpLCBzaW5rKTtcbiAgICB2YXIgcmVjb3JkU291cmNlUHJveHkgPSBuZXcgUmVsYXlSZWNvcmRTb3VyY2VQcm94eShtdXRhdG9yLCB0aGlzLl9nZXREYXRhSUQsIHRoaXMuX2hhbmRsZXJQcm92aWRlcik7XG5cbiAgICB2YXIgcHJvY2Vzc1VwZGF0ZSA9IGZ1bmN0aW9uIHByb2Nlc3NVcGRhdGUob3B0aW1pc3RpY1VwZGF0ZSkge1xuICAgICAgaWYgKG9wdGltaXN0aWNVcGRhdGUuc3RvcmVVcGRhdGVyKSB7XG4gICAgICAgIHZhciBzdG9yZVVwZGF0ZXIgPSBvcHRpbWlzdGljVXBkYXRlLnN0b3JlVXBkYXRlcjtcbiAgICAgICAgYXBwbHlXaXRoR3VhcmQoc3RvcmVVcGRhdGVyLCBudWxsLCBbcmVjb3JkU291cmNlUHJveHldLCBudWxsLCAnUmVsYXlQdWJsaXNoUXVldWU6YXBwbHlVcGRhdGVzJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb3BlcmF0aW9uID0gb3B0aW1pc3RpY1VwZGF0ZS5vcGVyYXRpb24sXG4gICAgICAgICAgICBwYXlsb2FkID0gb3B0aW1pc3RpY1VwZGF0ZS5wYXlsb2FkLFxuICAgICAgICAgICAgdXBkYXRlciA9IG9wdGltaXN0aWNVcGRhdGUudXBkYXRlcjtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHBheWxvYWQuc291cmNlLFxuICAgICAgICAgICAgZmllbGRQYXlsb2FkcyA9IHBheWxvYWQuZmllbGRQYXlsb2FkcztcbiAgICAgICAgdmFyIHJlY29yZFNvdXJjZVNlbGVjdG9yUHJveHkgPSBuZXcgUmVsYXlSZWNvcmRTb3VyY2VTZWxlY3RvclByb3h5KG11dGF0b3IsIHJlY29yZFNvdXJjZVByb3h5LCBvcGVyYXRpb24uZnJhZ21lbnQpO1xuICAgICAgICB2YXIgc2VsZWN0b3JEYXRhO1xuXG4gICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICByZWNvcmRTb3VyY2VQcm94eS5wdWJsaXNoU291cmNlKHNvdXJjZSwgZmllbGRQYXlsb2Fkcyk7XG4gICAgICAgICAgc2VsZWN0b3JEYXRhID0gbG9va3VwU2VsZWN0b3Ioc291cmNlLCBvcGVyYXRpb24uZnJhZ21lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVwZGF0ZXIpIHtcbiAgICAgICAgICBhcHBseVdpdGhHdWFyZCh1cGRhdGVyLCBudWxsLCBbcmVjb3JkU291cmNlU2VsZWN0b3JQcm94eSwgc2VsZWN0b3JEYXRhXSwgbnVsbCwgJ1JlbGF5UHVibGlzaFF1ZXVlOmFwcGx5VXBkYXRlcycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTsgLy8gcmVydW4gYWxsIHVwZGF0ZXJzIGluIGNhc2Ugd2UgYXJlIHJ1bm5pbmcgYSByZWJhc2VcblxuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdCYWNrdXBSZWJhc2UgJiYgdGhpcy5fYXBwbGllZE9wdGltaXN0aWNVcGRhdGVzLnNpemUpIHtcbiAgICAgIHRoaXMuX2FwcGxpZWRPcHRpbWlzdGljVXBkYXRlcy5mb3JFYWNoKHByb2Nlc3NVcGRhdGUpO1xuICAgIH0gLy8gYXBwbHkgYW55IG5ldyB1cGRhdGVyc1xuXG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ09wdGltaXN0aWNVcGRhdGVzLnNpemUpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdPcHRpbWlzdGljVXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpbWlzdGljVXBkYXRlKSB7XG4gICAgICAgIHByb2Nlc3NVcGRhdGUob3B0aW1pc3RpY1VwZGF0ZSk7XG5cbiAgICAgICAgX3RoaXMzLl9hcHBsaWVkT3B0aW1pc3RpY1VwZGF0ZXMuYWRkKG9wdGltaXN0aWNVcGRhdGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3BlbmRpbmdPcHRpbWlzdGljVXBkYXRlcy5jbGVhcigpO1xuICAgIH1cblxuICAgIHRoaXMuX3N0b3JlLnB1Ymxpc2goc2luayk7XG4gIH07XG5cbiAgcmV0dXJuIFJlbGF5UHVibGlzaFF1ZXVlO1xufSgpO1xuXG5mdW5jdGlvbiBsb29rdXBTZWxlY3Rvcihzb3VyY2UsIHNlbGVjdG9yKSB7XG4gIHZhciBzZWxlY3RvckRhdGEgPSBSZWxheVJlYWRlci5yZWFkKHNvdXJjZSwgc2VsZWN0b3IpLmRhdGE7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhciBkZWVwRnJlZXplID0gcmVxdWlyZSgnLi4vdXRpbC9kZWVwRnJlZXplJyk7XG5cbiAgICBpZiAoc2VsZWN0b3JEYXRhKSB7XG4gICAgICBkZWVwRnJlZXplKHNlbGVjdG9yRGF0YSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlbGVjdG9yRGF0YTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheVB1Ymxpc2hRdWV1ZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBSZWxheUZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4uL3V0aWwvUmVsYXlGZWF0dXJlRmxhZ3MnKTtcblxudmFyIFJlbGF5TW9kZXJuUmVjb3JkID0gcmVxdWlyZSgnLi9SZWxheU1vZGVyblJlY29yZCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3V0aWwvUmVsYXlDb25jcmV0ZU5vZGUnKSxcbiAgICBDTElFTlRfRVhURU5TSU9OID0gX3JlcXVpcmUuQ0xJRU5UX0VYVEVOU0lPTixcbiAgICBDT05ESVRJT04gPSBfcmVxdWlyZS5DT05ESVRJT04sXG4gICAgREVGRVIgPSBfcmVxdWlyZS5ERUZFUixcbiAgICBGTElHSFRfRklFTEQgPSBfcmVxdWlyZS5GTElHSFRfRklFTEQsXG4gICAgRlJBR01FTlRfU1BSRUFEID0gX3JlcXVpcmUuRlJBR01FTlRfU1BSRUFELFxuICAgIElOTElORV9EQVRBX0ZSQUdNRU5UX1NQUkVBRCA9IF9yZXF1aXJlLklOTElORV9EQVRBX0ZSQUdNRU5UX1NQUkVBRCxcbiAgICBJTkxJTkVfRlJBR01FTlQgPSBfcmVxdWlyZS5JTkxJTkVfRlJBR01FTlQsXG4gICAgTElOS0VEX0ZJRUxEID0gX3JlcXVpcmUuTElOS0VEX0ZJRUxELFxuICAgIE1PRFVMRV9JTVBPUlQgPSBfcmVxdWlyZS5NT0RVTEVfSU1QT1JULFxuICAgIFJFUVVJUkVEX0ZJRUxEID0gX3JlcXVpcmUuUkVRVUlSRURfRklFTEQsXG4gICAgUkVMQVlfUkVTT0xWRVIgPSBfcmVxdWlyZS5SRUxBWV9SRVNPTFZFUixcbiAgICBTQ0FMQVJfRklFTEQgPSBfcmVxdWlyZS5TQ0FMQVJfRklFTEQsXG4gICAgU1RSRUFNID0gX3JlcXVpcmUuU1RSRUFNO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlUmVhY3RGbGlnaHRVdGlscycpLFxuICAgIGdldFJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2UgPSBfcmVxdWlyZTIuZ2V0UmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZTtcblxudmFyIF9yZXF1aXJlMyA9IHJlcXVpcmUoJy4vUmVsYXlTdG9yZVV0aWxzJyksXG4gICAgRlJBR01FTlRTX0tFWSA9IF9yZXF1aXJlMy5GUkFHTUVOVFNfS0VZLFxuICAgIEZSQUdNRU5UX09XTkVSX0tFWSA9IF9yZXF1aXJlMy5GUkFHTUVOVF9PV05FUl9LRVksXG4gICAgRlJBR01FTlRfUFJPUF9OQU1FX0tFWSA9IF9yZXF1aXJlMy5GUkFHTUVOVF9QUk9QX05BTUVfS0VZLFxuICAgIElEX0tFWSA9IF9yZXF1aXJlMy5JRF9LRVksXG4gICAgSVNfV0lUSElOX1VOTUFUQ0hFRF9UWVBFX1JFRklORU1FTlQgPSBfcmVxdWlyZTMuSVNfV0lUSElOX1VOTUFUQ0hFRF9UWVBFX1JFRklORU1FTlQsXG4gICAgTU9EVUxFX0NPTVBPTkVOVF9LRVkgPSBfcmVxdWlyZTMuTU9EVUxFX0NPTVBPTkVOVF9LRVksXG4gICAgUk9PVF9JRCA9IF9yZXF1aXJlMy5ST09UX0lELFxuICAgIGdldEFyZ3VtZW50VmFsdWVzID0gX3JlcXVpcmUzLmdldEFyZ3VtZW50VmFsdWVzLFxuICAgIGdldFN0b3JhZ2VLZXkgPSBfcmVxdWlyZTMuZ2V0U3RvcmFnZUtleSxcbiAgICBnZXRNb2R1bGVDb21wb25lbnRLZXkgPSBfcmVxdWlyZTMuZ2V0TW9kdWxlQ29tcG9uZW50S2V5O1xuXG52YXIgX3JlcXVpcmU0ID0gcmVxdWlyZSgnLi9SZXNvbHZlckZyYWdtZW50cycpLFxuICAgIHdpdGhSZXNvbHZlckNvbnRleHQgPSBfcmVxdWlyZTQud2l0aFJlc29sdmVyQ29udGV4dDtcblxudmFyIF9yZXF1aXJlNSA9IHJlcXVpcmUoJy4vVHlwZUlEJyksXG4gICAgZ2VuZXJhdGVUeXBlSUQgPSBfcmVxdWlyZTUuZ2VuZXJhdGVUeXBlSUQ7XG5cbmZ1bmN0aW9uIHJlYWQocmVjb3JkU291cmNlLCBzZWxlY3Rvcikge1xuICB2YXIgcmVhZGVyID0gbmV3IFJlbGF5UmVhZGVyKHJlY29yZFNvdXJjZSwgc2VsZWN0b3IpO1xuICByZXR1cm4gcmVhZGVyLnJlYWQoKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBSZWxheVJlYWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlbGF5UmVhZGVyKHJlY29yZFNvdXJjZSwgc2VsZWN0b3IpIHtcbiAgICB0aGlzLl9pc01pc3NpbmdEYXRhID0gZmFsc2U7XG4gICAgdGhpcy5faXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudCA9IGZhbHNlO1xuICAgIHRoaXMuX21pc3NpbmdSZXF1aXJlZEZpZWxkcyA9IG51bGw7XG4gICAgdGhpcy5fb3duZXIgPSBzZWxlY3Rvci5vd25lcjtcbiAgICB0aGlzLl9yZWNvcmRTb3VyY2UgPSByZWNvcmRTb3VyY2U7XG4gICAgdGhpcy5fc2VlblJlY29yZHMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICB0aGlzLl92YXJpYWJsZXMgPSBzZWxlY3Rvci52YXJpYWJsZXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVsYXlSZWFkZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZWFkID0gZnVuY3Rpb24gcmVhZCgpIHtcbiAgICB2YXIgX3RoaXMkX3NlbGVjdG9yID0gdGhpcy5fc2VsZWN0b3IsXG4gICAgICAgIG5vZGUgPSBfdGhpcyRfc2VsZWN0b3Iubm9kZSxcbiAgICAgICAgZGF0YUlEID0gX3RoaXMkX3NlbGVjdG9yLmRhdGFJRCxcbiAgICAgICAgaXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudCA9IF90aGlzJF9zZWxlY3Rvci5pc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50O1xuICAgIHZhciBhYnN0cmFjdEtleSA9IG5vZGUuYWJzdHJhY3RLZXk7XG5cbiAgICB2YXIgcmVjb3JkID0gdGhpcy5fcmVjb3JkU291cmNlLmdldChkYXRhSUQpOyAvLyBSZWxheSBoaXN0b3JpY2FsbHkgYWxsb3dlZCBjaGlsZCBmcmFnbWVudHMgdG8gYmUgcmVhZCBldmVuIGlmIHRoZSByb290IG9iamVjdFxuICAgIC8vIGRpZCBub3QgbWF0Y2ggdGhlIHR5cGUgb2YgdGhlIGZyYWdtZW50OiBlaXRoZXIgdGhlIHJvb3Qgb2JqZWN0IGhhcyBhIGRpZmZlcmVudFxuICAgIC8vIGNvbmNyZXRlIHR5cGUgdGhhbiB0aGUgZnJhZ21lbnQgKGZvciBjb25jcmV0ZSBmcmFnbWVudHMpIG9yIHRoZSByb290IG9iamVjdCBkb2VzXG4gICAgLy8gbm90IGNvbmZvcm0gdG8gdGhlIGludGVyZmFjZS91bmlvbiBmb3IgYWJzdHJhY3QgZnJhZ21lbnRzLlxuICAgIC8vIEZvciBzdXNwZW5zZSBwdXJwb3NlcywgaG93ZXZlciwgd2Ugd2FudCB0byBhY2N1cmF0ZWx5IGNvbXB1dGUgd2hldGhlciBhbnkgZGF0YVxuICAgIC8vIGlzIG1pc3Npbmc6IGJ1dCBpZiB0aGUgZnJhZ21lbnQgdHlwZSBkb2Vzbid0IG1hdGNoIChvciBhIHBhcmVudCB0eXBlIGRpZG4ndFxuICAgIC8vIG1hdGNoKSwgdGhlbiBubyBkYXRhIGlzIGV4cGVjdGVkIHRvIGJlIHByZXNlbnQuXG4gICAgLy8gQnkgZGVmYXVsdCBkYXRhIGlzIGV4cGVjdGVkIHRvIGJlIHByZXNlbnQgdW5sZXNzIHRoaXMgc2VsZWN0b3Igd2FzIHJlYWQgb3V0XG4gICAgLy8gZnJvbSB3aXRoaW4gYSBub24tbWF0Y2hpbmcgdHlwZSByZWZpbmVtZW50IGluIGEgcGFyZW50IGZyYWdtZW50OlxuXG5cbiAgICB2YXIgaXNEYXRhRXhwZWN0ZWRUb0JlUHJlc2VudCA9ICFpc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50OyAvLyBJZiB0aGlzIGlzIGEgY29uY3JldGUgZnJhZ21lbnQgYW5kIHRoZSBjb25jcmV0ZSB0eXBlIG9mIHRoZSByZWNvcmQgZG9lcyBub3RcbiAgICAvLyBtYXRjaCwgdGhlbiBubyBkYXRhIGlzIGV4cGVjdGVkIHRvIGJlIHByZXNlbnQuXG5cbiAgICBpZiAoaXNEYXRhRXhwZWN0ZWRUb0JlUHJlc2VudCAmJiBhYnN0cmFjdEtleSA9PSBudWxsICYmIHJlY29yZCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVjb3JkVHlwZSA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFR5cGUocmVjb3JkKTtcblxuICAgICAgaWYgKHJlY29yZFR5cGUgIT09IG5vZGUudHlwZSAmJiBkYXRhSUQgIT09IFJPT1RfSUQpIHtcbiAgICAgICAgaXNEYXRhRXhwZWN0ZWRUb0JlUHJlc2VudCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gLy8gSWYgdGhpcyBpcyBhbiBhYnN0cmFjdCBmcmFnbWVudCAoYW5kIHRoZSBwcmVjaXNlIHJlZmluZW1lbnQgR0sgaXMgZW5hYmxlZClcbiAgICAvLyB0aGVuIGRhdGEgaXMgb25seSBleHBlY3RlZCB0byBiZSBwcmVzZW50IGlmIHRoZSByZWNvcmQgdHlwZSBpcyBrbm93biB0b1xuICAgIC8vIGltcGxlbWVudCB0aGUgaW50ZXJmYWNlLiBJZiB3ZSBhcmVuJ3Qgc3VyZSB3aGV0aGVyIHRoZSByZWNvcmQgaW1wbGVtZW50c1xuICAgIC8vIHRoZSBpbnRlcmZhY2UsIHRoYXQgaXRzZWxmIGNvbnN0aXR1dGVzIFwiZXhwZWN0ZWRcIiBkYXRhIGJlaW5nIG1pc3NpbmcuXG5cblxuICAgIGlmIChpc0RhdGFFeHBlY3RlZFRvQmVQcmVzZW50ICYmIGFic3RyYWN0S2V5ICE9IG51bGwgJiYgcmVjb3JkICE9IG51bGwgJiYgUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX1BSRUNJU0VfVFlQRV9SRUZJTkVNRU5UKSB7XG4gICAgICB2YXIgX3JlY29yZFR5cGUgPSBSZWxheU1vZGVyblJlY29yZC5nZXRUeXBlKHJlY29yZCk7XG5cbiAgICAgIHZhciB0eXBlSUQgPSBnZW5lcmF0ZVR5cGVJRChfcmVjb3JkVHlwZSk7XG5cbiAgICAgIHZhciB0eXBlUmVjb3JkID0gdGhpcy5fcmVjb3JkU291cmNlLmdldCh0eXBlSUQpO1xuXG4gICAgICB2YXIgaW1wbGVtZW50c0ludGVyZmFjZSA9IHR5cGVSZWNvcmQgIT0gbnVsbCA/IFJlbGF5TW9kZXJuUmVjb3JkLmdldFZhbHVlKHR5cGVSZWNvcmQsIGFic3RyYWN0S2V5KSA6IG51bGw7XG5cbiAgICAgIGlmIChpbXBsZW1lbnRzSW50ZXJmYWNlID09PSBmYWxzZSkge1xuICAgICAgICAvLyBUeXBlIGtub3duIHRvIG5vdCBpbXBsZW1lbnQgdGhlIGludGVyZmFjZVxuICAgICAgICBpc0RhdGFFeHBlY3RlZFRvQmVQcmVzZW50ID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGltcGxlbWVudHNJbnRlcmZhY2UgPT0gbnVsbCkge1xuICAgICAgICAvLyBEb24ndCBrbm93IGlmIHRoZSB0eXBlIGltcGxlbWVudHMgdGhlIGludGVyZmFjZSBvciBub3RcbiAgICAgICAgdGhpcy5faXNNaXNzaW5nRGF0YSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudCA9ICFpc0RhdGFFeHBlY3RlZFRvQmVQcmVzZW50O1xuXG4gICAgdmFyIGRhdGEgPSB0aGlzLl90cmF2ZXJzZShub2RlLCBkYXRhSUQsIG51bGwpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IGRhdGEsXG4gICAgICBpc01pc3NpbmdEYXRhOiB0aGlzLl9pc01pc3NpbmdEYXRhICYmIGlzRGF0YUV4cGVjdGVkVG9CZVByZXNlbnQsXG4gICAgICBzZWVuUmVjb3JkczogdGhpcy5fc2VlblJlY29yZHMsXG4gICAgICBzZWxlY3RvcjogdGhpcy5fc2VsZWN0b3IsXG4gICAgICBtaXNzaW5nUmVxdWlyZWRGaWVsZHM6IHRoaXMuX21pc3NpbmdSZXF1aXJlZEZpZWxkc1xuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLl90cmF2ZXJzZSA9IGZ1bmN0aW9uIF90cmF2ZXJzZShub2RlLCBkYXRhSUQsIHByZXZEYXRhKSB7XG4gICAgdmFyIHJlY29yZCA9IHRoaXMuX3JlY29yZFNvdXJjZS5nZXQoZGF0YUlEKTtcblxuICAgIHRoaXMuX3NlZW5SZWNvcmRzLmFkZChkYXRhSUQpO1xuXG4gICAgaWYgKHJlY29yZCA9PSBudWxsKSB7XG4gICAgICBpZiAocmVjb3JkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5faXNNaXNzaW5nRGF0YSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSBwcmV2RGF0YSB8fCB7fTtcblxuICAgIHZhciBoYWRSZXF1aXJlZERhdGEgPSB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMobm9kZS5zZWxlY3Rpb25zLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgcmV0dXJuIGhhZFJlcXVpcmVkRGF0YSA/IGRhdGEgOiBudWxsO1xuICB9O1xuXG4gIF9wcm90by5fZ2V0VmFyaWFibGVWYWx1ZSA9IGZ1bmN0aW9uIF9nZXRWYXJpYWJsZVZhbHVlKG5hbWUpIHtcbiAgICAhdGhpcy5fdmFyaWFibGVzLmhhc093blByb3BlcnR5KG5hbWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWFkZXIoKTogVW5kZWZpbmVkIHZhcmlhYmxlIGAlc2AuJywgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cblxuICAgIHJldHVybiB0aGlzLl92YXJpYWJsZXNbbmFtZV07XG4gIH07XG5cbiAgX3Byb3RvLl9tYXliZVJlcG9ydFVuZXhwZWN0ZWROdWxsID0gZnVuY3Rpb24gX21heWJlUmVwb3J0VW5leHBlY3RlZE51bGwoZmllbGRQYXRoLCBhY3Rpb24sIHJlY29yZCkge1xuICAgIHZhciBfdGhpcyRfbWlzc2luZ1JlcXVpcmU7XG5cbiAgICBpZiAoKChfdGhpcyRfbWlzc2luZ1JlcXVpcmUgPSB0aGlzLl9taXNzaW5nUmVxdWlyZWRGaWVsZHMpID09PSBudWxsIHx8IF90aGlzJF9taXNzaW5nUmVxdWlyZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkX21pc3NpbmdSZXF1aXJlLmFjdGlvbikgPT09ICdUSFJPVycpIHtcbiAgICAgIC8vIENoYWluZWQgQHJlcXVpcmVkIGRpcmVjdGl2ZXMgbWF5IGNhdXNlIGEgcGFyZW50IGBAcmVxdWlyZWQoYWN0aW9uOlxuICAgICAgLy8gVEhST1cpYCBmaWVsZCB0byBiZWNvbWUgbnVsbCwgc28gdGhlIGZpcnN0IG1pc3NpbmcgZmllbGQgd2VcbiAgICAgIC8vIGVuY291bnRlciBpcyBsaWtlbHkgdG8gYmUgdGhlIHJvb3QgY2F1c2Ugb2YgdGhlIGVycm9yLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvd25lciA9IHRoaXMuX3NlbGVjdG9yLm5vZGUubmFtZTtcblxuICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICBjYXNlICdUSFJPVyc6XG4gICAgICAgIHRoaXMuX21pc3NpbmdSZXF1aXJlZEZpZWxkcyA9IHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBmaWVsZDoge1xuICAgICAgICAgICAgcGF0aDogZmllbGRQYXRoLFxuICAgICAgICAgICAgb3duZXI6IG93bmVyXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm47XG5cbiAgICAgIGNhc2UgJ0xPRyc6XG4gICAgICAgIGlmICh0aGlzLl9taXNzaW5nUmVxdWlyZWRGaWVsZHMgPT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuX21pc3NpbmdSZXF1aXJlZEZpZWxkcyA9IHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgZmllbGRzOiBbXVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9taXNzaW5nUmVxdWlyZWRGaWVsZHMuZmllbGRzLnB1c2goe1xuICAgICAgICAgIHBhdGg6IGZpZWxkUGF0aCxcbiAgICAgICAgICBvd25lcjogb3duZXJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhY3Rpb247XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fdHJhdmVyc2VTZWxlY3Rpb25zID0gZnVuY3Rpb24gX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb25zLCByZWNvcmQsIGRhdGEpXG4gIC8qIGhhZCBhbGwgZXhwZWN0ZWQgZGF0YSAqL1xuICB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VsZWN0aW9uID0gc2VsZWN0aW9uc1tpXTtcblxuICAgICAgc3dpdGNoIChzZWxlY3Rpb24ua2luZCkge1xuICAgICAgICBjYXNlIFJFUVVJUkVEX0ZJRUxEOlxuICAgICAgICAgICFSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUkVRVUlSRURfRElSRUNUSVZFUyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVhZGVyKCk6IEVuY291bnRlcmVkIGEgYEByZXF1aXJlZGAgZGlyZWN0aXZlIGF0IHBhdGggXCIlc1wiIGluIGAlc2Agd2l0aG91dCB0aGUgYEVOQUJMRV9SRVFVSVJFRF9ESVJFQ1RJVkVTYCBmZWF0dXJlIGZsYWcgZW5hYmxlZC4nLCBzZWxlY3Rpb24ucGF0aCwgdGhpcy5fc2VsZWN0b3Iubm9kZS5uYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICAgICAgICB2YXIgZmllbGRWYWx1ZSA9IHRoaXMuX3JlYWRSZXF1aXJlZEZpZWxkKHNlbGVjdGlvbiwgcmVjb3JkLCBkYXRhKTtcblxuICAgICAgICAgIGlmIChmaWVsZFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBhY3Rpb24gPSBzZWxlY3Rpb24uYWN0aW9uO1xuXG4gICAgICAgICAgICBpZiAoYWN0aW9uICE9PSAnTk9ORScpIHtcbiAgICAgICAgICAgICAgdGhpcy5fbWF5YmVSZXBvcnRVbmV4cGVjdGVkTnVsbChzZWxlY3Rpb24ucGF0aCwgYWN0aW9uLCByZWNvcmQpO1xuICAgICAgICAgICAgfSAvLyBXZSBhcmUgZ29pbmcgdG8gdGhyb3csIG9yIG91ciBwYXJlbnQgaXMgZ29pbmcgdG8gZ2V0IG51bGxlZCBvdXQuXG4gICAgICAgICAgICAvLyBFaXRoZXIgd2F5LCBzaWJsaW5nIHZhbHVlcyBhcmUgZ29pbmcgdG8gYmUgaWdub3JlZCwgc28gd2UgY2FuXG4gICAgICAgICAgICAvLyBiYWlsIGVhcmx5IGhlcmUgYXMgYW4gb3B0aW1pemF0aW9uLlxuXG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFNDQUxBUl9GSUVMRDpcbiAgICAgICAgICB0aGlzLl9yZWFkU2NhbGFyKHNlbGVjdGlvbiwgcmVjb3JkLCBkYXRhKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTElOS0VEX0ZJRUxEOlxuICAgICAgICAgIGlmIChzZWxlY3Rpb24ucGx1cmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWFkUGx1cmFsTGluayhzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3JlYWRMaW5rKHNlbGVjdGlvbiwgcmVjb3JkLCBkYXRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIENPTkRJVElPTjpcbiAgICAgICAgICB2YXIgY29uZGl0aW9uVmFsdWUgPSB0aGlzLl9nZXRWYXJpYWJsZVZhbHVlKHNlbGVjdGlvbi5jb25kaXRpb24pO1xuXG4gICAgICAgICAgaWYgKGNvbmRpdGlvblZhbHVlID09PSBzZWxlY3Rpb24ucGFzc2luZ1ZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgaGFzRXhwZWN0ZWREYXRhID0gdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5zZWxlY3Rpb25zLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgICBpZiAoIWhhc0V4cGVjdGVkRGF0YSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBJTkxJTkVfRlJBR01FTlQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIGFic3RyYWN0S2V5ID0gc2VsZWN0aW9uLmFic3RyYWN0S2V5O1xuXG4gICAgICAgICAgICBpZiAoYWJzdHJhY3RLZXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyBjb25jcmV0ZSB0eXBlIHJlZmluZW1lbnQ6IG9ubHkgcmVhZCBkYXRhIGlmIHRoZSB0eXBlIGV4YWN0bHkgbWF0Y2hlc1xuICAgICAgICAgICAgICB2YXIgdHlwZU5hbWUgPSBSZWxheU1vZGVyblJlY29yZC5nZXRUeXBlKHJlY29yZCk7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVOYW1lICE9IG51bGwgJiYgdHlwZU5hbWUgPT09IHNlbGVjdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9oYXNFeHBlY3RlZERhdGEgPSB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLnNlbGVjdGlvbnMsIHJlY29yZCwgZGF0YSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIV9oYXNFeHBlY3RlZERhdGEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX1BSRUNJU0VfVFlQRV9SRUZJTkVNRU5UKSB7XG4gICAgICAgICAgICAgIC8vIFNpbWlsYXIgdG8gdGhlIGxvZ2ljIGluIHJlYWQoKTogZGF0YSBpcyBvbmx5IGV4cGVjdGVkIHRvIGJlIHByZXNlbnRcbiAgICAgICAgICAgICAgLy8gaWYgdGhlIHJlY29yZCBpcyBrbm93biB0byBjb25mb3JtIHRvIHRoZSBpbnRlcmZhY2UuIElmIHdlIGRvbid0IGtub3dcbiAgICAgICAgICAgICAgLy8gd2hldGhlciB0aGUgdHlwZSBjb25mb3JtcyBvciBub3QsIHRoYXQgY29uc3RpdHV0ZXMgbWlzc2luZyBkYXRhLlxuICAgICAgICAgICAgICAvLyBzdG9yZSBmbGFncyB0byByZXNldCBhZnRlciByZWFkaW5nXG4gICAgICAgICAgICAgIHZhciBwYXJlbnRJc01pc3NpbmdEYXRhID0gdGhpcy5faXNNaXNzaW5nRGF0YTtcbiAgICAgICAgICAgICAgdmFyIHBhcmVudElzV2l0aGluVW5tYXRjaGVkVHlwZVJlZmluZW1lbnQgPSB0aGlzLl9pc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50O1xuXG4gICAgICAgICAgICAgIHZhciBfdHlwZU5hbWUgPSBSZWxheU1vZGVyblJlY29yZC5nZXRUeXBlKHJlY29yZCk7XG5cbiAgICAgICAgICAgICAgdmFyIHR5cGVJRCA9IGdlbmVyYXRlVHlwZUlEKF90eXBlTmFtZSk7XG5cbiAgICAgICAgICAgICAgdmFyIHR5cGVSZWNvcmQgPSB0aGlzLl9yZWNvcmRTb3VyY2UuZ2V0KHR5cGVJRCk7XG5cbiAgICAgICAgICAgICAgdmFyIGltcGxlbWVudHNJbnRlcmZhY2UgPSB0eXBlUmVjb3JkICE9IG51bGwgPyBSZWxheU1vZGVyblJlY29yZC5nZXRWYWx1ZSh0eXBlUmVjb3JkLCBhYnN0cmFjdEtleSkgOiBudWxsO1xuICAgICAgICAgICAgICB0aGlzLl9pc1dpdGhpblVubWF0Y2hlZFR5cGVSZWZpbmVtZW50ID0gcGFyZW50SXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudCB8fCBpbXBsZW1lbnRzSW50ZXJmYWNlID09PSBmYWxzZTtcblxuICAgICAgICAgICAgICB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLnNlbGVjdGlvbnMsIHJlY29yZCwgZGF0YSk7XG5cbiAgICAgICAgICAgICAgdGhpcy5faXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudCA9IHBhcmVudElzV2l0aGluVW5tYXRjaGVkVHlwZVJlZmluZW1lbnQ7XG5cbiAgICAgICAgICAgICAgaWYgKGltcGxlbWVudHNJbnRlcmZhY2UgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgLy8gVHlwZSBrbm93biB0byBub3QgaW1wbGVtZW50IHRoZSBpbnRlcmZhY2UsIG5vIGRhdGEgZXhwZWN0ZWRcbiAgICAgICAgICAgICAgICB0aGlzLl9pc01pc3NpbmdEYXRhID0gcGFyZW50SXNNaXNzaW5nRGF0YTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbXBsZW1lbnRzSW50ZXJmYWNlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBEb24ndCBrbm93IGlmIHRoZSB0eXBlIGltcGxlbWVudHMgdGhlIGludGVyZmFjZSBvciBub3RcbiAgICAgICAgICAgICAgICB0aGlzLl9pc01pc3NpbmdEYXRhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbGVnYWN5IGJlaGF2aW9yIGZvciBhYnN0cmFjdCByZWZpbmVtZW50czogYWx3YXlzIHJlYWQgZXZlblxuICAgICAgICAgICAgICAvLyBpZiB0aGUgdHlwZSBkb2Vzbid0IGNvbmZvcm0gYW5kIGRvbid0IHJlc2V0IGlzTWlzc2luZ0RhdGFcbiAgICAgICAgICAgICAgdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5zZWxlY3Rpb25zLCByZWNvcmQsIGRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBSRUxBWV9SRVNPTFZFUjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAoIVJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9SRUxBWV9SRVNPTFZFUlMpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWxheSBSZXNvbHZlciBmaWVsZHMgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9yZWFkUmVzb2x2ZXJGaWVsZChzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIEZSQUdNRU5UX1NQUkVBRDpcbiAgICAgICAgICB0aGlzLl9jcmVhdGVGcmFnbWVudFBvaW50ZXIoc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBNT0RVTEVfSU1QT1JUOlxuICAgICAgICAgIHRoaXMuX3JlYWRNb2R1bGVJbXBvcnQoc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBJTkxJTkVfREFUQV9GUkFHTUVOVF9TUFJFQUQ6XG4gICAgICAgICAgdGhpcy5fY3JlYXRlSW5saW5lRGF0YU9yUmVzb2x2ZXJGcmFnbWVudFBvaW50ZXIoc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBERUZFUjpcbiAgICAgICAgY2FzZSBDTElFTlRfRVhURU5TSU9OOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBpc01pc3NpbmdEYXRhID0gdGhpcy5faXNNaXNzaW5nRGF0YTtcblxuICAgICAgICAgICAgdmFyIF9oYXNFeHBlY3RlZERhdGEyID0gdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5zZWxlY3Rpb25zLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgICB0aGlzLl9pc01pc3NpbmdEYXRhID0gaXNNaXNzaW5nRGF0YTtcblxuICAgICAgICAgICAgaWYgKCFfaGFzRXhwZWN0ZWREYXRhMikge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIFNUUkVBTTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgX2hhc0V4cGVjdGVkRGF0YTMgPSB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLnNlbGVjdGlvbnMsIHJlY29yZCwgZGF0YSk7XG5cbiAgICAgICAgICAgIGlmICghX2hhc0V4cGVjdGVkRGF0YTMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBGTElHSFRfRklFTEQ6XG4gICAgICAgICAgaWYgKFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9SRUFDVF9GTElHSFRfQ09NUE9ORU5UX0ZJRUxEKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWFkRmxpZ2h0RmllbGQoc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZsaWdodCBmaWVsZHMgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgc2VsZWN0aW9uO1xuICAgICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVhZGVyKCk6IFVuZXhwZWN0ZWQgYXN0IGtpbmQgYCVzYC4nLCBzZWxlY3Rpb24ua2luZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5fcmVhZFJlcXVpcmVkRmllbGQgPSBmdW5jdGlvbiBfcmVhZFJlcXVpcmVkRmllbGQoc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpIHtcbiAgICBzd2l0Y2ggKHNlbGVjdGlvbi5maWVsZC5raW5kKSB7XG4gICAgICBjYXNlIFNDQUxBUl9GSUVMRDpcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWRTY2FsYXIoc2VsZWN0aW9uLmZpZWxkLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICBjYXNlIExJTktFRF9GSUVMRDpcbiAgICAgICAgaWYgKHNlbGVjdGlvbi5maWVsZC5wbHVyYWwpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fcmVhZFBsdXJhbExpbmsoc2VsZWN0aW9uLmZpZWxkLCByZWNvcmQsIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkTGluayhzZWxlY3Rpb24uZmllbGQsIHJlY29yZCwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc2VsZWN0aW9uLmZpZWxkLmtpbmQ7XG4gICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVhZGVyKCk6IFVuZXhwZWN0ZWQgYXN0IGtpbmQgYCVzYC4nLCBzZWxlY3Rpb24ua2luZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX3JlYWRSZXNvbHZlckZpZWxkID0gZnVuY3Rpb24gX3JlYWRSZXNvbHZlckZpZWxkKHNlbGVjdGlvbiwgcmVjb3JkLCBkYXRhKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBuYW1lID0gc2VsZWN0aW9uLm5hbWUsXG4gICAgICAgIGFsaWFzID0gc2VsZWN0aW9uLmFsaWFzLFxuICAgICAgICByZXNvbHZlck1vZHVsZSA9IHNlbGVjdGlvbi5yZXNvbHZlck1vZHVsZSxcbiAgICAgICAgZnJhZ21lbnQgPSBzZWxlY3Rpb24uZnJhZ21lbnQ7XG4gICAgdmFyIGtleSA9IHtcbiAgICAgIF9faWQ6IFJlbGF5TW9kZXJuUmVjb3JkLmdldERhdGFJRChyZWNvcmQpLFxuICAgICAgX19mcmFnbWVudE93bmVyOiB0aGlzLl9vd25lcixcbiAgICAgIF9fZnJhZ21lbnRzOiAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHt9LCBmcmFnbWVudC5uYW1lLCB7fSlcbiAgICB9O1xuICAgIHZhciByZXNvbHZlckNvbnRleHQgPSB7XG4gICAgICBnZXREYXRhRm9yUmVzb2x2ZXJGcmFnbWVudDogZnVuY3Rpb24gZ2V0RGF0YUZvclJlc29sdmVyRnJhZ21lbnQoc2luZ3VsYXJSZWFkZXJTZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3Jlc29sdmVyRnJhZ21lbnREYXRhO1xuXG4gICAgICAgIHZhciByZXNvbHZlckZyYWdtZW50RGF0YSA9IHt9O1xuXG4gICAgICAgIF90aGlzLl9jcmVhdGVJbmxpbmVEYXRhT3JSZXNvbHZlckZyYWdtZW50UG9pbnRlcihzaW5ndWxhclJlYWRlclNlbGVjdG9yLm5vZGUsIHJlY29yZCwgcmVzb2x2ZXJGcmFnbWVudERhdGEpO1xuXG4gICAgICAgIHZhciBhbnN3ZXIgPSAoX3Jlc29sdmVyRnJhZ21lbnREYXRhID0gcmVzb2x2ZXJGcmFnbWVudERhdGFbRlJBR01FTlRTX0tFWV0pID09PSBudWxsIHx8IF9yZXNvbHZlckZyYWdtZW50RGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3Jlc29sdmVyRnJhZ21lbnREYXRhW2ZyYWdtZW50Lm5hbWVdO1xuICAgICAgICAhKHR5cGVvZiBhbnN3ZXIgPT09ICdvYmplY3QnICYmIGFuc3dlciAhPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiRXhwZWN0ZWQgcmVhZGVyIGRhdGEgdG8gY29udGFpbiBhIF9fZnJhZ21lbnRzIHByb3BlcnR5IHdpdGggYSBwcm9wZXJ0eSBmb3IgdGhlIGZyYWdtZW50IG5hbWVkIFwiLmNvbmNhdChmcmFnbWVudC5uYW1lLCBcIiwgYnV0IGl0IGlzIG1pc3NpbmcuXCIpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHJldHVybiBhbnN3ZXI7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgcmVzb2x2ZXJSZXN1bHQgPSB3aXRoUmVzb2x2ZXJDb250ZXh0KHJlc29sdmVyQ29udGV4dCwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICgvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gLSByZXNvbHZlciBtb2R1bGUncyB0eXBlIHNpZ25hdHVyZSBpcyBhIGxpZVxuICAgICAgICByZXNvbHZlck1vZHVsZShrZXkpXG4gICAgICApO1xuICAgIH0pO1xuICAgIGRhdGFbYWxpYXMgIT09IG51bGwgJiYgYWxpYXMgIT09IHZvaWQgMCA/IGFsaWFzIDogbmFtZV0gPSByZXNvbHZlclJlc3VsdDtcbiAgICByZXR1cm4gcmVzb2x2ZXJSZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLl9yZWFkRmxpZ2h0RmllbGQgPSBmdW5jdGlvbiBfcmVhZEZsaWdodEZpZWxkKGZpZWxkLCByZWNvcmQsIGRhdGEpIHtcbiAgICB2YXIgX2ZpZWxkJGFsaWFzO1xuXG4gICAgdmFyIGFwcGxpY2F0aW9uTmFtZSA9IChfZmllbGQkYWxpYXMgPSBmaWVsZC5hbGlhcykgIT09IG51bGwgJiYgX2ZpZWxkJGFsaWFzICE9PSB2b2lkIDAgPyBfZmllbGQkYWxpYXMgOiBmaWVsZC5uYW1lO1xuICAgIHZhciBzdG9yYWdlS2V5ID0gZ2V0U3RvcmFnZUtleShmaWVsZCwgdGhpcy5fdmFyaWFibGVzKTtcbiAgICB2YXIgcmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZElEID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0TGlua2VkUmVjb3JkSUQocmVjb3JkLCBzdG9yYWdlS2V5KTtcblxuICAgIGlmIChyZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkSUQgPT0gbnVsbCkge1xuICAgICAgZGF0YVthcHBsaWNhdGlvbk5hbWVdID0gcmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZElEO1xuXG4gICAgICBpZiAocmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZElEID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5faXNNaXNzaW5nRGF0YSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkSUQ7XG4gICAgfVxuXG4gICAgdmFyIHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmQgPSB0aGlzLl9yZWNvcmRTb3VyY2UuZ2V0KHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmRJRCk7XG5cbiAgICB0aGlzLl9zZWVuUmVjb3Jkcy5hZGQocmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZElEKTtcblxuICAgIGlmIChyZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkID09IG51bGwpIHtcbiAgICAgIGRhdGFbYXBwbGljYXRpb25OYW1lXSA9IHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmQ7XG5cbiAgICAgIGlmIChyZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5faXNNaXNzaW5nRGF0YSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkO1xuICAgIH1cblxuICAgIHZhciBjbGllbnRSZXNwb25zZSA9IGdldFJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2UocmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZCk7XG4gICAgZGF0YVthcHBsaWNhdGlvbk5hbWVdID0gY2xpZW50UmVzcG9uc2U7XG4gICAgcmV0dXJuIGNsaWVudFJlc3BvbnNlO1xuICB9O1xuXG4gIF9wcm90by5fcmVhZFNjYWxhciA9IGZ1bmN0aW9uIF9yZWFkU2NhbGFyKGZpZWxkLCByZWNvcmQsIGRhdGEpIHtcbiAgICB2YXIgX2ZpZWxkJGFsaWFzMjtcblxuICAgIHZhciBhcHBsaWNhdGlvbk5hbWUgPSAoX2ZpZWxkJGFsaWFzMiA9IGZpZWxkLmFsaWFzKSAhPT0gbnVsbCAmJiBfZmllbGQkYWxpYXMyICE9PSB2b2lkIDAgPyBfZmllbGQkYWxpYXMyIDogZmllbGQubmFtZTtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0b3JhZ2VLZXkoZmllbGQsIHRoaXMuX3ZhcmlhYmxlcyk7XG4gICAgdmFyIHZhbHVlID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0VmFsdWUocmVjb3JkLCBzdG9yYWdlS2V5KTtcblxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9pc01pc3NpbmdEYXRhID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBkYXRhW2FwcGxpY2F0aW9uTmFtZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvLl9yZWFkTGluayA9IGZ1bmN0aW9uIF9yZWFkTGluayhmaWVsZCwgcmVjb3JkLCBkYXRhKSB7XG4gICAgdmFyIF9maWVsZCRhbGlhczM7XG5cbiAgICB2YXIgYXBwbGljYXRpb25OYW1lID0gKF9maWVsZCRhbGlhczMgPSBmaWVsZC5hbGlhcykgIT09IG51bGwgJiYgX2ZpZWxkJGFsaWFzMyAhPT0gdm9pZCAwID8gX2ZpZWxkJGFsaWFzMyA6IGZpZWxkLm5hbWU7XG4gICAgdmFyIHN0b3JhZ2VLZXkgPSBnZXRTdG9yYWdlS2V5KGZpZWxkLCB0aGlzLl92YXJpYWJsZXMpO1xuICAgIHZhciBsaW5rZWRJRCA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldExpbmtlZFJlY29yZElEKHJlY29yZCwgc3RvcmFnZUtleSk7XG5cbiAgICBpZiAobGlua2VkSUQgPT0gbnVsbCkge1xuICAgICAgZGF0YVthcHBsaWNhdGlvbk5hbWVdID0gbGlua2VkSUQ7XG5cbiAgICAgIGlmIChsaW5rZWRJRCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX2lzTWlzc2luZ0RhdGEgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlua2VkSUQ7XG4gICAgfVxuXG4gICAgdmFyIHByZXZEYXRhID0gZGF0YVthcHBsaWNhdGlvbk5hbWVdO1xuICAgICEocHJldkRhdGEgPT0gbnVsbCB8fCB0eXBlb2YgcHJldkRhdGEgPT09ICdvYmplY3QnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVhZGVyKCk6IEV4cGVjdGVkIGRhdGEgZm9yIGZpZWxkIGAlc2Agb24gcmVjb3JkIGAlc2AgJyArICd0byBiZSBhbiBvYmplY3QsIGdvdCBgJXNgLicsIGFwcGxpY2F0aW9uTmFtZSwgUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0RGF0YUlEKHJlY29yZCksIHByZXZEYXRhKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXZhcmlhbmNlXVxuXG4gICAgdmFyIHZhbHVlID0gdGhpcy5fdHJhdmVyc2UoZmllbGQsIGxpbmtlZElELCBwcmV2RGF0YSk7XG5cbiAgICBkYXRhW2FwcGxpY2F0aW9uTmFtZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvLl9yZWFkUGx1cmFsTGluayA9IGZ1bmN0aW9uIF9yZWFkUGx1cmFsTGluayhmaWVsZCwgcmVjb3JkLCBkYXRhKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX2ZpZWxkJGFsaWFzNDtcblxuICAgIHZhciBhcHBsaWNhdGlvbk5hbWUgPSAoX2ZpZWxkJGFsaWFzNCA9IGZpZWxkLmFsaWFzKSAhPT0gbnVsbCAmJiBfZmllbGQkYWxpYXM0ICE9PSB2b2lkIDAgPyBfZmllbGQkYWxpYXM0IDogZmllbGQubmFtZTtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0b3JhZ2VLZXkoZmllbGQsIHRoaXMuX3ZhcmlhYmxlcyk7XG4gICAgdmFyIGxpbmtlZElEcyA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldExpbmtlZFJlY29yZElEcyhyZWNvcmQsIHN0b3JhZ2VLZXkpO1xuXG4gICAgaWYgKGxpbmtlZElEcyA9PSBudWxsKSB7XG4gICAgICBkYXRhW2FwcGxpY2F0aW9uTmFtZV0gPSBsaW5rZWRJRHM7XG5cbiAgICAgIGlmIChsaW5rZWRJRHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9pc01pc3NpbmdEYXRhID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpbmtlZElEcztcbiAgICB9XG5cbiAgICB2YXIgcHJldkRhdGEgPSBkYXRhW2FwcGxpY2F0aW9uTmFtZV07XG4gICAgIShwcmV2RGF0YSA9PSBudWxsIHx8IEFycmF5LmlzQXJyYXkocHJldkRhdGEpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVhZGVyKCk6IEV4cGVjdGVkIGRhdGEgZm9yIGZpZWxkIGAlc2Agb24gcmVjb3JkIGAlc2AgJyArICd0byBiZSBhbiBhcnJheSwgZ290IGAlc2AuJywgYXBwbGljYXRpb25OYW1lLCBSZWxheU1vZGVyblJlY29yZC5nZXREYXRhSUQocmVjb3JkKSwgcHJldkRhdGEpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgbGlua2VkQXJyYXkgPSBwcmV2RGF0YSB8fCBbXTtcbiAgICBsaW5rZWRJRHMuZm9yRWFjaChmdW5jdGlvbiAobGlua2VkSUQsIG5leHRJbmRleCkge1xuICAgICAgaWYgKGxpbmtlZElEID09IG51bGwpIHtcbiAgICAgICAgaWYgKGxpbmtlZElEID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBfdGhpczIuX2lzTWlzc2luZ0RhdGEgPSB0cnVlO1xuICAgICAgICB9IC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuXG5cbiAgICAgICAgbGlua2VkQXJyYXlbbmV4dEluZGV4XSA9IGxpbmtlZElEO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SXRlbSA9IGxpbmtlZEFycmF5W25leHRJbmRleF07XG4gICAgICAhKHByZXZJdGVtID09IG51bGwgfHwgdHlwZW9mIHByZXZJdGVtID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlYWRlcigpOiBFeHBlY3RlZCBkYXRhIGZvciBmaWVsZCBgJXNgIG9uIHJlY29yZCBgJXNgICcgKyAndG8gYmUgYW4gb2JqZWN0LCBnb3QgYCVzYC4nLCBhcHBsaWNhdGlvbk5hbWUsIFJlbGF5TW9kZXJuUmVjb3JkLmdldERhdGFJRChyZWNvcmQpLCBwcmV2SXRlbSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXZhcmlhbmNlXVxuXG4gICAgICBsaW5rZWRBcnJheVtuZXh0SW5kZXhdID0gX3RoaXMyLl90cmF2ZXJzZShmaWVsZCwgbGlua2VkSUQsIHByZXZJdGVtKTtcbiAgICB9KTtcbiAgICBkYXRhW2FwcGxpY2F0aW9uTmFtZV0gPSBsaW5rZWRBcnJheTtcbiAgICByZXR1cm4gbGlua2VkQXJyYXk7XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIGEgUmVhZGVyTW9kdWxlSW1wb3J0LCB3aGljaCB3YXMgZ2VuZXJhdGVkIGZyb20gdXNpbmcgdGhlIEBtb2R1bGVcbiAgICogZGlyZWN0aXZlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fcmVhZE1vZHVsZUltcG9ydCA9IGZ1bmN0aW9uIF9yZWFkTW9kdWxlSW1wb3J0KG1vZHVsZUltcG9ydCwgcmVjb3JkLCBkYXRhKSB7XG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBjb21wb25lbnQgbW9kdWxlIGZyb20gdGhlIHN0b3JlOiBpZiB0aGUgZmllbGQgaXMgbWlzc2luZ1xuICAgIC8vIGl0IG1lYW5zIHdlIGRvbid0IGtub3cgd2hhdCBjb21wb25lbnQgdG8gcmVuZGVyIHRoZSBtYXRjaCB3aXRoLlxuICAgIHZhciBjb21wb25lbnRLZXkgPSBnZXRNb2R1bGVDb21wb25lbnRLZXkobW9kdWxlSW1wb3J0LmRvY3VtZW50TmFtZSk7XG4gICAgdmFyIGNvbXBvbmVudCA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFZhbHVlKHJlY29yZCwgY29tcG9uZW50S2V5KTtcblxuICAgIGlmIChjb21wb25lbnQgPT0gbnVsbCkge1xuICAgICAgaWYgKGNvbXBvbmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX2lzTWlzc2luZ0RhdGEgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBPdGhlcndpc2UsIHJlYWQgdGhlIGZyYWdtZW50IGFuZCBtb2R1bGUgYXNzb2NpYXRlZCB0byB0aGUgY29uY3JldGVcbiAgICAvLyB0eXBlLCBhbmQgcHV0IHRoYXQgZGF0YSB3aXRoIHRoZSByZXN1bHQ6XG4gICAgLy8gLSBGb3IgdGhlIG1hdGNoZWQgZnJhZ21lbnQsIGNyZWF0ZSB0aGUgcmVsZXZhbnQgZnJhZ21lbnQgcG9pbnRlciBhbmQgYWRkXG4gICAgLy8gICB0aGUgZXhwZWN0ZWQgZnJhZ21lbnRQcm9wTmFtZVxuICAgIC8vIC0gRm9yIHRoZSBtYXRjaGVkIG1vZHVsZSwgY3JlYXRlIGEgcmVmZXJlbmNlIHRvIHRoZSBtb2R1bGVcblxuXG4gICAgdGhpcy5fY3JlYXRlRnJhZ21lbnRQb2ludGVyKHtcbiAgICAgIGtpbmQ6ICdGcmFnbWVudFNwcmVhZCcsXG4gICAgICBuYW1lOiBtb2R1bGVJbXBvcnQuZnJhZ21lbnROYW1lLFxuICAgICAgYXJnczogbnVsbFxuICAgIH0sIHJlY29yZCwgZGF0YSk7XG5cbiAgICBkYXRhW0ZSQUdNRU5UX1BST1BfTkFNRV9LRVldID0gbW9kdWxlSW1wb3J0LmZyYWdtZW50UHJvcE5hbWU7XG4gICAgZGF0YVtNT0RVTEVfQ09NUE9ORU5UX0tFWV0gPSBjb21wb25lbnQ7XG4gIH07XG5cbiAgX3Byb3RvLl9jcmVhdGVGcmFnbWVudFBvaW50ZXIgPSBmdW5jdGlvbiBfY3JlYXRlRnJhZ21lbnRQb2ludGVyKGZyYWdtZW50U3ByZWFkLCByZWNvcmQsIGRhdGEpIHtcbiAgICB2YXIgZnJhZ21lbnRQb2ludGVycyA9IGRhdGFbRlJBR01FTlRTX0tFWV07XG5cbiAgICBpZiAoZnJhZ21lbnRQb2ludGVycyA9PSBudWxsKSB7XG4gICAgICBmcmFnbWVudFBvaW50ZXJzID0gZGF0YVtGUkFHTUVOVFNfS0VZXSA9IHt9O1xuICAgIH1cblxuICAgICEodHlwZW9mIGZyYWdtZW50UG9pbnRlcnMgPT09ICdvYmplY3QnICYmIGZyYWdtZW50UG9pbnRlcnMgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlYWRlcjogRXhwZWN0ZWQgZnJhZ21lbnQgc3ByZWFkIGRhdGEgdG8gYmUgYW4gb2JqZWN0LCBnb3QgYCVzYC4nLCBmcmFnbWVudFBvaW50ZXJzKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBpZiAoZGF0YVtJRF9LRVldID09IG51bGwpIHtcbiAgICAgIGRhdGFbSURfS0VZXSA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldERhdGFJRChyZWNvcmQpO1xuICAgIH0gLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdIC0gd3JpdGluZyBpbnRvIHJlYWQtb25seSBmaWVsZFxuXG5cbiAgICBmcmFnbWVudFBvaW50ZXJzW2ZyYWdtZW50U3ByZWFkLm5hbWVdID0gZnJhZ21lbnRTcHJlYWQuYXJncyA/IGdldEFyZ3VtZW50VmFsdWVzKGZyYWdtZW50U3ByZWFkLmFyZ3MsIHRoaXMuX3ZhcmlhYmxlcykgOiB7fTtcbiAgICBkYXRhW0ZSQUdNRU5UX09XTkVSX0tFWV0gPSB0aGlzLl9vd25lcjtcblxuICAgIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUFJFQ0lTRV9UWVBFX1JFRklORU1FTlQpIHtcbiAgICAgIGRhdGFbSVNfV0lUSElOX1VOTUFUQ0hFRF9UWVBFX1JFRklORU1FTlRdID0gdGhpcy5faXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9jcmVhdGVJbmxpbmVEYXRhT3JSZXNvbHZlckZyYWdtZW50UG9pbnRlciA9IGZ1bmN0aW9uIF9jcmVhdGVJbmxpbmVEYXRhT3JSZXNvbHZlckZyYWdtZW50UG9pbnRlcihmcmFnbWVudFNwcmVhZE9yRnJhZ21lbnQsIHJlY29yZCwgZGF0YSkge1xuICAgIHZhciBmcmFnbWVudFBvaW50ZXJzID0gZGF0YVtGUkFHTUVOVFNfS0VZXTtcblxuICAgIGlmIChmcmFnbWVudFBvaW50ZXJzID09IG51bGwpIHtcbiAgICAgIGZyYWdtZW50UG9pbnRlcnMgPSBkYXRhW0ZSQUdNRU5UU19LRVldID0ge307XG4gICAgfVxuXG4gICAgISh0eXBlb2YgZnJhZ21lbnRQb2ludGVycyA9PT0gJ29iamVjdCcgJiYgZnJhZ21lbnRQb2ludGVycyAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVhZGVyOiBFeHBlY3RlZCBmcmFnbWVudCBzcHJlYWQgZGF0YSB0byBiZSBhbiBvYmplY3QsIGdvdCBgJXNgLicsIGZyYWdtZW50UG9pbnRlcnMpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmIChkYXRhW0lEX0tFWV0gPT0gbnVsbCkge1xuICAgICAgZGF0YVtJRF9LRVldID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0RGF0YUlEKHJlY29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGlubGluZURhdGEgPSB7fTtcblxuICAgIHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhmcmFnbWVudFNwcmVhZE9yRnJhZ21lbnQuc2VsZWN0aW9ucywgcmVjb3JkLCBpbmxpbmVEYXRhKTsgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdIC0gd3JpdGluZyBpbnRvIHJlYWQtb25seSBmaWVsZFxuXG5cbiAgICBmcmFnbWVudFBvaW50ZXJzW2ZyYWdtZW50U3ByZWFkT3JGcmFnbWVudC5uYW1lXSA9IGlubGluZURhdGE7XG4gIH07XG5cbiAgcmV0dXJuIFJlbGF5UmVhZGVyO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVhZDogcmVhZFxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlbGF5UmVjb3JkU291cmNlTWFwSW1wbCA9IHJlcXVpcmUoJy4vUmVsYXlSZWNvcmRTb3VyY2VNYXBJbXBsJyk7XG5cbnZhciBSZWxheVJlY29yZFNvdXJjZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlbGF5UmVjb3JkU291cmNlKHJlY29yZHMpIHtcbiAgICByZXR1cm4gUmVsYXlSZWNvcmRTb3VyY2UuY3JlYXRlKHJlY29yZHMpO1xuICB9XG5cbiAgUmVsYXlSZWNvcmRTb3VyY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHJlY29yZHMpIHtcbiAgICByZXR1cm4gbmV3IFJlbGF5UmVjb3JkU291cmNlTWFwSW1wbChyZWNvcmRzKTtcbiAgfTtcblxuICByZXR1cm4gUmVsYXlSZWNvcmRTb3VyY2U7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVsYXlSZWNvcmRTb3VyY2U7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyXCIpKTtcblxudmFyIFJlbGF5UmVjb3JkU3RhdGUgPSByZXF1aXJlKCcuL1JlbGF5UmVjb3JkU3RhdGUnKTtcblxudmFyIEVYSVNURU5UID0gUmVsYXlSZWNvcmRTdGF0ZS5FWElTVEVOVCxcbiAgICBOT05FWElTVEVOVCA9IFJlbGF5UmVjb3JkU3RhdGUuTk9ORVhJU1RFTlQsXG4gICAgVU5LTk9XTiA9IFJlbGF5UmVjb3JkU3RhdGUuVU5LTk9XTjtcbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIGBNdXRhYmxlUmVjb3JkU291cmNlYCBpbnRlcmZhY2UgKGRlZmluZWQgaW5cbiAqIGBSZWxheVN0b3JlVHlwZXNgKSB0aGF0IGhvbGRzIGFsbCByZWNvcmRzIGluIG1lbW9yeSAoSlMgTWFwKS5cbiAqL1xuXG52YXIgUmVsYXlNYXBSZWNvcmRTb3VyY2VNYXBJbXBsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVsYXlNYXBSZWNvcmRTb3VyY2VNYXBJbXBsKHJlY29yZHMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5fcmVjb3JkcyA9IG5ldyBNYXAoKTtcblxuICAgIGlmIChyZWNvcmRzICE9IG51bGwpIHtcbiAgICAgIE9iamVjdC5rZXlzKHJlY29yZHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfdGhpcy5fcmVjb3Jkcy5zZXQoa2V5LCByZWNvcmRzW2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlbGF5TWFwUmVjb3JkU291cmNlTWFwSW1wbC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5fcmVjb3JkcyA9IG5ldyBNYXAoKTtcbiAgfTtcblxuICBfcHJvdG9bXCJkZWxldGVcIl0gPSBmdW5jdGlvbiBfZGVsZXRlKGRhdGFJRCkge1xuICAgIHRoaXMuX3JlY29yZHMuc2V0KGRhdGFJRCwgbnVsbCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChkYXRhSUQpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjb3Jkcy5nZXQoZGF0YUlEKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0UmVjb3JkSURzID0gZnVuY3Rpb24gZ2V0UmVjb3JkSURzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuX3JlY29yZHMua2V5cygpKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0U3RhdHVzID0gZnVuY3Rpb24gZ2V0U3RhdHVzKGRhdGFJRCkge1xuICAgIGlmICghdGhpcy5fcmVjb3Jkcy5oYXMoZGF0YUlEKSkge1xuICAgICAgcmV0dXJuIFVOS05PV047XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlY29yZHMuZ2V0KGRhdGFJRCkgPT0gbnVsbCA/IE5PTkVYSVNURU5UIDogRVhJU1RFTlQ7XG4gIH07XG5cbiAgX3Byb3RvLmhhcyA9IGZ1bmN0aW9uIGhhcyhkYXRhSUQpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjb3Jkcy5oYXMoZGF0YUlEKTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKGRhdGFJRCkge1xuICAgIHRoaXMuX3JlY29yZHNbXCJkZWxldGVcIl0oZGF0YUlEKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0ID0gZnVuY3Rpb24gc2V0KGRhdGFJRCwgcmVjb3JkKSB7XG4gICAgdGhpcy5fcmVjb3Jkcy5zZXQoZGF0YUlELCByZWNvcmQpO1xuICB9O1xuXG4gIF9wcm90by5zaXplID0gZnVuY3Rpb24gc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjb3Jkcy5zaXplO1xuICB9O1xuXG4gIF9wcm90by50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgdmFyIG9iaiA9IHt9O1xuXG4gICAgdmFyIF9pdGVyYXRvciA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKSh0aGlzLl9yZWNvcmRzKSxcbiAgICAgICAgX3N0ZXA7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIF9zdGVwJHZhbHVlID0gX3N0ZXAudmFsdWUsXG4gICAgICAgICAgICBrZXkgPSBfc3RlcCR2YWx1ZVswXSxcbiAgICAgICAgICAgIHZhbHVlID0gX3N0ZXAkdmFsdWVbMV07XG4gICAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IuZigpO1xuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgcmV0dXJuIFJlbGF5TWFwUmVjb3JkU291cmNlTWFwSW1wbDtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheU1hcFJlY29yZFNvdXJjZU1hcEltcGw7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWxheVJlY29yZFN0YXRlID0ge1xuICAvKipcbiAgICogUmVjb3JkIGV4aXN0cyAoZWl0aGVyIGZldGNoZWQgZnJvbSB0aGUgc2VydmVyIG9yIHByb2R1Y2VkIGJ5IGEgbG9jYWwsXG4gICAqIG9wdGltaXN0aWMgdXBkYXRlKS5cbiAgICovXG4gIEVYSVNURU5UOiAnRVhJU1RFTlQnLFxuXG4gIC8qKlxuICAgKiBSZWNvcmQgaXMga25vd24gbm90IHRvIGV4aXN0IChlaXRoZXIgYXMgdGhlIHJlc3VsdCBvZiBhIG11dGF0aW9uLCBvclxuICAgKiBiZWNhdXNlIHRoZSBzZXJ2ZXIgcmV0dXJuZWQgYG51bGxgIHdoZW4gcXVlcmllZCBmb3IgdGhlIHJlY29yZCkuXG4gICAqL1xuICBOT05FWElTVEVOVDogJ05PTkVYSVNURU5UJyxcblxuICAvKipcbiAgICogUmVjb3JkIFN0YXRlIGlzIHVua25vd24gYmVjYXVzZSBpdCBoYXMgbm90IHlldCBiZWVuIGZldGNoZWQgZnJvbSB0aGVcbiAgICogc2VydmVyLlxuICAgKi9cbiAgVU5LTk9XTjogJ1VOS05PV04nXG59O1xubW9kdWxlLmV4cG9ydHMgPSBSZWxheVJlY29yZFN0YXRlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlclwiKSk7XG5cbnZhciBSZWxheUNvbmNyZXRlTm9kZSA9IHJlcXVpcmUoJy4uL3V0aWwvUmVsYXlDb25jcmV0ZU5vZGUnKTtcblxudmFyIFJlbGF5RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUZlYXR1cmVGbGFncycpO1xuXG52YXIgUmVsYXlNb2Rlcm5SZWNvcmQgPSByZXF1aXJlKCcuL1JlbGF5TW9kZXJuUmVjb3JkJyk7XG5cbnZhciBSZWxheVN0b3JlUmVhY3RGbGlnaHRVdGlscyA9IHJlcXVpcmUoJy4vUmVsYXlTdG9yZVJlYWN0RmxpZ2h0VXRpbHMnKTtcblxudmFyIFJlbGF5U3RvcmVVdGlscyA9IHJlcXVpcmUoJy4vUmVsYXlTdG9yZVV0aWxzJyk7XG5cbnZhciBjbG9uZVJlbGF5SGFuZGxlU291cmNlRmllbGQgPSByZXF1aXJlKCcuL2Nsb25lUmVsYXlIYW5kbGVTb3VyY2VGaWVsZCcpO1xuXG52YXIgZ2V0T3BlcmF0aW9uID0gcmVxdWlyZSgnLi4vdXRpbC9nZXRPcGVyYXRpb24nKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL1R5cGVJRCcpLFxuICAgIGdlbmVyYXRlVHlwZUlEID0gX3JlcXVpcmUuZ2VuZXJhdGVUeXBlSUQ7XG5cbnZhciBDT05ESVRJT04gPSBSZWxheUNvbmNyZXRlTm9kZS5DT05ESVRJT04sXG4gICAgQ0xJRU5UX0NPTVBPTkVOVCA9IFJlbGF5Q29uY3JldGVOb2RlLkNMSUVOVF9DT01QT05FTlQsXG4gICAgQ0xJRU5UX0VYVEVOU0lPTiA9IFJlbGF5Q29uY3JldGVOb2RlLkNMSUVOVF9FWFRFTlNJT04sXG4gICAgREVGRVIgPSBSZWxheUNvbmNyZXRlTm9kZS5ERUZFUixcbiAgICBGTElHSFRfRklFTEQgPSBSZWxheUNvbmNyZXRlTm9kZS5GTElHSFRfRklFTEQsXG4gICAgRlJBR01FTlRfU1BSRUFEID0gUmVsYXlDb25jcmV0ZU5vZGUuRlJBR01FTlRfU1BSRUFELFxuICAgIElOTElORV9GUkFHTUVOVCA9IFJlbGF5Q29uY3JldGVOb2RlLklOTElORV9GUkFHTUVOVCxcbiAgICBMSU5LRURfRklFTEQgPSBSZWxheUNvbmNyZXRlTm9kZS5MSU5LRURfRklFTEQsXG4gICAgTU9EVUxFX0lNUE9SVCA9IFJlbGF5Q29uY3JldGVOb2RlLk1PRFVMRV9JTVBPUlQsXG4gICAgTElOS0VEX0hBTkRMRSA9IFJlbGF5Q29uY3JldGVOb2RlLkxJTktFRF9IQU5ETEUsXG4gICAgU0NBTEFSX0ZJRUxEID0gUmVsYXlDb25jcmV0ZU5vZGUuU0NBTEFSX0ZJRUxELFxuICAgIFNDQUxBUl9IQU5ETEUgPSBSZWxheUNvbmNyZXRlTm9kZS5TQ0FMQVJfSEFORExFLFxuICAgIFNUUkVBTSA9IFJlbGF5Q29uY3JldGVOb2RlLlNUUkVBTSxcbiAgICBUWVBFX0RJU0NSSU1JTkFUT1IgPSBSZWxheUNvbmNyZXRlTm9kZS5UWVBFX0RJU0NSSU1JTkFUT1I7XG52YXIgUk9PVF9JRCA9IFJlbGF5U3RvcmVVdGlscy5ST09UX0lELFxuICAgIGdldFN0b3JhZ2VLZXkgPSBSZWxheVN0b3JlVXRpbHMuZ2V0U3RvcmFnZUtleSxcbiAgICBnZXRNb2R1bGVPcGVyYXRpb25LZXkgPSBSZWxheVN0b3JlVXRpbHMuZ2V0TW9kdWxlT3BlcmF0aW9uS2V5O1xuXG5mdW5jdGlvbiBtYXJrKHJlY29yZFNvdXJjZSwgc2VsZWN0b3IsIHJlZmVyZW5jZXMsIG9wZXJhdGlvbkxvYWRlciwgc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMpIHtcbiAgdmFyIGRhdGFJRCA9IHNlbGVjdG9yLmRhdGFJRCxcbiAgICAgIG5vZGUgPSBzZWxlY3Rvci5ub2RlLFxuICAgICAgdmFyaWFibGVzID0gc2VsZWN0b3IudmFyaWFibGVzO1xuICB2YXIgbWFya2VyID0gbmV3IFJlbGF5UmVmZXJlbmNlTWFya2VyKHJlY29yZFNvdXJjZSwgdmFyaWFibGVzLCByZWZlcmVuY2VzLCBvcGVyYXRpb25Mb2FkZXIsIHNob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzKTtcbiAgbWFya2VyLm1hcmsobm9kZSwgZGF0YUlEKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBSZWxheVJlZmVyZW5jZU1hcmtlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlbGF5UmVmZXJlbmNlTWFya2VyKHJlY29yZFNvdXJjZSwgdmFyaWFibGVzLCByZWZlcmVuY2VzLCBvcGVyYXRpb25Mb2FkZXIsIHNob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzKSB7XG4gICAgdGhpcy5fb3BlcmF0aW9uTG9hZGVyID0gb3BlcmF0aW9uTG9hZGVyICE9PSBudWxsICYmIG9wZXJhdGlvbkxvYWRlciAhPT0gdm9pZCAwID8gb3BlcmF0aW9uTG9hZGVyIDogbnVsbDtcbiAgICB0aGlzLl9vcGVyYXRpb25OYW1lID0gbnVsbDtcbiAgICB0aGlzLl9yZWNvcmRTb3VyY2UgPSByZWNvcmRTb3VyY2U7XG4gICAgdGhpcy5fcmVmZXJlbmNlcyA9IHJlZmVyZW5jZXM7XG4gICAgdGhpcy5fdmFyaWFibGVzID0gdmFyaWFibGVzO1xuICAgIHRoaXMuX3Nob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzID0gc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVsYXlSZWZlcmVuY2VNYXJrZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5tYXJrID0gZnVuY3Rpb24gbWFyayhub2RlLCBkYXRhSUQpIHtcbiAgICBpZiAobm9kZS5raW5kID09PSAnT3BlcmF0aW9uJyB8fCBub2RlLmtpbmQgPT09ICdTcGxpdE9wZXJhdGlvbicpIHtcbiAgICAgIHRoaXMuX29wZXJhdGlvbk5hbWUgPSBub2RlLm5hbWU7XG4gICAgfVxuXG4gICAgdGhpcy5fdHJhdmVyc2Uobm9kZSwgZGF0YUlEKTtcbiAgfTtcblxuICBfcHJvdG8uX3RyYXZlcnNlID0gZnVuY3Rpb24gX3RyYXZlcnNlKG5vZGUsIGRhdGFJRCkge1xuICAgIHRoaXMuX3JlZmVyZW5jZXMuYWRkKGRhdGFJRCk7XG5cbiAgICB2YXIgcmVjb3JkID0gdGhpcy5fcmVjb3JkU291cmNlLmdldChkYXRhSUQpO1xuXG4gICAgaWYgKHJlY29yZCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKG5vZGUuc2VsZWN0aW9ucywgcmVjb3JkKTtcbiAgfTtcblxuICBfcHJvdG8uX2dldFZhcmlhYmxlVmFsdWUgPSBmdW5jdGlvbiBfZ2V0VmFyaWFibGVWYWx1ZShuYW1lKSB7XG4gICAgIXRoaXMuX3ZhcmlhYmxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVmZXJlbmNlTWFya2VyKCk6IFVuZGVmaW5lZCB2YXJpYWJsZSBgJXNgLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cbiAgICByZXR1cm4gdGhpcy5fdmFyaWFibGVzW25hbWVdO1xuICB9O1xuXG4gIF9wcm90by5fdHJhdmVyc2VTZWxlY3Rpb25zID0gZnVuY3Rpb24gX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb25zLCByZWNvcmQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgc2VsZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWZhbGx0aHJvdWdoICovXG4gICAgICBzd2l0Y2ggKHNlbGVjdGlvbi5raW5kKSB7XG4gICAgICAgIGNhc2UgTElOS0VEX0ZJRUxEOlxuICAgICAgICAgIGlmIChzZWxlY3Rpb24ucGx1cmFsKSB7XG4gICAgICAgICAgICBfdGhpcy5fdHJhdmVyc2VQbHVyYWxMaW5rKHNlbGVjdGlvbiwgcmVjb3JkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuX3RyYXZlcnNlTGluayhzZWxlY3Rpb24sIHJlY29yZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDT05ESVRJT046XG4gICAgICAgICAgdmFyIGNvbmRpdGlvblZhbHVlID0gX3RoaXMuX2dldFZhcmlhYmxlVmFsdWUoc2VsZWN0aW9uLmNvbmRpdGlvbik7XG5cbiAgICAgICAgICBpZiAoY29uZGl0aW9uVmFsdWUgPT09IHNlbGVjdGlvbi5wYXNzaW5nVmFsdWUpIHtcbiAgICAgICAgICAgIF90aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLnNlbGVjdGlvbnMsIHJlY29yZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBJTkxJTkVfRlJBR01FTlQ6XG4gICAgICAgICAgaWYgKHNlbGVjdGlvbi5hYnN0cmFjdEtleSA9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgdHlwZU5hbWUgPSBSZWxheU1vZGVyblJlY29yZC5nZXRUeXBlKHJlY29yZCk7XG5cbiAgICAgICAgICAgIGlmICh0eXBlTmFtZSAhPSBudWxsICYmIHR5cGVOYW1lID09PSBzZWxlY3Rpb24udHlwZSkge1xuICAgICAgICAgICAgICBfdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5zZWxlY3Rpb25zLCByZWNvcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX1BSRUNJU0VfVFlQRV9SRUZJTkVNRU5UKSB7XG4gICAgICAgICAgICB2YXIgX3R5cGVOYW1lID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0VHlwZShyZWNvcmQpO1xuXG4gICAgICAgICAgICB2YXIgdHlwZUlEID0gZ2VuZXJhdGVUeXBlSUQoX3R5cGVOYW1lKTtcblxuICAgICAgICAgICAgX3RoaXMuX3JlZmVyZW5jZXMuYWRkKHR5cGVJRCk7XG5cbiAgICAgICAgICAgIF90aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLnNlbGVjdGlvbnMsIHJlY29yZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLnNlbGVjdGlvbnMsIHJlY29yZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdXG5cbiAgICAgICAgY2FzZSBGUkFHTUVOVF9TUFJFQUQ6XG4gICAgICAgICAgX3RoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uZnJhZ21lbnQuc2VsZWN0aW9ucywgcmVjb3JkKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTElOS0VEX0hBTkRMRTpcbiAgICAgICAgICAvLyBUaGUgc2VsZWN0aW9ucyBmb3IgYSBcImhhbmRsZVwiIGZpZWxkIGFyZSB0aGUgc2FtZSBhcyB0aG9zZSBvZiB0aGVcbiAgICAgICAgICAvLyBvcmlnaW5hbCBsaW5rZWQgZmllbGQgd2hlcmUgdGhlIGhhbmRsZSB3YXMgYXBwbGllZC4gUmVmZXJlbmNlIG1hcmtpbmdcbiAgICAgICAgICAvLyB0aGVyZWZvcmUgcmVxdWlyZXMgdHJhdmVyc2luZyB0aGUgb3JpZ2luYWwgZmllbGQgc2VsZWN0aW9ucyBhZ2FpbnN0XG4gICAgICAgICAgLy8gdGhlIHN5bnRoZXNpemVkIGNsaWVudCBmaWVsZC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFRPRE86IEluc3RlYWQgb2YgZmluZGluZyB0aGUgc291cmNlIGZpZWxkIGluIGBzZWxlY3Rpb25zYCwgY2hhbmdlXG4gICAgICAgICAgLy8gdGhlIGNvbmNyZXRlIHN0cnVjdHVyZSB0byBhbGxvdyBzaGFyZWQgc3VidHJlZXMsIGFuZCBoYXZlIHRoZSBsaW5rZWRcbiAgICAgICAgICAvLyBoYW5kbGUgZGlyZWN0bHkgcmVmZXIgdG8gdGhlIHNhbWUgc2VsZWN0aW9ucyBhcyB0aGUgTGlua2VkRmllbGQgdGhhdFxuICAgICAgICAgIC8vIGl0IHdhcyBzcGxpdCBmcm9tLlxuICAgICAgICAgIHZhciBoYW5kbGVGaWVsZCA9IGNsb25lUmVsYXlIYW5kbGVTb3VyY2VGaWVsZChzZWxlY3Rpb24sIHNlbGVjdGlvbnMsIF90aGlzLl92YXJpYWJsZXMpO1xuXG4gICAgICAgICAgaWYgKGhhbmRsZUZpZWxkLnBsdXJhbCkge1xuICAgICAgICAgICAgX3RoaXMuX3RyYXZlcnNlUGx1cmFsTGluayhoYW5kbGVGaWVsZCwgcmVjb3JkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuX3RyYXZlcnNlTGluayhoYW5kbGVGaWVsZCwgcmVjb3JkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIERFRkVSOlxuICAgICAgICBjYXNlIFNUUkVBTTpcbiAgICAgICAgICBfdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5zZWxlY3Rpb25zLCByZWNvcmQpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBTQ0FMQVJfRklFTEQ6XG4gICAgICAgIGNhc2UgU0NBTEFSX0hBTkRMRTpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFRZUEVfRElTQ1JJTUlOQVRPUjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAoUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX1BSRUNJU0VfVFlQRV9SRUZJTkVNRU5UKSB7XG4gICAgICAgICAgICAgIHZhciBfdHlwZU5hbWUyID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0VHlwZShyZWNvcmQpO1xuXG4gICAgICAgICAgICAgIHZhciBfdHlwZUlEID0gZ2VuZXJhdGVUeXBlSUQoX3R5cGVOYW1lMik7XG5cbiAgICAgICAgICAgICAgX3RoaXMuX3JlZmVyZW5jZXMuYWRkKF90eXBlSUQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBNT0RVTEVfSU1QT1JUOlxuICAgICAgICAgIF90aGlzLl90cmF2ZXJzZU1vZHVsZUltcG9ydChzZWxlY3Rpb24sIHJlY29yZCk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIENMSUVOVF9FWFRFTlNJT046XG4gICAgICAgICAgX3RoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uc2VsZWN0aW9ucywgcmVjb3JkKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRkxJR0hUX0ZJRUxEOlxuICAgICAgICAgIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUkVBQ1RfRkxJR0hUX0NPTVBPTkVOVF9GSUVMRCkge1xuICAgICAgICAgICAgX3RoaXMuX3RyYXZlcnNlRmxpZ2h0RmllbGQoc2VsZWN0aW9uLCByZWNvcmQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZsaWdodCBmaWVsZHMgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ0xJRU5UX0NPTVBPTkVOVDpcbiAgICAgICAgICBpZiAoX3RoaXMuX3Nob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24uZnJhZ21lbnQuc2VsZWN0aW9ucywgcmVjb3JkKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgc2VsZWN0aW9uO1xuICAgICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVmZXJlbmNlTWFya2VyOiBVbmtub3duIEFTVCBub2RlIGAlc2AuJywgc2VsZWN0aW9uKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLl90cmF2ZXJzZU1vZHVsZUltcG9ydCA9IGZ1bmN0aW9uIF90cmF2ZXJzZU1vZHVsZUltcG9ydChtb2R1bGVJbXBvcnQsIHJlY29yZCkge1xuICAgIHZhciBfdGhpcyRfb3BlcmF0aW9uTmFtZTtcblxuICAgIHZhciBvcGVyYXRpb25Mb2FkZXIgPSB0aGlzLl9vcGVyYXRpb25Mb2FkZXI7XG4gICAgIShvcGVyYXRpb25Mb2FkZXIgIT09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZWZlcmVuY2VNYXJrZXI6IEV4cGVjdGVkIGFuIG9wZXJhdGlvbkxvYWRlciB0byBiZSBjb25maWd1cmVkIHdoZW4gdXNpbmcgYEBtb2R1bGVgLiAnICsgJ0NvdWxkIG5vdCBsb2FkIGZyYWdtZW50IGAlc2AgaW4gb3BlcmF0aW9uIGAlc2AuJywgbW9kdWxlSW1wb3J0LmZyYWdtZW50TmFtZSwgKF90aGlzJF9vcGVyYXRpb25OYW1lID0gdGhpcy5fb3BlcmF0aW9uTmFtZSkgIT09IG51bGwgJiYgX3RoaXMkX29wZXJhdGlvbk5hbWUgIT09IHZvaWQgMCA/IF90aGlzJF9vcGVyYXRpb25OYW1lIDogJyh1bmtub3duKScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgb3BlcmF0aW9uS2V5ID0gZ2V0TW9kdWxlT3BlcmF0aW9uS2V5KG1vZHVsZUltcG9ydC5kb2N1bWVudE5hbWUpO1xuICAgIHZhciBvcGVyYXRpb25SZWZlcmVuY2UgPSBSZWxheU1vZGVyblJlY29yZC5nZXRWYWx1ZShyZWNvcmQsIG9wZXJhdGlvbktleSk7XG5cbiAgICBpZiAob3BlcmF0aW9uUmVmZXJlbmNlID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbm9ybWFsaXphdGlvblJvb3ROb2RlID0gb3BlcmF0aW9uTG9hZGVyLmdldChvcGVyYXRpb25SZWZlcmVuY2UpO1xuXG4gICAgaWYgKG5vcm1hbGl6YXRpb25Sb290Tm9kZSAhPSBudWxsKSB7XG4gICAgICB2YXIgc2VsZWN0aW9ucyA9IGdldE9wZXJhdGlvbihub3JtYWxpemF0aW9uUm9vdE5vZGUpLnNlbGVjdGlvbnM7XG5cbiAgICAgIHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb25zLCByZWNvcmQpO1xuICAgIH0gLy8gT3RoZXJ3aXNlLCBpZiB0aGUgb3BlcmF0aW9uIGlzIG5vdCBhdmFpbGFibGUsIHdlIGFzc3VtZSB0aGF0IHRoZSBkYXRhXG4gICAgLy8gY2Fubm90IGhhdmUgYmVlbiBwcm9jZXNzZWQgeWV0IGFuZCB0aGVyZWZvcmUgaXNuJ3QgaW4gdGhlIHN0b3JlIHRvXG4gICAgLy8gYmVnaW4gd2l0aC5cblxuICB9O1xuXG4gIF9wcm90by5fdHJhdmVyc2VMaW5rID0gZnVuY3Rpb24gX3RyYXZlcnNlTGluayhmaWVsZCwgcmVjb3JkKSB7XG4gICAgdmFyIHN0b3JhZ2VLZXkgPSBnZXRTdG9yYWdlS2V5KGZpZWxkLCB0aGlzLl92YXJpYWJsZXMpO1xuICAgIHZhciBsaW5rZWRJRCA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldExpbmtlZFJlY29yZElEKHJlY29yZCwgc3RvcmFnZUtleSk7XG5cbiAgICBpZiAobGlua2VkSUQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3RyYXZlcnNlKGZpZWxkLCBsaW5rZWRJRCk7XG4gIH07XG5cbiAgX3Byb3RvLl90cmF2ZXJzZVBsdXJhbExpbmsgPSBmdW5jdGlvbiBfdHJhdmVyc2VQbHVyYWxMaW5rKGZpZWxkLCByZWNvcmQpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBzdG9yYWdlS2V5ID0gZ2V0U3RvcmFnZUtleShmaWVsZCwgdGhpcy5fdmFyaWFibGVzKTtcbiAgICB2YXIgbGlua2VkSURzID0gUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0TGlua2VkUmVjb3JkSURzKHJlY29yZCwgc3RvcmFnZUtleSk7XG5cbiAgICBpZiAobGlua2VkSURzID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsaW5rZWRJRHMuZm9yRWFjaChmdW5jdGlvbiAobGlua2VkSUQpIHtcbiAgICAgIGlmIChsaW5rZWRJRCAhPSBudWxsKSB7XG4gICAgICAgIF90aGlzMi5fdHJhdmVyc2UoZmllbGQsIGxpbmtlZElEKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uX3RyYXZlcnNlRmxpZ2h0RmllbGQgPSBmdW5jdGlvbiBfdHJhdmVyc2VGbGlnaHRGaWVsZChmaWVsZCwgcmVjb3JkKSB7XG4gICAgdmFyIHN0b3JhZ2VLZXkgPSBnZXRTdG9yYWdlS2V5KGZpZWxkLCB0aGlzLl92YXJpYWJsZXMpO1xuICAgIHZhciBsaW5rZWRJRCA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldExpbmtlZFJlY29yZElEKHJlY29yZCwgc3RvcmFnZUtleSk7XG5cbiAgICBpZiAobGlua2VkSUQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3JlZmVyZW5jZXMuYWRkKGxpbmtlZElEKTtcblxuICAgIHZhciByZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkID0gdGhpcy5fcmVjb3JkU291cmNlLmdldChsaW5rZWRJRCk7XG5cbiAgICBpZiAocmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlYWNoYWJsZUV4ZWN1dGFibGVEZWZpbml0aW9ucyA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFZhbHVlKHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmQsIFJlbGF5U3RvcmVSZWFjdEZsaWdodFV0aWxzLlJFQUNUX0ZMSUdIVF9FWEVDVVRBQkxFX0RFRklOSVRJT05TX1NUT1JBR0VfS0VZKTtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheShyZWFjaGFibGVFeGVjdXRhYmxlRGVmaW5pdGlvbnMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG9wZXJhdGlvbkxvYWRlciA9IHRoaXMuX29wZXJhdGlvbkxvYWRlcjtcbiAgICAhKG9wZXJhdGlvbkxvYWRlciAhPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdEYXRhQ2hlY2tlcjogRXhwZWN0ZWQgYW4gb3BlcmF0aW9uTG9hZGVyIHRvIGJlIGNvbmZpZ3VyZWQgd2hlbiB1c2luZyAnICsgJ1JlYWN0IEZsaWdodCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gSW4gRmxpZ2h0LCB0aGUgdmFyaWFibGVzIHRoYXQgYXJlIGluIHNjb3BlIGZvciByZWFjaGFibGUgZXhlY3V0YWJsZVxuICAgIC8vIGRlZmluaXRpb25zIGFyZW4ndCB0aGUgc2FtZSBhcyB3aGF0J3MgaW4gc2NvcGUgZm9yIHRoZSBvdXRlciBxdWVyeS5cblxuICAgIHZhciBwcmV2VmFyaWFibGVzID0gdGhpcy5fdmFyaWFibGVzOyAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYXN0XVxuXG4gICAgdmFyIF9pdGVyYXRvciA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShyZWFjaGFibGVFeGVjdXRhYmxlRGVmaW5pdGlvbnMpLFxuICAgICAgICBfc3RlcDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IF9zdGVwLnZhbHVlO1xuICAgICAgICB0aGlzLl92YXJpYWJsZXMgPSBkZWZpbml0aW9uLnZhcmlhYmxlcztcbiAgICAgICAgdmFyIG9wZXJhdGlvblJlZmVyZW5jZSA9IGRlZmluaXRpb24ubW9kdWxlO1xuICAgICAgICB2YXIgbm9ybWFsaXphdGlvblJvb3ROb2RlID0gb3BlcmF0aW9uTG9hZGVyLmdldChvcGVyYXRpb25SZWZlcmVuY2UpO1xuXG4gICAgICAgIGlmIChub3JtYWxpemF0aW9uUm9vdE5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgIHZhciBvcGVyYXRpb24gPSBnZXRPcGVyYXRpb24obm9ybWFsaXphdGlvblJvb3ROb2RlKTtcblxuICAgICAgICAgIHRoaXMuX3RyYXZlcnNlKG9wZXJhdGlvbiwgUk9PVF9JRCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdmFyaWFibGVzID0gcHJldlZhcmlhYmxlcztcbiAgfTtcblxuICByZXR1cm4gUmVsYXlSZWZlcmVuY2VNYXJrZXI7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBtYXJrOiBtYXJrXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlclwiKSk7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiKSk7XG5cbnZhciBSZWxheUZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4uL3V0aWwvUmVsYXlGZWF0dXJlRmxhZ3MnKTtcblxudmFyIFJlbGF5TW9kZXJuUmVjb3JkID0gcmVxdWlyZSgnLi9SZWxheU1vZGVyblJlY29yZCcpO1xuXG52YXIgYXJlRXF1YWwgPSByZXF1aXJlKFwiZmJqcy9saWIvYXJlRXF1YWxcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUNvbmNyZXRlTm9kZScpLFxuICAgIENPTkRJVElPTiA9IF9yZXF1aXJlLkNPTkRJVElPTixcbiAgICBDTElFTlRfQ09NUE9ORU5UID0gX3JlcXVpcmUuQ0xJRU5UX0NPTVBPTkVOVCxcbiAgICBDTElFTlRfRVhURU5TSU9OID0gX3JlcXVpcmUuQ0xJRU5UX0VYVEVOU0lPTixcbiAgICBERUZFUiA9IF9yZXF1aXJlLkRFRkVSLFxuICAgIEZMSUdIVF9GSUVMRCA9IF9yZXF1aXJlLkZMSUdIVF9GSUVMRCxcbiAgICBGUkFHTUVOVF9TUFJFQUQgPSBfcmVxdWlyZS5GUkFHTUVOVF9TUFJFQUQsXG4gICAgSU5MSU5FX0ZSQUdNRU5UID0gX3JlcXVpcmUuSU5MSU5FX0ZSQUdNRU5ULFxuICAgIExJTktFRF9GSUVMRCA9IF9yZXF1aXJlLkxJTktFRF9GSUVMRCxcbiAgICBMSU5LRURfSEFORExFID0gX3JlcXVpcmUuTElOS0VEX0hBTkRMRSxcbiAgICBNT0RVTEVfSU1QT1JUID0gX3JlcXVpcmUuTU9EVUxFX0lNUE9SVCxcbiAgICBTQ0FMQVJfRklFTEQgPSBfcmVxdWlyZS5TQ0FMQVJfRklFTEQsXG4gICAgU0NBTEFSX0hBTkRMRSA9IF9yZXF1aXJlLlNDQUxBUl9IQU5ETEUsXG4gICAgU1RSRUFNID0gX3JlcXVpcmUuU1RSRUFNLFxuICAgIFRZUEVfRElTQ1JJTUlOQVRPUiA9IF9yZXF1aXJlLlRZUEVfRElTQ1JJTUlOQVRPUjtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vQ2xpZW50SUQnKSxcbiAgICBnZW5lcmF0ZUNsaWVudElEID0gX3JlcXVpcmUyLmdlbmVyYXRlQ2xpZW50SUQsXG4gICAgaXNDbGllbnRJRCA9IF9yZXF1aXJlMi5pc0NsaWVudElEO1xuXG52YXIgX3JlcXVpcmUzID0gcmVxdWlyZSgnLi9SZWxheU1vZGVyblNlbGVjdG9yJyksXG4gICAgY3JlYXRlTm9ybWFsaXphdGlvblNlbGVjdG9yID0gX3JlcXVpcmUzLmNyZWF0ZU5vcm1hbGl6YXRpb25TZWxlY3RvcjtcblxudmFyIF9yZXF1aXJlNCA9IHJlcXVpcmUoJy4vUmVsYXlTdG9yZVJlYWN0RmxpZ2h0VXRpbHMnKSxcbiAgICByZWZpbmVUb1JlYWN0RmxpZ2h0UGF5bG9hZERhdGEgPSBfcmVxdWlyZTQucmVmaW5lVG9SZWFjdEZsaWdodFBheWxvYWREYXRhLFxuICAgIFJFQUNUX0ZMSUdIVF9FWEVDVVRBQkxFX0RFRklOSVRJT05TX1NUT1JBR0VfS0VZID0gX3JlcXVpcmU0LlJFQUNUX0ZMSUdIVF9FWEVDVVRBQkxFX0RFRklOSVRJT05TX1NUT1JBR0VfS0VZLFxuICAgIFJFQUNUX0ZMSUdIVF9UUkVFX1NUT1JBR0VfS0VZID0gX3JlcXVpcmU0LlJFQUNUX0ZMSUdIVF9UUkVFX1NUT1JBR0VfS0VZLFxuICAgIFJFQUNUX0ZMSUdIVF9UWVBFX05BTUUgPSBfcmVxdWlyZTQuUkVBQ1RfRkxJR0hUX1RZUEVfTkFNRTtcblxudmFyIF9yZXF1aXJlNSA9IHJlcXVpcmUoJy4vUmVsYXlTdG9yZVV0aWxzJyksXG4gICAgZ2V0QXJndW1lbnRWYWx1ZXMgPSBfcmVxdWlyZTUuZ2V0QXJndW1lbnRWYWx1ZXMsXG4gICAgZ2V0SGFuZGxlU3RvcmFnZUtleSA9IF9yZXF1aXJlNS5nZXRIYW5kbGVTdG9yYWdlS2V5LFxuICAgIGdldE1vZHVsZUNvbXBvbmVudEtleSA9IF9yZXF1aXJlNS5nZXRNb2R1bGVDb21wb25lbnRLZXksXG4gICAgZ2V0TW9kdWxlT3BlcmF0aW9uS2V5ID0gX3JlcXVpcmU1LmdldE1vZHVsZU9wZXJhdGlvbktleSxcbiAgICBnZXRTdG9yYWdlS2V5ID0gX3JlcXVpcmU1LmdldFN0b3JhZ2VLZXksXG4gICAgVFlQRU5BTUVfS0VZID0gX3JlcXVpcmU1LlRZUEVOQU1FX0tFWSxcbiAgICBST09UX0lEID0gX3JlcXVpcmU1LlJPT1RfSUQsXG4gICAgUk9PVF9UWVBFID0gX3JlcXVpcmU1LlJPT1RfVFlQRTtcblxudmFyIF9yZXF1aXJlNiA9IHJlcXVpcmUoJy4vVHlwZUlEJyksXG4gICAgZ2VuZXJhdGVUeXBlSUQgPSBfcmVxdWlyZTYuZ2VuZXJhdGVUeXBlSUQsXG4gICAgVFlQRV9TQ0hFTUFfVFlQRSA9IF9yZXF1aXJlNi5UWVBFX1NDSEVNQV9UWVBFO1xuXG4vKipcbiAqIE5vcm1hbGl6ZXMgdGhlIHJlc3VsdHMgb2YgYSBxdWVyeSBhbmQgc3RhbmRhcmQgR3JhcGhRTCByZXNwb25zZSwgd3JpdGluZyB0aGVcbiAqIG5vcm1hbGl6ZWQgcmVjb3Jkcy9maWVsZHMgaW50byB0aGUgZ2l2ZW4gTXV0YWJsZVJlY29yZFNvdXJjZS5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplKHJlY29yZFNvdXJjZSwgc2VsZWN0b3IsIHJlc3BvbnNlLCBvcHRpb25zKSB7XG4gIHZhciBkYXRhSUQgPSBzZWxlY3Rvci5kYXRhSUQsXG4gICAgICBub2RlID0gc2VsZWN0b3Iubm9kZSxcbiAgICAgIHZhcmlhYmxlcyA9IHNlbGVjdG9yLnZhcmlhYmxlcztcbiAgdmFyIG5vcm1hbGl6ZXIgPSBuZXcgUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXIocmVjb3JkU291cmNlLCB2YXJpYWJsZXMsIG9wdGlvbnMpO1xuICByZXR1cm4gbm9ybWFsaXplci5ub3JtYWxpemVSZXNwb25zZShub2RlLCBkYXRhSUQsIHJlc3BvbnNlKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBIZWxwZXIgZm9yIGhhbmRsaW5nIHBheWxvYWRzLlxuICovXG5cblxudmFyIFJlbGF5UmVzcG9uc2VOb3JtYWxpemVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXIocmVjb3JkU291cmNlLCB2YXJpYWJsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLl9nZXREYXRhSWQgPSBvcHRpb25zLmdldERhdGFJRDtcbiAgICB0aGlzLl9oYW5kbGVGaWVsZFBheWxvYWRzID0gW107XG4gICAgdGhpcy5fdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsID0gb3B0aW9ucy50cmVhdE1pc3NpbmdGaWVsZHNBc051bGw7XG4gICAgdGhpcy5faW5jcmVtZW50YWxQbGFjZWhvbGRlcnMgPSBbXTtcbiAgICB0aGlzLl9pc0NsaWVudEV4dGVuc2lvbiA9IGZhbHNlO1xuICAgIHRoaXMuX2lzVW5tYXRjaGVkQWJzdHJhY3RUeXBlID0gZmFsc2U7XG4gICAgdGhpcy5fbW9kdWxlSW1wb3J0UGF5bG9hZHMgPSBbXTtcbiAgICB0aGlzLl9wYXRoID0gb3B0aW9ucy5wYXRoID8gKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShvcHRpb25zLnBhdGgpIDogW107XG4gICAgdGhpcy5fcmVjb3JkU291cmNlID0gcmVjb3JkU291cmNlO1xuICAgIHRoaXMuX3ZhcmlhYmxlcyA9IHZhcmlhYmxlcztcbiAgICB0aGlzLl9yZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIgPSBvcHRpb25zLnJlYWN0RmxpZ2h0UGF5bG9hZERlc2VyaWFsaXplcjtcbiAgICB0aGlzLl9yZWFjdEZsaWdodFNlcnZlckVycm9ySGFuZGxlciA9IG9wdGlvbnMucmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXI7XG4gICAgdGhpcy5fc2hvdWxkUHJvY2Vzc0NsaWVudENvbXBvbmVudHMgPSBvcHRpb25zLnNob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlbGF5UmVzcG9uc2VOb3JtYWxpemVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubm9ybWFsaXplUmVzcG9uc2UgPSBmdW5jdGlvbiBub3JtYWxpemVSZXNwb25zZShub2RlLCBkYXRhSUQsIGRhdGEpIHtcbiAgICB2YXIgcmVjb3JkID0gdGhpcy5fcmVjb3JkU291cmNlLmdldChkYXRhSUQpO1xuXG4gICAgIXJlY29yZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyKCk6IEV4cGVjdGVkIHJvb3QgcmVjb3JkIGAlc2AgdG8gZXhpc3QuJywgZGF0YUlEKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMobm9kZSwgcmVjb3JkLCBkYXRhKTtcblxuICAgIHJldHVybiB7XG4gICAgICBlcnJvcnM6IG51bGwsXG4gICAgICBmaWVsZFBheWxvYWRzOiB0aGlzLl9oYW5kbGVGaWVsZFBheWxvYWRzLFxuICAgICAgaW5jcmVtZW50YWxQbGFjZWhvbGRlcnM6IHRoaXMuX2luY3JlbWVudGFsUGxhY2Vob2xkZXJzLFxuICAgICAgbW9kdWxlSW1wb3J0UGF5bG9hZHM6IHRoaXMuX21vZHVsZUltcG9ydFBheWxvYWRzLFxuICAgICAgc291cmNlOiB0aGlzLl9yZWNvcmRTb3VyY2UsXG4gICAgICBpc0ZpbmFsOiBmYWxzZVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLl9nZXRWYXJpYWJsZVZhbHVlID0gZnVuY3Rpb24gX2dldFZhcmlhYmxlVmFsdWUobmFtZSkge1xuICAgICF0aGlzLl92YXJpYWJsZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlc3BvbnNlTm9ybWFsaXplcigpOiBVbmRlZmluZWQgdmFyaWFibGUgYCVzYC4nLCBuYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7IC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuXG4gICAgcmV0dXJuIHRoaXMuX3ZhcmlhYmxlc1tuYW1lXTtcbiAgfTtcblxuICBfcHJvdG8uX2dldFJlY29yZFR5cGUgPSBmdW5jdGlvbiBfZ2V0UmVjb3JkVHlwZShkYXRhKSB7XG4gICAgdmFyIHR5cGVOYW1lID0gZGF0YVtUWVBFTkFNRV9LRVldO1xuICAgICEodHlwZU5hbWUgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlc3BvbnNlTm9ybWFsaXplcigpOiBFeHBlY3RlZCBhIHR5cGVuYW1lIGZvciByZWNvcmQgYCVzYC4nLCBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiB0eXBlTmFtZTtcbiAgfTtcblxuICBfcHJvdG8uX3RyYXZlcnNlU2VsZWN0aW9ucyA9IGZ1bmN0aW9uIF90cmF2ZXJzZVNlbGVjdGlvbnMobm9kZSwgcmVjb3JkLCBkYXRhKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLnNlbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWxlY3Rpb24gPSBub2RlLnNlbGVjdGlvbnNbaV07XG5cbiAgICAgIHN3aXRjaCAoc2VsZWN0aW9uLmtpbmQpIHtcbiAgICAgICAgY2FzZSBTQ0FMQVJfRklFTEQ6XG4gICAgICAgIGNhc2UgTElOS0VEX0ZJRUxEOlxuICAgICAgICAgIHRoaXMuX25vcm1hbGl6ZUZpZWxkKG5vZGUsIHNlbGVjdGlvbiwgcmVjb3JkLCBkYXRhKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ09ORElUSU9OOlxuICAgICAgICAgIHZhciBjb25kaXRpb25WYWx1ZSA9IHRoaXMuX2dldFZhcmlhYmxlVmFsdWUoc2VsZWN0aW9uLmNvbmRpdGlvbik7XG5cbiAgICAgICAgICBpZiAoY29uZGl0aW9uVmFsdWUgPT09IHNlbGVjdGlvbi5wYXNzaW5nVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBGUkFHTUVOVF9TUFJFQUQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5mcmFnbWVudCwgcmVjb3JkLCBkYXRhKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgSU5MSU5FX0ZSQUdNRU5UOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBhYnN0cmFjdEtleSA9IHNlbGVjdGlvbi5hYnN0cmFjdEtleTtcblxuICAgICAgICAgICAgaWYgKGFic3RyYWN0S2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgdmFyIF90eXBlTmFtZSA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFR5cGUocmVjb3JkKTtcblxuICAgICAgICAgICAgICBpZiAoX3R5cGVOYW1lID09PSBzZWxlY3Rpb24udHlwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX1BSRUNJU0VfVFlQRV9SRUZJTkVNRU5UKSB7XG4gICAgICAgICAgICAgIHZhciBpbXBsZW1lbnRzSW50ZXJmYWNlID0gZGF0YS5oYXNPd25Qcm9wZXJ0eShhYnN0cmFjdEtleSk7XG5cbiAgICAgICAgICAgICAgdmFyIF90eXBlTmFtZTIgPSBSZWxheU1vZGVyblJlY29yZC5nZXRUeXBlKHJlY29yZCk7XG5cbiAgICAgICAgICAgICAgdmFyIHR5cGVJRCA9IGdlbmVyYXRlVHlwZUlEKF90eXBlTmFtZTIpO1xuXG4gICAgICAgICAgICAgIHZhciB0eXBlUmVjb3JkID0gdGhpcy5fcmVjb3JkU291cmNlLmdldCh0eXBlSUQpO1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlUmVjb3JkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eXBlUmVjb3JkID0gUmVsYXlNb2Rlcm5SZWNvcmQuY3JlYXRlKHR5cGVJRCwgVFlQRV9TQ0hFTUFfVFlQRSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNvcmRTb3VyY2Uuc2V0KHR5cGVJRCwgdHlwZVJlY29yZCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBSZWxheU1vZGVyblJlY29yZC5zZXRWYWx1ZSh0eXBlUmVjb3JkLCBhYnN0cmFjdEtleSwgaW1wbGVtZW50c0ludGVyZmFjZSk7XG5cbiAgICAgICAgICAgICAgaWYgKGltcGxlbWVudHNJbnRlcmZhY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBsZWdhY3kgYmVoYXZpb3IgZm9yIGFic3RyYWN0IHJlZmluZW1lbnRzOiBhbHdheXMgbm9ybWFsaXplIGV2ZW5cbiAgICAgICAgICAgICAgLy8gaWYgdGhlIHR5cGUgZG9lc24ndCBjb25mb3JtLCBidXQgdHJhY2sgaWYgdGhlIHR5cGUgbWF0Y2hlcyBvciBub3RcbiAgICAgICAgICAgICAgLy8gZm9yIGRldGVybWluaW5nIHdoZXRoZXIgcmVzcG9uc2UgZmllbGRzIGFyZSBleHBlY3RlZCB0byBiZSBwcmVzZW50XG4gICAgICAgICAgICAgIHZhciBfaW1wbGVtZW50c0ludGVyZmFjZSA9IGRhdGEuaGFzT3duUHJvcGVydHkoYWJzdHJhY3RLZXkpO1xuXG4gICAgICAgICAgICAgIHZhciBwYXJlbnRJc1VubWF0Y2hlZEFic3RyYWN0VHlwZSA9IHRoaXMuX2lzVW5tYXRjaGVkQWJzdHJhY3RUeXBlO1xuICAgICAgICAgICAgICB0aGlzLl9pc1VubWF0Y2hlZEFic3RyYWN0VHlwZSA9IHRoaXMuX2lzVW5tYXRjaGVkQWJzdHJhY3RUeXBlIHx8ICFfaW1wbGVtZW50c0ludGVyZmFjZTtcblxuICAgICAgICAgICAgICB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgICAgIHRoaXMuX2lzVW5tYXRjaGVkQWJzdHJhY3RUeXBlID0gcGFyZW50SXNVbm1hdGNoZWRBYnN0cmFjdFR5cGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIFRZUEVfRElTQ1JJTUlOQVRPUjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAoUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX1BSRUNJU0VfVFlQRV9SRUZJTkVNRU5UKSB7XG4gICAgICAgICAgICAgIHZhciBfYWJzdHJhY3RLZXkgPSBzZWxlY3Rpb24uYWJzdHJhY3RLZXk7XG5cbiAgICAgICAgICAgICAgdmFyIF9pbXBsZW1lbnRzSW50ZXJmYWNlMiA9IGRhdGEuaGFzT3duUHJvcGVydHkoX2Fic3RyYWN0S2V5KTtcblxuICAgICAgICAgICAgICB2YXIgX3R5cGVOYW1lMyA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldFR5cGUocmVjb3JkKTtcblxuICAgICAgICAgICAgICB2YXIgX3R5cGVJRCA9IGdlbmVyYXRlVHlwZUlEKF90eXBlTmFtZTMpO1xuXG4gICAgICAgICAgICAgIHZhciBfdHlwZVJlY29yZCA9IHRoaXMuX3JlY29yZFNvdXJjZS5nZXQoX3R5cGVJRCk7XG5cbiAgICAgICAgICAgICAgaWYgKF90eXBlUmVjb3JkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBfdHlwZVJlY29yZCA9IFJlbGF5TW9kZXJuUmVjb3JkLmNyZWF0ZShfdHlwZUlELCBUWVBFX1NDSEVNQV9UWVBFKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3JlY29yZFNvdXJjZS5zZXQoX3R5cGVJRCwgX3R5cGVSZWNvcmQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgUmVsYXlNb2Rlcm5SZWNvcmQuc2V0VmFsdWUoX3R5cGVSZWNvcmQsIF9hYnN0cmFjdEtleSwgX2ltcGxlbWVudHNJbnRlcmZhY2UyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgTElOS0VEX0hBTkRMRTpcbiAgICAgICAgY2FzZSBTQ0FMQVJfSEFORExFOlxuICAgICAgICAgIHZhciBhcmdzID0gc2VsZWN0aW9uLmFyZ3MgPyBnZXRBcmd1bWVudFZhbHVlcyhzZWxlY3Rpb24uYXJncywgdGhpcy5fdmFyaWFibGVzKSA6IHt9O1xuICAgICAgICAgIHZhciBmaWVsZEtleSA9IGdldFN0b3JhZ2VLZXkoc2VsZWN0aW9uLCB0aGlzLl92YXJpYWJsZXMpO1xuICAgICAgICAgIHZhciBoYW5kbGVLZXkgPSBnZXRIYW5kbGVTdG9yYWdlS2V5KHNlbGVjdGlvbiwgdGhpcy5fdmFyaWFibGVzKTtcblxuICAgICAgICAgIHRoaXMuX2hhbmRsZUZpZWxkUGF5bG9hZHMucHVzaCh7XG4gICAgICAgICAgICBhcmdzOiBhcmdzLFxuICAgICAgICAgICAgZGF0YUlEOiBSZWxheU1vZGVyblJlY29yZC5nZXREYXRhSUQocmVjb3JkKSxcbiAgICAgICAgICAgIGZpZWxkS2V5OiBmaWVsZEtleSxcbiAgICAgICAgICAgIGhhbmRsZTogc2VsZWN0aW9uLmhhbmRsZSxcbiAgICAgICAgICAgIGhhbmRsZUtleTogaGFuZGxlS2V5LFxuICAgICAgICAgICAgaGFuZGxlQXJnczogc2VsZWN0aW9uLmhhbmRsZUFyZ3MgPyBnZXRBcmd1bWVudFZhbHVlcyhzZWxlY3Rpb24uaGFuZGxlQXJncywgdGhpcy5fdmFyaWFibGVzKSA6IHt9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIE1PRFVMRV9JTVBPUlQ6XG4gICAgICAgICAgdGhpcy5fbm9ybWFsaXplTW9kdWxlSW1wb3J0KG5vZGUsIHNlbGVjdGlvbiwgcmVjb3JkLCBkYXRhKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgREVGRVI6XG4gICAgICAgICAgdGhpcy5fbm9ybWFsaXplRGVmZXIoc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBTVFJFQU06XG4gICAgICAgICAgdGhpcy5fbm9ybWFsaXplU3RyZWFtKHNlbGVjdGlvbiwgcmVjb3JkLCBkYXRhKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ0xJRU5UX0VYVEVOU0lPTjpcbiAgICAgICAgICB2YXIgaXNDbGllbnRFeHRlbnNpb24gPSB0aGlzLl9pc0NsaWVudEV4dGVuc2lvbjtcbiAgICAgICAgICB0aGlzLl9pc0NsaWVudEV4dGVuc2lvbiA9IHRydWU7XG5cbiAgICAgICAgICB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgICAgICAgdGhpcy5faXNDbGllbnRFeHRlbnNpb24gPSBpc0NsaWVudEV4dGVuc2lvbjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIENMSUVOVF9DT01QT05FTlQ6XG4gICAgICAgICAgaWYgKHRoaXMuX3Nob3VsZFByb2Nlc3NDbGllbnRDb21wb25lbnRzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKHNlbGVjdGlvbi5mcmFnbWVudCwgcmVjb3JkLCBkYXRhKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRkxJR0hUX0ZJRUxEOlxuICAgICAgICAgIGlmIChSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfUkVBQ1RfRkxJR0hUX0NPTVBPTkVOVF9GSUVMRCkge1xuICAgICAgICAgICAgdGhpcy5fbm9ybWFsaXplRmxpZ2h0RmllbGQobm9kZSwgc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZsaWdodCBmaWVsZHMgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgc2VsZWN0aW9uO1xuICAgICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyKCk6IFVuZXhwZWN0ZWQgYXN0IGtpbmQgYCVzYC4nLCBzZWxlY3Rpb24ua2luZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX25vcm1hbGl6ZURlZmVyID0gZnVuY3Rpb24gX25vcm1hbGl6ZURlZmVyKGRlZmVyLCByZWNvcmQsIGRhdGEpIHtcbiAgICB2YXIgaXNEZWZlcnJlZCA9IGRlZmVyW1wiaWZcIl0gPT09IG51bGwgfHwgdGhpcy5fZ2V0VmFyaWFibGVWYWx1ZShkZWZlcltcImlmXCJdKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodHlwZW9mIGlzRGVmZXJyZWQgPT09ICdib29sZWFuJywgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyOiBFeHBlY3RlZCB2YWx1ZSBmb3IgQGRlZmVyIGBpZmAgYXJndW1lbnQgdG8gJyArICdiZSBhIGJvb2xlYW4sIGdvdCBgJXNgLicsIGlzRGVmZXJyZWQpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIGlmIChpc0RlZmVycmVkID09PSBmYWxzZSkge1xuICAgICAgLy8gSWYgZGVmZXIgaXMgZGlzYWJsZWQgdGhlcmUgd2lsbCBiZSBubyBhZGRpdGlvbmFsIHJlc3BvbnNlIGNodW5rOlxuICAgICAgLy8gbm9ybWFsaXplIHRoZSBkYXRhIGFscmVhZHkgcHJlc2VudC5cbiAgICAgIHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhkZWZlciwgcmVjb3JkLCBkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIGRhdGEgKmZvciB0aGlzIHNlbGVjdGlvbiogc2hvdWxkIG5vdCBiZSBwcmVzZW50OiBlbnF1ZXVlXG4gICAgICAvLyBtZXRhZGF0YSB0byBwcm9jZXNzIHRoZSBzdWJzZXF1ZW50IHJlc3BvbnNlIGNodW5rLlxuICAgICAgdGhpcy5faW5jcmVtZW50YWxQbGFjZWhvbGRlcnMucHVzaCh7XG4gICAgICAgIGtpbmQ6ICdkZWZlcicsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGxhYmVsOiBkZWZlci5sYWJlbCxcbiAgICAgICAgcGF0aDogKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKSh0aGlzLl9wYXRoKSxcbiAgICAgICAgc2VsZWN0b3I6IGNyZWF0ZU5vcm1hbGl6YXRpb25TZWxlY3RvcihkZWZlciwgUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0RGF0YUlEKHJlY29yZCksIHRoaXMuX3ZhcmlhYmxlcyksXG4gICAgICAgIHR5cGVOYW1lOiBSZWxheU1vZGVyblJlY29yZC5nZXRUeXBlKHJlY29yZClcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX25vcm1hbGl6ZVN0cmVhbSA9IGZ1bmN0aW9uIF9ub3JtYWxpemVTdHJlYW0oc3RyZWFtLCByZWNvcmQsIGRhdGEpIHtcbiAgICAvLyBBbHdheXMgbm9ybWFsaXplIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciBzdHJlYW1pbmcgaXMgZW5hYmxlZCBvciBub3QsXG4gICAgLy8gdGhpcyBwb3B1bGF0ZXMgdGhlIGluaXRpYWwgYXJyYXkgdmFsdWUgKGluY2x1ZGluZyBhbnkgaXRlbXMgd2hlblxuICAgIC8vIGluaXRpYWxfY291bnQgPiAwKS5cbiAgICB0aGlzLl90cmF2ZXJzZVNlbGVjdGlvbnMoc3RyZWFtLCByZWNvcmQsIGRhdGEpO1xuXG4gICAgdmFyIGlzU3RyZWFtZWQgPSBzdHJlYW1bXCJpZlwiXSA9PT0gbnVsbCB8fCB0aGlzLl9nZXRWYXJpYWJsZVZhbHVlKHN0cmVhbVtcImlmXCJdKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodHlwZW9mIGlzU3RyZWFtZWQgPT09ICdib29sZWFuJywgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyOiBFeHBlY3RlZCB2YWx1ZSBmb3IgQHN0cmVhbSBgaWZgIGFyZ3VtZW50ICcgKyAndG8gYmUgYSBib29sZWFuLCBnb3QgYCVzYC4nLCBpc1N0cmVhbWVkKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJlYW1lZCA9PT0gdHJ1ZSkge1xuICAgICAgLy8gSWYgc3RyZWFtaW5nIGlzIGVuYWJsZWQsICphbHNvKiBlbWl0IG1ldGFkYXRhIHRvIHByb2Nlc3MgYW55XG4gICAgICAvLyByZXNwb25zZSBjaHVua3MgdGhhdCBtYXkgYmUgZGVsaXZlcmVkLlxuICAgICAgdGhpcy5faW5jcmVtZW50YWxQbGFjZWhvbGRlcnMucHVzaCh7XG4gICAgICAgIGtpbmQ6ICdzdHJlYW0nLFxuICAgICAgICBsYWJlbDogc3RyZWFtLmxhYmVsLFxuICAgICAgICBwYXRoOiAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKHRoaXMuX3BhdGgpLFxuICAgICAgICBwYXJlbnRJRDogUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0RGF0YUlEKHJlY29yZCksXG4gICAgICAgIG5vZGU6IHN0cmVhbSxcbiAgICAgICAgdmFyaWFibGVzOiB0aGlzLl92YXJpYWJsZXNcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX25vcm1hbGl6ZU1vZHVsZUltcG9ydCA9IGZ1bmN0aW9uIF9ub3JtYWxpemVNb2R1bGVJbXBvcnQocGFyZW50LCBtb2R1bGVJbXBvcnQsIHJlY29yZCwgZGF0YSkge1xuICAgICEodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmIGRhdGEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IEV4cGVjdGVkIGRhdGEgZm9yIEBtb2R1bGUgdG8gYmUgYW4gb2JqZWN0LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgdHlwZU5hbWUgPSBSZWxheU1vZGVyblJlY29yZC5nZXRUeXBlKHJlY29yZCk7XG4gICAgdmFyIGNvbXBvbmVudEtleSA9IGdldE1vZHVsZUNvbXBvbmVudEtleShtb2R1bGVJbXBvcnQuZG9jdW1lbnROYW1lKTtcbiAgICB2YXIgY29tcG9uZW50UmVmZXJlbmNlID0gZGF0YVtjb21wb25lbnRLZXldO1xuICAgIFJlbGF5TW9kZXJuUmVjb3JkLnNldFZhbHVlKHJlY29yZCwgY29tcG9uZW50S2V5LCBjb21wb25lbnRSZWZlcmVuY2UgIT09IG51bGwgJiYgY29tcG9uZW50UmVmZXJlbmNlICE9PSB2b2lkIDAgPyBjb21wb25lbnRSZWZlcmVuY2UgOiBudWxsKTtcbiAgICB2YXIgb3BlcmF0aW9uS2V5ID0gZ2V0TW9kdWxlT3BlcmF0aW9uS2V5KG1vZHVsZUltcG9ydC5kb2N1bWVudE5hbWUpO1xuICAgIHZhciBvcGVyYXRpb25SZWZlcmVuY2UgPSBkYXRhW29wZXJhdGlvbktleV07XG4gICAgUmVsYXlNb2Rlcm5SZWNvcmQuc2V0VmFsdWUocmVjb3JkLCBvcGVyYXRpb25LZXksIG9wZXJhdGlvblJlZmVyZW5jZSAhPT0gbnVsbCAmJiBvcGVyYXRpb25SZWZlcmVuY2UgIT09IHZvaWQgMCA/IG9wZXJhdGlvblJlZmVyZW5jZSA6IG51bGwpO1xuXG4gICAgaWYgKG9wZXJhdGlvblJlZmVyZW5jZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9tb2R1bGVJbXBvcnRQYXlsb2Fkcy5wdXNoKHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgZGF0YUlEOiBSZWxheU1vZGVyblJlY29yZC5nZXREYXRhSUQocmVjb3JkKSxcbiAgICAgICAgb3BlcmF0aW9uUmVmZXJlbmNlOiBvcGVyYXRpb25SZWZlcmVuY2UsXG4gICAgICAgIHBhdGg6ICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkodGhpcy5fcGF0aCksXG4gICAgICAgIHR5cGVOYW1lOiB0eXBlTmFtZSxcbiAgICAgICAgdmFyaWFibGVzOiB0aGlzLl92YXJpYWJsZXNcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX25vcm1hbGl6ZUZpZWxkID0gZnVuY3Rpb24gX25vcm1hbGl6ZUZpZWxkKHBhcmVudCwgc2VsZWN0aW9uLCByZWNvcmQsIGRhdGEpIHtcbiAgICAhKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiBkYXRhKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ3dyaXRlRmllbGQoKTogRXhwZWN0ZWQgZGF0YSBmb3IgZmllbGQgYCVzYCB0byBiZSBhbiBvYmplY3QuJywgc2VsZWN0aW9uLm5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgcmVzcG9uc2VLZXkgPSBzZWxlY3Rpb24uYWxpYXMgfHwgc2VsZWN0aW9uLm5hbWU7XG4gICAgdmFyIHN0b3JhZ2VLZXkgPSBnZXRTdG9yYWdlS2V5KHNlbGVjdGlvbiwgdGhpcy5fdmFyaWFibGVzKTtcbiAgICB2YXIgZmllbGRWYWx1ZSA9IGRhdGFbcmVzcG9uc2VLZXldO1xuXG4gICAgaWYgKGZpZWxkVmFsdWUgPT0gbnVsbCkge1xuICAgICAgaWYgKGZpZWxkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBGaWVsZHMgbWF5IGJlIG1pc3NpbmcgaW4gdGhlIHJlc3BvbnNlIGluIHR3byBtYWluIGNhc2VzOlxuICAgICAgICAvLyAtIEluc2lkZSBhIGNsaWVudCBleHRlbnNpb246IHRoZSBzZXJ2ZXIgd2lsbCBub3QgZ2VuZXJhbGx5IHJldHVyblxuICAgICAgICAvLyAgIHZhbHVlcyBmb3IgdGhlc2UgZmllbGRzLCBidXQgYSBsb2NhbCB1cGRhdGUgbWF5IHByb3ZpZGUgdGhlbS5cbiAgICAgICAgLy8gLSBJbnNpZGUgYW4gYWJzdHJhY3QgdHlwZSByZWZpbmVtZW50IHdoZXJlIHRoZSBjb25jcmV0ZSB0eXBlIGRvZXNcbiAgICAgICAgLy8gICBub3QgY29uZm9ybSB0byB0aGUgaW50ZXJmYWNlL3VuaW9uLlxuICAgICAgICAvLyBIb3dldmVyIGFuIG90aGVyd2lzZS1yZXF1aXJlZCBmaWVsZCBtYXkgYWxzbyBiZSBtaXNzaW5nIGlmIHRoZSBzZXJ2ZXJcbiAgICAgICAgLy8gaXMgY29uZmlndXJlZCB0byBza2lwIGZpZWxkcyB3aXRoIGBudWxsYCB2YWx1ZXMsIGluIHdoaWNoIGNhc2UgdGhlXG4gICAgICAgIC8vIGNsaWVudCBpcyBhc3N1bWVkIHRvIGJlIGNvcnJlY3RseSBjb25maWd1cmVkIHdpdGhcbiAgICAgICAgLy8gdHJlYXRNaXNzaW5nRmllbGRzQXNOdWxsPXRydWUuXG4gICAgICAgIHZhciBpc09wdGlvbmFsRmllbGQgPSB0aGlzLl9pc0NsaWVudEV4dGVuc2lvbiB8fCB0aGlzLl9pc1VubWF0Y2hlZEFic3RyYWN0VHlwZTtcblxuICAgICAgICBpZiAoaXNPcHRpb25hbEZpZWxkKSB7XG4gICAgICAgICAgLy8gRmllbGQgbm90IGV4cGVjdGVkIHRvIGV4aXN0IHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGUgc2VydmVyIGlzIHBydW5pbmcgbnVsbFxuICAgICAgICAgIC8vIGZpZWxkcyBvciBub3QuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl90cmVhdE1pc3NpbmdGaWVsZHNBc051bGwpIHtcbiAgICAgICAgICAvLyBOb3Qgb3B0aW9uYWwgYW5kIHRoZSBzZXJ2ZXIgaXMgbm90IHBydW5pbmcgbnVsbCBmaWVsZHM6IGZpZWxkIGlzIGV4cGVjdGVkXG4gICAgICAgICAgLy8gdG8gYmUgcHJlc2VudFxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdSZWxheVJlc3BvbnNlTm9ybWFsaXplcjogUGF5bG9hZCBkaWQgbm90IGNvbnRhaW4gYSB2YWx1ZSAnICsgJ2ZvciBmaWVsZCBgJXM6ICVzYC4gQ2hlY2sgdGhhdCB5b3UgYXJlIHBhcnNpbmcgd2l0aCB0aGUgc2FtZSAnICsgJ3F1ZXJ5IHRoYXQgd2FzIHVzZWQgdG8gZmV0Y2ggdGhlIHBheWxvYWQuJywgcmVzcG9uc2VLZXksIHN0b3JhZ2VLZXkpIDogdm9pZCAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGlmIChzZWxlY3Rpb24ua2luZCA9PT0gU0NBTEFSX0ZJRUxEKSB7XG4gICAgICAgICAgdGhpcy5fdmFsaWRhdGVDb25mbGljdGluZ0ZpZWxkc1dpdGhJZGVudGljYWxJZChyZWNvcmQsIHN0b3JhZ2VLZXksIGZpZWxkVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIFJlbGF5TW9kZXJuUmVjb3JkLnNldFZhbHVlKHJlY29yZCwgc3RvcmFnZUtleSwgbnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdGlvbi5raW5kID09PSBTQ0FMQVJfRklFTEQpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgdGhpcy5fdmFsaWRhdGVDb25mbGljdGluZ0ZpZWxkc1dpdGhJZGVudGljYWxJZChyZWNvcmQsIHN0b3JhZ2VLZXksIGZpZWxkVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBSZWxheU1vZGVyblJlY29yZC5zZXRWYWx1ZShyZWNvcmQsIHN0b3JhZ2VLZXksIGZpZWxkVmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uLmtpbmQgPT09IExJTktFRF9GSUVMRCkge1xuICAgICAgdGhpcy5fcGF0aC5wdXNoKHJlc3BvbnNlS2V5KTtcblxuICAgICAgaWYgKHNlbGVjdGlvbi5wbHVyYWwpIHtcbiAgICAgICAgdGhpcy5fbm9ybWFsaXplUGx1cmFsTGluayhzZWxlY3Rpb24sIHJlY29yZCwgc3RvcmFnZUtleSwgZmllbGRWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9ub3JtYWxpemVMaW5rKHNlbGVjdGlvbiwgcmVjb3JkLCBzdG9yYWdlS2V5LCBmaWVsZFZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcGF0aC5wb3AoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0aW9uO1xuICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXIoKTogVW5leHBlY3RlZCBhc3Qga2luZCBgJXNgIGR1cmluZyBub3JtYWxpemF0aW9uLicsIHNlbGVjdGlvbi5raW5kKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fbm9ybWFsaXplRmxpZ2h0RmllbGQgPSBmdW5jdGlvbiBfbm9ybWFsaXplRmxpZ2h0RmllbGQocGFyZW50LCBzZWxlY3Rpb24sIHJlY29yZCwgZGF0YSkge1xuICAgIHZhciByZXNwb25zZUtleSA9IHNlbGVjdGlvbi5hbGlhcyB8fCBzZWxlY3Rpb24ubmFtZTtcbiAgICB2YXIgc3RvcmFnZUtleSA9IGdldFN0b3JhZ2VLZXkoc2VsZWN0aW9uLCB0aGlzLl92YXJpYWJsZXMpO1xuICAgIHZhciBmaWVsZFZhbHVlID0gZGF0YVtyZXNwb25zZUtleV07XG5cbiAgICBpZiAoZmllbGRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICBpZiAoZmllbGRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIEZsaWdodCBmaWVsZCBtYXkgYmUgbWlzc2luZyBpbiB0aGUgcmVzcG9uc2UgaWY6XG4gICAgICAgIC8vIC0gSXQgaXMgaW5zaWRlIGFuIGFic3RyYWN0IHR5cGUgcmVmaW5lbWVudCB3aGVyZSB0aGUgY29uY3JldGUgdHlwZSBkb2VzXG4gICAgICAgIC8vICAgbm90IGNvbmZvcm0gdG8gdGhlIGludGVyZmFjZS91bmlvbi5cbiAgICAgICAgLy8gSG93ZXZlciBhbiBvdGhlcndpc2UtcmVxdWlyZWQgZmllbGQgbWF5IGFsc28gYmUgbWlzc2luZyBpZiB0aGUgc2VydmVyXG4gICAgICAgIC8vIGlzIGNvbmZpZ3VyZWQgdG8gc2tpcCBmaWVsZHMgd2l0aCBgbnVsbGAgdmFsdWVzLCBpbiB3aGljaCBjYXNlIHRoZVxuICAgICAgICAvLyBjbGllbnQgaXMgYXNzdW1lZCB0byBiZSBjb3JyZWN0bHkgY29uZmlndXJlZCB3aXRoXG4gICAgICAgIC8vIHRyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbD10cnVlLlxuICAgICAgICBpZiAodGhpcy5faXNVbm1hdGNoZWRBYnN0cmFjdFR5cGUpIHtcbiAgICAgICAgICAvLyBGaWVsZCBub3QgZXhwZWN0ZWQgdG8gZXhpc3QgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZSBzZXJ2ZXIgaXMgcHJ1bmluZyBudWxsXG4gICAgICAgICAgLy8gZmllbGRzIG9yIG5vdC5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX3RyZWF0TWlzc2luZ0ZpZWxkc0FzTnVsbCkge1xuICAgICAgICAgIC8vIE5vdCBvcHRpb25hbCBhbmQgdGhlIHNlcnZlciBpcyBub3QgcHJ1bmluZyBudWxsIGZpZWxkczogZmllbGQgaXMgZXhwZWN0ZWRcbiAgICAgICAgICAvLyB0byBiZSBwcmVzZW50XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyOiBQYXlsb2FkIGRpZCBub3QgY29udGFpbiBhIHZhbHVlICcgKyAnZm9yIGZpZWxkIGAlczogJXNgLiBDaGVjayB0aGF0IHlvdSBhcmUgcGFyc2luZyB3aXRoIHRoZSBzYW1lICcgKyAncXVlcnkgdGhhdCB3YXMgdXNlZCB0byBmZXRjaCB0aGUgcGF5bG9hZC4nLCByZXNwb25zZUtleSwgc3RvcmFnZUtleSkgOiB2b2lkIDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIFJlbGF5TW9kZXJuUmVjb3JkLnNldFZhbHVlKHJlY29yZCwgc3RvcmFnZUtleSwgbnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlYWN0RmxpZ2h0UGF5bG9hZCA9IHJlZmluZVRvUmVhY3RGbGlnaHRQYXlsb2FkRGF0YShmaWVsZFZhbHVlKTtcbiAgICB2YXIgcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyID0gdGhpcy5fcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyO1xuICAgICEocmVhY3RGbGlnaHRQYXlsb2FkICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IEV4cGVjdGVkIFJlYWN0IEZsaWdodCBwYXlsb2FkIGRhdGEgdG8gYmUgYW4gJyArICdvYmplY3Qgd2l0aCBgc3RhdHVzYCwgdHJlZWAsIGBxdWVyaWVzYCBhbmQgYGVycm9yc2AgcHJvcGVydGllcywgZ290ICcgKyAnYCVzYC4nLCBmaWVsZFZhbHVlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgISh0eXBlb2YgcmVhY3RGbGlnaHRQYXlsb2FkRGVzZXJpYWxpemVyID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyOiBFeHBlY3RlZCByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIgdG8gJyArICdiZSBhIGZ1bmN0aW9uLCBnb3QgYCVzYC4nLCByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmIChyZWFjdEZsaWdodFBheWxvYWQuZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fcmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5fcmVhY3RGbGlnaHRTZXJ2ZXJFcnJvckhhbmRsZXIocmVhY3RGbGlnaHRQYXlsb2FkLnN0YXR1cywgcmVhY3RGbGlnaHRQYXlsb2FkLmVycm9ycyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IFJlY2VpdmVkIHNlcnZlciBlcnJvcnMgZm9yIGZpZWxkIGAlc2AuXFxuXFxuJyArICclc1xcbiVzJywgcmVzcG9uc2VLZXksIHJlYWN0RmxpZ2h0UGF5bG9hZC5lcnJvcnNbMF0ubWVzc2FnZSwgcmVhY3RGbGlnaHRQYXlsb2FkLmVycm9yc1swXS5zdGFjaykgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlYWN0RmxpZ2h0SUQgPSBnZW5lcmF0ZUNsaWVudElEKFJlbGF5TW9kZXJuUmVjb3JkLmdldERhdGFJRChyZWNvcmQpLCBnZXRTdG9yYWdlS2V5KHNlbGVjdGlvbiwgdGhpcy5fdmFyaWFibGVzKSk7XG5cbiAgICB2YXIgcmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZCA9IHRoaXMuX3JlY29yZFNvdXJjZS5nZXQocmVhY3RGbGlnaHRJRCk7XG5cbiAgICBpZiAocmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZCA9PSBudWxsKSB7XG4gICAgICByZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkID0gUmVsYXlNb2Rlcm5SZWNvcmQuY3JlYXRlKHJlYWN0RmxpZ2h0SUQsIFJFQUNUX0ZMSUdIVF9UWVBFX05BTUUpO1xuXG4gICAgICB0aGlzLl9yZWNvcmRTb3VyY2Uuc2V0KHJlYWN0RmxpZ2h0SUQsIHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmQpO1xuICAgIH1cblxuICAgIGlmIChyZWFjdEZsaWdodFBheWxvYWQudHJlZSA9PSBudWxsKSB7XG4gICAgICAvLyBUaGlzIHR5cGljYWxseSBpbmRpY2F0ZXMgdGhhdCBhIGZhdGFsIHNlcnZlciBlcnJvciBwcmV2ZW50ZWQgcm93cyBmcm9tXG4gICAgICAvLyBiZWluZyB3cml0dGVuLiBXaGVuIHRoaXMgb2NjdXJzLCB3ZSBzaG91bGQgbm90IGNvbnRpbnVlIG5vcm1hbGl6YXRpb24gb2ZcbiAgICAgIC8vIHRoZSBGbGlnaHQgZmllbGQgYmVjYXVzZSB0aGUgcm93IHJlc3BvbnNlIGlzIG1hbGZvcm1lZC5cbiAgICAgIC8vXG4gICAgICAvLyBSZWNlaXZpbmcgZW1wdHkgcm93cyBpcyBPSyBiZWNhdXNlIGl0IGNhbiBpbmRpY2F0ZSB0aGUgc3RhcnQgb2YgYSBzdHJlYW0uXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IEV4cGVjdGVkIGB0cmVlYCBub3QgdG8gYmUgbnVsbC4gVGhpcyAnICsgJ3R5cGljYWxseSBpbmRpY2F0ZXMgdGhhdCBhIGZhdGFsIHNlcnZlciBlcnJvciBwcmV2ZW50ZWQgYW55IFNlcnZlciAnICsgJ0NvbXBvbmVudCByb3dzIGZyb20gYmVpbmcgd3JpdHRlbi4nKSA6IHZvaWQgMDsgLy8gV2UgY3JlYXRlIHRoZSBmbGlnaHQgcmVjb3JkIHdpdGggYSBudWxsIHZhbHVlIGZvciB0aGUgdHJlZVxuICAgICAgLy8gYW5kIGVtcHR5IHJlYWNoYWJsZSBkZWZpbml0aW9uc1xuXG4gICAgICBSZWxheU1vZGVyblJlY29yZC5zZXRWYWx1ZShyZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkLCBSRUFDVF9GTElHSFRfVFJFRV9TVE9SQUdFX0tFWSwgbnVsbCk7XG4gICAgICBSZWxheU1vZGVyblJlY29yZC5zZXRWYWx1ZShyZWFjdEZsaWdodENsaWVudFJlc3BvbnNlUmVjb3JkLCBSRUFDVF9GTElHSFRfRVhFQ1VUQUJMRV9ERUZJTklUSU9OU19TVE9SQUdFX0tFWSwgW10pO1xuICAgICAgUmVsYXlNb2Rlcm5SZWNvcmQuc2V0TGlua2VkUmVjb3JkSUQocmVjb3JkLCBzdG9yYWdlS2V5LCByZWFjdEZsaWdodElEKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFdlIHN0b3JlIHRoZSBkZXNlcmlhbGl6ZWQgcmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZSBpbiBhIHNlcGFyYXRlXG4gICAgLy8gcmVjb3JkIGFuZCBsaW5rIGl0IHRvIHRoZSBwYXJlbnQgcmVjb3JkLiBUaGlzIGlzIHNvIHdlIGNhbiBHQyB0aGUgRmxpZ2h0XG4gICAgLy8gdHJlZSBsYXRlciBldmVuIGlmIHRoZSBwYXJlbnQgcmVjb3JkIGlzIHN0aWxsIHJlYWNoYWJsZS5cblxuXG4gICAgdmFyIHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2UgPSByZWFjdEZsaWdodFBheWxvYWREZXNlcmlhbGl6ZXIocmVhY3RGbGlnaHRQYXlsb2FkLnRyZWUpO1xuICAgIFJlbGF5TW9kZXJuUmVjb3JkLnNldFZhbHVlKHJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2VSZWNvcmQsIFJFQUNUX0ZMSUdIVF9UUkVFX1NUT1JBR0VfS0VZLCByZWFjdEZsaWdodENsaWVudFJlc3BvbnNlKTtcbiAgICB2YXIgcmVhY2hhYmxlRXhlY3V0YWJsZURlZmluaXRpb25zID0gW107XG5cbiAgICB2YXIgX2l0ZXJhdG9yID0gKDAsIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMltcImRlZmF1bHRcIl0pKHJlYWN0RmxpZ2h0UGF5bG9hZC5xdWVyaWVzKSxcbiAgICAgICAgX3N0ZXA7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgaWYgKHF1ZXJ5LnJlc3BvbnNlLmRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuX21vZHVsZUltcG9ydFBheWxvYWRzLnB1c2goe1xuICAgICAgICAgICAgZGF0YTogcXVlcnkucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICAgIGRhdGFJRDogUk9PVF9JRCxcbiAgICAgICAgICAgIG9wZXJhdGlvblJlZmVyZW5jZTogcXVlcnkubW9kdWxlLFxuICAgICAgICAgICAgcGF0aDogW10sXG4gICAgICAgICAgICB0eXBlTmFtZTogUk9PVF9UWVBFLFxuICAgICAgICAgICAgdmFyaWFibGVzOiBxdWVyeS52YXJpYWJsZXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlYWNoYWJsZUV4ZWN1dGFibGVEZWZpbml0aW9ucy5wdXNoKHtcbiAgICAgICAgICBtb2R1bGU6IHF1ZXJ5Lm1vZHVsZSxcbiAgICAgICAgICB2YXJpYWJsZXM6IHF1ZXJ5LnZhcmlhYmxlc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pdGVyYXRvcjIgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkocmVhY3RGbGlnaHRQYXlsb2FkLmZyYWdtZW50cyksXG4gICAgICAgIF9zdGVwMjtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge1xuICAgICAgICB2YXIgZnJhZ21lbnQgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgaWYgKGZyYWdtZW50LnJlc3BvbnNlLmRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuX21vZHVsZUltcG9ydFBheWxvYWRzLnB1c2goe1xuICAgICAgICAgICAgZGF0YTogZnJhZ21lbnQucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICAgIGRhdGFJRDogZnJhZ21lbnQuX19pZCxcbiAgICAgICAgICAgIG9wZXJhdGlvblJlZmVyZW5jZTogZnJhZ21lbnQubW9kdWxlLFxuICAgICAgICAgICAgcGF0aDogW10sXG4gICAgICAgICAgICB0eXBlTmFtZTogZnJhZ21lbnQuX190eXBlbmFtZSxcbiAgICAgICAgICAgIHZhcmlhYmxlczogZnJhZ21lbnQudmFyaWFibGVzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWFjaGFibGVFeGVjdXRhYmxlRGVmaW5pdGlvbnMucHVzaCh7XG4gICAgICAgICAgbW9kdWxlOiBmcmFnbWVudC5tb2R1bGUsXG4gICAgICAgICAgdmFyaWFibGVzOiBmcmFnbWVudC52YXJpYWJsZXNcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IyLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yMi5mKCk7XG4gICAgfVxuXG4gICAgUmVsYXlNb2Rlcm5SZWNvcmQuc2V0VmFsdWUocmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZVJlY29yZCwgUkVBQ1RfRkxJR0hUX0VYRUNVVEFCTEVfREVGSU5JVElPTlNfU1RPUkFHRV9LRVksIHJlYWNoYWJsZUV4ZWN1dGFibGVEZWZpbml0aW9ucyk7XG4gICAgUmVsYXlNb2Rlcm5SZWNvcmQuc2V0TGlua2VkUmVjb3JkSUQocmVjb3JkLCBzdG9yYWdlS2V5LCByZWFjdEZsaWdodElEKTtcbiAgfTtcblxuICBfcHJvdG8uX25vcm1hbGl6ZUxpbmsgPSBmdW5jdGlvbiBfbm9ybWFsaXplTGluayhmaWVsZCwgcmVjb3JkLCBzdG9yYWdlS2V5LCBmaWVsZFZhbHVlKSB7XG4gICAgdmFyIF9maWVsZCRjb25jcmV0ZVR5cGU7XG5cbiAgICAhKHR5cGVvZiBmaWVsZFZhbHVlID09PSAnb2JqZWN0JyAmJiBmaWVsZFZhbHVlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyOiBFeHBlY3RlZCBkYXRhIGZvciBmaWVsZCBgJXNgIHRvIGJlIGFuIG9iamVjdC4nLCBzdG9yYWdlS2V5KSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIG5leHRJRCA9IHRoaXMuX2dldERhdGFJZCggLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdmFyaWFuY2VdXG4gICAgZmllbGRWYWx1ZSwgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdmFyaWFuY2VdXG4gICAgKF9maWVsZCRjb25jcmV0ZVR5cGUgPSBmaWVsZC5jb25jcmV0ZVR5cGUpICE9PSBudWxsICYmIF9maWVsZCRjb25jcmV0ZVR5cGUgIT09IHZvaWQgMCA/IF9maWVsZCRjb25jcmV0ZVR5cGUgOiB0aGlzLl9nZXRSZWNvcmRUeXBlKGZpZWxkVmFsdWUpKSB8fCAvLyBSZXVzZSBwcmV2aW91c2x5IGdlbmVyYXRlZCBjbGllbnQgSURzXG4gICAgUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0TGlua2VkUmVjb3JkSUQocmVjb3JkLCBzdG9yYWdlS2V5KSB8fCBnZW5lcmF0ZUNsaWVudElEKFJlbGF5TW9kZXJuUmVjb3JkLmdldERhdGFJRChyZWNvcmQpLCBzdG9yYWdlS2V5KTtcbiAgICAhKHR5cGVvZiBuZXh0SUQgPT09ICdzdHJpbmcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyOiBFeHBlY3RlZCBpZCBvbiBmaWVsZCBgJXNgIHRvIGJlIGEgc3RyaW5nLicsIHN0b3JhZ2VLZXkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHRoaXMuX3ZhbGlkYXRlQ29uZmxpY3RpbmdMaW5rZWRGaWVsZHNXaXRoSWRlbnRpY2FsSWQocmVjb3JkLCBSZWxheU1vZGVyblJlY29yZC5nZXRMaW5rZWRSZWNvcmRJRChyZWNvcmQsIHN0b3JhZ2VLZXkpLCBuZXh0SUQsIHN0b3JhZ2VLZXkpO1xuICAgIH1cblxuICAgIFJlbGF5TW9kZXJuUmVjb3JkLnNldExpbmtlZFJlY29yZElEKHJlY29yZCwgc3RvcmFnZUtleSwgbmV4dElEKTtcblxuICAgIHZhciBuZXh0UmVjb3JkID0gdGhpcy5fcmVjb3JkU291cmNlLmdldChuZXh0SUQpO1xuXG4gICAgaWYgKCFuZXh0UmVjb3JkKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS12YXJpYW5jZV1cbiAgICAgIHZhciBfdHlwZU5hbWU0ID0gZmllbGQuY29uY3JldGVUeXBlIHx8IHRoaXMuX2dldFJlY29yZFR5cGUoZmllbGRWYWx1ZSk7XG5cbiAgICAgIG5leHRSZWNvcmQgPSBSZWxheU1vZGVyblJlY29yZC5jcmVhdGUobmV4dElELCBfdHlwZU5hbWU0KTtcblxuICAgICAgdGhpcy5fcmVjb3JkU291cmNlLnNldChuZXh0SUQsIG5leHRSZWNvcmQpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICB0aGlzLl92YWxpZGF0ZVJlY29yZFR5cGUobmV4dFJlY29yZCwgZmllbGQsIGZpZWxkVmFsdWUpO1xuICAgIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdmFyaWFuY2VdXG5cblxuICAgIHRoaXMuX3RyYXZlcnNlU2VsZWN0aW9ucyhmaWVsZCwgbmV4dFJlY29yZCwgZmllbGRWYWx1ZSk7XG4gIH07XG5cbiAgX3Byb3RvLl9ub3JtYWxpemVQbHVyYWxMaW5rID0gZnVuY3Rpb24gX25vcm1hbGl6ZVBsdXJhbExpbmsoZmllbGQsIHJlY29yZCwgc3RvcmFnZUtleSwgZmllbGRWYWx1ZSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAhQXJyYXkuaXNBcnJheShmaWVsZFZhbHVlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyOiBFeHBlY3RlZCBkYXRhIGZvciBmaWVsZCBgJXNgIHRvIGJlIGFuIGFycmF5ICcgKyAnb2Ygb2JqZWN0cy4nLCBzdG9yYWdlS2V5KSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIHByZXZJRHMgPSBSZWxheU1vZGVyblJlY29yZC5nZXRMaW5rZWRSZWNvcmRJRHMocmVjb3JkLCBzdG9yYWdlS2V5KTtcbiAgICB2YXIgbmV4dElEcyA9IFtdO1xuICAgIGZpZWxkVmFsdWUuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgbmV4dEluZGV4KSB7XG4gICAgICB2YXIgX2ZpZWxkJGNvbmNyZXRlVHlwZTI7XG5cbiAgICAgIC8vIHZhbGlkYXRlIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChpdGVtID09IG51bGwpIHtcbiAgICAgICAgbmV4dElEcy5wdXNoKGl0ZW0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl9wYXRoLnB1c2goU3RyaW5nKG5leHRJbmRleCkpO1xuXG4gICAgICAhKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWxheVJlc3BvbnNlTm9ybWFsaXplcjogRXhwZWN0ZWQgZWxlbWVudHMgZm9yIGZpZWxkIGAlc2AgdG8gYmUgJyArICdvYmplY3RzLicsIHN0b3JhZ2VLZXkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBuZXh0SUQgPSBfdGhpcy5fZ2V0RGF0YUlkKCAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS12YXJpYW5jZV1cbiAgICAgIGl0ZW0sIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXZhcmlhbmNlXVxuICAgICAgKF9maWVsZCRjb25jcmV0ZVR5cGUyID0gZmllbGQuY29uY3JldGVUeXBlKSAhPT0gbnVsbCAmJiBfZmllbGQkY29uY3JldGVUeXBlMiAhPT0gdm9pZCAwID8gX2ZpZWxkJGNvbmNyZXRlVHlwZTIgOiBfdGhpcy5fZ2V0UmVjb3JkVHlwZShpdGVtKSkgfHwgcHJldklEcyAmJiBwcmV2SURzW25leHRJbmRleF0gfHwgLy8gUmV1c2UgcHJldmlvdXNseSBnZW5lcmF0ZWQgY2xpZW50IElEczpcbiAgICAgIGdlbmVyYXRlQ2xpZW50SUQoUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0RGF0YUlEKHJlY29yZCksIHN0b3JhZ2VLZXksIG5leHRJbmRleCk7XG4gICAgICAhKHR5cGVvZiBuZXh0SUQgPT09ICdzdHJpbmcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyOiBFeHBlY3RlZCBpZCBvZiBlbGVtZW50cyBvZiBmaWVsZCBgJXNgIHRvICcgKyAnYmUgc3RyaW5ncy4nLCBzdG9yYWdlS2V5KSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBuZXh0SURzLnB1c2gobmV4dElEKTtcblxuICAgICAgdmFyIG5leHRSZWNvcmQgPSBfdGhpcy5fcmVjb3JkU291cmNlLmdldChuZXh0SUQpO1xuXG4gICAgICBpZiAoIW5leHRSZWNvcmQpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdmFyaWFuY2VdXG4gICAgICAgIHZhciBfdHlwZU5hbWU1ID0gZmllbGQuY29uY3JldGVUeXBlIHx8IF90aGlzLl9nZXRSZWNvcmRUeXBlKGl0ZW0pO1xuXG4gICAgICAgIG5leHRSZWNvcmQgPSBSZWxheU1vZGVyblJlY29yZC5jcmVhdGUobmV4dElELCBfdHlwZU5hbWU1KTtcblxuICAgICAgICBfdGhpcy5fcmVjb3JkU291cmNlLnNldChuZXh0SUQsIG5leHRSZWNvcmQpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgX3RoaXMuX3ZhbGlkYXRlUmVjb3JkVHlwZShuZXh0UmVjb3JkLCBmaWVsZCwgaXRlbSk7XG4gICAgICB9IC8vIE5PVEU6IHRoZSBjaGVjayB0byBzdHJpcCBfX0RFVl9fIGNvZGUgb25seSB3b3JrcyBmb3Igc2ltcGxlXG4gICAgICAvLyBgaWYgKF9fREVWX18pYFxuXG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgaWYgKHByZXZJRHMpIHtcbiAgICAgICAgICBfdGhpcy5fdmFsaWRhdGVDb25mbGljdGluZ0xpbmtlZEZpZWxkc1dpdGhJZGVudGljYWxJZChyZWNvcmQsIHByZXZJRHNbbmV4dEluZGV4XSwgbmV4dElELCBzdG9yYWdlS2V5KTtcbiAgICAgICAgfVxuICAgICAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS12YXJpYW5jZV1cblxuXG4gICAgICBfdGhpcy5fdHJhdmVyc2VTZWxlY3Rpb25zKGZpZWxkLCBuZXh0UmVjb3JkLCBpdGVtKTtcblxuICAgICAgX3RoaXMuX3BhdGgucG9wKCk7XG4gICAgfSk7XG4gICAgUmVsYXlNb2Rlcm5SZWNvcmQuc2V0TGlua2VkUmVjb3JkSURzKHJlY29yZCwgc3RvcmFnZUtleSwgbmV4dElEcyk7XG4gIH1cbiAgLyoqXG4gICAqIFdhcm5zIGlmIHRoZSB0eXBlIG9mIHRoZSByZWNvcmQgZG9lcyBub3QgbWF0Y2ggdGhlIHR5cGUgb2YgdGhlIGZpZWxkL3BheWxvYWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl92YWxpZGF0ZVJlY29yZFR5cGUgPSBmdW5jdGlvbiBfdmFsaWRhdGVSZWNvcmRUeXBlKHJlY29yZCwgZmllbGQsIHBheWxvYWQpIHtcbiAgICB2YXIgX2ZpZWxkJGNvbmNyZXRlVHlwZTM7XG5cbiAgICB2YXIgdHlwZU5hbWUgPSAoX2ZpZWxkJGNvbmNyZXRlVHlwZTMgPSBmaWVsZC5jb25jcmV0ZVR5cGUpICE9PSBudWxsICYmIF9maWVsZCRjb25jcmV0ZVR5cGUzICE9PSB2b2lkIDAgPyBfZmllbGQkY29uY3JldGVUeXBlMyA6IHRoaXMuX2dldFJlY29yZFR5cGUocGF5bG9hZCk7XG4gICAgdmFyIGRhdGFJRCA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldERhdGFJRChyZWNvcmQpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoaXNDbGllbnRJRChkYXRhSUQpICYmIGRhdGFJRCAhPT0gUk9PVF9JRCB8fCBSZWxheU1vZGVyblJlY29yZC5nZXRUeXBlKHJlY29yZCkgPT09IHR5cGVOYW1lLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IEludmFsaWQgcmVjb3JkIGAlc2AuIEV4cGVjdGVkICVzIHRvIGJlICcgKyAnY29uc2lzdGVudCwgYnV0IHRoZSByZWNvcmQgd2FzIGFzc2lnbmVkIGNvbmZsaWN0aW5nIHR5cGVzIGAlc2AgJyArICdhbmQgYCVzYC4gVGhlIEdyYXBoUUwgc2VydmVyIGxpa2VseSB2aW9sYXRlZCB0aGUgZ2xvYmFsbHkgdW5pcXVlICcgKyAnaWQgcmVxdWlyZW1lbnQgYnkgcmV0dXJuaW5nIHRoZSBzYW1lIGlkIGZvciBkaWZmZXJlbnQgb2JqZWN0cy4nLCBkYXRhSUQsIFRZUEVOQU1FX0tFWSwgUmVsYXlNb2Rlcm5SZWNvcmQuZ2V0VHlwZShyZWNvcmQpLCB0eXBlTmFtZSkgOiB2b2lkIDA7XG4gIH1cbiAgLyoqXG4gICAqIFdhcm5zIGlmIGEgc2luZ2xlIHJlc3BvbnNlIGNvbnRhaW5zIGNvbmZsaWN0aW5nIGZpZWxkcyB3aXRoIHRoZSBzYW1lIGlkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl92YWxpZGF0ZUNvbmZsaWN0aW5nRmllbGRzV2l0aElkZW50aWNhbElkID0gZnVuY3Rpb24gX3ZhbGlkYXRlQ29uZmxpY3RpbmdGaWVsZHNXaXRoSWRlbnRpY2FsSWQocmVjb3JkLCBzdG9yYWdlS2V5LCBmaWVsZFZhbHVlKSB7XG4gICAgLy8gTk9URTogT25seSBjYWxsIHRoaXMgZnVuY3Rpb24gaW4gREVWXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgdmFyIGRhdGFJRCA9IFJlbGF5TW9kZXJuUmVjb3JkLmdldERhdGFJRChyZWNvcmQpO1xuICAgICAgdmFyIHByZXZpb3VzVmFsdWUgPSBSZWxheU1vZGVyblJlY29yZC5nZXRWYWx1ZShyZWNvcmQsIHN0b3JhZ2VLZXkpO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdG9yYWdlS2V5ID09PSBUWVBFTkFNRV9LRVkgfHwgcHJldmlvdXNWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IGFyZUVxdWFsKHByZXZpb3VzVmFsdWUsIGZpZWxkVmFsdWUpLCAnUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI6IEludmFsaWQgcmVjb3JkLiBUaGUgcmVjb3JkIGNvbnRhaW5zIHR3byAnICsgJ2luc3RhbmNlcyBvZiB0aGUgc2FtZSBpZDogYCVzYCB3aXRoIGNvbmZsaWN0aW5nIGZpZWxkLCAlcyBhbmQgaXRzIHZhbHVlczogJXMgYW5kICVzLiAnICsgJ0lmIHR3byBmaWVsZHMgYXJlIGRpZmZlcmVudCBidXQgc2hhcmUgJyArICd0aGUgc2FtZSBpZCwgb25lIGZpZWxkIHdpbGwgb3ZlcndyaXRlIHRoZSBvdGhlci4nLCBkYXRhSUQsIHN0b3JhZ2VLZXksIHByZXZpb3VzVmFsdWUsIGZpZWxkVmFsdWUpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogV2FybnMgaWYgYSBzaW5nbGUgcmVzcG9uc2UgY29udGFpbnMgY29uZmxpY3RpbmcgZmllbGRzIHdpdGggdGhlIHNhbWUgaWRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uX3ZhbGlkYXRlQ29uZmxpY3RpbmdMaW5rZWRGaWVsZHNXaXRoSWRlbnRpY2FsSWQgPSBmdW5jdGlvbiBfdmFsaWRhdGVDb25mbGljdGluZ0xpbmtlZEZpZWxkc1dpdGhJZGVudGljYWxJZChyZWNvcmQsIHByZXZJRCwgbmV4dElELCBzdG9yYWdlS2V5KSB7XG4gICAgLy8gTk9URTogT25seSBjYWxsIHRoaXMgZnVuY3Rpb24gaW4gREVWXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcmV2SUQgPT09IHVuZGVmaW5lZCB8fCBwcmV2SUQgPT09IG5leHRJRCwgJ1JlbGF5UmVzcG9uc2VOb3JtYWxpemVyOiBJbnZhbGlkIHJlY29yZC4gVGhlIHJlY29yZCBjb250YWlucyAnICsgJ3JlZmVyZW5jZXMgdG8gdGhlIGNvbmZsaWN0aW5nIGZpZWxkLCAlcyBhbmQgaXRzIGlkIHZhbHVlczogJXMgYW5kICVzLiAnICsgJ1dlIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHJlY29yZCB0aGUgZmllbGQgcG9pbnRzICcgKyAndG8gcmVtYWlucyBjb25zaXN0ZW50IG9yIG9uZSBmaWVsZCB3aWxsIG92ZXJ3cml0ZSB0aGUgb3RoZXIuJywgc3RvcmFnZUtleSwgcHJldklELCBuZXh0SUQpIDogdm9pZCAwO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVsYXlSZXNwb25zZU5vcm1hbGl6ZXI7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBub3JtYWxpemU6IG5vcm1hbGl6ZVxufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL1JlbGF5TW9kZXJuUmVjb3JkJyksXG4gICAgZ2V0VHlwZSA9IF9yZXF1aXJlLmdldFR5cGU7XG5cbi8vIFJlYWNoYWJsZSAoY2xpZW50KSBleGVjdXRhYmxlIGRlZmluaXRpb25zIGVuY291bnRlcmVkIHdoaWxlIHNlcnZlciBjb21wb25lbnRcbi8vIHJlbmRlcmluZ1xudmFyIFJFQUNUX0ZMSUdIVF9FWEVDVVRBQkxFX0RFRklOSVRJT05TX1NUT1JBR0VfS0VZID0gJ2V4ZWN1dGFibGVEZWZpbml0aW9ucyc7XG52YXIgUkVBQ1RfRkxJR0hUX1RSRUVfU1RPUkFHRV9LRVkgPSAndHJlZSc7XG52YXIgUkVBQ1RfRkxJR0hUX1RZUEVfTkFNRSA9ICdSZWFjdEZsaWdodENvbXBvbmVudCc7XG5cbmZ1bmN0aW9uIHJlZmluZVRvUmVhY3RGbGlnaHRQYXlsb2FkRGF0YShwYXlsb2FkKSB7XG4gIGlmIChwYXlsb2FkID09IG51bGwgfHwgdHlwZW9mIHBheWxvYWQgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBwYXlsb2FkLnN0YXR1cyAhPT0gJ3N0cmluZycgfHwgIUFycmF5LmlzQXJyYXkocGF5bG9hZC50cmVlKSAmJiBwYXlsb2FkLnRyZWUgIT09IG51bGwgfHwgIUFycmF5LmlzQXJyYXkocGF5bG9hZC5xdWVyaWVzKSB8fCAhQXJyYXkuaXNBcnJheShwYXlsb2FkLmZyYWdtZW50cykgfHwgIUFycmF5LmlzQXJyYXkocGF5bG9hZC5lcnJvcnMpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF5bG9hZDtcbn1cblxuZnVuY3Rpb24gZ2V0UmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZShyZWNvcmQpIHtcbiAgIShnZXRUeXBlKHJlY29yZCkgPT09IFJFQUNUX0ZMSUdIVF9UWVBFX05BTUUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnZ2V0UmVhY3RGbGlnaHRDbGllbnRSZXNwb25zZSgpOiBFeHBlY3RlZCBhIFJlYWN0RmxpZ2h0Q29tcG9uZW50UmVjb3JkLCAnICsgJ2dvdCAlcy4nLCByZWNvcmQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIHJlc3BvbnNlID0gcmVjb3JkW1JFQUNUX0ZMSUdIVF9UUkVFX1NUT1JBR0VfS0VZXTtcblxuICBpZiAocmVzcG9uc2UgIT0gbnVsbCkge1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUkVBQ1RfRkxJR0hUX0VYRUNVVEFCTEVfREVGSU5JVElPTlNfU1RPUkFHRV9LRVk6IFJFQUNUX0ZMSUdIVF9FWEVDVVRBQkxFX0RFRklOSVRJT05TX1NUT1JBR0VfS0VZLFxuICBSRUFDVF9GTElHSFRfVFJFRV9TVE9SQUdFX0tFWTogUkVBQ1RfRkxJR0hUX1RSRUVfU1RPUkFHRV9LRVksXG4gIFJFQUNUX0ZMSUdIVF9UWVBFX05BTUU6IFJFQUNUX0ZMSUdIVF9UWVBFX05BTUUsXG4gIGdldFJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2U6IGdldFJlYWN0RmxpZ2h0Q2xpZW50UmVzcG9uc2UsXG4gIHJlZmluZVRvUmVhY3RGbGlnaHRQYXlsb2FkRGF0YTogcmVmaW5lVG9SZWFjdEZsaWdodFBheWxvYWREYXRhXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVsYXlGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuLi91dGlsL1JlbGF5RmVhdHVyZUZsYWdzJyk7XG5cbnZhciBSZWxheVJlYWRlciA9IHJlcXVpcmUoJy4vUmVsYXlSZWFkZXInKTtcblxudmFyIGRlZXBGcmVlemUgPSByZXF1aXJlKCcuLi91dGlsL2RlZXBGcmVlemUnKTtcblxudmFyIGhhc092ZXJsYXBwaW5nSURzID0gcmVxdWlyZSgnLi9oYXNPdmVybGFwcGluZ0lEcycpO1xuXG52YXIgcmVjeWNsZU5vZGVzSW50byA9IHJlcXVpcmUoJy4uL3V0aWwvcmVjeWNsZU5vZGVzSW50bycpO1xuXG52YXIgUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWxheVN0b3JlU3Vic2NyaXB0aW9ucyhsb2cpIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gbmV3IFNldCgpO1xuICAgIHRoaXMuX19sb2cgPSBsb2c7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnMucHJvdG90eXBlO1xuXG4gIF9wcm90by5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoc25hcHNob3QsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBzdWJzY3JpcHRpb24gPSB7XG4gICAgICBiYWNrdXA6IG51bGwsXG4gICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICBzbmFwc2hvdDogc25hcHNob3QsXG4gICAgICBzdGFsZTogZmFsc2VcbiAgICB9O1xuXG4gICAgdmFyIGRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNbXCJkZWxldGVcIl0oc3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuXG4gICAgdGhpcy5fc3Vic2NyaXB0aW9ucy5hZGQoc3Vic2NyaXB0aW9uKTtcblxuICAgIHJldHVybiB7XG4gICAgICBkaXNwb3NlOiBkaXNwb3NlXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uc25hcHNob3RTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gc25hcHNob3RTdWJzY3JpcHRpb25zKHNvdXJjZSkge1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAvLyBCYWNrdXAgb2NjdXJzIGFmdGVyIHdyaXRpbmcgYSBuZXcgXCJmaW5hbFwiIHBheWxvYWQocykgYW5kIGJlZm9yZSAocmUpYXBwbHlpbmdcbiAgICAgIC8vIG9wdGltaXN0aWMgY2hhbmdlcy4gRWFjaCBzdWJzY3JpcHRpb24ncyBgc25hcHNob3RgIHJlcHJlc2VudHMgd2hhdCB3YXMgKmxhc3RcbiAgICAgIC8vIHB1Ymxpc2hlZCB0byB0aGUgc3Vic2NyaWJlciosIHdoaWNoIG5vdGFibHkgbWF5IGluY2x1ZGUgcHJldmlvdXMgb3B0aW1pc3RpY1xuICAgICAgLy8gdXBkYXRlcy4gVGhlcmVmb3JlIGEgc3Vic2NyaXB0aW9uIGNhbiBiZSBpbiBhbnkgb2YgdGhlIGZvbGxvd2luZyBzdGF0ZXM6XG4gICAgICAvLyAtIHN0YWxlPXRydWU6IFRoaXMgc3Vic2NyaXB0aW9uIHdhcyByZXN0b3JlZCB0byBhIGRpZmZlcmVudCB2YWx1ZSB0aGFuXG4gICAgICAvLyAgIGBzbmFwc2hvdGAuIFRoYXQgbWVhbnMgdGhpcyBzdWJzY3JpcHRpb24gaGFzIGNoYW5nZXMgcmVsYXRpdmUgdG8gaXRzIGJhc2UsXG4gICAgICAvLyAgIGJ1dCBpdHMgYmFzZSBoYXMgY2hhbmdlZCAod2UganVzdCBhcHBsaWVkIGEgZmluYWwgcGF5bG9hZCk6IHJlY29tcHV0ZVxuICAgICAgLy8gICBhIGJhY2t1cCBzbyB0aGF0IHdlIGNhbiBsYXRlciByZXN0b3JlIHRvIHRoZSBzdGF0ZSB0aGUgc3Vic2NyaXB0aW9uXG4gICAgICAvLyAgIHNob3VsZCBiZSBpbi5cbiAgICAgIC8vIC0gc3RhbGU9ZmFsc2U6IFRoaXMgc3Vic2NyaXB0aW9uIHdhcyByZXN0b3JlZCB0byB0aGUgc2FtZSB2YWx1ZSBhc1xuICAgICAgLy8gICBgc25hcHNob3RgLiBUaGF0IG1lYW5zIHRoaXMgc3Vic2NyaXB0aW9uIGRvZXMgKm5vdCogaGF2ZSBjaGFuZ2VzIHJlbGF0aXZlXG4gICAgICAvLyAgIHRvIGl0cyBiYXNlLCBzbyB0aGUgY3VycmVudCBgc25hcHNob3RgIGlzIHZhbGlkIHRvIHVzZSBhcyBhIGJhY2t1cC5cbiAgICAgIGlmICghc3Vic2NyaXB0aW9uLnN0YWxlKSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5iYWNrdXAgPSBzdWJzY3JpcHRpb24uc25hcHNob3Q7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNuYXBzaG90ID0gc3Vic2NyaXB0aW9uLnNuYXBzaG90O1xuICAgICAgdmFyIGJhY2t1cCA9IFJlbGF5UmVhZGVyLnJlYWQoc291cmNlLCBzbmFwc2hvdC5zZWxlY3Rvcik7XG4gICAgICB2YXIgbmV4dERhdGEgPSByZWN5Y2xlTm9kZXNJbnRvKHNuYXBzaG90LmRhdGEsIGJhY2t1cC5kYXRhKTtcbiAgICAgIGJhY2t1cC5kYXRhID0gbmV4dERhdGE7IC8vIGJhY2t1cCBvd25zIHRoZSBzbmFwc2hvdCBhbmQgY2FuIHNhZmVseSBtdXRhdGVcblxuICAgICAgc3Vic2NyaXB0aW9uLmJhY2t1cCA9IGJhY2t1cDtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdG9yZVN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiByZXN0b3JlU3Vic2NyaXB0aW9ucygpIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgdmFyIGJhY2t1cCA9IHN1YnNjcmlwdGlvbi5iYWNrdXA7XG4gICAgICBzdWJzY3JpcHRpb24uYmFja3VwID0gbnVsbDtcblxuICAgICAgaWYgKGJhY2t1cCkge1xuICAgICAgICBpZiAoYmFja3VwLmRhdGEgIT09IHN1YnNjcmlwdGlvbi5zbmFwc2hvdC5kYXRhKSB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLnN0YWxlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmlwdGlvbi5zbmFwc2hvdCA9IHtcbiAgICAgICAgICBkYXRhOiBzdWJzY3JpcHRpb24uc25hcHNob3QuZGF0YSxcbiAgICAgICAgICBpc01pc3NpbmdEYXRhOiBiYWNrdXAuaXNNaXNzaW5nRGF0YSxcbiAgICAgICAgICBzZWVuUmVjb3JkczogYmFja3VwLnNlZW5SZWNvcmRzLFxuICAgICAgICAgIHNlbGVjdG9yOiBiYWNrdXAuc2VsZWN0b3IsXG4gICAgICAgICAgbWlzc2luZ1JlcXVpcmVkRmllbGRzOiBiYWNrdXAubWlzc2luZ1JlcXVpcmVkRmllbGRzXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdWJzY3JpcHRpb24uc3RhbGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gdXBkYXRlU3Vic2NyaXB0aW9ucyhzb3VyY2UsIHVwZGF0ZWRSZWNvcmRJRHMsIHVwZGF0ZWRPd25lcnMsIHNvdXJjZU9wZXJhdGlvbikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGhhc1VwZGF0ZWRSZWNvcmRzID0gdXBkYXRlZFJlY29yZElEcy5zaXplICE9PSAwO1xuXG4gICAgdGhpcy5fc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgIHZhciBvd25lciA9IF90aGlzMi5fdXBkYXRlU3Vic2NyaXB0aW9uKHNvdXJjZSwgc3Vic2NyaXB0aW9uLCB1cGRhdGVkUmVjb3JkSURzLCBoYXNVcGRhdGVkUmVjb3Jkcywgc291cmNlT3BlcmF0aW9uKTtcblxuICAgICAgaWYgKG93bmVyICE9IG51bGwpIHtcbiAgICAgICAgdXBkYXRlZE93bmVycy5wdXNoKG93bmVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogTm90aWZpZXMgdGhlIGNhbGxiYWNrIGZvciB0aGUgc3Vic2NyaXB0aW9uIGlmIHRoZSBkYXRhIGZvciB0aGUgYXNzb2NpYXRlZFxuICAgKiBzbmFwc2hvdCBoYXMgY2hhbmdlZC5cbiAgICogQWRkaXRpb25hbGx5LCB1cGRhdGVzIHRoZSBzdWJzY3JpcHRpb24gc25hcHNob3Qgd2l0aCB0aGUgbGF0ZXN0IHNuYXBzaG90LFxuICAgKiBhbmQgbWFya3MgaXQgYXMgbm90IHN0YWxlLlxuICAgKiBSZXR1cm5zIHRoZSBvd25lciAoUmVxdWVzdERlc2NyaXB0b3IpIGlmIHRoZSBzdWJzY3JpcHRpb24gd2FzIGFmZmVjdGVkIGJ5IHRoZVxuICAgKiBsYXRlc3QgdXBkYXRlLCBvciBudWxsIGlmIGl0IHdhcyBub3QgYWZmZWN0ZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl91cGRhdGVTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiBfdXBkYXRlU3Vic2NyaXB0aW9uKHNvdXJjZSwgc3Vic2NyaXB0aW9uLCB1cGRhdGVkUmVjb3JkSURzLCBoYXNVcGRhdGVkUmVjb3Jkcywgc291cmNlT3BlcmF0aW9uKSB7XG4gICAgdmFyIGJhY2t1cCA9IHN1YnNjcmlwdGlvbi5iYWNrdXAsXG4gICAgICAgIGNhbGxiYWNrID0gc3Vic2NyaXB0aW9uLmNhbGxiYWNrLFxuICAgICAgICBzbmFwc2hvdCA9IHN1YnNjcmlwdGlvbi5zbmFwc2hvdCxcbiAgICAgICAgc3RhbGUgPSBzdWJzY3JpcHRpb24uc3RhbGU7XG4gICAgdmFyIGhhc092ZXJsYXBwaW5nVXBkYXRlcyA9IGhhc1VwZGF0ZWRSZWNvcmRzICYmIGhhc092ZXJsYXBwaW5nSURzKHNuYXBzaG90LnNlZW5SZWNvcmRzLCB1cGRhdGVkUmVjb3JkSURzKTtcblxuICAgIGlmICghc3RhbGUgJiYgIWhhc092ZXJsYXBwaW5nVXBkYXRlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0U25hcHNob3QgPSBoYXNPdmVybGFwcGluZ1VwZGF0ZXMgfHwgIWJhY2t1cCA/IFJlbGF5UmVhZGVyLnJlYWQoc291cmNlLCBzbmFwc2hvdC5zZWxlY3RvcikgOiBiYWNrdXA7XG4gICAgdmFyIG5leHREYXRhID0gcmVjeWNsZU5vZGVzSW50byhzbmFwc2hvdC5kYXRhLCBuZXh0U25hcHNob3QuZGF0YSk7XG4gICAgbmV4dFNuYXBzaG90ID0ge1xuICAgICAgZGF0YTogbmV4dERhdGEsXG4gICAgICBpc01pc3NpbmdEYXRhOiBuZXh0U25hcHNob3QuaXNNaXNzaW5nRGF0YSxcbiAgICAgIHNlZW5SZWNvcmRzOiBuZXh0U25hcHNob3Quc2VlblJlY29yZHMsXG4gICAgICBzZWxlY3RvcjogbmV4dFNuYXBzaG90LnNlbGVjdG9yLFxuICAgICAgbWlzc2luZ1JlcXVpcmVkRmllbGRzOiBuZXh0U25hcHNob3QubWlzc2luZ1JlcXVpcmVkRmllbGRzXG4gICAgfTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGRlZXBGcmVlemUobmV4dFNuYXBzaG90KTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24uc25hcHNob3QgPSBuZXh0U25hcHNob3Q7XG4gICAgc3Vic2NyaXB0aW9uLnN0YWxlID0gZmFsc2U7XG5cbiAgICBpZiAobmV4dFNuYXBzaG90LmRhdGEgIT09IHNuYXBzaG90LmRhdGEpIHtcbiAgICAgIGlmICh0aGlzLl9fbG9nICYmIFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9OT1RJRllfU1VCU0NSSVBUSU9OKSB7XG4gICAgICAgIHRoaXMuX19sb2coe1xuICAgICAgICAgIG5hbWU6ICdzdG9yZS5ub3RpZnkuc3Vic2NyaXB0aW9uJyxcbiAgICAgICAgICBzb3VyY2VPcGVyYXRpb246IHNvdXJjZU9wZXJhdGlvbixcbiAgICAgICAgICBzbmFwc2hvdDogc25hcHNob3QsXG4gICAgICAgICAgbmV4dFNuYXBzaG90OiBuZXh0U25hcHNob3RcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKG5leHRTbmFwc2hvdCk7XG4gICAgICByZXR1cm4gc25hcHNob3Quc2VsZWN0b3Iub3duZXI7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBSZWxheVN0b3JlU3Vic2NyaXB0aW9ucztcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheVN0b3JlU3Vic2NyaXB0aW9uczsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJcIikpO1xuXG52YXIgUmVsYXlGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuLi91dGlsL1JlbGF5RmVhdHVyZUZsYWdzJyk7XG5cbnZhciBSZWxheVJlYWRlciA9IHJlcXVpcmUoJy4vUmVsYXlSZWFkZXInKTtcblxudmFyIGRlZXBGcmVlemUgPSByZXF1aXJlKCcuLi91dGlsL2RlZXBGcmVlemUnKTtcblxudmFyIHJlY3ljbGVOb2Rlc0ludG8gPSByZXF1aXJlKCcuLi91dGlsL3JlY3ljbGVOb2Rlc0ludG8nKTtcblxudmFyIFJlbGF5U3RvcmVTdWJzY3JpcHRpb25zVXNpbmdNYXBCeUlEID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnNVc2luZ01hcEJ5SUQobG9nKSB7XG4gICAgdGhpcy5fbm90aWZpZWRSZXZpc2lvbiA9IDA7XG4gICAgdGhpcy5fc25hcHNob3RSZXZpc2lvbiA9IDA7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uc0J5RGF0YUlkID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX3N0YWxlU3Vic2NyaXB0aW9ucyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLl9fbG9nID0gbG9nO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlbGF5U3RvcmVTdWJzY3JpcHRpb25zVXNpbmdNYXBCeUlELnByb3RvdHlwZTtcblxuICBfcHJvdG8uc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKHNuYXBzaG90LCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgc3Vic2NyaXB0aW9uID0ge1xuICAgICAgYmFja3VwOiBudWxsLFxuICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgbm90aWZpZWRSZXZpc2lvbjogdGhpcy5fbm90aWZpZWRSZXZpc2lvbixcbiAgICAgIHNuYXBzaG90UmV2aXNpb246IHRoaXMuX3NuYXBzaG90UmV2aXNpb24sXG4gICAgICBzbmFwc2hvdDogc25hcHNob3RcbiAgICB9O1xuXG4gICAgdmFyIGRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgdmFyIF9pdGVyYXRvciA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShzbmFwc2hvdC5zZWVuUmVjb3JkcyksXG4gICAgICAgICAgX3N0ZXA7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIGRhdGFJZCA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnNGb3JEYXRhSWQgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc0J5RGF0YUlkLmdldChkYXRhSWQpO1xuXG4gICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnNGb3JEYXRhSWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uc0ZvckRhdGFJZFtcImRlbGV0ZVwiXShzdWJzY3JpcHRpb24pO1xuXG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uc0ZvckRhdGFJZC5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zQnlEYXRhSWRbXCJkZWxldGVcIl0oZGF0YUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIF9pdGVyYXRvcjIgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkoc25hcHNob3Quc2VlblJlY29yZHMpLFxuICAgICAgICBfc3RlcDI7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGRhdGFJZCA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uc0ZvckRhdGFJZCA9IHRoaXMuX3N1YnNjcmlwdGlvbnNCeURhdGFJZC5nZXQoZGF0YUlkKTtcblxuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uc0ZvckRhdGFJZCAhPSBudWxsKSB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uc0ZvckRhdGFJZC5hZGQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zQnlEYXRhSWQuc2V0KGRhdGFJZCwgbmV3IFNldChbc3Vic2NyaXB0aW9uXSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IyLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yMi5mKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3Bvc2U6IGRpc3Bvc2VcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5zbmFwc2hvdFN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiBzbmFwc2hvdFN1YnNjcmlwdGlvbnMoc291cmNlKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB0aGlzLl9zbmFwc2hvdFJldmlzaW9uKys7XG5cbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zQnlEYXRhSWQuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9ucykge1xuICAgICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbi5zbmFwc2hvdFJldmlzaW9uID09PSBfdGhpczIuX3NuYXBzaG90UmV2aXNpb24pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzdWJzY3JpcHRpb24uc25hcHNob3RSZXZpc2lvbiA9IF90aGlzMi5fc25hcHNob3RSZXZpc2lvbjsgLy8gQmFja3VwIG9jY3VycyBhZnRlciB3cml0aW5nIGEgbmV3IFwiZmluYWxcIiBwYXlsb2FkKHMpIGFuZCBiZWZvcmUgKHJlKWFwcGx5aW5nXG4gICAgICAgIC8vIG9wdGltaXN0aWMgY2hhbmdlcy4gRWFjaCBzdWJzY3JpcHRpb24ncyBgc25hcHNob3RgIHJlcHJlc2VudHMgd2hhdCB3YXMgKmxhc3RcbiAgICAgICAgLy8gcHVibGlzaGVkIHRvIHRoZSBzdWJzY3JpYmVyKiwgd2hpY2ggbm90YWJseSBtYXkgaW5jbHVkZSBwcmV2aW91cyBvcHRpbWlzdGljXG4gICAgICAgIC8vIHVwZGF0ZXMuIFRoZXJlZm9yZSBhIHN1YnNjcmlwdGlvbiBjYW4gYmUgaW4gYW55IG9mIHRoZSBmb2xsb3dpbmcgc3RhdGVzOlxuICAgICAgICAvLyAtIHN0YWxlPXRydWU6IFRoaXMgc3Vic2NyaXB0aW9uIHdhcyByZXN0b3JlZCB0byBhIGRpZmZlcmVudCB2YWx1ZSB0aGFuXG4gICAgICAgIC8vICAgYHNuYXBzaG90YC4gVGhhdCBtZWFucyB0aGlzIHN1YnNjcmlwdGlvbiBoYXMgY2hhbmdlcyByZWxhdGl2ZSB0byBpdHMgYmFzZSxcbiAgICAgICAgLy8gICBidXQgaXRzIGJhc2UgaGFzIGNoYW5nZWQgKHdlIGp1c3QgYXBwbGllZCBhIGZpbmFsIHBheWxvYWQpOiByZWNvbXB1dGVcbiAgICAgICAgLy8gICBhIGJhY2t1cCBzbyB0aGF0IHdlIGNhbiBsYXRlciByZXN0b3JlIHRvIHRoZSBzdGF0ZSB0aGUgc3Vic2NyaXB0aW9uXG4gICAgICAgIC8vICAgc2hvdWxkIGJlIGluLlxuICAgICAgICAvLyAtIHN0YWxlPWZhbHNlOiBUaGlzIHN1YnNjcmlwdGlvbiB3YXMgcmVzdG9yZWQgdG8gdGhlIHNhbWUgdmFsdWUgdGhhblxuICAgICAgICAvLyAgIGBzbmFwc2hvdGAuIFRoYXQgbWVhbnMgdGhpcyBzdWJzY3JpcHRpb24gZG9lcyAqbm90KiBoYXZlIGNoYW5nZXMgcmVsYXRpdmVcbiAgICAgICAgLy8gICB0byBpdHMgYmFzZSwgc28gdGhlIGN1cnJlbnQgYHNuYXBzaG90YCBpcyB2YWxpZCB0byB1c2UgYXMgYSBiYWNrdXAuXG5cbiAgICAgICAgaWYgKCFfdGhpczIuX3N0YWxlU3Vic2NyaXB0aW9ucy5oYXMoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbi5iYWNrdXAgPSBzdWJzY3JpcHRpb24uc25hcHNob3Q7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNuYXBzaG90ID0gc3Vic2NyaXB0aW9uLnNuYXBzaG90O1xuICAgICAgICB2YXIgYmFja3VwID0gUmVsYXlSZWFkZXIucmVhZChzb3VyY2UsIHNuYXBzaG90LnNlbGVjdG9yKTtcbiAgICAgICAgdmFyIG5leHREYXRhID0gcmVjeWNsZU5vZGVzSW50byhzbmFwc2hvdC5kYXRhLCBiYWNrdXAuZGF0YSk7XG4gICAgICAgIGJhY2t1cC5kYXRhID0gbmV4dERhdGE7IC8vIGJhY2t1cCBvd25zIHRoZSBzbmFwc2hvdCBhbmQgY2FuIHNhZmVseSBtdXRhdGVcblxuICAgICAgICBzdWJzY3JpcHRpb24uYmFja3VwID0gYmFja3VwO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3RvcmVTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gcmVzdG9yZVN1YnNjcmlwdGlvbnMoKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB0aGlzLl9zbmFwc2hvdFJldmlzaW9uKys7XG5cbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zQnlEYXRhSWQuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9ucykge1xuICAgICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbi5zbmFwc2hvdFJldmlzaW9uID09PSBfdGhpczMuX3NuYXBzaG90UmV2aXNpb24pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzdWJzY3JpcHRpb24uc25hcHNob3RSZXZpc2lvbiA9IF90aGlzMy5fc25hcHNob3RSZXZpc2lvbjtcbiAgICAgICAgdmFyIGJhY2t1cCA9IHN1YnNjcmlwdGlvbi5iYWNrdXA7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5iYWNrdXAgPSBudWxsO1xuXG4gICAgICAgIGlmIChiYWNrdXApIHtcbiAgICAgICAgICBpZiAoYmFja3VwLmRhdGEgIT09IHN1YnNjcmlwdGlvbi5zbmFwc2hvdC5kYXRhKSB7XG4gICAgICAgICAgICBfdGhpczMuX3N0YWxlU3Vic2NyaXB0aW9ucy5hZGQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcHJldlNlZW5SZWNvcmRzID0gc3Vic2NyaXB0aW9uLnNuYXBzaG90LnNlZW5SZWNvcmRzO1xuICAgICAgICAgIHN1YnNjcmlwdGlvbi5zbmFwc2hvdCA9IHtcbiAgICAgICAgICAgIGRhdGE6IHN1YnNjcmlwdGlvbi5zbmFwc2hvdC5kYXRhLFxuICAgICAgICAgICAgaXNNaXNzaW5nRGF0YTogYmFja3VwLmlzTWlzc2luZ0RhdGEsXG4gICAgICAgICAgICBzZWVuUmVjb3JkczogYmFja3VwLnNlZW5SZWNvcmRzLFxuICAgICAgICAgICAgc2VsZWN0b3I6IGJhY2t1cC5zZWxlY3RvcixcbiAgICAgICAgICAgIG1pc3NpbmdSZXF1aXJlZEZpZWxkczogYmFja3VwLm1pc3NpbmdSZXF1aXJlZEZpZWxkc1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBfdGhpczMuX3VwZGF0ZVN1YnNjcmlwdGlvbnNNYXAoc3Vic2NyaXB0aW9uLCBwcmV2U2VlblJlY29yZHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMy5fc3RhbGVTdWJzY3JpcHRpb25zLmFkZChzdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIHVwZGF0ZVN1YnNjcmlwdGlvbnMoc291cmNlLCB1cGRhdGVkUmVjb3JkSURzLCB1cGRhdGVkT3duZXJzLCBzb3VyY2VPcGVyYXRpb24pIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHRoaXMuX25vdGlmaWVkUmV2aXNpb24rKztcbiAgICB1cGRhdGVkUmVjb3JkSURzLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZWRSZWNvcmRJZCkge1xuICAgICAgdmFyIHN1YmNyaXB0aW9uc0ZvckRhdGFJZCA9IF90aGlzNC5fc3Vic2NyaXB0aW9uc0J5RGF0YUlkLmdldCh1cGRhdGVkUmVjb3JkSWQpO1xuXG4gICAgICBpZiAoc3ViY3JpcHRpb25zRm9yRGF0YUlkID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzdWJjcmlwdGlvbnNGb3JEYXRhSWQuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24ubm90aWZpZWRSZXZpc2lvbiA9PT0gX3RoaXM0Ll9ub3RpZmllZFJldmlzaW9uKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG93bmVyID0gX3RoaXM0Ll91cGRhdGVTdWJzY3JpcHRpb24oc291cmNlLCBzdWJzY3JpcHRpb24sIGZhbHNlLCBzb3VyY2VPcGVyYXRpb24pO1xuXG4gICAgICAgIGlmIChvd25lciAhPSBudWxsKSB7XG4gICAgICAgICAgdXBkYXRlZE93bmVycy5wdXNoKG93bmVyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9zdGFsZVN1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICBpZiAoc3Vic2NyaXB0aW9uLm5vdGlmaWVkUmV2aXNpb24gPT09IF90aGlzNC5fbm90aWZpZWRSZXZpc2lvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvd25lciA9IF90aGlzNC5fdXBkYXRlU3Vic2NyaXB0aW9uKHNvdXJjZSwgc3Vic2NyaXB0aW9uLCB0cnVlLCBzb3VyY2VPcGVyYXRpb24pO1xuXG4gICAgICBpZiAob3duZXIgIT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVkT3duZXJzLnB1c2gob3duZXIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5fc3RhbGVTdWJzY3JpcHRpb25zLmNsZWFyKCk7XG4gIH1cbiAgLyoqXG4gICAqIE5vdGlmaWVzIHRoZSBjYWxsYmFjayBmb3IgdGhlIHN1YnNjcmlwdGlvbiBpZiB0aGUgZGF0YSBmb3IgdGhlIGFzc29jaWF0ZWRcbiAgICogc25hcHNob3QgaGFzIGNoYW5nZWQuXG4gICAqIEFkZGl0aW9uYWxseSwgdXBkYXRlcyB0aGUgc3Vic2NyaXB0aW9uIHNuYXBzaG90IHdpdGggdGhlIGxhdGVzdCBzbmFwc2hvdCxcbiAgICogYW1hcmtzIGl0IGFzIG5vdCBzdGFsZSwgYW5kIHVwZGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiB0cmFja2luZyBmb3IgYW55XG4gICAqIGFueSBuZXcgaWRzIG9ic2VydmVkIGluIHRoZSBsYXRlc3QgZGF0YSBzbmFwc2hvdC5cbiAgICogUmV0dXJucyB0aGUgb3duZXIgKFJlcXVlc3REZXNjcmlwdG9yKSBpZiB0aGUgc3Vic2NyaXB0aW9uIHdhcyBhZmZlY3RlZCBieSB0aGVcbiAgICogbGF0ZXN0IHVwZGF0ZSwgb3IgbnVsbCBpZiBpdCB3YXMgbm90IGFmZmVjdGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fdXBkYXRlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gX3VwZGF0ZVN1YnNjcmlwdGlvbihzb3VyY2UsIHN1YnNjcmlwdGlvbiwgc3RhbGUsIHNvdXJjZU9wZXJhdGlvbikge1xuICAgIHZhciBiYWNrdXAgPSBzdWJzY3JpcHRpb24uYmFja3VwLFxuICAgICAgICBjYWxsYmFjayA9IHN1YnNjcmlwdGlvbi5jYWxsYmFjayxcbiAgICAgICAgc25hcHNob3QgPSBzdWJzY3JpcHRpb24uc25hcHNob3Q7XG4gICAgdmFyIG5leHRTbmFwc2hvdCA9IHN0YWxlICYmIGJhY2t1cCAhPSBudWxsID8gYmFja3VwIDogUmVsYXlSZWFkZXIucmVhZChzb3VyY2UsIHNuYXBzaG90LnNlbGVjdG9yKTtcbiAgICB2YXIgbmV4dERhdGEgPSByZWN5Y2xlTm9kZXNJbnRvKHNuYXBzaG90LmRhdGEsIG5leHRTbmFwc2hvdC5kYXRhKTtcbiAgICBuZXh0U25hcHNob3QgPSB7XG4gICAgICBkYXRhOiBuZXh0RGF0YSxcbiAgICAgIGlzTWlzc2luZ0RhdGE6IG5leHRTbmFwc2hvdC5pc01pc3NpbmdEYXRhLFxuICAgICAgc2VlblJlY29yZHM6IG5leHRTbmFwc2hvdC5zZWVuUmVjb3JkcyxcbiAgICAgIHNlbGVjdG9yOiBuZXh0U25hcHNob3Quc2VsZWN0b3IsXG4gICAgICBtaXNzaW5nUmVxdWlyZWRGaWVsZHM6IG5leHRTbmFwc2hvdC5taXNzaW5nUmVxdWlyZWRGaWVsZHNcbiAgICB9O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgZGVlcEZyZWV6ZShuZXh0U25hcHNob3QpO1xuICAgIH1cblxuICAgIHZhciBwcmV2U2VlblJlY29yZHMgPSBzdWJzY3JpcHRpb24uc25hcHNob3Quc2VlblJlY29yZHM7XG4gICAgc3Vic2NyaXB0aW9uLnNuYXBzaG90ID0gbmV4dFNuYXBzaG90O1xuICAgIHN1YnNjcmlwdGlvbi5ub3RpZmllZFJldmlzaW9uID0gdGhpcy5fbm90aWZpZWRSZXZpc2lvbjtcblxuICAgIHRoaXMuX3VwZGF0ZVN1YnNjcmlwdGlvbnNNYXAoc3Vic2NyaXB0aW9uLCBwcmV2U2VlblJlY29yZHMpO1xuXG4gICAgaWYgKG5leHRTbmFwc2hvdC5kYXRhICE9PSBzbmFwc2hvdC5kYXRhKSB7XG4gICAgICBpZiAodGhpcy5fX2xvZyAmJiBSZWxheUZlYXR1cmVGbGFncy5FTkFCTEVfTk9USUZZX1NVQlNDUklQVElPTikge1xuICAgICAgICB0aGlzLl9fbG9nKHtcbiAgICAgICAgICBuYW1lOiAnc3RvcmUubm90aWZ5LnN1YnNjcmlwdGlvbicsXG4gICAgICAgICAgc291cmNlT3BlcmF0aW9uOiBzb3VyY2VPcGVyYXRpb24sXG4gICAgICAgICAgc25hcHNob3Q6IHNuYXBzaG90LFxuICAgICAgICAgIG5leHRTbmFwc2hvdDogbmV4dFNuYXBzaG90XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayhuZXh0U25hcHNob3QpO1xuICAgICAgcmV0dXJuIHNuYXBzaG90LnNlbGVjdG9yLm93bmVyO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgTWFwIHRoYXQgdHJhY2tzIHN1YnNjcmlwdGlvbnMgYnkgaWQuXG4gICAqIEdpdmVuIGFuIHVwZGF0ZWQgc3Vic2NyaXB0aW9uIGFuZCB0aGUgcmVjb3JkcyB0aGF0IHdoZXJlIHNlZW5cbiAgICogb24gdGhlIHByZXZpb3VzIHN1YnNjcmlwdGlvbiBzbmFwc2hvdCwgdXBkYXRlcyBvdXIgdHJhY2tpbmdcbiAgICogdG8gdHJhY2sgdGhlIHN1YnNjcmlwdGlvbiBmb3IgdGhlIG5ld2x5IGFuZCBubyBsb25nZXIgc2VlbiBpZHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl91cGRhdGVTdWJzY3JpcHRpb25zTWFwID0gZnVuY3Rpb24gX3VwZGF0ZVN1YnNjcmlwdGlvbnNNYXAoc3Vic2NyaXB0aW9uLCBwcmV2U2VlblJlY29yZHMpIHtcbiAgICB2YXIgX2l0ZXJhdG9yMyA9ICgwLCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjJbXCJkZWZhdWx0XCJdKShwcmV2U2VlblJlY29yZHMpLFxuICAgICAgICBfc3RlcDM7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IzLnMoKTsgIShfc3RlcDMgPSBfaXRlcmF0b3IzLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGRhdGFJZCA9IF9zdGVwMy52YWx1ZTtcblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uc0ZvckRhdGFJZCA9IHRoaXMuX3N1YnNjcmlwdGlvbnNCeURhdGFJZC5nZXQoZGF0YUlkKTtcblxuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uc0ZvckRhdGFJZCAhPSBudWxsKSB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uc0ZvckRhdGFJZFtcImRlbGV0ZVwiXShzdWJzY3JpcHRpb24pO1xuXG4gICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnNGb3JEYXRhSWQuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uc0J5RGF0YUlkW1wiZGVsZXRlXCJdKGRhdGFJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IzLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yMy5mKCk7XG4gICAgfVxuXG4gICAgdmFyIF9pdGVyYXRvcjQgPSAoMCwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyW1wiZGVmYXVsdFwiXSkoc3Vic2NyaXB0aW9uLnNuYXBzaG90LnNlZW5SZWNvcmRzKSxcbiAgICAgICAgX3N0ZXA0O1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yNC5zKCk7ICEoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBfZGF0YUlkID0gX3N0ZXA0LnZhbHVlO1xuXG4gICAgICAgIHZhciBfc3Vic2NyaXB0aW9uc0ZvckRhdGFJZCA9IHRoaXMuX3N1YnNjcmlwdGlvbnNCeURhdGFJZC5nZXQoX2RhdGFJZCk7XG5cbiAgICAgICAgaWYgKF9zdWJzY3JpcHRpb25zRm9yRGF0YUlkICE9IG51bGwpIHtcbiAgICAgICAgICBfc3Vic2NyaXB0aW9uc0ZvckRhdGFJZC5hZGQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zQnlEYXRhSWQuc2V0KF9kYXRhSWQsIG5ldyBTZXQoW3N1YnNjcmlwdGlvbl0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yNC5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvcjQuZigpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnNVc2luZ01hcEJ5SUQ7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVsYXlTdG9yZVN1YnNjcmlwdGlvbnNVc2luZ01hcEJ5SUQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIikpO1xuXG52YXIgUmVsYXlDb25jcmV0ZU5vZGUgPSByZXF1aXJlKCcuLi91dGlsL1JlbGF5Q29uY3JldGVOb2RlJyk7XG5cbnZhciBnZXRSZWxheUhhbmRsZUtleSA9IHJlcXVpcmUoJy4uL3V0aWwvZ2V0UmVsYXlIYW5kbGVLZXknKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgc3RhYmxlQ29weSA9IHJlcXVpcmUoJy4uL3V0aWwvc3RhYmxlQ29weScpO1xuXG52YXIgVkFSSUFCTEUgPSBSZWxheUNvbmNyZXRlTm9kZS5WQVJJQUJMRSxcbiAgICBMSVRFUkFMID0gUmVsYXlDb25jcmV0ZU5vZGUuTElURVJBTCxcbiAgICBPQkpFQ1RfVkFMVUUgPSBSZWxheUNvbmNyZXRlTm9kZS5PQkpFQ1RfVkFMVUUsXG4gICAgTElTVF9WQUxVRSA9IFJlbGF5Q29uY3JldGVOb2RlLkxJU1RfVkFMVUU7XG52YXIgTU9EVUxFX0NPTVBPTkVOVF9LRVlfUFJFRklYID0gJ19fbW9kdWxlX2NvbXBvbmVudF8nO1xudmFyIE1PRFVMRV9PUEVSQVRJT05fS0VZX1BSRUZJWCA9ICdfX21vZHVsZV9vcGVyYXRpb25fJztcblxuZnVuY3Rpb24gZ2V0QXJndW1lbnRWYWx1ZShhcmcsIHZhcmlhYmxlcykge1xuICBpZiAoYXJnLmtpbmQgPT09IFZBUklBQkxFKSB7XG4gICAgLy8gVmFyaWFibGVzIGFyZSBwcm92aWRlZCBhdCBydW50aW1lIGFuZCBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgc3RhYmxlLlxuICAgIHJldHVybiBnZXRTdGFibGVWYXJpYWJsZVZhbHVlKGFyZy52YXJpYWJsZU5hbWUsIHZhcmlhYmxlcyk7XG4gIH0gZWxzZSBpZiAoYXJnLmtpbmQgPT09IExJVEVSQUwpIHtcbiAgICAvLyBUaGUgUmVsYXkgY29tcGlsZXIgZ2VuZXJhdGVzIHN0YWJsZSBDb25jcmV0ZUFyZ3VtZW50IHZhbHVlcy5cbiAgICByZXR1cm4gYXJnLnZhbHVlO1xuICB9IGVsc2UgaWYgKGFyZy5raW5kID09PSBPQkpFQ1RfVkFMVUUpIHtcbiAgICB2YXIgdmFsdWUgPSB7fTtcbiAgICBhcmcuZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICB2YWx1ZVtmaWVsZC5uYW1lXSA9IGdldEFyZ3VtZW50VmFsdWUoZmllbGQsIHZhcmlhYmxlcyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9IGVsc2UgaWYgKGFyZy5raW5kID09PSBMSVNUX1ZBTFVFKSB7XG4gICAgdmFyIF92YWx1ZSA9IFtdO1xuICAgIGFyZy5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICBpdGVtICE9IG51bGwgPyBfdmFsdWUucHVzaChnZXRBcmd1bWVudFZhbHVlKGl0ZW0sIHZhcmlhYmxlcykpIDogbnVsbDtcbiAgICB9KTtcbiAgICByZXR1cm4gX3ZhbHVlO1xuICB9XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHZhbHVlcyBvZiBmaWVsZC9mcmFnbWVudCBhcmd1bWVudHMgYXMgYW4gb2JqZWN0IGtleWVkIGJ5IGFyZ3VtZW50XG4gKiBuYW1lcy4gR3VhcmFudGVlZCB0byByZXR1cm4gYSByZXN1bHQgd2l0aCBzdGFibGUgb3JkZXJlZCBuZXN0ZWQgdmFsdWVzLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0QXJndW1lbnRWYWx1ZXMoYXJncywgdmFyaWFibGVzKSB7XG4gIHZhciB2YWx1ZXMgPSB7fTtcbiAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChhcmcpIHtcbiAgICB2YWx1ZXNbYXJnLm5hbWVdID0gZ2V0QXJndW1lbnRWYWx1ZShhcmcsIHZhcmlhYmxlcyk7XG4gIH0pO1xuICByZXR1cm4gdmFsdWVzO1xufVxuLyoqXG4gKiBHaXZlbiBhIGhhbmRsZSBmaWVsZCBhbmQgdmFyaWFibGUgdmFsdWVzLCByZXR1cm5zIGEga2V5IHRoYXQgY2FuIGJlIHVzZWQgdG9cbiAqIHVuaXF1ZWx5IGlkZW50aWZ5IHRoZSBjb21iaW5hdGlvbiBvZiB0aGUgaGFuZGxlIG5hbWUgYW5kIGFyZ3VtZW50IHZhbHVlcy5cbiAqXG4gKiBOb3RlOiB0aGUgd29yZCBcInN0b3JhZ2VcIiBoZXJlIHJlZmVycyB0byB0aGUgZmFjdCB0aGlzIGtleSBpcyBwcmltYXJpbHkgdXNlZFxuICogd2hlbiB3cml0aW5nIHRoZSByZXN1bHRzIG9mIGEga2V5IGluIGEgbm9ybWFsaXplZCBncmFwaCBvciBcInN0b3JlXCIuIFRoaXNcbiAqIG5hbWUgd2FzIHVzZWQgaW4gcHJldmlvdXMgaW1wbGVtZW50YXRpb25zIG9mIFJlbGF5IGludGVybmFscyBhbmQgaXMgYWxzb1xuICogdXNlZCBoZXJlIGZvciBjb25zaXN0ZW5jeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEhhbmRsZVN0b3JhZ2VLZXkoaGFuZGxlRmllbGQsIHZhcmlhYmxlcykge1xuICB2YXIgZHluYW1pY0tleSA9IGhhbmRsZUZpZWxkLmR5bmFtaWNLZXksXG4gICAgICBoYW5kbGUgPSBoYW5kbGVGaWVsZC5oYW5kbGUsXG4gICAgICBrZXkgPSBoYW5kbGVGaWVsZC5rZXksXG4gICAgICBuYW1lID0gaGFuZGxlRmllbGQubmFtZSxcbiAgICAgIGFyZ3MgPSBoYW5kbGVGaWVsZC5hcmdzLFxuICAgICAgZmlsdGVycyA9IGhhbmRsZUZpZWxkLmZpbHRlcnM7XG4gIHZhciBoYW5kbGVOYW1lID0gZ2V0UmVsYXlIYW5kbGVLZXkoaGFuZGxlLCBrZXksIG5hbWUpO1xuICB2YXIgZmlsdGVyQXJncyA9IG51bGw7XG5cbiAgaWYgKGFyZ3MgJiYgZmlsdGVycyAmJiBhcmdzLmxlbmd0aCAhPT0gMCAmJiBmaWx0ZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgIGZpbHRlckFyZ3MgPSBhcmdzLmZpbHRlcihmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gZmlsdGVycy5pbmRleE9mKGFyZy5uYW1lKSA+IC0xO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGR5bmFtaWNLZXkpIHtcbiAgICAvLyBcIlNvcnRcIiB0aGUgYXJndW1lbnRzIGJ5IGFyZ3VtZW50IG5hbWU6IHRoaXMgaXMgZG9uZSBieSB0aGUgY29tcGlsZXIgZm9yXG4gICAgLy8gdXNlci1zdXBwbGllZCBhcmd1bWVudHMgYnV0IHRoZSBkeW5hbWljIGFyZ3VtZW50IG11c3QgYWxzbyBiZSBpbiBzb3J0ZWRcbiAgICAvLyBvcmRlci4gIE5vdGUgdGhhdCBkeW5hbWljIGtleSBhcmd1bWVudCBuYW1lIGlzIGRvdWJsZS11bmRlcnNjb3JlLVxuICAgIC8vIC1wcmVmaXhlZCwgYW5kIGEgZG91YmxlLXVuZGVyc2NvcmUgcHJlZml4IGlzIGRpc2FsbG93ZWQgZm9yIHVzZXItc3VwcGxpZWRcbiAgICAvLyBhcmd1bWVudCBuYW1lcywgc28gdGhlcmUncyBubyBuZWVkIHRvIGFjdHVhbGx5IHNvcnQuXG4gICAgZmlsdGVyQXJncyA9IGZpbHRlckFyZ3MgIT0gbnVsbCA/IFtkeW5hbWljS2V5XS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShmaWx0ZXJBcmdzKSkgOiBbZHluYW1pY0tleV07XG4gIH1cblxuICBpZiAoZmlsdGVyQXJncyA9PT0gbnVsbCkge1xuICAgIHJldHVybiBoYW5kbGVOYW1lO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmb3JtYXRTdG9yYWdlS2V5KGhhbmRsZU5hbWUsIGdldEFyZ3VtZW50VmFsdWVzKGZpbHRlckFyZ3MsIHZhcmlhYmxlcykpO1xuICB9XG59XG4vKipcbiAqIEdpdmVuIGEgZmllbGQgYW5kIHZhcmlhYmxlIHZhbHVlcywgcmV0dXJucyBhIGtleSB0aGF0IGNhbiBiZSB1c2VkIHRvXG4gKiB1bmlxdWVseSBpZGVudGlmeSB0aGUgY29tYmluYXRpb24gb2YgdGhlIGZpZWxkIG5hbWUgYW5kIGFyZ3VtZW50IHZhbHVlcy5cbiAqXG4gKiBOb3RlOiB0aGUgd29yZCBcInN0b3JhZ2VcIiBoZXJlIHJlZmVycyB0byB0aGUgZmFjdCB0aGlzIGtleSBpcyBwcmltYXJpbHkgdXNlZFxuICogd2hlbiB3cml0aW5nIHRoZSByZXN1bHRzIG9mIGEga2V5IGluIGEgbm9ybWFsaXplZCBncmFwaCBvciBcInN0b3JlXCIuIFRoaXNcbiAqIG5hbWUgd2FzIHVzZWQgaW4gcHJldmlvdXMgaW1wbGVtZW50YXRpb25zIG9mIFJlbGF5IGludGVybmFscyBhbmQgaXMgYWxzb1xuICogdXNlZCBoZXJlIGZvciBjb25zaXN0ZW5jeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFN0b3JhZ2VLZXkoZmllbGQsIHZhcmlhYmxlcykge1xuICBpZiAoZmllbGQuc3RvcmFnZUtleSkge1xuICAgIC8vIFRPRE8gVDIzNjYzNjY0OiBIYW5kbGUgbm9kZXMgZG8gbm90IHlldCBkZWZpbmUgYSBzdGF0aWMgc3RvcmFnZUtleS5cbiAgICByZXR1cm4gZmllbGQuc3RvcmFnZUtleTtcbiAgfVxuXG4gIHZhciBhcmdzID0gZmllbGQuYXJncyxcbiAgICAgIG5hbWUgPSBmaWVsZC5uYW1lO1xuICByZXR1cm4gYXJncyAmJiBhcmdzLmxlbmd0aCAhPT0gMCA/IGZvcm1hdFN0b3JhZ2VLZXkobmFtZSwgZ2V0QXJndW1lbnRWYWx1ZXMoYXJncywgdmFyaWFibGVzKSkgOiBuYW1lO1xufVxuLyoqXG4gKiBHaXZlbiBhIGBuYW1lYCAoZWcuIFwiZm9vXCIpIGFuZCBhbiBvYmplY3QgcmVwcmVzZW50aW5nIGFyZ3VtZW50IHZhbHVlc1xuICogKGVnLiBge29yYmVyQnk6IFwibmFtZVwiLCBmaXJzdDogMTB9YCkgcmV0dXJucyBhIHVuaXF1ZSBzdG9yYWdlIGtleVxuICogKGllLiBgZm9ve1wiZmlyc3RcIjoxMCxcIm9yZGVyQnlcIjpcIm5hbWVcIn1gKS5cbiAqXG4gKiBUaGlzIGRpZmZlcnMgZnJvbSBnZXRTdG9yYWdlS2V5IHdoaWNoIHJlcXVpcmVzIGEgQ29uY3JldGVOb2RlIHdoZXJlIGFyZ3VtZW50c1xuICogYXJlIGFzc3VtZWQgdG8gYWxyZWFkeSBiZSBzb3J0ZWQgaW50byBhIHN0YWJsZSBvcmRlci5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFN0YWJsZVN0b3JhZ2VLZXkobmFtZSwgYXJncykge1xuICByZXR1cm4gZm9ybWF0U3RvcmFnZUtleShuYW1lLCBzdGFibGVDb3B5KGFyZ3MpKTtcbn1cbi8qKlxuICogR2l2ZW4gYSBuYW1lIGFuZCBhcmd1bWVudCB2YWx1ZXMsIGZvcm1hdCBhIHN0b3JhZ2Uga2V5LlxuICpcbiAqIEFyZ3VtZW50cyBhbmQgdGhlIHZhbHVlcyB3aXRoaW4gdGhlbSBhcmUgZXhwZWN0ZWQgdG8gYmUgb3JkZXJlZCBpbiBhIHN0YWJsZVxuICogYWxwaGFiZXRpY2FsIG9yZGVyaW5nLlxuICovXG5cblxuZnVuY3Rpb24gZm9ybWF0U3RvcmFnZUtleShuYW1lLCBhcmdWYWx1ZXMpIHtcbiAgaWYgKCFhcmdWYWx1ZXMpIHtcbiAgICByZXR1cm4gbmFtZTtcbiAgfVxuXG4gIHZhciB2YWx1ZXMgPSBbXTtcblxuICBmb3IgKHZhciBhcmdOYW1lIGluIGFyZ1ZhbHVlcykge1xuICAgIGlmIChhcmdWYWx1ZXMuaGFzT3duUHJvcGVydHkoYXJnTmFtZSkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFyZ1ZhbHVlc1thcmdOYW1lXTtcblxuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgdmFyIF9KU09OJHN0cmluZ2lmeTtcblxuICAgICAgICB2YWx1ZXMucHVzaChhcmdOYW1lICsgJzonICsgKChfSlNPTiRzdHJpbmdpZnkgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpICE9PSBudWxsICYmIF9KU09OJHN0cmluZ2lmeSAhPT0gdm9pZCAwID8gX0pTT04kc3RyaW5naWZ5IDogJ3VuZGVmaW5lZCcpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWVzLmxlbmd0aCA9PT0gMCA/IG5hbWUgOiBuYW1lICsgXCIoXCIuY29uY2F0KHZhbHVlcy5qb2luKCcsJyksIFwiKVwiKTtcbn1cbi8qKlxuICogR2l2ZW4gVmFyaWFibGVzIGFuZCBhIHZhcmlhYmxlIG5hbWUsIHJldHVybiBhIHZhcmlhYmxlIHZhbHVlIHdpdGhcbiAqIGFsbCB2YWx1ZXMgaW4gYSBzdGFibGUgb3JkZXIuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRTdGFibGVWYXJpYWJsZVZhbHVlKG5hbWUsIHZhcmlhYmxlcykge1xuICAhdmFyaWFibGVzLmhhc093blByb3BlcnR5KG5hbWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnZ2V0VmFyaWFibGVWYWx1ZSgpOiBVbmRlZmluZWQgdmFyaWFibGUgYCVzYC4nLCBuYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7IC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuXG4gIHJldHVybiBzdGFibGVDb3B5KHZhcmlhYmxlc1tuYW1lXSk7XG59XG5cbmZ1bmN0aW9uIGdldE1vZHVsZUNvbXBvbmVudEtleShkb2N1bWVudE5hbWUpIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KE1PRFVMRV9DT01QT05FTlRfS0VZX1BSRUZJWCkuY29uY2F0KGRvY3VtZW50TmFtZSk7XG59XG5cbmZ1bmN0aW9uIGdldE1vZHVsZU9wZXJhdGlvbktleShkb2N1bWVudE5hbWUpIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KE1PRFVMRV9PUEVSQVRJT05fS0VZX1BSRUZJWCkuY29uY2F0KGRvY3VtZW50TmFtZSk7XG59XG4vKipcbiAqIENvbnN0YW50cyBzaGFyZWQgYnkgYWxsIGltcGxlbWVudGF0aW9ucyBvZiBSZWNvcmRTb3VyY2UvTXV0YWJsZVJlY29yZFNvdXJjZS9ldGMuXG4gKi9cblxuXG52YXIgUmVsYXlTdG9yZVV0aWxzID0ge1xuICBGUkFHTUVOVFNfS0VZOiAnX19mcmFnbWVudHMnLFxuICBGUkFHTUVOVF9PV05FUl9LRVk6ICdfX2ZyYWdtZW50T3duZXInLFxuICBGUkFHTUVOVF9QUk9QX05BTUVfS0VZOiAnX19mcmFnbWVudFByb3BOYW1lJyxcbiAgTU9EVUxFX0NPTVBPTkVOVF9LRVk6ICdfX21vZHVsZV9jb21wb25lbnQnLFxuICAvLyBhbGlhcyByZXR1cm5lZCBieSBSZWFkZXJcbiAgSURfS0VZOiAnX19pZCcsXG4gIFJFRl9LRVk6ICdfX3JlZicsXG4gIFJFRlNfS0VZOiAnX19yZWZzJyxcbiAgUk9PVF9JRDogJ2NsaWVudDpyb290JyxcbiAgUk9PVF9UWVBFOiAnX19Sb290JyxcbiAgVFlQRU5BTUVfS0VZOiAnX190eXBlbmFtZScsXG4gIElOVkFMSURBVEVEX0FUX0tFWTogJ19faW52YWxpZGF0ZWRfYXQnLFxuICBJU19XSVRISU5fVU5NQVRDSEVEX1RZUEVfUkVGSU5FTUVOVDogJ19faXNXaXRoaW5Vbm1hdGNoZWRUeXBlUmVmaW5lbWVudCcsXG4gIGZvcm1hdFN0b3JhZ2VLZXk6IGZvcm1hdFN0b3JhZ2VLZXksXG4gIGdldEFyZ3VtZW50VmFsdWU6IGdldEFyZ3VtZW50VmFsdWUsXG4gIGdldEFyZ3VtZW50VmFsdWVzOiBnZXRBcmd1bWVudFZhbHVlcyxcbiAgZ2V0SGFuZGxlU3RvcmFnZUtleTogZ2V0SGFuZGxlU3RvcmFnZUtleSxcbiAgZ2V0U3RvcmFnZUtleTogZ2V0U3RvcmFnZUtleSxcbiAgZ2V0U3RhYmxlU3RvcmFnZUtleTogZ2V0U3RhYmxlU3RvcmFnZUtleSxcbiAgZ2V0TW9kdWxlQ29tcG9uZW50S2V5OiBnZXRNb2R1bGVDb21wb25lbnRLZXksXG4gIGdldE1vZHVsZU9wZXJhdGlvbktleTogZ2V0TW9kdWxlT3BlcmF0aW9uS2V5XG59O1xubW9kdWxlLmV4cG9ydHMgPSBSZWxheVN0b3JlVXRpbHM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vcXVlcnkvR3JhcGhRTFRhZycpLFxuICAgIGdldEZyYWdtZW50ID0gX3JlcXVpcmUuZ2V0RnJhZ21lbnQ7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuL1JlbGF5TW9kZXJuU2VsZWN0b3InKSxcbiAgICBnZXRTZWxlY3RvciA9IF9yZXF1aXJlMi5nZXRTZWxlY3RvcjtcblxudmFyIGNvbnRleHRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiB3aXRoUmVzb2x2ZXJDb250ZXh0KGNvbnRleHQsIGNiKSB7XG4gIGNvbnRleHRTdGFjay5wdXNoKGNvbnRleHQpO1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGNiKCk7XG4gIH0gZmluYWxseSB7XG4gICAgY29udGV4dFN0YWNrLnBvcCgpO1xuICB9XG59IC8vIE5PVEU6IHRoZXNlIGRlY2xhcmF0aW9ucyBhcmUgY29waWVkIGZyb20gJ3VzZUZyYWdtZW50JzsgaXQgd291bGQgYmUgZ29vZFxuLy8gdG8gZmlndXJlIG91dCBob3cgdG8gc2hhcmUgdGhlIHNhbWUgdHlwZSBzaWduYXR1cmUgYmV0d2VlbiB0aGUgdHdvIGZ1bmN0aW9ucy5cbi8vIFRoZSBkZWNsYXJhdGlvbnMgZW5zdXJlIHRoYXQgdGhlIHR5cGUgb2YgdGhlIHJldHVybmVkIGRhdGEgaXM6XG4vLyAgIC0gbm9uLW51bGxhYmxlIGlmIHRoZSBwcm92aWRlZCByZWYgdHlwZSBpcyBub24tbnVsbGFibGVcbi8vICAgLSBudWxsYWJsZSBpZiB0aGUgcHJvdmlkZWQgcmVmIHR5cGUgaXMgbnVsbGFibGVcbi8vICAgLSBhcnJheSBvZiBub24tbnVsbGFibGUgaWYgdGhlIHByaXZvaWRlZCByZWYgdHlwZSBpcyBhbiBhcnJheSBvZlxuLy8gICAgIG5vbi1udWxsYWJsZSByZWZzXG4vLyAgIC0gYXJyYXkgb2YgbnVsbGFibGUgaWYgdGhlIHByaXZvaWRlZCByZWYgdHlwZSBpcyBhbiBhcnJheSBvZiBudWxsYWJsZSByZWZzXG5cblxuZnVuY3Rpb24gcmVhZEZyYWdtZW50KGZyYWdtZW50SW5wdXQsIGZyYWdtZW50UmVmKSB7XG4gIGlmICghY29udGV4dFN0YWNrLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcigncmVhZEZyYWdtZW50IHNob3VsZCBiZSBjYWxsZWQgb25seSBmcm9tIHdpdGhpbiBhIFJlbGF5IFJlc29sdmVyIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGNvbnRleHQgPSBjb250ZXh0U3RhY2tbY29udGV4dFN0YWNrLmxlbmd0aCAtIDFdO1xuICB2YXIgZnJhZ21lbnROb2RlID0gZ2V0RnJhZ21lbnQoZnJhZ21lbnRJbnB1dCk7XG4gIHZhciBmcmFnbWVudFNlbGVjdG9yID0gZ2V0U2VsZWN0b3IoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZik7XG4gICEoZnJhZ21lbnRTZWxlY3RvciAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJFeHBlY3RlZCBhIHNlbGVjdG9yIGZvciB0aGUgZnJhZ21lbnQgb2YgdGhlIHJlc29sdmVyIFwiLmNvbmNhdChmcmFnbWVudE5vZGUubmFtZSwgXCIsIGJ1dCBnb3QgbnVsbC5cIikpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgIShmcmFnbWVudFNlbGVjdG9yLmtpbmQgPT09ICdTaW5ndWxhclJlYWRlclNlbGVjdG9yJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiRXhwZWN0ZWQgYSBzaW5ndWxhciByZWFkZXIgc2VsZWN0b3IgZm9yIHRoZSBmcmFnbWVudCBvZiB0aGUgcmVzb2x2ZXIgXCIuY29uY2F0KGZyYWdtZW50Tm9kZS5uYW1lLCBcIiwgYnV0IGl0IHdhcyBwbHVyYWwuXCIpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjb250ZXh0LmdldERhdGFGb3JSZXNvbHZlckZyYWdtZW50KGZyYWdtZW50U2VsZWN0b3IpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVhZEZyYWdtZW50OiByZWFkRnJhZ21lbnQsXG4gIHdpdGhSZXNvbHZlckNvbnRleHQ6IHdpdGhSZXNvbHZlckNvbnRleHRcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQUkVGSVggPSAnY2xpZW50Ol9fdHlwZTonO1xudmFyIFRZUEVfU0NIRU1BX1RZUEUgPSAnX19UeXBlU2NoZW1hJztcblxuZnVuY3Rpb24gZ2VuZXJhdGVUeXBlSUQodHlwZU5hbWUpIHtcbiAgcmV0dXJuIFBSRUZJWCArIHR5cGVOYW1lO1xufVxuXG5mdW5jdGlvbiBpc1R5cGVJRChpZCkge1xuICByZXR1cm4gaWQuaW5kZXhPZihQUkVGSVgpID09PSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2VuZXJhdGVUeXBlSUQ6IGdlbmVyYXRlVHlwZUlELFxuICBpc1R5cGVJRDogaXNUeXBlSUQsXG4gIFRZUEVfU0NIRU1BX1RZUEU6IFRZUEVfU0NIRU1BX1RZUEVcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vQ2xpZW50SUQnKSxcbiAgICBnZW5lcmF0ZUNsaWVudElEID0gX3JlcXVpcmUuZ2VuZXJhdGVDbGllbnRJRDtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vUmVsYXlTdG9yZVV0aWxzJyksXG4gICAgUk9PVF9JRCA9IF9yZXF1aXJlMi5ST09UX0lEO1xuXG52YXIgVklFV0VSX0lEID0gZ2VuZXJhdGVDbGllbnRJRChST09UX0lELCAndmlld2VyJyk7XG52YXIgVklFV0VSX1RZUEUgPSAnVmlld2VyJztcbm1vZHVsZS5leHBvcnRzID0ge1xuICBWSUVXRVJfSUQ6IFZJRVdFUl9JRCxcbiAgVklFV0VSX1RZUEU6IFZJRVdFUl9UWVBFXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXJlRXF1YWwgPSByZXF1aXJlKFwiZmJqcy9saWIvYXJlRXF1YWxcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUNvbmNyZXRlTm9kZScpLFxuICAgIExJTktFRF9GSUVMRCA9IF9yZXF1aXJlLkxJTktFRF9GSUVMRDtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vUmVsYXlTdG9yZVV0aWxzJyksXG4gICAgZ2V0SGFuZGxlU3RvcmFnZUtleSA9IF9yZXF1aXJlMi5nZXRIYW5kbGVTdG9yYWdlS2V5O1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBzdXBwbGllZCBgaGFuZGxlRmllbGRgIGJ5IGZpbmRpbmcgdGhlIG9yaWdpbmFsIGxpbmtlZFxuICogZmllbGQgKG9uIHdoaWNoIHRoZSBoYW5kbGUgd2FzIGRlY2xhcmVkKSBhbW9uZyB0aGUgc2libGluZyBgc2VsZWN0aW9uc2AsIGFuZFxuICogY29weWluZyBpdHMgc2VsZWN0aW9ucyBpbnRvIHRoZSBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVSZWxheUhhbmRsZVNvdXJjZUZpZWxkKGhhbmRsZUZpZWxkLCBzZWxlY3Rpb25zLCB2YXJpYWJsZXMpIHtcbiAgdmFyIHNvdXJjZUZpZWxkID0gc2VsZWN0aW9ucy5maW5kKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICByZXR1cm4gc291cmNlLmtpbmQgPT09IExJTktFRF9GSUVMRCAmJiBzb3VyY2UubmFtZSA9PT0gaGFuZGxlRmllbGQubmFtZSAmJiBzb3VyY2UuYWxpYXMgPT09IGhhbmRsZUZpZWxkLmFsaWFzICYmIGFyZUVxdWFsKHNvdXJjZS5hcmdzLCBoYW5kbGVGaWVsZC5hcmdzKTtcbiAgfSk7XG4gICEoc291cmNlRmllbGQgJiYgc291cmNlRmllbGQua2luZCA9PT0gTElOS0VEX0ZJRUxEKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2Nsb25lUmVsYXlIYW5kbGVTb3VyY2VGaWVsZDogRXhwZWN0ZWQgYSBjb3JyZXNwb25kaW5nIHNvdXJjZSBmaWVsZCBmb3IgJyArICdoYW5kbGUgYCVzYC4nLCBoYW5kbGVGaWVsZC5oYW5kbGUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGhhbmRsZUtleSA9IGdldEhhbmRsZVN0b3JhZ2VLZXkoaGFuZGxlRmllbGQsIHZhcmlhYmxlcyk7XG4gIHJldHVybiB7XG4gICAga2luZDogJ0xpbmtlZEZpZWxkJyxcbiAgICBhbGlhczogc291cmNlRmllbGQuYWxpYXMsXG4gICAgbmFtZTogaGFuZGxlS2V5LFxuICAgIHN0b3JhZ2VLZXk6IGhhbmRsZUtleSxcbiAgICBhcmdzOiBudWxsLFxuICAgIGNvbmNyZXRlVHlwZTogc291cmNlRmllbGQuY29uY3JldGVUeXBlLFxuICAgIHBsdXJhbDogc291cmNlRmllbGQucGx1cmFsLFxuICAgIHNlbGVjdGlvbnM6IHNvdXJjZUZpZWxkLnNlbGVjdGlvbnNcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVJlbGF5SGFuZGxlU291cmNlRmllbGQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhcmVFcXVhbCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9hcmVFcXVhbFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi91dGlsL1JlbGF5Q29uY3JldGVOb2RlJyksXG4gICAgU0NBTEFSX0ZJRUxEID0gX3JlcXVpcmUuU0NBTEFSX0ZJRUxEO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi9SZWxheVN0b3JlVXRpbHMnKSxcbiAgICBnZXRIYW5kbGVTdG9yYWdlS2V5ID0gX3JlcXVpcmUyLmdldEhhbmRsZVN0b3JhZ2VLZXk7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIHN1cHBsaWVkIGBoYW5kbGVGaWVsZGAgYnkgZmluZGluZyB0aGUgb3JpZ2luYWwgc2NhbGFyXG4gKiBmaWVsZCAob24gd2hpY2ggdGhlIGhhbmRsZSB3YXMgZGVjbGFyZWQpIGFtb25nIHRoZSBzaWJsaW5nIGBzZWxlY3Rpb25zYC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVSZWxheVNjYWxhckhhbmRsZVNvdXJjZUZpZWxkKGhhbmRsZUZpZWxkLCBzZWxlY3Rpb25zLCB2YXJpYWJsZXMpIHtcbiAgdmFyIHNvdXJjZUZpZWxkID0gc2VsZWN0aW9ucy5maW5kKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICByZXR1cm4gc291cmNlLmtpbmQgPT09IFNDQUxBUl9GSUVMRCAmJiBzb3VyY2UubmFtZSA9PT0gaGFuZGxlRmllbGQubmFtZSAmJiBzb3VyY2UuYWxpYXMgPT09IGhhbmRsZUZpZWxkLmFsaWFzICYmIGFyZUVxdWFsKHNvdXJjZS5hcmdzLCBoYW5kbGVGaWVsZC5hcmdzKTtcbiAgfSk7XG4gICEoc291cmNlRmllbGQgJiYgc291cmNlRmllbGQua2luZCA9PT0gU0NBTEFSX0ZJRUxEKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2Nsb25lUmVsYXlTY2FsYXJIYW5kbGVTb3VyY2VGaWVsZDogRXhwZWN0ZWQgYSBjb3JyZXNwb25kaW5nIHNvdXJjZSBmaWVsZCBmb3IgJyArICdoYW5kbGUgYCVzYC4nLCBoYW5kbGVGaWVsZC5oYW5kbGUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGhhbmRsZUtleSA9IGdldEhhbmRsZVN0b3JhZ2VLZXkoaGFuZGxlRmllbGQsIHZhcmlhYmxlcyk7XG4gIHJldHVybiB7XG4gICAga2luZDogJ1NjYWxhckZpZWxkJyxcbiAgICBhbGlhczogc291cmNlRmllbGQuYWxpYXMsXG4gICAgbmFtZTogaGFuZGxlS2V5LFxuICAgIHN0b3JhZ2VLZXk6IGhhbmRsZUtleSxcbiAgICBhcmdzOiBudWxsXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVSZWxheVNjYWxhckhhbmRsZVNvdXJjZUZpZWxkOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVsYXlNb2Rlcm5GcmFnbWVudFNwZWNSZXNvbHZlciA9IHJlcXVpcmUoJy4vUmVsYXlNb2Rlcm5GcmFnbWVudFNwZWNSZXNvbHZlcicpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG5mdW5jdGlvbiBjcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlcihjb250ZXh0LCBjb250YWluZXJOYW1lLCBmcmFnbWVudHMsIHByb3BzLCByb290SXNRdWVyeVJlbmRlcmVyLCBjYWxsYmFjaykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFyIGZyYWdtZW50TmFtZXMgPSBPYmplY3Qua2V5cyhmcmFnbWVudHMpO1xuICAgIGZyYWdtZW50TmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZnJhZ21lbnROYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbZnJhZ21lbnROYW1lXTtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvcFZhbHVlICE9PSB1bmRlZmluZWQsICdjcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlcjogRXhwZWN0ZWQgcHJvcCBgJXNgIHRvIGJlIHN1cHBsaWVkIHRvIGAlc2AsIGJ1dCAnICsgJ2dvdCBgdW5kZWZpbmVkYC4gUGFzcyBhbiBleHBsaWNpdCBgbnVsbGAgaWYgdGhpcyBpcyBpbnRlbnRpb25hbC4nLCBmcmFnbWVudE5hbWUsIGNvbnRhaW5lck5hbWUpIDogdm9pZCAwO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWxheU1vZGVybkZyYWdtZW50U3BlY1Jlc29sdmVyKGNvbnRleHQsIGZyYWdtZW50cywgcHJvcHMsIGNhbGxiYWNrLCByb290SXNRdWVyeVJlbmRlcmVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVGcmFnbWVudFNwZWNSZXNvbHZlcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgcmVsYXlDb250ZXh0O1xudmFyIGZpcnN0UmVhY3Q7XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlbGF5Q29udGV4dChyZWFjdCkge1xuICBpZiAoIXJlbGF5Q29udGV4dCkge1xuICAgIHJlbGF5Q29udGV4dCA9IHJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICByZWxheUNvbnRleHQuZGlzcGxheU5hbWUgPSAnUmVsYXlDb250ZXh0JztcbiAgICB9XG5cbiAgICBmaXJzdFJlYWN0ID0gcmVhY3Q7XG4gIH1cblxuICAhKHJlYWN0ID09PSBmaXJzdFJlYWN0KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1tjcmVhdGVSZWxheUNvbnRleHRdOiBZb3UgcGFzc2luZyBhIGRpZmZlcmVudCBpbnN0YW5jZSBvZiBSZWFjdCcsIHJlYWN0LnZlcnNpb24pIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJlbGF5Q29udGV4dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVSZWxheUNvbnRleHQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vVmlld2VyUGF0dGVybicpLFxuICAgIFZJRVdFUl9JRCA9IF9yZXF1aXJlLlZJRVdFUl9JRCxcbiAgICBWSUVXRVJfVFlQRSA9IF9yZXF1aXJlLlZJRVdFUl9UWVBFO1xuXG5mdW5jdGlvbiBkZWZhdWx0R2V0RGF0YUlEKGZpZWxkVmFsdWUsIHR5cGVOYW1lKSB7XG4gIGlmICh0eXBlTmFtZSA9PT0gVklFV0VSX1RZUEUpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICByZXR1cm4gZmllbGRWYWx1ZS5pZCA9PSBudWxsID8gVklFV0VSX0lEIDogZmllbGRWYWx1ZS5pZDtcbiAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuXG4gIHJldHVybiBmaWVsZFZhbHVlLmlkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRHZXREYXRhSUQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdFJlcXVpcmVkRmllbGRMb2dnZXIgPSBmdW5jdGlvbiBkZWZhdWx0UmVxdWlyZWRGaWVsZExvZ2dlcihldmVudCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGV2ZW50LmtpbmQgPT09ICdtaXNzaW5nX2ZpZWxkLmxvZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlbGF5IEVudmlyb25tZW50IENvbmZpZ3VyYXRpb24gRXJyb3IgKGRldiBvbmx5KTogYEByZXF1aXJlZChhY3Rpb246IExPRylgIHJlcXVpcmVzIHRoYXQgdGhlIFJlbGF5IEVudmlyb25tZW50IGJlIGNvbmZpZ3VyZWQgd2l0aCBhIGByZXF1aXJlZEZpZWxkTG9nZ2VyYC4nKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0UmVxdWlyZWRGaWVsZExvZ2dlcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIElURVJBVE9SX0tFWSA9IFN5bWJvbC5pdGVyYXRvcjtcblxuZnVuY3Rpb24gaGFzT3ZlcmxhcHBpbmdJRHMoc2VlblJlY29yZHMsIHVwZGF0ZWRSZWNvcmRJRHMpIHtcbiAgLy8gJEZsb3dGaXhNZTogU2V0IGlzIGFuIGl0ZXJhYmxlIHR5cGUsIGFjY2Vzc2luZyBpdHMgaXRlcmF0b3IgaXMgYWxsb3dlZC5cbiAgdmFyIGl0ZXJhdG9yID0gc2VlblJlY29yZHNbSVRFUkFUT1JfS0VZXSgpO1xuICB2YXIgbmV4dCA9IGl0ZXJhdG9yLm5leHQoKTtcblxuICB3aGlsZSAoIW5leHQuZG9uZSkge1xuICAgIHZhciBrZXkgPSBuZXh0LnZhbHVlO1xuXG4gICAgaWYgKHVwZGF0ZWRSZWNvcmRJRHMuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzT3ZlcmxhcHBpbmdJRHM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG4vKipcbiAqIERldGVybWluZSBpZiBhIGdpdmVuIHZhbHVlIGlzIGFuIG9iamVjdCB0aGF0IGltcGxlbWVudHMgdGhlIGBFbnZpcm9ubWVudGBcbiAqIGludGVyZmFjZSBkZWZpbmVkIGluIGBSZWxheVN0b3JlVHlwZXNgLlxuICpcbiAqIFVzZSBhIHNpZ2lsIGZvciBkZXRlY3Rpb24gdG8gYXZvaWQgYSByZWFsbS1zcGVjaWZpYyBpbnN0YW5jZW9mIGNoZWNrLCBhbmQgdG9cbiAqIGFpZCBpbiBtb2R1bGUgdHJlZS1zaGFraW5nIHRvIGF2b2lkIHJlcXVpcmluZyBhbGwgb2YgUmVsYXlSdW50aW1lIGp1c3QgdG9cbiAqIGRldGVjdCBpdHMgZW52aXJvbm1lbnQuXG4gKi9cblxuZnVuY3Rpb24gaXNSZWxheU1vZGVybkVudmlyb25tZW50KGVudmlyb25tZW50KSB7XG4gIHJldHVybiBCb29sZWFuKGVudmlyb25tZW50ICYmIGVudmlyb25tZW50WydAQFJlbGF5TW9kZXJuRW52aXJvbm1lbnQnXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNSZWxheU1vZGVybkVudmlyb25tZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3F1ZXJ5L0dyYXBoUUxUYWcnKSxcbiAgICBnZXRJbmxpbmVEYXRhRnJhZ21lbnQgPSBfcmVxdWlyZS5nZXRJbmxpbmVEYXRhRnJhZ21lbnQ7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuL1JlbGF5U3RvcmVVdGlscycpLFxuICAgIEZSQUdNRU5UU19LRVkgPSBfcmVxdWlyZTIuRlJBR01FTlRTX0tFWTtcblxuZnVuY3Rpb24gcmVhZElubGluZURhdGEoZnJhZ21lbnQsIGZyYWdtZW50UmVmKSB7XG4gIHZhciBfZnJhZ21lbnRSZWYkRlJBR01FTlQ7XG5cbiAgdmFyIGlubGluZURhdGFGcmFnbWVudCA9IGdldElubGluZURhdGFGcmFnbWVudChmcmFnbWVudCk7XG5cbiAgaWYgKGZyYWdtZW50UmVmID09IG51bGwpIHtcbiAgICByZXR1cm4gZnJhZ21lbnRSZWY7XG4gIH1cblxuICAhKHR5cGVvZiBmcmFnbWVudFJlZiA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAncmVhZElubGluZURhdGEoKTogRXhwZWN0ZWQgYW4gb2JqZWN0LCBnb3QgYCVzYC4nLCB0eXBlb2YgZnJhZ21lbnRSZWYpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuXG4gIHZhciBpbmxpbmVEYXRhID0gKF9mcmFnbWVudFJlZiRGUkFHTUVOVCA9IGZyYWdtZW50UmVmW0ZSQUdNRU5UU19LRVldKSA9PT0gbnVsbCB8fCBfZnJhZ21lbnRSZWYkRlJBR01FTlQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mcmFnbWVudFJlZiRGUkFHTUVOVFtpbmxpbmVEYXRhRnJhZ21lbnQubmFtZV07XG4gICEoaW5saW5lRGF0YSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ3JlYWRJbmxpbmVEYXRhKCk6IEV4cGVjdGVkIGZyYWdtZW50IGAlc2AgdG8gYmUgc3ByZWFkIGluIHRoZSBwYXJlbnQgJyArICdmcmFnbWVudC4nLCBpbmxpbmVEYXRhRnJhZ21lbnQubmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gaW5saW5lRGF0YTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZWFkSW5saW5lRGF0YTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZyA9IHJlcXVpcmUoJy4uL211dGF0aW9ucy9SZWxheURlY2xhcmF0aXZlTXV0YXRpb25Db25maWcnKTtcblxudmFyIFJlbGF5RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi4vdXRpbC9SZWxheUZlYXR1cmVGbGFncycpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCJmYmpzL2xpYi93YXJuaW5nXCIpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuLi9xdWVyeS9HcmFwaFFMVGFnJyksXG4gICAgZ2V0UmVxdWVzdCA9IF9yZXF1aXJlLmdldFJlcXVlc3Q7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuLi9zdG9yZS9DbGllbnRJRCcpLFxuICAgIGdlbmVyYXRlVW5pcXVlQ2xpZW50SUQgPSBfcmVxdWlyZTIuZ2VuZXJhdGVVbmlxdWVDbGllbnRJRDtcblxudmFyIF9yZXF1aXJlMyA9IHJlcXVpcmUoJy4uL3N0b3JlL1JlbGF5TW9kZXJuT3BlcmF0aW9uRGVzY3JpcHRvcicpLFxuICAgIGNyZWF0ZU9wZXJhdGlvbkRlc2NyaXB0b3IgPSBfcmVxdWlyZTMuY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcjtcblxudmFyIF9yZXF1aXJlNCA9IHJlcXVpcmUoJy4uL3N0b3JlL1JlbGF5TW9kZXJuU2VsZWN0b3InKSxcbiAgICBjcmVhdGVSZWFkZXJTZWxlY3RvciA9IF9yZXF1aXJlNC5jcmVhdGVSZWFkZXJTZWxlY3RvcjtcblxuZnVuY3Rpb24gcmVxdWVzdFN1YnNjcmlwdGlvbihlbnZpcm9ubWVudCwgY29uZmlnKSB7XG4gIHZhciBzdWJzY3JpcHRpb24gPSBnZXRSZXF1ZXN0KGNvbmZpZy5zdWJzY3JpcHRpb24pO1xuXG4gIGlmIChzdWJzY3JpcHRpb24ucGFyYW1zLm9wZXJhdGlvbktpbmQgIT09ICdzdWJzY3JpcHRpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdyZXF1ZXN0U3Vic2NyaXB0aW9uOiBNdXN0IHVzZSBTdWJzY3JpcHRpb24gb3BlcmF0aW9uJyk7XG4gIH1cblxuICB2YXIgY29uZmlncyA9IGNvbmZpZy5jb25maWdzLFxuICAgICAgb25Db21wbGV0ZWQgPSBjb25maWcub25Db21wbGV0ZWQsXG4gICAgICBvbkVycm9yID0gY29uZmlnLm9uRXJyb3IsXG4gICAgICBvbk5leHQgPSBjb25maWcub25OZXh0LFxuICAgICAgdmFyaWFibGVzID0gY29uZmlnLnZhcmlhYmxlcyxcbiAgICAgIGNhY2hlQ29uZmlnID0gY29uZmlnLmNhY2hlQ29uZmlnO1xuICB2YXIgb3BlcmF0aW9uID0gY3JlYXRlT3BlcmF0aW9uRGVzY3JpcHRvcihzdWJzY3JpcHRpb24sIHZhcmlhYmxlcywgY2FjaGVDb25maWcsIFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9VTklRVUVfU1VCU0NSSVBUSU9OX1JPT1QgPyBnZW5lcmF0ZVVuaXF1ZUNsaWVudElEKCkgOiB1bmRlZmluZWQpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoY29uZmlnLnVwZGF0ZXIgJiYgY29uZmlncyksICdyZXF1ZXN0U3Vic2NyaXB0aW9uOiBFeHBlY3RlZCBvbmx5IG9uZSBvZiBgdXBkYXRlcmAgYW5kIGBjb25maWdzYCB0byBiZSBwcm92aWRlZCcpIDogdm9pZCAwO1xuXG4gIHZhciBfcmVmID0gY29uZmlncyA/IFJlbGF5RGVjbGFyYXRpdmVNdXRhdGlvbkNvbmZpZy5jb252ZXJ0KGNvbmZpZ3MsIHN1YnNjcmlwdGlvbiwgbnVsbFxuICAvKiBvcHRpbWlzdGljVXBkYXRlciAqL1xuICAsIGNvbmZpZy51cGRhdGVyKSA6IGNvbmZpZyxcbiAgICAgIHVwZGF0ZXIgPSBfcmVmLnVwZGF0ZXI7XG5cbiAgdmFyIHN1YiA9IGVudmlyb25tZW50LmV4ZWN1dGUoe1xuICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgIHVwZGF0ZXI6IHVwZGF0ZXJcbiAgfSkubWFwKGZ1bmN0aW9uIChyZXNwb25zZXMpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSBvcGVyYXRpb24uZnJhZ21lbnQ7XG5cbiAgICBpZiAoUmVsYXlGZWF0dXJlRmxhZ3MuRU5BQkxFX1VOSVFVRV9TVUJTQ1JJUFRJT05fUk9PVCkge1xuICAgICAgdmFyIG5leHRJRDtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzcG9uc2VzKSkge1xuICAgICAgICB2YXIgX3Jlc3BvbnNlcyQsIF9yZXNwb25zZXMkJGV4dGVuc2lvbjtcblxuICAgICAgICBuZXh0SUQgPSAoX3Jlc3BvbnNlcyQgPSByZXNwb25zZXNbMF0pID09PSBudWxsIHx8IF9yZXNwb25zZXMkID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3Jlc3BvbnNlcyQkZXh0ZW5zaW9uID0gX3Jlc3BvbnNlcyQuZXh0ZW5zaW9ucykgPT09IG51bGwgfHwgX3Jlc3BvbnNlcyQkZXh0ZW5zaW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcmVzcG9uc2VzJCRleHRlbnNpb24uX19yZWxheV9zdWJzY3JpcHRpb25fcm9vdF9pZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBfcmVzcG9uc2VzJGV4dGVuc2lvbnM7XG5cbiAgICAgICAgbmV4dElEID0gKF9yZXNwb25zZXMkZXh0ZW5zaW9ucyA9IHJlc3BvbnNlcy5leHRlbnNpb25zKSA9PT0gbnVsbCB8fCBfcmVzcG9uc2VzJGV4dGVuc2lvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yZXNwb25zZXMkZXh0ZW5zaW9ucy5fX3JlbGF5X3N1YnNjcmlwdGlvbl9yb290X2lkO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG5leHRJRCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2VsZWN0b3IgPSBjcmVhdGVSZWFkZXJTZWxlY3RvcihzZWxlY3Rvci5ub2RlLCBuZXh0SUQsIHNlbGVjdG9yLnZhcmlhYmxlcywgc2VsZWN0b3Iub3duZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkYXRhID0gZW52aXJvbm1lbnQubG9va3VwKHNlbGVjdG9yKS5kYXRhOyAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYXN0XVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH0pLnN1YnNjcmliZSh7XG4gICAgbmV4dDogb25OZXh0LFxuICAgIGVycm9yOiBvbkVycm9yLFxuICAgIGNvbXBsZXRlOiBvbkNvbXBsZXRlZFxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBkaXNwb3NlOiBzdWIudW5zdWJzY3JpYmVcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1ZXN0U3Vic2NyaXB0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBjb21tb24gR3JhcGhRTCByZXF1ZXN0IHRoYXQgY2FuIGJlIGV4ZWN1dGVkLCBhbiBgb3BlcmF0aW9uYFxuICogY29udGFpbmluZyBpbmZvcm1hdGlvbiB0byBub3JtYWxpemUgdGhlIHJlc3VsdHMsIGFuZCBhIGBmcmFnbWVudGAgZGVyaXZlZFxuICogZnJvbSB0aGF0IG9wZXJhdGlvbiB0byByZWFkIHRoZSByZXNwb25zZSBkYXRhIChtYXNraW5nIGRhdGEgZnJvbSBjaGlsZFxuICogZnJhZ21lbnRzKS5cbiAqL1xuXG4vKipcbiAqIENvbnRhaW5zIHRoZSBwYXJhbWV0ZXJzIHJlcXVpcmVkIGZvciBleGVjdXRpbmcgYSBHcmFwaFFMIHJlcXVlc3QuXG4gKiBUaGUgb3BlcmF0aW9uIGNhbiBlaXRoZXIgYmUgcHJvdmlkZWQgYXMgYSBwZXJzaXN0ZWQgYGlkYCBvciBgdGV4dGAuIElmIGdpdmVuXG4gKiBpbiBgdGV4dGAgZm9ybWF0LCBhIGBjYWNoZUlEYCBhcyBhIGhhc2ggb2YgdGhlIHRleHQgc2hvdWxkIGJlIHNldCB0byBiZSB1c2VkXG4gKiBmb3IgbG9jYWwgY2FjaGluZy5cbiAqL1xudmFyIFJlbGF5Q29uY3JldGVOb2RlID0ge1xuICBDT05ESVRJT046ICdDb25kaXRpb24nLFxuICBDTElFTlRfQ09NUE9ORU5UOiAnQ2xpZW50Q29tcG9uZW50JyxcbiAgQ0xJRU5UX0VYVEVOU0lPTjogJ0NsaWVudEV4dGVuc2lvbicsXG4gIERFRkVSOiAnRGVmZXInLFxuICBDT05ORUNUSU9OOiAnQ29ubmVjdGlvbicsXG4gIEZMSUdIVF9GSUVMRDogJ0ZsaWdodEZpZWxkJyxcbiAgRlJBR01FTlQ6ICdGcmFnbWVudCcsXG4gIEZSQUdNRU5UX1NQUkVBRDogJ0ZyYWdtZW50U3ByZWFkJyxcbiAgSU5MSU5FX0RBVEFfRlJBR01FTlRfU1BSRUFEOiAnSW5saW5lRGF0YUZyYWdtZW50U3ByZWFkJyxcbiAgSU5MSU5FX0RBVEFfRlJBR01FTlQ6ICdJbmxpbmVEYXRhRnJhZ21lbnQnLFxuICBJTkxJTkVfRlJBR01FTlQ6ICdJbmxpbmVGcmFnbWVudCcsXG4gIExJTktFRF9GSUVMRDogJ0xpbmtlZEZpZWxkJyxcbiAgTElOS0VEX0hBTkRMRTogJ0xpbmtlZEhhbmRsZScsXG4gIExJVEVSQUw6ICdMaXRlcmFsJyxcbiAgTElTVF9WQUxVRTogJ0xpc3RWYWx1ZScsXG4gIExPQ0FMX0FSR1VNRU5UOiAnTG9jYWxBcmd1bWVudCcsXG4gIE1PRFVMRV9JTVBPUlQ6ICdNb2R1bGVJbXBvcnQnLFxuICBSRUxBWV9SRVNPTFZFUjogJ1JlbGF5UmVzb2x2ZXInLFxuICBSRVFVSVJFRF9GSUVMRDogJ1JlcXVpcmVkRmllbGQnLFxuICBPQkpFQ1RfVkFMVUU6ICdPYmplY3RWYWx1ZScsXG4gIE9QRVJBVElPTjogJ09wZXJhdGlvbicsXG4gIFJFUVVFU1Q6ICdSZXF1ZXN0JyxcbiAgUk9PVF9BUkdVTUVOVDogJ1Jvb3RBcmd1bWVudCcsXG4gIFNDQUxBUl9GSUVMRDogJ1NjYWxhckZpZWxkJyxcbiAgU0NBTEFSX0hBTkRMRTogJ1NjYWxhckhhbmRsZScsXG4gIFNQTElUX09QRVJBVElPTjogJ1NwbGl0T3BlcmF0aW9uJyxcbiAgU1RSRUFNOiAnU3RyZWFtJyxcbiAgVFlQRV9ESVNDUklNSU5BVE9SOiAnVHlwZURpc2NyaW1pbmF0b3InLFxuICBWQVJJQUJMRTogJ1ZhcmlhYmxlJ1xufTtcbm1vZHVsZS5leHBvcnRzID0gUmVsYXlDb25jcmV0ZU5vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBERUZBVUxUX0hBTkRMRV9LRVk6ICcnXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yKHR5cGUsIG5hbWUsIG1lc3NhZ2VGb3JtYXQpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1lc3NhZ2VQYXJhbXMgPSBuZXcgQXJyYXkoX2xlbiA+IDMgPyBfbGVuIC0gMyA6IDApLCBfa2V5ID0gMzsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1lc3NhZ2VQYXJhbXNbX2tleSAtIDNdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIG1lc3NhZ2UgPSBtZXNzYWdlRm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gU3RyaW5nKG1lc3NhZ2VQYXJhbXNbaW5kZXgrK10pO1xuICB9KTtcbiAgdmFyIGVyciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgdmFyIGVycm9yID0gT2JqZWN0LmFzc2lnbihlcnIsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIG1lc3NhZ2VGb3JtYXQ6IG1lc3NhZ2VGb3JtYXQsXG4gICAgbWVzc2FnZVBhcmFtczogbWVzc2FnZVBhcmFtcyxcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRhYWxPcGNvZGVzOiBbMiwgMl0gLy8gc2tpcCBmcmFtZSAoY29kZT0yKSB0d2ljZVxuXG4gIH0pOyAvLyBJbiBWOCwgRXJyb3Igb2JqZWN0cyBrZWVwIHRoZSBjbG9zdXJlIHNjb3BlIGNoYWluIGFsaXZlIHVudGlsIHRoZVxuICAvLyBlcnIuc3RhY2sgcHJvcGVydHkgaXMgYWNjZXNzZWQuXG5cbiAgaWYgKGVycm9yLnN0YWNrID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBJRSBzZXRzIHRoZSBzdGFjayBvbmx5IGlmIGVycm9yIGlzIHRocm93blxuICAgIHRyeSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IGNhdGNoIChfdW51c2VkKSB7fVxuICB9XG5cbiAgcmV0dXJuIGVycm9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUobmFtZSwgbWVzc2FnZUZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgbWVzc2FnZVBhcmFtcyA9IG5ldyBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBtZXNzYWdlUGFyYW1zW19rZXkyIC0gMl0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVFcnJvci5hcHBseSh2b2lkIDAsIFsnZXJyb3InLCBuYW1lLCBtZXNzYWdlRm9ybWF0XS5jb25jYXQobWVzc2FnZVBhcmFtcykpO1xuICB9LFxuICBjcmVhdGVXYXJuaW5nOiBmdW5jdGlvbiBjcmVhdGVXYXJuaW5nKG5hbWUsIG1lc3NhZ2VGb3JtYXQpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIG1lc3NhZ2VQYXJhbXMgPSBuZXcgQXJyYXkoX2xlbjMgPiAyID8gX2xlbjMgLSAyIDogMCksIF9rZXkzID0gMjsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgbWVzc2FnZVBhcmFtc1tfa2V5MyAtIDJdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlRXJyb3IuYXBwbHkodm9pZCAwLCBbJ3dhcm4nLCBuYW1lLCBtZXNzYWdlRm9ybWF0XS5jb25jYXQobWVzc2FnZVBhcmFtcykpO1xuICB9XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVsYXlGZWF0dXJlRmxhZ3MgPSB7XG4gIEVOQUJMRV9WQVJJQUJMRV9DT05ORUNUSU9OX0tFWTogZmFsc2UsXG4gIEVOQUJMRV9QQVJUSUFMX1JFTkRFUklOR19ERUZBVUxUOiB0cnVlLFxuICBFTkFCTEVfUkVMQVlfQ09OVEFJTkVSU19TVVNQRU5TRTogdHJ1ZSxcbiAgRU5BQkxFX1BSRUNJU0VfVFlQRV9SRUZJTkVNRU5UOiBmYWxzZSxcbiAgRU5BQkxFX1JFQUNUX0ZMSUdIVF9DT01QT05FTlRfRklFTEQ6IGZhbHNlLFxuICBFTkFCTEVfUkVRVUlSRURfRElSRUNUSVZFUzogZmFsc2UsXG4gIEVOQUJMRV9SRUxBWV9SRVNPTFZFUlM6IGZhbHNlLFxuICBFTkFCTEVfR0VURlJBR01FTlRJREVOVElGSUVSX09QVElNSVpBVElPTjogZmFsc2UsXG4gIEVOQUJMRV9GUklFTkRMWV9RVUVSWV9OQU1FX0dRTF9VUkw6IGZhbHNlLFxuICBFTkFCTEVfU1RPUkVfU1VCU0NSSVBUSU9OU19SRUZBQ1RPUjogZmFsc2UsXG4gIEVOQUJMRV9MT0FEX1FVRVJZX1JFUVVFU1RfREVEVVBJTkc6IHRydWUsXG4gIEVOQUJMRV9ET19OT1RfV1JBUF9MSVZFX1FVRVJZOiBmYWxzZSxcbiAgRU5BQkxFX05PVElGWV9TVUJTQ1JJUFRJT046IGZhbHNlLFxuICBFTkFCTEVfVU5JUVVFX1NVQlNDUklQVElPTl9ST09UOiBmYWxzZSxcbiAgRU5BQkxFX0JBVENIRURfU1RPUkVfVVBEQVRFUzogZmFsc2Vcbn07XG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF5RmVhdHVyZUZsYWdzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHJvZmlsZUhhbmRsZXJzQnlOYW1lID0ge307XG52YXIgZGVmYXVsdFByb2ZpbGVyID0ge1xuICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge31cbn07XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBJbnN0cnVtZW50cyBtZXRob2RzIHRvIGFsbG93IHByb2ZpbGluZyB2YXJpb3VzIHBhcnRzIG9mIFJlbGF5LiBQcm9maWxpbmcgY29kZVxuICogaW4gUmVsYXkgY29uc2lzdHMgb2YgdGhyZWUgc3RlcHM6XG4gKlxuICogIC0gSW5zdHJ1bWVudCB0aGUgZnVuY3Rpb24gdG8gYmUgcHJvZmlsZWQuXG4gKiAgLSBBdHRhY2ggaGFuZGxlcnMgdG8gdGhlIGluc3RydW1lbnRlZCBmdW5jdGlvbi5cbiAqICAtIFJ1biB0aGUgY29kZSB3aGljaCB0cmlnZ2VycyB0aGUgaGFuZGxlcnMuXG4gKlxuICogSGFuZGxlcnMgYXR0YWNoZWQgdG8gaW5zdHJ1bWVudGVkIG1ldGhvZHMgYXJlIGNhbGxlZCB3aXRoIGFuIGluc3RydW1lbnRhdGlvblxuICogbmFtZSBhbmQgYSBjYWxsYmFjayB0aGF0IG11c3QgYmUgc3luY2hyb25vdXNseSBleGVjdXRlZDpcbiAqXG4gKiAgIGluc3RydW1lbnRlZE1ldGhvZC5hdHRhY2hIYW5kbGVyKGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrKSB7XG4gKiAgICAgY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAqICAgICBjYWxsYmFjaygpO1xuICogICAgIGNvbnNvbGUubG9nKCdEdXJhdGlvbicsIHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQpO1xuICogICB9KTtcbiAqXG4gKiBIYW5kbGVycyBmb3IgcHJvZmlsZXMgYXJlIGNhbGxiYWNrcyB0aGF0IHJldHVybiBhIHN0b3AgbWV0aG9kOlxuICpcbiAqICAgUmVsYXlQcm9maWxlci5hdHRhY2hQcm9maWxlSGFuZGxlcigncHJvZmlsZU5hbWUnLCAobmFtZSwgc3RhdGUpID0+IHtcbiAqICAgICBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICogICAgIHJldHVybiBmdW5jdGlvbiBzdG9wKG5hbWUsIHN0YXRlKSB7XG4gKiAgICAgICBjb25zb2xlLmxvZyhgRHVyYXRpb24gKCR7bmFtZX0pYCwgcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydCk7XG4gKiAgICAgfVxuICogICB9KTtcbiAqL1xuXG52YXIgUmVsYXlQcm9maWxlciA9IHtcbiAgLyoqXG4gICAqIEluc3RydW1lbnRzIHByb2ZpbGluZyBmb3IgYXJiaXRyYXJpbHkgYXN5bmNocm9ub3VzIGNvZGUgYnkgYSBuYW1lLlxuICAgKlxuICAgKiAgIGNvbnN0IHRpbWVyUHJvZmlsZXIgPSBSZWxheVByb2ZpbGVyLnByb2ZpbGUoJ3RpbWVvdXQnKTtcbiAgICogICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgKiAgICAgdGltZXJQcm9maWxlci5zdG9wKCk7XG4gICAqICAgfSwgMTAwMCk7XG4gICAqXG4gICAqICAgUmVsYXlQcm9maWxlci5hdHRhY2hQcm9maWxlSGFuZGxlcigndGltZW91dCcsIC4uLik7XG4gICAqXG4gICAqIEFyYml0cmFyeSBzdGF0ZSBjYW4gYWxzbyBiZSBwYXNzZWQgaW50byBgcHJvZmlsZWAgYXMgYSBzZWNvbmQgYXJndW1lbnQuIFRoZVxuICAgKiBhdHRhY2hlZCBwcm9maWxlIGhhbmRsZXJzIHdpbGwgcmVjZWl2ZSB0aGlzIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICAqL1xuICBwcm9maWxlOiBmdW5jdGlvbiBwcm9maWxlKG5hbWUsIHN0YXRlKSB7XG4gICAgdmFyIGhhbmRsZXJzID0gcHJvZmlsZUhhbmRsZXJzQnlOYW1lW25hbWVdO1xuXG4gICAgaWYgKGhhbmRsZXJzICYmIGhhbmRsZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBzdG9wSGFuZGxlcnMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaWkgPSBoYW5kbGVycy5sZW5ndGggLSAxOyBpaSA+PSAwOyBpaS0tKSB7XG4gICAgICAgIHZhciBzdG9wSGFuZGxlciA9IGhhbmRsZXJzW2lpXShuYW1lLCBzdGF0ZSk7XG4gICAgICAgIHN0b3BIYW5kbGVycy51bnNoaWZ0KHN0b3BIYW5kbGVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RvcDogZnVuY3Rpb24gc3RvcChlcnJvcikge1xuICAgICAgICAgIHN0b3BIYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChzdG9wSGFuZGxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHN0b3BIYW5kbGVyKGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmYXVsdFByb2ZpbGVyO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBdHRhY2hlcyBhIGhhbmRsZXIgdG8gcHJvZmlsZXMgd2l0aCB0aGUgc3VwcGxpZWQgbmFtZS5cbiAgICovXG4gIGF0dGFjaFByb2ZpbGVIYW5kbGVyOiBmdW5jdGlvbiBhdHRhY2hQcm9maWxlSGFuZGxlcihuYW1lLCBoYW5kbGVyKSB7XG4gICAgaWYgKCFwcm9maWxlSGFuZGxlcnNCeU5hbWUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIHByb2ZpbGVIYW5kbGVyc0J5TmFtZVtuYW1lXSA9IFtdO1xuICAgIH1cblxuICAgIHByb2ZpbGVIYW5kbGVyc0J5TmFtZVtuYW1lXS5wdXNoKGhhbmRsZXIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZXRhY2hlcyBhIGhhbmRsZXIgYXR0YWNoZWQgdmlhIGBhdHRhY2hQcm9maWxlSGFuZGxlcmAuXG4gICAqL1xuICBkZXRhY2hQcm9maWxlSGFuZGxlcjogZnVuY3Rpb24gZGV0YWNoUHJvZmlsZUhhbmRsZXIobmFtZSwgaGFuZGxlcikge1xuICAgIGlmIChwcm9maWxlSGFuZGxlcnNCeU5hbWUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIHJlbW92ZUZyb21BcnJheShwcm9maWxlSGFuZGxlcnNCeU5hbWVbbmFtZV0sIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gcmVtb3ZlRnJvbUFycmF5KGFycmF5LCBlbGVtZW50KSB7XG4gIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YoZWxlbWVudCk7XG5cbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWxheVByb2ZpbGVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIFJlbGF5T2JzZXJ2YWJsZSA9IHJlcXVpcmUoJy4uL25ldHdvcmsvUmVsYXlPYnNlcnZhYmxlJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBhIGBSZXBsYXlTdWJqZWN0YCBmb3IgUmVsYXkgT2JzZXJ2YWJsZXMuXG4gKlxuICogUmVjb3JkcyBldmVudHMgcHJvdmlkZWQgYW5kIHN5bmNocm9ub3VzbHkgcGxheXMgdGhlbSBiYWNrIHRvIG5ldyBzdWJzY3JpYmVycyxcbiAqIGFzIHdlbGwgYXMgZm9yd2FyZGluZyBuZXcgYXN5bmNocm9ub3VzIGV2ZW50cy5cbiAqL1xudmFyIFJlbGF5UmVwbGF5U3ViamVjdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlbGF5UmVwbGF5U3ViamVjdCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh0aGlzLCBcIl9jb21wbGV0ZVwiLCBmYWxzZSk7XG4gICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh0aGlzLCBcIl9ldmVudHNcIiwgW10pO1xuICAgICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkodGhpcywgXCJfc2lua3NcIiwgbmV3IFNldCgpKTtcbiAgICAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRoaXMsIFwiX3N1YnNjcmlwdGlvblwiLCBudWxsKTtcbiAgICB0aGlzLl9vYnNlcnZhYmxlID0gUmVsYXlPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAoc2luaykge1xuICAgICAgX3RoaXMuX3NpbmtzLmFkZChzaW5rKTtcblxuICAgICAgdmFyIGV2ZW50cyA9IF90aGlzLl9ldmVudHM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzaW5rLmNsb3NlZCkge1xuICAgICAgICAgIC8vIEJhaWwgaWYgYW4gZXZlbnQgbWFkZSB0aGUgb2JzZXJ2ZXIgdW5zdWJzY3JpYmUuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXZlbnQgPSBldmVudHNbaV07XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5raW5kKSB7XG4gICAgICAgICAgY2FzZSAnY29tcGxldGUnOlxuICAgICAgICAgICAgc2luay5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgICBzaW5rLmVycm9yKGV2ZW50LmVycm9yKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgICAgICBzaW5rLm5leHQoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBldmVudC5raW5kO1xuICAgICAgICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVsYXlSZXBsYXlTdWJqZWN0OiBVbmtub3duIGV2ZW50IGtpbmQgYCVzYC4nLCBldmVudC5raW5kKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuX3NpbmtzW1wiZGVsZXRlXCJdKHNpbmspO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZWxheVJlcGxheVN1YmplY3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgIGlmICh0aGlzLl9jb21wbGV0ZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2NvbXBsZXRlID0gdHJ1ZTtcblxuICAgIHRoaXMuX2V2ZW50cy5wdXNoKHtcbiAgICAgIGtpbmQ6ICdjb21wbGV0ZSdcbiAgICB9KTtcblxuICAgIHRoaXMuX3NpbmtzLmZvckVhY2goZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgIHJldHVybiBzaW5rLmNvbXBsZXRlKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmVycm9yID0gZnVuY3Rpb24gZXJyb3IoX2Vycm9yKSB7XG4gICAgaWYgKHRoaXMuX2NvbXBsZXRlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fY29tcGxldGUgPSB0cnVlO1xuXG4gICAgdGhpcy5fZXZlbnRzLnB1c2goe1xuICAgICAga2luZDogJ2Vycm9yJyxcbiAgICAgIGVycm9yOiBfZXJyb3JcbiAgICB9KTtcblxuICAgIHRoaXMuX3NpbmtzLmZvckVhY2goZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgIHJldHVybiBzaW5rLmVycm9yKF9lcnJvcik7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm5leHQgPSBmdW5jdGlvbiBuZXh0KGRhdGEpIHtcbiAgICBpZiAodGhpcy5fY29tcGxldGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9ldmVudHMucHVzaCh7XG4gICAgICBraW5kOiAnbmV4dCcsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSk7XG5cbiAgICB0aGlzLl9zaW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICByZXR1cm4gc2luay5uZXh0KGRhdGEpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSB0aGlzLl9vYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgcmV0dXJuIHRoaXMuX3N1YnNjcmlwdGlvbjtcbiAgfTtcblxuICBfcHJvdG8udW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcblxuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldE9ic2VydmVyQ291bnQgPSBmdW5jdGlvbiBnZXRPYnNlcnZlckNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLl9zaW5rcy5zaXplO1xuICB9O1xuXG4gIHJldHVybiBSZWxheVJlcGxheVN1YmplY3Q7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVsYXlSZXBsYXlTdWJqZWN0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfb2JqZWN0U3ByZWFkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMlwiKSk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uL3N0b3JlL1JlbGF5U3RvcmVVdGlscycpLFxuICAgIGdldE1vZHVsZUNvbXBvbmVudEtleSA9IF9yZXF1aXJlLmdldE1vZHVsZUNvbXBvbmVudEtleSxcbiAgICBnZXRNb2R1bGVPcGVyYXRpb25LZXkgPSBfcmVxdWlyZS5nZXRNb2R1bGVPcGVyYXRpb25LZXk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVBheWxvYWRGb3IzREZpZWxkKG5hbWUsIG9wZXJhdGlvbiwgY29tcG9uZW50LCByZXNwb25zZSkge1xuICB2YXIgZGF0YSA9ICgwLCBfb2JqZWN0U3ByZWFkMltcImRlZmF1bHRcIl0pKHt9LCByZXNwb25zZSk7XG4gIGRhdGFbZ2V0TW9kdWxlQ29tcG9uZW50S2V5KG5hbWUpXSA9IGNvbXBvbmVudDtcbiAgZGF0YVtnZXRNb2R1bGVPcGVyYXRpb25LZXkobmFtZSldID0gb3BlcmF0aW9uO1xuICByZXR1cm4gZGF0YTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVQYXlsb2FkRm9yM0RGaWVsZDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0Jztcbi8qKlxuICogUmVjdXJzaXZlbHkgXCJkZWVwXCIgZnJlZXplcyB0aGUgc3VwcGxpZWQgb2JqZWN0LlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgYW5kIGZvciBjb25zaXN0ZW5jeSB3aXRoIHRoZSBiZWhhdmlvciBvZiBgT2JqZWN0LmZyZWV6ZWAsXG4gKiByZXR1cm5zIHRoZSBub3ctZnJvemVuIG9yaWdpbmFsIG9iamVjdC5cbiAqL1xuXG5mdW5jdGlvbiBkZWVwRnJlZXplKG9iamVjdCkge1xuICBPYmplY3QuZnJlZXplKG9iamVjdCk7XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iamVjdCkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIHZhciBwcm9wZXJ0eSA9IG9iamVjdFtuYW1lXTtcblxuICAgIGlmIChwcm9wZXJ0eSAmJiB0eXBlb2YgcHJvcGVydHkgPT09ICdvYmplY3QnICYmICFPYmplY3QuaXNGcm96ZW4ocHJvcGVydHkpKSB7XG4gICAgICBkZWVwRnJlZXplKHByb3BlcnR5KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqZWN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZXBGcmVlemU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpZCA9IDEwMDAwMDtcblxuZnVuY3Rpb24gZ2VuZXJhdGVJRCgpIHtcbiAgcmV0dXJuIGlkKys7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2VuZXJhdGVJRDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWxheUZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vUmVsYXlGZWF0dXJlRmxhZ3MnKTtcblxudmFyIGlzRW1wdHlPYmplY3QgPSByZXF1aXJlKCcuL2lzRW1wdHlPYmplY3QnKTtcblxudmFyIHN0YWJsZUNvcHkgPSByZXF1aXJlKCcuL3N0YWJsZUNvcHknKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi4vc3RvcmUvUmVsYXlNb2Rlcm5TZWxlY3RvcicpLFxuICAgIGdldERhdGFJRHNGcm9tRnJhZ21lbnQgPSBfcmVxdWlyZS5nZXREYXRhSURzRnJvbUZyYWdtZW50LFxuICAgIGdldFZhcmlhYmxlc0Zyb21GcmFnbWVudCA9IF9yZXF1aXJlLmdldFZhcmlhYmxlc0Zyb21GcmFnbWVudCxcbiAgICBnZXRTZWxlY3RvciA9IF9yZXF1aXJlLmdldFNlbGVjdG9yO1xuXG5mdW5jdGlvbiBnZXRGcmFnbWVudElkZW50aWZpZXIoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZikge1xuICB2YXIgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihmcmFnbWVudE5vZGUsIGZyYWdtZW50UmVmKTtcbiAgdmFyIGZyYWdtZW50T3duZXJJZGVudGlmaWVyID0gc2VsZWN0b3IgPT0gbnVsbCA/ICdudWxsJyA6IHNlbGVjdG9yLmtpbmQgPT09ICdTaW5ndWxhclJlYWRlclNlbGVjdG9yJyA/IHNlbGVjdG9yLm93bmVyLmlkZW50aWZpZXIgOiAnWycgKyBzZWxlY3Rvci5zZWxlY3RvcnMubWFwKGZ1bmN0aW9uIChzZWwpIHtcbiAgICByZXR1cm4gc2VsLm93bmVyLmlkZW50aWZpZXI7XG4gIH0pLmpvaW4oJywnKSArICddJztcbiAgdmFyIGZyYWdtZW50VmFyaWFibGVzID0gZ2V0VmFyaWFibGVzRnJvbUZyYWdtZW50KGZyYWdtZW50Tm9kZSwgZnJhZ21lbnRSZWYpO1xuICB2YXIgZGF0YUlEcyA9IGdldERhdGFJRHNGcm9tRnJhZ21lbnQoZnJhZ21lbnROb2RlLCBmcmFnbWVudFJlZik7XG5cbiAgaWYgKFJlbGF5RmVhdHVyZUZsYWdzLkVOQUJMRV9HRVRGUkFHTUVOVElERU5USUZJRVJfT1BUSU1JWkFUSU9OKSB7XG4gICAgcmV0dXJuIGZyYWdtZW50T3duZXJJZGVudGlmaWVyICsgJy8nICsgZnJhZ21lbnROb2RlLm5hbWUgKyAnLycgKyAoZnJhZ21lbnRWYXJpYWJsZXMgPT0gbnVsbCB8fCBpc0VtcHR5T2JqZWN0KGZyYWdtZW50VmFyaWFibGVzKSA/ICd7fScgOiBKU09OLnN0cmluZ2lmeShzdGFibGVDb3B5KGZyYWdtZW50VmFyaWFibGVzKSkpICsgJy8nICsgKHR5cGVvZiBkYXRhSURzID09PSAndW5kZWZpbmVkJyA/ICdtaXNzaW5nJyA6IGRhdGFJRHMgPT0gbnVsbCA/ICdudWxsJyA6IEFycmF5LmlzQXJyYXkoZGF0YUlEcykgPyAnWycgKyBkYXRhSURzLmpvaW4oJywnKSArICddJyA6IGRhdGFJRHMpO1xuICB9IGVsc2Uge1xuICAgIHZhciBfSlNPTiRzdHJpbmdpZnk7XG5cbiAgICByZXR1cm4gZnJhZ21lbnRPd25lcklkZW50aWZpZXIgKyAnLycgKyBmcmFnbWVudE5vZGUubmFtZSArICcvJyArIEpTT04uc3RyaW5naWZ5KHN0YWJsZUNvcHkoZnJhZ21lbnRWYXJpYWJsZXMpKSArICcvJyArICgoX0pTT04kc3RyaW5naWZ5ID0gSlNPTi5zdHJpbmdpZnkoZGF0YUlEcykpICE9PSBudWxsICYmIF9KU09OJHN0cmluZ2lmeSAhPT0gdm9pZCAwID8gX0pTT04kc3RyaW5naWZ5IDogJ21pc3NpbmcnKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEZyYWdtZW50SWRlbnRpZmllcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vUmVsYXlDb25jcmV0ZU5vZGUnKSxcbiAgICBSRVFVRVNUID0gX3JlcXVpcmUuUkVRVUVTVCxcbiAgICBTUExJVF9PUEVSQVRJT04gPSBfcmVxdWlyZS5TUExJVF9PUEVSQVRJT047XG5cbi8qKlxuICogT3BlcmF0aW9uTG9hZGVycyBjYW4gcmV0dXJuIGVpdGhlciBhIE5vcm1hbGl6YXRpb25TcGxpdE9wZXJhdGlvbiBvclxuICogQ29uY3JldGVSZXF1ZXN0LlxuICovXG5mdW5jdGlvbiBnZXRPcGVyYXRpb24obm9kZSkge1xuICBzd2l0Y2ggKG5vZGUua2luZCkge1xuICAgIGNhc2UgUkVRVUVTVDpcbiAgICAgIHJldHVybiBub2RlLm9wZXJhdGlvbjtcblxuICAgIGNhc2UgU1BMSVRfT1BFUkFUSU9OOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbm9kZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE9wZXJhdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL1JlbGF5RGVmYXVsdEhhbmRsZUtleScpLFxuICAgIERFRkFVTFRfSEFORExFX0tFWSA9IF9yZXF1aXJlLkRFRkFVTFRfSEFORExFX0tFWTtcbi8qKlxuICogQGludGVybmFsXG4gKlxuICogSGVscGVyIHRvIGNyZWF0ZSBhIHVuaXF1ZSBuYW1lIGZvciBhIGhhbmRsZSBmaWVsZCBiYXNlZCBvbiB0aGUgaGFuZGxlIG5hbWUsIGhhbmRsZSBrZXkgYW5kXG4gKiBzb3VyY2UgZmllbGQuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRSZWxheUhhbmRsZUtleShoYW5kbGVOYW1lLCBrZXksIGZpZWxkTmFtZSkge1xuICBpZiAoa2V5ICYmIGtleSAhPT0gREVGQVVMVF9IQU5ETEVfS0VZKSB7XG4gICAgcmV0dXJuIFwiX19cIi5jb25jYXQoa2V5LCBcIl9cIikuY29uY2F0KGhhbmRsZU5hbWUpO1xuICB9XG5cbiAgIShmaWVsZE5hbWUgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdnZXRSZWxheUhhbmRsZUtleTogRXhwZWN0ZWQgZWl0aGVyIGBmaWVsZE5hbWVgIG9yIGBrZXlgIGluIGBoYW5kbGVgIHRvIGJlIHByb3ZpZGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gXCJfX1wiLmNvbmNhdChmaWVsZE5hbWUsIFwiX1wiKS5jb25jYXQoaGFuZGxlTmFtZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmVsYXlIYW5kbGVLZXk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIHN0YWJsZUNvcHkgPSByZXF1aXJlKCcuL3N0YWJsZUNvcHknKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RhYmxlIGlkZW50aWZpZXIgZm9yIHRoZSBnaXZlbiBwYWlyIG9mIGBSZXF1ZXN0UGFyYW1ldGVyc2AgK1xuICogdmFyaWFibGVzLlxuICovXG5mdW5jdGlvbiBnZXRSZXF1ZXN0SWRlbnRpZmllcihwYXJhbWV0ZXJzLCB2YXJpYWJsZXMpIHtcbiAgdmFyIHJlcXVlc3RJRCA9IHBhcmFtZXRlcnMuY2FjaGVJRCAhPSBudWxsID8gcGFyYW1ldGVycy5jYWNoZUlEIDogcGFyYW1ldGVycy5pZDtcbiAgIShyZXF1ZXN0SUQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdnZXRSZXF1ZXN0SWRlbnRpZmllcjogRXhwZWN0ZWQgcmVxdWVzdCBgJXNgIHRvIGhhdmUgZWl0aGVyIGEgJyArICd2YWxpZCBgaWRgIG9yIGBjYWNoZUlEYCBwcm9wZXJ0eScsIHBhcmFtZXRlcnMubmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcmVxdWVzdElEICsgSlNPTi5zdHJpbmdpZnkoc3RhYmxlQ29weSh2YXJpYWJsZXMpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSZXF1ZXN0SWRlbnRpZmllcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICogQGVtYWlscyBvbmNhbGwrcmVsYXlcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBpc0VtcHR5T2JqZWN0KG9iaikge1xuICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgX2tleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0VtcHR5T2JqZWN0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBpc1Byb21pc2UocCkge1xuICByZXR1cm4gISFwICYmIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQcm9taXNlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8vIGZsb3dsaW50IGFtYmlndW91cy1vYmplY3QtdHlwZTplcnJvclxuJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBBIGZhc3QgdGVzdCB0byBkZXRlcm1pbmUgaWYgdHdvIHZhbHVlcyBhcmUgZXF1YWwgc2NhbGFyczpcbiAqIC0gY29tcGFyZXMgc2NhbGFycyBzdWNoIGFzIGJvb2xlYW5zLCBzdHJpbmdzLCBudW1iZXJzIGJ5IHZhbHVlXG4gKiAtIGNvbXBhcmVzIGZ1bmN0aW9ucyBieSBpZGVudGl0eVxuICogLSByZXR1cm5zIGZhbHNlIGZvciBjb21wbGV4IHZhbHVlcywgc2luY2UgdGhlc2UgY2Fubm90IGJlIGNoZWFwbHkgdGVzdGVkIGZvclxuICogICBlcXVhbGl0eSAodXNlIGBhcmVFcXVhbHNgIGluc3RlYWQpXG4gKi9cblxuZnVuY3Rpb24gaXNTY2FsYXJBbmRFcXVhbCh2YWx1ZUEsIHZhbHVlQikge1xuICByZXR1cm4gdmFsdWVBID09PSB2YWx1ZUIgJiYgKHZhbHVlQSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWVBICE9PSAnb2JqZWN0Jyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTY2FsYXJBbmRFcXVhbDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICogQGZvcm1hdFxuICovXG4vLyBmbG93bGludCBhbWJpZ3VvdXMtb2JqZWN0LXR5cGU6ZXJyb3Jcbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1dlYWtTZXREZWZpbmVkID0gdHlwZW9mIFdlYWtTZXQgIT09ICd1bmRlZmluZWQnO1xudmFyIGhhc1dlYWtNYXBEZWZpbmVkID0gdHlwZW9mIFdlYWtNYXAgIT09ICd1bmRlZmluZWQnO1xuLyoqXG4gKiBSZWN5Y2xlcyBzdWJ0cmVlcyBmcm9tIGBwcmV2RGF0YWAgYnkgcmVwbGFjaW5nIGVxdWFsIHN1YnRyZWVzIGluIGBuZXh0RGF0YWAuXG4gKi9cblxuZnVuY3Rpb24gcmVjeWNsZU5vZGVzSW50byhwcmV2RGF0YSwgbmV4dERhdGEpIHtcbiAgaWYgKHByZXZEYXRhID09PSBuZXh0RGF0YSB8fCB0eXBlb2YgcHJldkRhdGEgIT09ICdvYmplY3QnIHx8IHByZXZEYXRhIGluc3RhbmNlb2YgU2V0IHx8IHByZXZEYXRhIGluc3RhbmNlb2YgTWFwIHx8IGhhc1dlYWtTZXREZWZpbmVkICYmIHByZXZEYXRhIGluc3RhbmNlb2YgV2Vha1NldCB8fCBoYXNXZWFrTWFwRGVmaW5lZCAmJiBwcmV2RGF0YSBpbnN0YW5jZW9mIFdlYWtNYXAgfHwgIXByZXZEYXRhIHx8IHR5cGVvZiBuZXh0RGF0YSAhPT0gJ29iamVjdCcgfHwgbmV4dERhdGEgaW5zdGFuY2VvZiBTZXQgfHwgbmV4dERhdGEgaW5zdGFuY2VvZiBNYXAgfHwgaGFzV2Vha1NldERlZmluZWQgJiYgbmV4dERhdGEgaW5zdGFuY2VvZiBXZWFrU2V0IHx8IGhhc1dlYWtNYXBEZWZpbmVkICYmIG5leHREYXRhIGluc3RhbmNlb2YgV2Vha01hcCB8fCAhbmV4dERhdGEpIHtcbiAgICByZXR1cm4gbmV4dERhdGE7XG4gIH1cblxuICB2YXIgY2FuUmVjeWNsZSA9IGZhbHNlOyAvLyBBc3NpZ24gbG9jYWwgdmFyaWFibGVzIHRvIHByZXNlcnZlIEZsb3cgdHlwZSByZWZpbmVtZW50LlxuXG4gIHZhciBwcmV2QXJyYXkgPSBBcnJheS5pc0FycmF5KHByZXZEYXRhKSA/IHByZXZEYXRhIDogbnVsbDtcbiAgdmFyIG5leHRBcnJheSA9IEFycmF5LmlzQXJyYXkobmV4dERhdGEpID8gbmV4dERhdGEgOiBudWxsO1xuXG4gIGlmIChwcmV2QXJyYXkgJiYgbmV4dEFycmF5KSB7XG4gICAgY2FuUmVjeWNsZSA9IG5leHRBcnJheS5yZWR1Y2UoZnVuY3Rpb24gKHdhc0VxdWFsLCBuZXh0SXRlbSwgaWkpIHtcbiAgICAgIHZhciBwcmV2VmFsdWUgPSBwcmV2QXJyYXlbaWldO1xuICAgICAgdmFyIG5leHRWYWx1ZSA9IHJlY3ljbGVOb2Rlc0ludG8ocHJldlZhbHVlLCBuZXh0SXRlbSk7XG5cbiAgICAgIGlmIChuZXh0VmFsdWUgIT09IG5leHRBcnJheVtpaV0pIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIGlmICghT2JqZWN0LmlzRnJvemVuKG5leHRBcnJheSkpIHtcbiAgICAgICAgICAgIG5leHRBcnJheVtpaV0gPSBuZXh0VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHRBcnJheVtpaV0gPSBuZXh0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdhc0VxdWFsICYmIG5leHRWYWx1ZSA9PT0gcHJldkFycmF5W2lpXTtcbiAgICB9LCB0cnVlKSAmJiBwcmV2QXJyYXkubGVuZ3RoID09PSBuZXh0QXJyYXkubGVuZ3RoO1xuICB9IGVsc2UgaWYgKCFwcmV2QXJyYXkgJiYgIW5leHRBcnJheSkge1xuICAgIC8vIEFzc2lnbiBsb2NhbCB2YXJpYWJsZXMgdG8gcHJlc2VydmUgRmxvdyB0eXBlIHJlZmluZW1lbnQuXG4gICAgdmFyIHByZXZPYmplY3QgPSBwcmV2RGF0YTtcbiAgICB2YXIgbmV4dE9iamVjdCA9IG5leHREYXRhO1xuICAgIHZhciBwcmV2S2V5cyA9IE9iamVjdC5rZXlzKHByZXZPYmplY3QpO1xuICAgIHZhciBuZXh0S2V5cyA9IE9iamVjdC5rZXlzKG5leHRPYmplY3QpO1xuICAgIGNhblJlY3ljbGUgPSBuZXh0S2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHdhc0VxdWFsLCBrZXkpIHtcbiAgICAgIHZhciBwcmV2VmFsdWUgPSBwcmV2T2JqZWN0W2tleV07XG4gICAgICB2YXIgbmV4dFZhbHVlID0gcmVjeWNsZU5vZGVzSW50byhwcmV2VmFsdWUsIG5leHRPYmplY3Rba2V5XSk7XG5cbiAgICAgIGlmIChuZXh0VmFsdWUgIT09IG5leHRPYmplY3Rba2V5XSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgaWYgKCFPYmplY3QuaXNGcm96ZW4obmV4dE9iamVjdCkpIHtcbiAgICAgICAgICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuICAgICAgICAgICAgbmV4dE9iamVjdFtrZXldID0gbmV4dFZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cbiAgICAgICAgICBuZXh0T2JqZWN0W2tleV0gPSBuZXh0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdhc0VxdWFsICYmIG5leHRWYWx1ZSA9PT0gcHJldk9iamVjdFtrZXldO1xuICAgIH0sIHRydWUpICYmIHByZXZLZXlzLmxlbmd0aCA9PT0gbmV4dEtleXMubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIGNhblJlY3ljbGUgPyBwcmV2RGF0YSA6IG5leHREYXRhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlY3ljbGVOb2Rlc0ludG87IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK3JlbGF5XG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gcmVwb3J0TWlzc2luZ1JlcXVpcmVkRmllbGRzKGVudmlyb25tZW50LCBtaXNzaW5nUmVxdWlyZWRGaWVsZHMpIHtcbiAgc3dpdGNoIChtaXNzaW5nUmVxdWlyZWRGaWVsZHMuYWN0aW9uKSB7XG4gICAgY2FzZSAnVEhST1cnOlxuICAgICAge1xuICAgICAgICB2YXIgX21pc3NpbmdSZXF1aXJlZEZpZWxkID0gbWlzc2luZ1JlcXVpcmVkRmllbGRzLmZpZWxkLFxuICAgICAgICAgICAgcGF0aCA9IF9taXNzaW5nUmVxdWlyZWRGaWVsZC5wYXRoLFxuICAgICAgICAgICAgb3duZXIgPSBfbWlzc2luZ1JlcXVpcmVkRmllbGQub3duZXI7IC8vIFRoaXMgZ2l2ZXMgdGhlIGNvbnN1bWVyIHRoZSBjaGFuY2UgdG8gdGhyb3cgdGhlaXIgb3duIGVycm9yIGlmIHRoZXkgc28gd2lzaC5cblxuICAgICAgICBlbnZpcm9ubWVudC5yZXF1aXJlZEZpZWxkTG9nZ2VyKHtcbiAgICAgICAgICBraW5kOiAnbWlzc2luZ19maWVsZC50aHJvdycsXG4gICAgICAgICAgb3duZXI6IG93bmVyLFxuICAgICAgICAgIGZpZWxkUGF0aDogcGF0aFxuICAgICAgICB9KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVsYXk6IE1pc3NpbmcgQHJlcXVpcmVkIHZhbHVlIGF0IHBhdGggJ1wiLmNvbmNhdChwYXRoLCBcIicgaW4gJ1wiKS5jb25jYXQob3duZXIsIFwiJy5cIikpO1xuICAgICAgfVxuXG4gICAgY2FzZSAnTE9HJzpcbiAgICAgIG1pc3NpbmdSZXF1aXJlZEZpZWxkcy5maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgcGF0aCA9IF9yZWYucGF0aCxcbiAgICAgICAgICAgIG93bmVyID0gX3JlZi5vd25lcjtcbiAgICAgICAgZW52aXJvbm1lbnQucmVxdWlyZWRGaWVsZExvZ2dlcih7XG4gICAgICAgICAga2luZDogJ21pc3NpbmdfZmllbGQubG9nJyxcbiAgICAgICAgICBvd25lcjogb3duZXIsXG4gICAgICAgICAgZmllbGRQYXRoOiBwYXRoXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICB7XG4gICAgICAgIG1pc3NpbmdSZXF1aXJlZEZpZWxkcy5hY3Rpb247XG4gICAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXBvcnRNaXNzaW5nUmVxdWlyZWRGaWVsZHM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG5cbnZhciByZXNvbHZlZFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbi8qKlxuICogQW4gYWx0ZXJuYXRpdmUgdG8gc2V0SW1tZWRpYXRlIGJhc2VkIG9uIFByb21pc2UuXG4gKi9cblxuZnVuY3Rpb24gcmVzb2x2ZUltbWVkaWF0ZShjYWxsYmFjaykge1xuICByZXNvbHZlZFByb21pc2UudGhlbihjYWxsYmFjaylbXCJjYXRjaFwiXSh0aHJvd05leHQpO1xufVxuXG5mdW5jdGlvbiB0aHJvd05leHQoZXJyb3IpIHtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0sIDApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc29sdmVJbW1lZGlhdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLy8gZmxvd2xpbnQgYW1iaWd1b3VzLW9iamVjdC10eXBlOmVycm9yXG4ndXNlIHN0cmljdCc7XG4vKipcbiAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoZSBwcm92aWRlZCB2YWx1ZSwgZW5zdXJpbmcgYW55IG5lc3RlZCBvYmplY3RzIGhhdmUgdGhlaXJcbiAqIGtleXMgc29ydGVkIHN1Y2ggdGhhdCBlcXVpdmFsZW50IHZhbHVlcyB3b3VsZCBoYXZlIGlkZW50aWNhbCBKU09OLnN0cmluZ2lmeVxuICogcmVzdWx0cy5cbiAqL1xuXG5mdW5jdGlvbiBzdGFibGVDb3B5KHZhbHVlKSB7XG4gIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoc3RhYmxlQ29weSk7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKS5zb3J0KCk7XG4gIHZhciBzdGFibGUgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBzdGFibGVba2V5c1tpXV0gPSBzdGFibGVDb3B5KHZhbHVlW2tleXNbaV1dKTtcbiAgfVxuXG4gIHJldHVybiBzdGFibGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhYmxlQ29weTsiLCJmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5TGlrZVRvQXJyYXk7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCIpO1xuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsInZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCIpO1xuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkge1xuICB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoIWl0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAoaXQpIG8gPSBpdDtcbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHM6IEYsXG4gICAgICAgIG46IGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgICAgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogb1tpKytdXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZTogZnVuY3Rpb24gZShfZSkge1xuICAgICAgICAgIHRocm93IF9lO1xuICAgICAgICB9LFxuICAgICAgICBmOiBGXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbiAgfVxuXG4gIHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSxcbiAgICAgIGRpZEVyciA9IGZhbHNlLFxuICAgICAgZXJyO1xuICByZXR1cm4ge1xuICAgIHM6IGZ1bmN0aW9uIHMoKSB7XG4gICAgICBpdCA9IGl0LmNhbGwobyk7XG4gICAgfSxcbiAgICBuOiBmdW5jdGlvbiBuKCkge1xuICAgICAgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7XG4gICAgICBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lO1xuICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgfSxcbiAgICBlOiBmdW5jdGlvbiBlKF9lMikge1xuICAgICAgZGlkRXJyID0gdHJ1ZTtcbiAgICAgIGVyciA9IF9lMjtcbiAgICB9LFxuICAgIGY6IGZ1bmN0aW9uIGYoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbXCJyZXR1cm5cIl0gIT0gbnVsbCkgaXRbXCJyZXR1cm5cIl0oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChkaWRFcnIpIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXI7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXk7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVTcHJlYWQ7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIi4vZGVmaW5lUHJvcGVydHkuanNcIik7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcblxuICAgIGlmIChlbnVtZXJhYmxlT25seSkge1xuICAgICAgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0U3ByZWFkMjtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJ2YXIgYXJyYXlXaXRob3V0SG9sZXMgPSByZXF1aXJlKFwiLi9hcnJheVdpdGhvdXRIb2xlcy5qc1wiKTtcblxudmFyIGl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheS5qc1wiKTtcblxudmFyIHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIik7XG5cbnZhciBub25JdGVyYWJsZVNwcmVhZCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCIpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdG9Db25zdW1hYmxlQXJyYXk7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCIpO1xuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHtcbiAgRW52aXJvbm1lbnQsIE5ldHdvcmssIFJlY29yZFNvdXJjZSwgU3RvcmUsXG59IGZyb20gJ3JlbGF5LXJ1bnRpbWUnO1xuXG5jb25zdCBmZXRjaEdyYXBoUUwgPSBhc3luYyAocXVlcnk6IGFueSwgdmFyaWFibGVzOiBhbnkpID0+IHtcbiAgY29uc3QgU0VSVkVSX0VORF9QT0lOVCA9ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvZ3JhcGhxbCc7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFNFUlZFUl9FTkRfUE9JTlQsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHF1ZXJ5LCB2YXJpYWJsZXMgfSksXG4gICAgfSk7XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUud2FybihlcnIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5jb25zdCBmZXRjaFJlbGF5ID0gKHBhcmFtczogYW55LCB2YXJpYWJsZXM6IGFueSkgPT4gZmV0Y2hHcmFwaFFMKHBhcmFtcy50ZXh0LCB2YXJpYWJsZXMpO1xuXG5leHBvcnQgZGVmYXVsdCBuZXcgRW52aXJvbm1lbnQoe1xuICBuZXR3b3JrOiBOZXR3b3JrLmNyZWF0ZShmZXRjaFJlbGF5KSxcbiAgc3RvcmU6IG5ldyBTdG9yZShuZXcgUmVjb3JkU291cmNlKCkpLFxufSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn0iLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bywgZnJvbSkge1xuICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkKSBmcm9tID0gJyc7XG5cbiAgdmFyIHRvUGFydHMgPSAodG8gJiYgdG8uc3BsaXQoJy8nKSkgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSAoZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2g7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG5cbiAgaWYgKFxuICAgIG11c3RFbmRBYnMgJiZcbiAgICBmcm9tUGFydHNbMF0gIT09ICcnICYmXG4gICAgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSlcbiAgKVxuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJ21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGhpc3RvcnlDb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQkMSA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgY29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQkMShcIlJvdXRlclwiKTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIFJvdXRlci5jb21wdXRlUm9vdE1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZVJvb3RNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBSb3V0ZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5oaXN0b3J5LmxvY2F0aW9uXG4gICAgfTsgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cblxuICAgIF90aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcblxuICAgIGlmICghcHJvcHMuc3RhdGljQ29udGV4dCkge1xuICAgICAgX3RoaXMudW5saXN0ZW4gPSBwcm9wcy5oaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9jYXRpb246IHRoaXMuX3BlbmRpbmdMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVubGlzdGVuKSB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksXG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgfVxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoaGlzdG9yeUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGwsXG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy5oaXN0b3J5XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlTWVtb3J5SGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lbW9yeVJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKCF3aGVuIHx8IGNvbnRleHQuc3RhdGljQ29udGV4dCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IGNvbnRleHQuaGlzdG9yeS5ibG9jaztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLm1lc3NhZ2UgIT09IG1lc3NhZ2UpIHtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVubW91bnQ6IGZ1bmN0aW9uIG9uVW5tb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIG1lc3NhZ2VUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKTtcbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCkge1xuICBpZiAoY2FjaGVbcGF0aF0pIHJldHVybiBjYWNoZVtwYXRoXTtcbiAgdmFyIGdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdGhdID0gZ2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0b3I7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdGggYW5kIHBhcmFtZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gXCIvXCI7XG4gIH1cblxuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoID09PSBcIi9cIiA/IHBhdGggOiBjb21waWxlUGF0aChwYXRoKShwYXJhbXMsIHtcbiAgICBwcmV0dHk6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJlZGlyZWN0KF9yZWYpIHtcbiAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBfcmVmJHB1c2ggPSBfcmVmLnB1c2gsXG4gICAgICBwdXNoID0gX3JlZiRwdXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkcHVzaDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuXG4gICAgICAgIGlmICghbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgcGF0aDogb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuICB2YXIgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG4gIHJldHVybiBwYXRocy5yZWR1Y2UoZnVuY3Rpb24gKG1hdGNoZWQsIHBhdGgpIHtcbiAgICBpZiAoIXBhdGggJiYgcGF0aCAhPT0gXCJcIikgcmV0dXJuIG51bGw7XG4gICAgaWYgKG1hdGNoZWQpIHJldHVybiBtYXRjaGVkO1xuXG4gICAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoJDEocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmVcbiAgICB9KSxcbiAgICAgICAgcmVnZXhwID0gX2NvbXBpbGVQYXRoLnJlZ2V4cCxcbiAgICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gICAgdmFyIG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG4gICAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuICAgIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAvLyB0aGUgcGF0aCB1c2VkIHRvIG1hdGNoXG4gICAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLFxuICAgICAgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgICBpc0V4YWN0OiBpc0V4YWN0LFxuICAgICAgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHBhdGgpIHtcbiAgdmFyIHZhbHVlID0gY2hpbGRyZW4ocHJvcHMpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHZhbHVlICE9PSB1bmRlZmluZWQsIFwiWW91IHJldHVybmVkIGB1bmRlZmluZWRgIGZyb20gdGhlIGBjaGlsZHJlbmAgZnVuY3Rpb24gb2YgXCIgKyAoXCI8Um91dGVcIiArIChwYXRoID8gXCIgcGF0aD1cXFwiXCIgKyBwYXRoICsgXCJcXFwiXCIgOiBcIlwiKSArIFwiPiwgYnV0IHlvdSBcIikgKyBcInNob3VsZCBoYXZlIHJldHVybmVkIGEgUmVhY3QgZWxlbWVudCBvciBgbnVsbGBcIikgOiB2b2lkIDA7XG4gIHJldHVybiB2YWx1ZSB8fCBudWxsO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cblxudmFyIFJvdXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JDEpIHtcbiAgICAgICFjb250ZXh0JDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQkMS5sb2NhdGlvbjtcbiAgICAgIHZhciBtYXRjaCA9IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggPyBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgOiBfdGhpcy5wcm9wcy5wYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfdGhpcy5wcm9wcykgOiBjb250ZXh0JDEubWF0Y2g7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBjb250ZXh0JDEsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogbWF0Y2hcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICByZW5kZXIgPSBfdGhpcyRwcm9wcy5yZW5kZXI7IC8vIFByZWFjdCB1c2VzIGFuIGVtcHR5IGFycmF5IGFzIGNoaWxkcmVuIGJ5XG4gICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9wc1xuICAgICAgfSwgcHJvcHMubWF0Y2ggPyBjaGlsZHJlbiA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBjaGlsZHJlbiA6IGNvbXBvbmVudCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiByZW5kZXIgPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGUucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gJiYgIWlzVmFsaWRFbGVtZW50VHlwZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgJ2NvbXBvbmVudCcgc3VwcGxpZWQgdG8gJ1JvdXRlJzogdGhlIHByb3AgaXMgbm90IGEgdmFsaWQgUmVhY3QgY29tcG9uZW50XCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXSksXG4gICAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLmNvbXBvbmVudCksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn1cblxuZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxuXG52YXIgU3RhdGljUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUFVTSFwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUkVQTEFDRVwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdGF0aWNSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5uYXZpZ2F0ZVRvID0gZnVuY3Rpb24gbmF2aWdhdGVUbyhsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMkYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wcyRjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMkY29udGV4dDtcbiAgICBjb250ZXh0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMiRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzMiRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMiRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzMiRjb250ZXh0LFxuICAgICAgICBfdGhpcyRwcm9wczIkbG9jYXRpb24gPSBfdGhpcyRwcm9wczIubG9jYXRpb24sXG4gICAgICAgIGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyJGxvY2F0aW9uID09PSB2b2lkIDAgPyBcIi9cIiA6IF90aGlzJHByb3BzMiRsb2NhdGlvbixcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYmFzZW5hbWVcIiwgXCJjb250ZXh0XCIsIFwibG9jYXRpb25cIl0pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBmdW5jdGlvbiBjcmVhdGVIcmVmKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgICB9LFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICAgIHZhciBlbGVtZW50LCBtYXRjaDsgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAgICAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuXG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuICAgICAgICAgIHZhciBwYXRoID0gY2hpbGQucHJvcHMucGF0aCB8fCBjaGlsZC5wcm9wcy5mcm9tO1xuICAgICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLCB7XG4gICAgICAgICAgICBwYXRoOiBwYXRoXG4gICAgICAgICAgfSkpIDogY29udGV4dC5tYXRjaDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxcIiArIGRpc3BsYXlOYW1lICsgXCIgLz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCBjb250ZXh0LCB7XG4gICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBDLnByb3BUeXBlcyA9IHtcbiAgICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufVxuXG52YXIgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5mdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlSGlzdG9yeSgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGhpc3RvcnlDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KS5sb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVBhcmFtcygpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VSb3V0ZU1hdGNoKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHBhdGgpIDogbWF0Y2g7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZ2xvYmFsID0gd2luZG93O1xuICAgIHZhciBrZXkgPSBcIl9fcmVhY3Rfcm91dGVyX2J1aWxkX19cIjtcbiAgICB2YXIgYnVpbGROYW1lcyA9IHtcbiAgICAgIGNqczogXCJDb21tb25KU1wiLFxuICAgICAgZXNtOiBcIkVTIG1vZHVsZXNcIixcbiAgICAgIHVtZDogXCJVTURcIlxuICAgIH07XG5cbiAgICBpZiAoZ2xvYmFsW2tleV0gJiYgZ2xvYmFsW2tleV0gIT09IFwiZXNtXCIpIHtcbiAgICAgIHZhciBpbml0aWFsQnVpbGROYW1lID0gYnVpbGROYW1lc1tnbG9iYWxba2V5XV07XG4gICAgICB2YXIgc2Vjb25kYXJ5QnVpbGROYW1lID0gYnVpbGROYW1lc1tcImVzbVwiXTsgLy8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbiAgICAgIC8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGxvYWRpbmcgdGhlIFwiICsgc2Vjb25kYXJ5QnVpbGROYW1lICsgXCIgYnVpbGQgb2YgUmVhY3QgUm91dGVyIFwiICsgKFwib24gYSBwYWdlIHRoYXQgaXMgYWxyZWFkeSBydW5uaW5nIHRoZSBcIiArIGluaXRpYWxCdWlsZE5hbWUgKyBcIiBcIikgKyBcImJ1aWxkLCBzbyB0aGluZ3Mgd29uJ3Qgd29yayByaWdodC5cIik7XG4gICAgfVxuXG4gICAgZ2xvYmFsW2tleV0gPSBcImVzbVwiO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGhpc3RvcnlDb250ZXh0IGFzIF9fSGlzdG9yeUNvbnRleHQsIGNvbnRleHQgYXMgX19Sb3V0ZXJDb250ZXh0LCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLmpzLm1hcFxuIiwiaW1wb3J0IHsgUm91dGVyLCBfX1JvdXRlckNvbnRleHQsIG1hdGNoUGF0aCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVCcm93c2VySGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciByZXNvbHZlVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcbnZhciBub3JtYWxpemVUb0xvY2F0aW9uID0gZnVuY3Rpb24gbm9ybWFsaXplVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcblxudmFyIGZvcndhcmRSZWZTaGltID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxudmFyIExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIG5hdmlnYXRlID0gX3JlZi5uYXZpZ2F0ZSxcbiAgICAgIF9vbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImlubmVyUmVmXCIsIFwibmF2aWdhdGVcIiwgXCJvbkNsaWNrXCJdKTtcblxuICB2YXIgdGFyZ2V0ID0gcmVzdC50YXJnZXQ7XG5cbiAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX29uQ2xpY2spIF9vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRocm93IGV4O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICB9IGVsc2Uge1xuICAgIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICB9XG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnQgKi9cblxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBwcm9wcyk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rQW5jaG9yLmRpc3BsYXlOYW1lID0gXCJMaW5rQW5jaG9yXCI7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG5cbnZhciBMaW5rID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZjIsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZjIkY29tcG9uZW50ID0gX3JlZjIuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3JlZjIkY29tcG9uZW50ID09PSB2b2lkIDAgPyBMaW5rQW5jaG9yIDogX3JlZjIkY29tcG9uZW50LFxuICAgICAgcmVwbGFjZSA9IF9yZWYyLnJlcGxhY2UsXG4gICAgICB0byA9IF9yZWYyLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmMi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiY29tcG9uZW50XCIsIFwicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBtZXRob2QgPSByZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSk7XG4gIHZhciByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiByZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGZvcndhcmRSZWZTaGltJDEgPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYkMSA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiQxID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYkMSA9IGZvcndhcmRSZWZTaGltJDE7XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NuYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc25hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbnZhciBOYXZMaW5rID0gZm9yd2FyZFJlZiQxKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmUsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIHN0eWxlUHJvcCA9IF9yZWYuc3R5bGUsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXJpYS1jdXJyZW50XCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJleGFjdFwiLCBcImlzQWN0aXZlXCIsIFwibG9jYXRpb25cIiwgXCJzZW5zaXRpdmVcIiwgXCJzdHJpY3RcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uUHJvcCB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgIHZhciB0b0xvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSwgY3VycmVudExvY2F0aW9uKTtcbiAgICB2YXIgcGF0aCA9IHRvTG9jYXRpb24ucGF0aG5hbWU7IC8vIFJlZ2V4IHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL21hc3Rlci9pbmRleC5qcyNMMjAyXG5cbiAgICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuICAgIHZhciBtYXRjaCA9IGVzY2FwZWRQYXRoID8gbWF0Y2hQYXRoKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwge1xuICAgICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgICBleGFjdDogZXhhY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdDogc3RyaWN0XG4gICAgfSkgOiBudWxsO1xuICAgIHZhciBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcCA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKSA6IG1hdGNoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpIDogY2xhc3NOYW1lUHJvcDtcbiAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIHt9LCBhY3RpdmVTdHlsZSkgOiBzdHlsZVByb3A7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG4gIHZhciBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci1kb20uanMubWFwXG4iLCJleHBvcnQgY29uc3QgQVBQX0RPTUFJTiA9IHByb2Nlc3MuZW52LkFQUF9ET01BSU4gfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MCc7XG5cbi8vIFRPRE86IFJlbW92ZVxuZXhwb3J0IGRlZmF1bHQgQVBQX0RPTUFJTjtcbiIsImltcG9ydCBSZWFjdCwgeyBNb3VzZUV2ZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBBUFBfRE9NQUlOIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL2RvbWFpbic7XG5cbmNvbnN0IEdpdEh1Yk9BdXRoQW5jaG9yOiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgY29uc3QgQ0xJRU5UX0lEID0gcHJvY2Vzcy5lbnYuR0lUSFVCX09BVVRIX0NMSUVOVF9JRDtcbiAgY29uc3QgT0FVVEhfUkVESVJFQ1RfVVJMID0gYCR7QVBQX0RPTUFJTn0vb2F1dGhgO1xuICBjb25zdCBPQVVUSF9MT0dJTl9VUkwgPSBgaHR0cHM6Ly9naXRodWIuY29tL2xvZ2luL29hdXRoL2F1dGhvcml6ZT9jbGllbnRfaWQ9JHtDTElFTlRfSUR9JnJlZGlyZWN0X3VyaT0ke09BVVRIX1JFRElSRUNUX1VSTH1gO1xuXG4gIGNvbnN0IGhhbmRsZUNsaWNrTG9naW4gPSAoZTogTW91c2VFdmVudDxIVE1MQW5jaG9yRWxlbWVudD4pID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB3aW5kb3cub3BlbihPQVVUSF9MT0dJTl9VUkwpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGEgaHJlZj17T0FVVEhfTE9HSU5fVVJMfSBvbkNsaWNrPXtoYW5kbGVDbGlja0xvZ2lufT5Mb2dpbjwvYT5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEdpdEh1Yk9BdXRoQW5jaG9yO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEdpdEh1Yk9BdXRoQW5jaG9yIGZyb20gJy4uL2NvbXBvbmVudHMvTG9naW4vR2l0SHViT0F1dGhBbmNob3InO1xuXG5pbXBvcnQgQVBQX0RPTUFJTiBmcm9tICcuLi9jb25zdGFudHMvZG9tYWluJztcblxuY29uc3QgTG9naW5QYWdlOiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVQb3N0TWVzc2FnZSA9IChldmVudDogTWVzc2FnZUV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQub3JpZ2luICE9PSBBUFBfRE9NQUlOKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBhY2Nlc3NUb2tlbiB9ID0gZXZlbnQuZGF0YTtcblxuICAgICAgaWYgKGFjY2Vzc1Rva2VuKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdhY2Nlc3NUb2tlbicsIGFjY2Vzc1Rva2VuKTtcbiAgICAgIH1cblxuICAgICAgLy8gVG9kbzog7LaU7ZuEIOuUlOyekOyduCDsmYTro4zrkJjrqbQg7Jes6riw7IScIOy2lOqwgOyggeyduCDsspjrpqxcbiAgICB9O1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBoYW5kbGVQb3N0TWVzc2FnZSwgZmFsc2UpO1xuICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGhhbmRsZVBvc3RNZXNzYWdlLCBmYWxzZSk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gPEdpdEh1Yk9BdXRoQW5jaG9yIC8+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTG9naW5QYWdlO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdyYXBocWwsIHVzZUxhenlMb2FkUXVlcnkgfSBmcm9tICdyZWFjdC1yZWxheSc7XG5pbXBvcnQgeyB1c2VMb2NhdGlvbiB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5pbXBvcnQgd2l0aFN1c3BlbnNlIGZyb20gJy4uL2hvY3Mvd2l0aFN1c3BlbnNlJztcbmltcG9ydCB7IExvZ2luQ2FsbGJhY2tQYWdlUXVlcnkgfSBmcm9tICcuLi9fX2dlbmVyYXRlZF9fL0xvZ2luQ2FsbGJhY2tQYWdlUXVlcnkuZ3JhcGhxbCc7XG5cbmltcG9ydCBBUFBfRE9NQUlOIGZyb20gJy4uL2NvbnN0YW50cy9kb21haW4nO1xuXG5jb25zdCBMb2dpbkNhbGxiYWNrUGFnZTogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IHsgc2VhcmNoIH0gPSB1c2VMb2NhdGlvbigpO1xuICBjb25zdCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlYXJjaCk7XG4gIGNvbnN0IGNvZGUgPSBzZWFyY2hQYXJhbXMuZ2V0KCdjb2RlJykgfHwgJyc7XG5cbiAgY29uc3QgcXVlcnkgPSB1c2VMYXp5TG9hZFF1ZXJ5PExvZ2luQ2FsbGJhY2tQYWdlUXVlcnk+KGdyYXBocWxgXG4gICAgbXV0YXRpb24gTG9naW5DYWxsYmFja1BhZ2VRdWVyeSgkY29kZTogU3RyaW5nISkge1xuICAgICAgbG9naW4oY29kZTogJGNvZGUpIHtcbiAgICAgICAgYWNjZXNzVG9rZW5cbiAgICAgIH1cbiAgICB9XG4gIGAsIHsgY29kZSB9KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHsgYWNjZXNzVG9rZW4gfSA9IHF1ZXJ5LmxvZ2luO1xuXG4gICAgd2luZG93Lm9wZW5lcj8ucG9zdE1lc3NhZ2UoeyBhY2Nlc3NUb2tlbiB9LCBBUFBfRE9NQUlOKTtcbiAgICB3aW5kb3cuY2xvc2UoKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFN1c3BlbnNlKExvZ2luQ2FsbGJhY2tQYWdlLCAoKSA9PiA8ZGl2PuuhnOuUqeykkS4uLjwvZGl2Pik7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50VHlwZSwgU3VzcGVuc2UgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IHdpdGhTdXNwZW5zZSA9IChDb21wOiBDb21wb25lbnRUeXBlLCBGYWxsYmFjazogQ29tcG9uZW50VHlwZSkgPT4ge1xuICBjb25zdCBXaXRoU3VzcGVuc2UgPSAoKSA9PiAoXG4gICAgPFN1c3BlbnNlIGZhbGxiYWNrPXs8RmFsbGJhY2sgLz59PlxuICAgICAgPENvbXAgLz5cbiAgICA8L1N1c3BlbnNlPlxuICApO1xuXG4gIHJldHVybiBXaXRoU3VzcGVuc2U7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3VzcGVuc2U7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlRnJhZ21lbnRDb250YWluZXIsIGdyYXBocWwgfSBmcm9tICdyZWFjdC1yZWxheSc7XG5cbmltcG9ydCB7IFF1ZXN0aW9uX3F1ZXN0aW9uIH0gZnJvbSAnX19nZW5lcmF0ZWRfXy9RdWVzdGlvbl9xdWVzdGlvbi5ncmFwaHFsJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcXVlc3Rpb246IFF1ZXN0aW9uX3F1ZXN0aW9uXG59XG5cbmNvbnN0IFF1ZXN0aW9uOiBSZWFjdC5GQzxQcm9wcz4gPSAoeyBxdWVzdGlvbiB9KSA9PiAoXG4gIDxzZWN0aW9uPlxuICAgIDxoMj5cbiAgICAgIOusuOygnCAjXG4gICAgICB7cXVlc3Rpb24uaWR9XG4gICAgPC9oMj5cbiAgICA8cD5cbiAgICAgIOygnOuqqTpcbiAgICAgIHtxdWVzdGlvbi50aXRsZX1cbiAgICA8L3A+XG4gICAgPHA+XG4gICAgICDrgrTsmqk6XG4gICAgICB7cXVlc3Rpb24uY29udGVudH1cbiAgICA8L3A+XG4gIDwvc2VjdGlvbj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyKFF1ZXN0aW9uLCB7XG4gIHF1ZXN0aW9uOiBncmFwaHFsYFxuICAgIGZyYWdtZW50IFF1ZXN0aW9uX3F1ZXN0aW9uIG9uIFF1ZXN0aW9ue1xuICAgICAgaWRcbiAgICAgIHRpdGxlXG4gICAgICBjb250ZW50XG4gICAgfVxuICBgLFxufSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUXVlcnlSZW5kZXJlciwgZ3JhcGhxbCB9IGZyb20gJ3JlYWN0LXJlbGF5JztcblxuaW1wb3J0IEVudmlyb25tZW50IGZyb20gJy4uL2dyYXBocWwnO1xuaW1wb3J0IHsgRXhhbXBsZVBhZ2VRdWVyeSB9IGZyb20gJy4uL19fZ2VuZXJhdGVkX18vRXhhbXBsZVBhZ2VRdWVyeS5ncmFwaHFsJztcblxuaW1wb3J0IFF1ZXN0aW9uIGZyb20gJy4uL2NvbXBvbmVudHMvRXhhbXBsZS9RdWVzdGlvbic7XG5cbmltcG9ydCB3aXRoRXhhbXBsZSBmcm9tICcuLi9ob2NzL3dpdGhFeGFtcGxlJztcblxuY29uc3QgRXhhbXBsZVBhZ2U6IFJlYWN0LkZDID0gKCkgPT4gKFxuICA8UXVlcnlSZW5kZXJlcjxFeGFtcGxlUGFnZVF1ZXJ5PlxuICAgIGVudmlyb25tZW50PXtFbnZpcm9ubWVudH1cbiAgICBxdWVyeT17Z3JhcGhxbGBcbiAgICAgIHF1ZXJ5IEV4YW1wbGVQYWdlUXVlcnkge1xuICAgICAgICBhbGxRdWVzdGlvbnMge1xuICAgICAgICAgIGlkXG4gICAgICAgICAgLi4uUXVlc3Rpb25fcXVlc3Rpb25cbiAgICAgICAgfVxuICAgICAgfVxuICAgIGB9XG4gICAgdmFyaWFibGVzPXt7fX1cbiAgICByZW5kZXI9eyh7IGVycm9yLCBwcm9wcyB9KSA9PiB7XG4gICAgICBpZiAoIXByb3BzKSB7XG4gICAgICAgIHJldHVybiA8ZGl2Pi4uLuuhnOuUqeykkTwvZGl2PjtcbiAgICAgIH1cblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiA8ZGl2Pi4uLuyXkOufrOuwnOyDnTwvZGl2PjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICB7cHJvcHMuYWxsUXVlc3Rpb25zLm1hcCgocXVlc3Rpb24pID0+IDxRdWVzdGlvbiBxdWVzdGlvbj17cXVlc3Rpb259IC8+KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH19XG4gIC8+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoRXhhbXBsZShFeGFtcGxlUGFnZSk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50VHlwZSB9IGZyb20gJ3JlYWN0JztcblxuY29uc3Qgd2l0aEV4YW1wbGUgPSAoQ29tcDogQ29tcG9uZW50VHlwZSkgPT4ge1xuICBjb25zdCBXaXRoRXhhbXBsZSA9ICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnZXhhbXBsZSBIT0MgY2FsbGVkJyk7XG5cbiAgICByZXR1cm4gPENvbXAgLz47XG4gIH07XG5cbiAgcmV0dXJuIFdpdGhFeGFtcGxlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aEV4YW1wbGU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlRnJhZ21lbnRDb250YWluZXIsIGdyYXBocWwgfSBmcm9tICdyZWFjdC1yZWxheSc7XG5cbmltcG9ydCB7IENvbW1lbnRfY29tbWVudCB9IGZyb20gJ19fZ2VuZXJhdGVkX18vQ29tbWVudF9jb21tZW50LmdyYXBocWwnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjb21tZW50OiBDb21tZW50X2NvbW1lbnRcbn1cblxuY29uc3QgQ29tbWVudDogUmVhY3QuRkM8UHJvcHM+ID0gKHsgY29tbWVudCB9KSA9PiAoXG4gIDxzZWN0aW9uPlxuICAgIDxkaXY+XG4gICAgICDsnKDsoIAgOlxuICAgICAgeycgJ31cbiAgICAgIHtjb21tZW50LnVzZXJFbWFpbH1cbiAgICA8L2Rpdj5cbiAgICA8ZGl2PlxuICAgICAge2NvbW1lbnQuY29udGVudH1cbiAgICA8L2Rpdj5cbiAgICA8ZGl2PlxuICAgICAg7KKL7JWE7JqUIDpcbiAgICAgIHsnICd9XG4gICAgICB7Y29tbWVudC5saWtlfVxuICAgIDwvZGl2PlxuICAgIDxkaXY+XG4gICAgICDsi6vslrTsmpQgOlxuICAgICAgeycgJ31cbiAgICAgIHtjb21tZW50LmRpc2xpa2V9XG4gICAgPC9kaXY+XG4gIDwvc2VjdGlvbj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyKENvbW1lbnQsIHtcbiAgY29tbWVudDogZ3JhcGhxbGBcbiAgICBmcmFnbWVudCBDb21tZW50X2NvbW1lbnQgb24gQ29tbWVudHtcbiAgICAgIGlkXG4gICAgICBxdWVzdGlvbklkXG4gICAgICBjcmVhdGVkQXRcbiAgICAgIHVzZXJFbWFpbFxuICAgICAgY29udGVudFxuICAgICAgbGlrZVxuICAgICAgZGlzbGlrZVxuICAgIH1cbiAgYCxcbn0pO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFF1ZXJ5UmVuZGVyZXIsIGdyYXBocWwgfSBmcm9tICdyZWFjdC1yZWxheSc7XG5cbmltcG9ydCBFbnZpcm9ubWVudCBmcm9tICcuLi9ncmFwaHFsJztcbmltcG9ydCB7IENvbW1lbnRQYWdlUXVlcnksIENvbW1lbnRQYWdlUXVlcnlSZXNwb25zZSB9IGZyb20gJy4uL19fZ2VuZXJhdGVkX18vQ29tbWVudFBhZ2VRdWVyeS5ncmFwaHFsJztcblxuaW1wb3J0IENvbW1lbnQgZnJvbSAnLi4vY29tcG9uZW50cy9FeGFtcGxlL0NvbW1lbnQnO1xuXG5pbnRlcmZhY2UgSVJlbmRlclF1ZXJ5IHtcbiAgZXJyb3I6IEVycm9yIHwgbnVsbDtcbiAgcHJvcHM6IENvbW1lbnRQYWdlUXVlcnlSZXNwb25zZSB8IG51bGw7XG59XG5cbmNvbnN0IHJlbmRlclF1ZXJ5ID0gKHsgZXJyb3IsIHByb3BzIH06IElSZW5kZXJRdWVyeSkgPT4ge1xuICBpZiAoIXByb3BzKSB7XG4gICAgcmV0dXJuIDxkaXY+Li4u66Gc65Sp7KSRPC9kaXY+O1xuICB9XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgcmV0dXJuIDxkaXY+Li4u7JeQ65+s67Cc7IOdPC9kaXY+O1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8c2VjdGlvbj5cbiAgICAgIDxoMj5cbiAgICAgICAg64yT6riAXG4gICAgICA8L2gyPlxuICAgICAge3Byb3BzLmNvbW1lbnRzLmxlbmd0aCA9PT0gMFxuICAgICAgICA/IDxwPuuMk+q4gOydtCDsl4bsirXri4jri6Q8L3A+XG4gICAgICAgIDogKFxuICAgICAgICAgIDxvbD5cbiAgICAgICAgICAgIHtwcm9wcy5jb21tZW50cy5tYXAoKGNvbW1lbnQpID0+IChcbiAgICAgICAgICAgICAgPGxpIGtleT17Y29tbWVudC5pZH0+XG4gICAgICAgICAgICAgICAgPENvbW1lbnQgY29tbWVudD17Y29tbWVudH0gLz5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvb2w+XG4gICAgICAgICl9XG4gICAgPC9zZWN0aW9uPlxuICApO1xufTtcblxuY29uc3QgQ29tbWVudFBhZ2U6IFJlYWN0LkZDID0gKCkgPT4gKFxuICA8UXVlcnlSZW5kZXJlcjxDb21tZW50UGFnZVF1ZXJ5PlxuICAgIGVudmlyb25tZW50PXtFbnZpcm9ubWVudH1cbiAgICBxdWVyeT17Z3JhcGhxbGBcbiAgICAgIHF1ZXJ5IENvbW1lbnRQYWdlUXVlcnkoJHF1ZXN0aW9uSWQ6IEludCkge1xuICAgICAgICBjb21tZW50cyhxdWVzdGlvbklkOiAkcXVlc3Rpb25JZCkge1xuICAgICAgICAgIGlkXG4gICAgICAgICAgLi4uQ29tbWVudF9jb21tZW50XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgfVxuICAgIHZhcmlhYmxlcz17e1xuICAgICAgcXVlc3Rpb25JZDogMSxcbiAgICB9fVxuICAgIHJlbmRlcj17cmVuZGVyUXVlcnl9XG4gIC8+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBDb21tZW50UGFnZTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIFN1c3BlbnNlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICBncmFwaHFsLCB1c2VRdWVyeUxvYWRlciwgdXNlUHJlbG9hZGVkUXVlcnksIFByZWxvYWRlZFF1ZXJ5LFxufSBmcm9tICdyZWFjdC1yZWxheS9ob29rcyc7XG5cbmltcG9ydCB7IEJvb2ttYXJrc1BhZ2VRdWVyeVR5cGUgfSBmcm9tICcuLi9fX2dlbmVyYXRlZF9fL0Jvb2ttYXJrc1BhZ2VRdWVyeS5ncmFwaHFsJztcblxuY29uc3QgYm9va21hcmtzUXVlcnkgPSBncmFwaHFsYFxuICBxdWVyeSBCb29rbWFya3NQYWdlUXVlcnkoJHVzZXJJZDogSW50ISkge1xuICAgIGJvb2ttYXJrcyh1c2VySWQ6ICR1c2VySWQpIHtcbiAgICAgIGlkXG4gICAgICBxdWVzdGlvbiB7XG4gICAgICAgIGNvbnRlbnRcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGJvb2ttYXJrc1F1ZXJ5UmVmOiBQcmVsb2FkZWRRdWVyeTxCb29rbWFya3NQYWdlUXVlcnlUeXBlPixcbn07XG5cbmNvbnN0IEJvb2ttYXJrcyA9ICh7IGJvb2ttYXJrc1F1ZXJ5UmVmIH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSB1c2VQcmVsb2FkZWRRdWVyeShib29rbWFya3NRdWVyeSwgYm9va21hcmtzUXVlcnlSZWYpO1xuXG4gIGNvbnN0IHsgYm9va21hcmtzIH0gPSBkYXRhO1xuXG4gIHJldHVybiAoXG4gICAgPHVsPlxuICAgICAge2Jvb2ttYXJrcy5tYXAoKGJvb2ttYXJrKSA9PiAoXG4gICAgICAgIDxsaSBrZXk9e2Jvb2ttYXJrLmlkfT5cbiAgICAgICAgICA8cD57YFEpICR7Ym9va21hcmsucXVlc3Rpb24uY29udGVudH1gfTwvcD5cbiAgICAgICAgPC9saT5cbiAgICAgICkpfVxuICAgIDwvdWw+XG4gICk7XG59O1xuXG5jb25zdCBCb29rbWFya3NQYWdlOiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgY29uc3QgW1xuICAgIGJvb2ttYXJrc1F1ZXJ5UmVmLCBsb2FkUXVlcnksIGRpc3Bvc2VRdWVyeSxcbiAgXSA9IHVzZVF1ZXJ5TG9hZGVyPEJvb2ttYXJrc1BhZ2VRdWVyeVR5cGU+KGJvb2ttYXJrc1F1ZXJ5KTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsb2FkUXVlcnkoe1xuICAgICAgdXNlcklkOiA0LCAvLyBUT0RPIDog64KY7KSR7JeQIO2ajOybkOuzhCDrtoHrp4jtgawg642w7J207YSwIOqwgOyguOyYpOuKlCDqsbjroZwg7IiY7KCV7ZW07JW8IOuQqFxuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkaXNwb3NlUXVlcnkoKTtcbiAgICB9O1xuICB9LCBbbG9hZFF1ZXJ5LCBkaXNwb3NlUXVlcnldKTtcblxuICBpZiAoYm9va21hcmtzUXVlcnlSZWYgPT09IG51bGwpIHJldHVybiBudWxsO1xuXG4gIHJldHVybiAoXG4gICAgPFN1c3BlbnNlIGZhbGxiYWNrPXs8cD5ib29rbWFya2xvYWRpbmc8L3A+fT5cbiAgICAgIDxCb29rbWFya3MgYm9va21hcmtzUXVlcnlSZWY9e2Jvb2ttYXJrc1F1ZXJ5UmVmfSAvPlxuICAgIDwvU3VzcGVuc2U+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBCb29rbWFya3NQYWdlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIEJyb3dzZXJSb3V0ZXIsIFN3aXRjaCwgUm91dGUsXG59IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5pbXBvcnQgTG9naW5QYWdlIGZyb20gJy4vcGFnZS9Mb2dpblBhZ2UnO1xuaW1wb3J0IExvZ2luQ2FsbGJhY2tQYWdlIGZyb20gJy4vcGFnZS9Mb2dpbkNhbGxiYWNrUGFnZSc7XG5pbXBvcnQgRXhhbXBsZVBhZ2UgZnJvbSAnLi9wYWdlL0V4YW1wbGVQYWdlJztcbmltcG9ydCBDb21tZW50UGFnZSBmcm9tICcuL3BhZ2UvQ29tbWVudFBhZ2UnO1xuaW1wb3J0IEJvb2ttYXJrc1BhZ2UgZnJvbSAnLi9wYWdlL0Jvb2ttYXJrc1BhZ2UnO1xuXG5jb25zdCBBcHA6IFJlYWN0LkZDID0gKCkgPT4gKFxuICA8QnJvd3NlclJvdXRlcj5cbiAgICA8U3dpdGNoPlxuICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCIgY29tcG9uZW50PXtFeGFtcGxlUGFnZX0gLz5cbiAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL2NvbW1lbnRcIiBjb21wb25lbnQ9e0NvbW1lbnRQYWdlfSAvPlxuICAgICAgPFJvdXRlIHBhdGg9XCIvbG9naW5cIiBjb21wb25lbnQ9e0xvZ2luUGFnZX0gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPVwiL29hdXRoXCIgY29tcG9uZW50PXtMb2dpbkNhbGxiYWNrUGFnZX0gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPVwiL2Jvb2ttYXJrc1wiIGNvbXBvbmVudD17Qm9va21hcmtzUGFnZX0gLz5cbiAgICA8L1N3aXRjaD5cbiAgPC9Ccm93c2VyUm91dGVyPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgUmVsYXlFbnZpcm9ubWVudFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVsYXknO1xuXG5pbXBvcnQgRW52aXJvbm1lbnQgZnJvbSAnLi9ncmFwaHFsJztcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xuXG5jb25zdCByb290RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyb290Jyk7XG5cblJlYWN0RE9NLnJlbmRlcihcbiAgPFJlbGF5RW52aXJvbm1lbnRQcm92aWRlciBlbnZpcm9ubWVudD17RW52aXJvbm1lbnR9PlxuICAgIDxBcHAgLz5cbiAgPC9SZWxheUVudmlyb25tZW50UHJvdmlkZXI+LFxuICByb290RWxlbWVudCxcbik7XG4iXSwic291cmNlUm9vdCI6IiJ9